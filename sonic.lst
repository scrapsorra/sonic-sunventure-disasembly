00000000                            ;  =========================================================================
00000000                            ; |           Sonic the Hedgehog Disassembly for Sega Mega Drive            |
00000000                            ;  =========================================================================
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx, Stealth and Esrael L.G. Neto
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            	include	"_s1smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000001                  SourceDriver = 1 ; Please don't modify the value.
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000 =0000000C                  psgdelta	EQU 12
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =00000088                  smpsPitch10lo	EQU $88
00000000 =00000094                  smpsPitch09lo	EQU $94
00000000 =000000A0                  smpsPitch08lo	EQU $A0
00000000 =000000AC                  smpsPitch07lo	EQU $AC
00000000 =000000B8                  smpsPitch06lo	EQU $B8
00000000 =000000C4                  smpsPitch05lo	EQU $C4
00000000 =000000D0                  smpsPitch04lo	EQU $D0
00000000 =000000DC                  smpsPitch03lo	EQU $DC
00000000 =000000E8                  smpsPitch02lo	EQU $E8
00000000 =000000F4                  smpsPitch01lo	EQU $F4
00000000 =00000000                  smpsPitch00		EQU $00
00000000 =0000000C                  smpsPitch01hi	EQU $0C
00000000 =00000018                  smpsPitch02hi	EQU $18
00000000 =00000024                  smpsPitch03hi	EQU $24
00000000 =00000030                  smpsPitch04hi	EQU $30
00000000 =0000003C                  smpsPitch05hi	EQU $3C
00000000 =00000048                  smpsPitch06hi	EQU $48
00000000 =00000054                  smpsPitch07hi	EQU $54
00000000 =00000060                  smpsPitch08hi	EQU $60
00000000 =0000006C                  smpsPitch09hi	EQU $6C
00000000 =00000078                  smpsPitch10hi	EQU $78
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst		EQU	$80
00000000 =00000081                  nC0			EQU	$81
00000000 =00000082                  nCs0		EQU	$82
00000000 =00000083                  nD0			EQU	$83
00000000 =00000084                  nEb0		EQU	$84
00000000 =00000085                  nE0			EQU	$85
00000000 =00000086                  nF0			EQU	$86
00000000 =00000087                  nFs0		EQU	$87
00000000 =00000088                  nG0			EQU	$88
00000000 =00000089                  nAb0		EQU	$89
00000000 =0000008A                  nA0			EQU	$8A
00000000 =0000008B                  nBb0		EQU	$8B
00000000 =0000008C                  nB0			EQU	$8C
00000000 =0000008D                  nC1			EQU	$8D
00000000 =0000008E                  nCs1		EQU	$8E
00000000 =0000008F                  nD1			EQU	$8F
00000000 =00000090                  nEb1		EQU	$90
00000000 =00000091                  nE1			EQU	$91
00000000 =00000092                  nF1			EQU	$92
00000000 =00000093                  nFs1		EQU	$93
00000000 =00000094                  nG1			EQU	$94
00000000 =00000095                  nAb1		EQU	$95
00000000 =00000096                  nA1			EQU	$96
00000000 =00000097                  nBb1		EQU	$97
00000000 =00000098                  nB1			EQU	$98
00000000 =00000099                  nC2			EQU	$99
00000000 =0000009A                  nCs2		EQU	$9A
00000000 =0000009B                  nD2			EQU	$9B
00000000 =0000009C                  nEb2		EQU	$9C
00000000 =0000009D                  nE2			EQU	$9D
00000000 =0000009E                  nF2			EQU	$9E
00000000 =0000009F                  nFs2		EQU	$9F
00000000 =000000A0                  nG2			EQU	$A0
00000000 =000000A1                  nAb2		EQU	$A1
00000000 =000000A2                  nA2			EQU	$A2
00000000 =000000A3                  nBb2		EQU	$A3
00000000 =000000A4                  nB2			EQU	$A4
00000000 =000000A5                  nC3			EQU	$A5
00000000 =000000A6                  nCs3		EQU	$A6
00000000 =000000A7                  nD3			EQU	$A7
00000000 =000000A8                  nEb3		EQU	$A8
00000000 =000000A9                  nE3			EQU	$A9
00000000 =000000AA                  nF3			EQU	$AA
00000000 =000000AB                  nFs3		EQU	$AB
00000000 =000000AC                  nG3			EQU	$AC
00000000 =000000AD                  nAb3		EQU	$AD
00000000 =000000AE                  nA3			EQU	$AE
00000000 =000000AF                  nBb3		EQU	$AF
00000000 =000000B0                  nB3			EQU	$B0
00000000 =000000B1                  nC4			EQU	$B1
00000000 =000000B2                  nCs4		EQU	$B2
00000000 =000000B3                  nD4			EQU	$B3
00000000 =000000B4                  nEb4		EQU	$B4
00000000 =000000B5                  nE4			EQU	$B5
00000000 =000000B6                  nF4			EQU	$B6
00000000 =000000B7                  nFs4		EQU	$B7
00000000 =000000B8                  nG4			EQU	$B8
00000000 =000000B9                  nAb4		EQU	$B9
00000000 =000000BA                  nA4			EQU	$BA
00000000 =000000BB                  nBb4		EQU	$BB
00000000 =000000BC                  nB4			EQU	$BC
00000000 =000000BD                  nC5			EQU	$BD
00000000 =000000BE                  nCs5		EQU	$BE
00000000 =000000BF                  nD5			EQU	$BF
00000000 =000000C0                  nEb5		EQU	$C0
00000000 =000000C1                  nE5			EQU	$C1
00000000 =000000C2                  nF5			EQU	$C2
00000000 =000000C3                  nFs5		EQU	$C3
00000000 =000000C4                  nG5			EQU	$C4
00000000 =000000C5                  nAb5		EQU	$C5
00000000 =000000C6                  nA5			EQU	$C6
00000000 =000000C7                  nBb5		EQU	$C7
00000000 =000000C8                  nB5			EQU	$C8
00000000 =000000C9                  nC6			EQU	$C9
00000000 =000000CA                  nCs6		EQU	$CA
00000000 =000000CB                  nD6			EQU	$CB
00000000 =000000CC                  nEb6		EQU	$CC
00000000 =000000CD                  nE6			EQU	$CD
00000000 =000000CE                  nF6			EQU	$CE
00000000 =000000CF                  nFs6		EQU	$CF
00000000 =000000D0                  nG6			EQU	$D0
00000000 =000000D1                  nAb6		EQU	$D1
00000000 =000000D2                  nA6			EQU	$D2
00000000 =000000D3                  nBb6		EQU	$D3
00000000 =000000D4                  nB6			EQU	$D4
00000000 =000000D5                  nC7			EQU	$D5
00000000 =000000D6                  nCs7		EQU	$D6
00000000 =000000D7                  nD7			EQU	$D7
00000000 =000000D8                  nEb7		EQU	$D8
00000000 =000000D9                  nE7			EQU	$D9
00000000 =000000DA                  nF7			EQU	$DA
00000000 =000000DB                  nFs7		EQU	$DB
00000000 =000000DC                  nG7			EQU	$DC
00000000 =000000DD                  nAb7		EQU	$DD
00000000 =000000DE                  nA7			EQU	$DE
00000000 =000000DF                  nBb7		EQU	$DF
00000000                            ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
00000000                            ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
00000000                            ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
00000000                            ; and ensure that the ending note is indeed the maximum PSG frequency.
00000000 =000000C6                  nMaxPSG				EQU nA5
00000000 =000000D2                  nMaxPSG1			EQU nA5+psgdelta
00000000 =000000D2                  nMaxPSG2			EQU nA5+psgdelta
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG Flutter Equates
00000000 =00000000                  fTone_00	EQU	$00
00000000 =00000001                  fTone_01	EQU	$01
00000000 =00000002                  fTone_02	EQU	$02
00000000 =00000003                  fTone_03	EQU	$03
00000000 =00000004                  fTone_04	EQU	$04
00000000 =00000005                  fTone_05	EQU	$05
00000000 =00000006                  fTone_06	EQU	$06
00000000 =00000007                  fTone_07	EQU	$07
00000000 =00000008                  fTone_08	EQU	$08
00000000 =00000009                  fTone_09	EQU	$09
00000000 =00000007                  fTone_0A	EQU	$07
00000000 =00000005                  fTone_0B	EQU	$05
00000000 =00000000                  fTone_0C	EQU	$00
00000000                            ;fTone_0D	EQU	$00
00000000 =00000002                  sTone_01	EQU	$02
00000000 =00000002                  sTone_02	EQU	$02
00000000 =00000005                  sTone_03	EQU	$05
00000000 =00000003                  sTone_04	EQU	$03
00000000 =00000001                  sTone_05	EQU	$01
00000000 =00000003                  sTone_06	EQU	$03
00000000 =00000000                  sTone_07	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_08	EQU	$09
00000000 =00000005                  sTone_09	EQU	$05
00000000 =00000007                  sTone_0A	EQU	$07
00000000 =00000000                  sTone_0B	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_0C	EQU	$09
00000000 =00000000                  sTone_0D	EQU	$00	; This time it matches 100%
00000000 =00000002                  sTone_0E	EQU	$02	; Duplicate of 01
00000000 =00000002                  sTone_0F	EQU	$02	; Duplicate of 02
00000000 =00000000                  sTone_10	EQU	$00
00000000 =00000006                  sTone_11	EQU	$06
00000000 =00000001                  sTone_12	EQU	$01	; Duplicate of 05
00000000 =00000003                  sTone_13	EQU	$03	; Duplicate of 06
00000000 =00000000                  sTone_14	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_15	EQU	$09	; Duplicate of 08
00000000 =00000005                  sTone_16	EQU	$05	; Duplicate of 09
00000000 =00000007                  sTone_17	EQU	$07	; Duplicate of 0A
00000000 =00000000                  sTone_18	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_19	EQU	$09	; Duplicate of 0C
00000000 =00000002                  sTone_1A	EQU	$02
00000000 =00000009                  sTone_1B	EQU	$09	; Duplicate of 0C
00000000 =00000006                  sTone_1C	EQU	$06
00000000 =00000007                  sTone_1D	EQU	$07
00000000 =00000002                  sTone_1E	EQU	$02
00000000 =00000004                  sTone_1F	EQU	$04
00000000 =00000000                  sTone_20	EQU	$00	; This time it matches 100%
00000000 =00000009                  sTone_21	EQU	$09
00000000 =00000004                  sTone_22	EQU	$04
00000000 =00000007                  sTone_23	EQU	$07
00000000 =00000002                  sTone_24	EQU	$02
00000000 =00000009                  sTone_25	EQU	$09
00000000 =00000007                  sTone_26	EQU	$07
00000000 =00000003                  sTone_27	EQU	$03
00000000                            ;sTone_28	EQU	$09
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick equ $81
00000000 =00000082                  dSnare equ $82
00000000 =00000085                  dCrashCymbal equ $85
00000000 =00000088                  dHiTimpani equ $88
00000000 =00000089                  dMidTimpani equ $89
00000000 =0000008A                  dLowTimpani equ $8A
00000000 =0000008B                  dFloorTimpani equ $8B
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Conversion macros and functions
00000000                            
00000000                            ;conv0To256  macro val 
00000000                            	;if val<$01
00000000                            		;dc.b (256-val+$FF)&$FF
00000000                            	;else	
00000000                            		;dc.b (256-val)&$FF	
00000000                            	;endc
00000000                            	;endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000                            smpsHeaderStartSong macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderStartSongConvert macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro div,mod
00000000                            	dc.b	div
00000000                            tempoDivider set div
00000000                            	dc.b    mod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if (narg=2)
00000000                            		dc.b	pitch
00000000                            		if (narg=3)
00000000                            			dc.b	vol
00000000                            		else
00000000                            			dc.b	$00
00000000                            		endif
00000000                            	else
00000000                            		dc.w	$00
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
00000000                            	endif
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	if (chanid&$80)<>0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            smpsDetune macro val
00000000                            	dc.b		$E1, val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000 =000000E6                  sVol	EQU $E6
00000000                            
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000 =000000E7                  smpsNA	EQU smpsNoAttack
00000000 =000000E7                  sNA	EQU smpsNoAttack
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            	dc.b	$E8,val
00000000                            	endm
00000000                            
00000000                            ; Add xx to channel pitch
00000000                            smpsAlterPitch macro val
00000000                            	dc.b	$E9,val
00000000                            	endm
00000000                            
00000000                            smpsChangeTransposition macro val
00000000                            	if SourceDriver>=3
00000000                            		dc.b	$FF,val
00000000                            	else
00000000                            		dc.b	$E9,val
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro val
00000000                            	dc.b	$EA
00000000                            	dc.b    val
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	fatal "Coord. Flag to set volume (instead of volume attenuation) does not exist in S1 or S2 drivers. Complain to Flamewing to add it."
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000 =000000EC                  spVol	EQU $EC
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            	dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; EFxx - Set Voice of FM channel to xx
00000000                            smpsFMvoice macro voice
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	wait+1,speed,change,(step*speed-1)&$FF
00000000                            	else
00000000                            		dc.b	wait,speed,change,step
00000000                            	endif
00000000                            	;dc.b	speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	dc.b	$E6,val1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; S1/S2 only coordination flag
00000000                            ; Sets D1L to maximum volume (minimum attenuation) and RR to maximum for operators 3 and 4 of FM1
00000000                            smpsWeirdD1LRR macro
00000000                            	dc.b	$F9
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set op1
00000000                            vcDT2 set op2
00000000                            vcDT3 set op3
00000000                            vcDT4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set op1
00000000                            vcCF2 set op2
00000000                            vcCF3 set op3
00000000                            vcCF4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set op1
00000000                            vcRS2 set op2
00000000                            vcRS3 set op3
00000000                            vcRS4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set op1
00000000                            vcAR2 set op2
00000000                            vcAR3 set op3
00000000                            vcAR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set op1
00000000                            vcAM2 set op2
00000000                            vcAM3 set op3
00000000                            vcAM4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set op1
00000000                            vcD1R2 set op2
00000000                            vcD1R3 set op3
00000000                            vcD1R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set op1
00000000                            vcD2R2 set op2
00000000                            vcD2R3 set op3
00000000                            vcD2R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set op1
00000000                            vcDL2 set op2
00000000                            vcDL3 set op3
00000000                            vcDL4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set op1
00000000                            vcRR2 set op2
00000000                            vcRR3 set op3
00000000                            vcRR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set op1
00000000                            vcTL2 set op2
00000000                            vcTL3 set op3
00000000                            vcTL4 set op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            	dc.b	(vcDT4<<4)+vcCF4, (vcDT3<<4)+vcCF3, (vcDT2<<4)+vcCF2, (vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4, (vcRS3<<6)+vcAR3, (vcRS2<<6)+vcAR2, (vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4, (vcAM3<<5)+vcD1R3, (vcAM2<<5)+vcD1R2, (vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4, vcD2R3, vcD2R2, vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4, (vcDL3<<4)+vcRR3, (vcDL2<<4)+vcRR2, (vcDL1<<4)+vcRR1
00000000                            	;dc.b	vcTL4|vcTLMask4, vcTL3|vcTLMask3, vcTL2|vcTLMask2, vcTL1|vcTLMask1
00000000                            	if vcAlgorithm=7
00000000                            		dc.b	op4|$80
00000000                            	else
00000000                            		dc.b	op4
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=4
00000000                            		dc.b    op3|$80
00000000                            	else
00000000                            		dc.b    op3
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=5
00000000                            		dc.b    op2|$80
00000000                            	else
00000000                            		dc.b    op2
00000000                            	endif
00000000                            		dc.b    op1|$80
00000000                            	endm
00000000                            
00000000                            
00000000                            	include	"Constants.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00006978                  Size_of_SegaPCM:		equ $6978
00000000                            
00000000                            ; VDP addressses
00000000 =00C00000                  vdp_data_port:		equ $C00000
00000000 =00C00004                  vdp_control_port:	equ $C00004
00000000 =00C00008                  vdp_counter:		equ $C00008
00000000                            
00000000 =00C00011                  psg_input:		equ $C00011
00000000                            
00000000                            ; Z80 addresses
00000000 =00A00000                  z80_ram:		equ $A00000	; start of Z80 RAM
00000000 =00A000EA                  z80_dac3_pitch:		equ $A000EA
00000000 =00A01FFD                  z80_dac_status:		equ $A01FFD
00000000 =00A01FFF                  z80_dac_sample:		equ $A01FFF
00000000 =00A02000                  z80_ram_end:		equ $A02000	; end of non-reserved Z80 RAM
00000000 =00A10001                  z80_version:		equ $A10001
00000000 =00A10002                  z80_port_1_data:	equ $A10002
00000000 =00A10008                  z80_port_1_control:	equ $A10008
00000000 =00A1000A                  z80_port_2_control:	equ $A1000A
00000000 =00A1000C                  z80_expansion_control:	equ $A1000C
00000000 =00A11100                  z80_bus_request:	equ $A11100
00000000 =00A11200                  z80_reset:		equ $A11200
00000000 =00A04000                  ym2612_a0:		equ $A04000
00000000 =00A04001                  ym2612_d0:		equ $A04001
00000000 =00A04002                  ym2612_a1:		equ $A04002
00000000 =00A04003                  ym2612_d1:		equ $A04003
00000000                            
00000000 =00A14000                  security_addr:		equ $A14000
00000000                            
00000000                            ; Sound driver constants
00000000 =00000000                  TrackPlaybackControl:	equ 0		; All tracks
00000000 =00000001                  TrackVoiceControl:	equ 1		; All tracks
00000000 =00000002                  TrackTempoDivider:	equ 2		; All tracks
00000000 =00000004                  TrackDataPointer:	equ 4		; All tracks (4 bytes)
00000000 =00000008                  TrackTranspose:		equ 8		; FM/PSG only (sometimes written to as a word, to include TrackVolume)
00000000 =00000009                  TrackVolume:		equ 9		; FM/PSG only
00000000 =0000000A                  TrackAMSFMSPan:		equ $A		; FM/DAC only
00000000 =0000000B                  TrackVoiceIndex:	equ $B		; FM/PSG only
00000000 =0000000C                  TrackVolEnvIndex:	equ $C		; PSG only
00000000 =0000000D                  TrackStackPointer:	equ $D		; All tracks
00000000 =0000000E                  TrackDurationTimeout:	equ $E		; All tracks
00000000 =0000000F                  TrackSavedDuration:	equ $F		; All tracks
00000000 =00000010                  TrackSavedDAC:		equ $10		; DAC only
00000000 =00000010                  TrackFreq:		equ $10		; FM/PSG only (2 bytes)
00000000 =00000012                  TrackNoteTimeout:	equ $12		; FM/PSG only
00000000 =00000013                  TrackNoteTimeoutMaster:equ $13		; FM/PSG only
00000000 =00000014                  TrackModulationPtr:	equ $14		; FM/PSG only (4 bytes)
00000000 =00000018                  TrackModulationWait:	equ $18		; FM/PSG only
00000000 =00000019                  TrackModulationSpeed:	equ $19		; FM/PSG only
00000000 =0000001A                  TrackModulationDelta:	equ $1A		; FM/PSG only
00000000 =0000001B                  TrackModulationSteps:	equ $1B		; FM/PSG only
00000000 =0000001C                  TrackModulationVal:	equ $1C		; FM/PSG only (2 bytes)
00000000 =0000001E                  TrackDetune:		equ $1E		; FM/PSG only
00000000 =0000001F                  TrackPSGNoise:		equ $1F		; PSG only
00000000 =0000001F                  TrackFeedbackAlgo:	equ $1F		; FM only
00000000 =00000020                  TrackVoicePtr:		equ $20		; FM SFX only (4 bytes)
00000000 =00000024                  TrackLoopCounters:	equ $24		; All tracks (multiple bytes)
00000000                            TrackGoSubStack:	equ TrackSz	; All tracks (multiple bytes. This constant won't get to be used because of an optimisation that just uses zTrackSz)
00000000                            
00000000 =00000030                  TrackSz:	equ $30
00000000                            
00000000                            ; VRAM data
00000000 =0000C000                  vram_fg:	equ $C000	; foreground namespace
00000000 =0000E000                  vram_bg:	equ $E000	; background namespace
00000000 =0000F000                  vram_sonic:	equ $F000	; Sonic graphics
00000000 =0000F800                  vram_sprites:	equ $F800	; sprite table
00000000 =0000FC00                  vram_hscroll:	equ $FC00	; horizontal scroll table
00000000                            
00000000                            ; Game modes
00000000                            id_Sega:	equ ptr_GM_Sega-GameModeArray	; $00
00000000                            id_Title:	equ ptr_GM_Title-GameModeArray	; $04
00000000                            id_Demo:	equ ptr_GM_Demo-GameModeArray	; $08
00000000                            id_Level:	equ ptr_GM_Level-GameModeArray	; $0C
00000000                            id_Special:	equ ptr_GM_Special-GameModeArray; $10
00000000                            id_Continue:	equ ptr_GM_Cont-GameModeArray	; $14
00000000                            id_Ending:	equ ptr_GM_Ending-GameModeArray	; $18
00000000                            id_Credits:	equ ptr_GM_Credits-GameModeArray; $1C
00000000                            
00000000                            ; Levels
00000000 =00000000                  id_GHZ:		equ 0
00000000 =00000001                  id_LZ:		equ 1
00000000 =00000002                  id_MZ:		equ 2
00000000 =00000003                  id_SLZ:		equ 3
00000000 =00000004                  id_SYZ:		equ 4
00000000 =00000005                  id_SBZ:		equ 5
00000000 =00000006                  id_EndZ:	equ 6
00000000 =00000007                  id_SS:		equ 7
00000000                            
00000000                            ; colors
00000000 =00000000                  cBlack:		equ $000		; color black
00000000 =00000EEE                  cWhite:		equ $EEE		; color white
00000000 =00000E00                  cBlue:		equ $E00		; color blue
00000000 =000000E0                  cGreen:		equ $0E0		; color green
00000000 =0000000E                  cRed:		equ $00E		; color red
00000000 =000000EE                  cYellow:	equ cGreen+cRed		; color yellow
00000000 =00000EE0                  cAqua:		equ cGreen+cBlue	; color aqua
00000000 =00000E0E                  cMagenta:	equ cBlue+cRed		; color magenta
00000000                            
00000000                            ; Joypad input
00000000 =00000080                  btnStart:	equ %10000000 ; Start button	($80)
00000000 =00000040                  btnA:		equ %01000000 ; A		($40)
00000000 =00000020                  btnC:		equ %00100000 ; C		($20)
00000000 =00000010                  btnB:		equ %00010000 ; B		($10)
00000000 =00000008                  btnR:		equ %00001000 ; Right		($08)
00000000 =00000004                  btnL:		equ %00000100 ; Left		($04)
00000000 =00000002                  btnDn:		equ %00000010 ; Down		($02)
00000000 =00000001                  btnUp:		equ %00000001 ; Up		($01)
00000000 =0000000F                  btnDir:		equ %00001111 ; Any direction	($0F)
00000000 =00000070                  btnABC:		equ %01110000 ; A, B or C	($70)
00000000 =00000007                  bitStart:	equ 7
00000000 =00000006                  bitA:		equ 6
00000000 =00000005                  bitC:		equ 5
00000000 =00000004                  bitB:		equ 4
00000000 =00000003                  bitR:		equ 3
00000000 =00000002                  bitL:		equ 2
00000000 =00000001                  bitDn:		equ 1
00000000 =00000000                  bitUp:		equ 0
00000000                            
00000000                            ; Object variables
00000000 =00000001                  obRender:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  obGfx:		equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  obMap:		equ 4	; mappings address (4 bytes)
00000000 =00000008                  obX:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000A                  obScreenY:	equ $A	; y-axis position for screen-fixed items (2 bytes)
00000000 =0000000C                  obY:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  obVelX:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  obVelY:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000020                  obInertia:	equ $20	; potential speed (2 bytes)
00000000 =00000016                  obHeight:	equ $16	; height/2
00000000 =00000017                  obWidth:	equ $17	; width/2
00000000 =00000018                  obPriority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  obActWid:	equ $14	; action width
00000000 =0000001A                  obFrame:	equ $1A	; current frame displayed
00000000 =0000001B                  obAniFrame:	equ $1B	; current frame in animation script
00000000 =0000001C                  obAnim:		equ $1C	; current animation
00000000 =0000001D                  obNextAni:	equ $1D	; next animation
00000000 =0000001E                  obTimeFrame:	equ $1E	; time to next frame
00000000 =0000001F                  obDelayAni:	equ $1F	; time to delay animation
00000000 =00000020                  obColType:	equ $20	; collision response type
00000000 =00000021                  obColProp:	equ $21	; collision extra property
00000000 =00000022                  obStatus:	equ $22	; orientation or mode
00000000 =00000023                  obRespawnNo:	equ $23	; respawn list index number
00000000 =00000024                  obRoutine:	equ $24	; routine number
00000000 =00000025                  ob2ndRout:	equ $25	; secondary routine number
00000000 =00000026                  obAngle:	equ $26	; angle
00000000 =00000028                  obSubtype:	equ $28	; object subtype
00000000 =00000025                  obSolid:	equ ob2ndRout ; solid status flag
00000000                            
00000000                            ; Object variables used by Sonic
00000000 =00000030                  flashtime:	equ $30	; time between flashes after getting hit
00000000 =00000032                  invtime:	equ $32	; time left for invincibility
00000000 =00000034                  shoetime:	equ $34	; time left for speed shoes
00000000                            
00000000                            ; Shield variables
00000000 =00000033                  shield_LastLoadedDPLC:    equ $33
00000000 =0000003C                  shield_DPLC_Address:    equ $3C
00000000 =00000038                  shield_Art_Address:    equ $38
00000000 =00000036                  shield_vram_art:    equ $36
00000000                            
00000000                            ; Object variables (Sonic 2 disassembly nomenclature)
00000000 =00000001                  render_flags:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  art_tile:	equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  mappings:	equ 4	; mappings address (4 bytes)
00000000 =00000008                  x_pos:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000C                  y_pos:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  x_vel:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  y_vel:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000016                  y_radius:	equ $16	; height/2
00000000 =00000017                  x_radius:	equ $17	; width/2
00000000 =00000018                  priority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  width_pixels:	equ $14	; action width
00000000 =0000001A                  mapping_frame:	equ $1A	; current frame displayed
00000000 =0000001B                  anim_frame:	equ $1B	; current frame in animation script
00000000 =0000001C                  anim:		equ $1C	; current animation
00000000 =0000001D                  next_anim:	equ $1D	; next animation
00000000 =0000001E                  anim_frame_duration: equ $1E ; time to next frame
00000000 =00000020                  collision_flags: equ $20 ; collision response type
00000000 =00000021                  collision_property: equ $21 ; collision extra property
00000000 =00000022                  status:		equ $22	; orientation or mode
00000000 =00000023                  respawn_index:	equ $23	; respawn list index number
00000000 =00000024                  routine:	equ $24	; routine number
00000000 =00000025                  routine_secondary: equ $25 ; secondary routine number
00000000 =00000026                  angle:		equ $26	; angle
00000000 =00000028                  subtype:	equ $28	; object subtype
00000000                            
00000000                            ; Animation flags
00000000 =000000FF                  afEnd:		equ $FF	; return to beginning of animation
00000000 =000000FE                  afBack:		equ $FE	; go back (specified number) bytes
00000000 =000000FD                  afChange:	equ $FD	; run specified animation
00000000 =000000FC                  afRoutine:	equ $FC	; increment routine counter
00000000 =000000FB                  afReset:	equ $FB	; reset animation and 2nd object routine counter
00000000 =000000FA                  af2ndRoutine:	equ $FA	; increment 2nd routine counter
00000000                            
00000000                            
00000000 =0000000B                  mainspr_mapframe    = $B
00000000 =0000000E                  mainspr_width        = $E
00000000 =0000000F                  mainspr_childsprites     = $F    ; amount of child sprites
00000000 =00000014                  mainspr_height        = $14
00000000 =00000010                  sub2_x_pos        = $10    ;x_vel
00000000 =00000012                  sub2_y_pos        = $12    ;y_vel
00000000 =00000015                  sub2_mapframe        = $15
00000000 =00000016                  sub3_x_pos        = $16    ;y_radius
00000000 =00000018                  sub3_y_pos        = $18    ;priority
00000000 =0000001B                  sub3_mapframe        = $1B    ;anim_frame
00000000 =0000001C                  sub4_x_pos        = $1C    ;anim
00000000 =0000001E                  sub4_y_pos        = $1E    ;anim_frame_duration
00000000 =00000021                  sub4_mapframe        = $21    ;collision_property
00000000 =00000022                  sub5_x_pos        = $22    ;status
00000000 =00000024                  sub5_y_pos        = $24    ;routine
00000000 =00000027                  sub5_mapframe        = $27
00000000 =00000028                  sub6_x_pos        = $28    ;subtype
00000000 =0000002A                  sub6_y_pos        = $2A
00000000 =0000002D                  sub6_mapframe        = $2D
00000000 =0000002E                  sub7_x_pos        = $2E
00000000 =00000030                  sub7_y_pos        = $30
00000000 =00000033                  sub7_mapframe        = $33
00000000 =00000034                  sub8_x_pos        = $34
00000000 =00000036                  sub8_y_pos        = $36
00000000 =00000039                  sub8_mapframe        = $39
00000000 =0000003A                  sub9_x_pos        = $3A
00000000 =0000003C                  sub9_y_pos        = $3C
00000000 =0000003F                  sub9_mapframe        = $3F
00000000 =00000006                  next_subspr       = $6
00000000                            
00000000                            ; Background music
00000000 =00000081                  bgm__First:	equ $81
00000000                            bgm_GHZ:	equ ((ptr_mus81-MusicIndex)/4)+bgm__First
00000000                            bgm_LZ:		equ ((ptr_mus82-MusicIndex)/4)+bgm__First
00000000                            bgm_MZ:		equ ((ptr_mus83-MusicIndex)/4)+bgm__First
00000000                            bgm_SLZ:	equ ((ptr_mus84-MusicIndex)/4)+bgm__First
00000000                            bgm_SYZ:	equ ((ptr_mus85-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ:	equ ((ptr_mus86-MusicIndex)/4)+bgm__First
00000000                            bgm_Invincible:	equ ((ptr_mus87-MusicIndex)/4)+bgm__First
00000000                            bgm_ExtraLife:	equ ((ptr_mus88-MusicIndex)/4)+bgm__First
00000000                            bgm_SS:		equ ((ptr_mus89-MusicIndex)/4)+bgm__First
00000000                            bgm_Title:	equ ((ptr_mus8A-MusicIndex)/4)+bgm__First
00000000                            bgm_Ending:	equ ((ptr_mus8B-MusicIndex)/4)+bgm__First
00000000                            bgm_Boss:	equ ((ptr_mus8C-MusicIndex)/4)+bgm__First
00000000                            bgm_FZ:		equ ((ptr_mus8D-MusicIndex)/4)+bgm__First
00000000                            bgm_GotThrough:	equ ((ptr_mus8E-MusicIndex)/4)+bgm__First
00000000                            bgm_GameOver:	equ ((ptr_mus8F-MusicIndex)/4)+bgm__First
00000000                            bgm_Continue:	equ ((ptr_mus90-MusicIndex)/4)+bgm__First
00000000                            bgm_Credits:	equ ((ptr_mus91-MusicIndex)/4)+bgm__First
00000000                            bgm_Drowning:	equ ((ptr_mus92-MusicIndex)/4)+bgm__First
00000000                            bgm_Emerald:	equ ((ptr_mus93-MusicIndex)/4)+bgm__First
00000000                            bgm_Pinch:		equ ((ptr_mus94-MusicIndex)/4)+bgm__First
00000000                            bgm_Seaside:	equ ((ptr_mus95-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ3:		equ ((ptr_mus96-MusicIndex)/4)+bgm__First
00000000                            bgm_TimeOver:	equ ((ptr_mus97-MusicIndex)/4)+bgm__First
00000000                            bgm_Options:	equ ((ptr_mus98-MusicIndex)/4)+bgm__First
00000000                            bgm_ToxicLandfill:	equ ((ptr_mus99-MusicIndex)/4)+bgm__First
00000000                            bgm_RRZ2:	equ ((ptr_mus9A-MusicIndex)/4)+bgm__First
00000000                            bgm_TTZBF:	equ ((ptr_mus9B-MusicIndex)/4)+bgm__First
00000000                            bgm_Tribute:	equ ((ptr_mus9C-MusicIndex)/4)+bgm__First
00000000                            bgm__Last:	equ ((ptr_musend-MusicIndex-4)/4)+bgm__First
00000000                            
00000000                            ; Sound effects
00000000 =000000A0                  sfx__First:	equ $A0
00000000                            sfx_Jump:	equ ((ptr_sndA0-SoundIndex)/4)+sfx__First
00000000                            sfx_Lamppost:	equ ((ptr_sndA1-SoundIndex)/4)+sfx__First
00000000                            sfx_A2:		equ ((ptr_sndA2-SoundIndex)/4)+sfx__First
00000000                            sfx_Death:	equ ((ptr_sndA3-SoundIndex)/4)+sfx__First
00000000                            sfx_Skid:	equ ((ptr_sndA4-SoundIndex)/4)+sfx__First
00000000                            sfx_LRingBox:	equ ((ptr_sndA5-SoundIndex)/4)+sfx__First
00000000                            sfx_HitSpikes:	equ ((ptr_sndA6-SoundIndex)/4)+sfx__First
00000000                            sfx_Push:	equ ((ptr_sndA7-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGoal:	equ ((ptr_sndA8-SoundIndex)/4)+sfx__First
00000000                            sfx_SSItem:	equ ((ptr_sndA9-SoundIndex)/4)+sfx__First
00000000                            sfx_Splash:	equ ((ptr_sndAA-SoundIndex)/4)+sfx__First
00000000                            sfx_FireShield:	equ ((ptr_FireShield-SoundIndex)/4)+sfx__First
00000000                            sfx_HitBoss:	equ ((ptr_sndAC-SoundIndex)/4)+sfx__First
00000000                            sfx_Bubble:	equ ((ptr_sndAD-SoundIndex)/4)+sfx__First
00000000                            sfx_Fireball:	equ ((ptr_sndAE-SoundIndex)/4)+sfx__First
00000000                            sfx_Shield:	equ ((ptr_sndAF-SoundIndex)/4)+sfx__First
00000000                            sfx_Saw:	equ ((ptr_sndB0-SoundIndex)/4)+sfx__First
00000000                            sfx_Electric:	equ ((ptr_sndB1-SoundIndex)/4)+sfx__First
00000000                            sfx_Drown:	equ ((ptr_sndB2-SoundIndex)/4)+sfx__First
00000000                            sfx_Flamethrower:equ ((ptr_sndB3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bumper:	equ ((ptr_sndB4-SoundIndex)/4)+sfx__First
00000000                            sfx_Ring:	equ ((ptr_sndB5-SoundIndex)/4)+sfx__First
00000000                            sfx_SpikesMove:	equ ((ptr_sndB6-SoundIndex)/4)+sfx__First
00000000                            sfx_Rumbling:	equ ((ptr_sndB7-SoundIndex)/4)+sfx__First
00000000                            sfx_B8:		equ ((ptr_sndB8-SoundIndex)/4)+sfx__First
00000000                            sfx_Collapse:	equ ((ptr_sndB9-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGlass:	equ ((ptr_sndBA-SoundIndex)/4)+sfx__First
00000000                            sfx_Door:	equ ((ptr_sndBB-SoundIndex)/4)+sfx__First
00000000                            sfx_Teleport:	equ ((ptr_sndBC-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainStomp:	equ ((ptr_sndBD-SoundIndex)/4)+sfx__First
00000000                            sfx_Roll:	equ ((ptr_sndBE-SoundIndex)/4)+sfx__First
00000000                            sfx_Continue:	equ ((ptr_sndBF-SoundIndex)/4)+sfx__First
00000000                            sfx_Basaran:	equ ((ptr_sndC0-SoundIndex)/4)+sfx__First
00000000                            sfx_BreakItem:	equ ((ptr_sndC1-SoundIndex)/4)+sfx__First
00000000                            sfx_Warning:	equ ((ptr_sndC2-SoundIndex)/4)+sfx__First
00000000                            sfx_GiantRing:	equ ((ptr_sndC3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bomb:	equ ((ptr_sndC4-SoundIndex)/4)+sfx__First
00000000                            sfx_Cash:	equ ((ptr_sndC5-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLoss:	equ ((ptr_sndC6-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainRise:	equ ((ptr_sndC7-SoundIndex)/4)+sfx__First
00000000                            sfx_Burning:	equ ((ptr_sndC8-SoundIndex)/4)+sfx__First
00000000                            sfx_Bonus:	equ ((ptr_sndC9-SoundIndex)/4)+sfx__First
00000000                            sfx_EnterSS:	equ ((ptr_sndCA-SoundIndex)/4)+sfx__First
00000000                            sfx_WallSmash:	equ ((ptr_sndCB-SoundIndex)/4)+sfx__First
00000000                            sfx_Spring:	equ ((ptr_sndCC-SoundIndex)/4)+sfx__First
00000000                            sfx_Switch:	equ ((ptr_sndCD-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLeft:	equ ((ptr_sndCE-SoundIndex)/4)+sfx__First
00000000                            sfx_Signpost:	equ ((ptr_sndCF-SoundIndex)/4)+sfx__First
00000000                            sfx__Last:	equ ((ptr_sndend-SoundIndex-4)/4)+sfx__First
00000000                            
00000000                            ; Special sound effects
00000000 =000000D0                  spec__First:	equ $D0
00000000                            sfx_Waterfall:	equ ((ptr_sndD0-SpecSoundIndex)/4)+spec__First
00000000                            sfx_LightningShield:	equ ((ptr_sndD1-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Peelout:	equ ((ptr_sndD2-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutRelease:	equ ((ptr_sndD3-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutStop:	equ ((ptr_sndD4-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Spindash:	equ ((ptr_sndD5-SpecSoundIndex)/4)+spec__First
00000000                            spec__Last:	equ ((ptr_specend-SpecSoundIndex-4)/4)+spec__First
00000000                            
00000000 =000000E0                  flg__First:	equ $E0
00000000                            bgm_Fade:	equ ((ptr_flgE0-Sound_ExIndex)/4)+flg__First
00000000                            sfx_Sega:	equ ((ptr_flgE1-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Speedup:	equ ((ptr_flgE2-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Slowdown:	equ ((ptr_flgE3-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Stop:	equ ((ptr_flgE4-Sound_ExIndex)/4)+flg__First
00000000                            flg__Last:	equ ((ptr_flgend-Sound_ExIndex-4)/4)+flg__First
00000000                            
00000000                            ; Sonic frame IDs
00000000 =00000000                  fr_Null:	equ 0
00000000 =00000001                  fr_Stand:	equ 1
00000000 =00000002                  fr_Blink:	equ 2
00000000 =00000003                  fr_Wait1:	equ 3
00000000 =00000004                  fr_Wait2:	equ 4
00000000 =00000005                  fr_Wait3:	equ 5
00000000 =00000006                  fr_Wait4:	equ 6
00000000 =00000007                  fr_Wait5:	equ 7
00000000 =00000008                  fr_Wait6:	equ 8
00000000 =00000009                  fr_Wait7:	equ 9
00000000 =0000000A                  fr_Wait8:	equ $A
00000000 =0000000B                  fr_Wait9:	equ $B
00000000 =0000000C                  fr_LookUp1:	equ $C
00000000 =0000000D                  fr_LookUp2:	equ $D
00000000 =0000000E                  fr_Walk11:	equ $E
00000000 =0000000F                  fr_Walk12:	equ $F
00000000 =00000010                  fr_Walk13:	equ $10
00000000 =00000011                  fr_Walk14:	equ $11
00000000 =00000012                  fr_Walk15:	equ $12
00000000 =00000013                  fr_Walk16:	equ $13
00000000 =00000014                  fr_Walk17:	equ $14
00000000 =00000015                  fr_Walk18:	equ $15
00000000 =00000016                  fr_Walk21:	equ $16
00000000 =00000017                  fr_Walk22:	equ $17
00000000 =00000018                  fr_Walk23:	equ $18
00000000 =00000019                  fr_Walk24:	equ $19
00000000 =0000001A                  fr_Walk25:	equ $1A
00000000 =0000001B                  fr_Walk26:	equ $1B
00000000 =0000001C                  fr_Walk27:	equ $1C
00000000 =0000001D                  fr_Walk28:	equ $1D
00000000 =0000001E                  fr_Walk31:	equ $1E
00000000 =0000001F                  fr_Walk32:	equ $1F
00000000 =00000020                  fr_Walk33:	equ $20
00000000 =00000021                  fr_Walk34:	equ $21
00000000 =00000022                  fr_Walk35:	equ $22
00000000 =00000023                  fr_Walk36:	equ $23
00000000 =00000024                  fr_Walk37:	equ $24
00000000 =00000025                  fr_Walk38:	equ $25
00000000 =00000026                  fr_Walk41:	equ $26
00000000 =00000027                  fr_Walk42:	equ $27
00000000 =00000028                  fr_Walk43:	equ $28
00000000 =00000029                  fr_Walk44:	equ $29
00000000 =0000002A                  fr_Walk45:	equ $2A
00000000 =0000002B                  fr_Walk46:	equ $2B
00000000 =0000002C                  fr_Walk47:	equ $2C
00000000 =0000002D                  fr_Walk48:	equ $2D
00000000 =0000002E                  fr_Run11:	equ $2E
00000000 =0000002F                  fr_Run12:	equ $2F
00000000 =00000030                  fr_Run13:	equ $30
00000000 =00000031                  fr_Run14:	equ $31
00000000 =00000032                  fr_Run15:	equ $32
00000000 =00000033                  fr_Run16:	equ $33
00000000 =00000034                  fr_Run17:	equ $34
00000000 =00000035                  fr_Run18:	equ $35
00000000 =00000036                  fr_Run21:	equ $36
00000000 =00000037                  fr_Run22:	equ $37
00000000 =00000038                  fr_Run23:	equ $38
00000000 =00000039                  fr_Run24:	equ $39
00000000 =0000003A                  fr_Run25:	equ $3A
00000000 =0000003B                  fr_Run26:	equ $3B
00000000 =0000003C                  fr_Run27:	equ $3C
00000000 =0000003D                  fr_Run28:	equ $3D
00000000 =0000003E                  fr_Run31:	equ $3E
00000000 =0000003F                  fr_Run32:	equ $3F
00000000 =00000040                  fr_Run33:	equ $40
00000000 =00000041                  fr_Run34:	equ $41
00000000 =00000042                  fr_Run35:	equ $42
00000000 =00000043                  fr_Run36:	equ $43
00000000 =00000044                  fr_Run37:	equ $44
00000000 =00000045                  fr_Run38:	equ $45
00000000 =00000046                  fr_Run41:	equ $46
00000000 =00000047                  fr_Run42:	equ $47
00000000 =00000048                  fr_Run43:	equ $48
00000000 =00000049                  fr_Run44:	equ $49
00000000 =0000004A                  fr_Run45:	equ $4A
00000000 =0000004B                  fr_Run46:	equ $4B
00000000 =0000004C                  fr_Run47:	equ $4C
00000000 =0000004D                  fr_Run48:	equ $4D
00000000 =0000004E                  fr_peelout11:	equ $4E
00000000 =0000004F                  fr_peelout12:	equ $4F
00000000 =00000050                  fr_peelout13:	equ $50
00000000 =00000051                  fr_peelout14:	equ $51
00000000 =00000052                  fr_peelout21:	equ $52
00000000 =00000053                  fr_peelout22:	equ $53
00000000 =00000054                  fr_peelout23:	equ $54
00000000 =00000055                  fr_peelout24:	equ $55
00000000 =00000056                  fr_peelout31:	equ $56
00000000 =00000057                  fr_peelout32:	equ $57
00000000 =00000058                  fr_peelout33:	equ $58
00000000 =00000059                  fr_peelout34:	equ $59
00000000 =0000005A                  fr_peelout41:	equ $5A
00000000 =0000005B                  fr_peelout42:	equ $5B
00000000 =0000005C                  fr_peelout43:	equ $5C
00000000 =0000005D                  fr_peelout44:	equ $5D
00000000 =0000005E                  fr_Roll1:	equ $5E
00000000 =00000060                  fr_Roll2:	equ $60
00000000 =00000062                  fr_Roll3:	equ $62
00000000 =00000064                  fr_Roll4:	equ $64
00000000 =00000066                  fr_Roll5:	equ $66
00000000 =0000005F                  fr_Roll6:	equ $5F
00000000 =00000061                  fr_Roll7:	equ $61
00000000 =00000063                  fr_Roll8:	equ $63
00000000 =00000065                  fr_Roll9:	equ $65
00000000 =00000067                  fr_Warp1:	equ $67
00000000 =00000068                  fr_Warp2:	equ $68
00000000 =00000069                  fr_Warp3:	equ $69
00000000 =0000006A                  fr_Warp4:	equ $6A
00000000 =0000006B                  fr_Stop1:	equ $6B
00000000 =0000006C                  fr_Stop2:	equ $6C
00000000 =0000006D                  fr_Stop3:	equ $6D
00000000 =0000006E                  fr_Stop4:	equ $6E
00000000 =0000006F                  fr_Leap3:	equ $6F
00000000 =00000070                  fr_Duck2:	equ $70
00000000 =00000071                  fr_Duck:	equ $71
00000000 =00000072                  fr_Balance1:	equ $72
00000000 =00000073                  fr_Balance2:	equ $73
00000000 =00000074                  fr_Balance3:	equ $74
00000000 =00000075                  fr_Balance4:	equ $75
00000000 =00000076                  fr_GetAir2:		equ $76
00000000 =00000077                  fr_VHang1:		equ $77
00000000 =00000078                  fr_VHang2:		equ $78
00000000 =00000079                  fr_Blank:		equ $79
00000000 =0000007A                  fr_Blank2:		equ $7A
00000000                            
00000000 =0000007C                  fr_Float1:	equ $7C
00000000 =0000007E                  fr_Float2:	equ $7E
00000000 =00000081                  fr_Float3:	equ $81
00000000 =00000082                  fr_Float4:	equ $82
00000000 =00000080                  fr_Float5:	equ $80
00000000 =0000007B                  fr_Float6:	equ $7B
00000000 =0000007D                  fr_float7:	equ $7D
00000000 =0000007F                  fr_float8:	equ $7F
00000000 =00000083                  fr_Spring:	equ $83
00000000 =00000084                  fr_Spring2:	equ $84
00000000 =00000085                  fr_Hang1:	equ $85
00000000 =00000086                  fr_Hang2:	equ $86
00000000 =00000087                  fr_Leap1:	equ $87
00000000 =00000088                  fr_Leap2:	equ $88
00000000 =00000089                  fr_Push1:	equ $89
00000000 =0000008A                  fr_Push2:	equ $8A
00000000 =0000008B                  fr_Push3:	equ $8B
00000000 =0000008C                  fr_Push4:	equ $8C
00000000 =0000008D                  fr_Push5:	equ $8D
00000000 =0000008E                  fr_Push6:	equ $8E
00000000 =0000008F                  fr_Push7:	equ $8F
00000000 =00000090                  fr_Push8:	equ $90
00000000 =00000091                  fr_Surf:	equ $91
00000000 =00000092                  fr_Burnt:	equ $92
00000000 =00000093                  fr_Drown:	equ $93
00000000 =00000094                  fr_Death:	equ $94
00000000 =00000095                  fr_GetAir:	equ $95
00000000 =00000096                  fr_Injury:	equ $96
00000000 =00000097                  fr_WaterSlide:	equ $97
00000000 =00000098                  fr_skele1:	equ $98
00000000 =00000099                  fr_skele2:	equ $99
00000000 =0000009A                  fr_hurtblue:	equ $9A
00000000 =0000009B                  fr_Spindash1	equ $9B
00000000 =0000009C                  fr_Spindash2	equ $9C
00000000 =0000009D                  fr_Spindash3	equ $9D
00000000 =0000009E                  fr_Spindash4	equ $9E
00000000 =0000009F                  fr_Spindash5	equ $9F
00000000 =000000A0                  fr_Spindash6	equ $A0
00000000 =000000A1                  fr_Transform1	equ	$A1
00000000 =000000A2                  fr_Transform2	equ	$A2
00000000 =000000A3                  fr_Transform3	equ	$A3
00000000 =000000A4                  fr_Transform4	equ	$A4
00000000 =000000A5                  fr_Transform5	equ	$A5
00000000 =000000A6                  fr_Transform6	equ	$A6
00000000 =000000A7                  fr_Transform7	equ	$A7
00000000 =000000A8                  fr_Transform8	equ	$A8
00000000 =000000A9                  fr_Transform9	equ	$A9
00000000 =000000A9                  fr_Transform9	equ	$A9
00000000                            	include	"Variables.asm"
00000000                            ; Variables (v) and Flags (f)
00000000                            
00000000 =FFFFFC00                  v_regbuffer:	equ $FFFFFC00	; stores registers d0-a7 during an error event ($40 bytes)
00000000 =FFFFFC40                  v_spbuffer:	equ $FFFFFC40	; stores most recent sp address (4 bytes)
00000000 =FFFFFC44                  v_errortype:	equ $FFFFFC44	; error type
00000000                            
00000000 =00FF0000                  v_256x256:	equ   $FF0000	; 256x256 tile mappings ($A400 bytes)
00000000 =FFFFA400                  v_lvllayout:	equ $FFFFA400	; level and background layouts ($400 bytes)
00000000 =FFFFA800                  v_bgscroll_buffer:	equ	$FFFFA800	; background scroll buffer ($200 bytes)
00000000 =FFFFAA00                  v_ngfx_buffer:	equ $FFFFAA00	; Nemesis graphics decompression buffer ($200 bytes)
00000000 =FFFFAC00                  v_spritequeue:	equ $FFFFAC00	; sprite display queue, in order of priority ($400 bytes)
00000000 =FFFFB000                  v_16x16:		equ $FFFFB000	; 16x16 tile mappings
00000000 =FFFFC800                  VDP_Command_Buffer:	equ $FFFFC800
00000000                            
00000000 =FFFFC8FC                  VDP_Command_Buffer_Slot:equ VDP_Command_Buffer+7*$12*2
00000000 =FFFFC800                  v_sgfx_buffer:	equ $FFFFC800	; buffered Sonic graphics ($17 cells) ($2E0 bytes)
00000000 =FFFFCB00                  v_tracksonic:	equ $FFFFCB00	; position tracking data for Sonic ($100 bytes)
00000000 =FFFFCC00                  v_hscrolltablebuffer:	equ $FFFFCC00 ; scrolling table data (actually $380 bytes, but $400 is reserved for it)
00000000 =FFFFD000                  v_objspace:	equ $FFFFD000	; object variable space ($40 bytes per object) ($2000 bytes)
00000000 =FFFFD000                  v_player:	equ v_objspace	; object variable space for Sonic ($40 bytes)
00000000 =FFFFD800                  v_lvlobjspace:	equ $FFFFD800	; level object variable space ($1800 bytes)
00000000 =FFFFF015                  v_palmuscounter:	equ $FFFFF015
00000000 =FFFFF000                  v_snddriver_ram:	equ $FFFFF000 ; start of RAM for the sound driver data ($5C0 bytes)
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, until otherwise stated, all offsets are relative to v_snddriver_ram
00000000                            ; =================================================================================
00000000 =00000000                  v_startofvariables:	equ $000
00000000 =00000000                  v_sndprio:		equ $000	; sound priority (priority of new music/SFX must be higher or equal to this value or it won't play; bit 7 of priority being set prevents this value from changing)
00000000 =00000001                  v_main_tempo_timeout:	equ $001	; Counts down to zero; when zero, resets to next value and delays song by 1 frame
00000000 =00000002                  v_main_tempo:		equ $002	; Used for music only
00000000 =00000003                  f_pausemusic:		equ $003	; flag set to stop music when paused
00000000 =00000004                  v_fadeout_counter:	equ $004
00000000                            
00000000 =00000006                  v_fadeout_delay:	equ $006
00000000 =00000007                  v_communication_byte:	equ $007	; used in Ristar to sync with a boss' attacks; unused here
00000000 =00000008                  f_updating_dac:		equ $008	; $80 if updating DAC, $00 otherwise
00000000 =00000009                  v_sound_id:		equ $009	; sound or music copied from below
00000000 =0000000A                  v_soundqueue0:		equ $00A	; sound or music to play
00000000 =0000000B                  v_soundqueue1:		equ $00B	; special sound to play
00000000 =0000000C                  v_soundqueue2:		equ $00C	; unused sound to play
00000000                            
00000000 =0000000E                  f_voice_selector:	equ $00E	; $00 = use music voice pointer; $40 = use special voice pointer; $80 = use track voice pointer
00000000                            
00000000 =00000018                  v_voice_ptr:		equ $018	; voice data pointer (4 bytes)
00000000                            
00000000 =00000020                  v_special_voice_ptr:	equ $020	; voice data pointer for special SFX ($D0-$DF) (4 bytes)
00000000                            
00000000 =00000024                  f_fadein_flag:		equ $024	; Flag for fade in
00000000 =00000025                  v_fadein_delay:		equ $025
00000000 =00000026                  v_fadein_counter:	equ $026	; Timer for fade in/out
00000000 =00000027                  f_1up_playing:		equ $027	; flag indicating 1-up song is playing
00000000 =00000028                  v_tempo_mod:		equ $028	; music - tempo modifier
00000000 =00000029                  v_speeduptempo:		equ $029	; music - tempo modifier with speed shoes
00000000 =0000002A                  f_speedup:		equ $02A	; flag indicating whether speed shoes tempo is on ($80) or off ($00)
00000000 =0000002B                  v_ring_speaker:		equ $02B	; which speaker the "ring" sound is played in (00 = right; 01 = left)
00000000 =0000002C                  f_push_playing:		equ $02C	; if set, prevents further push sounds from playing
00000000                            
00000000 =00000040                  v_music_track_ram:	equ $040	; Start of music RAM
00000000                            
00000000 =00000040                  v_music_fmdac_tracks:	equ v_music_track_ram+TrackSz*0
00000000 =00000040                  v_music_dac_track:	equ v_music_fmdac_tracks+TrackSz*0
00000000 =00000070                  v_music_fm_tracks:	equ v_music_fmdac_tracks+TrackSz*1
00000000 =00000070                  v_music_fm1_track:	equ v_music_fm_tracks+TrackSz*0
00000000 =000000A0                  v_music_fm2_track:	equ v_music_fm_tracks+TrackSz*1
00000000 =000000D0                  v_music_fm3_track:	equ v_music_fm_tracks+TrackSz*2
00000000 =00000100                  v_music_fm4_track:	equ v_music_fm_tracks+TrackSz*3
00000000 =00000130                  v_music_fm5_track:	equ v_music_fm_tracks+TrackSz*4
00000000 =00000160                  v_music_fm6_track:	equ v_music_fm_tracks+TrackSz*5
00000000 =00000190                  v_music_fm_tracks_end:	equ v_music_fm_tracks+TrackSz*6
00000000 =00000190                  v_music_fmdac_tracks_end:	equ v_music_fm_tracks_end
00000000 =00000190                  v_music_psg_tracks:	equ v_music_fmdac_tracks_end
00000000 =00000190                  v_music_psg1_track:	equ v_music_psg_tracks+TrackSz*0
00000000 =000001C0                  v_music_psg2_track:	equ v_music_psg_tracks+TrackSz*1
00000000 =000001F0                  v_music_psg3_track:	equ v_music_psg_tracks+TrackSz*2
00000000 =00000220                  v_music_psg_tracks_end:	equ v_music_psg_tracks+TrackSz*3
00000000 =00000220                  v_music_track_ram_end:	equ v_music_psg_tracks_end
00000000                            
00000000 =00000220                  v_sfx_track_ram:	equ v_music_track_ram_end	; Start of SFX RAM, straight after the end of music RAM
00000000                            
00000000 =00000220                  v_sfx_fm_tracks:	equ v_sfx_track_ram+TrackSz*0
00000000 =00000220                  v_sfx_fm3_track:	equ v_sfx_fm_tracks+TrackSz*0
00000000 =00000250                  v_sfx_fm4_track:	equ v_sfx_fm_tracks+TrackSz*1
00000000 =00000280                  v_sfx_fm5_track:	equ v_sfx_fm_tracks+TrackSz*2
00000000 =000002B0                  v_sfx_fm_tracks_end:	equ v_sfx_fm_tracks+TrackSz*3
00000000 =000002B0                  v_sfx_psg_tracks:	equ v_sfx_fm_tracks_end
00000000 =000002B0                  v_sfx_psg1_track:	equ v_sfx_psg_tracks+TrackSz*0
00000000 =000002E0                  v_sfx_psg2_track:	equ v_sfx_psg_tracks+TrackSz*1
00000000 =00000310                  v_sfx_psg3_track:	equ v_sfx_psg_tracks+TrackSz*2
00000000 =00000340                  v_sfx_psg_tracks_end:	equ v_sfx_psg_tracks+TrackSz*3
00000000 =00000340                  v_sfx_track_ram_end:	equ v_sfx_psg_tracks_end
00000000                            
00000000 =00000340                  v_spcsfx_track_ram:	equ v_sfx_track_ram_end	; Start of special SFX RAM, straight after the end of SFX RAM
00000000                            
00000000 =00000340                  v_spcsfx_fm4_track:	equ v_spcsfx_track_ram+TrackSz*0
00000000 =00000370                  v_spcsfx_psg3_track:	equ v_spcsfx_track_ram+TrackSz*1
00000000 =000003A0                  v_spcsfx_track_ram_end:	equ v_spcsfx_track_ram+TrackSz*2
00000000                            
00000000 =000003A0                  v_1up_ram_copy:		equ v_spcsfx_track_ram_end
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, no longer relative to sound driver RAM
00000000                            ; =================================================================================
00000000                            
00000000 =FFFFF600                  v_gamemode:	equ $FFFFF600	; game mode (00=Sega; 04=Title; 08=Demo; 0C=Level; 10=SS; 14=Cont; 18=End; 1C=Credit; +8C=PreLevel)
00000000 =FFFFF602                  v_jpadhold2:	equ $FFFFF602	; joypad input - held, duplicate
00000000 =FFFFF603                  v_jpadpress2:	equ $FFFFF603	; joypad input - pressed, duplicate
00000000 =FFFFF604                  v_jpadhold1:	equ $FFFFF604	; joypad input - held
00000000 =FFFFF605                  v_jpadpress1:	equ $FFFFF605	; joypad input - pressed
00000000 =FFFFF608                  v_loadhud:		equ	$FFFFF608
00000000 =FFFFF60C                  v_vdp_buffer1:	equ $FFFFF60C	; VDP instruction buffer (2 bytes)
00000000                            
00000000 =FFFFF614                  v_demolength:	equ $FFFFF614	; the length of a demo in frames (2 bytes)
00000000 =FFFFF616                  v_scrposy_dup:	equ $FFFFF616	; screen position y (duplicate) (2 bytes)
00000000 =FFFFF618                  v_bgscrposy_dup:	equ $FFFFF618	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFF61A                  v_scrposx_dup:	equ $FFFFF61A	; screen position x (duplicate) (2 bytes)
00000000 =FFFFF61C                  v_bgscreenposx_dup_unused:	equ $FFFFF61C	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFF61E                  v_bg3screenposy_dup_unused:	equ $FFFFF61E	; (2 bytes)
00000000 =FFFFF620                  v_bg3screenposx_dup_unused:	equ $FFFFF620	; (2 bytes)
00000000                            
00000000 =FFFFF624                  v_hbla_hreg:	equ $FFFFF624	; VDP H.interrupt register buffer (8Axx) (2 bytes)
00000000 =FFFFF625                  v_hbla_line:	equ $FFFFF625	; screen line where water starts and palette is changed by HBlank
00000000 =FFFFF626                  v_pfade_start:	equ $FFFFF626	; palette fading - start position in bytes
00000000 =FFFFF627                  v_pfade_size:	equ $FFFFF627	; palette fading - number of colors
00000000 =FFFFF62A                  v_vbla_routine:	equ $FFFFF62A	; VBlank - routine counter
00000000 =FFFFF62C                  v_spritecount:	equ $FFFFF62C	; number of sprites on-screen
00000000 =FFFFF632                  v_pcyc_num:	equ $FFFFF632	; palette cycling - current reference number (2 bytes)
00000000 =FFFFF634                  v_pcyc_time:	equ $FFFFF634	; palette cycling - time until the next change (2 bytes)
00000000 =FFFFF636                  v_random:	equ $FFFFF636	; pseudo random number buffer (4 bytes)
00000000 =FFFFF63A                  f_pause:		equ $FFFFF63A	; flag set to pause the game (2 bytes)
00000000 =FFFFF640                  v_vdp_buffer2:	equ $FFFFF640	; VDP instruction buffer (2 bytes)
00000000 =FFFFF644                  f_hbla_pal:	equ $FFFFF644	; flag set to change palette during HBlank (0000 = no; 0001 = change) (2 bytes)
00000000 =FFFFF646                  v_waterpos1:	equ $FFFFF646	; water height, actual (2 bytes)
00000000 =FFFFF648                  v_waterpos2:	equ $FFFFF648	; water height, ignoring sway (2 bytes)
00000000 =FFFFF64A                  v_waterpos3:	equ $FFFFF64A	; water height, next target (2 bytes)
00000000 =FFFFF64C                  f_water:		equ $FFFFF64C	; flag set for water
00000000 =FFFFF64D                  v_wtr_routine:	equ $FFFFF64D	; water event - routine counter
00000000 =FFFFF64E                  f_wtr_state:	equ $FFFFF64E	; water palette state when water is above/below the screen (00 = partly/all dry; 01 = all underwater)
00000000                            
00000000 =FFFFF650                  v_pal_buffer:	equ $FFFFF650	; palette data buffer (used for palette cycling) ($30 bytes)
00000000 =FFFFF680                  v_plc_buffer:	equ $FFFFF680	; pattern load cues buffer (maximum $10 PLCs) ($60 bytes)
00000000 =FFFFF6E0                  v_ptrnemcode:	equ $FFFFF6E0	; pointer for nemesis decompression code ($1502 or $150C) (4 bytes)
00000000                            
00000000 =FFFFF6F8                  f_plc_execute:	equ $FFFFF6F8	; flag set for pattern load cue execution (2 bytes)
00000000                            
00000000 =FFFFF700                  v_screenposx:	equ $FFFFF700	; screen position x (2 bytes)
00000000 =FFFFF704                  v_screenposy:	equ $FFFFF704	; screen position y (2 bytes)
00000000 =FFFFF708                  v_bgscreenposx:	equ $FFFFF708	; background screen position x (2 bytes)
00000000 =FFFFF70C                  v_bgscreenposy:	equ $FFFFF70C	; background screen position y (2 bytes)
00000000 =FFFFF710                  v_bg2screenposx:	equ $FFFFF710	; 2 bytes
00000000 =FFFFF714                  v_bg2screenposy:	equ $FFFFF714	; 2 bytes
00000000 =FFFFF718                  v_bg3screenposx:	equ $FFFFF718	; 2 bytes
00000000 =FFFFF71C                  v_bg3screenposy:	equ $FFFFF71C	; 2 bytes
00000000                            
00000000 =FFFFF720                  v_limitleft1:	equ $FFFFF720	; left level boundary (2 bytes)
00000000 =FFFFF722                  v_limitright1:	equ $FFFFF722	; right level boundary (2 bytes)
00000000 =FFFFF724                  v_limittop1:	equ $FFFFF724	; top level boundary (2 bytes)
00000000 =FFFFF726                  v_limitbtm1:	equ $FFFFF726	; bottom level boundary (2 bytes)
00000000 =FFFFF728                  v_limitleft2:	equ $FFFFF728	; left level boundary (2 bytes)
00000000 =FFFFF72A                  v_limitright2:	equ $FFFFF72A	; right level boundary (2 bytes)
00000000 =FFFFF72C                  v_limittop2:	equ $FFFFF72C	; top level boundary (2 bytes)
00000000 =FFFFF72E                  v_limitbtm2:	equ $FFFFF72E	; bottom level boundary (2 bytes)
00000000                            
00000000 =FFFFF732                  v_limitleft3:	equ $FFFFF732	; left level boundary, at the end of an act (2 bytes)
00000000                            
00000000 =FFFFF73A                  v_scrshiftx:	equ $FFFFF73A	; x-screen shift (new - last) * $100
00000000 =FFFFF73C                  v_scrshifty:	equ $FFFFF73C	; y-screen shift (new - last) * $100
00000000                            
00000000 =FFFFF73E                  v_lookshift:	equ $FFFFF73E	; screen shift when Sonic looks up/down (2 bytes)
00000000 =FFFFF742                  v_dle_routine:	equ $FFFFF742	; dynamic level event - routine counter
00000000 =FFFFF744                  f_nobgscroll:	equ $FFFFF744	; flag set to cancel background scrolling
00000000                            
00000000 =FFFFF74A                  v_fg_xblock:	equ	$FFFFF74A	; foreground x-block parity (for redraw)
00000000 =FFFFF74B                  v_fg_yblock:	equ	$FFFFF74B	; foreground y-block parity (for redraw)
00000000 =FFFFF74C                  v_bg1_xblock:	equ	$FFFFF74C	; background x-block parity (for redraw)
00000000 =FFFFF74D                  v_bg1_yblock:	equ	$FFFFF74D	; background y-block parity (for redraw)
00000000 =FFFFF74E                  v_bg2_xblock:	equ	$FFFFF74E	; secondary background x-block parity (for redraw)
00000000 =FFFFF74F                  v_bg2_yblock:	equ	$FFFFF74F	; secondary background y-block parity (unused)
00000000 =FFFFF750                  v_bg3_xblock:	equ	$FFFFF750	; teritary background x-block parity (for redraw)
00000000 =FFFFF751                  v_bg3_yblock:	equ	$FFFFF751	; teritary background y-block parity (unused)
00000000                            
00000000 =FFFFF754                  v_fg_scroll_flags:	equ $FFFFF754	; screen redraw flags for foreground
00000000 =FFFFF756                  v_bg1_scroll_flags:	equ $FFFFF756	; screen redraw flags for background 1
00000000 =FFFFF758                  v_bg2_scroll_flags:	equ $FFFFF758	; screen redraw flags for background 2
00000000 =FFFFF75A                  v_bg3_scroll_flags:	equ $FFFFF75A	; screen redraw flags for background 3
00000000 =FFFFF75C                  f_bgscrollvert:	equ $FFFFF75C	; flag for vertical background scrolling
00000000 =FFFFF760                  v_sonspeedmax:	equ $FFFFF760	; Sonic's maximum speed (2 bytes)
00000000 =FFFFF762                  v_sonspeedacc:	equ $FFFFF762	; Sonic's acceleration (2 bytes)
00000000 =FFFFF764                  v_sonspeeddec:	equ $FFFFF764	; Sonic's deceleration (2 bytes)
00000000 =FFFFF766                  v_sonframenum:	equ $FFFFF766	; frame to display for Sonic
00000000 =FFFFF767                  f_sonframechg:	equ $FFFFF767	; flag set to update Sonic's sprite frame
00000000 =FFFFF768                  v_anglebuffer:	equ $FFFFF768	; angle of collision block that Sonic or object is standing on
00000000                            
00000000 =FFFFF76C                  v_opl_routine:	equ $FFFFF76C	; ObjPosLoad - routine counter
00000000 =FFFFF76E                  v_opl_screen:	equ $FFFFF76E	; ObjPosLoad - screen variable
00000000 =FFFFF770                  v_opl_data:	equ $FFFFF770	; ObjPosLoad - data buffer ($10 bytes)
00000000                            
00000000 =FFFFF780                  v_ssangle:	equ $FFFFF780	; Special Stage angle (2 bytes)
00000000 =FFFFF782                  v_ssrotate:	equ $FFFFF782	; Special Stage rotation speed (2 bytes)
00000000 =FFFFF790                  v_btnpushtime1:	equ $FFFFF790	; button push duration - in level (2 bytes)
00000000 =FFFFF792                  v_btnpushtime2:	equ $FFFFF792	; button push duration - in demo (2 bytes)
00000000 =FFFFF794                  v_palchgspeed:	equ $FFFFF794	; palette fade/transition speed (0 is fastest) (2 bytes)
00000000 =FFFFF796                  v_collindex:	equ $FFFFF796	; ROM address for collision index of current level (4 bytes)
00000000 =FFFFF79A                  v_palss_num:	equ $FFFFF79A	; palette cycling in Special Stage - reference number (2 bytes)
00000000 =FFFFF79C                  v_palss_time:	equ $FFFFF79C	; palette cycling in Special Stage - time until next change (2 bytes)
00000000                            
00000000 =FFFFF7A0                  v_camera_pan:	equ $FFFFF7A0    ; Extended Camera - how far the camera/view is panned to the left or right of Sonic (2 bytes)
00000000                            
00000000 =FFFFF7A4                  v_obj31ypos:	equ $FFFFF7A4	; y-position of object 31 (MZ stomper) (2 bytes)
00000000 =FFFFF7A7                  v_bossstatus:	equ $FFFFF7A7	; status of boss and prison capsule (01 = boss defeated; 02 = prison opened)
00000000 =FFFFF7A8                  v_trackpos:	equ $FFFFF7A8	; position tracking reference number (2 bytes)
00000000 =FFFFF7A9                  v_trackbyte:	equ $FFFFF7A9	; low byte for position tracking
00000000 =FFFFF7AA                  f_lockscreen:	equ $FFFFF7AA	; flag set to lock screen during bosses
00000000 =FFFFF7AC                  v_256loop1:	equ $FFFFF7AC	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AD                  v_256loop2:	equ $FFFFF7AD	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AE                  v_256roll1:	equ $FFFFF7AE	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7AF                  v_256roll2:	equ $FFFFF7AF	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7B0                  v_lani0_frame:	equ $FFFFF7B0	; level graphics animation 0 - current frame
00000000 =FFFFF7B1                  v_lani0_time:	equ $FFFFF7B1	; level graphics animation 0 - time until next frame
00000000 =FFFFF7B2                  v_lani1_frame:	equ $FFFFF7B2	; level graphics animation 1 - current frame
00000000 =FFFFF7B3                  v_lani1_time:	equ $FFFFF7B3	; level graphics animation 1 - time until next frame
00000000 =FFFFF7B4                  v_lani2_frame:	equ $FFFFF7B4	; level graphics animation 2 - current frame
00000000 =FFFFF7B5                  v_lani2_time:	equ $FFFFF7B5	; level graphics animation 2 - time until next frame
00000000 =FFFFF7B6                  v_lani3_frame:	equ $FFFFF7B6	; level graphics animation 3 - current frame
00000000 =FFFFF7B7                  v_lani3_time:	equ $FFFFF7B7	; level graphics animation 3 - time until next frame
00000000 =FFFFF7B8                  v_lani4_frame:	equ $FFFFF7B8	; level graphics animation 4 - current frame
00000000 =FFFFF7B9                  v_lani4_time:	equ $FFFFF7B9	; level graphics animation 4 - time until next frame
00000000 =FFFFF7BA                  v_lani5_frame:	equ $FFFFF7BA	; level graphics animation 5 - current frame
00000000 =FFFFF7BB                  v_lani5_time:	equ $FFFFF7BB	; level graphics animation 5 - time until next frame
00000000 =FFFFF7BE                  v_gfxbigring:	equ $FFFFF7BE	; settings for giant ring graphics loading (2 bytes)
00000000 =FFFFF7C0                  f_conveyrev:	equ $FFFFF7C0	; flag set to reverse conveyor belts in LZ/SBZ
00000000 =FFFFF7C1                  v_obj63:		equ $FFFFF7C1	; object 63 (LZ/SBZ platforms) variables (6 bytes)
00000000 =FFFFF7C7                  f_wtunnelmode:	equ $FFFFF7C7	; LZ water tunnel mode
00000000 =FFFFF7C8                  f_lockmulti:	equ $FFFFF7C8	; flag set to lock controls, lock Sonic's position & animation
00000000 =FFFFF7C9                  f_wtunnelallow:	equ $FFFFF7C9	; LZ water tunnels (00 = enabled; 01 = disabled)
00000000 =FFFFF7CA                  f_jumponly:	equ $FFFFF7CA	; flag set to lock controls apart from jumping
00000000 =FFFFF7CB                  v_obj6B:		equ $FFFFF7CB	; object 6B (SBZ stomper) variable
00000000 =FFFFF7CC                  f_lockctrl:	equ $FFFFF7CC	; flag set to lock controls during ending sequence
00000000 =FFFFF7CD                  f_bigring:	equ $FFFFF7CD	; flag set when Sonic collects the giant ring
00000000 =FFFFF7D0                  v_itembonus:	equ $FFFFF7D0	; item bonus from broken enemies, blocks etc. (2 bytes)
00000000 =FFFFF7D2                  v_timebonus:	equ $FFFFF7D2	; time bonus at the end of an act (2 bytes)
00000000 =FFFFF7D4                  v_ringbonus:	equ $FFFFF7D4	; ring bonus at the end of an act (2 bytes)
00000000 =FFFFF7D6                  f_endactbonus:	equ $FFFFF7D6	; time/ring bonus update flag at the end of an act
00000000 =FFFFF7D7                  v_sonicend:	equ $FFFFF7D7	; routine counter for Sonic in the ending sequence
00000000 =FFFFF7D8                  v_lz_deform:	equ	$FFFFF7D8	; LZ deformtaion offset, in units of $80 (2 bytes)
00000000 =FFFFF7E0                  f_switch:	equ $FFFFF7E0	; flags set when Sonic stands on a switch ($10 bytes)
00000000 =FFFFF7F0                  v_scroll_block_1_size:	equ $FFFFF7F0	; (2 bytes)
00000000 =FFFFF7F2                  v_scroll_block_2_size:	equ $FFFFF7F2	; unused (2 bytes)
00000000 =FFFFF7F4                  v_scroll_block_3_size:	equ $FFFFF7F4	; unused (2 bytes)
00000000 =FFFFF7F6                  v_scroll_block_4_size:	equ $FFFFF7F6	; unused (2 bytes)
00000000                            
00000000 =FFFFF800                  v_spritetablebuffer:	equ $FFFFF800 ; sprite table ($280 bytes, last $80 bytes are overwritten by v_pal_water_dup)
00000000 =FFFFFA00                  v_pal_water_dup:	equ $FFFFFA00 ; duplicate underwater palette, used for transitions ($80 bytes)
00000000 =FFFFFA80                  v_pal_water:	equ $FFFFFA80	; main underwater palette ($80 bytes)
00000000 =FFFFFB00                  v_pal_dry:	equ $FFFFFB00	; main palette ($80 bytes)
00000000 =FFFFFB80                  v_pal_dry_dup:	equ $FFFFFB80	; duplicate palette, used for transitions ($80 bytes)
00000000 =FFFFFC00                  v_objstate:	equ $FFFFFC00	; object state list ($200 bytes)
00000000                            
00000000                            
00000000 =FFFFFE00                  v_systemstack:	equ $FFFFFE00
00000000 =FFFFFE02                  f_restart:	equ $FFFFFE02	; restart level flag (2 bytes)
00000000 =FFFFFE04                  v_framecount:	equ $FFFFFE04	; frame counter (adds 1 every frame) (2 bytes)
00000000 =FFFFFE05                  v_framebyte:	equ v_framecount+1; low byte for frame counter
00000000 =FFFFFE06                  v_debugitem:	equ $FFFFFE06	; debug item currently selected (NOT the object number of the item)
00000000 =FFFFFE08                  v_debuguse:	equ $FFFFFE08	; debug mode use & routine counter (when Sonic is a ring/item) (2 bytes)
00000000 =FFFFFE0A                  v_debugxspeed:	equ $FFFFFE0A	; debug mode - horizontal speed
00000000 =FFFFFE0B                  v_debugyspeed:	equ $FFFFFE0B	; debug mode - vertical speed
00000000 =FFFFFE0C                  v_vbla_count:	equ $FFFFFE0C	; vertical interrupt counter (adds 1 every VBlank) (4 bytes)
00000000 =FFFFFE0E                  v_vbla_word:	equ v_vbla_count+2 ; low word for vertical interrupt counter (2 bytes)
00000000 =FFFFFE0F                  v_vbla_byte:	equ v_vbla_word+1	; low byte for vertical interrupt counter
00000000 =FFFFFE10                  v_zone:		equ $FFFFFE10	; current zone number
00000000 =FFFFFE11                  v_act:		equ $FFFFFE11	; current act number
00000000 =FFFFFE12                  v_lives:		equ $FFFFFE12	; number of lives
00000000 =FFFFFE14                  v_air:		equ $FFFFFE14	; air remaining while underwater (2 bytes)
00000000 =FFFFFE15                  v_airbyte:	equ v_air+1	; low byte for air
00000000 =FFFFFE16                  v_lastspecial:	equ $FFFFFE16	; last special stage number
00000000 =FFFFFE18                  v_continues:	equ $FFFFFE18	; number of continues
00000000 =FFFFFE1A                  f_timeover:	equ $FFFFFE1A	; time over flag
00000000 =FFFFFE1B                  v_lifecount:	equ $FFFFFE1B	; lives counter value (for actual number, see "v_lives")
00000000 =FFFFFE1C                  f_lifecount:	equ $FFFFFE1C	; lives counter update flag
00000000 =FFFFFE1D                  f_ringcount:	equ $FFFFFE1D	; ring counter update flag
00000000 =FFFFFE1E                  f_timecount:	equ $FFFFFE1E	; time counter update flag
00000000 =FFFFFE1F                  f_scorecount:	equ $FFFFFE1F	; score counter update flag
00000000 =FFFFFE20                  v_rings:		equ $FFFFFE20	; rings (2 bytes)
00000000 =FFFFFE21                  v_ringbyte:	equ v_rings+1	; low byte for rings
00000000 =FFFFFE22                  v_time:		equ $FFFFFE22	; time (4 bytes)
00000000 =FFFFFE23                  v_timemin:	equ $FFFFFE23	; time - minutes
00000000 =FFFFFE24                  v_timesec:	equ $FFFFFE24	; time - seconds
00000000 =FFFFFE25                  v_timecent:	equ $FFFFFE25	; time - centiseconds
00000000 =FFFFFE26                  v_score:		equ $FFFFFE26	; score (4 bytes)
00000000 =FFFFFE2C                  v_shield:	equ $FFFFFE2C	; shield status (00 = no; 01 = yes)
00000000 =FFFFFE2D                  v_invinc:	equ $FFFFFE2D	; invinciblity status (00 = no; 01 = yes)
00000000 =FFFFFE2E                  v_shoes:		equ $FFFFFE2E	; speed shoes status (00 = no; 01 = yes)
00000000 =FFFFFE30                  v_lastlamp:	equ $FFFFFE30	; number of the last lamppost you hit
00000000 =FFFFFE32                  v_lamp_xpos:	equ v_lastlamp+2	; x-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE34                  v_lamp_ypos:	equ v_lastlamp+4	; y-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE36                  v_lamp_rings:	equ v_lastlamp+6	; rings stored at lamppost (2 bytes)
00000000 =FFFFFE38                  v_lamp_time:	equ v_lastlamp+8	; time stored at lamppost (2 bytes)
00000000 =FFFFFE3C                  v_lamp_dle:	equ v_lastlamp+$C	; dynamic level event routine counter at lamppost
00000000 =FFFFFE3E                  v_lamp_limitbtm:	equ v_lastlamp+$E	; level bottom boundary at lamppost (2 bytes)
00000000 =FFFFFE40                  v_lamp_scrx:	equ v_lastlamp+$10 ; x-axis screen at lamppost (2 bytes)
00000000 =FFFFFE42                  v_lamp_scry:	equ v_lastlamp+$12 ; y-axis screen at lamppost (2 bytes)
00000000                            
00000000 =FFFFFE50                  v_lamp_wtrpos:	equ v_lastlamp+$20 ; water position at lamppost (2 bytes)
00000000 =FFFFFE52                  v_lamp_wtrrout:	equ v_lastlamp+$22 ; water routine at lamppost
00000000 =FFFFFE53                  v_lamp_wtrstat:	equ v_lastlamp+$23 ; water state at lamppost
00000000 =FFFFFE54                  v_lamp_lives:	equ v_lastlamp+$24 ; lives counter at lamppost
00000000 =FFFFFE57                  v_emeralds:	equ $FFFFFE57	; number of chaos emeralds
00000000 =FFFFFE58                  v_emldlist:	equ $FFFFFE58	; which individual emeralds you have (00 = no; 01 = yes) (6 bytes)
00000000 =FFFFFE5E                  v_oscillate:	equ $FFFFFE5E	; values which oscillate - for swinging platforms, et al ($42 bytes)
00000000 =FFFFFEC0                  v_ani0_time:	equ $FFFFFEC0	; synchronised sprite animation 0 - time until next frame (used for synchronised animations)
00000000 =FFFFFEC1                  v_ani0_frame:	equ $FFFFFEC1	; synchronised sprite animation 0 - current frame
00000000 =FFFFFEC2                  v_ani1_time:	equ $FFFFFEC2	; synchronised sprite animation 1 - time until next frame
00000000 =FFFFFEC3                  v_ani1_frame:	equ $FFFFFEC3	; synchronised sprite animation 1 - current frame
00000000 =FFFFFEC4                  v_ani2_time:	equ $FFFFFEC4	; synchronised sprite animation 2 - time until next frame
00000000 =FFFFFEC5                  v_ani2_frame:	equ $FFFFFEC5	; synchronised sprite animation 2 - current frame
00000000 =FFFFFEC6                  v_ani3_time:	equ $FFFFFEC6	; synchronised sprite animation 3 - time until next frame
00000000 =FFFFFEC7                  v_ani3_frame:	equ $FFFFFEC7	; synchronised sprite animation 3 - current frame
00000000 =FFFFFEC8                  v_ani3_buf:	equ $FFFFFEC8	; synchronised sprite animation 3 - info buffer (2 bytes)
00000000 =FFFFFEC9                  v_ani4_frame:	equ $FFFFFEC9	; synchronised sprite animation 4 - current frame
00000000 =FFFFFEF0                  v_limittopdb:	equ $FFFFFEF0	; level upper boundary, buffered for debug mode (2 bytes)
00000000 =FFFFFEF2                  v_limitbtmdb:	equ $FFFFFEF2	; level bottom boundary, buffered for debug mode (2 bytes)
00000000                            
00000000 =FFFFFF10                  v_screenposx_dup:	equ $FFFFFF10	; screen position x (duplicate) (2 bytes)
00000000 =FFFFFF14                  v_screenposy_dup:	equ $FFFFFF14	; screen position y (duplicate) (2 bytes)
00000000 =FFFFFF18                  v_bgscreenposx_dup:	equ $FFFFFF18	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFFF1C                  v_bgscreenposy_dup:	equ $FFFFFF1C	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFFF20                  v_bg2screenposx_dup:	equ $FFFFFF20	; 2 bytes
00000000 =FFFFFF24                  v_bg2screenposy_dup:	equ $FFFFFF24	; 2 bytes
00000000 =FFFFFF28                  v_bg3screenposx_dup:	equ $FFFFFF28	; 2 bytes
00000000 =FFFFFF2C                  v_bg3screenposy_dup:	equ $FFFFFF2C	; 2 bytes
00000000 =FFFFFF30                  v_fg_scroll_flags_dup:	equ $FFFFFF30
00000000 =FFFFFF32                  v_bg1_scroll_flags_dup:	equ $FFFFFF32
00000000 =FFFFFF34                  v_bg2_scroll_flags_dup:	equ $FFFFFF34
00000000 =FFFFFF36                  v_bg3_scroll_flags_dup:	equ $FFFFFF36
00000000                            
00000000 =FFFFFF80                  v_levseldelay:	equ $FFFFFF80	; level select - time until change when up/down is held (2 bytes)
00000000 =FFFFFF82                  v_levselitem:	equ $FFFFFF82	; level select - item selected (2 bytes)
00000000 =FFFFFF84                  v_levselsound:	equ $FFFFFF84	; level select - sound selected (2 bytes)
00000000 =FFFFFFB0                  Title_screen_option:	equ $FFFFFFB0
00000000 =FFFFFFC0                  v_scorecopy:	equ $FFFFFFC0	; score, duplicate (4 bytes)
00000000 =FFFFFFC0                  v_scorelife:	equ $FFFFFFC0	; points required for an extra life (4 bytes) (JP1 only)
00000000 =FFFFFFE0                  f_levselcheat:	equ $FFFFFFE0	; level select cheat flag
00000000 =FFFFFFE1                  f_slomocheat:	equ $FFFFFFE1	; slow motion & frame advance cheat flag
00000000 =FFFFFFE2                  f_debugcheat:	equ $FFFFFFE2	; debug mode cheat flag
00000000 =FFFFFFE3                  f_creditscheat:	equ $FFFFFFE3	; hidden credits & press start cheat flag
00000000 =FFFFFFE4                  v_title_dcount:	equ $FFFFFFE4	; number of times the d-pad is pressed on title screen (2 bytes)
00000000 =FFFFFFE6                  v_title_ccount:	equ $FFFFFFE6	; number of times C is pressed on title screen (2 bytes)
00000000                            
00000000 =FFFFFFF0                  f_demo:		equ $FFFFFFF0	; demo mode flag (0 = no; 1 = yes; $8001 = ending) (2 bytes)
00000000 =FFFFFFF2                  v_demonum:	equ $FFFFFFF2	; demo level number (not the same as the level number) (2 bytes)
00000000 =FFFFFFF4                  v_creditsnum:	equ $FFFFFFF4	; credits index number (2 bytes)
00000000 =FFFFFFF8                  v_megadrive:	equ $FFFFFFF8	; Megadrive machine type
00000000 =FFFFFFFA                  f_debugmode:	equ $FFFFFFFA	; debug mode flag (sometimes 2 bytes)
00000000 =FFFFFFFC                  v_init:		equ $FFFFFFFC	; 'init' text string (4 bytes)
00000000                            
00000000 =FFFFF5C3                  f_emeraldm:	equ $FFFFF5C3
00000000 =FFFFF5C4                  v_tagwater:    	equ $FFFFF5C4   ; TIS  
00000000 =FFFFFF92                  v_watersplashpos:    equ $FFFFFF92    ; TIS
00000000 =FFFFFF94                  v_watersplashposlamp:    equ $FFFFFF94    ; TIS
00000000 =FFFFFF96                  v_tagwaterlamp:	equ $FFFFFF96    ; TIS
00000000                              
00000000 =00000039                  f_spindash	= $39
00000000 =FFFFF5C6                  v_Saved_music:	equ $FFFFF5C6
00000000 =FFFFF5C8                  v_rshield:	equ $FFFFF5C8	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5C9                  v_gshield:	equ $FFFFF5C9	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5CA                  v_spshield:	equ $FFFFF5CA	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5CD                  v_homingattack:	equ $FFFFF5CD
00000000                            
00000000 =FFFFFF8C                  Options_menu_box:	equ  $FFFFFF8C
00000000                            
00000000 =FFFFF5D8                  Super_Sonic_palette =        $FFFFF5D8
00000000 =FFFFF5DC                  Palette_frame =        $FFFFF5DC
00000000 =FFFFF5DE                  Palette_timer =        $FFFFF5DE
00000000 =FFFFF5CD                  Palette_Frame_Count =        $FFFFF5CD
00000000 =FFFFF670                  Super_Sonic_frame_count =    $FFFFF670
00000000 =FFFFFE19                  Super_Sonic_flag =        $FFFFFE19
00000000 =FFFFFE19                  Super_Sonic_flag =        $FFFFFE19
00000000                            	include	"Macros.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reads ASCII strings and passes them to character generator
00000000                            ; ---------------------------------------------------------------------------
00000000                            asc        macro str
00000000                            ct =    0                            ; accumulates the total num of characters
00000000                                rept narg                        ; repeat for every argumeny
00000000                            lc =        0                        ; the position in the string
00000000                            
00000000                                dc.b strlen(\str)-1                    ; put the string length before the string itself
00000000                                rept strlen(\str)                    ; repeat for each character in string
00000000                            cc         substr lc+1,lc+1,\str                ; get a single character into cc
00000000                            arg =        '\cc'                        ; convert it to a character
00000000                                        char.b arg                ; put the character into the ROM (as byte)
00000000                            
00000000                            lc =        lc+1                        ; go to the next character
00000000                            ct =        ct+1                        ; increment character count
00000000                                    endr
00000000                                shift
00000000                                endr
00000000                                endm
00000000                            
00000000                            ; translates ASCII character to proper hex value
00000000                            char        macro c
00000000                                if c=' '
00000000                                    dc.\0 0                        ; example 1: single letters
00000000                            
00000000                                elseif c='*'
00000000                                    dc.\0 $1A                        ; example 1: single letters
00000000                            
00000000                                elseif (c>='0')&(c<='9')
00000000                                    dc.\0 \c-'0'+$20                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                elseif (c>='A')&(c<='Z')
00000000                                    dc.\0 \c-$41+$1E                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                else
00000000                                    dc.\0 \c                    ; example 3: any other character
00000000                                endif
00000000                                endm	
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            align:	macro
00000000                            	if (narg=1)
00000000                            	dcb.b \1-(*%\1),0
00000000                            	else
00000000                            	dcb.b \1-(*%\1),\2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		if (narg=1)
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),(vdp_control_port).l
00000000                            		else
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the VRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeVRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$4000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the CRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeCRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$C000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA fill VRAM with a value
00000000                            ; input: value, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            fillVRAM:	macro value,length,loc
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.w	#$8F01,(a5)
00000000                            		move.l	#$94000000+((length&$FF00)<<8)+$9300+(length&$FF),(a5)
00000000                            		move.w	#$9780,(a5)
00000000                            		move.l	#$40000080+((loc&$3FFF)<<16)+((loc&$C000)>>14),(a5)
00000000                            		move.w	#value,(vdp_data_port).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Copy a tilemap from 68K (ROM/RAM) to the VRAM without using DMA
00000000                            ; input: source, destination, width [cells], height [cells]
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            copyTilemap:	macro source,loc,width,height
00000000                            		lea	(source).l,a1
00000000                            		move.l	#$40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14),d0
00000000                            		moveq	#width,d1
00000000                            		moveq	#height,d2
00000000                            		jsr	TilemapToVRAM
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; stop the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            stopZ80:	macro
00000000                            		move.w	#$100,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; wait for Z80 to stop
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            waitZ80:	macro
00000000                            	@wait:	btst	#0,(z80_bus_request).l
00000000                            		bne.s	@wait
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reset the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            resetZ80:	macro
00000000                            		move.w	#$100,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            resetZ80a:	macro
00000000                            		move.w	#0,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; start the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            startZ80:	macro
00000000                            		move.w	#0,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; disable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            disable_ints:	macro
00000000                            		move	#$2700,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; enable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            enable_ints:	macro
00000000                            		move	#$2300,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; long conditional jumps
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            jhi:		macro loc
00000000                            		bls.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcc:		macro loc
00000000                            		bcs.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jhs:		macro loc
00000000                            		jcc	loc
00000000                            		endm
00000000                            
00000000                            jls:		macro loc
00000000                            		bhi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcs:		macro loc
00000000                            		bcc.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlo:		macro loc
00000000                            		jcs	loc
00000000                            		endm
00000000                            
00000000                            jeq:		macro loc
00000000                            		bne.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jne:		macro loc
00000000                            		beq.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jgt:		macro loc
00000000                            		ble.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jge:		macro loc
00000000                            		blt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jle:		macro loc
00000000                            		bgt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlt:		macro loc
00000000                            		bge.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jpl:		macro loc
00000000                            		bmi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jmi:		macro loc
00000000                            		bpl.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; check if object moves out of range
00000000                            ; input: location to jump to if out of range, x-axis pos (obX(a0) by default)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            out_of_range:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0		; approx distance between object and screen
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.\0	exit
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; play a sound effect or music
00000000                            ; input: track, terminate routine, branch or jump, move operand size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            music:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd1).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound
00000000                            		      else
00000000                            			bra.w	PlaySound
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound).l
00000000                            		      else
00000000                            			jmp	(PlaySound).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            sfx:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd2).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound_Special
00000000                            		      else
00000000                            			bra.w	PlaySound_Special
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound_Special).l
00000000                            		      else
00000000                            			jmp	(PlaySound_Special).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; bankswitch between SRAM and ROM
00000000                            ; (remember to enable SRAM in the header first!)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            gotoSRAM:	macro
00000000                            		move.b  #1,($A130F1).l
00000000                            		endm
00000000                            
00000000                            gotoROM:	macro
00000000                            		move.b  #0,($A130F1).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; compare the size of an index with ZoneCount constant
00000000                            ; (should be used immediately after the index)
00000000                            ; input: index address, element size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            zonewarning:	macro loc,elementsize
00000000                            	@end:
00000000                            		if (@end-loc)-(ZoneCount*elementsize)<>0
00000000                            		inform 1,"Size of \loc ($%h) does not match ZoneCount ($\#ZoneCount).",(@end-loc)/elementsize
00000000                            		endc
00000000                            		endm
00000000                            		endm
00000000                            	include   "Debugger.asm"
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Error handling and debugging modules
00000000                            ; 2016-2017, Vladikcomper
00000000                            ; 2020 mod - AURORA FIELDS
00000000                            ; ---------------------------------------------------------------
00000000                            ; Debugging macros definitions file
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ----------------------------
00000000                            ; Arguments formatting flags
00000000                            ; ----------------------------
00000000                            
00000000                            ; General arguments format flags
00000000 =00000080                  hex		equ		$80				; flag to display as hexadecimal number
00000000 =00000090                  dec		equ		$90				; flag to display as decimal number
00000000 =000000A0                  bin		equ		$A0				; flag to display as binary number
00000000 =000000B0                  sym		equ		$B0				; flag to display as symbol (treat as offset, decode into symbol +displacement, if present)
00000000 =000000C0                  symdisp		equ		$C0				; flag to display as symbol's displacement alone (DO NOT USE, unless complex formatting is required, see notes below)
00000000 =000000DF                  str		equ		$DF				; flag to display as string (treat as offset, insert string from that offset)
00000000 =000000D0                  asm		equ		$D0				; flag to display as code (treat as offset, decode from that offset)
00000000                            
00000000                            ; NOTES:
00000000                            ;	* By default, the "sym" flag displays both symbol and displacement (e.g.: "Map_Sonic+$2E")
00000000                            ;		In case, you need a different formatting for the displacement part (different text color and such),
00000000                            ;		use "sym|split", so the displacement won't be displayed until symdisp is met
00000000                            ;	* The "symdisp" can only be used after the "sym|split" instance, which decodes offset, otherwise, it'll
00000000                            ;		display a garbage offset.
00000000                            ;	* No other argument format flags (hex, dec, bin, str) are allowed between "sym|split" and "symdisp",
00000000                            ;		otherwise, the "symdisp" results are undefined.
00000000                            ;	* When using "str" flag, the argument should point to string offset that will be inserted.
00000000                            ;		Arguments format flags CAN NOT be used in the string (as no arguments are meant to be here),
00000000                            ;		only console control flags (see below).
00000000                            ;	* The "asm" flag will use "setpat" flag to switch text color, and will reset pattern to normal again.
00000000                            ;		you must reapply any pattern you used before yourself.
00000000                            ;	* The "asm" flag will overwrite $FF0000-$FF0080, so be careful when viewing RAM.
00000000                            
00000000                            
00000000                            ; Additional flags ...
00000000                            ; ... for number formatters (hex, dec, bin)
00000000 =00000008                  signed	equ		8				; treat number as signed (display + or - before the number depending on sign)
00000000                            
00000000                            ; ... for symbol formatter (sym)
00000000 =00000008                  split	equ		8				; DO NOT write displacement (if present), skip and wait for "symdisp" flag to write it later (optional)
00000000 =00000004                  forced	equ		4				; display "<unknown>" if symbol was not found, otherwise, plain offset is displayed by the displacement formatter
00000000                            
00000000                            ; ... for symbol displacement formatter (symdisp)
00000000 =00000008                  weak	equ		8				; DO NOT write plain offset if symbol is displayed as "<unknown>"
00000000                            
00000000                            ; Argument type flags:
00000000                            ; - DO NOT USE in formatted strings processed by macros, as these are included automatically
00000000                            ; - ONLY USE when writting down strings manually with DC.B
00000000 =00000000                  byte	equ		0
00000000 =00000001                  word	equ		1
00000000 =00000003                  long	equ		3
00000000                            
00000000                            ; -----------------------
00000000                            ; Console control flags
00000000                            ; -----------------------
00000000                            
00000000                            ; Plain control flags: no arguments following
00000000 =000000E0                  endl	equ		$E0				; "End of line": flag for line break
00000000 =000000E6                  cr	equ		$E6				; "Carriage return": jump to the beginning of the line
00000000 =000000E8                  pal0	equ		$E8				; use palette line #0
00000000 =000000EA                  pal1	equ		$EA				; use palette line #1
00000000 =000000EC                  pal2	equ		$EC				; use palette line #2
00000000 =000000EE                  pal3	equ		$EE				; use palette line #3
00000000                            
00000000                            ; Parametrized control flags: followed by 1-byte argument
00000000 =000000F0                  setw	equ		$F0				; set line width: number of characters before automatic line break
00000000 =000000F4                  setoff	equ		$F4				; set tile offset: lower byte of base pattern, which points to tile index of ASCII character 00
00000000 =000000F8                  setpat	equ		$F8				; set tile pattern: high byte of base pattern, which determines palette flags and $100-tile section id
00000000 =000000FA                  setx	equ		$FA				; set x-position
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Macros
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            RaiseError &
00000000                            
00000000                            	pea	*(pc)
00000000                            	move.w	sr, -(sp)
00000000                            	__FSTRING_GenerateArgumentsCode \string
00000000                            	jsr		ErrorHandler
00000000                            	__FSTRING_GenerateDecodedString \string
00000000                            	if strlen("\console_program")						; if console program offset is specified ...
00000000                            		dc.b	\opts+_eh_enter_console|(((*&1)^1)*_eh_align_offset)	; add flag "_eh_align_offset" if the next byte is at odd offset ...
00000000                            		even								; ... to tell Error handler to skip this byte, so it'll jump to ...
00000000                            		jmp	\console_program					; ... an aligned "jmp" instruction that calls console program itself
00000000                            	else
00000000                            		dc.b	\opts+0							; otherwise, just specify \opts for error handler, +0 will generate dc.b 0 ...
00000000                            		even								; ... in case \opts argument is empty or skipped
00000000                            	endc
00000000                            	even
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            Console &
00000000                            
00000000                            	if strcmp("\0","write")|strcmp("\0","writeline")
00000000                            		move.w	sr, -(sp)
00000000                            		__FSTRING_GenerateArgumentsCode \1
00000000                            		movem.l	a0-a2/d7, -(sp)
00000000                            		if (__sp>0)
00000000                            			lea	4*4(sp), a2
00000000                            		endc
00000000                            		lea	@str\@(pc), a1
00000000                            		jsr	ErrorHandler.__global__console_\0\_formatted
00000000                            		movem.l	(sp)+, a0-a2/d7
00000000                            		if (__sp>8)
00000000                            			lea	__sp(sp), sp
00000000                            		elseif (__sp>0)
00000000                            			addq.w	#__sp, sp
00000000                            		endc
00000000                            		move.w	(sp)+, sr
00000000                            		bra.w	@instr_end\@
00000000                            	@str\@:
00000000                            		__FSTRING_GenerateDecodedString \1
00000000                            		even
00000000                            	@instr_end\@:
00000000                            
00000000                            	elseif strcmp("\0","run")
00000000                            		jsr	ErrorHandler.__extern__console_only
00000000                            		jsr	\1
00000000                            		bra.s	*
00000000                            
00000000                            	elseif strcmp("\0","setxy")
00000000                            		move.w	sr, -(sp)
00000000                            		movem.l	d0-d1, -(sp)
00000000                            		move.w	\2, -(sp)
00000000                            		move.w	\1, -(sp)
00000000                            		jsr	ErrorHandler.__global__console_setposasxy_stack
00000000                            		addq.w	#4, sp
00000000                            		movem.l	(sp)+, d0-d1
00000000                            		move.w	(sp)+, sr
00000000                            
00000000                            	elseif strcmp("\0","breakline")
00000000                            		move.w	sr, -(sp)
00000000                            		jsr	ErrorHandler.__global__console_startnewline
00000000                            		move.w	(sp)+, sr
00000000                            
00000000                            	else
00000000                            		inform	2,"""\0"" isn't a member of ""Console"""
00000000                            
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __ErrorMessage &
00000000                            		__FSTRING_GenerateArgumentsCode \string
00000000                            		jsr		ErrorHandler
00000000                            		__FSTRING_GenerateDecodedString \string
00000000                            		dc.b	\opts+0
00000000                            		even
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateArgumentsCode &
00000000                            
00000000                            	__pos:	set 	instr(\string,'%<')				; token position
00000000                            	__stack:set	0						; size of actual stack
00000000                            	__sp:	set	0						; stack displacement
00000000                            
00000000                            	; Parse string itself
00000000                            	while (__pos)
00000000                            
00000000                            		; Retrive expression in brackets following % char
00000000                                	__endpos:	set	instr(__pos+1,\string,'>')
00000000                                	__midpos:	set	instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endc
00000000                            		__substr:	substr	__pos+1+1,__endpos-1,\string		; .type ea param
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string		; .type
00000000                            
00000000                            		; Expression is an effective address (e.g. %(.w d0 hex) )
00000000                            		if "\__type">>8="."
00000000                            			__operand:	substr	__pos+1+1,__midpos-1,\string	; .type ea
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string	; param
00000000                            
00000000                            			if "\__type"=".b"
00000000                            				pushp	"move\__operand\,1(sp)"
00000000                            				pushp	"subq.w	#2, sp"
00000000                            				__stack: = __stack+2
00000000                            				__sp: = __sp+2
00000000                            
00000000                            			elseif "\__type"=".w"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+2
00000000                            
00000000                            			elseif "\__type"=".l"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+4
00000000                            
00000000                            			else
00000000                            				fatal 'Unrecognized type in string operand: %<\__substr>'
00000000                            			endc
00000000                            		endc
00000000                            
00000000                            		__pos:	set	instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            
00000000                            	; Generate stack code
00000000                            	rept __stack
00000000                            		popp	__command
00000000                            		\__command
00000000                            	endr
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateDecodedString &
00000000                            
00000000                            	__lpos:	set	1						; start position
00000000                            	__pos:	set 	instr(\string,'%<')				; token position
00000000                            
00000000                            	while (__pos)
00000000                            
00000000                            		; Write part of string before % token
00000000                            		__substr:	substr	__lpos,__pos-1,\string
00000000                            		dc.b	"\__substr"
00000000                            
00000000                            		; Retrive expression in brakets following % char
00000000                                	__endpos:	set		instr(__pos+1,\string,'>')
00000000                                	__midpos:	set		instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endc
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string		; .type
00000000                            
00000000                            		; Expression is an effective address (e.g. %<.w d0 hex> )
00000000                            		if "\__type">>8="."
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string	; param
00000000                            			if strlen("\__param")<1
00000000                            				__param: substr ,,"hex"			; if param is ommited, set it to "hex"
00000000                            			endc
00000000                            			if "\__type"=".b"
00000000                            				dc.b	\__param
00000000                            			elseif "\__type"=".w"
00000000                            				dc.b	\__param|1
00000000                            			else
00000000                            				dc.b	\__param|3
00000000                            			endc
00000000                            
00000000                            		; Expression is an inline constant (e.g. %<endl> )
00000000                            		else
00000000                            			__substr:	substr	__pos+1+1,__endpos-1,\string
00000000                            			dc.b	\__substr
00000000                            		endc
00000000                            
00000000                            		__lpos:	set	__endpos+1
00000000                            		__pos:	set	instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            
00000000                            	; Write part of string before the end
00000000                            	__substr:	substr	__lpos,,\string
00000000                            	dc.b	"\__substr"
00000000                            	dc.b	0
00000000                            	endm
00000000                            	endm
00000000                            	
00000000 =00000001                  EnableSRAM:	equ 1	; change to 1 to enable SRAM
00000000 =00000001                  BackupSRAM:	equ 1
00000000 =00000003                  AddressSRAM:	equ 3	; 0 = odd+even; 2 = even only; 3 = odd only
00000000                            
00000000                            ; Change to 0 to build the original version of the game, dubbed REV00
00000000                            ; Change to 1 to build the later vesion, dubbed REV01, which includes various bugfixes and enhancements
00000000                            ; Change to 2 to build the version from Sonic Mega Collection, dubbed REVXB, which fixes the infamous "spike bug"
00000000 =00000002                  Revision:	equ 2
00000000                            
00000000 =00000006                  ZoneCount:	equ 6	; discrete zones are: GHZ, MZ, SYZ, LZ, SLZ, and SBZ
00000000                            
00000000 =00000000                  OptimiseSound:	equ 0	; change to 1 to optimise sound queuing
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00                  Vectors:	dc.l v_systemstack&$FFFFFF	; Initial stack pointer value
00000004 0000 0000                  		dc.l EntryPoint			; Start of program
00000008 0000 0000                  		dc.l BusError			; Bus error
0000000C 0000 0000                  		dc.l AddressError		; Address error (4)
00000010 0000 0000                  		dc.l IllegalInstr		; Illegal instruction
00000014 0000 0000                  		dc.l ZeroDivide			; Division by zero
00000018 0000 0000                  		dc.l ChkInstr			; CHK exception
0000001C 0000 0000                  		dc.l TrapvInstr			; TRAPV exception (8)
00000020 0000 0000                  		dc.l PrivilegeViol		; Privilege violation
00000024 0000 0000                  		dc.l Trace				; TRACE exception
00000028 0000 0000                  		dc.l Line1010Emu		; Line-A emulator
0000002C 0000 0000                  		dc.l Line1111Emu		; Line-F emulator (12)
00000030 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000034 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000038 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000003C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (16)
00000040 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000044 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000048 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000004C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (20)
00000050 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000054 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000058 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000005C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (24)
00000060 0000 0000                  		dc.l ErrorExcept		; Spurious exception
00000064 0000 0000                  		dc.l ErrorTrap			; IRQ level 1
00000068 0000 0000                  		dc.l ErrorTrap			; IRQ level 2
0000006C 0000 0000                  		dc.l ErrorTrap			; IRQ level 3 (28)
00000070 0000 0000                  		dc.l HBlank				; IRQ level 4 (horizontal retrace interrupt)
00000074 0000 0000                  		dc.l ErrorTrap			; IRQ level 5
00000078 0000 0000                  		dc.l VBlank				; IRQ level 6 (vertical retrace interrupt)
0000007C 0000 0000                  		dc.l ErrorTrap			; IRQ level 7 (32)
00000080 0000 0000                  		dc.l ErrorTrap			; TRAP #00 exception
00000084 0000 0000                  		dc.l ErrorTrap			; TRAP #01 exception
00000088 0000 0000                  		dc.l ErrorTrap			; TRAP #02 exception
0000008C 0000 0000                  		dc.l ErrorTrap			; TRAP #03 exception (36)
00000090 0000 0000                  		dc.l ErrorTrap			; TRAP #04 exception
00000094 0000 0000                  		dc.l ErrorTrap			; TRAP #05 exception
00000098 0000 0000                  		dc.l ErrorTrap			; TRAP #06 exception
0000009C 0000 0000                  		dc.l ErrorTrap			; TRAP #07 exception (40)
000000A0 0000 0000                  		dc.l ErrorTrap			; TRAP #08 exception
000000A4 0000 0000                  		dc.l ErrorTrap			; TRAP #09 exception
000000A8 0000 0000                  		dc.l ErrorTrap			; TRAP #10 exception
000000AC 0000 0000                  		dc.l ErrorTrap			; TRAP #11 exception (44)
000000B0 0000 0000                  		dc.l ErrorTrap			; TRAP #12 exception
000000B4 0000 0000                  		dc.l ErrorTrap			; TRAP #13 exception
000000B8 0000 0000                  		dc.l ErrorTrap			; TRAP #14 exception
000000BC 0000 0000                  		dc.l ErrorTrap			; TRAP #15 exception (48)
000000C0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000CC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000DC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000E0                            loc_E0:
000000E0                            		; Relocated code from Spik_Hurt. REVXB was a nasty hex-edit.
000000E0 2628 000C                  		move.l	obY(a0),d3
000000E4 3028 0012                  		move.w	obVelY(a0),d0
000000E8 48C0                       		ext.l	d0
000000EA E180                       		asl.l	#8,d0
000000EC 4EF9 0000 0000             		jmp	(loc_D5A2).l
000000F2                            
000000F2 0000                       		dc.w ErrorTrap
000000F4 0000 0000                  		dc.l ErrorTrap
000000F8 0000 0000                  		dc.l ErrorTrap
000000FC 0000 0000                  		dc.l ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console1:	dc.b "SEGA MEGA DRIVE " ; Hardware system ID (Console name)
00000110 2843 2953 4547 4120 3139+  Date:		dc.b "(C)SEGA 1991.APR" ; Copyright holder and release date (generally year)
00000120 534F 4E49 4320 5355 4E56+  Title_Local:	dc.b "SONIC SUNVENTURE                                " ; Domestic name
00000150 534F 4E49 4320 5355 4E56+  Title_Int:	dc.b "SONIC SUNVENTURE                                " ; International name
00000180 474D 2030 3030 3034 3034+  			dc.b "GM 00004049-01" ; Serial/version number (Rev non-0)
0000018E 0000                       Checksum: dc.w $0
00000190 4A20 2020 2020 2020 2020+  		dc.b "J               " ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; Start address of ROM
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; End address of ROM
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; Start address of RAM
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; End address of RAM
000001B0 5241 F820                  		dc.b 'RA',$F8,$20    ; SRAM type
000001B4 0020 0000                  		dc.l $200000		; SRAM start
000001B8 0020 01FF                  		dc.l $2001FF		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b "                                                    " ; Notes (unused, anything can be put in this space, but it has to be 52 bytes.)
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b "JUE             " ; Region (Country code)
00000200                            EndOfHeader:
00000200                            
00000200                            ; ===========================================================================
00000200                            ; Crash/Freeze the 68000. Unlike Sonic 2, Sonic 1 uses the 68000 for playing music, so it stops too
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	(z80_port_1_control).l ; test port A & B control registers
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	(z80_expansion_control).l ; test port C control register
00000214                            
00000214                            PortA_Ok:
00000214 6600 0000                  		bne.w	SkipSetup ; Skip the VDP and Z80 setup code if port A, B or C is ok...?
00000218 4BFA 0000                  		lea	SetupValues(pc),a5	; Load setup values array address.
0000021C 4C9D 00E0                  		movem.w	(a5)+,d5-d7
00000220 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000224 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version (from $A10001)
00000228 0200 000F                  		andi.b	#$F,d0
0000022C 6700                       		beq.s	SkipSecurity	; If the console has no TMSS, skip the security stuff.
0000022E 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1) ; move "SEGA" to TMSS register ($A14000)
00000236                            
00000236                            SkipSecurity:
00000236 3014                       		move.w	(a4),d0	; clear write-pending flag in VDP to prevent issues if the 68k has been reset in the middle of writing a command long word to the VDP.
00000238 7000                       		moveq	#0,d0	; clear d0
0000023A 2C40                       		movea.l	d0,a6	; clear a6
0000023C 4E66                       		move.l	a6,usp	; set usp to $0
0000023E                            
0000023E 7217                       		moveq	#$17,d1
00000240                            VDPInitLoop:
00000240 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000242 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000244 DA47                       		add.w	d7,d5		; next register
00000246 51C9 FFF8                  		dbf	d1,VDPInitLoop
0000024A                            		
0000024A 289D                       		move.l	(a5)+,(a4)
0000024C 3680                       		move.w	d0,(a3)		; clear	the VRAM
0000024E 3287                       		move.w	d7,(a1)		; stop the Z80
00000250 3487                       		move.w	d7,(a2)		; reset	the Z80
00000252                            
00000252                            WaitForZ80:
00000252 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000254 66FC                       		bne.s	WaitForZ80	; if not, branch
00000256                            
00000256 7425                       		moveq	#$25,d2
00000258                            Z80InitLoop:
00000258 10DD                       		move.b	(a5)+,(a0)+
0000025A 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025E                            		
0000025E 3480                       		move.w	d0,(a2)
00000260 3280                       		move.w	d0,(a1)		; start	the Z80
00000262 3487                       		move.w	d7,(a2)		; reset	the Z80
00000264                            
00000264                            ClrRAMLoop:
00000264 2D00                       		move.l	d0,-(a6)	; clear 4 bytes of RAM
00000266 51CE FFFC                  		dbf	d6,ClrRAMLoop	; repeat until the entire RAM is clear
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment mode
0000026C 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026E                            
0000026E 761F                       		moveq	#$1F,d3	; set repeat times
00000270                            ClrCRAMLoop:
00000270 2680                       		move.l	d0,(a3)	; clear 2 palettes
00000272 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; repeat until the entire CRAM is clear
00000276 289D                       		move.l	(a5)+,(a4)	; set VDP to VSRAM write
00000278                            
00000278 7813                       		moveq	#$13,d4
0000027A                            ClrVSRAMLoop:
0000027A 2680                       		move.l	d0,(a3)	; clear 4 bytes of VSRAM.
0000027C 51CC FFFC                  		dbf	d4,ClrVSRAMLoop	; repeat until the entire VSRAM is clear
00000280 7A03                       		moveq	#3,d5
00000282                            
00000282                            PSGInitLoop:
00000282 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000286 51CD FFFA                  		dbf	d5,PSGInitLoop	; repeat for other channels
0000028A 3480                       		move.w	d0,(a2)
0000028C 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear all registers
00000290 46FC 2700                  		disable_ints
00000294                            
00000294                            InitSRAM: ; could have been done more cleanly
00000294 13FC 0001 00A1 30F1                move.b  #1,($A130F1).l
0000029C 41F9 0020 0001                     lea ($200001).l,a0
000002A2                            
000002A2 0148 00DD                          movep.l $DD(a0),d0
000002A6 223C 4655 434B                     move.l  #"FUCK",d1
000002AC                            
000002AC B280                       		cmp.l   d0,d1 ; reset SRAM if there's no "FUCK"
000002AE 6700                               beq.s   @Continue
000002B0                            
000002B0 117C 0000 0001             		move.b 	#0, $1(a0)
000002B6 117C 0000 0003             		move.b 	#0, $3(a0)
000002BC                            
000002BC 243C 204F 5554                     move.l  #" OUT",d2
000002C2 263C 5441 204D                     move.l  #"TA M",d3
000002C8 283C 5920 5352                     move.l  #"Y SR",d4
000002CE 2A3C 414D 2020                     move.l  #"AM  ",d5
000002D4                            
000002D4 03C8 00DD                          movep.l d1,$DD(a0)
000002D8 05C8 00E5                          movep.l d2,$E5(a0)
000002DC 07C8 00ED                          movep.l d3,$ED(a0)
000002E0 09C8 00F5                          movep.l d4,$F5(a0)
000002E4 0BC8 00FD                          movep.l d5,$FD(a0)
000002E8                            
000002E8                            @Continue:
000002E8 13FC 0000 00A1 30F1                move.b    #0,($A130F1).l
000002F0                            
000002F0                            SkipSetup:
000002F0 6000                       		bra.s	GameProgram	; begin game
000002F2                            
000002F2                            ; ===========================================================================
000002F2 8000                       SetupValues:	dc.w $8000		; VDP register start number
000002F4 3FFF                       		dc.w $3FFF		; size of RAM/4
000002F6 0100                       		dc.w $100		; VDP register diff
000002F8                            
000002F8 00A0 0000                  		dc.l z80_ram		; start	of Z80 RAM
000002FC 00A1 1100                  		dc.l z80_bus_request	; Z80 bus request
00000300 00A1 1200                  		dc.l z80_reset		; Z80 reset
00000304 00C0 0000                  		dc.l vdp_data_port	; VDP data
00000308 00C0 0004                  		dc.l vdp_control_port	; VDP control
0000030C                            
0000030C 04                         		dc.b 4			; VDP $80 - 8-colour mode
0000030D 14                         		dc.b $14		; VDP $81 - Megadrive mode, DMA enable
0000030E 30                         		dc.b ($C000>>10)	; VDP $82 - foreground nametable address
0000030F 3C                         		dc.b ($F000>>10)	; VDP $83 - window nametable address
00000310 07                         		dc.b ($E000>>13)	; VDP $84 - background nametable address
00000311 6C                         		dc.b ($D800>>9)		; VDP $85 - sprite table address
00000312 00                         		dc.b 0			; VDP $86 - unused
00000313 00                         		dc.b 0			; VDP $87 - background colour
00000314 00                         		dc.b 0			; VDP $88 - unused
00000315 00                         		dc.b 0			; VDP $89 - unused
00000316 FF                         		dc.b 255		; VDP $8A - HBlank register
00000317 00                         		dc.b 0			; VDP $8B - full screen scroll
00000318 81                         		dc.b $81		; VDP $8C - 40 cell display
00000319 37                         		dc.b ($DC00>>10)	; VDP $8D - hscroll table address
0000031A 00                         		dc.b 0			; VDP $8E - unused
0000031B 01                         		dc.b 1			; VDP $8F - VDP increment
0000031C 01                         		dc.b 1			; VDP $90 - 64 cell hscroll size
0000031D 00                         		dc.b 0			; VDP $91 - window h position
0000031E 00                         		dc.b 0			; VDP $92 - window v position
0000031F FFFF                       		dc.w $FFFF		; VDP $93/94 - DMA length
00000321 0000                       		dc.w 0			; VDP $95/96 - DMA source
00000323 80                         		dc.b $80		; VDP $97 - DMA fill VRAM
00000324 4000 0080                  		dc.l $40000080		; VRAM address 0
00000328                            
00000328 AF                         		dc.b $AF		; xor	a
00000329 01D9 1F                    		dc.b $01, $D9, $1F	; ld	bc,1fd9h
0000032C 1127 00                    		dc.b $11, $27, $00	; ld	de,0027h
0000032F 2126 00                    		dc.b $21, $26, $00	; ld	hl,0026h
00000332 F9                         		dc.b $F9		; ld	sp,hl
00000333 77                         		dc.b $77		; ld	(hl),a
00000334 EDB0                       		dc.b $ED, $B0		; ldir
00000336 DDE1                       		dc.b $DD, $E1		; pop	ix
00000338 FDE1                       		dc.b $FD, $E1		; pop	iy
0000033A ED47                       		dc.b $ED, $47		; ld	i,a
0000033C ED4F                       		dc.b $ED, $4F		; ld	r,a
0000033E D1                         		dc.b $D1		; pop	de
0000033F E1                         		dc.b $E1		; pop	hl
00000340 F1                         		dc.b $F1		; pop	af
00000341 08                         		dc.b $08		; ex	af,af'
00000342 D9                         		dc.b $D9		; exx
00000343 C1                         		dc.b $C1		; pop	bc
00000344 D1                         		dc.b $D1		; pop	de
00000345 E1                         		dc.b $E1		; pop	hl
00000346 F1                         		dc.b $F1		; pop	af
00000347 F9                         		dc.b $F9		; ld	sp,hl
00000348 F3                         		dc.b $F3		; di
00000349 ED56                       		dc.b $ED, $56		; im1
0000034B 36E9                       		dc.b $36, $E9		; ld	(hl),e9h
0000034D E9                         		dc.b $E9		; jp	(hl)
0000034E                            
0000034E 8104                       		dc.w $8104		; VDP display mode
00000350 8F02                       		dc.w $8F02		; VDP increment
00000352 C000 0000                  		dc.l $C0000000		; CRAM write mode
00000356 4000 0010                  		dc.l $40000010		; VSRAM address 0
0000035A                            
0000035A 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
0000035E                            ; ===========================================================================
0000035E                            
0000035E                            GameProgram:
0000035E 4A79 00C0 0004             		tst.w	(vdp_control_port).l
00000364 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000036C 6700                       		beq.s	CheckSumCheck
0000036E 0CB8 696E 6974 FFFC        		cmpi.l	#'init',(v_init).w ; has checksum routine already run?
00000376 6700 0000                  		beq.w	GameInit	; if yes, branch
0000037A                            
0000037A                            CheckSumCheck:
0000037A 207C 0000 0200             		movea.l	#EndOfHeader,a0	; start	checking bytes after the header	($200)
00000380 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000386 2011                       		move.l	(a1),d0
00000388 7200                       		moveq	#0,d1
0000038A                            
0000038A                            	@loop:
0000038A D258                       		add.w	(a0)+,d1
0000038C B088                       		cmp.l	a0,d0
0000038E 64FA                       		bhs.s	@loop
00000390 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000396 B251                       		cmp.w	(a1),d1		; compare checksum in header to ROM
00000398 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000039C                            
0000039C                            	CheckSumOk:
0000039C 4DF8 FE00                  		lea	($FFFFFE00).w,a6
000003A0 7E00                       		moveq	#0,d7
000003A2 3C3C 007F                  		move.w	#$7F,d6
000003A6                            	@clearRAM:
000003A6 2CC7                       		move.l	d7,(a6)+
000003A8 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($FE00-$FFFF)
000003AC                            
000003AC 1039 00A1 0001             		move.b	(z80_version).l,d0
000003B2 0200 00C0                  		andi.b	#$C0,d0
000003B6 11C0 FFF8                  		move.b	d0,(v_megadrive).w ; get region setting
000003BA 21FC 696E 6974 FFFC        		move.l	#'init',(v_init).w ; set flag so checksum won't run again
000003C2                            
000003C2                            GameInit:
000003C2 4DF9 00FF 0000             		lea	($FF0000).l,a6
000003C8 7E00                       		moveq	#0,d7
000003CA 3C3C 3F7F                  		move.w	#$3F7F,d6
000003CE                            	@clearRAM:
000003CE 2CC7                       		move.l	d7,(a6)+
000003D0 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($0000-$FDFF)
000003D4 4EB9 0000 0000                     jsr	(InitDMAQueue).l	
000003DA 6100 0000                  		bsr.w	VDPSetupGame
000003DE 6100 0000                  		bsr.w	SoundDriverLoad
000003E2 6100 0000                  		bsr.w	JoypadInit
000003E6 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set Game Mode to Sega Screen
000003EC                            
000003EC                            MainGameLoop:
000003EC 4EB9 0000 0000             		jsr		ReadJoypads
000003F2 1038 F600                  		move.b	(v_gamemode).w,d0 ; load Game Mode
000003F6 0240 007C                  		andi.w	#$7C,d0	; limit Game Mode value to $1C max (change to a maximum of 7C to add more game modes)
000003FA 207B 0000                  		movea.l	GameModeArray(pc,d0.w),a0 ; jump to apt location in ROM
000003FE 4E90                       		jsr		(a0)
00000400 60EA                       		bra.s	MainGameLoop	; loop indefinitely
00000402                            ; ===========================================================================
00000402                            ; ---------------------------------------------------------------------------
00000402                            ; Main game mode array
00000402                            ; ---------------------------------------------------------------------------
00000402                            
00000402                            GameModeArray:
00000402 0000 0000                  ptr_GM_Sega:		dc.l	GM_Sega		; Sega Screen ($00)
00000406 0000 0000                  ptr_GM_Title:		dc.l	GM_Title	; Title	Screen ($04)
0000040A 0000 0000                  ptr_GM_Demo:		dc.l	GM_Level	; Demo Mode ($08)
0000040E 0000 0000                  ptr_GM_Level:		dc.l	GM_Level	; Normal Level ($0C)
00000412 0000 0000                  ptr_GM_Special:		dc.l	GM_Special	; Special Stage	($10)
00000416 0000 0000                  ptr_GM_Cont:		dc.l	GM_Continue	; Continue Screen ($14)
0000041A 0000 0000                  ptr_GM_Ending:		dc.l	GM_Ending	; End of game sequence ($18)
0000041E 0000 0000                  ptr_GM_Credits:		dc.l	GM_Credits	; Credits ($1C)
00000422 0000 0000                  ptr_GM_MenuScreen:	dc.l	MenuScreen	; Credits ($20)
00000426 4E75                       		rts	
00000428                            ; ===========================================================================
00000428                            
00000428                            CheckSumError:
00000428 6100 0000                  		bsr.w	VDPSetupGame
0000042C 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
00000436 7E3F                       		moveq	#$3F,d7
00000438                            
00000438                            	@fillred:
00000438 33FC 000E 00C0 0000        		move.w	#cRed,(vdp_data_port).l ; fill palette with red
00000440 51CF FFF6                  		dbf	d7,@fillred	; repeat $3F more times
00000444                            
00000444                            	@endlessloop:
00000444 60FE                       		bra.s	@endlessloop
00000446                            ; ===========================================================================
00000446                            
00000446                            
00000446                            ; ===========================================================================
00000446                            
00000446                            loc_43A:
00000446 46FC 2700                  		disable_ints
0000044A 544F                       		addq.w	#2,sp
0000044C 21DF FC40                  		move.l	(sp)+,(v_spbuffer).w
00000450 544F                       		addq.w	#2,sp
00000452 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
00000458 6100 0000                  		bsr.w	ShowErrorMessage
0000045C 202F 0002                  		move.l	2(sp),d0
00000460 6100 0000                  		bsr.w	ShowErrorValue
00000464 2038 FC40                  		move.l	(v_spbuffer).w,d0
00000468 6100 0000                  		bsr.w	ShowErrorValue
0000046C 6000                       		bra.s	loc_478
0000046E                            ; ===========================================================================
0000046E                            
0000046E                            loc_462:
0000046E 46FC 2700                  		disable_ints
00000472 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
00000478 6100 0000                  		bsr.w	ShowErrorMessage
0000047C 202F 0002                  		move.l	2(sp),d0
00000480 6100 0000                  		bsr.w	ShowErrorValue
00000484                            
00000484                            loc_478:
00000484 6100 0000                  		bsr.w	ErrorWaitForC
00000488 4CF8 FFFF FC00             		movem.l	(v_regbuffer).w,d0-a7
0000048E 46FC 2300                  		enable_ints
00000492 4E73                       		rte	
00000494                            
00000494                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000494                            
00000494                            
00000494                            ShowErrorMessage:
00000494 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000004A4 41F9 0000 0000             		lea	(Art_Text).l,a0
000004AA 323C 027F                  		move.w	#$27F,d1
000004AE                            	@loadgfx:
000004AE 3C98                       		move.w	(a0)+,(a6)
000004B0 51C9 FFFC                  		dbf	d1,@loadgfx
000004B4                            
000004B4 7000                       		moveq	#0,d0		; clear	d0
000004B6 1038 FC44                  		move.b	(v_errortype).w,d0 ; load error code
000004BA 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004BE 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004CC 7212                       		moveq	#$12,d1		; number of characters (minus 1)
000004CE                            
000004CE                            	@showchars:
000004CE 7000                       		moveq	#0,d0
000004D0 1018                       		move.b	(a0)+,d0
000004D2 0640 0790                  		addi.w	#$790,d0
000004D6 3C80                       		move.w	d0,(a6)
000004D8 51C9 FFF4                  		dbf	d1,@showchars	; repeat for number of characters
000004DC 4E75                       		rts	
000004DE                            ; End of function ShowErrorMessage
000004DE                            
000004DE                            ; ===========================================================================
000004DE 0000 0000                  ErrorText:	dc.w @exception-ErrorText, @bus-ErrorText
000004E2 0000 0000                  		dc.w @address-ErrorText, @illinstruct-ErrorText
000004E6 0000 0000                  		dc.w @zerodivide-ErrorText, @chkinstruct-ErrorText
000004EA 0000 0000                  		dc.w @trapv-ErrorText, @privilege-ErrorText
000004EE 0000 0000                  		dc.w @trace-ErrorText, @line1010-ErrorText
000004F2 0000                       		dc.w @line1111-ErrorText
000004F4 4552 524F 5220 4558 4345+  @exception:	dc.b "ERROR EXCEPTION    "
00000507 4255 5320 4552 524F 5220+  @bus:		dc.b "BUS ERROR          "
0000051A 4144 4452 4553 5320 4552+  @address:	dc.b "ADDRESS ERROR      "
0000052D 494C 4C45 4741 4C20 494E+  @illinstruct:	dc.b "ILLEGAL INSTRUCTION"
00000540 4045 524F 2044 4956 4944+  @zerodivide:	dc.b "@ERO DIVIDE        "
00000553 4348 4B20 494E 5354 5255+  @chkinstruct:	dc.b "CHK INSTRUCTION    "
00000566 5452 4150 5620 494E 5354+  @trapv:		dc.b "TRAPV INSTRUCTION  "
00000579 5052 4956 494C 4547 4520+  @privilege:	dc.b "PRIVILEGE VIOLATION"
0000058C 5452 4143 4520 2020 2020+  @trace:		dc.b "TRACE              "
0000059F 4C49 4E45 2031 3031 3020+  @line1010:	dc.b "LINE 1010 EMULATOR "
000005B2 4C49 4E45 2031 3131 3120+  @line1111:	dc.b "LINE 1111 EMULATOR "
000005C6 00                         		even
000005C6                            
000005C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005C6                            
000005C6                            
000005C6                            ShowErrorValue:
000005C6 3CBC 07CA                  		move.w	#$7CA,(a6)	; display "$" symbol
000005CA 7407                       		moveq	#7,d2
000005CC                            
000005CC                            	@loop:
000005CC E998                       		rol.l	#4,d0
000005CE 6100                       		bsr.s	@shownumber	; display 8 numbers
000005D0 51CA FFFA                  		dbf	d2,@loop
000005D4 4E75                       		rts	
000005D6                            ; End of function ShowErrorValue
000005D6                            
000005D6                            
000005D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005D6                            
000005D6                            
000005D6                            @shownumber:
000005D6 3200                       		move.w	d0,d1
000005D8 0241 000F                  		andi.w	#$F,d1
000005DC 0C41 000A                  		cmpi.w	#$A,d1
000005E0 6500                       		blo.s	@chars0to9
000005E2 5E41                       		addq.w	#7,d1		; add 7 for characters A-F
000005E4                            
000005E4                            	@chars0to9:
000005E4 0641 07C0                  		addi.w	#$7C0,d1
000005E8 3C81                       		move.w	d1,(a6)
000005EA 4E75                       		rts	
000005EC                            ; End of function sub_5CA
000005EC                            
000005EC                            
000005EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005EC                            
000005EC                            
000005EC                            ErrorWaitForC:
000005EC 6100 0000                  		bsr.w	ReadJoypads
000005F0 0C38 0020 F605             		cmpi.b	#btnC,(v_jpadpress1).w ; is button C pressed?
000005F6 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005FA 4E75                       		rts	
000005FC                            ; End of function ErrorWaitForC
000005FC                            
000005FC                            ; ===========================================================================
000005FC                            
000005FC                            Art_Text:	incbin	"artunc\menutext.bin" ; text used in level select and debug mode
00000B1C                            		even
00000B1C                            
00000B1C                            ; ---------------------------------------------------------------------------
00000B1C                            ; Vertical interrupt
00000B1C                            ; ---------------------------------------------------------------------------
00000B1C                            
00000B1C                            VBlank:
00000B1C 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000B20 4A38 F62A                  		tst.b	(v_vbla_routine).w
00000B24 6700                       		beq.s	VBla_00
00000B26 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000B2C 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
00000B36 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l ; send screen y-axis pos. to VSRAM
00000B3E 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000B44 6700                       		beq.s	@notPAL		; if not, branch
00000B46                            
00000B46 303C 0700                  		move.w	#$700,d0
00000B4A                            	@waitPAL:
00000B4A 51C8 FFFE                  		dbf	d0,@waitPAL ; wait here in a loop doing nothing for a while...
00000B4E                            
00000B4E                            	@notPAL:
00000B4E 1038 F62A                  		move.b	(v_vbla_routine).w,d0
00000B52 11FC 0000 F62A             		move.b	#0,(v_vbla_routine).w
00000B58 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w
00000B5E 0240 003E                  		andi.w	#$3E,d0
00000B62 303B 0000                  		move.w	VBla_Index(pc,d0.w),d0
00000B66 4EBB 0000                  		jsr	VBla_Index(pc,d0.w)
00000B6A                            
00000B6A                            VBla_Music:
00000B6A 4EB9 0000 0000             		jsr	(UpdateMusic).l
00000B70                            
00000B70                            VBla_Exit:
00000B70 52B8 FE0C                  		addq.l	#1,(v_vbla_count).w
00000B74 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B78 4E73                       		rte	
00000B7A                            ; ===========================================================================
00000B7A 0000 0000                  VBla_Index:	dc.w VBla_00-VBla_Index, VBla_02-VBla_Index
00000B7E 0000 0000                  		dc.w VBla_04-VBla_Index, VBla_06-VBla_Index
00000B82 0000 0000                  		dc.w VBla_08-VBla_Index, VBla_0A-VBla_Index
00000B86 0000 0000                  		dc.w VBla_0C-VBla_Index, VBla_0E-VBla_Index
00000B8A 0000 0000                  		dc.w VBla_10-VBla_Index, VBla_12-VBla_Index
00000B8E 0000 0000                  		dc.w VBla_14-VBla_Index, VBla_16-VBla_Index
00000B92 0000                       		dc.w VBla_0C-VBla_Index
00000B94                            ; ===========================================================================
00000B94                            
00000B94                            VBla_00:
00000B94 0C38 0000 F600             		cmpi.b	#$80+id_Level,(v_gamemode).w
00000B9A 6700                       		beq.s	@islevel
00000B9C 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w ; is game on a level?
00000BA2 6600 FFC6                  		bne.w	VBla_Music	; if not, branch
00000BA6                            
00000BA6                            	@islevel:
00000BA6 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ ?
00000BAC 6600 FFBC                  		bne.w	VBla_Music	; if not, branch
00000BB0                            
00000BB0 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000BB6 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000BBC 6700                       		beq.s	@notPAL		; if not, branch
00000BBE                            
00000BBE 303C 0700                  		move.w	#$700,d0
00000BC2                            	@waitPAL:
00000BC2 51C8 FFFE                  		dbf	d0,@waitPAL
00000BC6                            
00000BC6                            	@notPAL:
00000BC6 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w ; set HBlank flag
00000BCC 33FC 0100 00A1 1100        		stopZ80
00000BD4 0839 0000 00A1 1100 66F6   		waitZ80
00000BDE 4A38 F64E                  		tst.b	(f_wtr_state).w	; is water above top of screen?
00000BE2 6600                       		bne.s	@waterabove 	; if yes, branch
00000BE4                            
00000BE4 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000C08 6000                       		bra.s	@waterbelow
00000C0A                            
00000C0A                            @waterabove:
00000C0A 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000C2E                            
00000C2E                            	@waterbelow:
00000C2E 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000C32 33FC 0000 00A1 1100        		startZ80
00000C3A 6000 FF2E                  		bra.w	VBla_Music
00000C3E                            ; ===========================================================================
00000C3E                            
00000C3E                            VBla_02:
00000C3E 6100 0000                  		bsr.w	sub_106E
00000C42                            
00000C42                            VBla_14:
00000C42 4A78 F614                  		tst.w	(v_demolength).w
00000C46 6700 0000                  		beq.w	@end
00000C4A 5378 F614                  		subq.w	#1,(v_demolength).w
00000C4E                            
00000C4E                            	@end:
00000C4E 4E75                       		rts	
00000C50                            ; ===========================================================================
00000C50                            
00000C50                            VBla_04:
00000C50 6100 0000                  		bsr.w	sub_106E
00000C54 6100 0000                  		bsr.w	LoadTilesAsYouMove_BGOnly
00000C58 4EB9 0000 0000             		jsr 	ProcessDMAQueue		
00000C5E 6100 0000                  		bsr.w	sub_1642
00000C62 4A78 F614                  		tst.w	(v_demolength).w
00000C66 6700 0000                  		beq.w	@end
00000C6A 5378 F614                  		subq.w	#1,(v_demolength).w
00000C6E                            
00000C6E                            	@end:
00000C6E 4E75                       		rts	
00000C70                            ; ===========================================================================
00000C70                            
00000C70                            VBla_06:
00000C70 6100 0000                  		bsr.w	sub_106E
00000C74 4E75                       		rts	
00000C76                            ; ===========================================================================
00000C76                            
00000C76                            VBla_10:
00000C76 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game on special stage?
00000C7C 6700 0000                  		beq.w	VBla_0A		; if yes, branch
00000C80                            
00000C80                            VBla_08:
00000C80 33FC 0100 00A1 1100        		stopZ80
00000C88 0839 0000 00A1 1100 66F6   		waitZ80
00000C92 6100 0000                  		bsr.w	ReadJoypads
00000C96 4A38 F64E                  		tst.b	(f_wtr_state).w
00000C9A 6600                       		bne.s	@waterabove
00000C9C                            
00000C9C 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000CC0 6000                       		bra.s	@waterbelow
00000CC2                            
00000CC2                            @waterabove:
00000CC2 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000CE6                            
00000CE6                            	@waterbelow:
00000CE6 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000CEA                            
00000CEA 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000D0E 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000D32 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000D38                            
00000D38                            	@nochg:
00000D38 33FC 0000 00A1 1100        		startZ80
00000D40 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000D46 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000D4C 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000D52 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000D58 0C38 0060 F625             		cmpi.b	#96,(v_hbla_line).w
00000D5E 6400                       		bhs.s	Demo_Time
00000D60 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000D66 588F                       		addq.l	#4,sp
00000D68 6000 FE06                  		bra.w	VBla_Exit
00000D6C                            
00000D6C                            ; ---------------------------------------------------------------------------
00000D6C                            ; Subroutine to	run a demo for an amount of time
00000D6C                            ; ---------------------------------------------------------------------------
00000D6C                            
00000D6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000D6C                            
00000D6C                            
00000D6C                            Demo_Time:
00000D6C 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D70 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000D76 4EB9 0000 0000             		jsr	(HUD_Update).l
00000D7C 6100 0000                  		bsr.w	ProcessDPLC2
00000D80 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00000D84 6700 0000                  		beq.w	@end		; if not, branch
00000D88 5378 F614                  		subq.w	#1,(v_demolength).w ; subtract 1 from time left
00000D8C                            
00000D8C                            	@end:
00000D8C 4E75                       		rts	
00000D8E                            ; End of function Demo_Time
00000D8E                            
00000D8E                            ; ===========================================================================
00000D8E                            
00000D8E                            VBla_0A:
00000D8E 33FC 0100 00A1 1100        		stopZ80
00000D96 0839 0000 00A1 1100 66F6   		waitZ80
00000DA0 6100 0000                  		bsr.w	ReadJoypads
00000DA4 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000DC8 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000DEC 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000E10 33FC 0000 00A1 1100        		startZ80
00000E18 6100 0000                  		bsr.w	PalCycle_SS
00000E1C 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000E22                            
00000E22                            	@nochg:
00000E22 4A78 F614                  		tst.w	(v_demolength).w	; is there time left on the demo?
00000E26 6700 0000                  		beq.w	@end	; if not, return
00000E2A 5378 F614                  		subq.w	#1,(v_demolength).w	; subtract 1 from time left in demo
00000E2E                            
00000E2E                            	@end:
00000E2E 4E75                       		rts	
00000E30                            ; ===========================================================================
00000E30                            
00000E30                            VBla_0C:
00000E30 33FC 0100 00A1 1100        		stopZ80
00000E38 0839 0000 00A1 1100 66F6   		waitZ80
00000E42 6100 0000                  		bsr.w	ReadJoypads
00000E46 4A38 F64E                  		tst.b	(f_wtr_state).w
00000E4A 6600                       		bne.s	@waterabove
00000E4C                            
00000E4C 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000E70 6000                       		bra.s	@waterbelow
00000E72                            
00000E72                            @waterabove:
00000E72 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000E96                            
00000E96                            	@waterbelow:
00000E96 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000E9A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000EBE 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000EE2 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000EE8                            
00000EE8                            	@nochg:
00000EE8 33FC 0000 00A1 1100        		startZ80
00000EF0 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000EF6 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000EFC 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000F02 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000F08 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000F0C 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000F12 4EB9 0000 0000             		jsr	(HUD_Update).l
00000F18 6100 0000                  		bsr.w	sub_1642
00000F1C 4E75                       		rts	
00000F1E                            ; ===========================================================================
00000F1E                            
00000F1E                            VBla_0E:
00000F1E 6100 0000                  		bsr.w	sub_106E
00000F22 5238 F628                  		addq.b	#1,($FFFFF628).w
00000F26 11FC 000E F62A             		move.b	#$E,(v_vbla_routine).w
00000F2C 4E75                       		rts	
00000F2E                            ; ===========================================================================
00000F2E                            
00000F2E                            VBla_12:
00000F2E 6100 0000                  		bsr.w	sub_106E
00000F32 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000F36 6000 0000                  		bra.w	sub_1642
00000F3A                            ; ===========================================================================
00000F3A                            
00000F3A                            VBla_16:
00000F3A 33FC 0100 00A1 1100        		stopZ80
00000F42 0839 0000 00A1 1100 66F6   		waitZ80
00000F4C 6100 0000                  		bsr.w	ReadJoypads
00000F50 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000F74 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000F98 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000FBC 33FC 0000 00A1 1100        		startZ80
00000FC4 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000FCA                            	@nochg:
00000FCA 4A78 F614                  		tst.w	(v_demolength).w
00000FCE 6700 0000                  		beq.w	@end
00000FD2 5378 F614                  		subq.w	#1,(v_demolength).w
00000FD6                            
00000FD6                            	@end:
00000FD6 4E75                       		rts	
00000FD8                            
00000FD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FD8                            
00000FD8                            
00000FD8                            sub_106E:
00000FD8 33FC 0100 00A1 1100        		stopZ80
00000FE0 0839 0000 00A1 1100 66F6   		waitZ80
00000FEA 6100 0000                  		bsr.w	ReadJoypads
00000FEE 4A38 F64E                  		tst.b	(f_wtr_state).w ; is water above top of screen?
00000FF2 6600                       		bne.s	@waterabove	; if yes, branch
00000FF4 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00001018 6000                       		bra.s	@waterbelow
0000101A                            
0000101A                            	@waterabove:
0000101A 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
0000103E                            
0000103E                            	@waterbelow:
0000103E 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00001062 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00001086 33FC 0000 00A1 1100        		startZ80
0000108E 4E75                       		rts	
00001090                            ; End of function sub_106E
00001090                            
00001090                            ; ---------------------------------------------------------------------------
00001090                            ; Horizontal interrupt
00001090                            ; ---------------------------------------------------------------------------
00001090                            
00001090                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001090                            
00001090                            
00001090                            HBlank:
00001090 46FC 2700                  		disable_ints
00001094 4A78 F644                  		tst.w	(f_hbla_pal).w	; is palette set to change?
00001098 6700                       		beq.s	@nochg		; if not, branch
0000109A 31FC 0000 F644             		move.w	#0,(f_hbla_pal).w
000010A0 48E7 00C0                  		movem.l	a0-a1,-(sp)
000010A4 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
000010AA 41F8 FA80                  		lea	(v_pal_water).w,a0 ; get palette from RAM
000010AE 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
000010B6 2298                       		move.l	(a0)+,(a1)	; move palette to CRAM
000010B8 2298                       		move.l	(a0)+,(a1)
000010BA 2298                       		move.l	(a0)+,(a1)
000010BC 2298                       		move.l	(a0)+,(a1)
000010BE 2298                       		move.l	(a0)+,(a1)
000010C0 2298                       		move.l	(a0)+,(a1)
000010C2 2298                       		move.l	(a0)+,(a1)
000010C4 2298                       		move.l	(a0)+,(a1)
000010C6 2298                       		move.l	(a0)+,(a1)
000010C8 2298                       		move.l	(a0)+,(a1)
000010CA 2298                       		move.l	(a0)+,(a1)
000010CC 2298                       		move.l	(a0)+,(a1)
000010CE 2298                       		move.l	(a0)+,(a1)
000010D0 2298                       		move.l	(a0)+,(a1)
000010D2 2298                       		move.l	(a0)+,(a1)
000010D4 2298                       		move.l	(a0)+,(a1)
000010D6 2298                       		move.l	(a0)+,(a1)
000010D8 2298                       		move.l	(a0)+,(a1)
000010DA 2298                       		move.l	(a0)+,(a1)
000010DC 2298                       		move.l	(a0)+,(a1)
000010DE 2298                       		move.l	(a0)+,(a1)
000010E0 2298                       		move.l	(a0)+,(a1)
000010E2 2298                       		move.l	(a0)+,(a1)
000010E4 2298                       		move.l	(a0)+,(a1)
000010E6 2298                       		move.l	(a0)+,(a1)
000010E8 2298                       		move.l	(a0)+,(a1)
000010EA 2298                       		move.l	(a0)+,(a1)
000010EC 2298                       		move.l	(a0)+,(a1)
000010EE 2298                       		move.l	(a0)+,(a1)
000010F0 2298                       		move.l	(a0)+,(a1)
000010F2 2298                       		move.l	(a0)+,(a1)
000010F4 2298                       		move.l	(a0)+,(a1)
000010F6 337C 8ADF 0004             		move.w	#$8A00+223,4(a1) ; reset HBlank register
000010FC 4CDF 0300                  		movem.l	(sp)+,a0-a1
00001100 4A38 F64F                  		tst.b	($FFFFF64F).w
00001104 6600                       		bne.s	loc_119E
00001106                            
00001106                            	@nochg:
00001106 4E73                       		rte	
00001108                            ; ===========================================================================
00001108                            
00001108                            loc_119E:
00001108 4238 F64F                  		clr.b	($FFFFF64F).w
0000110C 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00001110 6100 FC5A                  		bsr.w	Demo_Time
00001114 4EB9 0000 0000             		jsr	(UpdateMusic).l
0000111A 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
0000111E 4E73                       		rte	
00001120                            ; End of function HBlank
00001120                            
00001120                            ; ---------------------------------------------------------------------------
00001120                            ; Subroutine to	initialise joypads
00001120                            ; ---------------------------------------------------------------------------
00001120                            
00001120                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001120                            
00001120                            
00001120                            JoypadInit:
00001120 33FC 0100 00A1 1100        		stopZ80
00001128 0839 0000 00A1 1100 66F6   		waitZ80
00001132 7040                       		moveq	#$40,d0
00001134 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
0000113A 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00001140 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (expansion/extra)
00001146 33FC 0000 00A1 1100        		startZ80
0000114E 4E75                       		rts	
00001150                            ; End of function JoypadInit
00001150                            
00001150                            ; ---------------------------------------------------------------------------
00001150                            ; Subroutine to	read joypad input, and send it to the RAM
00001150                            ; ---------------------------------------------------------------------------
00001150                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001150                            
00001150                            
00001150                            ReadJoypads:
00001150 41F8 F604                  		lea	(v_jpadhold1).w,a0 ; address where joypad states are written
00001154 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
0000115A 6100                       		bsr.s	@read		; do the first joypad
0000115C 5449                       		addq.w	#2,a1		; do the second	joypad
0000115E                            
0000115E                            	@read:
0000115E 12BC 0000                  		move.b	#0,(a1)
00001162 4E71                       		nop	
00001164 4E71                       		nop	
00001166 1011                       		move.b	(a1),d0
00001168 E508                       		lsl.b	#2,d0
0000116A 0200 00C0                  		andi.b	#$C0,d0
0000116E 12BC 0040                  		move.b	#$40,(a1)
00001172 4E71                       		nop	
00001174 4E71                       		nop	
00001176 1211                       		move.b	(a1),d1
00001178 0201 003F                  		andi.b	#$3F,d1
0000117C 8001                       		or.b	d1,d0
0000117E 4600                       		not.b	d0
00001180 1210                       		move.b	(a0),d1
00001182 B101                       		eor.b	d0,d1
00001184 10C0                       		move.b	d0,(a0)+
00001186 C200                       		and.b	d0,d1
00001188 10C1                       		move.b	d1,(a0)+
0000118A 4E75                       		rts	
0000118C                            ; End of function ReadJoypads
0000118C                            
0000118C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000118C                            
0000118C                            
0000118C                            VDPSetupGame:
0000118C 41F9 00C0 0004             		lea	(vdp_control_port).l,a0
00001192 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
00001198 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
0000119E 7E12                       		moveq	#$12,d7
000011A0                            
000011A0                            	@setreg:
000011A0 309A                       		move.w	(a2)+,(a0)
000011A2 51CF FFFC                  		dbf	d7,@setreg	; set the VDP registers
000011A6                            
000011A6 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
000011AC 31C0 F60C                  		move.w	d0,(v_vdp_buffer1).w
000011B0 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w	; H-INT every 224th scanline
000011B6 7000                       		moveq	#0,d0
000011B8 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
000011C2 3E3C 003F                  		move.w	#$3F,d7
000011C6                            
000011C6                            	@clrCRAM:
000011C6 3280                       		move.w	d0,(a1)
000011C8 51CF FFFC                  		dbf	d7,@clrCRAM	; clear	the CRAM
000011CC                            
000011CC 42B8 F616                  		clr.l	(v_scrposy_dup).w
000011D0 42B8 F61A                  		clr.l	(v_scrposx_dup).w
000011D4 2F01                       		move.l	d1,-(sp)
000011D6 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFFF,0
000011F8                            
000011F8                            	@waitforDMA:
000011F8 3215                       		move.w	(a5),d1
000011FA 0801 0001                  		btst	#1,d1		; is DMA (fillVRAM) still running?
000011FE 66F8                       		bne.s	@waitforDMA	; if yes, branch
00001200                            
00001200 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment size
00001204 221F                       		move.l	(sp)+,d1
00001206 4E75                       		rts	
00001208                            ; End of function VDPSetupGame
00001208                            
00001208                            ; ===========================================================================
00001208 8004                       VDPSetupArray:	dc.w $8004		; 8-colour mode
0000120A 8134                       		dc.w $8134		; enable V.interrupts, enable DMA
0000120C 8230                       		dc.w $8200+(vram_fg>>10) ; set foreground nametable address
0000120E 8328                       		dc.w $8300+($A000>>10)	; set window nametable address
00001210 8407                       		dc.w $8400+(vram_bg>>13) ; set background nametable address
00001212 857C                       		dc.w $8500+(vram_sprites>>9) ; set sprite table address
00001214 8600                       		dc.w $8600		; unused
00001216 8700                       		dc.w $8700		; set background colour (palette entry 0)
00001218 8800                       		dc.w $8800		; unused
0000121A 8900                       		dc.w $8900		; unused
0000121C 8A00                       		dc.w $8A00		; default H.interrupt register
0000121E 8B00                       		dc.w $8B00		; full-screen vertical scrolling
00001220 8C81                       		dc.w $8C81		; 40-cell display mode
00001222 8D3F                       		dc.w $8D00+(vram_hscroll>>10) ; set background hscroll address
00001224 8E00                       		dc.w $8E00		; unused
00001226 8F02                       		dc.w $8F02		; set VDP increment size
00001228 9001                       		dc.w $9001		; 64-cell hscroll size
0000122A 9100                       		dc.w $9100		; window horizontal position
0000122C 9200                       		dc.w $9200		; window vertical position
0000122E                            
0000122E                            ; ---------------------------------------------------------------------------
0000122E                            ; Subroutine to	clear the screen
0000122E                            ; ---------------------------------------------------------------------------
0000122E                            
0000122E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000122E                            
0000122E                            
0000122E                            ClearScreen:
0000122E 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_fg ; clear foreground namespace
00001250                            
00001250                            	@wait1:
00001250 3215                       		move.w	(a5),d1
00001252 0801 0001                  		btst	#1,d1
00001256 66F8                       		bne.s	@wait1
00001258                            
00001258 3ABC 8F02                  		move.w	#$8F02,(a5)
0000125C 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_bg ; clear background namespace
0000127E                            
0000127E                            	@wait2:
0000127E 3215                       		move.w	(a5),d1
00001280 0801 0001                  		btst	#1,d1
00001284 66F8                       		bne.s	@wait2
00001286                            
00001286 3ABC 8F02                  		move.w	#$8F02,(a5)
0000128A 42B8 F616                  		clr.l	(v_scrposy_dup).w
0000128E 42B8 F61A                  		clr.l	(v_scrposx_dup).w
00001292                            
00001292 43F8 F800                  		lea	(v_spritetablebuffer).w,a1
00001296 7000                       		moveq	#0,d0
00001298 323C 00A0                  		move.w	#($280/4),d1	; This should be ($280/4)-1, leading to a slight bug (first bit of v_pal_water is cleared)
0000129C                            
0000129C                            	@clearsprites:
0000129C 22C0                       		move.l	d0,(a1)+
0000129E 51C9 FFFC                  		dbf	d1,@clearsprites ; clear sprite table (in RAM)
000012A2                            
000012A2 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000012A6 7000                       		moveq	#0,d0
000012A8 323C 0100                  		move.w	#($400/4),d1	; This should be ($400/4)-1, leading to a slight bug (first bit of the Sonic object's RAM is cleared)
000012AC                            
000012AC                            	@clearhscroll:
000012AC 22C0                       		move.l	d0,(a1)+
000012AE 51C9 FFFC                  		dbf	d1,@clearhscroll ; clear hscroll table (in RAM)
000012B2 4E75                       		rts	
000012B4                            ; End of function ClearScreen
000012B4                            
000012B4                            ; ---------------------------------------------------------------------------
000012B4                            ; Subroutine to	load the sound driver
000012B4                            ; ---------------------------------------------------------------------------
000012B4                            
000012B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012B4                            
000012B4                            
000012B4                            SoundDriverLoad:
000012B4 4E71                       		nop	
000012B6 33FC 0100 00A1 1100        		stopZ80
000012BE 33FC 0100 00A1 1200        		resetZ80
000012C6 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
000012CC 43F9 00A0 0000             		lea	(z80_ram).l,a1	; target Z80 RAM
000012D2 6100 0000                  		bsr.w	KosDec		; decompress
000012D6 33FC 0000 00A1 1200        		resetZ80a
000012DE 4E71                       		nop	
000012E0 4E71                       		nop	
000012E2 4E71                       		nop	
000012E4 4E71                       		nop	
000012E6 33FC 0100 00A1 1200        		resetZ80
000012EE 33FC 0000 00A1 1100        		startZ80
000012F6 4E75                       		rts	
000012F8                            ; End of function SoundDriverLoad
000012F8                            
000012F8                            		include	"_incObj\sub PlaySound.asm"
000012F8                            ; ---------------------------------------------------------------------------
000012F8                            ; Subroutine to	play a music track
000012F8                            
000012F8                            ; input:
000012F8                            ;	d0 = track to play
000012F8                            ; ---------------------------------------------------------------------------
000012F8                            
000012F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012F8                            
000012F8                            
000012F8                            PlaySound:
000012F8 11C0 F00A                  		move.b	d0,(v_snddriver_ram+v_soundqueue0).w
000012FC 4E75                       		rts	
000012FE                            ; End of function PlaySound
000012FE                            
000012FE                            ; ---------------------------------------------------------------------------
000012FE                            ; Subroutine to	play a sound effect
000012FE                            ; ---------------------------------------------------------------------------
000012FE                            
000012FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012FE                            
000012FE                            
000012FE                            PlaySound_Special:
000012FE 11C0 F00B                  		move.b	d0,(v_snddriver_ram+v_soundqueue1).w
00001302 4E75                       		rts	
00001304                            ; End of function PlaySound_Special
00001304                            
00001304                            ; ===========================================================================
00001304                            ; ---------------------------------------------------------------------------
00001304                            ; Unused sound/music subroutine
00001304                            ; ---------------------------------------------------------------------------
00001304                            
00001304                            PlaySound_Unused:
00001304 11C0 F00C                  		move.b	d0,(v_snddriver_ram+v_soundqueue2).w
00001308 4E75                       		rts	
00001308 4E75                       		rts	
0000130A                            		include	"_inc\PauseGame.asm"
0000130A                            ; ---------------------------------------------------------------------------
0000130A                            ; Subroutine to	pause the game
0000130A                            ; ---------------------------------------------------------------------------
0000130A                            
0000130A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000130A                            
0000130A                            
0000130A                            PauseGame:
0000130A 4E71                       		nop	
0000130C 4A38 FE12                  		tst.b	(v_lives).w	; do you have any lives	left?
00001310 6700                       		beq.s	Unpause		; if not, branch
00001312 4A78 F63A                  		tst.w	(f_pause).w	; is game already paused?
00001316 6600                       		bne.s	Pause_StopGame	; if yes, branch
00001318 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
0000131E 6700                       		beq.s	Pause_DoNothing	; if not, branch
00001320                            
00001320                            Pause_StopGame:
00001320 31FC 0001 F63A             		move.w	#1,(f_pause).w	; freeze time
00001326 11FC 0001 F003             		move.b	#1,(v_snddriver_ram+f_pausemusic).w ; pause music
0000132C                            
0000132C                            Pause_Loop:
0000132C 11FC 0010 F62A             		move.b	#$10,(v_vbla_routine).w
00001332 6100 0000                  		bsr.w	WaitForVBla
00001336 4A38 FFE1                  		tst.b	(f_slomocheat).w ; is slow-motion cheat on?
0000133A 6700                       		beq.s	Pause_ChkStart	; if not, branch
0000133C 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
00001342 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001344 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; set game mode to 4 (title screen)
0000134A 4E71                       		nop	
0000134C 6000                       		bra.s	Pause_EndMusic
0000134E                            ; ===========================================================================
0000134E                            
0000134E                            Pause_ChkBC:
0000134E 0838 0004 F604             		btst	#bitB,(v_jpadhold1).w ; is button B pressed?
00001354 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001356 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
0000135C 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000135E                            
0000135E                            Pause_ChkStart:
0000135E 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00001364 67C6                       		beq.s	Pause_Loop	; if not, branch
00001366                            
00001366                            Pause_EndMusic:
00001366 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; unpause the music
0000136C                            
0000136C                            Unpause:
0000136C 31FC 0000 F63A             		move.w	#0,(f_pause).w	; unpause the game
00001372                            
00001372                            Pause_DoNothing:
00001372 4E75                       		rts	
00001374                            ; ===========================================================================
00001374                            
00001374                            Pause_SlowMo:
00001374 31FC 0001 F63A             		move.w	#1,(f_pause).w
0000137A 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; Unpause the music
00001380 4E75                       		rts	
00001382                            ; End of function PauseGame
00001382                            ; End of function PauseGame
00001382                            
00001382                            ; ---------------------------------------------------------------------------
00001382                            ; Subroutine to	copy a tile map from RAM to VRAM namespace
00001382                            
00001382                            ; input:
00001382                            ;	a1 = tile map address
00001382                            ;	d0 = VRAM address
00001382                            ;	d1 = width (cells)
00001382                            ;	d2 = height (cells)
00001382                            ; ---------------------------------------------------------------------------
00001382                            
00001382                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001382                            
00001382                            
00001382                            TilemapToVRAM:
00001382 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00001388 283C 0080 0000             		move.l	#$800000,d4
0000138E                            
0000138E                            	Tilemap_Line:
0000138E 2D40 0004                  		move.l	d0,4(a6)	; move d0 to VDP_control_port
00001392 3601                       		move.w	d1,d3
00001394                            
00001394                            	Tilemap_Cell:
00001394 3C99                       		move.w	(a1)+,(a6)	; write value to namespace
00001396 51CB FFFC                  		dbf	d3,Tilemap_Cell	; next tile
0000139A D084                       		add.l	d4,d0		; goto next line
0000139C 51CA FFF0                  		dbf	d2,Tilemap_Line	; next line
000013A0 4E75                       		rts	
000013A2                            ; End of function TilemapToVRAM
000013A2                            
000013A2                            		include	"_inc\Nemesis Decompression.asm"
000013A2                            ; ==============================================================================
000013A2                            ; ------------------------------------------------------------------------------
000013A2                            ; Nemesis decompression routine
000013A2                            ; ------------------------------------------------------------------------------
000013A2                            ; Optimized by vladikcomper
000013A2                            ; ------------------------------------------------------------------------------
000013A2                             
000013A2                            NemDec_RAM:
000013A2 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
000013A6 47FA 0000                      lea NemDec_WriteRowToRAM(pc),a3
000013AA 6000                           bra.s   NemDec_Main
000013AC                             
000013AC                            ; ------------------------------------------------------------------------------
000013AC                            NemDec:
000013AC 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
000013B0 49F9 00C0 0000                 lea $C00000,a4      ; load VDP Data Port     
000013B6 47FA 0000                      lea NemPCD_WriteRowToVDP(pc),a3
000013BA                             
000013BA                            NemDec_Main:
000013BA 43F8 AA00                      lea $FFFFAA00,a1        ; load Nemesis decompression buffer
000013BE 3418                           move.w  (a0)+,d2        ; get number of patterns
000013C0 6A00                           bpl.s   @0          ; are we in Mode 0?
000013C2 47EB 000A                      lea $A(a3),a3       ; if not, use Mode 1
000013C6 E74A                       @0  lsl.w   #3,d2
000013C8 3A42                           movea.w d2,a5
000013CA 7607                           moveq   #7,d3
000013CC 7400                           moveq   #0,d2
000013CE 7800                           moveq   #0,d4
000013D0 6100 0000                      bsr.w   NemDec_BuildCodeTable
000013D4 1A18                           move.b  (a0)+,d5        ; get first byte of compressed data
000013D6 E145                           asl.w   #8,d5           ; shift up by a byte
000013D8 1A18                           move.b  (a0)+,d5        ; get second byte of compressed data
000013DA 3C3C 0010                      move.w  #$10,d6         ; set initial shift value
000013DE 6100                           bsr.s   NemDec2
000013E0 4CDF 7BFF                      movem.l (sp)+,d0-a1/a3-a6
000013E4 4E75                           rts
000013E6                             
000013E6                            ; ---------------------------------------------------------------------------
000013E6                            ; Part of the Nemesis decompressor, processes the actual compressed data
000013E6                            ; ---------------------------------------------------------------------------
000013E6                             
000013E6                            NemDec2:
000013E6 3E06                           move.w  d6,d7
000013E8 5147                           subq.w  #8,d7           ; get shift value
000013EA 3205                           move.w  d5,d1
000013EC EE69                           lsr.w   d7,d1           ; shift so that high bit of the code is in bit position 7
000013EE 0C01 00FC                      cmpi.b  #%11111100,d1       ; are the high 6 bits set?
000013F2 6400                           bcc.s   NemDec_InlineData   ; if they are, it signifies inline data
000013F4 0241 00FF                      andi.w  #$FF,d1
000013F8 D241                           add.w   d1,d1
000013FA 9C31 1000                      sub.b   (a1,d1.w),d6        ; ~~ subtract from shift value so that the next code is read next time around
000013FE 0C46 0009                      cmpi.w  #9,d6           ; does a new byte need to be read?
00001402 6400                           bcc.s   @0          ; if not, branch
00001404 5046                           addq.w  #8,d6
00001406 E145                           asl.w   #8,d5
00001408 1A18                           move.b  (a0)+,d5        ; read next byte
0000140A 1231 1001                  @0  move.b  1(a1,d1.w),d1
0000140E 3001                           move.w  d1,d0
00001410 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
00001414 0240 00F0                      andi.w  #$F0,d0
00001418                             
00001418                            NemDec_GetRepeatCount:
00001418 E848                           lsr.w   #4,d0           ; get repeat count
0000141A                             
0000141A                            NemDec_WritePixel:
0000141A E98C                           lsl.l   #4,d4           ; shift up by a nybble
0000141C 8801                           or.b    d1,d4           ; write pixel
0000141E 51CB 0000                      dbf d3,NemDec_WritePixelLoop; ~~
00001422 4ED3                           jmp (a3)            ; otherwise, write the row to its destination
00001424                            ; ---------------------------------------------------------------------------
00001424                             
00001424                            NemPCD_NewRow:
00001424 7800                           moveq   #0,d4           ; reset row
00001426 7607                           moveq   #7,d3           ; reset nybble counter
00001428                             
00001428                            NemDec_WritePixelLoop:
00001428 51C8 FFF0                      dbf d0,NemDec_WritePixel
0000142C 60B8                           bra.s   NemDec2
0000142E                            ; ---------------------------------------------------------------------------
0000142E                             
0000142E                            NemDec_InlineData:
0000142E 5D46                           subq.w  #6,d6           ; 6 bits needed to signal inline data
00001430 0C46 0009                      cmpi.w  #9,d6
00001434 6400                           bcc.s   @0
00001436 5046                           addq.w  #8,d6
00001438 E145                           asl.w   #8,d5
0000143A 1A18                           move.b  (a0)+,d5
0000143C 5F46                       @0  subq.w  #7,d6           ; and 7 bits needed for the inline data itself
0000143E 3205                           move.w  d5,d1
00001440 EC69                           lsr.w   d6,d1           ; shift so that low bit of the code is in bit position 0
00001442 3001                           move.w  d1,d0
00001444 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
00001448 0240 0070                      andi.w  #$70,d0         ; high nybble is repeat count for pixel
0000144C 0C46 0009                      cmpi.w  #9,d6
00001450 64C6                           bcc.s   NemDec_GetRepeatCount
00001452 5046                           addq.w  #8,d6
00001454 E145                           asl.w   #8,d5
00001456 1A18                           move.b  (a0)+,d5
00001458 60BE                           bra.s   NemDec_GetRepeatCount
0000145A                             
0000145A                            ; ---------------------------------------------------------------------------
0000145A                            ; Subroutines to output decompressed entry
0000145A                            ; Selected depending on current decompression mode
0000145A                            ; ---------------------------------------------------------------------------
0000145A                             
0000145A                            NemPCD_WriteRowToVDP:
0000145A                            loc_1502:
0000145A 2884                           move.l  d4,(a4)         ; write 8-pixel row
0000145C 534D                           subq.w  #1,a5
0000145E 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
00001460 66C2                           bne.s   NemPCD_NewRow         ; if not, branch
00001462 4E75                           rts
00001464                            ; ---------------------------------------------------------------------------
00001464                             
00001464                            NemPCD_WriteRowToVDP_XOR:
00001464 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
00001466 2882                           move.l  d2,(a4)         ; and write the result
00001468 534D                           subq.w  #1,a5
0000146A 380D                           move.w  a5,d4
0000146C 66B6                           bne.s   NemPCD_NewRow
0000146E 4E75                           rts
00001470                            ; ---------------------------------------------------------------------------
00001470                             
00001470                            NemDec_WriteRowToRAM:
00001470 28C4                           move.l  d4,(a4)+        ; write 8-pixel row
00001472 534D                           subq.w  #1,a5
00001474 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
00001476 66AC                           bne.s   NemPCD_NewRow         ; if not, branch
00001478 4E75                           rts
0000147A                            ; ---------------------------------------------------------------------------
0000147A                             
0000147A                            NemDec_WriteRowToRAM_XOR:
0000147A B982                           eor.l   d4,d2           ; XOR the previous row by the current row
0000147C 28C2                           move.l  d2,(a4)+        ; and write the result
0000147E 534D                           subq.w  #1,a5
00001480 380D                           move.w  a5,d4
00001482 66A0                           bne.s   NemPCD_NewRow
00001484 4E75                           rts
00001486                             
00001486                            ; ---------------------------------------------------------------------------
00001486                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
00001486                            ; ---------------------------------------------------------------------------
00001486                             
00001486                            NemDec_BuildCodeTable:
00001486 1018                           move.b  (a0)+,d0        ; read first byte
00001488                             
00001488                            @ChkEnd:
00001488 0C00 00FF                      cmpi.b  #$FF,d0         ; has the end of the code table description been reached?
0000148C 6600                           bne.s   @NewPalIndex        ; if not, branch
0000148E 4E75                           rts
00001490                            ; ---------------------------------------------------------------------------
00001490                             
00001490                            @NewPalIndex:
00001490 3E00                           move.w  d0,d7
00001492                             
00001492                            @ItemLoop:
00001492 1018                           move.b  (a0)+,d0        ; read next byte
00001494 6BF2                           bmi.s   @ChkEnd         ; ~~
00001496 1200                           move.b  d0,d1
00001498 0247 000F                      andi.w  #$F,d7          ; get palette index
0000149C 0241 0070                      andi.w  #$70,d1         ; get repeat count for palette index
000014A0 8E41                           or.w    d1,d7           ; combine the two
000014A2 0240 000F                      andi.w  #$F,d0          ; get the length of the code in bits
000014A6 1200                           move.b  d0,d1
000014A8 E149                           lsl.w   #8,d1
000014AA 8E41                           or.w    d1,d7           ; combine with palette index and repeat count to form code table entry
000014AC 7208                           moveq   #8,d1
000014AE 9240                           sub.w   d0,d1           ; is the code 8 bits long?
000014B0 6600                           bne.s   @ItemShortCode      ; if not, a bit of extra processing is needed
000014B2 1018                           move.b  (a0)+,d0        ; get code
000014B4 D040                           add.w   d0,d0           ; each code gets a word-sized entry in the table
000014B6 3387 0000                      move.w  d7,(a1,d0.w)        ; store the entry for the code
000014BA 60D6                           bra.s   @ItemLoop       ; repeat
000014BC                            ; ---------------------------------------------------------------------------
000014BC                             
000014BC                            @ItemShortCode:
000014BC 1018                           move.b  (a0)+,d0        ; get code
000014BE E368                           lsl.w   d1,d0           ; shift so that high bit is in bit position 7
000014C0 D040                           add.w   d0,d0           ; get index into code table
000014C2 7A01                           moveq   #1,d5
000014C4 E36D                           lsl.w   d1,d5
000014C6 5345                           subq.w  #1,d5           ; d5 = 2^d1 - 1
000014C8 4DF1 0000                      lea (a1,d0.w),a6        ; ~~
000014CC                             
000014CC                            @ItemShortCodeLoop:
000014CC 3CC7                           move.w  d7,(a6)+        ; ~~ store entry
000014CE 51CD FFFC                      dbf d5,@ItemShortCodeLoop   ; repeat for required number of entries
000014D2 60BE                           bra.s   @ItemLoop
000014D2 60BE                           bra.s   @ItemLoop
000014D4                            
000014D4                              
000014D4                                pusho	; buffer local label symbol config
000014D4                                opt ws+  ; change local label symbol to '.'
000014D4                            
000014D4                            ; ---------------------------------------------------------------------------
000014D4                            ; MACRO ResetDMAQueue
000014D4                            ; Clears the DMA queue, discarding all previously-queued DMAs.
000014D4                            ; ---------------------------------------------------------------------------
000014D4                            ; ROUTINE Process_DMA_Queue / ProcessDMAQueue
000014D4                            ; Performs all queued DMA transfers and clears the DMA queue.
000014D4                            ;
000014D4                            ; Output:
000014D4                            ; 	a1,a5	trashed
000014D4                            ; ---------------------------------------------------------------------------
000014D4                            ; ROUTINE InitDMAQueue
000014D4                            ; Pre-initializes the DMA queue with VDP register numbers in alternating bytes.
000014D4                            ; Must be called before the queue is used, and the queue expects that only it
000014D4                            ; write to this region of RAM.
000014D4                            ;
000014D4                            ; Output:
000014D4                            ; 	a0,d0,d1	trashed
000014D4                            ; ---------------------------------------------------------------------------
000014D4                            ; ROUTINE Add_To_DMA_Queue / QueueDMATransfer
000014D4                            ; Queues a DMA with parameters given in registers.
000014D4                            ;
000014D4                            ; Options:
000014D4                            ; 	AssumeSourceAddressInBytes (default 1)
000014D4                            ; 	AssumeSourceAddressIsRAMSafe (default 0)
000014D4                            ; 	UseRAMSourceSafeDMA (default 1&(AssumeSourceAddressIsRAMSafe=0))
000014D4                            ; 	Use128kbSafeDMA (default 0)
000014D4                            ; 	UseVIntSafeDMA (default 0)
000014D4                            ; Input:
000014D4                            ; 	d1	Source address (in bytes, or in words if AssumeSourceAddressInBytes is
000014D4                            ; 		set to 0)
000014D4                            ; 	d2	Destination address
000014D4                            ; 	d3	Transfer length (in words)
000014D4                            ; Output:
000014D4                            ; 	d0,d1,d2,d3,a1	trashed
000014D4                            ;
000014D4                            ; With the default settings, runs in:
000014D4                            ; * 48(11/0) cycles if queue is full (DMA discarded)
000014D4                            ; * 184(29/9) cycles otherwise (DMA queued)
000014D4                            ;
000014D4                            ; With Use128kbSafeDMA = 1, runs in:
000014D4                            ; * 48(11/0) cycles if queue is full at the start (DMA discarded)
000014D4                            ; * 200(32/9) cycles if the DMA does not cross a 128kB boundary (DMA queued)
000014D4                            ; * 226(38/9) cycles if the DMA crosses a 128kB boundary, and the first piece
000014D4                            ;   fills the queue (second piece is discarded)
000014D4                            ; * 338(56/17) cycles if the DMA crosses a 128kB boundary, and the queue has
000014D4                            ;   space for both pieces (both pieces queued)
000014D4                            ;
000014D4                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to all times.
000014D4                            ;
000014D4                            ; Setting AssumeSourceAddressInBytes to 0 reduces all times by 10(1/0) cycles,
000014D4                            ; but only if the DMA is not entirely discarded. However, all callers must be
000014D4                            ; edited to make sure the adresss given is correct.
000014D4                            ;
000014D4                            ; Setting AssumeSourceAddressIsRAMSafe to 1, or UseRAMSourceSafeDMA to 0,
000014D4                            ; reduces all times by 14(2/0) cycles, but only if the DMA is not entirely
000014D4                            ; discarded. However, all callers must be edited to make sure the adresss given
000014D4                            ; in the correct form. You can use the dmaSource function for that.
000014D4                            ; ---------------------------------------------------------------------------
000014D4                            ; MACRO QueueStaticDMA
000014D4                            ; Directly queues a DMA on the spot. Requires all parameters to be known at
000014D4                            ; assembly time; that is, no registers. Gives assembly errors when the DMA
000014D4                            ; crosses a 128kB boundary, is at an odd ROM location, or is zero length.
000014D4                            ;
000014D4                            ; Options:
000014D4                            ; 	UseVIntSafeDMA (default 0)
000014D4                            ; Input:
000014D4                            ; 	Source address (in bytes), transfer length (in bytes), destination address
000014D4                            ; Output:
000014D4                            ; 	d0,a1	trashed
000014D4                            ;
000014D4                            ; With the default settings, runs in:
000014D4                            ; * 32(7/0) cycles if queue is full (DMA discarded)
000014D4                            ; * 122(21/8) cycles otherwise (DMA queued)
000014D4                            ;
000014D4                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to both cases.
000014D4                            ; ===========================================================================
000014D4                            ; option: AssumeSourceAddressInBytes
000014D4                            ;
000014D4                            ; This option makes the function work as a drop-in replacement of the original
000014D4                            ; functions. If you modify all callers to supply a position in words instead of
000014D4                            ; bytes (i.e., divide source address by 2) you can set this to 0 to gain 10(1/0)
000014D4 =00000001                  AssumeSourceAddressInBytes = 1
000014D4                            ; ===========================================================================
000014D4                            ; option: AssumeSourceAddressIsRAMSafe
000014D4                            ;
000014D4                            ; This option (which is disabled by default) makes the DMA queue assume that the
000014D4                            ; source address is given to the function in a way that makes them safe to use
000014D4                            ; with RAM sources. You need to edit all callers to ensure this.
000014D4                            ; Enabling this option turns off UseRAMSourceSafeDMA, and saves 14(2/0).
000014D4 =00000000                  AssumeSourceAddressIsRAMSafe = 0
000014D4                            ; ===========================================================================
000014D4                            ; option: UseRAMSourceSafeDMA
000014D4                            ;
000014D4                            ; This option (which is enabled by default) makes source addresses in RAM safe
000014D4                            ; at the cost of 14(2/0). If you modify all callers so as to clear the top byte
000014D4                            ; of source addresses (i.e., by ANDing them with $FFFFFF).
000014D4 =00000001                  UseRAMSourceSafeDMA = 1&(AssumeSourceAddressIsRAMSafe=0)
000014D4                            ; ===========================================================================
000014D4                            ; option: Use128kbSafeDMA
000014D4                            ;
000014D4                            ; This option breaks DMA transfers that crosses a 128kB block into two. It is
000014D4                            ; disabled by default because you can simply align the art in ROM and avoid the
000014D4                            ; issue altogether. It is here so that you have a high-performance routine to do
000014D4                            ; the job in situations where you can't align it in ROM.
000014D4 =00000001                  Use128kbSafeDMA = 1
000014D4                            ; ===========================================================================
000014D4                            ; option UseVIntSafeDMA
000014D4                            ;
000014D4                            ; Option to mask interrupts while updating the DMA queue. This fixes many race
000014D4                            ; conditions in the DMA funcion, but it costs 46(6/1) cycles. The better way to
000014D4                            ; handle these race conditions would be to make unsafe callers (such as S3&K's
000014D4                            ; KosM decoder) prevent these by masking off interrupts before calling and then
000014D4                            ; restore interrupts after.
000014D4 =00000000                  UseVIntSafeDMA = 0
000014D4                            ; ===========================================================================
000014D4                            
000014D4                            
000014D4                            ; Convenience macros, for increased maintainability of the code.
000014D4 =00000027                  DMA = %100111
000014D4 =00000021                  VRAM = %100001
000014D4                            ; Like vdpComm, but starting from an address contained in a register
000014D4 =00000001                  vdpCommReg_defined = 1
000014D4                            vdpCommReg macro reg,type,rwd,clr
000014D4                            	lsl.l	#2,\reg							; Move high bits into (word-swapped) position, accidentally moving everything else
000014D4                            	if ((\type&\rwd)&3)<>0
000014D4                            		addq.w	#((\type&\rwd)&3),\reg			; Add upper access type bits
000014D4                            	endif
000014D4                            	ror.w	#2,\reg							; Put upper access type bits into place, also moving all other bits into their correct (word-swapped) places
000014D4                            	swap	\reg								; Put all bits in proper places
000014D4                            	if \clr <> 0
000014D4                            		andi.w	#3,\reg						; Strip whatever junk was in upper word of reg
000014D4                            	endif
000014D4                            	if ((\type&\rwd)&$FC)=$20
000014D4                            		tas.b	\reg							; Add in the DMA flag -- tas fails on memory, but works on registers
000014D4                            	elseif ((\type&\rwd)&$FC)<>0
000014D4                            		ori.w	#(((\type&\rwd)&$FC)<<2),\reg	; Add in missing access type bits
000014D4                            	endif
000014D4                            	endm
000014D4                            ; ---------------------------------------------------------------------------
000014D4 =00000001                  intMacros_defined = 1
000014D4                            enableInts macro
000014D4                            	move	#$2300,sr
000014D4                            	endm
000014D4                            
000014D4                            disableInts macro
000014D4                            	move	#$2700,sr
000014D4                            	endm
000014D4                            ; ---------------------------------------------------------------------------
000014D4 =00000001                  DMAEntry_defined = 1
000014D4                                    rsreset
000014D4 =00000000                  DMAEntry.Reg94:		rs.b	1
000014D4                            			  
000014D4 =00000001                  DMAEntry.Size:      rs.b    0
000014D4 =00000001                  DMAEntry.SizeH:		rs.b	1
000014D4 =00000002                  DMAEntry.Reg93:		rs.b	1
000014D4 =00000003                  DMAEntry.Source:    rs.b    0
000014D4 =00000003                  DMAEntry.SizeL:		rs.b	1
000014D4 =00000004                  DMAEntry.Reg97:		rs.b	1
000014D4 =00000005                  DMAEntry.SrcH:		rs.b	1
000014D4 =00000006                  DMAEntry.Reg96:		rs.b	1
000014D4 =00000007                  DMAEntry.SrcM:		rs.b	1
000014D4 =00000008                  DMAEntry.Reg95:		rs.b	1
000014D4 =00000009                  DMAEntry.SrcL:		rs.b	1
000014D4 =0000000A                  DMAEntry.Command:	rs.l	1
000014D4 =0000000E                  DMAEntry.len:   rs.w    0
000014D4                            ; ---------------------------------------------------------------------------
000014D4 =00000012                  QueueSlotCount = (VDP_Command_Buffer_Slot-VDP_Command_Buffer)/DMAEntry.len
000014D4                            ; ---------------------------------------------------------------------------
000014D4                            						
000014D4                            										   
000014D4                            									   
000014D4                            	  
000014D4                            																			 
000014D4                            							  
000014D4 =00000001                  QueueStaticDMA_defined = 1
000014D4                            ; Expects source address and DMA length in bytes. Also, expects source, size, and dest to be known
000014D4                            ; at assembly time. Gives errors if DMA starts at an odd address, transfers
000014D4                            ; crosses a 128kB boundary, or has size 0.
000014D4                            QueueStaticDMA macro src,length,dest
000014D4                                local   len
000014D4                            		if ((\src)&1)<>0
000014D4                            			inform 3,"DMA queued from odd source \1!"
000014D4                            		endif
000014D4                            		if ((\length)&1)<>0
000014D4                            			inform 3,"DMA an odd number of bytes \2!"
000014D4                            		endif
000014D4                            		if (\length)=0
000014D4                            			inform 3,"DMA transferring 0 bytes (becomes a 128kB transfer). If you really mean it, pass 128kB instead."
000014D4                            		endif
000014D4                            		if (((\src)+(\length)-1)>>17)<>((\src)>>17)
000014D4                            			inform 3,"DMA crosses a 128kB boundary. You should either split the DMA manually or align the source adequately."
000014D4                            		endif
000014D4                            	  
000014D4                            	if UseVIntSafeDMA=1
000014D4                            		move.w	sr,-(sp)										; Save current interrupt mask
000014D4                            		disableInts												; Mask off interrupts
000014D4                            	endif ; UseVIntSafeDMA=1
000014D4                            	movea.w	(VDP_Command_Buffer_Slot).w,a1
000014D4                            	cmpa.w	#VDP_Command_Buffer_Slot,a1
000014D4                            	beq.s	.done												; Return if there's no more room in the buffer
000014D4                            	len: = ((length>>1)&$7FFF)
000014D4                                move.b	#(len>>8)&$FF,DMAEntry.SizeH(a1)		; Write top byte of size/2
000014D4                            	move.l	#((len&$FF)<<24)|((src>>1)&$7FFFFF),d0	; Set d0 to bottom byte of size/2 and the low 3 bytes of source/2
000014D4                            	movep.l	d0,DMAEntry.SizeL(a1)								; Write it all to the queue
000014D4                            	lea	DMAEntry.Command(a1),a1									; Seek to correct RAM address to store VDP DMA command
000014D4                            	move.l	#$40000080,(a1)+						; Write VDP DMA command for destination address
000014D4                            	move.w	a1,(VDP_Command_Buffer_Slot).w						; Write next queue slot
000014D4                            .done:
000014D4                            	if UseVIntSafeDMA=1
000014D4                            		move.w	(sp)+,sr										; Restore interrupts to previous state
000014D4                            	endif ;UseVIntSafeDMA=1
000014D4                            	endm
000014D4                            
000014D4                                
000014D4                            
000014D4                            ; ---------------------------------------------------------------------------
000014D4                            ResetDMAQueue: macro
000014D4                            	move.w	#VDP_Command_Buffer,(VDP_Command_Buffer_Slot).w
000014D4                            	endm
000014D4                            ; ===========================================================================
000014D4                            
000014D4                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000014D4                            
000014D4                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand:
000014D4                            Add_To_DMA_Queue:
000014D4                            QueueDMATransfer:
000014D4 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
000014D8 B2FC C8FC                  	cmpa.w	#VDP_Command_Buffer_Slot,a1
000014DC 6700                       	beq.s	.done											; Return if there's no more room in the buffer
000014DE                            
000014DE E289                       		lsr.l	#1,d1										; Source address is in words for the VDP registers
000014E0 0881 0017                  		bclr.l	#23,d1										; Make sure bit 23 is clear (68k->VDP DMA flag)
000014E4 03C9 0003                  	movep.l	d1,DMAEntry.Source(a1)							; Write source address; the useless top byte will be overwritten later
000014E8 7000                       	moveq	#0,d0											; We need a zero on d0
000014EA                            
000014EA                            		; Detect if transfer crosses 128KB boundary
000014EA                            		; Using sub+sub instead of move+add handles the following edge cases:
000014EA                            		; (1) d3.w = 0 => 128kB transfer
000014EA                            		;   (a) d1.w = 0 => no carry, don't split the DMA
000014EA                            		;   (b) d1.w != 0 => carry, need to split the DMA
000014EA                            		; (2) d3.w != 0
000014EA                            		;   (a) if there is carry on d1.w + d3.w
000014EA                            		;     (* ) if d1.w + d3.w = 0 => transfer comes entirely from current 128kB block, don't split the DMA
000014EA                            		;     (**) if d1.w + d3.w != 0 => need to split the DMA
000014EA                            		;   (b) if there is no carry on d1.w + d3.w => don't split the DMA
000014EA                            		; The reason this works is that carry on d1.w + d3.w means that
000014EA                            		; d1.w + d3.w >= $10000, whereas carry on (-d3.w) - (d1.w) means that
000014EA                            		; d1.w + d3.w > $10000.
000014EA 9043                       		sub.w	d3,d0										; Using sub instead of move and add allows checking edge cases
000014EC 9041                       		sub.w	d1,d0										; Does the transfer cross over to the next 128kB block?
000014EE 6500                       		bcs.s	.doubletransfer								; Branch if yes
000014F0                            	; It does not cross a 128kB boundary. So just finish writing it.
000014F0 0789 0001                  	movep.w	d3,DMAEntry.Size(a1)							; Write DMA length, overwriting useless top byte of source address
000014F4                            
000014F4                            .finishxfer:
000014F4                            	; Command to specify destination address and begin DMA
000014F4 3002                       	move.w	d2,d0											; Use the fact that top word of d0 is zero to avoid clearing on vdpCommReg
00001500 43E9 000A                  	lea	DMAEntry.Command(a1),a1								; Seek to correct RAM address to store VDP DMA command
00001504 22C0                       	move.l	d0,(a1)+										; Write VDP DMA command for destination address
00001506 31C9 C8FC                  	move.w	a1,(VDP_Command_Buffer_Slot).w					; Write next queue slot
0000150A                            
0000150A                            .done:
0000150A 4E75                       	rts
0000150C                            ; ---------------------------------------------------------------------------
0000150C                            .doubletransfer:
0000150C                            		; We need to split the DMA into two parts, since it crosses a 128kB block
0000150C D043                       		add.w	d3,d0										; Set d0 to the number of words until end of current 128kB block
0000150E 0189 0001                  		movep.w	d0,DMAEntry.Size(a1)						; Write DMA length of first part, overwriting useless top byte of source addres
00001512                            
00001512 B2FC C8EE                  		cmpa.w	#VDP_Command_Buffer_Slot-DMAEntry.len,a1	; Does the queue have enough space for both parts?
00001516 67DC                       		beq.s	.finishxfer									; Branch if not
00001518                            
00001518                            		; Get second transfer's source, destination, and length
00001518 9640                       		sub.w	d0,d3										; Set d3 to the number of words remaining
0000151A D280                       		add.l	d0,d1										; Offset the source address of the second part by the length of the first part
0000151C D040                       		add.w	d0,d0										; Convert to number of bytes
0000151E D042                       		add.w	d2,d0										; Set d0 to the VRAM destination of the second part
00001520                            
00001520                            		; If we know top word of d2 is clear, the following vdpCommReg can be set to not
00001520                            		; clear it. There is, unfortunately, no faster way to clear it than this.
0000152E 2342 000A                  		move.l	d2,DMAEntry.Command(a1)						; Write VDP DMA command for destination address of first part
00001532                            
00001532                            		; Do second transfer
00001532 03C9 0011                  		movep.l	d1,DMAEntry.len+DMAEntry.Source(a1)			; Write source address of second part; useless top byte will be overwritten later
00001536 0789 000F                  		movep.w	d3,DMAEntry.len+DMAEntry.Size(a1)			; Write DMA length of second part, overwriting useless top byte of source addres
0000153A                            
0000153A                            		; Command to specify destination address and begin DMA
00001544 43E9 0018                  		lea	DMAEntry.len+DMAEntry.Command(a1),a1			; Seek to correct RAM address to store VDP DMA command of second part
00001548 22C0                       		move.l	d0,(a1)+									; Write VDP DMA command for destination address of second part
0000154A                            
0000154A 31C9 C8FC                  		move.w	a1,(VDP_Command_Buffer_Slot).w				; Write next queue slot
0000154E 4E75                       		rts
00001550                            ; End of function QueueDMATransfer
00001550                            ; ===========================================================================
00001550                            
00001550                            ; ---------------------------------------------------------------------------
00001550                            ; Subroutine for issuing all VDP commands that were queued
00001550                            ; (by earlier calls to QueueDMATransfer)
00001550                            ; Resets the queue when it's done
00001550                            ; ---------------------------------------------------------------------------
00001550                            
00001550                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001550                            
00001550                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA:
00001550                            Process_DMA_Queue:
00001550                            ProcessDMAQueue:
00001550 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
00001554 4EE9 0000                  	jmp	.jump_table-VDP_Command_Buffer(a1)
00001558                            ; ---------------------------------------------------------------------------
00001558                            .jump_table:
00001558 4E75                       	rts
0000155A                            	rept 6
0000155A                            		trap	#0											; Just in case
0000155A 4E40 4E40 4E40 4E40 4E40+  	endr
00001566                            ; ---------------------------------------------------------------------------
00001566 =00000001                      c: = 1
00001566                            	rept QueueSlotCount
00001566                            		lea	(vdp_control_port).l,a5
00001566                            		lea	(VDP_Command_Buffer).w,a1
00001566                            		if c<>QueueSlotCount
00001566                            			bra.w	.jump0 - c*8
00001566                            		endif
00001566                                c: = c + 1
0000165E                            ; ---------------------------------------------------------------------------
0000165E                            	rept QueueSlotCount
0000165E                            		move.l	(a1)+,(a5)									; Transfer length
0000165E                            		move.l	(a1)+,(a5)									; Source address high
0000165E                            		move.l	(a1)+,(a5)									; Source address low + destination high
0000165E                            		move.w	(a1)+,(a5)									; Destination low, trigger DMA
0000165E 2A99 2A99 2A99 3A99 2A99+  	endr
000016EE                            
000016EE                            .jump0:
000016EE 31FC C800 C8FC             	ResetDMAQueue
000016F4 4E75                       	rts
000016F6                            ; End of function ProcessDMAQueue
000016F6                            ; ===========================================================================
000016F6                            
000016F6                            ; ---------------------------------------------------------------------------
000016F6                            ; Subroutine for initializing the DMA queue.
000016F6                            ; ---------------------------------------------------------------------------
000016F6                            
000016F6                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000016F6                            
000016F6                            InitDMAQueue:
000016F6 41F8 C800                  	lea	(VDP_Command_Buffer).w,a0
000016FA 7094                       	moveq	#-$6C,d0				; fast-store $94 (sign-extended) in d0
000016FC 223C 9397 9695             	move.l	#$93979695,d1
00001702 =00000000                      c: = 0
00001702                            	rept QueueSlotCount
00001702                            		move.b	d0,c + DMAEntry.Reg94(a0)
00001702                            		movep.l	d1,c + DMAEntry.Reg93(a0)
00001702                                c: = c + DMAEntry.len
00001702 1080 03C8 0002 1140 000E+  	endr
00001790                            
00001790 31FC C800 C8FC             	ResetDMAQueue
00001796 4E75                       	rts
00001798                            ; End of function ProcessDMAQueue
00001798                            ; ===========================================================================
00001798                            
00001798                            
00001798                                popo	; buffer local label symbol config
00001798                            
00001798                            
00001798                            ; ---------------------------------------------------------------------------
00001798                            ; Subroutine to load pattern load cues (aka to queue pattern load requests)
00001798                            ; ---------------------------------------------------------------------------
00001798                            
00001798                            ; ARGUMENTS
00001798                            ; d0 = index of PLC list
00001798                            ; ---------------------------------------------------------------------------
00001798                            
00001798                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001798                            
00001798                            ; LoadPLC:
00001798                            AddPLC:
00001798 48E7 0060                  		movem.l	a1-a2,-(sp)
0000179C 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017A2 D040                       		add.w	d0,d0
000017A4 3031 0000                  		move.w	(a1,d0.w),d0
000017A8 43F1 0000                  		lea	(a1,d0.w),a1		; jump to relevant PLC
000017AC 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space
000017B0                            
000017B0                            	@findspace:
000017B0 4A92                       		tst.l	(a2)		; is space available in RAM?
000017B2 6700                       		beq.s	@copytoRAM	; if yes, branch
000017B4 5C4A                       		addq.w	#6,a2		; if not, try next space
000017B6 60F8                       		bra.s	@findspace
000017B8                            ; ===========================================================================
000017B8                            
000017B8                            @copytoRAM:
000017B8 3019                       		move.w	(a1)+,d0	; get length of PLC
000017BA 6B00                       		bmi.s	@skip
000017BC                            
000017BC                            	@loop:
000017BC 24D9                       		move.l	(a1)+,(a2)+
000017BE 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
000017C0 51C8 FFFA                  		dbf	d0,@loop	; repeat for length of PLC
000017C4                            
000017C4                            	@skip:
000017C4 4CDF 0600                  		movem.l	(sp)+,a1-a2 ; a1=object
000017C8 4E75                       		rts	
000017CA                            ; End of function AddPLC
000017CA                            
000017CA                            
000017CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017CA                            ; Queue pattern load requests, but clear the PLQ first
000017CA                            
000017CA                            ; ARGUMENTS
000017CA                            ; d0 = index of PLC list (see ArtLoadCues)
000017CA                            
000017CA                            ; NOTICE: This subroutine does not check for buffer overruns. The programmer
000017CA                            ;	  (or hacker) is responsible for making sure that no more than
000017CA                            ;	  16 load requests are copied into the buffer.
000017CA                            ;	  _________DO NOT PUT MORE THAN 16 LOAD REQUESTS IN A LIST!__________
000017CA                            ;         (or if you change the size of Plc_Buffer, the limit becomes (Plc_Buffer_Only_End-Plc_Buffer)/6)
000017CA                            
000017CA                            ; LoadPLC2:
000017CA                            NewPLC:
000017CA 48E7 0060                  		movem.l	a1-a2,-(sp)
000017CE 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017D4 D040                       		add.w	d0,d0
000017D6 3031 0000                  		move.w	(a1,d0.w),d0
000017DA 43F1 0000                  		lea	(a1,d0.w),a1	; jump to relevant PLC
000017DE 6100                       		bsr.s	ClearPLC	; erase any data in PLC buffer space
000017E0 45F8 F680                  		lea	(v_plc_buffer).w,a2
000017E4 3019                       		move.w	(a1)+,d0	; get length of PLC
000017E6 6B00                       		bmi.s	@skip		; if it's negative, skip the next loop
000017E8                            
000017E8                            	@loop:
000017E8 24D9                       		move.l	(a1)+,(a2)+
000017EA 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
000017EC 51C8 FFFA                  		dbf	d0,@loop		; repeat for length of PLC
000017F0                            
000017F0                            	@skip:
000017F0 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017F4 4E75                       		rts	
000017F6                            ; End of function NewPLC
000017F6                            
000017F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017F6                            
000017F6                            ; ---------------------------------------------------------------------------
000017F6                            ; Subroutine to	clear the pattern load cues
000017F6                            ; ---------------------------------------------------------------------------
000017F6                            
000017F6                            ; Clear the pattern load queue ($FFF680 - $FFF700)
000017F6                            
000017F6                            
000017F6                            ClearPLC:
000017F6 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space in RAM
000017FA 701F                       		moveq	#$1F,d0	; bytesToLcnt(v_plc_buffer_end-v_plc_buffer)
000017FC                            
000017FC                            	@loop:
000017FC 429A                       		clr.l	(a2)+
000017FE 51C8 FFFC                  		dbf	d0,@loop
00001802 4E75                       		rts	
00001804                            ; End of function ClearPLC
00001804                            
00001804                            ; ---------------------------------------------------------------------------
00001804                            ; Subroutine to	use graphics listed in a pattern load cue
00001804                            ; ---------------------------------------------------------------------------
00001804                            
00001804                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001804                            
00001804                            
00001804                            RunPLC:
00001804 4AB8 F680                  		tst.l	(v_plc_buffer).w
00001808 6700                       		beq.s	Rplc_Exit
0000180A 4A78 F6F8                  		tst.w	(f_plc_execute).w
0000180E 6600                       		bne.s	Rplc_Exit
00001810 2078 F680                  		movea.l	(v_plc_buffer).w,a0
00001814 47F9 0000 145A             		lea	(NemPCD_WriteRowToVDP).l,a3
0000181A 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
0000181E 3418                       		move.w	(a0)+,d2
00001820 6A00                       		bpl.s	loc_160E
00001822 D6FC 000A                  		adda.w	#$A,a3
00001826                            
00001826                            loc_160E:
00001826 0242 7FFF                  		andi.w	#$7FFF,d2
0000182A 31C2 F6F8                  		move.w	d2,(f_plc_execute).w
0000182E 6100 FC56                  		bsr.w	NemDec_BuildCodeTable
00001832 1A18                       		move.b	(a0)+,d5
00001834 E145                       		asl.w	#8,d5
00001836 1A18                       		move.b	(a0)+,d5
00001838 7C10                       		moveq	#$10,d6
0000183A 7000                       		moveq	#0,d0
0000183C 21C8 F680                  		move.l	a0,(v_plc_buffer).w
00001840 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
00001844 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001848 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
0000184C 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001850 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001854 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001858                            
00001858                            Rplc_Exit:
00001858 4E75                       		rts	
0000185A                            ; End of function RunPLC
0000185A                            
0000185A                            
0000185A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000185A                            
0000185A                            
0000185A                            sub_1642:
0000185A 4A78 F6F8                  		tst.w	(f_plc_execute).w
0000185E 6700 0000                  		beq.w	locret_16DA
00001862 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001868 7000                       		moveq	#0,d0
0000186A 3038 F684                  		move.w	($FFFFF684).w,d0
0000186E 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001874 6000                       		bra.s	loc_1676
00001876                            ; End of function sub_1642
00001876                            
00001876                            
00001876                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001876                            
00001876                            
00001876                            ; sub_165E:
00001876                            ProcessDPLC2:
00001876 4A78 F6F8                  		tst.w	(f_plc_execute).w
0000187A 6700                       		beq.s	locret_16DA
0000187C 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001882 7000                       		moveq	#0,d0
00001884 3038 F684                  		move.w	($FFFFF684).w,d0
00001888 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
0000188E                            
0000188E                            loc_1676:
0000188E 49F9 00C0 0004             		lea	(vdp_control_port).l,a4
00001894 E588                       		lsl.l	#2,d0
00001896 E448                       		lsr.w	#2,d0
00001898 0040 4000                  		ori.w	#$4000,d0
0000189C 4840                       		swap	d0
0000189E 2880                       		move.l	d0,(a4)
000018A0 594C                       		subq.w	#4,a4
000018A2 2078 F680                  		movea.l	(v_plc_buffer).w,a0
000018A6 2678 F6E0                  		movea.l	(v_ptrnemcode).w,a3
000018AA 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000018AE 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000018B2 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000018B6 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018BA 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018BE 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
000018C2                            
000018C2                            loc_16AA:
000018C2 3A7C 0008                  		movea.w	#8,a5
000018C6 6100 FB5C                  		bsr.w	NemPCD_NewRow
000018CA 5378 F6F8                  		subq.w	#1,(f_plc_execute).w
000018CE 6700                       		beq.s	loc_16DC
000018D0 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018D4 66EC                       		bne.s	loc_16AA
000018D6 21C8 F680                  		move.l	a0,(v_plc_buffer).w
000018DA 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
000018DE 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000018E2 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000018E6 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000018EA 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000018EE 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000018F2                            
000018F2                            locret_16DA:
000018F2 4E75                       		rts	
000018F4                            ; ===========================================================================
000018F4                            
000018F4                            loc_16DC:
000018F4 41F8 F680                  		lea	(v_plc_buffer).w,a0
000018F8 7015                       		moveq	#$15,d0
000018FA                            
000018FA                            loc_16E2:
000018FA 20E8 0006                  		move.l	6(a0),(a0)+
000018FE 51C8 FFFA                  		dbf	d0,loc_16E2
00001902 4E75                       		rts	
00001904                            ; End of function ProcessDPLC2
00001904                            
00001904                            ; ---------------------------------------------------------------------------
00001904                            ; Subroutine to	execute	the pattern load cue
00001904                            ; ---------------------------------------------------------------------------
00001904                            
00001904                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001904                            
00001904                            
00001904                            QuickPLC:
00001904 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
0000190A D040                       		add.w	d0,d0
0000190C 3031 0000                  		move.w	(a1,d0.w),d0
00001910 43F1 0000                  		lea	(a1,d0.w),a1
00001914 3219                       		move.w	(a1)+,d1	; get length of PLC
00001916                            
00001916                            	Qplc_Loop:
00001916 2059                       		movea.l	(a1)+,a0	; get art pointer
00001918 7000                       		moveq	#0,d0
0000191A 3019                       		move.w	(a1)+,d0	; get VRAM address
0000191C E588                       		lsl.l	#2,d0
0000191E E448                       		lsr.w	#2,d0
00001920 0040 4000                  		ori.w	#$4000,d0
00001924 4840                       		swap	d0
00001926 23C0 00C0 0004             		move.l	d0,(vdp_control_port).l ; converted VRAM address to VDP format
0000192C 6100 FA7E                  		bsr.w	NemDec		; decompress
00001930 51C9 FFE4                  		dbf	d1,Qplc_Loop	; repeat for length of PLC
00001934 4E75                       		rts	
00001936                            ; End of function QuickPLC
00001936                            
00001936                            		include	"_inc\Enigma Decompression.asm"
00001936                            ; ---------------------------------------------------------------------------
00001936                            ; Enigma decompression algorithm
00001936                            
00001936                            ; input:
00001936                            ;	d0 = starting art tile (added to each 8x8 before writing to destination)
00001936                            ;	a0 = source address
00001936                            ;	a1 = destination address
00001936                            
00001936                            ; usage:
00001936                            ;	lea	(source).l,a0
00001936                            ;	lea	(destination).l,a1
00001936                            ;	move.w	#arttile,d0
00001936                            ;	bsr.w	EniDec
00001936                            
00001936                            ; See http://www.segaretro.org/Enigma_compression for format description
00001936                            ; ---------------------------------------------------------------------------
00001936                            
00001936                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001936                            
00001936                            
00001936                            EniDec:
00001936 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
0000193A 3640                       		movea.w	d0,a3		; store starting art tile
0000193C 1018                       		move.b	(a0)+,d0
0000193E 4880                       		ext.w	d0
00001940 3A40                       		movea.w	d0,a5		; store number of bits in inline copy value
00001942 1818                       		move.b	(a0)+,d4
00001944 E70C                       		lsl.b	#3,d4		; store PCCVH flags bitfield
00001946 3458                       		movea.w	(a0)+,a2
00001948 D4CB                       		adda.w	a3,a2		; store incremental copy word
0000194A 3858                       		movea.w	(a0)+,a4
0000194C D8CB                       		adda.w	a3,a4		; store literal copy word
0000194E 1A18                       		move.b	(a0)+,d5
00001950 E145                       		asl.w	#8,d5
00001952 1A18                       		move.b	(a0)+,d5	; get first word in format list
00001954 7C10                       		moveq	#16,d6		; initial shift value
00001956                            ; loc_173E:
00001956                            Eni_Loop:
00001956 7007                       		moveq	#7,d0		; assume a format list entry is 7 bits
00001958 3E06                       		move.w	d6,d7
0000195A 9E40                       		sub.w	d0,d7
0000195C 3205                       		move.w	d5,d1
0000195E EE69                       		lsr.w	d7,d1
00001960 0241 007F                  		andi.w	#$7F,d1		; get format list entry
00001964 3401                       		move.w	d1,d2		; and copy it
00001966 0C41 0040                  		cmpi.w	#$40,d1		; is the high bit of the entry set?
0000196A 6400                       		bhs.s	@sevenbitentry
0000196C 7006                       		moveq	#6,d0		; if it isn't, the entry is actually 6 bits
0000196E E24A                       		lsr.w	#1,d2
00001970                            ; loc_1758:
00001970                            @sevenbitentry:
00001970 6100 0000                  		bsr.w	EniDec_FetchByte
00001974 0242 000F                  		andi.w	#$F,d2		; get repeat count
00001978 E849                       		lsr.w	#4,d1
0000197A D241                       		add.w	d1,d1
0000197C 4EFB 1000                  		jmp	EniDec_Index(pc,d1.w)
00001980                            ; End of function EniDec
00001980                            
00001980                            ; ===========================================================================
00001980                            ; loc_1768:
00001980                            EniDec_00:
00001980 32CA                       @loop:		move.w	a2,(a1)+	; copy incremental copy word
00001982 524A                       		addq.w	#1,a2		; increment it
00001984 51CA FFFA                  		dbf	d2,@loop	; repeat
00001988 60CC                       		bra.s	Eni_Loop
0000198A                            ; ===========================================================================
0000198A                            ; loc_1772:
0000198A                            EniDec_01:
0000198A 32CC                       @loop:		move.w	a4,(a1)+	; copy literal copy word
0000198C 51CA FFFC                  		dbf	d2,@loop	; repeat
00001990 60C4                       		bra.s	Eni_Loop
00001992                            ; ===========================================================================
00001992                            ; loc_177A:
00001992                            EniDec_100:
00001992 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001996                            ; loc_177E:
00001996 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001998 51CA FFFC                  		dbf	d2,@loop	; repeat
0000199C                            
0000199C 60B8                       		bra.s	Eni_Loop
0000199E                            ; ===========================================================================
0000199E                            ; loc_1786:
0000199E                            EniDec_101:
0000199E 6100 0000                  		bsr.w	EniDec_FetchInlineValue
000019A2                            ; loc_178A:
000019A2 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
000019A4 5241                       		addq.w	#1,d1		; increment
000019A6 51CA FFFA                  		dbf	d2,@loop	; repeat
000019AA                            
000019AA 60AA                       		bra.s	Eni_Loop
000019AC                            ; ===========================================================================
000019AC                            ; loc_1794:
000019AC                            EniDec_110:
000019AC 6100 0000                  		bsr.w	EniDec_FetchInlineValue
000019B0                            ; loc_1798:
000019B0 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
000019B2 5341                       		subq.w	#1,d1		; decrement
000019B4 51CA FFFA                  		dbf	d2,@loop	; repeat
000019B8                            
000019B8 609C                       		bra.s	Eni_Loop
000019BA                            ; ===========================================================================
000019BA                            ; loc_17A2:
000019BA                            EniDec_111:
000019BA 0C42 000F                  		cmpi.w	#$F,d2
000019BE 6700                       		beq.s	EniDec_Done
000019C0                            ; loc_17A8:
000019C0 6100 0000                  @loop:		bsr.w	EniDec_FetchInlineValue	; fetch new inline value
000019C4 32C1                       		move.w	d1,(a1)+	; copy it
000019C6 51CA FFF8                  		dbf	d2,@loop	; and repeat
000019CA                            
000019CA 608A                       		bra.s	Eni_Loop
000019CC                            ; ===========================================================================
000019CC                            ; loc_17B4:
000019CC                            EniDec_Index:
000019CC 60B2                       		bra.s	EniDec_00
000019CE 60B0                       		bra.s	EniDec_00
000019D0 60B8                       		bra.s	EniDec_01
000019D2 60B6                       		bra.s	EniDec_01
000019D4 60BC                       		bra.s	EniDec_100
000019D6 60C6                       		bra.s	EniDec_101
000019D8 60D2                       		bra.s	EniDec_110
000019DA 60DE                       		bra.s	EniDec_111
000019DC                            ; ===========================================================================
000019DC                            ; loc_17C4:
000019DC                            EniDec_Done:
000019DC 5348                       		subq.w	#1,a0		; go back by one byte
000019DE 0C46 0010                  		cmpi.w	#16,d6		; were we going to start on a completely new byte?
000019E2 6600                       		bne.s	@notnewbyte	; if not, branch
000019E4 5348                       		subq.w	#1,a0		; and another one if needed
000019E6                            ; loc_17CE:
000019E6                            @notnewbyte:
000019E6 3008                       		move.w	a0,d0
000019E8 E248                       		lsr.w	#1,d0		; are we on an odd byte?
000019EA 6400                       		bcc.s	@evenbyte	; if not, branch
000019EC 5248                       		addq.w	#1,a0		; ensure we're on an even byte
000019EE                            ; loc_17D6:
000019EE                            @evenbyte:
000019EE 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000019F2 4E75                       		rts	
000019F4                            
000019F4                            ; ---------------------------------------------------------------------------
000019F4                            ; Part of the Enigma decompressor
000019F4                            ; Fetches an inline copy value and stores it in d1
000019F4                            ; ---------------------------------------------------------------------------
000019F4                            
000019F4                            ; =============== S U B R O U T I N E =======================================
000019F4                            
000019F4                            ; loc_17DC:
000019F4                            EniDec_FetchInlineValue:
000019F4 360B                       		move.w	a3,d3		; copy starting art tile
000019F6 1204                       		move.b	d4,d1		; copy PCCVH bitfield
000019F8 D201                       		add.b	d1,d1		; is the priority bit set?
000019FA 6400                       		bcc.s	@skippriority	; if not, branch
000019FC 5346                       		subq.w	#1,d6
000019FE 0D05                       		btst	d6,d5		; is the priority bit set in the inline render flags?
00001A00 6700                       		beq.s	@skippriority	; if not, branch
00001A02 0043 8000                  		ori.w	#$8000,d3	; otherwise set priority bit in art tile
00001A06                            ; loc_17EE:
00001A06                            @skippriority:
00001A06 D201                       		add.b	d1,d1		; is the high palette line bit set?
00001A08 6400                       		bcc.s	@skiphighpal	; if not, branch
00001A0A 5346                       		subq.w	#1,d6
00001A0C 0D05                       		btst	d6,d5
00001A0E 6700                       		beq.s	@skiphighpal
00001A10 0643 4000                  		addi.w	#$4000,d3	; set second palette line bit
00001A14                            ; loc_17FC:
00001A14                            @skiphighpal:
00001A14 D201                       		add.b	d1,d1		; is the low palette line bit set?
00001A16 6400                       		bcc.s	@skiplowpal	; if not, branch
00001A18 5346                       		subq.w	#1,d6
00001A1A 0D05                       		btst	d6,d5
00001A1C 6700                       		beq.s	@skiplowpal
00001A1E 0643 2000                  		addi.w	#$2000,d3	; set first palette line bit
00001A22                            ; loc_180A:
00001A22                            @skiplowpal:
00001A22 D201                       		add.b	d1,d1		; is the vertical flip flag set?
00001A24 6400                       		bcc.s	@skipyflip	; if not, branch
00001A26 5346                       		subq.w	#1,d6
00001A28 0D05                       		btst	d6,d5
00001A2A 6700                       		beq.s	@skipyflip
00001A2C 0043 1000                  		ori.w	#$1000,d3	; set Y-flip bit
00001A30                            ; loc_1818:
00001A30                            @skipyflip:
00001A30 D201                       		add.b	d1,d1		; is the horizontal flip flag set?
00001A32 6400                       		bcc.s	@skipxflip	; if not, branch
00001A34 5346                       		subq.w	#1,d6
00001A36 0D05                       		btst	d6,d5
00001A38 6700                       		beq.s	@skipxflip
00001A3A 0043 0800                  		ori.w	#$800,d3	; set X-flip bit
00001A3E                            ; loc_1826:
00001A3E                            @skipxflip:
00001A3E 3205                       		move.w	d5,d1
00001A40 3E06                       		move.w	d6,d7
00001A42 9E4D                       		sub.w	a5,d7		; subtract length in bits of inline copy value
00001A44 6400                       		bcc.s	@enoughbits	; branch if a new word doesn't need to be read
00001A46 3C07                       		move.w	d7,d6
00001A48 0646 0010                  		addi.w	#16,d6
00001A4C 4447                       		neg.w	d7		; calculate bit deficit
00001A4E EF69                       		lsl.w	d7,d1		; and make space for that many bits
00001A50 1A10                       		move.b	(a0),d5		; get next byte
00001A52 EF3D                       		rol.b	d7,d5		; and rotate the required bits into the lowest positions
00001A54 DE47                       		add.w	d7,d7
00001A56 CA7B 7000                  		and.w	EniDec_Masks-2(pc,d7.w),d5
00001A5A D245                       		add.w	d5,d1		; combine upper bits with lower bits
00001A5C                            ; loc_1844:
00001A5C                            @maskvalue:
00001A5C 300D                       		move.w	a5,d0		; get length in bits of inline copy value
00001A5E D040                       		add.w	d0,d0
00001A60 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; mask value appropriately
00001A64 D243                       		add.w	d3,d1		; add starting art tile
00001A66 1A18                       		move.b	(a0)+,d5
00001A68 E14D                       		lsl.w	#8,d5
00001A6A 1A18                       		move.b	(a0)+,d5	; get next word
00001A6C 4E75                       		rts	
00001A6E                            ; ===========================================================================
00001A6E                            ; loc_1856:
00001A6E                            @enoughbits:
00001A6E 6700                       		beq.s	@justenough	; if the word has been exactly exhausted, branch
00001A70 EE69                       		lsr.w	d7,d1	; get inline copy value
00001A72 300D                       		move.w	a5,d0
00001A74 D040                       		add.w	d0,d0
00001A76 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; and mask it appropriately
00001A7A D243                       		add.w	d3,d1	; add starting art tile
00001A7C 300D                       		move.w	a5,d0
00001A7E 6000                       		bra.s	EniDec_FetchByte
00001A80                            ; ===========================================================================
00001A80                            ; loc_1868:
00001A80                            @justenough:
00001A80 7C10                       		moveq	#16,d6	; reset shift value
00001A82 60D8                       		bra.s	@maskvalue
00001A84                            ; ===========================================================================
00001A84                            ; word_186C:
00001A84                            EniDec_Masks:
00001A84 0001 0003 0007 000F        		dc.w	 1,    3,    7,   $F
00001A8C 001F 003F 007F 00FF        		dc.w   $1F,  $3F,  $7F,  $FF
00001A94 01FF 03FF 07FF 0FFF        		dc.w  $1FF, $3FF, $7FF, $FFF
00001A9C 1FFF 3FFF 7FFF FFFF        		dc.w $1FFF,$3FFF,$7FFF,$FFFF
00001AA4                            
00001AA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AA4                            
00001AA4                            ; sub_188C:
00001AA4                            EniDec_FetchByte:
00001AA4 9C40                       		sub.w	d0,d6	; subtract length of current entry from shift value so that next entry is read next time around
00001AA6 0C46 0009                  		cmpi.w	#9,d6	; does a new byte need to be read?
00001AAA 6400                       		bhs.s	@locret	; if not, branch
00001AAC 5046                       		addq.w	#8,d6
00001AAE E145                       		asl.w	#8,d5
00001AB0 1A18                       		move.b	(a0)+,d5
00001AB2                            @locret:
00001AB2 4E75                       		rts	
00001AB4                            ; End of function EniDec_FetchByte
00001AB4                            ; End of function EniDec_FetchByte
00001AB4                            		include	"_inc\Kosinski Decompression.asm"
00001AB4                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001AB4                            ; ---------------------------------------------------------------------------
00001AB4                            ; KOSINSKI DECOMPRESSION PROCEDURE
00001AB4                            ; (sometimes called KOZINSKI decompression)
00001AB4                            ;
00001AB4                            ; ARGUMENTS:
00001AB4                            ; a0 = source address
00001AB4                            ; a1 = destination address
00001AB4                            ;
00001AB4                            ; For format explanation see http://info.sonicretro.org/Kosinski@compression
00001AB4                            ; New faster version by written by vladikcomper, with additional improvements by
00001AB4                            ; MarkeyJester and Flamewing
00001AB4                            ; Converted to ASM68K by Beta Filter.
00001AB4                            ; ---------------------------------------------------------------------------
00001AB4 =00000001                  Kos_UseLUT: equ 1
00001AB4 =00000003                  Kos_LoopUnroll: equ 3
00001AB4 =00000001                  Kos_ExtremeUnrolling: equ 1
00001AB4                            
00001AB4                            Kos_RunBitStream macro
00001AB4                                dbra    d2,@skip\@
00001AB4                                moveq   #7,d2                   ; Set repeat count to 8.
00001AB4                                move.b  d1,d0                   ; Use the remaining 8 bits.
00001AB4                                not.w   d3                      ; Have all 16 bits been used up?
00001AB4                                bne.s   @skip\@                   ; Branch if not.
00001AB4                                move.b  (a0)+,d0                ; Get desc field low-byte.
00001AB4                                move.b  (a0)+,d1                ; Get desc field hi-byte.
00001AB4                                if Kos_UseLUT=1
00001AB4                                move.b  (a4,d0.w),d0            ; Invert bit order...
00001AB4                                move.b  (a4,d1.w),d1            ; ... for both bytes.
00001AB4                                endif
00001AB4                            @skip\@
00001AB4                                endm
00001AB4                            
00001AB4                            Kos_ReadBit macro
00001AB4                                if Kos_UseLUT=1
00001AB4                                add.b   d0,d0                   ; Get a bit from the bitstream.
00001AB4                                else
00001AB4                                lsr.b   #1,d0                   ; Get a bit from the bitstream.
00001AB4                                endif
00001AB4                                endm
00001AB4                            ; ===========================================================================
00001AB4                            ; KozDec@193A:
00001AB4                            KosDec:
00001AB4 7E07                           moveq   #(1<<Kos_LoopUnroll)-1,d7
00001AB6 7000                           moveq   #0,d0
00001AB8 7200                           moveq   #0,d1
00001ABA 49FA 0000                      lea KosDec_ByteMap(pc),a4       ; Load LUT pointer.
00001ABE 1018                           move.b  (a0)+,d0                ; Get desc field low-byte.
00001AC0 1218                           move.b  (a0)+,d1                ; Get desc field hi-byte.
00001AC2 1034 0000                      move.b  (a4,d0.w),d0            ; Invert bit order...
00001AC6 1234 1000                      move.b  (a4,d1.w),d1            ; ... for both bytes.
00001ACA 7407                           moveq   #7,d2                   ; Set repeat count to 8.
00001ACC 7600                           moveq   #0,d3                   ; d3 will be desc field switcher.
00001ACE 6000                           bra.s   @FetchNewCode
00001AD0                            ; ---------------------------------------------------------------------------
00001AD0                            @FetchCodeLoop:
00001AD0                                ; Code 1 (Uncompressed byte).
00001AE8 12D8                           move.b  (a0)+,(a1)+
00001AEA                            
00001AEA                            @FetchNewCode:
00001AEC 65E2                           bcs.s   @FetchCodeLoop          ; If code = 1, branch.
00001AEE                            
00001AEE                                ; Codes 00 and 01.
00001AEE 7AFF                           moveq   #-1,d5
00001AF0 4BD1                           lea (a1),a5
00001B0C 6500 0000                      bcs.w   @Code_01
00001B10                            
00001B10                                ; Code 00 (Dictionary ref. short).
00001B2A 6500                           bcs.s   @Copy45
00001B46 6500                           bcs.s   @Copy3
00001B60 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B62 DAC5                           adda.w  d5,a5
00001B64 12DD                           move.b  (a5)+,(a1)+
00001B66 12DD                           move.b  (a5)+,(a1)+
00001B68 6080                           bra.s   @FetchNewCode
00001B6A                            ; ---------------------------------------------------------------------------
00001B6A                            @Copy3:
00001B82 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B84 DAC5                           adda.w  d5,a5
00001B86 12DD                           move.b  (a5)+,(a1)+
00001B88 12DD                           move.b  (a5)+,(a1)+
00001B8A 12DD                           move.b  (a5)+,(a1)+
00001B8C 6000 FF5C                      bra.w   @FetchNewCode
00001B90                            ; ---------------------------------------------------------------------------
00001B90                            @Copy45:
00001BAA 6500                           bcs.s   @Copy5
00001BC4 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001BC6 DAC5                           adda.w  d5,a5
00001BC8 12DD                           move.b  (a5)+,(a1)+
00001BCA 12DD                           move.b  (a5)+,(a1)+
00001BCC 12DD                           move.b  (a5)+,(a1)+
00001BCE 12DD                           move.b  (a5)+,(a1)+
00001BD0 6000 FF18                      bra.w   @FetchNewCode
00001BD4                            ; ---------------------------------------------------------------------------
00001BD4                            @Copy5:
00001BEC 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001BEE DAC5                           adda.w  d5,a5
00001BF0 12DD                           move.b  (a5)+,(a1)+
00001BF2 12DD                           move.b  (a5)+,(a1)+
00001BF4 12DD                           move.b  (a5)+,(a1)+
00001BF6 12DD                           move.b  (a5)+,(a1)+
00001BF8 12DD                           move.b  (a5)+,(a1)+
00001BFA 6000 FEEE                      bra.w   @FetchNewCode
00001BFE                            ; ---------------------------------------------------------------------------
00001BFE                            ; ---------------------------------------------------------------------------
00001BFE                            @Code_01:
00001BFE 7800                           moveq   #0,d4                   ; d4 will contain copy count.
00001C00                                ; Code 01 (Dictionary ref. long / special).
00001C18 1C18                           move.b  (a0)+,d6                ; d6 = %LLLLLLLL.
00001C1A 1818                           move.b  (a0)+,d4                ; d4 = %HHHHHCCC.
00001C1C 1A04                           move.b  d4,d5                   ; d5 = %11111111 HHHHHCCC.
00001C1E EB4D                           lsl.w   #5,d5                   ; d5 = %111HHHHH CCC00000.
00001C20 1A06                           move.b  d6,d5                   ; d5 = %111HHHHH LLLLLLLL.
00001C22 C847                           and.w   d7,d4                   ; d4 = %00000CCC.
00001C24 6600                           bne.s   @StreamCopy             ; if CCC=0, branch.
00001C26                            
00001C26                                ; special mode (extended counter)
00001C26 1818                           move.b  (a0)+,d4                ; Read cnt
00001C28 6700                           beq.s   @Quit                   ; If cnt=0, quit decompression.
00001C2A 5304                           subq.b  #1,d4
00001C2C 6700 FEBC                      beq.w   @FetchNewCode           ; If cnt=1, fetch a new code.
00001C30                            
00001C30 DAC5                           adda.w  d5,a5
00001C32 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001C34 3C04                           move.w  d4,d6
00001C36 4646                           not.w   d6
00001C38 CC47                           and.w   d7,d6
00001C3A DC46                           add.w   d6,d6
00001C3C E64C                           lsr.w   #Kos_LoopUnroll,d4
00001C3E 4EFB 6000                      jmp @largecopy(pc,d6.w)
00001C42                            ; ---------------------------------------------------------------------------
00001C42                            @largecopy:
00001C42                                rept (1<<Kos_LoopUnroll)
00001C42                                move.b  (a5)+,(a1)+
00001C42 12DD 12DD 12DD 12DD 12DD+      endr
00001C52 51CC FFEE                      dbra    d4,@largecopy
00001C56 6000 FE92                      bra.w   @FetchNewCode
00001C5A                            ; ---------------------------------------------------------------------------
00001C5A                            @StreamCopy:
00001C5A DAC5                           adda.w  d5,a5
00001C5C 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001C5E BF44                           eor.w   d7,d4
00001C60 D844                           add.w   d4,d4
00001C62 4EFB 4000                      jmp @mediumcopy(pc,d4.w)
00001C66                            ; ---------------------------------------------------------------------------
00001C66                            @mediumcopy:
00001C66                                rept 8
00001C66                                move.b  (a5)+,(a1)+
00001C66 12DD 12DD 12DD 12DD 12DD+      endr
00001C76 6000 FE72                      bra.w   @FetchNewCode
00001C7A                            ; ---------------------------------------------------------------------------
00001C7A                            @Quit:
00001C7A 4E75                           rts                             ; End of function KosDec.
00001C7C                            ; ===========================================================================
00001C7C                            KosDec_ByteMap:
00001C7C 0080 40C0 20A0 60E0 1090+      dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
00001C8C 0888 48C8 28A8 68E8 1898+      dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
00001C9C 0484 44C4 24A4 64E4 1494+      dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
00001CAC 0C8C 4CCC 2CAC 6CEC 1C9C+      dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
00001CBC 0282 42C2 22A2 62E2 1292+      dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
00001CCC 0A8A 4ACA 2AAA 6AEA 1A9A+      dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
00001CDC 0686 46C6 26A6 66E6 1696+      dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
00001CEC 0E8E 4ECE 2EAE 6EEE 1E9E+      dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
00001CFC 0181 41C1 21A1 61E1 1191+      dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
00001D0C 0989 49C9 29A9 69E9 1999+      dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
00001D1C 0585 45C5 25A5 65E5 1595+      dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
00001D2C 0D8D 4DCD 2DAD 6DED 1D9D+      dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
00001D3C 0383 43C3 23A3 63E3 1393+      dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
00001D4C 0B8B 4BCB 2BAB 6BEB 1B9B+      dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
00001D5C 0787 47C7 27A7 67E7 1797+      dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
00001D6C 0F8F 4FCF 2FAF 6FEF 1F9F+      dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
00001D7C                            ; ===========================================================================
00001D7C                            ; ===========================================================================
00001D7C                            
00001D7C                            		include	"_inc\PaletteCycle.asm"
00001D7C                            ; ---------------------------------------------------------------------------
00001D7C                            ; Palette cycling routine loading subroutine
00001D7C                            ; ---------------------------------------------------------------------------
00001D7C                            
00001D7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D7C                            
00001D7C                            
00001D7C                            PaletteCycle:
00001D7C 6100 0000                  		bsr.w	PalCycle_SuperSonic	
00001D80 7400                       		moveq	#0,d2
00001D82 7000                       		moveq	#0,d0
00001D84 1038 FE10                  		move.b	(v_zone).w,d0	; get level number
00001D88 D040                       		add.w	d0,d0
00001D8A 303B 0000                  		move.w	PCycle_Index(pc,d0.w),d0
00001D8E 4EFB 0000                  		jmp	PCycle_Index(pc,d0.w) ; jump to relevant palette routine
00001D92                            ; End of function PaletteCycle
00001D92                            
00001D92                            ; ===========================================================================
00001D92                            ; ---------------------------------------------------------------------------
00001D92                            ; Palette cycling routines
00001D92                            ; ---------------------------------------------------------------------------
00001D92 0000                       PCycle_Index:	dc.w PCycle_GHZ-PCycle_Index
00001D94 0000                       		dc.w PCycle_LZ-PCycle_Index
00001D96 0000                       		dc.w PCycle_MZ-PCycle_Index
00001D98 0000                       		dc.w PalCycle_SLZ-PCycle_Index
00001D9A 0000                       		dc.w PalCycle_SYZ-PCycle_Index
00001D9C 0000                       		dc.w PalCycle_SBZ-PCycle_Index
00001D9E 0000                       		dc.w PCycle_GHZ-PCycle_Index	; Ending
00001DA0                            
00001DA0                            
00001DA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DA0                            
00001DA0                            
00001DA0                            PCycle_Title:
00001DA0 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001DA6 6000                       		bra.s	PCycGHZ_Go
00001DA8                            ; ===========================================================================
00001DA8                            
00001DA8                            PCycle_GHZ:
00001DA8 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001DAE                            
00001DAE                            PCycGHZ_Go:
00001DAE 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001DB2 6A00                       		bpl.s	PCycGHZ_Skip	; if time remains, branch
00001DB4                            
00001DB4 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 5 frames
00001DBA 3038 F632                  		move.w	(v_pcyc_num).w,d0 ; get cycle number
00001DBE 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001DC2 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001DC6 E748                       		lsl.w	#3,d0
00001DC8 43F8 FB50                  		lea	(v_pal_dry+$50).w,a1
00001DCC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001DD0 22B0 0004                  		move.l	4(a0,d0.w),(a1)	; copy palette data to RAM
00001DD4                            
00001DD4                            PCycGHZ_Skip:
00001DD4 4E75                       		rts	
00001DD6                            ; End of function PCycle_GHZ
00001DD6                            
00001DD6                            
00001DD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DD6                            
00001DD6                            
00001DD6                            PCycle_LZ:
00001DD6                            ; Waterfalls
00001DD6 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001DDA 6A00                       		bpl.s	PCycLZ_Skip1	; if time remains, branch
00001DDC                            
00001DDC 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 2 frames
00001DE2 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001DE6 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001DEA 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001DEE E748                       		lsl.w	#3,d0
00001DF0 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001DF6 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; check if level is SBZ3
00001DFC 6600                       		bne.s	PCycLZ_NotSBZ3
00001DFE 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	palette instead
00001E04                            
00001E04                            	PCycLZ_NotSBZ3:
00001E04 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001E08 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001E0C 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001E10 43F8 FAD6                  		lea	(v_pal_water+$56).w,a1
00001E14 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001E18 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001E1C                            
00001E1C                            PCycLZ_Skip1:
00001E1C                            ; Conveyor belts
00001E1C                            		;move.w	(v_framecount).w,d0
00001E1C                            		;andi.w	#7,d0
00001E1C                            		;move.b	PCycLZ_Seq(pc,d0.w),d0 ; get byte from palette sequence
00001E1C                            		;beq.s	PCycLZ_Skip2	; if byte is 0, branch
00001E1C                            		;moveq	#1,d1
00001E1C                            		;tst.b	(f_conveyrev).w	; have conveyor belts been reversed?
00001E1C                            		;beq.s	PCycLZ_NoRev	; if not, branch
00001E1C                            		;neg.w	d1
00001E1C                            
00001E1C                            	;PCycLZ_NoRev:
00001E1C                            		;move.w	(v_pal_buffer).w,d0
00001E1C                            		;andi.w	#3,d0
00001E1C                            		;add.w	d1,d0
00001E1C                            		;cmpi.w	#3,d0
00001E1C                            		;bcs.s	loc_1A0A
00001E1C                            		;move.w	d0,d1
00001E1C                            		;moveq	#0,d0
00001E1C                            		;tst.w	d1
00001E1C                            		;bpl.s	loc_1A0A
00001E1C                            		;moveq	#2,d0
00001E1C                            
00001E1C                            ;loc_1A0A:
00001E1C                            		;move.w	d0,(v_pal_buffer).w
00001E1C                            		;add.w	d0,d0
00001E1C                            		;move.w	d0,d1
00001E1C                            		;add.w	d0,d0
00001E1C                            		;add.w	d1,d0
00001E1C                            		;lea	(Pal_LZCyc2).l,a0
00001E1C                            		;lea	(v_pal_dry+$76).w,a1
00001E1C                            		;move.l	(a0,d0.w),(a1)+
00001E1C                            		;move.w	4(a0,d0.w),(a1)
00001E1C                            		;lea	(Pal_LZCyc3).l,a0
00001E1C                            		;lea	(v_pal_water+$76).w,a1
00001E1C                            		;move.l	(a0,d0.w),(a1)+
00001E1C                            		;move.w	4(a0,d0.w),(a1)
00001E1C                            
00001E1C                            ;PCycLZ_Skip2:
00001E1C 4E75                       		rts	
00001E1E                            ; End of function PCycle_LZ
00001E1E                            
00001E1E                            ; ===========================================================================
00001E1E 0100 0001 0000 0100        PCycLZ_Seq:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001E26                            ; ===========================================================================
00001E26                            
00001E26                            PCycle_MZ:
00001E26 4E75                       		rts	
00001E28                            
00001E28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E28                            
00001E28                            
00001E28                            PalCycle_SLZ:
00001E28 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001E2C 6A00                       		bpl.s	locret_1A80
00001E2E 31FC 0007 F634             		move.w	#7,(v_pcyc_time).w
00001E34 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001E38 5240                       		addq.w	#1,d0
00001E3A 0C40 0006                  		cmpi.w	#6,d0
00001E3E 6500                       		bcs.s	loc_1A60
00001E40 7000                       		moveq	#0,d0
00001E42                            
00001E42                            loc_1A60:
00001E42 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001E46 3200                       		move.w	d0,d1
00001E48 D241                       		add.w	d1,d1
00001E4A D041                       		add.w	d1,d0
00001E4C D040                       		add.w	d0,d0
00001E4E 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001E54 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001E58 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001E5C 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001E62                            
00001E62                            locret_1A80:
00001E62 4E75                       		rts	
00001E64                            ; End of function PalCycle_SLZ
00001E64                            
00001E64                            
00001E64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E64                            
00001E64                            
00001E64                            PalCycle_SYZ:
00001E64 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001E68 6A00                       		bpl.s	locret_1AC6
00001E6A 31FC 0005 F634             		move.w	#5,(v_pcyc_time).w
00001E70 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001E74 5278 F632                  		addq.w	#1,(v_pcyc_num).w
00001E78 0240 0003                  		andi.w	#3,d0
00001E7C E548                       		lsl.w	#2,d0
00001E7E 3200                       		move.w	d0,d1
00001E80 D040                       		add.w	d0,d0
00001E82 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001E88 43F8 FB6E                  		lea	(v_pal_dry+$6E).w,a1
00001E8C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001E90 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001E94 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001E9A 43F8 FB76                  		lea	(v_pal_dry+$76).w,a1
00001E9E 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001EA2 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001EA8                            
00001EA8                            locret_1AC6:
00001EA8 4E75                       		rts	
00001EAA                            ; End of function PalCycle_SYZ
00001EAA                            
00001EAA                            
00001EAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EAA                            
00001EAA                            
00001EAA                            PalCycle_SBZ:
00001EAA 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001EB0 4A38 FE11                  		tst.b	(v_act).w
00001EB4 6700                       		beq.s	loc_1ADA
00001EB6 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001EBC                            
00001EBC                            loc_1ADA:
00001EBC 43F8 F650                  		lea	(v_pal_buffer).w,a1
00001EC0 321A                       		move.w	(a2)+,d1
00001EC2                            
00001EC2                            loc_1AE0:
00001EC2 5311                       		subq.b	#1,(a1)
00001EC4 6B00                       		bmi.s	loc_1AEA
00001EC6 5489                       		addq.l	#2,a1
00001EC8 5C8A                       		addq.l	#6,a2
00001ECA 6000                       		bra.s	loc_1B06
00001ECC                            ; ===========================================================================
00001ECC                            
00001ECC                            loc_1AEA:
00001ECC 12DA                       		move.b	(a2)+,(a1)+
00001ECE 1011                       		move.b	(a1),d0
00001ED0 5200                       		addq.b	#1,d0
00001ED2 B01A                       		cmp.b	(a2)+,d0
00001ED4 6500                       		bcs.s	loc_1AF6
00001ED6 7000                       		moveq	#0,d0
00001ED8                            
00001ED8                            loc_1AF6:
00001ED8 12C0                       		move.b	d0,(a1)+
00001EDA 0240 000F                  		andi.w	#$F,d0
00001EDE D040                       		add.w	d0,d0
00001EE0 305A                       		movea.w	(a2)+,a0
00001EE2 365A                       		movea.w	(a2)+,a3
00001EE4 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001EE8                            
00001EE8                            loc_1B06:
00001EE8 51C9 FFD8                  		dbf	d1,loc_1AE0
00001EEC 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001EF0 6A00                       		bpl.s	locret_1B64
00001EF2 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001EF8 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w
00001EFE 4A38 FE11                  		tst.b	(v_act).w
00001F02 6700                       		beq.s	loc_1B2E
00001F04 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001F0A 31FC 0002 F634             		move.w	#2,(v_pcyc_time).w
00001F10                            
00001F10                            loc_1B2E:
00001F10 72FF                       		moveq	#-1,d1
00001F12 4A38 F7C0                  		tst.b	(f_conveyrev).w
00001F16 6700                       		beq.s	loc_1B38
00001F18 4441                       		neg.w	d1
00001F1A                            
00001F1A                            loc_1B38:
00001F1A 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001F1E 0240 0003                  		andi.w	#3,d0
00001F22 D041                       		add.w	d1,d0
00001F24 0C40 0003                  		cmpi.w	#3,d0
00001F28 6500                       		bcs.s	loc_1B52
00001F2A 3200                       		move.w	d0,d1
00001F2C 7000                       		moveq	#0,d0
00001F2E 4A41                       		tst.w	d1
00001F30 6A00                       		bpl.s	loc_1B52
00001F32 7002                       		moveq	#2,d0
00001F34                            
00001F34                            loc_1B52:
00001F34 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001F38 D040                       		add.w	d0,d0
00001F3A 43F8 FB58                  		lea	(v_pal_dry+$58).w,a1
00001F3E 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001F42 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001F46                            
00001F46                            locret_1B64:
00001F46 4E75                       		rts	
00001F48                            ; End of function PalCycle_SBZ
00001F48                            
00001F48                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001F48                            
00001F48                            ; sub_213E:
00001F48                            PalCycle_SuperSonic:
00001F48 7000                       		moveq	#0,d0
00001F4A 1038 F5D8                  		move.b	(Super_Sonic_palette).w,d0
00001F4E 6700                       		beq.s	PalCycle_SuperSonic_return	; rts	; return, if Sonic isn't super
00001F50 6B00 0000                  		bmi.w	PalCycle_SuperSonic_normal	; branch, if fade-in is done
00001F54 5300                       		subq.b	#1,d0
00001F56 6600                       		bne.s	PalCycle_SuperSonic_revert	; branch for values greater than 1
00001F58                            
00001F58                            		; fade from Sonic's to Super Sonic's palette
00001F58                            		; run frame timer
00001F58 5338 F5DE                  		subq.b	#1,(Palette_timer).w
00001F5C 6A00                       		bpl.s	PalCycle_SuperSonic_return	; rts
00001F5E 11FC 0003 F5DE             		move.b	#3,(Palette_timer).w
00001F64                            
00001F64                            		; increment palette frame and update Sonic's palette
00001F64 41F9 0000 0000             		lea	(CyclingPal_SSTransformation).l,a0
00001F6A 3038 F5DC                  		move.w	(Palette_frame).w,d0
00001F6E 5078 F5DC                  		addq.w	#8,(Palette_frame).w	; 1 palette entry = 1 word, Sonic uses 4 shades of blue
00001F72 0C78 0030 F5DC             		cmpi.w	#$30,(Palette_frame).w	; has palette cycle reached the 6th frame?
00001F78 6500                       		blo.s	PalCycle_SuperSonic_palettes			; if not, branch
00001F7A 11FC 00FF F5D8             		move.b	#-1,(Super_Sonic_palette).w	; mark fade-in as done
00001F80 11FC 0000 F7C8             		move.b	#0,($FFFFF7C8).w ; unfreeze Sonic	
00001F86 6000                       		bra.s		PalCycle_SuperSonic_palettes
00001F88                            
00001F88                            PalCycle_SuperSonic_return:
00001F88 4E75                       		rts
00001F8A                            ; ===========================================================================
00001F8A                            ; loc_2188:
00001F8A                            PalCycle_SuperSonic_revert:	; runs the fade in transition backwards
00001F8A                            		; run frame timer
00001F8A 5338 F5DE                  		subq.b	#1,(Palette_timer).w
00001F8E 6AF8                       		bpl.s	PalCycle_SuperSonic_return	; rts
00001F90 11FC 0003 F5DE             		move.b	#3,(Palette_timer).w
00001F96                            
00001F96                            		; decrement palette frame and update Sonic's palette
00001F96 41F9 0000 0000             		lea	(CyclingPal_SSTransformation).l,a0
00001F9C 3038 F5DC                  		move.w	(Palette_frame).w,d0
00001FA0 5178 F5DC                  		subq.w	#8,(Palette_frame).w	; previous frame
00001FA4 6400                       		bcc.s	PalCycle_SuperSonic_palettes			; branch, if it isn't the first frame
00001FA6 31FC 0000 F5DC             		move.w	#0,(Palette_frame).w
00001FAC 11FC 0000 F5D8             		move.b	#0,(Super_Sonic_palette).w	; stop palette cycle
00001FB2                            
00001FB2                            PalCycle_SuperSonic_palettes:
00001FB2 43F8 FB04                  		lea	(v_pal_dry+4).w,a1
00001FB6 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001FBA 22B0 0004                  		move.l	4(a0,d0.w),(a1)	
00001FBE 4E75                       		rts
00001FC0                            ; ===========================================================================
00001FC0                            ; loc_21E6:
00001FC0                            PalCycle_SuperSonic_normal:
00001FC0                            		; run frame timer
00001FC0 5338 F5DE                  		subq.b	#1,(Palette_timer).w
00001FC4 6AC2                       		bpl.s	PalCycle_SuperSonic_return	; rts
00001FC6 11FC 0007 F5DE             		move.b	#7,(Palette_timer).w
00001FCC                            
00001FCC                            		; increment palette frame and update Sonic's palette
00001FCC 41F9 0000 0000             		lea	(CyclingPal_SSTransformation).l,a0
00001FD2 3038 F5DC                  		move.w	(Palette_frame).w,d0
00001FD6 5078 F5DC                  		addq.w	#8,(Palette_frame).w	; next frame
00001FDA 0C78 0078 F5DC             		cmpi.w	#$78,(Palette_frame).w	; is it the last frame?
00001FE0 63D0                       		bls.s	PalCycle_SuperSonic_palettes			; if not, branch
00001FE2 31FC 0030 F5DC             		move.w	#$30,(Palette_frame).w	; reset frame counter (Super Sonic's normal palette cycle starts at $30. Everything before that is for the palette fade)
00001FE8 60C8                       		bra.s	PalCycle_SuperSonic_palettes
00001FEA 4E75                       		rts
00001FEC                            ; End of function PalCycle_SuperSonic
00001FEC                            
00001FEC                            
00001FEC                            CyclingPal_SSTransformation:	incbin	"palette/Super.bin"
00001FEC                            CyclingPal_SSTransformation:	incbin	"palette/Super.bin"
0000206C                            
0000206C                            Pal_TitleCyc:	incbin	"palette\Cycle - Title Screen Water.bin"
0000208C                            Pal_GHZCyc:	incbin	"palette\Cycle - GHZ.bin"
000020AC                            Pal_LZCyc1:	incbin	"palette\Cycle - LZ Waterfall.bin"
000020CC                            Pal_LZCyc2:	incbin	"palette\Cycle - LZ Conveyor Belt.bin"
000020DE                            Pal_LZCyc3:	incbin	"palette\Cycle - LZ Conveyor Belt Underwater.bin"
000020F0                            Pal_SBZ3Cyc1:	incbin	"palette\Cycle - SBZ3 Waterfall.bin"
00002158                            Pal_SLZCyc:	incbin	"palette\Cycle - SLZ.bin"
0000217C                            Pal_SYZCyc1:	incbin	"palette\Cycle - SYZ1.bin"
0000219C                            Pal_SYZCyc2:	incbin	"palette\Cycle - SYZ2.bin"
000021AC                            Pal_SYZCyc1_2:	incbin	"palette\Cycle - SYZ1 Act 2.bin"
000021CC                            Pal_SYZCyc2_2:	incbin	"palette\Cycle - SYZ2 Act 2.bin"
000021DC                            Pal_SYZCyc1_3:	incbin	"palette\Cycle - SYZ1 Act 3.bin"
000021FC                            Pal_SYZCyc2_3:	incbin	"palette\Cycle - SYZ2 Act 3.bin"
0000220C                            
0000220C                            		include	"_inc\SBZ Palette Scripts.asm"
0000220C                            ; ---------------------------------------------------------------------------
0000220C                            ; Scrap Brain Zone palette cycling script
0000220C                            ; ---------------------------------------------------------------------------
0000220C                            
0000220C                            mSBZp:	macro duration,colors,paladdress,ramaddress
0000220C                            	dc.b duration, colors
0000220C                            	dc.w paladdress, ramaddress
0000220C                            	endm
0000220C                            
0000220C                            ; duration in frames, number of colors, palette address, RAM address
0000220C                            
0000220C                            Pal_SBZCycList1:
0000220C 0000                       	dc.w ((end_SBZCycList1-Pal_SBZCycList1-2)/6)-1
0000220E 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
00002214 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
0000221A 0E08 0000 FB6E             	mSBZp	$E,8,Pal_SBZCyc3,v_pal_dry+$6E
00002220 0B08 0000 FB70             	mSBZp	$B,8,Pal_SBZCyc5,v_pal_dry+$70
00002226 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
0000222C 1C10 0000 FB7E             	mSBZp	$1C,$10,Pal_SBZCyc7,v_pal_dry+$7E
00002232 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
00002238 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
0000223E 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
00002244                            end_SBZCycList1:
00002244                            	even
00002244                            
00002244                            Pal_SBZCycList2:
00002244 0000                       	dc.w ((end_SBZCycList2-Pal_SBZCycList2-2)/6)-1
00002246 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
0000224C 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
00002252 0908 0000 FB70             	mSBZp	9,8,Pal_SBZCyc9,v_pal_dry+$70
00002258 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
0000225E 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
00002264 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
0000226A 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
00002270                            end_SBZCycList2:
00002270                            	even
00002270                            	even
00002270                            
00002270                            Pal_SBZCyc1:	incbin	"palette\Cycle - SBZ 1.bin"
00002280                            Pal_SBZCyc2:	incbin	"palette\Cycle - SBZ 2.bin"
00002290                            Pal_SBZCyc3:	incbin	"palette\Cycle - SBZ 3.bin"
000022A0                            Pal_SBZCyc4:	incbin	"palette\Cycle - SBZ 4.bin"
000022AC                            Pal_SBZCyc5:	incbin	"palette\Cycle - SBZ 5.bin"
000022BC                            Pal_SBZCyc6:	incbin	"palette\Cycle - SBZ 6.bin"
000022CC                            Pal_SBZCyc7:	incbin	"palette\Cycle - SBZ 7.bin"
000022EC                            Pal_SBZCyc8:	incbin	"palette\Cycle - SBZ 8.bin"
000022F6                            Pal_SBZCyc9:	incbin	"palette\Cycle - SBZ 9.bin"
00002306                            Pal_SBZCyc10:	incbin	"palette\Cycle - SBZ 10.bin"
00002312                            ; ---------------------------------------------------------------------------
00002312                            ; Subroutine to	fade in from black
00002312                            ; ---------------------------------------------------------------------------
00002312                            
00002312                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002312                            
00002312                            
00002312                            PaletteFadeIn:
00002312 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; set start position = 0; size = $40
00002318                            
00002318                            PalFadeIn_Alt:				; start position and size are already set
00002318 7000                       		moveq	#0,d0
0000231A 41F8 FB00                  		lea	(v_pal_dry).w,a0
0000231E 1038 F626                  		move.b	(v_pfade_start).w,d0
00002322 D0C0                       		adda.w	d0,a0
00002324 7200                       		moveq	#cBlack,d1
00002326 1038 F627                  		move.b	(v_pfade_size).w,d0
0000232A                            
0000232A                            	@fill:
0000232A 30C1                       		move.w	d1,(a0)+
0000232C 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with black
00002330                            
00002330 383C 0015                  		move.w	#$15,d4
00002334                            
00002334                            	@mainloop:
00002334 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
0000233A 6100 0000                  		bsr.w	WaitForVBla
0000233E 6100                       		bsr.s	FadeIn_FromBlack
00002340 6100 F4C2                  		bsr.w	RunPLC
00002344 51CC FFEE                  		dbf	d4,@mainloop
00002348 4E75                       		rts	
0000234A                            ; End of function PaletteFadeIn
0000234A                            
0000234A                            
0000234A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000234A                            
0000234A                            
0000234A                            FadeIn_FromBlack:
0000234A 7000                       		moveq	#0,d0
0000234C 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002350 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00002354 1038 F626                  		move.b	(v_pfade_start).w,d0
00002358 D0C0                       		adda.w	d0,a0
0000235A D2C0                       		adda.w	d0,a1
0000235C 1038 F627                  		move.b	(v_pfade_size).w,d0
00002360                            
00002360                            	@addcolour:
00002360 6100                       		bsr.s	FadeIn_AddColour ; increase colour
00002362 51C8 FFFC                  		dbf	d0,@addcolour	; repeat for size of palette
00002366                            
00002366 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
0000236C 6600                       		bne.s	@exit		; if not, branch
0000236E                            
0000236E 7000                       		moveq	#0,d0
00002370 41F8 FA80                  		lea	(v_pal_water).w,a0
00002374 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
00002378 1038 F626                  		move.b	(v_pfade_start).w,d0
0000237C D0C0                       		adda.w	d0,a0
0000237E D2C0                       		adda.w	d0,a1
00002380 1038 F627                  		move.b	(v_pfade_size).w,d0
00002384                            
00002384                            	@addcolour2:
00002384 6100                       		bsr.s	FadeIn_AddColour ; increase colour again
00002386 51C8 FFFC                  		dbf	d0,@addcolour2 ; repeat
0000238A                            
0000238A                            @exit:
0000238A 4E75                       		rts	
0000238C                            ; End of function FadeIn_FromBlack
0000238C                            
0000238C                            
0000238C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000238C                            
0000238C                            
0000238C                            FadeIn_AddColour:
0000238C                            @addblue:
0000238C 3419                       		move.w	(a1)+,d2
0000238E 3610                       		move.w	(a0),d3
00002390 B642                       		cmp.w	d2,d3		; is colour already at threshold level?
00002392 6700                       		beq.s	@next		; if yes, branch
00002394 3203                       		move.w	d3,d1
00002396 0641 0200                  		addi.w	#$200,d1	; increase blue	value
0000239A B242                       		cmp.w	d2,d1		; has blue reached threshold level?
0000239C 6200                       		bhi.s	@addgreen	; if yes, branch
0000239E 30C1                       		move.w	d1,(a0)+	; update palette
000023A0 4E75                       		rts	
000023A2                            ; ===========================================================================
000023A2                            
000023A2                            @addgreen:
000023A2 3203                       		move.w	d3,d1
000023A4 0641 0020                  		addi.w	#$20,d1		; increase green value
000023A8 B242                       		cmp.w	d2,d1
000023AA 6200                       		bhi.s	@addred
000023AC 30C1                       		move.w	d1,(a0)+	; update palette
000023AE 4E75                       		rts	
000023B0                            ; ===========================================================================
000023B0                            
000023B0                            @addred:
000023B0 5458                       		addq.w	#2,(a0)+	; increase red value
000023B2 4E75                       		rts	
000023B4                            ; ===========================================================================
000023B4                            
000023B4                            @next:
000023B4 5448                       		addq.w	#2,a0		; next colour
000023B6 4E75                       		rts	
000023B8                            ; End of function FadeIn_AddColour
000023B8                            
000023B8                            
000023B8                            ; ---------------------------------------------------------------------------
000023B8                            ; Subroutine to fade out to black
000023B8                            ; ---------------------------------------------------------------------------
000023B8                            
000023B8                            
000023B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000023B8                            
000023B8                            
000023B8                            PaletteFadeOut:
000023B8 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
000023BE 383C 0015                  		move.w	#$15,d4
000023C2                            
000023C2                            	@mainloop:
000023C2 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
000023C8 6100 0000                  		bsr.w	WaitForVBla
000023CC 6100                       		bsr.s	FadeOut_ToBlack
000023CE 6100 F434                  		bsr.w	RunPLC
000023D2 51CC FFEE                  		dbf	d4,@mainloop
000023D6 4E75                       		rts	
000023D8                            ; End of function PaletteFadeOut
000023D8                            
000023D8                            
000023D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000023D8                            
000023D8                            
000023D8                            FadeOut_ToBlack:
000023D8 7000                       		moveq	#0,d0
000023DA 41F8 FB00                  		lea	(v_pal_dry).w,a0
000023DE 1038 F626                  		move.b	(v_pfade_start).w,d0
000023E2 D0C0                       		adda.w	d0,a0
000023E4 1038 F627                  		move.b	(v_pfade_size).w,d0
000023E8                            
000023E8                            	@decolour:
000023E8 6100                       		bsr.s	FadeOut_DecColour ; decrease colour
000023EA 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
000023EE                            
000023EE 7000                       		moveq	#0,d0
000023F0 41F8 FA80                  		lea	(v_pal_water).w,a0
000023F4 1038 F626                  		move.b	(v_pfade_start).w,d0
000023F8 D0C0                       		adda.w	d0,a0
000023FA 1038 F627                  		move.b	(v_pfade_size).w,d0
000023FE                            
000023FE                            	@decolour2:
000023FE 6100                       		bsr.s	FadeOut_DecColour
00002400 51C8 FFFC                  		dbf	d0,@decolour2
00002404 4E75                       		rts	
00002406                            ; End of function FadeOut_ToBlack
00002406                            
00002406                            
00002406                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002406                            
00002406                            
00002406                            FadeOut_DecColour:
00002406                            @dered:
00002406 3410                       		move.w	(a0),d2
00002408 6700                       		beq.s	@next
0000240A 3202                       		move.w	d2,d1
0000240C 0241 000E                  		andi.w	#$E,d1
00002410 6700                       		beq.s	@degreen
00002412 5558                       		subq.w	#2,(a0)+	; decrease red value
00002414 4E75                       		rts	
00002416                            ; ===========================================================================
00002416                            
00002416                            @degreen:
00002416 3202                       		move.w	d2,d1
00002418 0241 00E0                  		andi.w	#$E0,d1
0000241C 6700                       		beq.s	@deblue
0000241E 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
00002422 4E75                       		rts	
00002424                            ; ===========================================================================
00002424                            
00002424                            @deblue:
00002424 3202                       		move.w	d2,d1
00002426 0241 0E00                  		andi.w	#$E00,d1
0000242A 6700                       		beq.s	@next
0000242C 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
00002430 4E75                       		rts	
00002432                            ; ===========================================================================
00002432                            
00002432                            @next:
00002432 5448                       		addq.w	#2,a0
00002434 4E75                       		rts	
00002436                            ; End of function FadeOut_DecColour
00002436                            
00002436                            ; ---------------------------------------------------------------------------
00002436                            ; Subroutine to	fade in from white (Special Stage)
00002436                            ; ---------------------------------------------------------------------------
00002436                            
00002436                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002436                            
00002436                            
00002436                            PaletteWhiteIn:
00002436 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
0000243C 7000                       		moveq	#0,d0
0000243E 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002442 1038 F626                  		move.b	(v_pfade_start).w,d0
00002446 D0C0                       		adda.w	d0,a0
00002448 323C 0EEE                  		move.w	#cWhite,d1
0000244C 1038 F627                  		move.b	(v_pfade_size).w,d0
00002450                            
00002450                            	@fill:
00002450 30C1                       		move.w	d1,(a0)+
00002452 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with white
00002456                            
00002456 383C 0015                  		move.w	#$15,d4
0000245A                            
0000245A                            	@mainloop:
0000245A 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00002460 6100 0000                  		bsr.w	WaitForVBla
00002464 6100                       		bsr.s	WhiteIn_FromWhite
00002466 6100 F39C                  		bsr.w	RunPLC
0000246A 51CC FFEE                  		dbf	d4,@mainloop
0000246E 4E75                       		rts	
00002470                            ; End of function PaletteWhiteIn
00002470                            
00002470                            
00002470                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002470                            
00002470                            
00002470                            WhiteIn_FromWhite:
00002470 7000                       		moveq	#0,d0
00002472 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002476 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
0000247A 1038 F626                  		move.b	(v_pfade_start).w,d0
0000247E D0C0                       		adda.w	d0,a0
00002480 D2C0                       		adda.w	d0,a1
00002482 1038 F627                  		move.b	(v_pfade_size).w,d0
00002486                            
00002486                            	@decolour:
00002486 6100                       		bsr.s	WhiteIn_DecColour ; decrease colour
00002488 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
0000248C                            
0000248C 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
00002492 6600                       		bne.s	@exit		; if not, branch
00002494 7000                       		moveq	#0,d0
00002496 41F8 FA80                  		lea	(v_pal_water).w,a0
0000249A 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
0000249E 1038 F626                  		move.b	(v_pfade_start).w,d0
000024A2 D0C0                       		adda.w	d0,a0
000024A4 D2C0                       		adda.w	d0,a1
000024A6 1038 F627                  		move.b	(v_pfade_size).w,d0
000024AA                            
000024AA                            	@decolour2:
000024AA 6100                       		bsr.s	WhiteIn_DecColour
000024AC 51C8 FFFC                  		dbf	d0,@decolour2
000024B0                            
000024B0                            	@exit:
000024B0 4E75                       		rts	
000024B2                            ; End of function WhiteIn_FromWhite
000024B2                            
000024B2                            
000024B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000024B2                            
000024B2                            
000024B2                            WhiteIn_DecColour:
000024B2                            @deblue:
000024B2 3419                       		move.w	(a1)+,d2
000024B4 3610                       		move.w	(a0),d3
000024B6 B642                       		cmp.w	d2,d3
000024B8 6700                       		beq.s	@next
000024BA 3203                       		move.w	d3,d1
000024BC 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
000024C0 6500                       		blo.s	@degreen
000024C2 B242                       		cmp.w	d2,d1
000024C4 6500                       		blo.s	@degreen
000024C6 30C1                       		move.w	d1,(a0)+
000024C8 4E75                       		rts	
000024CA                            ; ===========================================================================
000024CA                            
000024CA                            @degreen:
000024CA 3203                       		move.w	d3,d1
000024CC 0441 0020                  		subi.w	#$20,d1		; decrease green value
000024D0 6500                       		blo.s	@dered
000024D2 B242                       		cmp.w	d2,d1
000024D4 6500                       		blo.s	@dered
000024D6 30C1                       		move.w	d1,(a0)+
000024D8 4E75                       		rts	
000024DA                            ; ===========================================================================
000024DA                            
000024DA                            @dered:
000024DA 5558                       		subq.w	#2,(a0)+	; decrease red value
000024DC 4E75                       		rts	
000024DE                            ; ===========================================================================
000024DE                            
000024DE                            @next:
000024DE 5448                       		addq.w	#2,a0
000024E0 4E75                       		rts	
000024E2                            ; End of function WhiteIn_DecColour
000024E2                            
000024E2                            ; ---------------------------------------------------------------------------
000024E2                            ; Subroutine to fade to white (Special Stage)
000024E2                            ; ---------------------------------------------------------------------------
000024E2                            
000024E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000024E2                            
000024E2                            
000024E2                            PaletteWhiteOut:
000024E2 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
000024E8 383C 0015                  		move.w	#$15,d4
000024EC                            
000024EC                            	@mainloop:
000024EC 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
000024F2 6100 0000                  		bsr.w	WaitForVBla
000024F6 6100                       		bsr.s	WhiteOut_ToWhite
000024F8 6100 F30A                  		bsr.w	RunPLC
000024FC 51CC FFEE                  		dbf	d4,@mainloop
00002500 4E75                       		rts	
00002502                            ; End of function PaletteWhiteOut
00002502                            
00002502                            
00002502                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002502                            
00002502                            
00002502                            WhiteOut_ToWhite:
00002502 7000                       		moveq	#0,d0
00002504 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002508 1038 F626                  		move.b	(v_pfade_start).w,d0
0000250C D0C0                       		adda.w	d0,a0
0000250E 1038 F627                  		move.b	(v_pfade_size).w,d0
00002512                            
00002512                            	@addcolour:
00002512 6100                       		bsr.s	WhiteOut_AddColour
00002514 51C8 FFFC                  		dbf	d0,@addcolour
00002518                            
00002518 7000                       		moveq	#0,d0
0000251A 41F8 FA80                  		lea	(v_pal_water).w,a0
0000251E 1038 F626                  		move.b	(v_pfade_start).w,d0
00002522 D0C0                       		adda.w	d0,a0
00002524 1038 F627                  		move.b	(v_pfade_size).w,d0
00002528                            
00002528                            	@addcolour2:
00002528 6100                       		bsr.s	WhiteOut_AddColour
0000252A 51C8 FFFC                  		dbf	d0,@addcolour2
0000252E 4E75                       		rts	
00002530                            ; End of function WhiteOut_ToWhite
00002530                            
00002530                            
00002530                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002530                            
00002530                            
00002530                            WhiteOut_AddColour:
00002530                            @addred:
00002530 3410                       		move.w	(a0),d2
00002532 0C42 0EEE                  		cmpi.w	#cWhite,d2
00002536 6700                       		beq.s	@next
00002538 3202                       		move.w	d2,d1
0000253A 0241 000E                  		andi.w	#$E,d1
0000253E 0C41 000E                  		cmpi.w	#cRed,d1
00002542 6700                       		beq.s	@addgreen
00002544 5458                       		addq.w	#2,(a0)+	; increase red value
00002546 4E75                       		rts	
00002548                            ; ===========================================================================
00002548                            
00002548                            @addgreen:
00002548 3202                       		move.w	d2,d1
0000254A 0241 00E0                  		andi.w	#$E0,d1
0000254E 0C41 00E0                  		cmpi.w	#cGreen,d1
00002552 6700                       		beq.s	@addblue
00002554 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00002558 4E75                       		rts	
0000255A                            ; ===========================================================================
0000255A                            
0000255A                            @addblue:
0000255A 3202                       		move.w	d2,d1
0000255C 0241 0E00                  		andi.w	#$E00,d1
00002560 0C41 0E00                  		cmpi.w	#cBlue,d1
00002564 6700                       		beq.s	@next
00002566 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
0000256A 4E75                       		rts	
0000256C                            ; ===========================================================================
0000256C                            
0000256C                            @next:
0000256C 5448                       		addq.w	#2,a0
0000256E 4E75                       		rts	
00002570                            ; End of function WhiteOut_AddColour
00002570                            
00002570                            ; ---------------------------------------------------------------------------
00002570                            ; Palette cycling routine - Sega logo
00002570                            ; ---------------------------------------------------------------------------
00002570                            
00002570                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002570                            
00002570                            
00002570                            PalCycle_Sega:
00002570 4A38 F635                  		tst.b	(v_pcyc_time+1).w
00002574 6600                       		bne.s	loc_206A
00002576 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
0000257A 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00002580 7205                       		moveq	#5,d1
00002582 3038 F632                  		move.w	(v_pcyc_num).w,d0
00002586                            
00002586                            loc_2020:
00002586 6A00                       		bpl.s	loc_202A
00002588 5448                       		addq.w	#2,a0
0000258A 5341                       		subq.w	#1,d1
0000258C 5440                       		addq.w	#2,d0
0000258E 60F6                       		bra.s	loc_2020
00002590                            ; ===========================================================================
00002590                            
00002590                            loc_202A:
00002590 3400                       		move.w	d0,d2
00002592 0242 001E                  		andi.w	#$1E,d2
00002596 6600                       		bne.s	loc_2034
00002598 5440                       		addq.w	#2,d0
0000259A                            
0000259A                            loc_2034:
0000259A 0C40 0060                  		cmpi.w	#$60,d0
0000259E 6400                       		bhs.s	loc_203E
000025A0 3398 0000                  		move.w	(a0)+,(a1,d0.w)
000025A4                            
000025A4                            loc_203E:
000025A4 5440                       		addq.w	#2,d0
000025A6 51C9 FFE8                  		dbf	d1,loc_202A
000025AA                            
000025AA 3038 F632                  		move.w	(v_pcyc_num).w,d0
000025AE 5440                       		addq.w	#2,d0
000025B0 3400                       		move.w	d0,d2
000025B2 0242 001E                  		andi.w	#$1E,d2
000025B6 6600                       		bne.s	loc_2054
000025B8 5440                       		addq.w	#2,d0
000025BA                            
000025BA                            loc_2054:
000025BA 0C40 0064                  		cmpi.w	#$64,d0
000025BE 6D00                       		blt.s	loc_2062
000025C0 31FC 0401 F634             		move.w	#$401,(v_pcyc_time).w
000025C6 70F4                       		moveq	#-$C,d0
000025C8                            
000025C8                            loc_2062:
000025C8 31C0 F632                  		move.w	d0,(v_pcyc_num).w
000025CC 7001                       		moveq	#1,d0
000025CE 4E75                       		rts	
000025D0                            ; ===========================================================================
000025D0                            
000025D0                            loc_206A:
000025D0 5338 F634                  		subq.b	#1,(v_pcyc_time).w
000025D4 6A00                       		bpl.s	loc_20BC
000025D6 11FC 0004 F634             		move.b	#4,(v_pcyc_time).w
000025DC 3038 F632                  		move.w	(v_pcyc_num).w,d0
000025E0 0640 000C                  		addi.w	#$C,d0
000025E4 0C40 0030                  		cmpi.w	#$30,d0
000025E8 6500                       		blo.s	loc_2088
000025EA 7000                       		moveq	#0,d0
000025EC 4E75                       		rts	
000025EE                            ; ===========================================================================
000025EE                            
000025EE                            loc_2088:
000025EE 31C0 F632                  		move.w	d0,(v_pcyc_num).w
000025F2 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
000025F8 41F0 0000                  		lea	(a0,d0.w),a0
000025FC 43F8 FB04                  		lea	(v_pal_dry+$04).w,a1
00002600 22D8                       		move.l	(a0)+,(a1)+
00002602 22D8                       		move.l	(a0)+,(a1)+
00002604 3298                       		move.w	(a0)+,(a1)
00002606 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
0000260A 7000                       		moveq	#0,d0
0000260C 722C                       		moveq	#$2C,d1
0000260E                            
0000260E                            loc_20A8:
0000260E 3400                       		move.w	d0,d2
00002610 0242 001E                  		andi.w	#$1E,d2
00002614 6600                       		bne.s	loc_20B2
00002616 5440                       		addq.w	#2,d0
00002618                            
00002618                            loc_20B2:
00002618 3390 0000                  		move.w	(a0),(a1,d0.w)
0000261C 5440                       		addq.w	#2,d0
0000261E 51C9 FFEE                  		dbf	d1,loc_20A8
00002622                            
00002622                            loc_20BC:
00002622 7001                       		moveq	#1,d0
00002624 4E75                       		rts	
00002626                            ; End of function PalCycle_Sega
00002626                            
00002626                            ; ===========================================================================
00002626                            
00002626                            Pal_Sega1:	incbin	"palette\Sega1.bin"
00002632                            Pal_Sega2:	incbin	"palette\Sega2.bin"
00002662                            
00002662                            ; ---------------------------------------------------------------------------
00002662                            ; Subroutines to load palettes
00002662                            
00002662                            ; input:
00002662                            ;	d0 = index number for palette
00002662                            ; ---------------------------------------------------------------------------
00002662                            
00002662                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002662                            
00002662                            
00002662                            ; ---------------------------------------------------------------------------
00002662                            ; Subroutines to load pallets
00002662                            ; ---------------------------------------------------------------------------
00002662                            
00002662                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002662                            
00002662                            PalLoad1:
00002662 1238 FE11                  		move.b ($FFFFFE11),d1
00002666 43F9 0000 0000             		lea (PalPointers).l,a1
0000266C 0C01 0000                  		cmp.b #0,d1
00002670 6700 0000                  		beq.w PalLoad1_Continue
00002674 43F9 0000 0000             		lea (PalPointers2).l,a1
0000267A 0C01 0001                  		cmp.b #1,d1
0000267E 6700 0000                  		beq.w PalLoad1_Continue
00002682 43F9 0000 0000             		lea (PalPointers3).l,a1
00002688                            
00002688                            PalLoad1_Continue:
00002688 E748                       		lsl.w #3,d0
0000268A D2C0                       		adda.w d0,a1
0000268C 2459                       		movea.l (a1)+,a2
0000268E 3659                       		movea.w (a1)+,a3
00002690 D6FC 0080                  		adda.w #$80,a3
00002694 3E19                       		move.w (a1)+,d7
00002696                            
00002696                            loc_2110:
00002696 26DA                       		move.l (a2)+,(a3)+
00002698 51CF FFFC                  		dbf d7,loc_2110
0000269C 4E75                       		rts
0000269E                             ; End of function PalLoad1
0000269E                            
0000269E                            
0000269E                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000269E                            
0000269E                            PalLoad2:
0000269E 1238 FE11                  		move.b ($FFFFFE11),d1
000026A2 43F9 0000 0000             		lea (PalPointers).l,a1
000026A8 0C01 0000                  		cmp.b #0,d1
000026AC 6700 0000                  		beq.w PalLoad2_Continue
000026B0 43F9 0000 0000             		lea (PalPointers2).l,a1
000026B6 0C01 0001                  		cmp.b #1,d1
000026BA 6700 0000                  		beq.w PalLoad2_Continue
000026BE 43F9 0000 0000             		lea (PalPointers3).l,a1
000026C4                            
000026C4                            
000026C4                            PalLoad2_Continue:
000026C4 E748                       		lsl.w #3,d0
000026C6 D2C0                       		adda.w d0,a1
000026C8 2459                       		movea.l (a1)+,a2
000026CA 3659                       		movea.w (a1)+,a3
000026CC 3E19                       		move.w (a1)+,d7
000026CE                            
000026CE                            loc_2128:
000026CE 26DA                       		move.l (a2)+,(a3)+
000026D0 51CF FFFC                  		dbf d7,loc_2128
000026D4 4E75                       		rts
000026D6                            ; End of function PalLoad2
000026D6                            
000026D6                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
000026D6                            
000026D6                            
000026D6                            PalLoad_Loop: ;Quick load - TIS
000026D6                                    
000026D6 34D9                               move.w    (a1)+,(a2)+              ;Copy pallete data to RAM
000026D8 51C8 FFFC                          dbf    d0,PalLoad_Loop               ;Loop d0 (length)
000026DC 4E75                               rts
000026DE                            
000026DE                            ; ---------------------------------------------------------------------------
000026DE                            ; Underwater pallet loading subroutine
000026DE                            ; ---------------------------------------------------------------------------
000026DE                            
000026DE                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000026DE                            
000026DE                            PalLoad3_Water:
000026DE 1238 FE11                  		move.b ($FFFFFE11),d1
000026E2 43F9 0000 0000             		lea (PalPointers).l,a1
000026E8 0C01 0000                  		cmp.b #0,d1
000026EC 6700 0000                  		beq.w PalLoad3_Continue
000026F0 43F9 0000 0000             		lea (PalPointers2).l,a1
000026F6 0C01 0001                  		cmp.b #1,d1
000026FA 6700 0000                  		beq.w PalLoad3_Continue
000026FE 43F9 0000 0000             		lea (PalPointers3).l,a1
00002704                            
00002704                            PalLoad3_Continue:
00002704 E748                       		lsl.w #3,d0
00002706 D2C0                       		adda.w d0,a1
00002708 2459                       		movea.l (a1)+,a2
0000270A 3659                       		movea.w (a1)+,a3
0000270C 96FC 0080                  		suba.w #$80,a3
00002710 3E19                       		move.w (a1)+,d7
00002712                            
00002712                            loc_2144:
00002712 26DA                       		move.l (a2)+,(a3)+
00002714 51CF FFFC                  		dbf d7,loc_2144
00002718 4E75                       		rts
0000271A                            ; End of function PalLoad3_Water
0000271A                            
0000271A                            
0000271A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000271A                            
0000271A                            
0000271A                            PalLoad4_Water:
0000271A 1238 FE11                  		move.b ($FFFFFE11),d1
0000271E 43F9 0000 0000             		lea (PalPointers).l,a1
00002724 0C01 0000                  		cmp.b #0,d1
00002728 6700 0000                  		beq.w PalLoad4_Continue
0000272C 43F9 0000 0000             		lea (PalPointers2).l,a1
00002732 0C01 0001                  		cmp.b #1,d1
00002736 6700 0000                  		beq.w PalLoad4_Continue
0000273A 43F9 0000 0000             		lea (PalPointers3).l,a1
00002740                            
00002740                            PalLoad4_Continue:
00002740 E748                       		lsl.w #3,d0
00002742 D2C0                       		adda.w d0,a1
00002744 2459                       		movea.l (a1)+,a2
00002746 3659                       		movea.w (a1)+,a3
00002748 96FC 0100                  		suba.w #$100,a3
0000274C 3E19                       		move.w (a1)+,d7
0000274E                            loc_2160:
0000274E 26DA                       		move.l (a2)+,(a3)+
00002750 51CF FFFC                  		dbf d7,loc_2160
00002754 4E75                       		rts
00002756                             ; End of function PalLoad4_Water
00002756                            
00002756                            ; ===========================================================================
00002756                            
00002756                            		include	"_inc\Palette Pointers.asm"
00002756                            ; ---------------------------------------------------------------------------
00002756                            ; Palette pointers
00002756                            ; ---------------------------------------------------------------------------
00002756                            
00002756                            palp:	macro paladdress,ramaddress,colors
00002756                            	dc.l paladdress
00002756                            	dc.w ramaddress, (colors>>1)-1
00002756                            	endm
00002756                            
00002756                            PalPointers:
00002756                            
00002756                            ; palette address, RAM address, colors
00002756                            
00002756 0000 0000 FB00 001F        ptr_Pal_SegaBG:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
0000275E 0000 0000 FB00 001F        ptr_Pal_Title:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002766 0000 0000 FB00 001F        ptr_Pal_LevelSel:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
0000276E 0000 0000 FB00 0007        ptr_Pal_Sonic:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002776                            Pal_Levels:
00002776 0000 0000 FB20 0017        ptr_Pal_GHZ:		palp	Pal_GHZ,v_pal_dry+$20, $30		; 4 - GHZ
0000277E 0000 0000 FB20 0017        ptr_Pal_LZ:		palp	Pal_LZ,v_pal_dry+$20,$30		; 5 - LZ
00002786 0000 0000 FB20 0017        ptr_Pal_MZ:		palp	Pal_MZ,v_pal_dry+$20,$30		; 6 - MZ
0000278E 0000 0000 FB20 0017        ptr_Pal_SLZ:		palp	Pal_SLZ,v_pal_dry+$20,$30		; 7 - SLZ
00002796 0000 0000 FB20 0017        ptr_Pal_SYZ:		palp	Pal_SYZ,v_pal_dry+$20,$30		; 8 - SYZ
0000279E 0000 0000 FB20 0017        ptr_Pal_SBZ1:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
000027A6 0000 0000 FB00 001F        ptr_Pal_Special:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
000027AE 0000 0000 FB00 001F        ptr_Pal_LZWater:	palp	Pal_LZWater,v_pal_dry,$40		; $B (11) - LZ underwater
000027B6 0000 0000 FB20 0017        ptr_Pal_SBZ3:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
000027BE 0000 0000 FB00 001F        ptr_Pal_SBZ3Water:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
000027C6 0000 0000 FB20 0017        ptr_Pal_SBZ2:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
000027CE 0000 0000 FB00 0007        ptr_Pal_LZSonWater:	palp	Pal_LZSonWater,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
000027D6 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
000027DE 0000 0000 FB00 001F        ptr_Pal_SSResult:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
000027E6 0000 0000 FB00 000F        ptr_Pal_Continue:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
000027EE 0000 0000 FB00 001F        ptr_Pal_Options:		palp	Pal_Options,v_pal_dry,$40		; $14 (20) - options screen
000027F6 0000 0000 FB00 001F        ptr_Pal_Ending2:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
000027FE 0000 0000 FB00 001F        ptr_Pal_Ending:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
00002806 0000 0000 FB00 0007        ptr_Pal_Sonic2:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (20) - Sonic (Sonic 1)
0000280E 0000 0000 FB00 0007        ptr_Pal_Sonic3:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (21) - Sonic (Beta)
00002816 0000 0000 FB00 0007        ptr_Pal_Sonic4:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (22) - Sonic (Midnight)
0000281E 0000 0000 FB00 0007        ptr_Pal_Sonic5:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (23) - Sonic (C2)
00002826 0000 0000 FB00 0007        ptr_Pal_Sonic6:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (24) - Sonic (Crackers)
0000282E 0000 0000 FB00 0007        ptr_Pal_Sonic7:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (25) - Sonic (RHS)
00002836 0000 0000 FB00 0007        ptr_Pal_Sonic8:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (26) - Sonic (Socket)
0000283E 0000 0000 FB00 0007        ptr_Pal_Sonic9:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (27) - Sonic (Cringe)
00002846 0000 0000 FB00 0007        ptr_Pal_Sonic10:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
0000284E 0000 0000 FB00 0007        ptr_Pal_Sonic11:		palp	Pal_Sonic11,v_pal_dry,$10		; $1E (29) - Sonic (DeltaWooloo)
00002856 0000 0000 FB00 0007        ptr_Pal_SonWater2:		palp	Pal_SonWater2,v_pal_dry,$10		; $1F (30) - Sonic Underwater (Sonic 1)
0000285E 0000 0000 FB00 0007        ptr_Pal_SonWater3:		palp	Pal_SonWater3,v_pal_dry,$10		; $20 (31) - Sonic Underwater (Beta)
00002866 0000 0000 FB00 0007        ptr_Pal_SonWater4:		palp	Pal_SonWater4,v_pal_dry,$10		; $21 (32) - Sonic Underwater (Midnight)
0000286E 0000 0000 FB00 0007        ptr_Pal_SonWater5:		palp	Pal_SonWater5,v_pal_dry,$10		; $22 (33) - Sonic Underwater (C2)
00002876 0000 0000 FB00 0007        ptr_Pal_SonWater6:		palp	Pal_SonWater6,v_pal_dry,$10		; $23 (34) - Sonic Underwater (Crackers)
0000287E 0000 0000 FB00 0007        ptr_Pal_SonWater7:		palp	Pal_SonWater7,v_pal_dry,$10		; $24 (35) - Sonic Underwater (RHS)
00002886 0000 0000 FB00 0007        ptr_Pal_SonWater8:		palp	Pal_SonWater8,v_pal_dry,$10		; $25 (36) - Sonic Underwater (Socket)
0000288E 0000 0000 FB00 0007        ptr_Pal_SonWater9:		palp	Pal_SonWater9,v_pal_dry,$10		; $26 (37) - Sonic Underwater (Cringe)
00002896 0000 0000 FB00 0007        ptr_Pal_SonWater10:		palp	Pal_SonWater10,v_pal_dry,$10		; $27 (38) - Sonic Underwater (Darker)
0000289E 0000 0000 FB00 0007        ptr_Pal_SonWater11:		palp	Pal_SonWater11,v_pal_dry,$10		; $28 (39) - Sonic Underwater (Darker)
000028A6 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $28 (40) - Sonic Underwater (Sonic 1)
000028AE 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $29 (41) - Sonic Underwater (Beta)
000028B6 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $2A (42) - Sonic Underwater (Midnight)
000028BE 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $2B (43) - Sonic Underwater (C2)
000028C6 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $2C (44) - Sonic Underwater (Crackers)
000028CE 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $2D (45) - Sonic Underwater (RHS)
000028D6 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $2E (46) - Sonic Underwater (Socket)
000028DE 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $2F (47) - Sonic Underwater (Cringe)
000028E6 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $30 (48) - Sonic Underwater (Darker)
000028EE 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat11:	palp	Pal_SBZ3SonWat11,v_pal_dry,$10	; $31 (49) - Sonic Underwater (DeltaWooloo)
000028F6                            			even
000028F6                            
000028F6                            PalPointers2:
000028F6                            
000028F6                            ; palette address, RAM address, colors
000028F6                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
000028F6 0000 0000 FB00 001F        ptr_Pal_SegaBG_D:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
000028FE 0000 0000 FB00 001F        ptr_Pal_Title_D:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002906 0000 0000 FB00 001F        ptr_Pal_LevelSel_D:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
0000290E 0000 0000 FB00 0007        ptr_Pal_SonicD:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002916                            Pal_Levels_2:
00002916 0000 0000 FB20 0017        ptr_Pal_GHZ2:		palp	Pal_GHZ2,v_pal_dry+$20, $30		; 4 - GHZ
0000291E 0000 0000 FB20 0017        ptr_Pal_LZ2:		palp	Pal_LZ2,v_pal_dry+$20,$30		; 5 - LZ
00002926 0000 0000 FB20 0017        ptr_Pal_MZ2:		palp	Pal_MZ2,v_pal_dry+$20,$30		; 6 - MZ
0000292E 0000 0000 FB20 0017        ptr_Pal_SLZ2:		palp	Pal_SLZ2,v_pal_dry+$20,$30		; 7 - SLZ
00002936 0000 0000 FB20 0017        ptr_Pal_SYZ2:		palp	Pal_SYZ2,v_pal_dry+$20,$30		; 8 - SYZ
0000293E 0000 0000 FB20 0017        ptr_Pal_SBZ1_D:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002946 0000 0000 FB00 001F        ptr_Pal_Special_D:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
0000294E 0000 0000 FB00 001F        ptr_Pal_LZWatr2:	palp	Pal_LZWatr2,v_pal_dry,$40		; $B (11) - LZ underwater
00002956 0000 0000 FB20 0017        ptr_Pal_SBZ3_D:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
0000295E 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_D:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002966 0000 0000 FB20 0017        ptr_Pal_SBZ2_D:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
0000296E 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
00002976 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_D:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
0000297E 0000 0000 FB00 001F        ptr_Pal_SSResult_D:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002986 0000 0000 FB00 000F        ptr_Pal_Continue_D:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
0000298E 0000 0000 FB00 001F        ptr_Pal_Options_D:		palp	Pal_Options,v_pal_dry,$40		; $13 (20) - options screen
00002996 0000 0000 FB00 001F        ptr_Pal_Ending2_D:		palp	Pal_Ending,v_pal_dry,$40		; $14 (21) - ending sequence
0000299E 0000 0000 FB00 001F        ptr_Pal_Ending_D:		palp	Pal_Ending,v_pal_dry,$40		; $14 (21) - ending sequence
000029A6 0000 0000 FB00 0007        ptr_Pal_Sonic2_D:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
000029AE 0000 0000 FB00 0007        ptr_Pal_Sonic3_D:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
000029B6 0000 0000 FB00 0007        ptr_Pal_Sonic4_D:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
000029BE 0000 0000 FB00 0007        ptr_Pal_Sonic5_D:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
000029C6 0000 0000 FB00 0007        ptr_Pal_Sonic6_D:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
000029CE 0000 0000 FB00 0007        ptr_Pal_Sonic7_D:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
000029D6 0000 0000 FB00 0007        ptr_Pal_Sonic8_D:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
000029DE 0000 0000 FB00 0007        ptr_Pal_Sonic9_D:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
000029E6 0000 0000 FB00 0007        ptr_Pal_Sonic10_D:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
000029EE 0000 0000 FB00 0007        ptr_Pal_Sonic11_D:		palp	Pal_Sonic11,v_pal_dry,$10		; $1E (29) - Sonic (DeltaWooloo)
000029F6 0000 0000 FB00 0007        ptr_Pal_SonWater2_D:		palp	Pal_SonWater2,v_pal_dry,$10		; $1F (30) - Sonic Underwater (Sonic 1)
000029FE 0000 0000 FB00 0007        ptr_Pal_SonWater3_D:		palp	Pal_SonWater3,v_pal_dry,$10		; $20 (31) - Sonic Underwater (Beta)
00002A06 0000 0000 FB00 0007        ptr_Pal_SonWater4_D:		palp	Pal_SonWater4,v_pal_dry,$10		; $21 (32) - Sonic Underwater (Midnight)
00002A0E 0000 0000 FB00 0007        ptr_Pal_SonWater5_D:		palp	Pal_SonWater5,v_pal_dry,$10		; $22 (33) - Sonic Underwater (C2)
00002A16 0000 0000 FB00 0007        ptr_Pal_SonWater6_D:		palp	Pal_SonWater6,v_pal_dry,$10		; $23 (34) - Sonic Underwater (Crackers)
00002A1E 0000 0000 FB00 0007        ptr_Pal_SonWater7_D:		palp	Pal_SonWater7,v_pal_dry,$10		; $24 (35) - Sonic Underwater (RHS)
00002A26 0000 0000 FB00 0007        ptr_Pal_SonWater8_D:		palp	Pal_SonWater8,v_pal_dry,$10		; $25 (36) - Sonic Underwater (Socket)
00002A2E 0000 0000 FB00 0007        ptr_Pal_SonWater9_D:		palp	Pal_SonWater9,v_pal_dry,$10		; $26 (37) - Sonic Underwater (Cringe)
00002A36 0000 0000 FB00 0007        ptr_Pal_SonWater10_D:		palp	Pal_SonWater10,v_pal_dry,$10		; $27 (38) - Sonic Underwater (Darker)
00002A3E 0000 0000 FB00 0007        ptr_Pal_SonWater11_D:		palp	Pal_SonWater11,v_pal_dry,$10		; $28 (39) - Sonic Underwater (Darker)
00002A46 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2_D:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $28 (40) - Sonic Underwater (Sonic 1)
00002A4E 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3_D:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $29 (41) - Sonic Underwater (Beta)
00002A56 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4_D:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $2A (42) - Sonic Underwater (Midnight)
00002A5E 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5_D:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $2B (43) - Sonic Underwater (C2)
00002A66 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6_D:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $2C (44) - Sonic Underwater (Crackers)
00002A6E 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7_D:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $2D (45) - Sonic Underwater (RHS)
00002A76 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8_D:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $2E (46) - Sonic Underwater (Socket)
00002A7E 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9_D:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $2F (47) - Sonic Underwater (Cringe)
00002A86 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10_D:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $30 (48) - Sonic Underwater (Darker)
00002A8E 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat11_D:	palp	Pal_SBZ3SonWat11,v_pal_dry,$10	; $31 (49) - Sonic Underwater (DeltaWooloo)
00002A96                            			even
00002A96                            			
00002A96                            PalPointers3:
00002A96                            			
00002A96                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
00002A96 0000 0000 FB00 001F        ptr_Pal_SegaBG_E:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
00002A9E 0000 0000 FB00 001F        ptr_Pal_Title_E:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002AA6 0000 0000 FB00 001F        ptr_Pal_LevelSel_E:		palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002AAE 0000 0000 FB00 0007        ptr_Pal_SonicE:			palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002AB6                            Pal_Levels_3:
00002AB6 0000 0000 FB20 0017        ptr_Pal_GHZ3:		palp	Pal_GHZ3,v_pal_dry+$20, $30		; 4 - GHZ
00002ABE 0000 0000 FB20 0017        ptr_Pal_LZ3:		palp	Pal_LZ3,v_pal_dry+$20,$30		; 5 - LZ
00002AC6 0000 0000 FB20 0017        ptr_Pal_MZ3:		palp	Pal_MZ3,v_pal_dry+$20,$30		; 6 - MZ
00002ACE 0000 0000 FB20 0017        ptr_Pal_SLZ3:		palp	Pal_SLZ3,v_pal_dry+$20,$30		; 7 - SLZ
00002AD6 0000 0000 FB20 0017        ptr_Pal_SYZ3:		palp	Pal_SYZ3,v_pal_dry+$20,$30		; 8 - SYZ
00002ADE 0000 0000 FB20 0017        ptr_Pal_SBZ1_E:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002AE6 0000 0000 FB00 001F        ptr_Pal_Special_E:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
00002AEE 0000 0000 FB00 001F        ptr_Pal_LZWatr3:	palp	Pal_LZWatr3,v_pal_dry,$40		; $B (11) - LZ underwater
00002AF6 0000 0000 FB20 0017        ptr_Pal_SBZ3_E:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002AFE 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_E:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002B06 0000 0000 FB20 0017        ptr_Pal_SBZ2_E:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002B0E 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2E:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
00002B16 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_E:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
00002B1E 0000 0000 FB00 001F        ptr_Pal_SSResult_E:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002B26 0000 0000 FB00 000F        ptr_Pal_Continue_E:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002B2E 0000 0000 FB00 001F        ptr_Pal_Options_E:		palp	Pal_Options,v_pal_dry,$40		; $14 (21) - options screen
00002B36 0000 0000 FB00 001F        ptr_Pal_Ending2_E:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
00002B3E 0000 0000 FB00 001F        ptr_Pal_Ending_E:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
00002B46 0000 0000 FB00 0007        ptr_Pal_Sonic2_E:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
00002B4E 0000 0000 FB00 0007        ptr_Pal_Sonic3_E:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
00002B56 0000 0000 FB00 0007        ptr_Pal_Sonic4_E:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
00002B5E 0000 0000 FB00 0007        ptr_Pal_Sonic5_E:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
00002B66 0000 0000 FB00 0007        ptr_Pal_Sonic6_E:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
00002B6E 0000 0000 FB00 0007        ptr_Pal_Sonic7_E:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
00002B76 0000 0000 FB00 0007        ptr_Pal_Sonic8_E:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
00002B7E 0000 0000 FB00 0007        ptr_Pal_Sonic9_E:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
00002B86 0000 0000 FB00 0007        ptr_Pal_Sonic10_E:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
00002B8E 0000 0000 FB00 0007        ptr_Pal_Sonic11_E:		palp	Pal_Sonic11,v_pal_dry,$10		; $1E (29) - Sonic (DeltaWooloo)
00002B96 0000 0000 FB00 0007        ptr_Pal_SonWater2_E:		palp	Pal_SonWater2,v_pal_dry,$10		; $1F (30) - Sonic Underwater (Sonic 1)
00002B9E 0000 0000 FB00 0007        ptr_Pal_SonWater3_E:		palp	Pal_SonWater3,v_pal_dry,$10		; $20 (31) - Sonic Underwater (Beta)
00002BA6 0000 0000 FB00 0007        ptr_Pal_SonWater4_E:		palp	Pal_SonWater4,v_pal_dry,$10		; $21 (32) - Sonic Underwater (Midnight)
00002BAE 0000 0000 FB00 0007        ptr_Pal_SonWater5_E:		palp	Pal_SonWater5,v_pal_dry,$10		; $22 (33) - Sonic Underwater (C2)
00002BB6 0000 0000 FB00 0007        ptr_Pal_SonWater6_E:		palp	Pal_SonWater6,v_pal_dry,$10		; $23 (34) - Sonic Underwater (Crackers)
00002BBE 0000 0000 FB00 0007        ptr_Pal_SonWater7_E:		palp	Pal_SonWater7,v_pal_dry,$10		; $24 (35) - Sonic Underwater (RHS)
00002BC6 0000 0000 FB00 0007        ptr_Pal_SonWater8_E:		palp	Pal_SonWater8,v_pal_dry,$10		; $25 (36) - Sonic Underwater (Socket)
00002BCE 0000 0000 FB00 0007        ptr_Pal_SonWater9_E:		palp	Pal_SonWater9,v_pal_dry,$10		; $26 (37) - Sonic Underwater (Cringe)
00002BD6 0000 0000 FB00 0007        ptr_Pal_SonWater10_E:		palp	Pal_SonWater10,v_pal_dry,$10		; $27 (38) - Sonic Underwater (Darker)
00002BDE 0000 0000 FB00 0007        ptr_Pal_SonWater11_E:		palp	Pal_SonWater11,v_pal_dry,$10		; $28 (39) - Sonic Underwater (Darker)
00002BE6 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2_E:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $28 (40) - Sonic Underwater (Sonic 1)
00002BEE 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3_E:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $29 (41) - Sonic Underwater (Beta)
00002BF6 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4_E:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $2A (42) - Sonic Underwater (Midnight)
00002BFE 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5_E:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $2B (43) - Sonic Underwater (C2)
00002C06 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6_E:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $2C (44) - Sonic Underwater (Crackers)
00002C0E 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7_E:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $2D (45) - Sonic Underwater (RHS)
00002C16 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8_E:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $2E (46) - Sonic Underwater (Socket)
00002C1E 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9_E:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $2F (47) - Sonic Underwater (Cringe)
00002C26 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10_E:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $30 (48) - Sonic Underwater (Darker)
00002C2E 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat11_E:	palp	Pal_SBZ3SonWat11,v_pal_dry,$10	; $31 (49) - Sonic Underwater (DeltaWooloo)
00002C36                            			even
00002C36                            
00002C36                            
00002C36 =00000000                  palid_SegaBG:		equ (ptr_Pal_SegaBG-PalPointers)/8
00002C36 =00000001                  palid_Title:		equ (ptr_Pal_Title-PalPointers)/8
00002C36 =00000002                  palid_LevelSel:		equ (ptr_Pal_LevelSel-PalPointers)/8
00002C36 =00000003                  palid_Sonic:		equ (ptr_Pal_Sonic-PalPointers)/8
00002C36 =00000004                  palid_GHZ:		equ (ptr_Pal_GHZ-PalPointers)/8
00002C36 =00000005                  palid_LZ:		equ (ptr_Pal_LZ-PalPointers)/8
00002C36 =00000006                  palid_MZ:		equ (ptr_Pal_MZ-PalPointers)/8
00002C36 =00000007                  palid_SLZ:		equ (ptr_Pal_SLZ-PalPointers)/8
00002C36 =00000008                  palid_SYZ:		equ (ptr_Pal_SYZ-PalPointers)/8
00002C36 =00000009                  palid_SBZ1:		equ (ptr_Pal_SBZ1-PalPointers)/8
00002C36 =0000000A                  palid_Special:		equ (ptr_Pal_Special-PalPointers)/8
00002C36 =0000000B                  palid_LZWater:		equ (ptr_Pal_LZWater-PalPointers)/8
00002C36 =0000000C                  palid_SBZ3:		equ (ptr_Pal_SBZ3-PalPointers)/8
00002C36 =0000000D                  palid_SBZ3Water:	equ (ptr_Pal_SBZ3Water-PalPointers)/8
00002C36 =0000000E                  palid_SBZ2:		equ (ptr_Pal_SBZ2-PalPointers)/8
00002C36 =0000000F                  palid_LZSonWater:	equ (ptr_Pal_LZSonWater-PalPointers)/8
00002C36 =00000010                  palid_SBZ3SonWat:	equ (ptr_Pal_SBZ3SonWat-PalPointers)/8
00002C36 =00000011                  palid_SSResult:		equ (ptr_Pal_SSResult-PalPointers)/8
00002C36 =00000012                  palid_Continue:		equ (ptr_Pal_Continue-PalPointers)/8
00002C36 =00000013                  palid_Options:		equ (ptr_Pal_Options-PalPointers)/8
00002C36 =00000015                  palid_Ending2:		equ (ptr_Pal_Ending-PalPointers)/8
00002C36 =00000015                  palid_Ending:		equ (ptr_Pal_Ending-PalPointers)/8
00002C36 =00000004                  palid_GHZ2:		equ (ptr_Pal_GHZ-PalPointers)/8
00002C36 =00000005                  palid_LZ2:		equ (ptr_Pal_LZ-PalPointers)/8
00002C36 =00000006                  palid_MZ2:		equ (ptr_Pal_MZ-PalPointers)/8
00002C36 =00000007                  palid_SLZ2:		equ (ptr_Pal_SLZ-PalPointers)/8
00002C36 =00000008                  palid_SYZ2:		equ (ptr_Pal_SYZ-PalPointers)/8
00002C36 =0000003F                  palid_LZWatr2:		equ (ptr_Pal_LZWatr2-PalPointers)/8
00002C36 =0000000F                  palid_LZSonWatr2:	equ (ptr_Pal_LZSonWater-PalPointers)/8
00002C36 =0000006C                  palid_GHZ3:		equ (ptr_Pal_GHZ3-PalPointers)/8
00002C36 =0000006D                  palid_LZ3:		equ (ptr_Pal_LZ3-PalPointers)/8
00002C36 =0000006E                  palid_MZ3:		equ (ptr_Pal_MZ3-PalPointers)/8
00002C36 =0000006F                  palid_SLZ3:		equ (ptr_Pal_SLZ3-PalPointers)/8
00002C36 =00000070                  palid_SYZ3:		equ (ptr_Pal_SYZ3-PalPointers)/8
00002C36 =00000073                  palid_LZWatr3:		equ (ptr_Pal_LZWatr3-PalPointers)/8
00002C36 =0000000F                  palid_LZSonWatr3:	equ (ptr_Pal_LZSonWater-PalPointers)/8
00002C36 =00000016                  palid_Sonic2:		equ (ptr_Pal_Sonic2-PalPointers)/8
00002C36 =00000017                  palid_Sonic3:		equ (ptr_Pal_Sonic3-PalPointers)/8
00002C36 =00000018                  palid_Sonic4:		equ (ptr_Pal_Sonic4-PalPointers)/8
00002C36 =00000019                  palid_Sonic5:		equ (ptr_Pal_Sonic5-PalPointers)/8
00002C36 =0000001A                  palid_Sonic6:		equ (ptr_Pal_Sonic6-PalPointers)/8
00002C36 =0000001B                  palid_Sonic7:		equ (ptr_Pal_Sonic7-PalPointers)/8
00002C36 =0000001C                  palid_Sonic8:		equ (ptr_Pal_Sonic8-PalPointers)/8
00002C36 =0000001D                  palid_Sonic9:		equ (ptr_Pal_Sonic9-PalPointers)/8
00002C36 =0000001E                  palid_Sonic10:		equ (ptr_Pal_Sonic10-PalPointers)/8
00002C36 =0000001F                  palid_Sonic11:		equ (ptr_Pal_Sonic11-PalPointers)/8
00002C36 =00000020                  palid_SonWater2:		equ (ptr_Pal_SonWater2-PalPointers)/8
00002C36 =00000021                  palid_SonWater3:		equ (ptr_Pal_SonWater3-PalPointers)/8
00002C36 =00000022                  palid_SonWater4:		equ (ptr_Pal_SonWater4-PalPointers)/8
00002C36 =00000023                  palid_SonWater5:		equ (ptr_Pal_SonWater5-PalPointers)/8
00002C36 =00000024                  palid_SonWater6:		equ (ptr_Pal_SonWater6-PalPointers)/8
00002C36 =00000025                  palid_SonWater7:		equ (ptr_Pal_SonWater7-PalPointers)/8
00002C36 =00000026                  palid_SonWater8:		equ (ptr_Pal_SonWater8-PalPointers)/8
00002C36 =00000027                  palid_SonWater9:		equ (ptr_Pal_SonWater9-PalPointers)/8
00002C36 =00000028                  palid_SonWater10:		equ (ptr_Pal_SonWater10-PalPointers)/8
00002C36 =00000029                  palid_SonWater11:		equ (ptr_Pal_SonWater11-PalPointers)/8
00002C36 =0000002A                  palid_SBZ3SonWat2:		equ (ptr_Pal_SBZ3SonWat2-PalPointers)/8
00002C36 =0000002B                  palid_SBZ3SonWat3:		equ (ptr_Pal_SBZ3SonWat3-PalPointers)/8
00002C36 =0000002C                  palid_SBZ3SonWat4:		equ (ptr_Pal_SBZ3SonWat4-PalPointers)/8
00002C36 =0000002D                  palid_SBZ3SonWat5:		equ (ptr_Pal_SBZ3SonWat5-PalPointers)/8
00002C36 =0000002E                  palid_SBZ3SonWat6:		equ (ptr_Pal_SBZ3SonWat6-PalPointers)/8
00002C36 =0000002F                  palid_SBZ3SonWat7:		equ (ptr_Pal_SBZ3SonWat7-PalPointers)/8
00002C36 =00000030                  palid_SBZ3SonWat8:		equ (ptr_Pal_SBZ3SonWat8-PalPointers)/8
00002C36 =00000031                  palid_SBZ3SonWat9:		equ (ptr_Pal_SBZ3SonWat9-PalPointers)/8
00002C36 =00000032                  palid_SBZ3SonWat10:		equ (ptr_Pal_SBZ3SonWat10-PalPointers)/8
00002C36 =00000033                  palid_SBZ3SonWat11:		equ (ptr_Pal_SBZ3SonWat11-PalPointers)/8
00002C36 =00000033                  palid_SBZ3SonWat11:		equ (ptr_Pal_SBZ3SonWat11-PalPointers)/8
00002C36                            		
00002C36                            		;include	"_inc\Palette Pointers2.asm"
00002C36                            		
00002C36                            		;include	"_inc\Palette Pointers3.asm"
00002C36                            		
00002C36                            
00002C36                            ; ---------------------------------------------------------------------------
00002C36                            ; Palette data
00002C36                            ; ---------------------------------------------------------------------------
00002C36                            Pal_SegaBG:	incbin	"palette\Sega Background.bin"
00002CB6                            Pal_Title:	incbin	"palette\Title Screen.bin"
00002D36                            Pal_LevelSel:	incbin	"palette\Level Select.bin"
00002DB6                            Pal_Sonic:	incbin	"palette\Sonic Pal\01 Default.bin"
00002DD6                            Pal_GHZ:	incbin	"palette\Green Hill Zone.bin"
00002E36                            Pal_GHZ2:	incbin	"palette\Green Hill Zone2.bin"
00002E96                            Pal_GHZ3:	incbin	"palette\Green Hill Zone3.bin"
00002EF6                            Pal_LZ:		incbin	"palette\Labyrinth Zone.bin"
00002F56                            Pal_LZ2:	incbin	"palette\Labyrinth Zone2.bin"
00002FB6                            Pal_LZ3:	incbin	"palette\Labyrinth Zone3.bin"
00003016                            Pal_LZWater:	incbin	"palette\Labyrinth Zone Underwater.bin"
00003096                            Pal_LZWatr2:	incbin	"palette\Labyrinth Zone Underwater2.bin"
00003116                            Pal_LZWatr3:	incbin	"palette\Labyrinth Zone Underwater3.bin"
00003196                            Pal_MZ:		incbin	"palette\Marble Zone.bin"
000031F6                            Pal_MZ2:	incbin	"palette\Marble Zone2.bin"
00003256                            Pal_MZ3:	incbin	"palette\Marble Zone3.bin"
000032B6                            Pal_SLZ:	incbin	"palette\Star Light Zone.bin"
00003316                            Pal_SLZ2:	incbin	"palette\Star Light Zone2.bin"
00003376                            Pal_SLZ3:	incbin	"palette\Star Light Zone3.bin"
000033D6                            Pal_SYZ:	incbin	"palette\Spring Yard Zone.bin"
00003436                            Pal_SYZ2:	incbin	"palette\Spring Yard Zone2.bin"
00003496                            Pal_SYZ3:	incbin	"palette\Spring Yard Zone3.bin"
000034F6                            Pal_SBZ1:	incbin	"palette\SBZ Act 1.bin"
00003556                            Pal_SBZ2:	incbin	"palette\SBZ Act 2.bin"
000035B6                            Pal_Special:	incbin	"palette\Special Stage.bin"
00003636                            Pal_SBZ3:	incbin	"palette\SBZ Act 3.bin"
00003696                            Pal_SBZ3Water:	incbin	"palette\SBZ Act 3 Underwater.bin"
00003716                            Pal_LZSonWater:	incbin	"palette\Sonic - LZ Underwater.bin"
00003736                            Pal_LZSonWatr2:	incbin	"palette\Sonic - LZ2 Underwater.bin"
00003756                            Pal_SBZ3SonWat:	incbin	"palette\Sonic - SBZ3 Underwater.bin"
00003776                            Pal_SSResult:	incbin	"palette\Special Stage Results.bin"
000037F6                            Pal_Continue:	incbin	"palette\Special Stage Continue Bonus.bin"
00003836                            Pal_Ending:	incbin	"palette\Ending.bin"
000038B6                            Pal_Options:	incbin	"palette\Options.bin"
00003936                            Pal_Sonic2:	incbin	"palette\Sonic Pal\02 Sonic 1.bin"
00003956                            Pal_Sonic3:	incbin	"palette\Sonic Pal\03 Beta.bin"
00003976                            Pal_Sonic4:	incbin	"palette\Sonic Pal\04 Midnight.bin"
00003996                            Pal_Sonic5:	incbin	"palette\Sonic Pal\05 C2.bin"
000039B6                            Pal_Sonic6:	incbin	"palette\Sonic Pal\06 Clacker.bin"
000039D6                            Pal_Sonic7:	incbin	"palette\Sonic Pal\07 Red Hot.bin"
000039F6                            Pal_Sonic8:	incbin	"palette\Sonic Pal\08 Socket.bin"
00003A16                            Pal_Sonic9:	incbin	"palette\Sonic Pal\09 Cringe.bin"
00003A36                            Pal_Sonic10:	incbin	"palette\Sonic Pal\10 Dark.bin"
00003A56                            Pal_Sonic11:	incbin	"palette\Sonic Pal\11 DeltaWooloo.bin"
00003A76                            Pal_SonWater2:	incbin	"palette\Sonic Pal\02 Sonic 1 Underwater.bin"
00003A96                            Pal_SonWater3:	incbin	"palette\Sonic Pal\03 Beta Underwater.bin"
00003AB6                            Pal_SonWater4:	incbin	"palette\Sonic Pal\04 Midnight Underwater.bin"
00003AD6                            Pal_SonWater5:	incbin	"palette\Sonic Pal\05 C2 Underwater.bin"
00003AF6                            Pal_SonWater6:	incbin	"palette\Sonic Pal\06 Clacker Underwater.bin"
00003B16                            Pal_SonWater7:	incbin	"palette\Sonic Pal\07 Red Hot Underwater.bin"
00003B36                            Pal_SonWater8:	incbin	"palette\Sonic Pal\08 Socket Underwater.bin"
00003B56                            Pal_SonWater9:	incbin	"palette\Sonic Pal\09 Cringe Underwater.bin"
00003B76                            Pal_SonWater10:	incbin	"palette\Sonic Pal\10 Dark Underwater.bin"
00003B96                            Pal_SonWater11:	incbin	"palette\Sonic Pal\11 DeltaWooloo Underwater.bin"
00003BB6                            Pal_SBZ3SonWat2:	incbin	"palette\Sonic Pal\02 Sonic 1 SBZ3.bin"
00003BD6                            Pal_SBZ3SonWat3:	incbin	"palette\Sonic Pal\03 Beta SBZ3.bin"
00003BF6                            Pal_SBZ3SonWat4:	incbin	"palette\Sonic Pal\04 Midnight SBZ3.bin"
00003C16                            Pal_SBZ3SonWat5:	incbin	"palette\Sonic Pal\05 C2 SBZ3.bin"
00003C36                            Pal_SBZ3SonWat6:	incbin	"palette\Sonic Pal\06 Clacker SBZ3.bin"
00003C56                            Pal_SBZ3SonWat7:	incbin	"palette\Sonic Pal\07 Red Hot SBZ3.bin"
00003C76                            Pal_SBZ3SonWat8:	incbin	"palette\Sonic Pal\08 Socket SBZ3.bin"
00003C96                            Pal_SBZ3SonWat9:	incbin	"palette\Sonic Pal\09 Cringe SBZ3.bin"
00003CB6                            Pal_SBZ3SonWat10:	incbin	"palette\Sonic Pal\10 Dark SBZ3.bin"
00003CD6                            Pal_SBZ3SonWat11:	incbin	"palette\Sonic Pal\11 DeltaWooloo SBZ3.bin"
00003CF6                            ; ---------------------------------------------------------------------------
00003CF6                            ; Subroutine to	wait for VBlank routines to complete
00003CF6                            ; ---------------------------------------------------------------------------
00003CF6                            
00003CF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003CF6                            
00003CF6                            
00003CF6                            WaitForVBla:
00003CF6 46FC 2300                  		enable_ints
00003CFA                            
00003CFA                            	@wait:
00003CFA 4A38 F62A                  		tst.b	(v_vbla_routine).w ; has VBlank routine finished?
00003CFE 66FA                       		bne.s	@wait		; if not, branch
00003D00 4E75                       		rts	
00003D02                            ; End of function WaitForVBla
00003D02                            
00003D02                            		include	"_incObj\sub RandomNumber.asm"
00003D02                            ; ---------------------------------------------------------------------------
00003D02                            ; Subroutine to	generate a pseudo-random number	in d0
00003D02                            ; ---------------------------------------------------------------------------
00003D02                            
00003D02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003D02                            
00003D02                            
00003D02                            RandomNumber:
00003D02 2238 F636                  		move.l	(v_random).w,d1
00003D06 6600                       		bne.s	@scramble	; if d1 is not 0, branch
00003D08 223C 2A6D 365A             		move.l	#$2A6D365A,d1	; if d1 is 0, use seed number
00003D0E                            
00003D0E                            	@scramble:
00003D0E 2001                       		move.l	d1,d0
00003D10 E581                       		asl.l	#2,d1
00003D12 D280                       		add.l	d0,d1
00003D14 E781                       		asl.l	#3,d1
00003D16 D280                       		add.l	d0,d1
00003D18 3001                       		move.w	d1,d0
00003D1A 4841                       		swap	d1
00003D1C D041                       		add.w	d1,d0
00003D1E 3200                       		move.w	d0,d1
00003D20 4841                       		swap	d1
00003D22 21C1 F636                  		move.l	d1,(v_random).w
00003D26 4E75                       		rts	
00003D26 4E75                       		rts	
00003D28                            		include	"_incObj\sub CalcSine.asm"
00003D28                            ; ---------------------------------------------------------------------------
00003D28                            ; Subroutine calculate a sine
00003D28                            
00003D28                            ; input:
00003D28                            ;	d0 = angle
00003D28                            
00003D28                            ; output:
00003D28                            ;	d0 = sine
00003D28                            ;	d1 = cosine
00003D28                            ; ---------------------------------------------------------------------------
00003D28                            
00003D28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003D28                            
00003D28                            
00003D28                            CalcSine:
00003D28 0240 00FF                          andi.w  #$FF,d0
00003D2C 5040                               addq.w  #8,d0
00003D2E D040                               add.w   d0,d0
00003D30 323B 0000                          move.w  Sine_Data+($40*2)-16(pc,d0.w),d1
00003D34 303B 0000                          move.w  Sine_Data-16(pc,d0.w),d0
00003D38 4E75                               rts
00003D3A                            ; End of function CalcSine
00003D3A                            
00003D3A                            ; ===========================================================================
00003D3A                            
00003D3A                            Sine_Data:	incbin	"misc\sinewave.bin"	; values for a 360° sine wave
00003FBA                            
00003FBA                            ; ===========================================================================
00003FBA                            ; ===========================================================================
00003FBA                            		include	"_incObj\sub CalcAngle.asm"
00003FBA                            ; ---------------------------------------------------------------------------
00003FBA                            ; Subroutine calculate an angle
00003FBA                            
00003FBA                            ; input:
00003FBA                            ;	d1 = x-axis distance
00003FBA                            ;	d2 = y-axis distance
00003FBA                            
00003FBA                            ; output:
00003FBA                            ;	d0 = angle
00003FBA                            ; ---------------------------------------------------------------------------
00003FBA                            
00003FBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003FBA                            
00003FBA                            
00003FBA                            CalcAngle:
00003FBA 48E7 1800                  		movem.l	d3-d4,-(sp)
00003FBE 7600                       		moveq	#0,d3
00003FC0 7800                       		moveq	#0,d4
00003FC2 3601                       		move.w	d1,d3
00003FC4 3802                       		move.w	d2,d4
00003FC6 8843                       		or.w	d3,d4
00003FC8 6700                       		beq.s	loc_2D04
00003FCA 3802                       		move.w	d2,d4
00003FCC 4A43                       		tst.w	d3
00003FCE 6A00 0000                  		bpl.w	loc_2CC2
00003FD2 4443                       		neg.w	d3
00003FD4                            
00003FD4                            loc_2CC2:
00003FD4 4A44                       		tst.w	d4
00003FD6 6A00 0000                  		bpl.w	loc_2CCA
00003FDA 4444                       		neg.w	d4
00003FDC                            
00003FDC                            loc_2CCA:
00003FDC B843                       		cmp.w	d3,d4
00003FDE 6400 0000                  		bcc.w	loc_2CDC
00003FE2 E18C                       		lsl.l	#8,d4
00003FE4 88C3                       		divu.w	d3,d4
00003FE6 7000                       		moveq	#0,d0
00003FE8 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003FEC 6000                       		bra.s	loc_2CE6
00003FEE                            ; ===========================================================================
00003FEE                            
00003FEE                            loc_2CDC:
00003FEE E18B                       		lsl.l	#8,d3
00003FF0 86C4                       		divu.w	d4,d3
00003FF2 7040                       		moveq	#$40,d0
00003FF4 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003FF8                            
00003FF8                            loc_2CE6:
00003FF8 4A41                       		tst.w	d1
00003FFA 6A00 0000                  		bpl.w	loc_2CF2
00003FFE 4440                       		neg.w	d0
00004000 0640 0080                  		addi.w	#$80,d0
00004004                            
00004004                            loc_2CF2:
00004004 4A42                       		tst.w	d2
00004006 6A00 0000                  		bpl.w	loc_2CFE
0000400A 4440                       		neg.w	d0
0000400C 0640 0100                  		addi.w	#$100,d0
00004010                            
00004010                            loc_2CFE:
00004010 4CDF 0018                  		movem.l	(sp)+,d3-d4
00004014 4E75                       		rts	
00004016                            ; ===========================================================================
00004016                            
00004016                            loc_2D04:
00004016 303C 0040                  		move.w	#$40,d0
0000401A 4CDF 0018                  		movem.l	(sp)+,d3-d4
0000401E 4E75                       		rts	
00004020                            ; End of function CalcAngle
00004020                            
00004020                            ; ===========================================================================
00004020                            
00004020                            Angle_Data:	incbin	"misc\angles.bin"
00004122                            
00004122                            ; ===========================================================================
00004122                            ; ===========================================================================
00004122                            
00004122                            ; ---------------------------------------------------------------------------
00004122                            ; Sega screen
00004122                            ; ---------------------------------------------------------------------------
00004122                            
00004122                            GM_Sega:
0000412A 6100 D6CA                  		bsr.w	ClearPLC
0000412E 6100 E288                  		bsr.w	PaletteFadeOut
00004132 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00004138 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
0000413C 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00004140 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00004144 3CBC 8700                  		move.w	#$8700,(a6)	; set background colour (palette entry 0)
00004148 3CBC 8B00                  		move.w	#$8B00,(a6)	; full-screen vertical scrolling
0000414C 4238 F64E                  		clr.b	(f_wtr_state).w
00004150 46FC 2700                  		disable_ints
00004154 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00004158 0200 00BF                  		andi.b	#$BF,d0
0000415C 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00004162 6100 D0CA                  		bsr.w	ClearScreen
00004170 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00004176 6100 D234                  		bsr.w	NemDec
0000417A 43F9 00FF 0000             		lea	($FF0000).l,a1
00004180 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00004186 303C 0000                  		move.w	#0,d0
0000418A 6100 D7AA                  		bsr.w	EniDec
0000418E                            
0000418E 43F9 00FF 0000 203C 6510+  		copyTilemap	$FF0000,$E510,$17,7
000041A2 43F9 00FF 0180 203C 4000+  		copyTilemap	$FF0180,$C000,$27,$1B
000041B6                            
000041B6 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
000041BA 6B00                       			bmi.s   @loadpal
000041BC 43F9 00FF 0A40 203C 453A+  			copyTilemap	$FF0A40,$C53A,2,1 ; hide "TM" with a white rectangle
000041D0                            
000041D0                            	@loadpal:
000041D0 7000                       		moveq	#palid_SegaBG,d0
000041D2 6100 E4CA                  		bsr.w	PalLoad2	; load Sega logo palette
000041D6 47F9 FFFF FB80                     lea        ($FFFFFB80).l,a3
000041DC 7E3F                               moveq    #$3F,d7
000041DE                             
000041DE                                .loop:
000041DE 36FC 0000                          move.w    #cBlack,(a3)+    ; move data to RAM
000041E2 51CF FFFA                          dbf        d7,.loop
000041E6 6100 E12A                          bsr.w     PaletteFadeIn ; added to allow fade in			
000041EA 31FC FFF6 F632             		move.w	#-$A,(v_pcyc_num).w
000041F0 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w
000041F6 31FC 0000 F662             		move.w	#0,(v_pal_buffer+$12).w
000041FC 31FC 0000 F660             		move.w	#0,(v_pal_buffer+$10).w
00004202 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00004206 0000 0040                  		ori.b	#$40,d0
0000420A 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00004210                            
00004210                            Sega_WaitPal:
00004210 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
00004216 6100 FADE                  		bsr.w	WaitForVBla
0000421A 6100 E354                  		bsr.w	PalCycle_Sega
0000421E 66F0                       		bne.s	Sega_WaitPal
00004220                            
00004228 11FC 0014 F62A             		move.b	#$14,(v_vbla_routine).w
0000422E 6100 FAC6                  		bsr.w	WaitForVBla
00004232 31FC 001E F614             		move.w	#$1E,(v_demolength).w
00004238                            
00004238                            Sega_WaitEnd:
00004238 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
0000423E 6100 FAB6                  		bsr.w	WaitForVBla
00004242 4A78 F614                  		tst.w	(v_demolength).w
00004246 6700                       		beq.s	Sega_GotoTitle
00004248 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
0000424E 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00004250                            
00004250                            Sega_GotoTitle:
00004250 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
00004256 4E75                       		rts	
00004258                            ; ===========================================================================
00004258                            
00004258                            ; ---------------------------------------------------------------------------
00004258                            ; Title	screen
00004258                            ; ---------------------------------------------------------------------------
00004258                            
00004258                            GM_Title:
00004260 6100 D594                  		bsr.w	ClearPLC
00004264 6100 E152                  		bsr.w	PaletteFadeOut
00004268 46FC 2700                  		disable_ints
0000426C 6100 D046                  		bsr.w	SoundDriverLoad
00004270 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00004276 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
0000427A 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
0000427E 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00004282 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
00004286 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
0000428A 3CBC 8B03                  		move.w	#$8B03,(a6)
0000428E 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (palette line 2, entry 0)
00004292 4238 F64E                  		clr.b	(f_wtr_state).w
00004296 6100 CF96                  		bsr.w	ClearScreen
0000429A                            		;jsr		SHC2022 
0000429A                            
0000429A 43F8 D000                  		lea	(v_objspace).w,a1
0000429E 7000                       		moveq	#0,d0
000042A0 323C 07FF                  		move.w	#$7FF,d1
000042A4                            
000042A4                            	Tit_ClrObj1:
000042A4 22C0                       		move.l	d0,(a1)+
000042A6 51C9 FFFC                  		dbf	d1,Tit_ClrObj1	; fill object space ($D000-$EFFF) with 0
000042AA                            
000042AA 6100 E066                  		bsr.w	PaletteFadeIn
000042AE 46FC 2700                  		disable_ints
000042BC 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
000042C2 6100 D0E8                  		bsr.w	NemDec
000042D0 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
000042D6 6100 D0D4                  		bsr.w	NemDec
000042E4 41F9 0000 0000             		lea (Nem_TitleMenu).l,a0 ; Load Menu Text/Characters pattern
000042EA 6100 D0C0                  		bsr.w 	NemDec
000042EE 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000042FC 4BF9 0000 05FC             		lea	(Art_Text).l,a5	; load level select font
00004302 323C 028F                  		move.w	#$28F,d1
00004306                            
00004306                            	Tit_LoadText:
00004306 3C9D                       		move.w	(a5)+,(a6)
00004308 51C9 FFFC                  		dbf	d1,Tit_LoadText	; load level select font
0000430C                            
0000430C 11FC 0000 FE30             		move.b	#0,(v_lastlamp).w ; clear lamppost counter
00004312 31FC 0000 FE08             		move.w	#0,(v_debuguse).w ; disable debug item placement mode
00004318 31FC 0000 FFF0             		move.w	#0,(f_demo).w	; disable debug mode
0000431E 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w ; unused variable
00004324 31FC 0000 FE10             		move.w	#(id_GHZ<<8),(v_zone).w	; set level to GHZ (00)
0000432A 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w ; disable palette cycling
00004330 6100 0000                  		bsr.w	LevelSizeLoad
00004334 6100 0000                  		bsr.w	DeformLayers
00004338 43F8 B000                  		lea	(v_16x16).w,a1
0000433C 41F9 0000 0000             		lea	(Blk16_TS).l,a0 ; load	GHZ 16x16 mappings
00004342 303C 0000                  		move.w	#0,d0
00004346 6100 D5EE                  		bsr.w	EniDec
0000434A 41F9 0000 0000             		lea	(Blk256_TS).l,a0 ; load GHZ 256x256 mappings
00004350 43F9 00FF 0000             		lea	(v_256x256).l,a1
00004356 6100 D75C                  		bsr.w	KosDec
0000435A 6100 0000                  		bsr.w	LevelLayoutLoad
0000435E 6100 E058                  		bsr.w	PaletteFadeOut
00004362 46FC 2700                  		disable_ints
00004366 6100 CEC6                  		bsr.w	ClearScreen
0000436A 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00004370 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004376 47F8 F708                  		lea	(v_bgscreenposx).w,a3
0000437A 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
0000437E 343C 6000                  		move.w	#$6000,d2
00004382 6100 0000                  		bsr.w	DrawChunks
00004386 43F9 00FF 0000             		lea	($FF0000).l,a1
0000438C 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00004392 303C 0000                  		move.w	#0,d0
00004396 6100 D59E                  		bsr.w	EniDec
0000439A                            
0000439A 43F9 00FF 0000 203C 4206+  		copyTilemap	$FF0000,$C206,$21,$15
000043AE                            
000043B8 41F9 0000 0000             		lea	(Nem_TS_1st).l,a0 ; load title screen patterns
000043BE 6100 CFEC                  		bsr.w	NemDec
000043C2 7001                       		moveq	#palid_Title,d0	; load title screen palette
000043C4 6100 E29C                  		bsr.w	PalLoad1
000043D0 11FC 0000 FFFA             		move.b	#0,(f_debugmode).w ; disable debug mode
000043D6 31FC 0900 F614             		move.w	#$900,(v_demolength).w ; run title screen for $178 frames
000043DC 43F8 D080                  		lea	(v_objspace+$80).w,a1
000043E0 7000                       		moveq	#0,d0
000043E2 323C 0007                  		move.w	#7,d1
000043E6                            
000043E6                            	Tit_ClrObj2:
000043E6 22C0                       		move.l	d0,(a1)+
000043E8 51C9 FFFC                  		dbf	d1,Tit_ClrObj2
000043EC                            
000043EC 11FC 0000 D040             		move.b	#id_TitleSonic,(v_objspace+$40).w ; load big Sonic object
000043F2 11FC 0000 D080             		move.b	#id_PSBTM,(v_objspace+$80).w ; load "PRESS START BUTTON" object
000043F8 4238 D0A4                  		clr.b	(v_objspace+$80+obRoutine).w ; The 'Mega Games 10' version of Sonic 1 added this line, to fix the 'PRESS START BUTTON' object not appearing
000043FC                            
000043FC 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
00004400 6A00                       			bpl.s   @isjap		; if yes, branch
00004402                            
00004402 11FC 0000 D0C0             		move.b	#id_PSBTM,(v_objspace+$C0).w ; load "TM" object
00004408 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
0000440E                            	@isjap:
0000440E 11FC 0000 D100             		move.b	#id_PSBTM,(v_objspace+$100).w ; load object which hides part of Sonic
00004414 11FC 0002 D11A             		move.b	#2,(v_objspace+$100+obFrame).w
0000441A 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004420 6100 0000                  		bsr.w	DeformLayers
00004424 4EB9 0000 0000             		jsr	(BuildSprites).l
0000442A 7000                       		moveq	#plcid_Main,d0
0000442C 6100 D39C                  		bsr.w	NewPLC
00004430 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w
00004436 31FC 0000 FFE6             		move.w	#0,(v_title_ccount).w
0000443C 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00004440 0000 0040                  		ori.b	#$40,d0
00004444 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
0000444A 6100 DEC6                  		bsr.w	PaletteFadeIn
0000444E                            
0000444E                            Tit_MainLoop:
0000444E 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00004454 6100 F8A0                  		bsr.w	WaitForVBla
00004458 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000445E 6100 0000                  		bsr.w	DeformLayers
00004462 4EB9 0000 0000             		jsr	(BuildSprites).l
00004468 6100 D936                  		bsr.w	PCycle_Title
0000446C 6100 D396                  		bsr.w	RunPLC
00004470 3038 D008                  		move.w	(v_objspace+obX).w,d0
00004474 5440                       		addq.w	#2,d0
00004476 31C0 D008                  		move.w	d0,(v_objspace+obX).w ; move Sonic to the right
0000447A 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed $1C00 on x-axis?
0000447E 6500                       		blo.s	Tit_ChkRegion	; if not, branch
00004480                            
00004480 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004486 4E75                       		rts	
00004488                            ; ===========================================================================
00004488                            
00004488                            Tit_ChkRegion:
00004488 4A38 FFF8                  		tst.b	(v_megadrive).w	; check	if the machine is US or	Japanese
0000448C 6A00                       		bpl.s	Tit_RegionJap	; if Japanese, branch
0000448E                            
0000448E 41F9 0000 0000             		lea	(LevSelCode_US).l,a0 ; load US code
00004494 6000                       		bra.s	Tit_EnterCheat
00004496                            
00004496                            	Tit_RegionJap:
00004496 41F9 0000 0000             		lea	(LevSelCode_J).l,a0 ; load J code
0000449C                            
0000449C                            Tit_EnterCheat:
0000449C 3038 FFE4                  		move.w	(v_title_dcount).w,d0
000044A0 D0C0                       		adda.w	d0,a0
000044A2 1038 F605                  		move.b	(v_jpadpress1).w,d0 ; get button press
000044A6 0200 000F                  		andi.b	#btnDir,d0	; read only UDLR buttons
000044AA B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
000044AC 6600                       		bne.s	Tit_ResetCheat	; if not, branch
000044AE 5278 FFE4                  		addq.w	#1,(v_title_dcount).w ; next button press
000044B2 4A00                       		tst.b	d0
000044B4 6600                       		bne.s	Tit_CountC
000044B6 41F8 FFE0                  		lea	(f_levselcheat).w,a0
000044BA 3238 FFE6                  		move.w	(v_title_ccount).w,d1
000044BE E249                       		lsr.w	#1,d1
000044C0 0241 0003                  		andi.w	#3,d1
000044C4 6700                       		beq.s	Tit_PlayRing
000044C6 4A38 FFF8                  		tst.b	(v_megadrive).w
000044CA 6A00                       		bpl.s	Tit_PlayRing
000044CC 7201                       		moveq	#1,d1
000044CE 1181 1001                  		move.b	d1,1(a0,d1.w)	; cheat depends on how many times C is pressed
000044D2                            
000044D2                            	Tit_PlayRing:
000044D2 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
000044E0 6000                       		bra.s	Tit_CountC
000044E2                            ; ===========================================================================
000044E2                            
000044E2                            Tit_ResetCheat:
000044E2 4A00                       		tst.b	d0
000044E4 6700                       		beq.s	Tit_CountC
000044E6 0C78 0009 FFE4             		cmpi.w	#9,(v_title_dcount).w
000044EC 6700                       		beq.s	Tit_CountC
000044EE 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w ; reset UDLR counter
000044F4                            
000044F4                            Tit_CountC:
000044F4 1038 F605                  		move.b	(v_jpadpress1).w,d0
000044F8 0200 0020                  		andi.b	#btnC,d0	; is C button pressed?
000044FC 6700                       		beq.s	loc_3230	; if not, branch
000044FE 5278 FFE6                  		addq.w	#1,(v_title_ccount).w ; increment C counter
00004502                            		
00004502                            loc_3230:
00004502 4A78 F614                  		tst.w	(v_demolength).w
00004506 6700 0000                  		beq.w	GotoDemo
0000450A 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
00004510 6700 FF3C                  		beq.w	Tit_MainLoop	; if not, branch
00004514                            
00004514                            Tit_ChkLevSel:
00004514 4A38 FFE0                  		tst.b	(f_levselcheat).w ; check if level select code is on
00004518 6700 0000                  		beq.w	@cont	; if not, play level
0000451C 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; check if A is pressed
00004522 6700 0000                  		beq.w	@cont	; if not, play level
00004526 6000 0000                  		bra.w	Tit_LevelSelect
0000452A                            
0000452A                            	@cont:		
0000452A 0C38 0006 D0A4             		cmp.b	#6,($FFFFD0A4).w   ; is Title Menu on
00004530 6700 FF1C                  		beq.w	Tit_MainLoop         ; if it not was deleted, branch  	
00004534 7400                       		moveq	#0,d2
00004536 1438 FFB0                  		move.b	(Title_screen_option).w,d2   ; load the choice
0000453A D442                       		add.w	d2,d2            ; multiply by 2
0000453C 343B 2000                  		move.w	Tit_Menu_Choice(pc,d2.w),d2
00004540 4EFB 2000                  		jmp   Tit_Menu_Choice(pc,d2.w)   ; jump to the choice code
00004544                            
00004544                            ; ===========================================================================
00004544                            Tit_Menu_Choice:
00004544 0000                       		dc.w PlayLevel-Tit_Menu_Choice   ; 0
00004546 0000                       		dc.w Menu_Options-Tit_Menu_Choice  ; 2
00004548                            ; ===========================================================================
00004548                            
00004548                            Menu_Options:
00004548 11FC 0020 F600             		move.b	#$20,(v_gamemode).w
0000454E 4E75                       		rts
00004550                            
00004550                            Tit_LevelSelect:	
00004550 7002                       		moveq	#palid_LevelSel,d0
00004552 6100 E14A                  		bsr.w	PalLoad2	; load level select palette
00004556 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
0000455A 7000                       		moveq	#0,d0
0000455C 323C 00DF                  		move.w	#$DF,d1
00004560                            
00004560                            	Tit_ClrScroll1:
00004560 22C0                       		move.l	d0,(a1)+
00004562 51C9 FFFC                  		dbf	d1,Tit_ClrScroll1 ; clear scroll data (in RAM)
00004566                            
00004566 21C0 F616                  		move.l	d0,(v_scrposy_dup).w
0000456A 46FC 2700                  		disable_ints
0000456E 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000457E 323C 03FF                  		move.w	#$3FF,d1
00004582                            
00004582                            	Tit_ClrScroll2:
00004582 2C80                       		move.l	d0,(a6)
00004584 51C9 FFFC                  		dbf	d1,Tit_ClrScroll2 ; clear scroll data (in VRAM)
00004588                            
00004588 6100 0000                  		bsr.w	LevSelTextLoad
0000458C                            
0000458C                            ; ---------------------------------------------------------------------------
0000458C                            ; Level	Select
0000458C                            ; ---------------------------------------------------------------------------
0000458C                            
0000458C                            LevelSelect:
0000458C 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00004592 6100 F762                  		bsr.w	WaitForVBla
00004596 6100 0000                  		bsr.w	LevSelControls
0000459A 6100 D268                  		bsr.w	RunPLC
0000459E 4AB8 F680                  		tst.l	(v_plc_buffer).w
000045A2 66E8                       		bne.s	LevelSelect
000045A4 0238 00F0 F605             		andi.b	#btnABC+btnStart,(v_jpadpress1).w ; is A, B, C, or Start pressed?
000045AA 67E0                       		beq.s	LevelSelect	; if not, branch
000045AC 3038 FF82                  		move.w	(v_levselitem).w,d0
000045B0 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
000045B4 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
000045B6 3038 FF84                  		move.w	(v_levselsound).w,d0
000045BA 0640 0080                  		addi.w	#$80,d0
000045BE                            		;cmpi.w	#$9F,d0		; is sound $9F being played?
000045BE                            		;beq.s	LevSel_Ending	; if yes, branch
000045BE                            		;cmpi.w	#$9E,d0		; is sound $9E being played?
000045BE                            		;beq.s	LevSel_Credits	; if yes, branch
000045BE                            
000045BE                            LevSel_PlaySnd:
000045BE 6100 CD3E                  		bsr.w	PlaySound_Special
000045C2 60C8                       		bra.s	LevelSelect
000045C4                            ; ===========================================================================
000045C4                            
000045C4                            LevSel_Ending:
000045C4 11FC 0000 F600             		move.b	#id_Ending,(v_gamemode).w ; set screen mode to $18 (Ending)
000045CA 31FC 0600 FE10             		move.w	#(id_EndZ<<8),(v_zone).w ; set level to 0600 (Ending)
000045D0 4E75                       		rts	
000045D2                            ; ===========================================================================
000045D2                            
000045D2                            LevSel_Credits:
000045D2 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; set screen mode to $1C (Credits)
000045E0 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w
000045E6 4E75                       		rts	
000045E8                            ; ===========================================================================
000045E8                            
000045E8                            LevSel_Level_SS:
000045E8 D040                       		add.w	d0,d0
000045EA 303B 0000                  		move.w	LevSel_Ptrs(pc,d0.w),d0 ; load level number
000045EE 6B00 FF9C                  		bmi.w	LevelSelect
000045F2 0C40 0700                  		cmpi.w	#id_SS*$100,d0	; check	if level is 0700 (Special Stage)
000045F6 6600                       		bne.s	LevSel_Level	; if not, branch
000045F8 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
000045FE 4278 FE10                  		clr.w	(v_zone).w	; clear	level
00004602 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00004608 7000                       		moveq	#0,d0
0000460A 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
0000460E 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004612 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00004616 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
0000461E 4E75                       		rts	
00004620                            ; ===========================================================================
00004620                            
00004620                            LevSel_Level:
00004620 0240 3FFF                  		andi.w	#$3FFF,d0
00004624 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
00004628                            
00004628                            PlayLevel:
00004628 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
0000462E 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00004634 7000                       		moveq	#0,d0
00004636 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
0000463A 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
0000463E 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00004642 11C0 FE16                  		move.b	d0,(v_lastspecial).w ; clear special stage number
00004646 11C0 FE57                  		move.b	d0,(v_emeralds).w ; clear emeralds
0000464A 21C0 FE58                  		move.l	d0,(v_emldlist).w ; clear emeralds
0000464E 21C0 FE5C                  		move.l	d0,(v_emldlist+4).w ; clear emeralds
00004652 11FC 0001 FE18             		move.b	#1,(v_continues).w ; set continues to 1
00004658 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
00004668 4E75                       		rts	
0000466A                            ; ===========================================================================
0000466A                            ; ---------------------------------------------------------------------------
0000466A                            ; Level	select - level pointers
0000466A                            ; ---------------------------------------------------------------------------
0000466A                            		; correct level order
0000466A 0000                       		dc.b id_GHZ, 0
0000466C 0001                       		dc.b id_GHZ, 1
0000466E 0002                       		dc.b id_GHZ, 2
00004670 0200                       		dc.b id_MZ, 0
00004672 0201                       		dc.b id_MZ, 1
00004674 0202                       		dc.b id_MZ, 2
00004676 0400                       		dc.b id_SYZ, 0
00004678 0401                       		dc.b id_SYZ, 1
0000467A 0402                       		dc.b id_SYZ, 2
0000467C 0100                       		dc.b id_LZ, 0
0000467E 0101                       		dc.b id_LZ, 1
00004680 0102                       		dc.b id_LZ, 2
00004682 0300                       		dc.b id_SLZ, 0
00004684 0301                       		dc.b id_SLZ, 1
00004686 0302                       		dc.b id_SLZ, 2
00004688 0500                       		dc.b id_SBZ, 0
0000468A 0501                       		dc.b id_SBZ, 1
0000468C 0103                       		dc.b id_LZ, 3
0000468E 0502                       		dc.b id_SBZ, 2
00004690 0700                       		dc.b id_SS, 0		; Special Stage
00004692 8000                       		dc.w $8000		; Sound Test
00004694                            		even
00004694                            ; ---------------------------------------------------------------------------
00004694                            ; Level	select codes
00004694                            ; ---------------------------------------------------------------------------
00004694 0102 0202 0408 00FF        		dc.b btnUp,btnDn,btnDn,btnDn,btnL,btnR,0,$FF
0000469C                            		even
0000469C                            
0000469C 0102 0408 00FF             LevSelCode_US:	dc.b btnUp,btnDn,btnL,btnR,0,$FF
000046A2                            		even
000046A2                            ; ===========================================================================
000046A2                            
000046A2                            ; ---------------------------------------------------------------------------
000046A2                            ; Demo mode
000046A2                            ; ---------------------------------------------------------------------------
000046A2                            
000046A2                            GotoDemo:
000046A2 31FC 001E F614             		move.w	#$1E,(v_demolength).w
000046A8                            
000046A8                            loc_33B6:
000046A8 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
000046AE 6100 F646                  		bsr.w	WaitForVBla
000046B2 6100 0000                  		bsr.w	DeformLayers
000046B6 6100 D6C4                  		bsr.w	PaletteCycle
000046BA 6100 D148                  		bsr.w	RunPLC
000046BE 3038 D008                  		move.w	(v_objspace+obX).w,d0
000046C2 5440                       		addq.w	#2,d0
000046C4 31C0 D008                  		move.w	d0,(v_objspace+obX).w
000046C8 0C40 1C00                  		cmpi.w	#$1C00,d0
000046CC 6500                       		blo.s	loc_33E4
000046CE 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
000046D4 4E75                       		rts	
000046D6                            ; ===========================================================================
000046D6                            
000046D6                            loc_33E4:
000046D6 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
000046DC 6600 FE36                  		bne.w	Tit_ChkLevSel	; if yes, branch
000046E0 4A78 F614                  		tst.w	(v_demolength).w
000046E4 6600 FFC2                  		bne.w	loc_33B6
000046F0 3038 FFF2                  		move.w	(v_demonum).w,d0 ; load	demo number
000046F4 0240 0007                  		andi.w	#7,d0
000046F8 D040                       		add.w	d0,d0
000046FA 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
000046FE 31C0 FE10                  		move.w	d0,(v_zone).w
00004702 5278 FFF2                  		addq.w	#1,(v_demonum).w ; add 1 to demo number
00004706 0C78 0004 FFF2             		cmpi.w	#4,(v_demonum).w ; is demo number less than 4?
0000470C 6500                       		blo.s	loc_3422	; if yes, branch
0000470E 31FC 0000 FFF2             		move.w	#0,(v_demonum).w ; reset demo number to	0
00004714                            
00004714                            loc_3422:
00004714 31FC 0001 FFF0             		move.w	#1,(f_demo).w	; turn demo mode on
0000471A 11FC 0000 F600             		move.b	#id_Demo,(v_gamemode).w ; set screen mode to 08 (demo)
00004720 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00004724 6600                       		bne.s	Demo_Level	; if not, branch
00004726 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
0000472C 4278 FE10                  		clr.w	(v_zone).w	; clear	level number
00004730 4238 FE16                  		clr.b	(v_lastspecial).w ; clear special stage number
00004734                            
00004734                            Demo_Level:
00004734 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
0000473A 7000                       		moveq	#0,d0
0000473C 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004740 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004744 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00004748 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
00004750 4E75                       		rts	
00004752                            ; ===========================================================================
00004752                            ; ---------------------------------------------------------------------------
00004752                            ; Levels used in demos
00004752                            ; ---------------------------------------------------------------------------
00004752                            Demo_Levels:	incbin	"misc\Demo Level Order - Intro.bin"
0000475A                            		even
0000475A                            
0000475A                            ; ---------------------------------------------------------------------------
0000475A                            ; Subroutine to	change what you're selecting in the level select
0000475A                            ; ---------------------------------------------------------------------------
0000475A                            
0000475A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000475A                            
0000475A                            
0000475A                            LevSelControls:
0000475A 1238 F605                  		move.b	(v_jpadpress1).w,d1
0000475E 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed and held?
00004762 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00004764 5378 FF80                  		subq.w	#1,(v_levseldelay).w ; subtract 1 from time to next move
00004768 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
0000476A                            
0000476A                            LevSel_UpDown:
0000476A 31FC 000B FF80             		move.w	#$B,(v_levseldelay).w ; reset time delay
00004770 1238 F604                  		move.b	(v_jpadhold1).w,d1
00004774 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed?
00004778 6700                       		beq.s	LevSel_SndTest	; if not, branch
0000477A 3038 FF82                  		move.w	(v_levselitem).w,d0
0000477E 0801 0000                  		btst	#bitUp,d1	; is up	pressed?
00004782 6700                       		beq.s	LevSel_Down	; if not, branch
00004784 5340                       		subq.w	#1,d0		; move up 1 selection
00004786 6400                       		bhs.s	LevSel_Down
00004788 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
0000478A                            
0000478A                            LevSel_Down:
0000478A 0801 0001                  		btst	#bitDn,d1	; is down pressed?
0000478E 6700                       		beq.s	LevSel_Refresh	; if not, branch
00004790 5240                       		addq.w	#1,d0		; move down 1 selection
00004792 0C40 0015                  		cmpi.w	#$15,d0
00004796 6500                       		blo.s	LevSel_Refresh
00004798 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
0000479A                            
0000479A                            LevSel_Refresh:
0000479A 31C0 FF82                  		move.w	d0,(v_levselitem).w ; set new selection
0000479E 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000047A2 4E75                       		rts	
000047A4                            ; ===========================================================================
000047A4                            
000047A4                            LevSel_SndTest:
000047A4 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w ; is item $14 selected?
000047AA 6600                       		bne.s	LevSel_NoMove	; if not, branch
000047AC 1238 F605                  		move.b	(v_jpadpress1).w,d1
000047B0 0201 000C                  		andi.b	#btnR+btnL,d1	; is left/right	pressed?
000047B4 6700                       		beq.s	LevSel_NoMove	; if not, branch
000047B6 3038 FF84                  		move.w	(v_levselsound).w,d0
000047BA 0801 0002                  		btst	#bitL,d1	; is left pressed?
000047BE 6700                       		beq.s	LevSel_Right	; if not, branch
000047C0 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
000047C2 6400                       		bhs.s	LevSel_Right
000047C4 7055                       		moveq	#$55,d0		; if sound test	moves below 0, set to $55
000047C6                            
000047C6                            LevSel_Right:
000047C6 0801 0003                  		btst	#bitR,d1	; is right pressed?
000047CA 6700                       		beq.s	LevSel_Refresh2	; if not, branch
000047CC 5240                       		addq.w	#1,d0		; add 1	to sound test
000047CE 0C40 0056                  		cmpi.w	#$56,d0
000047D2 6500                       		blo.s	LevSel_Refresh2
000047D4 7000                       		moveq	#0,d0		; if sound test	moves above $55, set to	0
000047D6                            
000047D6                            LevSel_Refresh2:
000047D6 31C0 FF84                  		move.w	d0,(v_levselsound).w ; set sound test number
000047DA 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000047DE                            
000047DE                            LevSel_NoMove:
000047DE 4E75                       		rts	
000047E0                            ; End of function LevSelControls
000047E0                            
000047E0                            ; ---------------------------------------------------------------------------
000047E0                            ; Subroutine to load level select text
000047E0                            ; ---------------------------------------------------------------------------
000047E0                            
000047E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000047E0                            
000047E0                            
000047E0                            LevSelTextLoad:
000047E0                            
000047E0 =62100003                  	textpos:	= ($40000000+(($E210&$3FFF)<<16)+(($E210&$C000)>>14))
000047E0                            					; $E210 is a VRAM address
000047E0                            
000047E0 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000047E6 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000047EC 283C 6210 0003             		move.l	#textpos,d4	; text position on screen
000047F2 363C E680                  		move.w	#$E680,d3	; VRAM setting (4th palette, $680th tile)
000047F6 7214                       		moveq	#$14,d1		; number of lines of text
000047F8                            
000047F8                            	LevSel_DrawAll:
000047F8 2D44 0004                  		move.l	d4,4(a6)
000047FC 6100 0000                  		bsr.w	LevSel_ChgLine	; draw line of text
00004800 0684 0080 0000             		addi.l	#$800000,d4	; jump to next line
00004806 51C9 FFF0                  		dbf	d1,LevSel_DrawAll
0000480A                            
0000480A 7000                       		moveq	#0,d0
0000480C 3038 FF82                  		move.w	(v_levselitem).w,d0
00004810 3200                       		move.w	d0,d1
00004812 283C 6210 0003             		move.l	#textpos,d4
00004818 EF48                       		lsl.w	#7,d0
0000481A 4840                       		swap	d0
0000481C D880                       		add.l	d0,d4
0000481E 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004824 E749                       		lsl.w	#3,d1
00004826 3001                       		move.w	d1,d0
00004828 D241                       		add.w	d1,d1
0000482A D240                       		add.w	d0,d1
0000482C D2C1                       		adda.w	d1,a1
0000482E 363C C680                  		move.w	#$C680,d3	; VRAM setting (3rd palette, $680th tile)
00004832 2D44 0004                  		move.l	d4,4(a6)
00004836 6100 0000                  		bsr.w	LevSel_ChgLine	; recolour selected line
0000483A 363C E680                  		move.w	#$E680,d3
0000483E 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w
00004844 6600                       		bne.s	LevSel_DrawSnd
00004846 363C C680                  		move.w	#$C680,d3
0000484A                            
0000484A                            LevSel_DrawSnd:
00004854 3038 FF84                  		move.w	(v_levselsound).w,d0
00004858 0640 0080                  		addi.w	#$80,d0
0000485C 1400                       		move.b	d0,d2
0000485E E808                       		lsr.b	#4,d0
00004860 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 1st digit
00004864 1002                       		move.b	d2,d0
00004866 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 2nd digit
0000486A 4E75                       		rts	
0000486C                            ; End of function LevSelTextLoad
0000486C                            
0000486C                            
0000486C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000486C                            
0000486C                            
0000486C                            LevSel_ChgSnd:
0000486C 0240 000F                  		andi.w	#$F,d0
00004870 0C00 000A                  		cmpi.b	#$A,d0		; is digit $A-$F?
00004874 6500                       		blo.s	LevSel_Numb	; if not, branch
00004876 5E00                       		addi.b	#7,d0		; use alpha characters
00004878                            
00004878                            	LevSel_Numb:
00004878 D043                       		add.w	d3,d0
0000487A 3C80                       		move.w	d0,(a6)
0000487C 4E75                       		rts	
0000487E                            ; End of function LevSel_ChgSnd
0000487E                            
0000487E                            
0000487E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000487E                            
0000487E                            
0000487E                            LevSel_ChgLine:
0000487E 7417                       		moveq	#$17,d2		; number of characters per line
00004880                            
00004880                            	LevSel_LineLoop:
00004880 7000                       		moveq	#0,d0
00004882 1019                       		move.b	(a1)+,d0	; get character
00004884 6A00                       		bpl.s	LevSel_CharOk	; branch if valid
00004886 3CBC 0000                  		move.w	#0,(a6)		; use blank character
0000488A 51CA FFF4                  		dbf	d2,LevSel_LineLoop
0000488E 4E75                       		rts	
00004890                            
00004890                            
00004890                            	LevSel_CharOk:
00004890 D043                       		add.w	d3,d0		; combine char with VRAM setting
00004892 3C80                       		move.w	d0,(a6)		; send to VRAM
00004894 51CA FFEA                  		dbf	d2,LevSel_LineLoop
00004898 4E75                       		rts	
0000489A                            ; End of function LevSel_ChgLine
0000489A                            
0000489A                            ; ===========================================================================
0000489A                            ; ---------------------------------------------------------------------------
0000489A                            ; Level	select menu text
0000489A                            ; ---------------------------------------------------------------------------
0000489A                            		incbin	"misc\Level Select Text (JP1).bin"
00004A92                            		even
00004A92                            ; ---------------------------------------------------------------------------
00004A92                            ; Music	playlist
00004A92                            ; ---------------------------------------------------------------------------
00004A92                            MusicList:
00004A92 00                         			dc.b bgm_GHZ    ; GHZ1
00004A93 00                                 	dc.b bgm_LZ    ; GHZ2
00004A94 00                                 	dc.b bgm_Stop   ; GHZ3
00004A95 00                                 	dc.b bgm_LZ    ; GHZ4
00004A96 00                                 	dc.b bgm_Stop    ; LZ1
00004A97 00                                 	dc.b bgm_Stop   ; LZ2
00004A98 00                                 	dc.b bgm_Stop    ; LZ3
00004A99 00                                 	dc.b bgm_SBZ3    ; LZ4
00004A9A 00                                 	dc.b bgm_MZ    ; MZ1
00004A9B 00                                 	dc.b bgm_SBZ    ; MZ2
00004A9C 00                                 	dc.b bgm_RRZ2   ; MZ3
00004A9D 00                                 	dc.b bgm_SBZ    ; MZ4
00004A9E 00                                 	dc.b bgm_LZ    ; SLZ1
00004A9F 00                                 	dc.b bgm_LZ    ; SLZ2
00004AA0 00                                 	dc.b bgm_LZ    ; SLZ3
00004AA1 00                                 	dc.b bgm_LZ    ; SLZ4
00004AA2 00                                 	dc.b bgm_SYZ    ; SYZ1
00004AA3 00                                 	dc.b bgm_SLZ    ; SYZ2
00004AA4 00                                 	dc.b bgm_SLZ    ; SYZ3
00004AA5 00                                 	dc.b bgm_SLZ    ; SYZ4
00004AA6 00                                 	dc.b bgm_SBZ    ; SBZ1
00004AA7 00                                 	dc.b bgm_SBZ    ; SBZ2
00004AA8 00                                 	dc.b bgm_FZ		; SBZ3
00004AA9 00                                 	dc.b bgm_SBZ    ; SBZ4
00004AAA 00                                 	dc.b bgm_GHZ    ; GHZ1
00004AAB 00                                 	dc.b bgm_GHZ    ; GHZ1
00004AAC 00                                 	dc.b bgm_GHZ    ; GHZ1
00004AAD 00                                 	dc.b bgm_GHZ    ; GHZ1
00004AAE                                    	even
00004AAE                            ; ===========================================================================
00004AAE                            
00004AAE                            ; ---------------------------------------------------------------------------
00004AAE                            ; Level
00004AAE                            ; ---------------------------------------------------------------------------
00004AAE                            
00004AAE                            GM_Level:
00004AAE 08F8 0007 F600             		bset	#7,(v_gamemode).w ; add $80 to screen mode (for pre level sequence)
00004AB4 4A78 FFF0                  		tst.w	(f_demo).w
00004AB8 6B00                       		bmi.s	Level_NoMusicFade
00004AC2                            
00004AC2                            	Level_NoMusicFade:
00004AC2 6100 CD32                  		bsr.w	ClearPLC
00004AC6 6100 D8F0                  		bsr.w	PaletteFadeOut
00004ACA 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
00004ACE 6B00                       		bmi.s	Level_ClrRam	; if yes, branch
00004AD0 46FC 2700                  		disable_ints
00004ADE 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004AE4 6100 C8C6                  		bsr.w	NemDec
00004AE8 46FC 2300                  		enable_ints
00004AEC 7000                       		moveq	#0,d0
00004AEE 1038 FE10                  		move.b	(v_zone).w,d0
00004AF2 E948                       		lsl.w	#4,d0
00004AF4 45F9 0000 0000             		lea	(LevelHeaders).l,a2
00004AFA 45F2 0000                  		lea	(a2,d0.w),a2
00004AFE 7000                       		moveq	#0,d0
00004B00 1012                       		move.b	(a2),d0
00004B02 6700                       		beq.s	loc_37FC
00004B04 6100 CC92                  		bsr.w	AddPLC		; load level patterns
00004B08                            
00004B08                            loc_37FC:
00004B08 7000                       		moveq	#plcid_Main2,d0
00004B0A 6100 CC8C                  		bsr.w	AddPLC		; load standard	patterns
00004B0E 4EB9 0000 0000             		jsr		LoadLifeIcon
00004B14                            		
00004B14                            Level_ClrRam:
00004B14 43F8 D000                  		lea	(v_objspace).w,a1
00004B18 7000                       		moveq	#0,d0
00004B1A 323C 07FF                  		move.w	#$7FF,d1
00004B1E                            
00004B1E                            	Level_ClrObjRam:
00004B1E 22C0                       		move.l	d0,(a1)+
00004B20 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00004B24                            
00004B24 43F8 F628                  		lea	($FFFFF628).w,a1
00004B28 7000                       		moveq	#0,d0
00004B2A 323C 0015                  		move.w	#$15,d1
00004B2E                            
00004B2E                            	Level_ClrVars1:
00004B2E 22C0                       		move.l	d0,(a1)+
00004B30 51C9 FFFC                  		dbf	d1,Level_ClrVars1 ; clear misc variables
00004B34                            
00004B34 43F8 F700                  		lea	(v_screenposx).w,a1
00004B38 7000                       		moveq	#0,d0
00004B3A 323C 003F                  		move.w	#$3F,d1
00004B3E                            
00004B3E                            	Level_ClrVars2:
00004B3E 22C0                       		move.l	d0,(a1)+
00004B40 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00004B44                            
00004B44 43F8 FE60                  		lea	(v_oscillate+2).w,a1
00004B48 7000                       		moveq	#0,d0
00004B4A 323C 0047                  		move.w	#$47,d1
00004B4E                            
00004B4E                            	Level_ClrVars3:
00004B4E 22C0                       		move.l	d0,(a1)+
00004B50 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00004B54                            
00004B54 46FC 2700                  		disable_ints
00004B58 6100 C6D4                  		bsr.w	ClearScreen
00004B5C 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00004B62 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00004B66 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00004B6A 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00004B6E 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
00004B72 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00004B76 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
00004B7A 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
00004B7E 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
00004B84 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
00004B88                            
00004B88 31FC C800 C8FC             		ResetDMAQueue	
00004B8E                            		
00004B8E 4EB9 0000 0000             		jsr 	LoadSRAMConfig
00004B94                            
00004B94 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
00004B9A 6600                       		bne.s	Level_LoadPal	; if not, branch
00004B9C                            
00004B9C 3CBC 8014                  		move.w	#$8014,(a6)	; enable H-interrupts
00004BA0 7000                       		moveq	#0,d0
00004BA2 1038 FE11                  		move.b	(v_act).w,d0
00004BA6 D040                       		add.w	d0,d0
00004BA8 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00004BAE 3031 0000                  		move.w	(a1,d0.w),d0
00004BB2 31C0 F646                  		move.w	d0,(v_waterpos1).w ; set water heights
00004BB6 31C0 F648                  		move.w	d0,(v_waterpos2).w
00004BBA 31C0 F64A                  		move.w	d0,(v_waterpos3).w
00004BBE 4238 F64D                  		clr.b	(v_wtr_routine).w ; clear water routine counter
00004BC2 4238 F64E                  		clr.b	(f_wtr_state).w	; clear	water state
00004BC6 11FC 0001 F64C             		move.b	#1,(f_water).w	; enable water
00004BCC                            
00004BCC                            Level_LoadPal:
00004BCC 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00004BD2 46FC 2300                  		move	#$2300,sr
00004BD6 4EB9 0000 0000             		jsr		LoadPlayerPal
00004BDC 6100 DAC0                  		bsr.w	PalLoad2	; load Sonic's pallet line
00004BE0 0C38 0001 F64C             		cmp.b	#1,(f_water).w ; Is water enabled?
00004BE6 6600                       		bne.s	Level_GetBgm	; if not, branch
00004BE8 4EB9 0000 0000             		jsr		LoadPlayerWaterPal
00004BEE 6100 DAEE                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00004BF2 4A38 FE30                  		tst.b	($FFFFFE30).w
00004BF6 6700                       		beq.s	Level_GetBgm
00004BF8 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00004BFE                            
00004BFE                            	Level_GetBgm:
00004BFE 4A78 FFF0                  		tst.w	(f_demo).w
00004C02 6B00                               	bmi.s	Level_SkipTtlCard
00004C04 7000                               	moveq	#0,d0
00004C06 3038 FE10                  		move.w	(v_zone).w,d0
00004C0A E418                       		ror.b	#2,d0
00004C0C EC48                       		lsr.w   #6,d0
00004C0E 43F9 0000 4A92                     	lea	(MusicList).l,a1 ; load    music playlist
00004C14 1031 0000                          	move.b	(a1,d0.w),d0
00004C18 11C0 F5C6                  		move.b	d0,((v_Saved_music)).w
00004C1C 6100 C6DA                          	bsr.w	PlaySound    ; play music
00004C20 11FC 0000 D080                     	move.b	#id_TitleCard,(v_objspace+$80).w ; load title card object
00004C26                            
00004C26                            
00004C26                            Level_TtlCardLoop:
00004C26 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
00004C2C 6100 F0C8                  		bsr.w	WaitForVBla
00004C30 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004C36 4EB9 0000 0000             		jsr	(BuildSprites).l
00004C3C 6100 CBC6                  		bsr.w	RunPLC
00004C40 3038 D108                  		move.w	(v_objspace+$108).w,d0
00004C44 B078 D130                  		cmp.w	(v_objspace+$130).w,d0 ; has title card sequence finished?
00004C48 66DC                       		bne.s	Level_TtlCardLoop ; if not, branch
00004C4A 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are there any items in the pattern load cue?
00004C4E 66D6                       		bne.s	Level_TtlCardLoop ; if yes, branch
00004C50 4EB9 0000 0000             		jsr	(Hud_Base).l	; load basic HUD gfx
00004C56                            
00004C56                            	Level_SkipTtlCard:
00004C56 4EB9 0000 0000             		jsr		LoadPlayerPal
00004C5C 6100 DA04                  		bsr.w	PalLoad1	; load Sonic's palette
00004C60 6100 0000                  		bsr.w	LevelSizeLoad
00004C64 6100 0000                  		bsr.w	DeformLayers
00004C68 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
00004C6E 6100 0000                  		bsr.w	LevelDataLoad ; load block mappings and palettes
00004C72 6100 0000                  		bsr.w	LoadTilesFromStart
00004C76 4EB9 0000 0000             		jsr	(FloorLog_Unk).l
00004C7C 6100 0000                  		bsr.w	ColIndexLoad
00004C80 6100 0000                  		bsr.w	LZWaterFeatures
00004C84 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00004C8A 4A78 FFF0                  		tst.w	(f_demo).w
00004C8E 6B00                       		bmi.s	Level_ChkDebug
00004C90 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
00004C96                            
00004C96                            Level_ChkDebug:
00004C96 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
00004C9A 6700                       		beq.s	Level_ChkWater	; if not, branch
00004C9C 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button held?
00004CA2 6700                       		beq.s	Level_ChkWater	; if not, branch
00004CA4 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00004CAA                            
00004CAA                            Level_ChkWater:
00004CAA 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
00004CB0 31FC 0000 F604             		move.w	#0,(v_jpadhold1).w
00004CB6 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
00004CBC 6600                       		bne.s	Level_LoadObj	; if not, branch
00004CBE 11FC 0000 D780             		move.b	#id_WaterSurface,(v_objspace+$780).w ; load water surface object
00004CC4 31FC 0060 D788             		move.w	#$60,(v_objspace+$780+obX).w
00004CCA 11FC 0000 D7C0             		move.b	#id_WaterSurface,(v_objspace+$7C0).w
00004CD0 31FC 0120 D7C8             		move.w	#$120,(v_objspace+$7C0+obX).w
00004CD6                            
00004CD6                            Level_LoadObj:
00004CD6 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004CDC 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004CE2 4EB9 0000 0000             		jsr	(BuildSprites).l
00004CE8 7000                       		moveq	#0,d0
00004CEA 4A38 FE30                  		tst.b	(v_lastlamp).w	; are you starting from	a lamppost?
00004CEE 6600                       		bne.s	Level_SkipClr	; if yes, branch
00004CF0 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004CF4 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004CF8 11C0 FE1B                  		move.b	d0,(v_lifecount).w ; clear lives counter
00004CFC 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS - reset water state
00004D02                            
00004D02                            	Level_SkipClr:
00004D02 11C0 FE1A                  		move.b	d0,(f_timeover).w
00004D06 11C0 FE2C                  		move.b	d0,(v_shield).w	; clear shield
00004D0A 11C0 F5C8                  		move.b	d0,(v_rshield).w; clear red shield
00004D0E 11C0 F5C9                  		move.b	d0,(v_gshield).w; clear gold shield
00004D12 11C0 F5CA                  		move.b	d0,(v_spshield).w; clear gold shield
00004D16 11C0 FE2D                  		move.b	d0,(v_invinc).w	; clear invincibility
00004D1A 11C0 FE2E                  		move.b	d0,(v_shoes).w	; clear speed shoes
00004D1E 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00004D22 31C0 FE08                  		move.w	d0,(v_debuguse).w
00004D26 31C0 FE02                  		move.w	d0,(f_restart).w
00004D2A 31C0 FE04                  		move.w	d0,(v_framecount).w
00004D2E 6100 0000                  		bsr.w	OscillateNumInit
00004D32 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00004D38 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00004D3E 11FC 0001 FE1E             		move.b	#1,(f_timecount).w ; update time counter
00004D44 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
00004D4A 43F9 0000 0000             		lea	(DemoDataPtr).l,a1 ; load demo data
00004D50 7000                       		moveq	#0,d0
00004D52 1038 FE10                  		move.b	(v_zone).w,d0
00004D56 E548                       		lsl.w	#2,d0
00004D58 2271 0000                  		movea.l	(a1,d0.w),a1
00004D5C 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00004D60 6A00                       		bpl.s	Level_Demo	; if yes, branch
00004D62 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1 ; load ending demo data
00004D68 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00004D6C 5340                       		subq.w	#1,d0
00004D6E E548                       		lsl.w	#2,d0
00004D70 2271 0000                  		movea.l	(a1,d0.w),a1
00004D74                            
00004D74                            Level_Demo:
00004D74 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w ; load key press duration
00004D7A 5338 F792                  		subq.b	#1,(v_btnpushtime2).w ; subtract 1 from duration
00004D7E 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00004D84 4A78 FFF0                  		tst.w	(f_demo).w
00004D88 6A00                       		bpl.s	Level_ChkWaterPal
00004D8A 31FC 021C F614             		move.w	#540,(v_demolength).w
00004D90 0C78 0004 FFF4             		cmpi.w	#4,(v_creditsnum).w
00004D96 6600                       		bne.s	Level_ChkWaterPal
00004D98 31FC 01FE F614             		move.w	#510,(v_demolength).w
00004D9E                            
00004D9E                            Level_ChkWaterPal:
00004D9E 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ/SBZ3?
00004DA4 6600                       		bne.s	Level_Delay	; if not, branch
00004DA6 700B                       		moveq	#palid_LZWater,d0 ; palette $B (LZ underwater)
00004DA8 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; is level SBZ3?
00004DAE 6600                       		bne.s	Level_WtrNotSbz	; if not, branch
00004DB0 700D                       		moveq	#palid_SBZ3Water,d0 ; palette $D (SBZ3 underwater)
00004DB2                            
00004DB2                            	Level_WtrNotSbz:
00004DB2 6100 D966                  		bsr.w	PalLoad4_Water
00004DB6                            
00004DB6                            Level_Delay:
00004DB6 323C 0003                  		move.w	#3,d1
00004DBA                            
00004DBA                            	Level_DelayLoop:
00004DBA 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004DC0 6100 EF34                  		bsr.w	WaitForVBla
00004DC4 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00004DC8                            
00004DC8 31FC 202F F626             		move.w	#$202F,(v_pfade_start).w ; fade in 2nd, 3rd & 4th palette lines
00004DCE 6100 D548                  		bsr.w	PalFadeIn_Alt
00004DD2 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
00004DD6 6B00                       		bmi.s	Level_ClrCardArt ; if yes, branch
00004DD8 5438 D0A4                  		addq.b	#2,(v_objspace+$80+obRoutine).w ; make title card move
00004DDC 5838 D0E4                  		addq.b	#4,(v_objspace+$C0+obRoutine).w
00004DE0 5838 D124                  		addq.b	#4,(v_objspace+$100+obRoutine).w
00004DE4 5838 D164                  		addq.b	#4,(v_objspace+$140+obRoutine).w
00004DE8 6000                       		bra.s	Level_StartGame
00004DEA                            ; ===========================================================================
00004DEA                            
00004DEA                            Level_ClrCardArt:
00004DEA 7000                       		moveq	#plcid_Explode,d0
00004DEC 4EB9 0000 1798             		jsr	(AddPLC).l	; load explosion gfx
00004DF2 7000                       		moveq	#0,d0
00004DF4 1038 FE10                  		move.b	(v_zone).w,d0
00004DF8 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
00004DFC 4EB9 0000 1798             		jsr	(AddPLC).l	; load animal gfx (level no. + $15)
00004E02                            
00004E02                            Level_StartGame:
00004E02 08B8 0007 F600             		bclr	#7,(v_gamemode).w ; subtract $80 from mode to end pre-level stuff
00004E08                            
00004E08                            ; ---------------------------------------------------------------------------
00004E08                            ; Main level loop (when	all title card and loading sequences are finished)
00004E08                            ; ---------------------------------------------------------------------------
00004E08                            
00004E08                            Level_MainLoop:
00004E08 6100 C500                  		bsr.w	PauseGame
00004E0C 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004E12 6100 EEE2                  		bsr.w	WaitForVBla
00004E16 5278 FE04                  		addq.w	#1,(v_framecount).w ; add 1 to level timer
00004E1A 6100 0000                  		bsr.w	MoveSonicInDemo
00004E1E 6100 0000                  		bsr.w	LZWaterFeatures
00004E22 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004E28 4A78 FE02                  			tst.w   (f_restart).w
00004E2C 6600 FC80                  			bne     GM_Level
00004E30 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00004E34 6600                       		bne.s	Level_DoScroll	; if yes, branch
00004E36 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004E3C 6400                       		bhs.s	Level_SkipScroll ; if yes, branch
00004E3E                            
00004E3E                            	Level_DoScroll:
00004E3E 6100 0000                  		bsr.w	DeformLayers
00004E42                            
00004E42                            	Level_SkipScroll:
00004E42 4EB9 0000 0000             		jsr	(BuildSprites).l
00004E48 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004E4E 6100 CF2C                  		bsr.w	PaletteCycle
00004E52 6100 C9B0                  		bsr.w	RunPLC
00004E56 6100 0000                  		bsr.w	OscillateNumDo
00004E5A 6100 0000                  		bsr.w	SynchroAnimate
00004E5E 6100 0000                  		bsr.w	SignpostArtLoad
00004E62                            
00004E62 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004E68 6700                       		beq.s	Level_ChkDemo	; if mode is 8 (demo), branch
00004E6A 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w
00004E70 6700 FF96                  		beq.w	Level_MainLoop	; if mode is $C (level), branch
00004E74 4E75                       		rts	
00004E76                            ; ===========================================================================
00004E76                            
00004E76                            Level_ChkDemo:
00004E76 4A78 FE02                  		tst.w	(f_restart).w	; is level set to restart?
00004E7A 6600                       		bne.s	Level_EndDemo	; if yes, branch
00004E7C 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00004E80 6700                       		beq.s	Level_EndDemo	; if not, branch
00004E82 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004E88 6700 FF7E                  		beq.w	Level_MainLoop	; if mode is 8 (demo), branch
00004E8C 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004E92 4E75                       		rts	
00004E94                            ; ===========================================================================
00004E94                            
00004E94                            Level_EndDemo:
00004E94 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004E9A 6600                       		bne.s	Level_FadeDemo	; if mode is 8 (demo), branch
00004E9C 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004EA2 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on & not ending sequence?
00004EA6 6A00                       		bpl.s	Level_FadeDemo	; if yes, branch
00004EA8 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; go to credits
00004EAE                            
00004EAE                            Level_FadeDemo:
00004EAE 31FC 003C F614             		move.w	#$3C,(v_demolength).w
00004EB4 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00004EBA 4278 F794                  		clr.w	(v_palchgspeed).w
00004EBE                            
00004EBE                            	Level_FDLoop:
00004EBE 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004EC4 6100 EE30                  		bsr.w	WaitForVBla
00004EC8 6100 0000                  		bsr.w	MoveSonicInDemo
00004ECC 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004ED2 4EB9 0000 0000             		jsr	(BuildSprites).l
00004ED8 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004EDE 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00004EE2 6A00                       		bpl.s	loc_3BC8
00004EE4 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
00004EEA 6100 D4EC                  		bsr.w	FadeOut_ToBlack
00004EEE                            
00004EEE                            loc_3BC8:
00004EEE 4A78 F614                  		tst.w	(v_demolength).w
00004EF2 66CA                       		bne.s	Level_FDLoop
00004EF4 4E75                       		rts	
00004EF6                            ; ===========================================================================
00004EF6                            
00004EF6                            		include	"_inc\LZWaterFeatures.asm"
00004EF6                            ; ---------------------------------------------------------------------------
00004EF6                            ; Subroutine to	do special water effects in Labyrinth Zone
00004EF6                            ; ---------------------------------------------------------------------------
00004EF6                            
00004EF6                            LZWaterFeatures:
00004EF6 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00004EFC 6600                       		bne.s	@notlabyrinth	; if not, branch
00004EFE 4A38 F744                  			tst.b   (f_nobgscroll).w
00004F02 6600                       			bne.s	@setheight
00004F04 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004F0A 6400                       		bcc.s	@setheight	; if yes, skip other effects
00004F0C                            
00004F0C 6100 0000                  		bsr.w	LZWindTunnels
00004F10 6100 0000                  		bsr.w	LZWaterSlides
00004F14 6100 0000                  		bsr.w	LZDynamicWater
00004F18                            
00004F18                            @setheight:
00004F18 4238 F64E                  		clr.b	(f_wtr_state).w
00004F1C 7000                       		moveq	#0,d0
00004F1E 1038 FE60                  		move.b	(v_oscillate+2).w,d0
00004F22 E248                       		lsr.w	#1,d0
00004F24 D078 F648                  		add.w	(v_waterpos2).w,d0
00004F28 31C0 F646                  		move.w	d0,(v_waterpos1).w
00004F2C 3038 F646                  		move.w	(v_waterpos1).w,d0
00004F30 9078 F704                  		sub.w	(v_screenposy).w,d0
00004F34 6400                       		bcc.s	@isbelow
00004F36 4A40                       		tst.w	d0
00004F38 6A00                       		bpl.s	@isbelow	; if water is below top of screen, branch
00004F3A                            
00004F3A 11FC 00DF F625             		move.b	#223,(v_hbla_line).w
00004F40 11FC 0001 F64E             		move.b	#1,(f_wtr_state).w ; screen is all underwater
00004F46                            
00004F46                            	@isbelow:
00004F46 0C40 00DF                  		cmpi.w	#223,d0		; is water within 223 pixels of top of screen?
00004F4A 6500                       		bcs.s	@isvisible	; if yes, branch
00004F4C 303C 00DF                  		move.w	#223,d0
00004F50                            
00004F50                            	@isvisible:
00004F50 11C0 F625                  		move.b	d0,(v_hbla_line).w ; set water surface as on-screen
00004F54                            
00004F54                            @notlabyrinth:
00004F54 4E75                       		rts	
00004F56                            ; ===========================================================================
00004F56                            ; ---------------------------------------------------------------------------
00004F56                            ; Initial water heights
00004F56                            ; ---------------------------------------------------------------------------
00004F56 0420                       WaterHeight:	dc.w $420	; Labyrinth 1
00004F58 0328                       		dc.w $328	; Labyrinth 2
00004F5A 0900                       		dc.w $900	; Labyrinth 3
00004F5C 0228                       		dc.w $228	; Scrap Brain 3
00004F5E                            		even
00004F5E                            ; ===========================================================================
00004F5E                            
00004F5E                            ; ---------------------------------------------------------------------------
00004F5E                            ; Labyrinth dynamic water routines
00004F5E                            ; ---------------------------------------------------------------------------
00004F5E                            
00004F5E                            LZDynamicWater:
00004F5E 7000                       		moveq	#0,d0
00004F60 1038 FE11                  		move.b	(v_act).w,d0
00004F64 D040                       		add.w	d0,d0
00004F66 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00004F6A 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004F6E 7200                       		moveq	#0,d1
00004F70 1238 F64C                  		move.b	(f_water).w,d1
00004F74 3038 F64A                  		move.w	(v_waterpos3).w,d0
00004F78 9078 F648                  		sub.w	(v_waterpos2).w,d0
00004F7C 6700                       		beq.s	@exit		; if water level is correct, branch
00004F7E 6400                       		bcc.s	@movewater	; if water level is too high, branch
00004F80 4441                       		neg.w	d1		; set water to move up instead
00004F82                            
00004F82                            	@movewater:
00004F82 D378 F648                  		add.w	d1,(v_waterpos2).w ; move water up/down
00004F86                            
00004F86                            	@exit:
00004F86 4E75                       		rts	
00004F88                            ; ===========================================================================
00004F88 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00004F8A 0000                       		dc.w DynWater_LZ2-DynWater_Index
00004F8C 0000                       		dc.w DynWater_LZ3-DynWater_Index
00004F8E 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00004F90                            ; ===========================================================================
00004F90                            
00004F90                            DynWater_LZ1:
00004F90 4E75                       		rts	
00004F92                            ; ===========================================================================
00004F92                            
00004F92                            DynWater_LZ2:
00004F92 3038 F700                  		move.w	(v_screenposx).w,d0
00004F96 323C 0328                  		move.w	#$328,d1
00004F9A 0C40 0500                  		cmpi.w	#$500,d0
00004F9E 6500                       		bcs.s	@setwater
00004FA0 323C 03C8                  		move.w	#$3C8,d1
00004FA4 0C40 0B00                  		cmpi.w	#$B00,d0
00004FA8 6500                       		bcs.s	@setwater
00004FAA 323C 0428                  		move.w	#$428,d1
00004FAE                            
00004FAE                            	@setwater:
00004FAE 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004FB2 4E75                       		rts	
00004FB4                            ; ===========================================================================
00004FB4                            
00004FB4                            DynWater_LZ3:
00004FB4 3038 F700                  		move.w	(v_screenposx).w,d0
00004FB8 1438 F64D                  		move.b	(v_wtr_routine).w,d2
00004FBC 6600                       		bne.s	@routine2
00004FBE                            
00004FBE 323C 0900                  		move.w	#$900,d1
00004FC2 0C40 0600                  		cmpi.w	#$600,d0	; has screen reached position?
00004FC6 6500                       		bcs.s	@setwaterlz3	; if not, branch
00004FC8 0C78 03C0 D00C             		cmpi.w	#$3C0,(v_player+obY).w
00004FCE 6500                       		bcs.s	@setwaterlz3
00004FD0 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic in a y-axis range?
00004FD6 6400                       		bcc.s	@setwaterlz3	; if not, branch
00004FD8                            
00004FD8 323C 04C8                  		move.w	#$4C8,d1	; set new water height
00004FDC 11FC 004B A506             		move.b	#$4B,(v_lvllayout+$106).w ; update level layout
00004FE2 11FC 0001 F64D             		move.b	#1,(v_wtr_routine).w ; use second routine next
00004FF0                            
00004FF0                            	@setwaterlz3:
00004FF0 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004FF4 31C1 F648                  		move.w	d1,(v_waterpos2).w ; change water height instantly
00004FF8 4E75                       		rts	
00004FFA                            ; ===========================================================================
00004FFA                            
00004FFA                            @routine2:
00004FFA 5302                       		subq.b	#1,d2
00004FFC 6600                       		bne.s	@routine3
00004FFE 323C 04C8                  		move.w	#$4C8,d1
00005002 0C40 0770                  		cmpi.w	#$770,d0
00005006 6500                       		bcs.s	@setwater2
00005008 323C 0308                  		move.w	#$308,d1
0000500C 0C40 1400                  		cmpi.w	#$1400,d0
00005010 6500                       		bcs.s	@setwater2
00005012 0C78 0508 F64A             		cmpi.w	#$508,(v_waterpos3).w
00005018 6700                       		beq.s	@sonicislow
0000501A 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic below $600 y-axis?
00005020 6400                       		bcc.s	@sonicislow	; if yes, branch
00005022 0C78 0280 D00C             		cmpi.w	#$280,(v_player+obY).w
00005028 6400                       		bcc.s	@setwater2
0000502A                            
0000502A                            @sonicislow:
0000502A 323C 0508                  		move.w	#$508,d1
0000502E 31C1 F648                  		move.w	d1,(v_waterpos2).w
00005032 0C40 1770                  		cmpi.w	#$1770,d0
00005036 6500                       		bcs.s	@setwater2
00005038 11FC 0002 F64D             		move.b	#2,(v_wtr_routine).w
0000503E                            
0000503E                            	@setwater2:
0000503E 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00005042 4E75                       		rts	
00005044                            ; ===========================================================================
00005044                            
00005044                            @routine3:
00005044 5302                       		subq.b	#1,d2
00005046 6600                       		bne.s	@routine4
00005048 323C 0508                  		move.w	#$508,d1
0000504C 0C40 1860                  		cmpi.w	#$1860,d0
00005050 6500                       		bcs.s	@setwater3
00005052 323C 0188                  		move.w	#$188,d1
00005056 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000505A 6400                       		bcc.s	@loc_3DC6
0000505C B278 F648                  		cmp.w	(v_waterpos2).w,d1
00005060 6600                       		bne.s	@setwater3
00005062                            
00005062                            	@loc_3DC6:
00005062 11FC 0003 F64D             		move.b	#3,(v_wtr_routine).w
00005068                            
00005068                            	@setwater3:
00005068 31C1 F64A                  		move.w	d1,(v_waterpos3).w
0000506C 4E75                       		rts	
0000506E                            ; ===========================================================================
0000506E                            
0000506E                            @routine4:
0000506E 5302                       		subq.b	#1,d2
00005070 6600                       		bne.s	@routine5
00005072 323C 0188                  		move.w	#$188,d1
00005076 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000507A 6500                       		bcs.s	@setwater4
0000507C 323C 0900                  		move.w	#$900,d1
00005080 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00005084 6500                       		bcs.s	@setwater4
00005086 11FC 0004 F64D             		move.b	#4,(v_wtr_routine).w
0000508C 31FC 0608 F64A             		move.w	#$608,(v_waterpos3).w
00005092 31FC 07C0 F648             		move.w	#$7C0,(v_waterpos2).w
00005098 11FC 0001 F7E8             		move.b	#1,(f_switch+8).w
0000509E 4E75                       		rts	
000050A0                            ; ===========================================================================
000050A0                            
000050A0                            @setwater4:
000050A0 31C1 F64A                  		move.w	d1,(v_waterpos3).w
000050A4 31C1 F648                  		move.w	d1,(v_waterpos2).w
000050A8 4E75                       		rts	
000050AA                            ; ===========================================================================
000050AA                            
000050AA                            @routine5:
000050AA 0C40 1E00                  		cmpi.w	#$1E00,d0	; has screen passed final position?
000050AE 6500                       		bcs.s	@dontset	; if not, branch
000050B0 31FC 0128 F64A             		move.w	#$128,(v_waterpos3).w
000050B6                            
000050B6                            	@dontset:
000050B6 4E75                       		rts	
000050B8                            ; ===========================================================================
000050B8                            
000050B8                            DynWater_SBZ3:
000050B8                            	;	move.w	#$228,d1
000050B8                            	;	cmpi.w	#$F00,(v_screenposx).w
000050B8                            	;	bcs.s	@setwater
000050B8                            	;	move.w	#$4C8,d1
000050B8                            
000050B8                            	;@setwater:
000050B8                            		;move.w	d1,(v_waterpos3).w
000050B8 4E75                       		rts
000050BA                            
000050BA                            ; ---------------------------------------------------------------------------
000050BA                            ; Labyrinth Zone "wind tunnels"	subroutine
000050BA                            ; ---------------------------------------------------------------------------
000050BA                            
000050BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000050BA                            
000050BA                            
000050BA                            LZWindTunnels:
000050BA 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
000050BE 6600 0000                  		bne.w	@quit	; if yes, branch
000050C2 45F9 0000 0000             		lea	(LZWind_Data+8).l,a2
000050C8 7000                       		moveq	#0,d0
000050CA 1038 FE11                  		move.b	(v_act).w,d0	; get act number
000050CE E748                       		lsl.w	#3,d0		; multiply by 8
000050D0 D4C0                       		adda.w	d0,a2		; add to address for data
000050D2 7200                       		moveq	#0,d1
000050D4 4A38 FE11                  		tst.b	(v_act).w	; is act number 1?
000050D8 6600                       		bne.s	@notact1	; if not, branch
000050DA 7201                       		moveq	#1,d1
000050DC 514A                       		subq.w	#8,a2		; use different data for act 1
000050DE                            
000050DE                            	@notact1:
000050DE 43F8 D000                  		lea	(v_player).w,a1
000050E2                            
000050E2                            @chksonic:
000050E2 3029 0008                  		move.w	obX(a1),d0
000050E6 B052                       		cmp.w	(a2),d0
000050E8 6500 0000                  		bcs.w	@chknext
000050EC B06A 0004                  		cmp.w	4(a2),d0
000050F0 6400 0000                  		bcc.w	@chknext
000050F4 3429 000C                  		move.w	obY(a1),d2
000050F8 B46A 0002                  		cmp.w	2(a2),d2
000050FC 6500                       		bcs.s	@chknext
000050FE B46A 0006                  		cmp.w	6(a2),d2
00005102 6400                       		bcc.s	@chknext	; branch if Sonic is outside a range
00005104 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00005108 0200 003F                  		andi.b	#$3F,d0		; does VInt counter fall on 0, $40, $80 or $C0?
0000510C 6600                       		bne.s	@skipsound	; if not, branch
00005118                            
00005118                            	@skipsound:
00005118 4A38 F7C9                  		tst.b	(f_wtunnelallow).w ; are wind tunnels disabled?
0000511C 6600 0000                  		bne.w	@quit	; if yes, branch
00005120 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1) ; is Sonic hurt/dying?
00005126 6400                       		bcc.s	@clrquit	; if yes, branch
00005128 11FC 0001 F7C7             		move.b	#1,(f_wtunnelmode).w
0000512E 0440 0080                  		subi.w	#$80,d0
00005132 B052                       		cmp.w	(a2),d0
00005134 6400                       		bcc.s	@movesonic
00005136 7002                       		moveq	#2,d0
00005138 0C38 0001 FE11             		cmpi.b	#1,(v_act).w	; is act number 2?
0000513E 6600                       		bne.s	@notact2	; if not, branch
00005140 4440                       		neg.w	d0
00005142                            
00005142                            	@notact2:
00005142 D169 000C                  		add.w	d0,obY(a1)	; adjust Sonic's y-axis for curve of tunnel
00005146                            
00005146                            @movesonic:
00005146 5869 0008                  		addq.w	#4,obX(a1)
0000514A 337C 0400 0010             		move.w	#$400,obVelX(a1) ; move Sonic horizontally
00005150 337C 0000 0012             		move.w	#0,obVelY(a1)
00005156 137C 0000 001C             		move.b	#id_Float2,obAnim(a1)	; use floating animation
0000515C 08E9 0001 0022             		bset	#1,obStatus(a1)
00005162 0838 0000 F602             		btst	#0,(v_jpadhold2).w ; is up pressed?
00005168 6700                       		beq.s	@down		; if not, branch
0000516A 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up on pole
0000516E                            
0000516E                            	@down:
0000516E 0838 0001 F602             		btst	#1,(v_jpadhold2).w ; is down being pressed?
00005174 6700                       		beq.s	@end		; if not, branch
00005176 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down on pole
0000517A                            
0000517A                            	@end:
0000517A 4E75                       		rts	
0000517C                            ; ===========================================================================
0000517C                            
0000517C                            @chknext:
0000517C 504A                       		addq.w	#8,a2		; use second set of values (act 1 only)
0000517E 51C9 FF62                  		dbf	d1,@chksonic	; on act 1, repeat for a second tunnel
00005182 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic still in a tunnel?
00005186 6700                       		beq.s	@quit		; if yes, branch
00005188 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
0000518E                            
0000518E                            @clrquit:
0000518E 4238 F7C7                  		clr.b	(f_wtunnelmode).w ; finish tunnel
00005192                            
00005192                            @quit:
00005192 4E75                       		rts	
00005194                            ; End of function LZWindTunnels
00005194                            
00005194                            ; ===========================================================================
00005194                            
00005194                            		;    left, top,  right, bottom boundaries
00005194 0A80 0300 0C10 0380        LZWind_Data:	dc.w $A80, $300, $C10,  $380 ; act 1 values (set 1)
0000519C 0F80 0100 1410 0180        		dc.w $F80, $100, $1410,	$180 ; act 1 values (set 2)
000051A4 0460 0400 0710 0480        		dc.w $460, $400, $710,  $480 ; act 2 values
000051AC 0A20 0600 1610 06E0        		dc.w $A20, $600, $1610, $6E0 ; act 3 values
000051B4 0C80 0600 13D0 0780        		dc.w $C80, $600, $13D0, $780 ; SBZ act 3 values
000051BC                            		even
000051BC                            
000051BC                            ; ---------------------------------------------------------------------------
000051BC                            ; Labyrinth Zone water slide subroutine
000051BC                            ; ---------------------------------------------------------------------------
000051BC                            
000051BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000051BC                            
000051BC                            
000051BC                            LZWaterSlides:
000051BC 43F8 D000                  		lea	(v_player).w,a1
000051C0 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic jumping?
000051C6 6600                       		bne.s	loc_3F6A	; if not, branch
000051C8 3029 000C                  		move.w	obY(a1),d0
000051CC E248                       		lsr.w	#1,d0
000051CE 0240 0380                  		andi.w	#$380,d0
000051D2 1229 0008                  		move.b	obX(a1),d1
000051D6 0241 007F                  		andi.w	#$7F,d1
000051DA D041                       		add.w	d1,d0
000051DC 45F8 A400                  		lea	(v_lvllayout).w,a2
000051E0 1032 0000                  		move.b	(a2,d0.w),d0
000051E4 45FA 0000                  		lea	Slide_Chunks_End(pc),a2
000051E8 7200                       		moveq	#Slide_Chunks_End-Slide_Chunks-1,d1
000051EA                            
000051EA                            loc_3F62:
000051EA B022                       		cmp.b	-(a2),d0
000051EC 57C9 FFFC                  		dbeq	d1,loc_3F62
000051F0 6700                       		beq.s	LZSlide_Move
000051F2                            
000051F2                            loc_3F6A:
000051F2 4A38 F7CA                  		tst.b	(f_jumponly).w
000051F6 6700                       		beq.s	locret_3F7A
000051F8 337C 0005 003E             		move.w	#5,$3E(a1)
000051FE 4238 F7CA                  		clr.b	(f_jumponly).w
00005202                            
00005202                            locret_3F7A:
00005202 4E75                       		rts	
00005204                            ; ===========================================================================
00005204                            
00005204                            LZSlide_Move:
00005204 0C41 0003                  		cmpi.w	#3,d1
00005208 6400                       		bcc.s	loc_3F84
0000520A 4E71                       		nop	
0000520C                            
0000520C                            loc_3F84:
0000520C 08A9 0000 0022             		bclr	#0,obStatus(a1)
00005212 103B 1000                  		move.b	Slide_Speeds(pc,d1.w),d0
00005216 1340 0020                  		move.b	d0,obInertia(a1)
0000521A 6A00                       		bpl.s	loc_3F9A
0000521C 08E9 0000 0022             		bset	#0,obStatus(a1)
00005222                            
00005222                            loc_3F9A:
00005222 4229 0021                  		clr.b	obInertia+1(a1)
00005226 137C 0000 001C             		move.b	#id_WaterSlide,obAnim(a1) ; use Sonic's "sliding" animation
0000522C 11FC 0001 F7CA             		move.b	#1,(f_jumponly).w ; lock controls (except jumping)
00005232 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00005236 0200 001F                  		andi.b	#$1F,d0
0000523A 6600                       		bne.s	locret_3FBE
00005246                            
00005246                            locret_3FBE:
00005246 4E75                       		rts	
00005248                            ; End of function LZWaterSlides
00005248                            
00005248                            ; ===========================================================================
00005248                            ; byte_3FC0:
00005248                            Slide_Speeds:
00005248 0AF5 0AF6 F5F4 0B          		dc.b $A, $F5, $A, $F6, $F5, $F4, $B
00005250 00                         		even
00005250                            
00005250                            Slide_Chunks:
00005250 54                         		dc.b $54 ;2, 7, 3, $4C, $4B, 8, 4
00005251                            ; byte_3FCF
00005251                            Slide_Chunks_End
00005252 00                         		even
00005252 00                         		even
00005252                            		include	"_inc\MoveSonicInDemo.asm"
00005252                            ; ---------------------------------------------------------------------------
00005252                            ; Subroutine to	move Sonic in demo mode
00005252                            ; ---------------------------------------------------------------------------
00005252                            
00005252                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005252                            
00005252                            
00005252                            MoveSonicInDemo:
00005252 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00005256 6600                       		bne.s	MDemo_On	; if yes, branch
00005258 4E75                       		rts	
0000525A                            ; ===========================================================================
0000525A                            
0000525A                            ; This is an unused subroutine for recording a demo
0000525A                            
0000525A                            DemoRecorder:
0000525A 43F9 0008 0000             		lea	($80000).l,a1
00005260 3038 F790                  		move.w	(v_btnpushtime1).w,d0
00005264 D2C0                       		adda.w	d0,a1
00005266 1038 F604                  		move.b	(v_jpadhold1).w,d0
0000526A B011                       		cmp.b	(a1),d0
0000526C 6600                       		bne.s	@next
0000526E 5229 0001                  		addq.b	#1,1(a1)
00005272 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00005278 6700                       		beq.s	@next
0000527A 4E75                       		rts	
0000527C                            
0000527C                            	@next:
0000527C 1340 0002                  		move.b	d0,2(a1)
00005280 137C 0000 0003             		move.b	#0,3(a1)
00005286 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
0000528A 0278 03FF F790             		andi.w	#$3FF,(v_btnpushtime1).w
00005290 4E75                       		rts	
00005292                            ; ===========================================================================
00005292                            
00005292                            MDemo_On:
00005292 4A38 F604                  		tst.b	(v_jpadhold1).w	; is start button pressed?
00005296 6A00                       		bpl.s	@dontquit	; if not, branch
00005298 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
0000529C 6B00                       		bmi.s	@dontquit	; if yes, branch
0000529E 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
000052A4                            
000052A4                            	@dontquit:
000052A4 43F9 0000 0000             		lea	(DemoDataPtr).l,a1
000052AA 7000                       		moveq	#0,d0
000052AC 1038 FE10                  		move.b	(v_zone).w,d0
000052B0 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is this a special stage?
000052B6 6600                       		bne.s	@notspecial	; if not, branch
000052B8 7006                       		moveq	#6,d0		; use demo #6
000052BA                            
000052BA                            	@notspecial:
000052BA E548                       		lsl.w	#2,d0
000052BC 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for demo data
000052C0 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
000052C4 6A00                       		bpl.s	@notcredits	; if not, branch
000052C6 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1
000052CC 3038 FFF4                  		move.w	(v_creditsnum).w,d0
000052D0 5340                       		subq.w	#1,d0
000052D2 E548                       		lsl.w	#2,d0
000052D4 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for credits demo
000052D8                            
000052D8                            	@notcredits:
000052D8 3038 F790                  		move.w	(v_btnpushtime1).w,d0
000052DC D2C0                       		adda.w	d0,a1
000052DE 1011                       		move.b	(a1),d0
000052E0 41F8 F604                  		lea	(v_jpadhold1).w,a0
000052E4 1200                       		move.b	d0,d1
000052E6 7400                       			moveq	#0,d2
000052E8 B500                       		eor.b	d2,d0
000052EA 10C1                       		move.b	d1,(a0)+
000052EC C001                       		and.b	d1,d0
000052EE 10C0                       		move.b	d0,(a0)+
000052F0 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
000052F4 6400                       		bcc.s	@end
000052F6 11E9 0003 F792             		move.b	3(a1),(v_btnpushtime2).w
000052FC 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
00005300                            
00005300                            	@end:
00005300 4E75                       		rts	
00005302                            ; End of function MoveSonicInDemo
00005302                            
00005302                            ; ===========================================================================
00005302                            ; ---------------------------------------------------------------------------
00005302                            ; Demo sequence	pointers
00005302                            ; ---------------------------------------------------------------------------
00005302 0000 0000                  DemoDataPtr:	dc.l Demo_GHZ		; demos run after the title screen
00005306 0000 0000                  		dc.l Demo_GHZ
0000530A 0000 0000                  		dc.l Demo_MZ
0000530E 0000 0000                  		dc.l Demo_MZ
00005312 0000 0000                  		dc.l Demo_SYZ
00005316 0000 0000                  		dc.l Demo_SYZ
0000531A 0000 0000                  		dc.l Demo_SS
0000531E 0000 0000                  		dc.l Demo_SS
00005322                            
00005322 0000 0000                  DemoEndDataPtr:	dc.l Demo_EndGHZ1	; demos run during the credits
00005326 0000 0000                  		dc.l Demo_EndMZ
0000532A 0000 0000                  		dc.l Demo_EndSYZ
0000532E 0000 0000                  		dc.l Demo_EndLZ
00005332 0000 0000                  		dc.l Demo_EndSLZ
00005336 0000 0000                  		dc.l Demo_EndSBZ1
0000533A 0000 0000                  		dc.l Demo_EndSBZ2
0000533E 0000 0000                  		dc.l Demo_EndGHZ2
00005342                            
00005342 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00005352 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00005362 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00005372                            		even
00005372                            		even
00005372                            
00005372                            ; ---------------------------------------------------------------------------
00005372                            ; Collision index pointer loading subroutine
00005372                            ; ---------------------------------------------------------------------------
00005372                            
00005372                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005372                            
00005372                            
00005372                            ColIndexLoad:
00005372 7000                       		moveq	#0,d0
00005374 1038 FE10                  		move.b	(v_zone).w,d0
00005378 E548                       		lsl.w	#2,d0
0000537A 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),(v_collindex).w
00005380 4E75                       		rts	
00005382                            ; End of function ColIndexLoad
00005382                            
00005382                            ; ===========================================================================
00005382                            ; ---------------------------------------------------------------------------
00005382                            ; Collision index pointers
00005382                            ; ---------------------------------------------------------------------------
00005382 0000 0000                  ColPointers:	dc.l Col_GHZ
00005386 0000 0000                  		dc.l Col_LZ
0000538A 0000 0000                  		dc.l Col_MZ
0000538E 0000 0000                  		dc.l Col_SLZ
00005392 0000 0000                  		dc.l Col_SYZ
00005396 0000 0000                  		dc.l Col_SBZ
0000539A                            ;		dc.l Col_GHZ ; Pointer for Ending is missing by default.
0000539A                            
0000539A                            		include	"_inc\Oscillatory Routines.asm"
0000539A                            ; ---------------------------------------------------------------------------
0000539A                            ; Oscillating number subroutines
0000539A                            ; ---------------------------------------------------------------------------
0000539A                            
0000539A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000539A                            
0000539A                            ; Initialise the values
0000539A                            
0000539A                            OscillateNumInit:
0000539A 43F8 FE5E                  		lea	(v_oscillate).w,a1
0000539E 45F9 0000 0000             		lea	(@baselines).l,a2
000053A4 7220                       		moveq	#$20,d1
000053A6                            
000053A6                            	@loop:
000053A6 32DA                       		move.w	(a2)+,(a1)+	; copy baseline values to RAM
000053A8 51C9 FFFC                  		dbf	d1,@loop
000053AC 4E75                       		rts	
000053AE                            
000053AE                            
000053AE                            ; ===========================================================================
000053AE 007C                       @baselines:	dc.w %0000000001111100	; oscillation direction bitfield
000053B0 0080 0000                  		dc.w $80, 0
000053B4 0080 0000                  		dc.w $80, 0
000053B8 0080 0000                  		dc.w $80, 0
000053BC 0080 0000                  		dc.w $80, 0
000053C0 0080 0000                  		dc.w $80, 0
000053C4 0080 0000                  		dc.w $80, 0
000053C8 0080 0000                  		dc.w $80, 0
000053CC 0080 0000                  		dc.w $80, 0
000053D0 0080 0000                  		dc.w $80, 0
000053D4 50F0 011E                  		dc.w $50F0, $11E
000053D8 2080 00B4                  		dc.w $2080, $B4
000053DC 3080 010E                  		dc.w $3080, $10E
000053E0 5080 01C2                  		dc.w $5080, $1C2
000053E4 7080 0276                  		dc.w $7080, $276
000053E8 0080 0000                  		dc.w $80, 0
000053EC 0080 0000                  		dc.w $80, 0
000053F0                            		even
000053F0                            
000053F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000053F0                            
000053F0                            ; Oscillate values
000053F0                            
000053F0                            OscillateNumDo:
000053F0 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
000053F6 6400                       		bcc.s	@end		; if yes, branch
000053F8 43F8 FE5E                  		lea	(v_oscillate).w,a1
000053FC 45F9 0000 0000             		lea	(@settings).l,a2
00005402 3619                       		move.w	(a1)+,d3	; get oscillation direction bitfield
00005404 720F                       		moveq	#$F,d1
00005406                            
00005406                            @loop:
00005406 341A                       		move.w	(a2)+,d2	; get frequency
00005408 381A                       		move.w	(a2)+,d4	; get amplitude
0000540A 0303                       		btst	d1,d3		; check oscillation direction
0000540C 6600                       		bne.s	@down		; branch if 1
0000540E                            
0000540E                            	@up:
0000540E 3029 0002                  		move.w	2(a1),d0	; get current rate
00005412 D042                       		add.w	d2,d0		; add frequency
00005414 3340 0002                  		move.w	d0,2(a1)
00005418 D151                       		add.w	d0,0(a1)	; add rate to value
0000541A B811                       		cmp.b	0(a1),d4
0000541C 6200                       		bhi.s	@next
0000541E 03C3                       		bset	d1,d3
00005420 6000                       		bra.s	@next
00005422                            
00005422                            	@down:
00005422 3029 0002                  		move.w	2(a1),d0
00005426 9042                       		sub.w	d2,d0
00005428 3340 0002                  		move.w	d0,2(a1)
0000542C D151                       		add.w	d0,0(a1)
0000542E B811                       		cmp.b	0(a1),d4
00005430 6300                       		bls.s	@next
00005432 0383                       		bclr	d1,d3
00005434                            
00005434                            	@next:
00005434 5849                       		addq.w	#4,a1
00005436 51C9 FFCE                  		dbf	d1,@loop
0000543A 31C3 FE5E                  		move.w	d3,(v_oscillate).w
0000543E                            
0000543E                            @end:
0000543E 4E75                       		rts	
00005440                            ; End of function OscillateNumDo
00005440                            
00005440                            ; ===========================================================================
00005440 0002 0010                  @settings:	dc.w 2,	$10	; frequency, amplitude
00005444 0002 0018                  		dc.w 2,	$18
00005448 0002 0020                  		dc.w 2,	$20
0000544C 0002 0030                  		dc.w 2,	$30
00005450 0004 0020                  		dc.w 4,	$20
00005454 0008 0008                  		dc.w 8,	8
00005458 0008 0040                  		dc.w 8,	$40
0000545C 0004 0040                  		dc.w 4,	$40
00005460 0002 0050                  		dc.w 2,	$50
00005464 0002 0050                  		dc.w 2,	$50
00005468 0002 0020                  		dc.w 2,	$20
0000546C 0003 0030                  		dc.w 3,	$30
00005470 0005 0050                  		dc.w 5,	$50
00005474 0007 0070                  		dc.w 7,	$70
00005478 0002 0010                  		dc.w 2,	$10
0000547C 0002 0010                  		dc.w 2,	$10
00005480                            		even
00005480                            		even
00005480                            
00005480                            ; ---------------------------------------------------------------------------
00005480                            ; Subroutine to	change synchronised animation variables (rings, giant rings)
00005480                            ; ---------------------------------------------------------------------------
00005480                            
00005480                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005480                            
00005480                            
00005480                            SynchroAnimate:
00005480                            
00005480                            ; Used for GHZ spiked log
00005480                            Sync1:
00005480 5338 FEC0                  		subq.b	#1,(v_ani0_time).w ; has timer reached 0?
00005484 6A00                       		bpl.s	Sync2		; if not, branch
00005486 11FC 000B FEC0             		move.b	#$B,(v_ani0_time).w ; reset timer
0000548C 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w ; next frame
00005490 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w ; max frame is 7
00005496                            
00005496                            ; Used for rings and giant rings
00005496                            Sync2:
00005496 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
0000549A 6A00                       		bpl.s	Sync3
0000549C 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
000054A2 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
000054A6 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
000054AC                            
000054AC                            ; Used for nothing
000054AC                            Sync3:
000054AC 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
000054B0 6A00                       		bpl.s	Sync4
000054B2 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
000054B8 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
000054BC 0C38 0006 FEC5             		cmpi.b	#6,(v_ani2_frame).w
000054C2 6500                       		blo.s	Sync4
000054C4 11FC 0000 FEC5             		move.b	#0,(v_ani2_frame).w
000054CA                            
000054CA                            ; Used for bouncing rings
000054CA                            Sync4:
000054CA 4A38 FEC6                  		tst.b	(v_ani3_time).w
000054CE 6700                       		beq.s	SyncEnd
000054D0 7000                       		moveq	#0,d0
000054D2 1038 FEC6                  		move.b	(v_ani3_time).w,d0
000054D6 D078 FEC8                  		add.w	(v_ani3_buf).w,d0
000054DA 31C0 FEC8                  		move.w	d0,(v_ani3_buf).w
000054DE EF58                       		rol.w	#7,d0
000054E0 0240 0003                  		andi.w	#3,d0
000054E4 11C0 FEC7                  		move.b	d0,(v_ani3_frame).w
000054E8 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
000054EC                            
000054EC                            SyncEnd:
000054EC 4E75                       		rts	
000054EE                            ; End of function SynchroAnimate
000054EE                            
000054EE                            ; ---------------------------------------------------------------------------
000054EE                            ; End-of-act signpost pattern loading subroutine
000054EE                            ; ---------------------------------------------------------------------------
000054EE                            
000054EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000054EE                            
000054EE                            
000054EE                            SignpostArtLoad:
000054EE 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
000054F2 6600 0000                  		bne.w	@exit		; if yes, branch
000054F6 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; is act number 02 (act 3)?
000054FC 6700                       		beq.s	@exit		; if yes, branch
000054FE                            
000054FE 3038 F700                  		move.w	(v_screenposx).w,d0
00005502 3238 F72A                  		move.w	(v_limitright2).w,d1
00005506 0441 0100                  		subi.w	#$100,d1
0000550A B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
0000550C 6D00                       		blt.s	@exit		; if not, branch
0000550E 4A38 FE1E                  		tst.b	(f_timecount).w
00005512 6700                       		beq.s	@exit
00005514 B278 F728                  		cmp.w	(v_limitleft2).w,d1
00005518 6700                       		beq.s	@exit
0000551A 31C1 F728                  		move.w	d1,(v_limitleft2).w ; move left boundary to current screen position
0000551E 7000                       		moveq	#plcid_Signpost,d0
00005520 6000 C2A8                  		bra.w	NewPLC		; load signpost	patterns
00005524                            
00005524                            	@exit:
00005524 4E75                       		rts	
00005526                            ; End of function SignpostArtLoad
00005526                            
00005526                            ; ===========================================================================
00005526                            Demo_GHZ:	incbin	"demodata\Intro - GHZ.bin"
000055A6                            Demo_MZ:	incbin	"demodata\Intro - MZ.bin"
000056D6                            Demo_SYZ:	incbin	"demodata\Intro - SYZ.bin"
00005756                            Demo_SS:	incbin	"demodata\Intro - Special Stage.bin"
00005856                            ; ===========================================================================
00005856                            
00005856                            ; ---------------------------------------------------------------------------
00005856                            ; Special Stage
00005856                            ; ---------------------------------------------------------------------------
00005856                            
00005856                            GM_Special:
0000585E 6100 CC82                  		bsr.w	PaletteWhiteOut
00005862 46FC 2700                  		disable_ints
00005866 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
0000586C 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00005870 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
00005874 31FC 8AAF F624             		move.w	#$8A00+175,(v_hbla_hreg).w
0000587A 3CBC 9011                  		move.w	#$9011,(a6)	; 128-cell hscroll size
0000587E 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005882 0200 00BF                  		andi.b	#$BF,d0
00005886 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
0000588C 6100 B9A0                  		bsr.w	ClearScreen
00005890 46FC 2300                  		enable_ints
00005894 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$6FFF,$5000
000058B6                            
000058B6                            	SS_WaitForDMA:
000058B6 3215                       		move.w	(a5),d1		; read control port ($C00004)
000058B8 0801 0001                  		btst	#1,d1		; is DMA running?
000058BC 66F8                       		bne.s	SS_WaitForDMA	; if yes, branch
000058BE 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment to 2 bytes
000058C2 6100 0000                  		bsr.w	SS_BGLoad
000058C6 7000                       		moveq	#plcid_SpecialStage,d0
000058C8 6100 C03A                  		bsr.w	QuickPLC	; load special stage patterns
000058CC                            
000058CC 43F8 D000                  		lea	(v_objspace).w,a1
000058D0 7000                       		moveq	#0,d0
000058D2 323C 07FF                  		move.w	#$7FF,d1
000058D6                            	SS_ClrObjRam:
000058D6 22C0                       		move.l	d0,(a1)+
000058D8 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
000058DC                            
000058DC 43F8 F700                  		lea	(v_screenposx).w,a1
000058E0 7000                       		moveq	#0,d0
000058E2 323C 003F                  		move.w	#$3F,d1
000058E6                            	SS_ClrRam1:
000058E6 22C0                       		move.l	d0,(a1)+
000058E8 51C9 FFFC                  		dbf	d1,SS_ClrRam1	; clear	variables
000058EC                            
000058EC 43F8 FE60                  		lea	(v_oscillate+2).w,a1
000058F0 7000                       		moveq	#0,d0
000058F2 323C 0027                  		move.w	#$27,d1
000058F6                            	SS_ClrRam2:
000058F6 22C0                       		move.l	d0,(a1)+
000058F8 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
000058FC                            
000058FC 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00005900 7000                       		moveq	#0,d0
00005902 323C 007F                  		move.w	#$7F,d1
00005906                            	SS_ClrNemRam:
00005906 22C0                       		move.l	d0,(a1)+
00005908 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
0000590C                            
0000590C 4238 F64E                  		clr.b	(f_wtr_state).w
00005910 4278 FE02                  		clr.w	(f_restart).w
00005914 700A                       		moveq	#palid_Special,d0
00005916 6100 CD4A                  		bsr.w	PalLoad1	; load special stage palette
0000591A 4EB9 0000 0000             		jsr	(SS_Load).l		; load SS layout data
00005920 21FC 0000 0000 F700        		move.l	#0,(v_screenposx).w
00005928 21FC 0000 0000 F704        		move.l	#0,(v_screenposy).w
00005930 11FC 0000 D000             		move.b	#id_SonicSpecial,(v_player).w ; load special stage Sonic object
00005936 6100 0000                  		bsr.w	PalCycle_SS
0000593A 4278 F780                  		clr.w	(v_ssangle).w	; set stage angle to "upright"
0000593E 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set stage rotation speed
0000594C 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
00005952 43F9 0000 5302             		lea	(DemoDataPtr).l,a1
00005958 7006                       		moveq	#6,d0
0000595A E548                       		lsl.w	#2,d0
0000595C 2271 0000                  		movea.l	(a1,d0.w),a1
00005960 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w
00005966 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
0000596A 4278 FE20                  		clr.w	(v_rings).w
0000596E 4238 FE1B                  		clr.b	(v_lifecount).w
00005972 31FC 0000 FE08             		move.w	#0,(v_debuguse).w
00005978 31FC 0708 F614             		move.w	#1800,(v_demolength).w
0000597E 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
00005982 6700                       		beq.s	SS_NoDebug	; if not, branch
00005984 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button pressed?
0000598A 6700                       		beq.s	SS_NoDebug	; if not, branch
0000598C 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00005992                            
00005992                            	SS_NoDebug:
00005992 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005996 0000 0040                  		ori.b	#$40,d0
0000599A 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000059A0 6100 CA94                  		bsr.w	PaletteWhiteIn
000059A4                            
000059A4                            ; ---------------------------------------------------------------------------
000059A4                            ; Main Special Stage loop
000059A4                            ; ---------------------------------------------------------------------------
000059A4                            
000059A4                            SS_MainLoop:
000059A4 6100 B964                  		bsr.w	PauseGame
000059A8 11FC 000A F62A             		move.b	#$A,(v_vbla_routine).w
000059AE 6100 E346                  		bsr.w	WaitForVBla
000059B2 6100 F89E                  		bsr.w	MoveSonicInDemo
000059B6 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
000059BC 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000059C2 4EB9 0000 0000             		jsr	(BuildSprites).l
000059C8 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
000059CE 6100 0000                  		bsr.w	SS_BGAnimate
000059D2 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
000059D6 6700                       		beq.s	SS_ChkEnd	; if not, branch
000059D8 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
000059DC 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
000059E0                            
000059E0                            	SS_ChkEnd:
000059E0 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
000059E6 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
000059EA                            
000059EA 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
000059EE 6600 0000                  		bne.w	SS_ToLevel
000059F2 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
000059F8 0C78 0503 FE10             		cmpi.w	#(id_SBZ<<8)+3,(v_zone).w ; is level number higher than FZ?
000059FE 6500                       		blo.s	SS_Finish	; if not, branch
00005A00 4278 FE10                  		clr.w	(v_zone).w	; set to GHZ1
00005A04                            
00005A04                            SS_Finish:
00005A04 31FC 003C F614             		move.w	#60,(v_demolength).w ; set delay time to 1 second
00005A0A 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00005A10 4278 F794                  		clr.w	(v_palchgspeed).w
00005A14                            
00005A14                            	SS_FinLoop:
00005A14 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
00005A1A 6100 E2DA                  		bsr.w	WaitForVBla
00005A1E 6100 F832                  		bsr.w	MoveSonicInDemo
00005A22 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
00005A28 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005A2E 4EB9 0000 0000             		jsr	(BuildSprites).l
00005A34 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
00005A3A 6100 0000                  		bsr.w	SS_BGAnimate
00005A3E 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00005A42 6A00                       		bpl.s	loc_47D4
00005A44 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
00005A4A 6100 CAB6                  		bsr.w	WhiteOut_ToWhite
00005A4E                            
00005A4E                            loc_47D4:
00005A4E 4A78 F614                  		tst.w	(v_demolength).w
00005A52 66C0                       		bne.s	SS_FinLoop
00005A54                            
00005A54 46FC 2700                  		disable_ints
00005A58 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005A5E 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00005A62 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00005A66 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00005A6A 6100 B7C2                  		bsr.w	ClearScreen
00005A78 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005A7E 6100 B92C                  		bsr.w	NemDec
00005A82 4EB9 0000 0000             		jsr	(Hud_Base).l
00005A88 31FC C800 C8FC             		ResetDMAQueue	
00005A8E 46FC 2300                  		enable_ints
00005A92 7011                       		moveq	#palid_SSResult,d0
00005A94 6100 CC08                  		bsr.w	PalLoad2	; load results screen palette
00005A98 7000                       		moveq	#plcid_Main,d0
00005A9A 6100 BD2E                  		bsr.w	NewPLC
00005A9E 7000                       		moveq	#plcid_SSResult,d0
00005AA0 6100 BCF6                  		bsr.w	AddPLC		; load results screen patterns
00005AA4 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00005AAA 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; update ring bonus counter
00005AB0 3038 FE20                  		move.w	(v_rings).w,d0
00005AB4 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00005AB8 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set rings bonus
00005AC6                            
00005AC6 43F8 D000                  		lea	(v_objspace).w,a1
00005ACA 7000                       		moveq	#0,d0
00005ACC 323C 07FF                  		move.w	#$7FF,d1
00005AD0                            	SS_EndClrObjRam:
00005AD0 22C0                       		move.l	d0,(a1)+
00005AD2 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00005AD6                            
00005AD6 11FC 0000 D5C0             		move.b	#id_SSResult,(v_objspace+$5C0).w ; load results screen object
00005ADC                            
00005ADC                            SS_NormalExit:
00005ADC 6100 B82C                  		bsr.w	PauseGame
00005AE0 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
00005AE6 6100 E20E                  		bsr.w	WaitForVBla
00005AEA 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005AF0 4EB9 0000 0000             		jsr	(BuildSprites).l
00005AF6 6100 BD0C                  		bsr.w	RunPLC
00005AFA 4A78 FE02                  		tst.w	(f_restart).w
00005AFE 67DC                       		beq.s	SS_NormalExit
00005B00 4AB8 F680                  		tst.l	(v_plc_buffer).w
00005B04 66D6                       		bne.s	SS_NormalExit
00005B0E 6100 C9D2                  		bsr.w	PaletteWhiteOut
00005B12 4E75                       		rts	
00005B14                            ; ===========================================================================
00005B14                            
00005B14                            SS_ToSegaScreen:
00005B14 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
00005B1A 4E75                       		rts
00005B1C                            
00005B1C 0C38 0000 F600             SS_ToLevel:	cmpi.b	#id_Level,(v_gamemode).w
00005B22 67F0                       		beq.s	SS_ToSegaScreen
00005B24 4E75                       		rts
00005B26                            
00005B26                            ; ---------------------------------------------------------------------------
00005B26                            ; Special stage	background loading subroutine
00005B26                            ; ---------------------------------------------------------------------------
00005B26                            
00005B26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005B26                            
00005B26                            
00005B26                            SS_BGLoad:
00005B26 43F9 00FF 0000             		lea	($FF0000).l,a1
00005B2C 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00005B32 303C 4051                  		move.w	#$4051,d0
00005B36 6100 BDFE                  		bsr.w	EniDec
00005B3A 263C 5000 0001             		move.l	#$50000001,d3
00005B40 45F9 00FF 0080             		lea	($FF0080).l,a2
00005B46 7E06                       		moveq	#6,d7
00005B48                            
00005B48                            loc_48BE:
00005B48 2003                       		move.l	d3,d0
00005B4A 7C03                       		moveq	#3,d6
00005B4C 7800                       		moveq	#0,d4
00005B4E 0C47 0003                  		cmpi.w	#3,d7
00005B52 6400                       		bhs.s	loc_48CC
00005B54 7801                       		moveq	#1,d4
00005B56                            
00005B56                            loc_48CC:
00005B56 7A07                       		moveq	#7,d5
00005B58                            
00005B58                            loc_48CE:
00005B58 224A                       		movea.l	a2,a1
00005B5A 0A04 0001                  		eori.b	#1,d4
00005B5E 6600                       		bne.s	loc_48E2
00005B60 0C47 0006                  		cmpi.w	#6,d7
00005B64 6600                       		bne.s	loc_48F2
00005B66 43F9 00FF 0000             		lea	($FF0000).l,a1
00005B6C                            
00005B6C                            loc_48E2:
00005B6C 48E7 F800                  		movem.l	d0-d4,-(sp)
00005B70 7207                       		moveq	#7,d1
00005B72 7407                       		moveq	#7,d2
00005B74 6100 B80C                  		bsr.w	TilemapToVRAM
00005B78 4CDF 001F                  		movem.l	(sp)+,d0-d4
00005B7C                            
00005B7C                            loc_48F2:
00005B7C 0680 0010 0000             		addi.l	#$100000,d0
00005B82 51CD FFD4                  		dbf	d5,loc_48CE
00005B86 0680 0380 0000             		addi.l	#$3800000,d0
00005B8C 0A04 0001                  		eori.b	#1,d4
00005B90 51CE FFC4                  		dbf	d6,loc_48CC
00005B94 0683 1000 0000             		addi.l	#$10000000,d3
00005B9A 6A00                       		bpl.s	loc_491C
00005B9C 4843                       		swap	d3
00005B9E 0683 0000 C000             		addi.l	#$C000,d3
00005BA4 4843                       		swap	d3
00005BA6                            
00005BA6                            loc_491C:
00005BA6 D4FC 0080                  		adda.w	#$80,a2
00005BAA 51CF FF9C                  		dbf	d7,loc_48BE
00005BAE 43F9 00FF 0000             		lea	($FF0000).l,a1
00005BB4 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00005BBA 303C 4000                  		move.w	#$4000,d0
00005BBE 6100 BD76                  		bsr.w	EniDec
00005BC2 43F9 00FF 0000             		lea	($FF0000).l,a1
00005BC8 203C 4000 0003             		move.l	#$40000003,d0
00005BCE 723F                       		moveq	#$3F,d1
00005BD0 741F                       		moveq	#$1F,d2
00005BD2 6100 B7AE                  		bsr.w	TilemapToVRAM
00005BD6 43F9 00FF 0000             		lea	($FF0000).l,a1
00005BDC 203C 5000 0003             		move.l	#$50000003,d0
00005BE2 723F                       		moveq	#$3F,d1
00005BE4 743F                       		moveq	#$3F,d2
00005BE6 6100 B79A                  		bsr.w	TilemapToVRAM
00005BEA 4E75                       		rts	
00005BEC                            ; End of function SS_BGLoad
00005BEC                            
00005BEC                            ; ---------------------------------------------------------------------------
00005BEC                            ; Palette cycling routine - special stage
00005BEC                            ; ---------------------------------------------------------------------------
00005BEC                            
00005BEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005BEC                            
00005BEC                            
00005BEC                            PalCycle_SS:
00005BEC 4A78 F63A                  		tst.w	(f_pause).w
00005BF0 6600                       		bne.s	locret_49E6
00005BF2 5378 F79C                  		subq.w	#1,(v_palss_time).w
00005BF6 6A00                       		bpl.s	locret_49E6
00005BF8 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005BFE 3038 F79A                  		move.w	(v_palss_num).w,d0
00005C02 5278 F79A                  		addq.w	#1,(v_palss_num).w
00005C06 0240 001F                  		andi.w	#$1F,d0
00005C0A E548                       		lsl.w	#2,d0
00005C0C 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00005C12 D0C0                       		adda.w	d0,a0
00005C14 1018                       		move.b	(a0)+,d0
00005C16 6A00                       		bpl.s	loc_4992
00005C18 303C 01FF                  		move.w	#$1FF,d0
00005C1C                            
00005C1C                            loc_4992:
00005C1C 31C0 F79C                  		move.w	d0,(v_palss_time).w
00005C20 7000                       		moveq	#0,d0
00005C22 1018                       		move.b	(a0)+,d0
00005C24 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00005C28 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00005C2E 43F1 0000                  		lea	(a1,d0.w),a1
00005C32 303C 8200                  		move.w	#-$7E00,d0
00005C36 1019                       		move.b	(a1)+,d0
00005C38 3C80                       		move.w	d0,(a6)
00005C3A 11D1 F616                  		move.b	(a1),(v_scrposy_dup).w
00005C3E 303C 8400                  		move.w	#-$7C00,d0
00005C42 1018                       		move.b	(a0)+,d0
00005C44 3C80                       		move.w	d0,(a6)
00005C46 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
00005C50 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l
00005C58 7000                       		moveq	#0,d0
00005C5A 1018                       		move.b	(a0)+,d0
00005C5C 6B00                       		bmi.s	loc_49E8
00005C5E 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00005C64 D2C0                       		adda.w	d0,a1
00005C66 45F8 FB4E                  		lea	(v_pal_dry+$4E).w,a2
00005C6A 24D9                       		move.l	(a1)+,(a2)+
00005C6C 24D9                       		move.l	(a1)+,(a2)+
00005C6E 24D9                       		move.l	(a1)+,(a2)+
00005C70                            
00005C70                            locret_49E6:
00005C70 4E75                       		rts	
00005C72                            ; ===========================================================================
00005C72                            
00005C72                            loc_49E8:
00005C72 3238 F79E                  		move.w	($FFFFF79E).w,d1
00005C76 0C40 008A                  		cmpi.w	#$8A,d0
00005C7A 6500                       		blo.s	loc_49F4
00005C7C 5241                       		addq.w	#1,d1
00005C7E                            
00005C7E                            loc_49F4:
00005C7E C2FC 002A                  		mulu.w	#$2A,d1
00005C82 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00005C88 D2C1                       		adda.w	d1,a1
00005C8A 0240 007F                  		andi.w	#$7F,d0
00005C8E 0880 0000                  		bclr	#0,d0
00005C92 6700                       		beq.s	loc_4A18
00005C94 45F8 FB6E                  		lea	(v_pal_dry+$6E).w,a2
00005C98 24D1                       		move.l	(a1),(a2)+
00005C9A 24E9 0004                  		move.l	4(a1),(a2)+
00005C9E 24E9 0008                  		move.l	8(a1),(a2)+
00005CA2                            
00005CA2                            loc_4A18:
00005CA2 D2FC 000C                  		adda.w	#$C,a1
00005CA6 45F8 FB5A                  		lea	(v_pal_dry+$5A).w,a2
00005CAA 0C40 000A                  		cmpi.w	#$A,d0
00005CAE 6500                       		blo.s	loc_4A2E
00005CB0 0440 000A                  		subi.w	#$A,d0
00005CB4 45F8 FB7A                  		lea	(v_pal_dry+$7A).w,a2
00005CB8                            
00005CB8                            loc_4A2E:
00005CB8 3200                       		move.w	d0,d1
00005CBA D040                       		add.w	d0,d0
00005CBC D041                       		add.w	d1,d0
00005CBE D2C0                       		adda.w	d0,a1
00005CC0 24D9                       		move.l	(a1)+,(a2)+
00005CC2 34D9                       		move.w	(a1)+,(a2)+
00005CC4 4E75                       		rts	
00005CC6                            ; End of function PalCycle_SS
00005CC6                            
00005CC6                            ; ===========================================================================
00005CC6 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00005CD6                            
00005CD6 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00005CE6 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00005CF6 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00005D06 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00005D16 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00005D26 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00005D36 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00005D46                            		even
00005D46 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005D54                            		even
00005D54                            
00005D54                            Pal_SSCyc1:	incbin	"palette\Cycle - Special Stage 1.bin"
00005D9C                            		even
00005D9C                            Pal_SSCyc2:	incbin	"palette\Cycle - Special Stage 2.bin"
00005E6E                            		even
00005E6E                            
00005E6E                            ; ---------------------------------------------------------------------------
00005E6E                            ; Subroutine to	make the special stage background animated
00005E6E                            ; ---------------------------------------------------------------------------
00005E6E                            
00005E6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005E6E                            
00005E6E                            
00005E6E                            SS_BGAnimate:
00005E6E 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005E72 6600                       		bne.s	loc_4BF6
00005E74 31FC 0000 F70C             		move.w	#0,(v_bgscreenposy).w
00005E7A 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005E80                            
00005E80                            loc_4BF6:
00005E80 0C40 0008                  		cmpi.w	#8,d0
00005E84 6400                       		bhs.s	loc_4C4E
00005E86 0C40 0006                  		cmpi.w	#6,d0
00005E8A 6600                       		bne.s	loc_4C10
00005E8C 5278 F718                  		addq.w	#1,(v_bg3screenposx).w
00005E90 5278 F70C                  		addq.w	#1,(v_bgscreenposy).w
00005E94 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005E9A                            
00005E9A                            loc_4C10:
00005E9A 7000                       		moveq	#0,d0
00005E9C 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00005EA0 4440                       		neg.w	d0
00005EA2 4840                       		swap	d0
00005EA4 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00005EAA 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005EAE 7609                       		moveq	#9,d3
00005EB0                            
00005EB0                            loc_4C26:
00005EB0 302B 0002                  		move.w	2(a3),d0
00005EB4 6100 DE72                  		bsr.w	CalcSine
00005EB8 7400                       		moveq	#0,d2
00005EBA 1419                       		move.b	(a1)+,d2
00005EBC C1C2                       		muls.w	d2,d0
00005EBE E080                       		asr.l	#8,d0
00005EC0 36C0                       		move.w	d0,(a3)+
00005EC2 1419                       		move.b	(a1)+,d2
00005EC4 4882                       		ext.w	d2
00005EC6 D55B                       		add.w	d2,(a3)+
00005EC8 51CB FFE6                  		dbf	d3,loc_4C26
00005ECC 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005ED0 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005ED6 6000                       		bra.s	loc_4C7E
00005ED8                            ; ===========================================================================
00005ED8                            
00005ED8                            loc_4C4E:
00005ED8 0C40 000C                  		cmpi.w	#$C,d0
00005EDC 6600                       		bne.s	loc_4C74
00005EDE 5378 F718                  		subq.w	#1,(v_bg3screenposx).w
00005EE2 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005EE6 243C 0001 8000             		move.l	#$18000,d2
00005EEC 7206                       		moveq	#6,d1
00005EEE                            
00005EEE                            loc_4C64:
00005EEE 2013                       		move.l	(a3),d0
00005EF0 9082                       		sub.l	d2,d0
00005EF2 26C0                       		move.l	d0,(a3)+
00005EF4 0482 0000 2000             		subi.l	#$2000,d2
00005EFA 51C9 FFF2                  		dbf	d1,loc_4C64
00005EFE                            
00005EFE                            loc_4C74:
00005EFE 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005F02 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00005F08                            
00005F08                            loc_4C7E:
00005F08 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00005F0C 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00005F10 4440                       		neg.w	d0
00005F12 4840                       		swap	d0
00005F14 7600                       		moveq	#0,d3
00005F16 161A                       		move.b	(a2)+,d3
00005F18 3438 F70C                  		move.w	(v_bgscreenposy).w,d2
00005F1C 4442                       		neg.w	d2
00005F1E 0242 00FF                  		andi.w	#$FF,d2
00005F22 E54A                       		lsl.w	#2,d2
00005F24                            
00005F24                            loc_4C9A:
00005F24 301B                       		move.w	(a3)+,d0
00005F26 544B                       		addq.w	#2,a3
00005F28 7200                       		moveq	#0,d1
00005F2A 121A                       		move.b	(a2)+,d1
00005F2C 5341                       		subq.w	#1,d1
00005F2E                            
00005F2E                            loc_4CA4:
00005F2E 2380 2000                  		move.l	d0,(a1,d2.w)
00005F32 5842                       		addq.w	#4,d2
00005F34 0242 03FC                  		andi.w	#$3FC,d2
00005F38 51C9 FFF4                  		dbf	d1,loc_4CA4
00005F3C 51CB FFE6                  		dbf	d3,loc_4C9A
00005F40 4E75                       		rts	
00005F42                            ; End of function SS_BGAnimate
00005F42                            
00005F42                            ; ===========================================================================
00005F42 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005F4E                            		even
00005F4E 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005F56                            		even
00005F56 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005F6A                            		even
00005F6A                            
00005F6A                            ; ===========================================================================
00005F6A                            
00005F6A                            ; ---------------------------------------------------------------------------
00005F6A                            ; Continue screen
00005F6A                            ; ---------------------------------------------------------------------------
00005F6A                            
00005F6A                            GM_Continue:
00005F6A 6100 C44C                  		bsr.w	PaletteFadeOut
00005F6E 46FC 2700                  		disable_ints
00005F72 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005F76 0200 00BF                  		andi.b	#$BF,d0
00005F7A 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005F80 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005F86 3CBC 8004                  		move.w	#$8004,(a6)	; 8 colour mode
00005F8A 3CBC 8700                  		move.w	#$8700,(a6)	; background colour
00005F8E 6100 B29E                  		bsr.w	ClearScreen
00005F92 31FC C800 C8FC             		ResetDMAQueue
00005F98 43F8 D000                  		lea	(v_objspace).w,a1
00005F9C 7000                       		moveq	#0,d0
00005F9E 323C 07FF                  		move.w	#$7FF,d1
00005FA2                            	Cont_ClrObjRam:
00005FA2 22C0                       		move.l	d0,(a1)+
00005FA4 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005FA8                            
00005FB2 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005FB8 6100 B3F2                  		bsr.w	NemDec
00005FC6 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005FCC 6100 B3DE                  		bsr.w	NemDec
00005FDA 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005FE0 6100 B3CA                  		bsr.w	NemDec
00005FE4 720A                       		moveq	#10,d1
00005FE6 4EB9 0000 0000             		jsr	(ContScrCounter).l	; run countdown	(start from 10)
00005FEC 7012                       		moveq	#palid_Continue,d0
00005FEE 6100 C672                  		bsr.w	PalLoad1	; load continue	screen palette
00005FFA 31FC 0293 F614             		move.w	#659,(v_demolength).w ; set time delay to 11 seconds
00006000 42B8 F700                  		clr.l	(v_screenposx).w
00006004 21FC 0100 0000 F704        		move.l	#$1000000,(v_screenposy).w
0000600C 11FC 0000 D000             		move.b	#id_ContSonic,(v_player).w ; load Sonic object
00006012 11FC 0000 D040             		move.b	#id_ContScrItem,(v_objspace+$40).w ; load continue screen objects
00006018 11FC 0000 D080             		move.b	#id_ContScrItem,(v_objspace+$80).w
0000601E 11FC 0003 D098             		move.b	#3,(v_objspace+$80+obPriority).w
00006024 11FC 0004 D09A             		move.b	#4,(v_objspace+$80+obFrame).w
0000602A 11FC 0000 D0C0             		move.b	#id_ContScrItem,(v_objspace+$C0).w
00006030 11FC 0004 D0E4             		move.b	#4,(v_objspace+$C0+obRoutine).w
00006036 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000603C 4EB9 0000 0000             		jsr	(BuildSprites).l
00006042 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00006046 0000 0040                  		ori.b	#$40,d0
0000604A 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00006050 6100 C2C0                  		bsr.w	PaletteFadeIn
00006054                            
00006054                            ; ---------------------------------------------------------------------------
00006054                            ; Continue screen main loop
00006054                            ; ---------------------------------------------------------------------------
00006054                            
00006054                            Cont_MainLoop:
00006054 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
0000605A 6100 DC9A                  		bsr.w	WaitForVBla
0000605E 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00006064 6400                       		bhs.s	loc_4DF2
00006066 46FC 2700                  		disable_ints
0000606A 3238 F614                  		move.w	(v_demolength).w,d1
0000606E 82FC 003C                  		divu.w	#$3C,d1
00006072 0281 0000 000F             		andi.l	#$F,d1
00006078 4EB9 0000 0000             		jsr	(ContScrCounter).l
0000607E 46FC 2300                  		enable_ints
00006082                            
00006082                            loc_4DF2:
00006082 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006088 4EB9 0000 0000             		jsr	(BuildSprites).l
0000608E 0C78 0180 D008             		cmpi.w	#$180,(v_player+obX).w ; has Sonic run off screen?
00006094 6400                       		bhs.s	Cont_GotoLevel	; if yes, branch
00006096 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000609C 64B6                       		bhs.s	Cont_MainLoop
0000609E 4A78 F614                  		tst.w	(v_demolength).w
000060A2 6600 FFB0                  		bne.w	Cont_MainLoop
000060A6 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
000060AC 4E75                       		rts	
000060AE                            ; ===========================================================================
000060AE                            
000060AE                            Cont_GotoLevel:
000060AE 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
000060B4 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000060BA 7000                       		moveq	#0,d0
000060BC 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000060C0 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000060C4 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000060C8 11C0 FE30                  		move.b	d0,(v_lastlamp).w ; clear lamppost count
000060CC 5338 FE18                  		subq.b	#1,(v_continues).w ; subtract 1 from continues
000060D0 4E75                       		rts	
000060D2                            ; ===========================================================================
000060D2                            
000060D2                            		include	"_incObj\80 Continue Screen Elements.asm"
000060D2                            ; ---------------------------------------------------------------------------
000060D2                            ; Object 80 - Continue screen elements
000060D2                            ; ---------------------------------------------------------------------------
000060D2                            
000060D2                            ContScrItem:
000060D2 7000                       		moveq	#0,d0
000060D4 1028 0024                  		move.b	$24(a0),d0
000060D8 323B 0000                  		move.w	CSI_Index(pc,d0.w),d1
000060DC 4EFB 1000                  		jmp	CSI_Index(pc,d1.w)
000060E0                            ; ===========================================================================
000060E0 0000                       CSI_Index:	dc.w CSI_Main-CSI_Index
000060E2 0000                       		dc.w CSI_Display-CSI_Index
000060E4 0000                       		dc.w CSI_MakeMiniSonic-CSI_Index
000060E6 0000                       		dc.w CSI_ChkDel-CSI_Index
000060E8                            ; ===========================================================================
000060E8                            
000060E8                            CSI_Main:	; Routine 0
000060E8 5428 0024                  		addq.b	#2,obRoutine(a0)
000060EC 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
000060F4 317C 8500 0002             		move.w	#$8500,obGfx(a0)
000060FA 117C 0000 0001             		move.b	#0,obRender(a0)
00006100 117C 003C 0014             		move.b	#$3C,obActWid(a0)
00006106 317C 0120 0008             		move.w	#$120,obX(a0)
0000610C 317C 00C0 000A             		move.w	#$C0,obScreenY(a0)
00006112 31FC 0000 FE20             		move.w	#0,(v_rings).w	; clear rings
00006118                            
00006118                            CSI_Display:	; Routine 2
00006118 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000611E                            ; ===========================================================================
0000611E                            
0000611E                            	CSI_MiniSonicPos:
0000611E 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00006130 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
0000613C                            
0000613C                            CSI_MakeMiniSonic:
0000613C                            		; Routine 4
0000613C 2248                       		movea.l	a0,a1
0000613E 45F9 0000 611E             		lea	(CSI_MiniSonicPos).l,a2
00006144 7200                       		moveq	#0,d1
00006146 1238 FE18                  		move.b	(v_continues).w,d1
0000614A 5501                       		subq.b	#2,d1
0000614C 6400                       		bcc.s	CSI_MoreThan1
0000614E 4EF9 0000 0000             		jmp	(DeleteObject).l	; cancel if you have 0-1 continues
00006154                            
00006154                            	CSI_MoreThan1:
00006154 7601                       		moveq	#1,d3
00006156 0C01 000E                  		cmpi.b	#14,d1		; do you have fewer than 16 continues
0000615A 6500                       		bcs.s	CSI_FewerThan16	; if yes, branch
0000615C                            
0000615C 7600                       		moveq	#0,d3
0000615E 720E                       		moveq	#14,d1		; cap at 15 mini-Sonics
00006160                            
00006160                            	CSI_FewerThan16:
00006160 1401                       		move.b	d1,d2
00006162 0202 0001                  		andi.b	#1,d2
00006166                            
00006166                            CSI_MiniSonicLoop:
00006166 12BC 0000                  		move.b	#id_ContScrItem,0(a1) ; load mini-Sonic object
0000616A 335A 0008                  		move.w	(a2)+,obX(a1)	; use above data for x-axis position
0000616E 4A02                       		tst.b	d2		; do you have an even number of continues?
00006170 6700                       		beq.s	CSI_Even	; if yes, branch
00006172 0469 000A 0008             		subi.w	#$A,obX(a1)	; shift mini-Sonics slightly to the right
00006178                            
00006178                            	CSI_Even:
00006178 337C 00D0 000A             		move.w	#$D0,obScreenY(a1)
0000617E 137C 0006 001A             		move.b	#6,obFrame(a1)
00006184 137C 0006 0024             		move.b	#6,obRoutine(a1)
0000618A 237C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a1)
00006192 337C 8551 0002             		move.w	#$8551,obGfx(a1)
00006198 137C 0000 0001             		move.b	#0,obRender(a1)
0000619E 43E9 0040                  		lea	$40(a1),a1
000061A2 51C9 FFC2                  		dbf	d1,CSI_MiniSonicLoop ; repeat for number of continues
000061A6                            
000061A6 43E9 FFC0                  		lea	-$40(a1),a1
000061AA 1343 0028                  		move.b	d3,obSubtype(a1)
000061AE                            
000061AE                            CSI_ChkDel:	; Routine 6
000061AE 4A28 0028                  		tst.b	obSubtype(a0)	; do you have 16 or more continues?
000061B2 6700                       		beq.s	CSI_Animate	; if yes, branch
000061B4 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic running?
000061BA 6500                       		bcs.s	CSI_Animate	; if not, branch
000061BC 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
000061C0 0200 0001                  		andi.b	#1,d0
000061C4 6600                       		bne.s	CSI_Animate
000061C6 4A78 D010                  		tst.w	(v_player+obVelX).w ; is Sonic running?
000061CA 6600                       		bne.s	CSI_Delete	; if yes, goto delete
000061CC 4E75                       		rts	
000061CE                            
000061CE                            CSI_Animate:
000061CE 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
000061D2 0200 000F                  		andi.b	#$F,d0
000061D6 6600                       		bne.s	CSI_Display2
000061D8 0868 0000 001A             		bchg	#0,obFrame(a0)
000061DE                            
000061DE                            	CSI_Display2:
000061DE 4EF9 0000 0000             		jmp	(DisplaySprite).l
000061E4                            ; ===========================================================================
000061E4                            
000061E4                            CSI_Delete:
000061E4 4EF9 0000 0000             		jmp	(DeleteObject).l
000061E4 4EF9 0000 0000             		jmp	(DeleteObject).l
000061EA                            		include	"_incObj\81 Continue Screen Sonic.asm"
000061EA                            ; ---------------------------------------------------------------------------
000061EA                            ; Object 81 - Sonic on the continue screen
000061EA                            ; ---------------------------------------------------------------------------
000061EA                            
000061EA                            ContSonic:
000061EA 7000                       		moveq	#0,d0
000061EC 1028 0024                  		move.b	obRoutine(a0),d0
000061F0 323B 0000                  		move.w	CSon_Index(pc,d0.w),d1
000061F4 4EBB 1000                  		jsr	CSon_Index(pc,d1.w)
000061F8 4EF9 0000 0000             		jmp	(DisplaySprite).l
000061FE                            ; ===========================================================================
000061FE 0000                       CSon_Index:	dc.w CSon_Main-CSon_Index
00006200 0000                       		dc.w CSon_ChkLand-CSon_Index
00006202 0000                       		dc.w CSon_Animate-CSon_Index
00006204 0000                       		dc.w CSon_Run-CSon_Index
00006206                            ; ===========================================================================
00006206                            
00006206                            CSon_Main:	; Routine 0
00006206 5428 0024                  		addq.b	#2,obRoutine(a0)
0000620A 317C 00A0 0008             		move.w	#$A0,obX(a0)
00006210 317C 00C0 000C             		move.w	#$C0,obY(a0)
00006216 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0000621E 317C 0780 0002             		move.w	#$780,obGfx(a0)
00006224 117C 0004 0001             		move.b	#4,obRender(a0)
0000622A 317C 0100 0018             		move.w	#$100,obPriority(a0)
00006230 117C 0000 001C             		move.b	#id_Float3,obAnim(a0) ; use "floating" animation
00006236 317C 0400 0012             		move.w	#$400,obVelY(a0) ; make Sonic fall from above
0000623C                            
0000623C                            CSon_ChkLand:	; Routine 2
0000623C 0C68 01A0 000C             		cmpi.w	#$1A0,obY(a0)	; has Sonic landed yet?
00006242 6600                       		bne.s	CSon_ShowFall	; if not, branch
00006244                            
00006244 5428 0024                  		addq.b	#2,obRoutine(a0)
00006248 4268 0012                  		clr.w	obVelY(a0)	; stop Sonic falling
0000624C 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00006254 317C 8500 0002             		move.w	#$8500,obGfx(a0)
0000625A 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00006260 6000                       		bra.s	CSon_Animate
00006262                            
00006262                            CSon_ShowFall:
00006262 4EB9 0000 0000             		jsr	(SpeedToPos).l
00006268 4EB9 0000 0000             		jsr	(Sonic_Animate).l
0000626E 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00006274                            ; ===========================================================================
00006274                            
00006274                            CSon_Animate:	; Routine 4
00006274 4A38 F605                  		tst.b	(v_jpadpress1).w ; is Start button pressed?
00006278 6B00                       		bmi.s	CSon_GetUp	; if yes, branch
0000627A 43F9 0000 0000             		lea	(AniScript_CSon).l,a1
00006280 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006286                            
00006286                            CSon_GetUp:
00006286 5428 0024                  		addq.b	#2,obRoutine(a0)
0000628A 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00006292 317C 0780 0002             		move.w	#$780,obGfx(a0)
00006298 117C 0000 001C             		move.b	#id_Float4,obAnim(a0) ; use "getting up" animation
0000629E 4268 0020                  		clr.w	obInertia(a0)
000062A2 5168 000C                  		subq.w	#8,obY(a0)
000062AE                            
000062AE                            CSon_Run:	; Routine 6
000062AE 0C68 0800 0020             		cmpi.w	#$800,obInertia(a0) ; check Sonic's inertia
000062B4 6600                       		bne.s	CSon_AddInertia	; if too low, branch
000062B6 317C 1000 0010             		move.w	#$1000,obVelX(a0) ; move Sonic to the right
000062BC 6000                       		bra.s	CSon_ShowRun
000062BE                            
000062BE                            CSon_AddInertia:
000062BE 0668 0020 0020             		addi.w	#$20,obInertia(a0) ; increase inertia
000062C4                            
000062C4                            CSon_ShowRun:
000062C4 4EB9 0000 0000             		jsr	(SpeedToPos).l
000062CA 4EB9 0000 0000             		jsr	(Sonic_Animate).l
000062D0 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
000062D0 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
000062D6                            		include	"_anim\Continue Screen Sonic.asm"
000062D6                            ; ---------------------------------------------------------------------------
000062D6                            ; Animation script - Sonic on the continue screen
000062D6                            ; ---------------------------------------------------------------------------
000062D6 0000                       AniScript_CSon:	dc.w A_CSon_1-AniScript_CSon
000062D8 0401 0101 0302 0203 03FF   A_CSon_1:	dc.b 4,	1, 1, 1, 3, 2, 2, 3, 3, afEnd
000062E2                            		even
000062E2                            		even
000062E2                            Map_ContScr:	include	"_maps\Continue Screen.asm"
000062E2                            ; --------------------------------------------------------------------------------
000062E2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000062E2                            ; --------------------------------------------------------------------------------
000062E2                            
000062E2                            SME_phED7:	
000062E2 0000 0000                  		dc.w SME_phED7_10-SME_phED7, SME_phED7_48-SME_phED7	
000062E6 0000 0000                  		dc.w SME_phED7_58-SME_phED7, SME_phED7_68-SME_phED7	
000062EA 0000 0000                  		dc.w SME_phED7_78-SME_phED7, SME_phED7_83-SME_phED7	
000062EE 0000 0000                  		dc.w SME_phED7_89-SME_phED7, SME_phED7_8F-SME_phED7	
000062F2 0B                         SME_phED7_10:	dc.b $B	
000062F3 F805 0088 C4               		dc.b $F8, 5, 0, $88, $C4	
000062F8 F805 00B2 D4               		dc.b $F8, 5, 0, $B2, $D4	
000062FD F805 00AE E4               		dc.b $F8, 5, 0, $AE, $E4	
00006302 F805 00C2 F4               		dc.b $F8, 5, 0, $C2, $F4	
00006307 F801 00A0 04               		dc.b $F8, 1, 0, $A0, 4	
0000630C F805 00AE 0C               		dc.b $F8, 5, 0, $AE, $C	
00006311 F805 00C6 1C               		dc.b $F8, 5, 0, $C6, $1C	
00006316 F805 0090 2C               		dc.b $F8, 5, 0, $90, $2C	
0000631B 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8	
00006320 3805 2021 08               		dc.b $38, 5, $20, $21, 8	
00006325 3605 01FC F8               		dc.b $36, 5, 1, $FC, $F8	
0000632A 03                         SME_phED7_48:	dc.b 3	
0000632B 0405 0015 FB               		dc.b 4, 5, 0, $15, $FB	
00006330 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
00006335 F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
0000633A 03                         SME_phED7_58:	dc.b 3	
0000633B 0405 0019 FB               		dc.b 4, 5, 0, $19, $FB	
00006340 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
00006345 F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
0000634A 03                         SME_phED7_68:	dc.b 3	
0000634B 0405 001D FB               		dc.b 4, 5, 0, $1D, $FB	
00006350 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
00006355 F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
0000635A 02                         SME_phED7_78:	dc.b 2	
0000635B 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8	
00006360 6009 2800 00               		dc.b $60, 9, $28, 0, 0	
00006365 01                         SME_phED7_83:	dc.b 1	
00006366 0006 0012 00               		dc.b 0, 6, 0, $12, 0	
0000636B 01                         SME_phED7_89:	dc.b 1	
0000636C 0006 0012 00               		dc.b 0, 6, 0, $12, 0	
00006371 01                         SME_phED7_8F:	dc.b 1	
00006372 0006 0018 00               		dc.b 0, 6, 0, $18, 0	
00006378 00                         		even
00006378 00                         		even
00006378                            
00006378                            ; ===========================================================================
00006378                            ; ---------------------------------------------------------------------------
00006378                            ; Ending sequence in Green Hill	Zone
00006378                            ; ---------------------------------------------------------------------------
00006378                            
00006378                            GM_Ending:
00006380 6100 C036                  		bsr.w	PaletteFadeOut
00006384                            
00006384 43F8 D000                  		lea	(v_objspace).w,a1
00006388 7000                       		moveq	#0,d0
0000638A 323C 07FF                  		move.w	#$7FF,d1
0000638E                            	End_ClrObjRam:
0000638E 22C0                       		move.l	d0,(a1)+
00006390 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00006394                            
00006394 43F8 F628                  		lea	($FFFFF628).w,a1
00006398 7000                       		moveq	#0,d0
0000639A 323C 0015                  		move.w	#$15,d1
0000639E                            	End_ClrRam1:
0000639E 22C0                       		move.l	d0,(a1)+
000063A0 51C9 FFFC                  		dbf	d1,End_ClrRam1	; clear	variables
000063A4                            
000063A4 43F8 F700                  		lea	(v_screenposx).w,a1
000063A8 7000                       		moveq	#0,d0
000063AA 323C 003F                  		move.w	#$3F,d1
000063AE                            	End_ClrRam2:
000063AE 22C0                       		move.l	d0,(a1)+
000063B0 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
000063B4                            
000063B4 43F8 FE60                  		lea	(v_oscillate+2).w,a1
000063B8 7000                       		moveq	#0,d0
000063BA 323C 0047                  		move.w	#$47,d1
000063BE                            	End_ClrRam3:
000063BE 22C0                       		move.l	d0,(a1)+
000063C0 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
000063C4                            
000063C4 46FC 2700                  		disable_ints
000063C8 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000063CC 0200 00BF                  		andi.b	#$BF,d0
000063D0 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000063D6 6100 AE56                  		bsr.w	ClearScreen
000063DA 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000063E0 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
000063E4 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000063E8 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000063EC 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
000063F0 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
000063F4 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
000063F8 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
000063FC 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
00006402 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
00006406 31FC 001E FE14             		move.w	#30,(v_air).w
0000640C 31FC 0600 FE10             		move.w	#id_EndZ<<8,(v_zone).w ; set level number to 0600 (extra flowers)
00006412 0C38 0000 FE57             		cmpi.b	#0,(v_emeralds).w ; do you have all 6 emeralds?
00006418 6700                       		beq.s	End_LoadData	; if yes, branch
0000641A 31FC 0601 FE10             		move.w	#(id_EndZ<<8)+1,(v_zone).w ; set level number to 0601 (no flowers)
00006420                            
00006420                            End_LoadData:
00006420 7000                       		moveq	#plcid_Ending,d0
00006422 6100 B4E0                  		bsr.w	QuickPLC	; load ending sequence patterns
00006426 4EB9 0000 0000             		jsr	(Hud_Base).l
0000642C 6100 0000                  		bsr.w	LevelSizeLoad
00006430 6100 0000                  		bsr.w	DeformLayers
00006434 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
0000643A 6100 0000                  		bsr.w	LevelDataLoad
0000643E 6100 0000                  		bsr.w	LoadTilesFromStart
00006442 21FC 0000 0000 F796        		move.l	#Col_GHZ,(v_collindex).w ; load collision index
0000644A 46FC 2300                  		enable_ints
0000644E 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00006454 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00006458 6100 B65A                  		bsr.w	KosDec
0000645C 4EB9 0000 0000             		jsr		LoadPlayerPal
00006462 6100 C1FE                  		bsr.w	PalLoad1	; load Sonic's palette
0000646E 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
00006474 6700                       		beq.s	End_LoadSonic	; if not, branch
00006476 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
0000647C                            
0000647C                            End_LoadSonic:
0000647C 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00006482 08F8 0000 D022             		bset	#0,(v_player+obStatus).w ; make Sonic face left
00006488 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
0000648E 31FC 0400 F602             		move.w	#(btnL<<8),(v_jpadhold2).w ; move Sonic to the left
00006494 31FC F600 D020             		move.w	#$F600,(v_player+obInertia).w ; set Sonic's speed
0000649A 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
000064A0 4EB9 0000 0000             		jsr	(ObjPosLoad).l
000064A6 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000064AC 4EB9 0000 0000             		jsr	(BuildSprites).l
000064B2 7000                       		moveq	#0,d0
000064B4 31C0 FE20                  		move.w	d0,(v_rings).w
000064B8 21C0 FE22                  		move.l	d0,(v_time).w
000064BC 11C0 FE1B                  		move.b	d0,(v_lifecount).w
000064C0 11C0 FE2C                  		move.b	d0,(v_shield).w
000064C4 11C0 FE2D                  		move.b	d0,(v_invinc).w
000064C8 11C0 FE2E                  		move.b	d0,(v_shoes).w
000064CC 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
000064D0 31C0 FE08                  		move.w	d0,(v_debuguse).w
000064D4 31C0 FE02                  		move.w	d0,(f_restart).w
000064D8 31C0 FE04                  		move.w	d0,(v_framecount).w
000064DC 6100 EEBC                  		bsr.w	OscillateNumInit
000064E0 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w
000064E6 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w
000064EC 11FC 0000 FE1E             		move.b	#0,(f_timecount).w
000064F2 31FC 0708 F614             		move.w	#1800,(v_demolength).w
000064F8 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
000064FE 6100 D7F6                  		bsr.w	WaitForVBla
00006502 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00006506 0000 0040                  		ori.b	#$40,d0
0000650A 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00006510 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00006516 6100 BDFA                  		bsr.w	PaletteFadeIn
0000651A                            
0000651A                            ; ---------------------------------------------------------------------------
0000651A                            ; Main ending sequence loop
0000651A                            ; ---------------------------------------------------------------------------
0000651A                            
0000651A                            End_MainLoop:
0000651A 6100 ADEE                  		bsr.w	PauseGame
0000651E 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006524 6100 D7D0                  		bsr.w	WaitForVBla
00006528 5278 FE04                  		addq.w	#1,(v_framecount).w
0000652C 6100 0000                  		bsr.w	End_MoveSonic
00006530 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006536 6100 0000                  		bsr.w	DeformLayers
0000653A 4EB9 0000 0000             		jsr	(BuildSprites).l
00006540 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00006546 6100 B834                  		bsr.w	PaletteCycle
0000654A 6100 EEA4                  		bsr.w	OscillateNumDo
0000654E 6100 EF30                  		bsr.w	SynchroAnimate
00006552 0C38 0000 F600             		cmpi.b	#id_Ending,(v_gamemode).w ; is game mode $18 (ending)?
00006558 6700                       		beq.s	End_ChkEmerald	; if yes, branch
0000655A                            
0000655A 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; goto credits
00006560 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w ; set credits index number to 0
00006566 4E75                       		rts	
00006568                            ; ===========================================================================
00006568                            
00006568                            End_ChkEmerald:
00006568 4A78 FE02                  		tst.w	(f_restart).w	; has Sonic released the emeralds?
0000656C 6700 FFAC                  		beq.w	End_MainLoop	; if not, branch
00006570                            
00006570 4278 FE02                  		clr.w	(f_restart).w
00006574 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
0000657A 4278 F794                  		clr.w	(v_palchgspeed).w
0000657E                            
0000657E                            	End_AllEmlds:
0000657E 6100 AD8A                  		bsr.w	PauseGame
00006582 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006588 6100 D76C                  		bsr.w	WaitForVBla
0000658C 5278 FE04                  		addq.w	#1,(v_framecount).w
00006590 6100 0000                  		bsr.w	End_MoveSonic
00006594 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000659A 6100 0000                  		bsr.w	DeformLayers
0000659E 4EB9 0000 0000             		jsr	(BuildSprites).l
000065A4 4EB9 0000 0000             		jsr	(ObjPosLoad).l
000065AA 6100 EE44                  		bsr.w	OscillateNumDo
000065AE 6100 EED0                  		bsr.w	SynchroAnimate
000065B2 5378 F794                  		subq.w	#1,(v_palchgspeed).w
000065B6 6A00                       		bpl.s	End_SlowFade
000065B8 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
000065BE 6100 BF42                  		bsr.w	WhiteOut_ToWhite
000065C2                            
000065C2                            	End_SlowFade:
000065C2 4A78 FE02                  		tst.w	(f_restart).w
000065C6 6700 FFB6                  		beq.w	End_AllEmlds
000065CA 4278 FE02                  		clr.w	(f_restart).w
000065CE 31FC 2829 A480             		move.w	#$2829,(v_lvllayout+$80).w ; modify level layout
000065D4 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
000065DA 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000065E0 47F8 F700                  		lea	(v_screenposx).w,a3
000065E4 49F8 A400                  		lea	(v_lvllayout).w,a4
000065E8 343C 4000                  		move.w	#$4000,d2
000065EC 6100 0000                  		bsr.w	DrawChunks
000065F0 7015                       		moveq	#palid_Ending,d0
000065F2 6100 C06E                  		bsr.w	PalLoad1	; load ending palette
000065F6 6100 BE3E                  		bsr.w	PaletteWhiteIn
000065FA 6000 FF1E                  		bra.w	End_MainLoop
000065FE                            
000065FE                            ; ---------------------------------------------------------------------------
000065FE                            ; Subroutine controlling Sonic on the ending sequence
000065FE                            ; ---------------------------------------------------------------------------
000065FE                            
000065FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000065FE                            
000065FE                            
000065FE                            End_MoveSonic:
000065FE 1038 F7D7                  		move.b	(v_sonicend).w,d0
00006602 6600                       		bne.s	End_MoveSon2
00006604 0C78 0090 D008             		cmpi.w	#$90,(v_player+obX).w ; has Sonic passed $90 on x-axis?
0000660A 6400                       		bhs.s	End_MoveSonExit	; if not, branch
0000660C                            
0000660C 5438 F7D7                  		addq.b	#2,(v_sonicend).w
00006610 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock player's controls
00006616 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; move Sonic to the right
0000661C 4E75                       		rts	
0000661E                            ; ===========================================================================
0000661E                            
0000661E                            End_MoveSon2:
0000661E 5500                       		subq.b	#2,d0
00006620 6600                       		bne.s	End_MoveSon3
00006622 0C78 00A0 D008             		cmpi.w	#$A0,(v_player+obX).w ; has Sonic passed $A0 on x-axis?
00006628 6500                       		blo.s	End_MoveSonExit	; if not, branch
0000662A                            
0000662A 5438 F7D7                  		addq.b	#2,(v_sonicend).w
0000662E 7000                       		moveq	#0,d0
00006630 11C0 F7CC                  		move.b	d0,(f_lockctrl).w
00006634 31C0 F602                  		move.w	d0,(v_jpadhold2).w ; stop Sonic moving
00006638 31C0 D020                  		move.w	d0,(v_player+obInertia).w
0000663C 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls & position
00006642 11FC 0003 D01A             		move.b	#3,(v_player+obFrame).w
00006648 31FC 0000 D01C             		move.w	#(id_Wait<<8)+id_Wait,(v_player+obAnim).w ; use "standing" animation
0000664E 11FC 0003 D01E             		move.b	#3,(v_player+obTimeFrame).w
00006654 4E75                       		rts	
00006656                            ; ===========================================================================
00006656                            
00006656                            End_MoveSon3:
00006656 5500                       		subq.b	#2,d0
00006658 6600                       		bne.s	End_MoveSonExit
0000665A 5438 F7D7                  		addq.b	#2,(v_sonicend).w
0000665E 31FC 00A0 D008             		move.w	#$A0,(v_player+obX).w
00006664 11FC 0000 D000             		move.b	#id_EndSonic,(v_player).w ; load Sonic ending sequence object
0000666A 4278 D024                  		clr.w	(v_player+obRoutine).w
0000666E                            
0000666E                            End_MoveSonExit:
0000666E 4E75                       		rts	
00006670                            ; End of function End_MoveSonic
00006670                            
00006670                            ; ===========================================================================
00006670                            
00006670                            		include	"_incObj\87 Ending Sequence Sonic.asm"
00006670                            ; ---------------------------------------------------------------------------
00006670                            ; Object 87 - Sonic on ending sequence
00006670                            ; ---------------------------------------------------------------------------
00006670                            
00006670                            EndSonic:
00006670 7000                       		moveq	#0,d0
00006672 1028 0025                  		move.b	ob2ndRout(a0),d0
00006676 323B 0000                  		move.w	ESon_Index(pc,d0.w),d1
0000667A 4EBB 1000                  		jsr	ESon_Index(pc,d1.w)
0000667E 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006684                            ; ===========================================================================
00006684 0000 0000                  ESon_Index:	dc.w ESon_Main-ESon_Index, ESon_MakeEmeralds-ESon_Index
00006688 0000 0000                  		dc.w Obj87_Animate-ESon_Index,	Obj87_LookUp-ESon_Index
0000668C 0000 0000                  		dc.w Obj87_ClrObjRam-ESon_Index, Obj87_Animate-ESon_Index
00006690 0000 0000                  		dc.w Obj87_MakeLogo-ESon_Index, Obj87_Animate-ESon_Index
00006694 0000 0000                  		dc.w Obj87_Leap-ESon_Index, Obj87_Animate-ESon_Index
00006698                            
00006698 =00000030                  eson_time:	equ $30	; time to wait between events
00006698                            ; ===========================================================================
00006698                            
00006698                            ESon_Main:	; Routine 0
00006698 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
0000669E 6700                       		beq.s	ESon_Main2	; if yes, branch
000066A0 0628 0010 0025             		addi.b	#$10,ob2ndRout(a0) ; else, skip emerald sequence
000066A6 317C 00D8 0030             		move.w	#216,eson_time(a0)
000066AC 4E75                       		rts	
000066AE                            ; ===========================================================================
000066AE                            
000066AE                            ESon_Main2:
000066AE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000066B2 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
000066BA 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
000066C0 117C 0004 0001             		move.b	#4,obRender(a0)
000066C6 4228 0022                  		clr.b	obStatus(a0)
000066CA 317C 0100 0018             		move.w	#$100,obPriority(a0)
000066D0 117C 0000 001A             		move.b	#0,obFrame(a0)
000066D6 317C 0050 0030             		move.w	#80,eson_time(a0) ; set duration for Sonic to pause
000066DC                            
000066DC                            ESon_MakeEmeralds:
000066DC                            		; Routine 2
000066DC 5368 0030                  		subq.w	#1,eson_time(a0) ; subtract 1 from duration
000066E0 6600                       		bne.s	ESon_Wait
000066E2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000066E6 317C 0001 001C             		move.w	#1,obAnim(a0)
000066EC 11FC 0000 D400             		move.b	#id_EndChaos,(v_objspace+$400).w ; load chaos emeralds objects
000066F2                            
000066F2                            	ESon_Wait:
000066F2 4E75                       		rts	
000066F4                            ; ===========================================================================
000066F4                            
000066F4                            Obj87_LookUp:	; Routine 6
000066F4 0C79 2000 00FF D43C        		cmpi.w	#$2000,((v_objspace&$FFFFFF)+$400+$3C).l
000066FC 6600                       		bne.s	locret_5480
000066FE 31FC 0001 FE02             		move.w	#1,(f_restart).w ; set level to	restart	(causes	flash)
00006704 317C 005A 0030             		move.w	#90,eson_time(a0)
0000670A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000670E                            
0000670E                            locret_5480:
0000670E 4E75                       		rts	
00006710                            ; ===========================================================================
00006710                            
00006710                            Obj87_ClrObjRam:
00006710                            		; Routine 8
00006710 5368 0030                  		subq.w	#1,eson_time(a0)
00006714 6600                       		bne.s	ESon_Wait2
00006716 43F8 D400                  		lea	(v_objspace+$400).w,a1
0000671A 323C 00FF                  		move.w	#$FF,d1
0000671E                            
0000671E                            Obj87_ClrLoop:
0000671E 4299                       		clr.l	(a1)+
00006720 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00006724 31FC 0001 FE02             		move.w	#1,(f_restart).w
0000672A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000672E 117C 0001 001C             		move.b	#1,obAnim(a0)
00006734 317C 003C 0030             		move.w	#60,eson_time(a0)
0000673A                            
0000673A                            ESon_Wait2:
0000673A 4E75                       		rts	
0000673C                            ; ===========================================================================
0000673C                            
0000673C                            Obj87_MakeLogo:	; Routine $C
0000673C 5368 0030                  		subq.w	#1,eson_time(a0)
00006740 6600                       		bne.s	ESon_Wait3
00006742 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006746 317C 00B4 0030             		move.w	#180,eson_time(a0)
0000674C 117C 0002 001C             		move.b	#2,obAnim(a0)
00006752 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
00006758                            
00006758                            ESon_Wait3:
00006758 4E75                       		rts	
0000675A                            ; ===========================================================================
0000675A                            
0000675A                            Obj87_Animate:	; Rountine 4, $A, $E, $12
0000675A 43F9 0000 0000             		lea	(AniScript_ESon).l,a1
00006760 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006766                            ; ===========================================================================
00006766                            
00006766                            Obj87_Leap:	; Routine $10
00006766 5368 0030                  		subq.w	#1,eson_time(a0)
0000676A 6600                       		bne.s	ESon_Wait4
0000676C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006770 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
00006778 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
0000677E 117C 0004 0001             		move.b	#4,obRender(a0)
00006784 4228 0022                  		clr.b	obStatus(a0)
00006788 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000678E 117C 0005 001A             		move.b	#5,obFrame(a0)
00006794 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "leaping"	animation
0000679A 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
000067A0 60B8                       		bra.s	Obj87_Animate
000067A2                            ; ===========================================================================
000067A2                            
000067A2                            ESon_Wait4:
000067A2 4E75                       		rts	
000067A2 4E75                       		rts	
000067A4                            		include "_anim\Ending Sequence Sonic.asm"
000067A4                            ; ---------------------------------------------------------------------------
000067A4                            ; Animation script - Sonic on the ending sequence
000067A4                            ; ---------------------------------------------------------------------------
000067A4 0000                       AniScript_ESon:	dc.w byte_551C-AniScript_ESon
000067A6 0000                       		dc.w byte_552A-AniScript_ESon
000067A8 0000                       		dc.w byte_5534-AniScript_ESon
000067AA 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
000067B8 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
000067C2 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
000067CA                            		even
000067CA                            		even
000067CA                            		include	"_incObj\88 Ending Sequence Emeralds.asm"
000067CA                            ; ---------------------------------------------------------------------------
000067CA                            ; Object 88 - chaos emeralds on	the ending sequence
000067CA                            ; ---------------------------------------------------------------------------
000067CA                            
000067CA                            EndChaos:
000067CA 7000                       		moveq	#0,d0
000067CC 1028 0024                  		move.b	obRoutine(a0),d0
000067D0 323B 0000                  		move.w	ECha_Index(pc,d0.w),d1
000067D4 4EBB 1000                  		jsr	ECha_Index(pc,d1.w)
000067D8 4EF9 0000 0000             		jmp	(DisplaySprite).l
000067DE                            ; ===========================================================================
000067DE 0000                       ECha_Index:	dc.w ECha_Main-ECha_Index
000067E0 0000                       		dc.w ECha_Move-ECha_Index
000067E2                            
000067E2 =00000038                  echa_origX:	equ $38	; x-axis centre of emerald circle (2 bytes)
000067E2 =0000003A                  echa_origY:	equ $3A	; y-axis centre of emerald circle (2 bytes)
000067E2 =0000003C                  echa_radius:	equ $3C	; radius (2 bytes)
000067E2 =0000003E                  echa_angle:	equ $3E	; angle for rotation (2 bytes)
000067E2                            ; ===========================================================================
000067E2                            
000067E2                            ECha_Main:	; Routine 0
000067E2 0C38 0002 D01A             		cmpi.b	#2,(v_player+obFrame).w
000067E8 6700                       		beq.s	ECha_CreateEms
000067EA 588F                       		addq.l	#4,sp
000067EC 4E75                       		rts	
000067EE                            ; ===========================================================================
000067EE                            
000067EE                            ECha_CreateEms:
000067EE 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0) ; match X position with Sonic
000067F4 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0) ; match Y position with Sonic
000067FA 2248                       		movea.l	a0,a1
000067FC 7600                       		moveq	#0,d3
000067FE 7401                       		moveq	#1,d2
00006800 7205                       		moveq	#5,d1
00006802                            
00006802                            	ECha_LoadLoop:
00006802 12BC 0000                  		move.b	#id_EndChaos,(a1) ; load chaos emerald object
00006806 5429 0024                  		addq.b	#2,obRoutine(a1)
0000680A 237C 0000 0000 0004        		move.l	#Map_ECha,obMap(a1)
00006812 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
00006818 137C 0004 0001             		move.b	#4,obRender(a1)
0000681E 337C 0080 0018             		move.w	#$80,obPriority(a1)
00006824 3368 0008 0038             		move.w	obX(a0),echa_origX(a1)
0000682A 3368 000C 003A             		move.w	obY(a0),echa_origY(a1)
00006830 1342 001C                  		move.b	d2,obAnim(a1)
00006834 1342 001A                  		move.b	d2,obFrame(a1)
00006838 5202                       		addq.b	#1,d2
0000683A 1343 0026                  		move.b	d3,obAngle(a1)
0000683E 0603 002A                  		addi.b	#$100/6,d3	; angle between each emerald
00006842 43E9 0040                  		lea	$40(a1),a1
00006846 51C9 FFBA                  		dbf	d1,ECha_LoadLoop ; repeat 5 more times
0000684A                            
0000684A                            ECha_Move:	; Routine 2
0000684A 3028 003E                  		move.w	echa_angle(a0),d0
0000684E D168 0026                  		add.w	d0,obAngle(a0)
00006852 1028 0026                  		move.b	obAngle(a0),d0
00006856 4EB9 0000 3D28             		jsr	(CalcSine).l
0000685C 7800                       		moveq	#0,d4
0000685E 1828 003C                  		move.b	echa_radius(a0),d4
00006862 C3C4                       		muls.w	d4,d1
00006864 E081                       		asr.l	#8,d1
00006866 C1C4                       		muls.w	d4,d0
00006868 E080                       		asr.l	#8,d0
0000686A D268 0038                  		add.w	echa_origX(a0),d1
0000686E D068 003A                  		add.w	echa_origY(a0),d0
00006872 3141 0008                  		move.w	d1,obX(a0)
00006876 3140 000C                  		move.w	d0,obY(a0)
0000687A                            
0000687A                            	ECha_Expand:
0000687A 0C68 2000 003C             		cmpi.w	#$2000,echa_radius(a0)
00006880 6700                       		beq.s	ECha_Rotate
00006882 0668 0020 003C             		addi.w	#$20,echa_radius(a0) ; expand circle of emeralds
00006888                            
00006888                            	ECha_Rotate:
00006888 0C68 2000 003E             		cmpi.w	#$2000,echa_angle(a0)
0000688E 6700                       		beq.s	ECha_Rise
00006890 0668 0020 003E             		addi.w	#$20,echa_angle(a0) ; move emeralds around the centre
00006896                            
00006896                            	ECha_Rise:
00006896 0C68 0140 003A             		cmpi.w	#$140,echa_origY(a0)
0000689C 6700                       		beq.s	ECha_End
0000689E 5368 003A                  		subq.w	#1,echa_origY(a0) ; make circle rise
000068A2                            
000068A2                            ECha_End:
000068A2 4E75                       		rts	
000068A2 4E75                       		rts	
000068A4                            		include	"_incObj\89 Ending Sequence STH.asm"
000068A4                            ; ---------------------------------------------------------------------------
000068A4                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
000068A4                            ; ---------------------------------------------------------------------------
000068A4                            
000068A4                            EndSTH:
000068A4 7000                       		moveq	#0,d0
000068A6 1028 0024                  		move.b	$24(a0),d0
000068AA 323B 0000                  		move.w	ESth_Index(pc,d0.w),d1
000068AE 4EBB 1000                  		jsr	ESth_Index(pc,d1.w)
000068B2 4EF9 0000 0000             		jmp	(DisplaySprite).l
000068B8                            ; ===========================================================================
000068B8 0000                       ESth_Index:	dc.w ESth_Main-ESth_Index
000068BA 0000                       		dc.w ESth_Move-ESth_Index
000068BC 0000                       		dc.w ESth_GotoCredits-ESth_Index
000068BE                            
000068BE =00000030                  esth_time:	equ $30		; time until exit
000068BE                            ; ===========================================================================
000068BE                            
000068BE                            ESth_Main:	; Routine 0
000068BE 5428 0024                  		addq.b	#2,obRoutine(a0)
000068C2 317C FFE0 0008             		move.w	#-$20,obX(a0)	; object starts	outside	the level boundary
000068C8 317C 00D8 000A             		move.w	#$D8,obScreenY(a0)
000068CE 217C 0000 0000 0004        		move.l	#Map_ESTH,obMap(a0)
000068D6 317C 05C5 0002             		move.w	#$5C5,obGfx(a0)
000068DC 117C 0000 0001             		move.b	#0,obRender(a0)
000068E2 317C 0000 0018             		move.w	#0,obPriority(a0)
000068E8                            
000068E8                            ESth_Move:	; Routine 2
000068E8 0C68 00C0 0008             		cmpi.w	#$C0,obX(a0)	; has object reached $C0?
000068EE 6700                       		beq.s	ESth_Delay	; if yes, branch
000068F0 0668 0010 0008             		addi.w	#$10,obX(a0)	; move object to the right
000068F6 4E75                       		rts
000068F8                            
000068F8                            ESth_Delay:
000068F8 5428 0024                  		addq.b	#2,obRoutine(a0)
000068FC 317C 012C 0030             		move.w	#300,esth_time(a0) ; set duration for delay (5 seconds)
00006902                            
00006902                            ESth_GotoCredits:
00006902                            		; Routine 4
00006902 5368 0030                  		subq.w	#1,esth_time(a0) ; subtract 1 from duration
00006906 6A00                       		bpl.s	ESth_Wait
00006908 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; exit to credits
0000690E                            
0000690E                            	ESth_Wait:
0000690E 4E75                       		rts
00006910                            Map_ESon:	include	"_maps\Ending Sequence Sonic.asm"
00006910                            ; --------------------------------------------------------------------------------
00006910                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00006910                            ; --------------------------------------------------------------------------------
00006910                            
00006910                            SME_6jV7R:	
00006910 0000 0000                  		dc.w SME_6jV7R_10-SME_6jV7R, SME_6jV7R_1B-SME_6jV7R	
00006914 0000 0000                  		dc.w SME_6jV7R_2B-SME_6jV7R, SME_6jV7R_36-SME_6jV7R	
00006918 0000 0000                  		dc.w SME_6jV7R_4B-SME_6jV7R, SME_6jV7R_60-SME_6jV7R	
0000691C 0000 0000                  		dc.w SME_6jV7R_70-SME_6jV7R, SME_6jV7R_94-SME_6jV7R	
00006920 02                         SME_6jV7R_10:	dc.b 2	
00006921 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	
00006926 0C0C 000C F0               		dc.b $C, $C, 0, $C, $F0	
0000692B 03                         SME_6jV7R_1B:	dc.b 3	
0000692C FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0	
00006931 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	
00006936 0C0C 000C F0               		dc.b $C, $C, 0, $C, $F0	
0000693B 02                         SME_6jV7R_2B:	dc.b 2	
0000693C EC09 0018 F8               		dc.b $EC, 9, 0, $18, $F8	
00006941 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0	
00006946 04                         SME_6jV7R_36:	dc.b 4	
00006947 F40B 002A F8               		dc.b $F4, $B, 0, $2A, $F8	
0000694C EC08 0036 F8               		dc.b $EC, 8, 0, $36, $F8	
00006951 E404 0039 00               		dc.b $E4, 4, 0, $39, 0	
00006956 EC02 003B 10               		dc.b $EC, 2, 0, $3B, $10	
0000695B 04                         SME_6jV7R_4B:	dc.b 4	
0000695C F40B 002A F8               		dc.b $F4, $B, 0, $2A, $F8	
00006961 EC08 0036 F8               		dc.b $EC, 8, 0, $36, $F8	
00006966 E404 0039 00               		dc.b $E4, 4, 0, $39, 0	
0000696B EC02 003B 10               		dc.b $EC, 2, 0, $3B, $10	
00006970 03                         SME_6jV7R_60:	dc.b 3	
00006971 EC06 004C F0               		dc.b $EC, 6, 0, $4C, $F0	
00006976 EC06 084C 00               		dc.b $EC, 6, 8, $4C, 0	
0000697B 040D 0052 F0               		dc.b 4, $D, 0, $52, $F0	
00006980 07                         SME_6jV7R_70:	dc.b 7	
00006981 B20C 005A F8               		dc.b $B2, $C, 0, $5A, $F8	
00006986 BA0F 005E F0               		dc.b $BA, $F, 0, $5E, $F0	
0000698B BA05 006E 10               		dc.b $BA, 5, 0, $6E, $10	
00006990 CA02 0072 10               		dc.b $CA, 2, 0, $72, $10	
00006995 DA0C 0075 F0               		dc.b $DA, $C, 0, $75, $F0	
0000699A E208 0079 F8               		dc.b $E2, 8, 0, $79, $F8	
0000699F EA05 007C F8               		dc.b $EA, 5, 0, $7C, $F8	
000069A4 18                         SME_6jV7R_94:	dc.b $18	
000069A5 800F 0080 F8               		dc.b $80, $F, 0, $80, $F8	
000069AA 900B 0090 E0               		dc.b $90, $B, 0, $90, $E0	
000069AF 900B 009C 18               		dc.b $90, $B, 0, $9C, $18	
000069B4 980B 00A8 30               		dc.b $98, $B, 0, $A8, $30	
000069B9 A00F 00B4 58               		dc.b $A0, $F, 0, $B4, $58	
000069BE 8800 00C4 F0               		dc.b $88, 0, 0, $C4, $F0	
000069C3 8005 00C5 18               		dc.b $80, 5, 0, $C5, $18	
000069C8 A00F 00C9 F8               		dc.b $A0, $F, 0, $C9, $F8	
000069CD B00B 00D9 E0               		dc.b $B0, $B, 0, $D9, $E0	
000069D2 B80F 00E5 38               		dc.b $B8, $F, 0, $E5, $38	
000069D7 A805 00F5 48               		dc.b $A8, 5, 0, $F5, $48	
000069DC C002 00F9 58               		dc.b $C0, 2, 0, $F9, $58	
000069E1 C00F 00FC F8               		dc.b $C0, $F, 0, $FC, $F8	
000069E6 B80F 010C 18               		dc.b $B8, $F, 1, $C, $18	
000069EB B008 011C 18               		dc.b $B0, 8, 1, $1C, $18	
000069F0 D80D 011F 30               		dc.b $D8, $D, 1, $1F, $30	
000069F5 D808 0127 18               		dc.b $D8, 8, 1, $27, $18	
000069FA D80F 012A D8               		dc.b $D8, $F, 1, $2A, $D8	
000069FF E00D 013A F8               		dc.b $E0, $D, 1, $3A, $F8	
00006A04 E000 0142 28               		dc.b $E0, 0, 1, $42, $28	
00006A09 D004 0143 E0               		dc.b $D0, 4, 1, $43, $E0	
00006A0E E805 0145 C8               		dc.b $E8, 5, 1, $45, $C8	
00006A13 F80C 0149 C8               		dc.b $F8, $C, 1, $49, $C8	
00006A18 F006 014D F8               		dc.b $F0, 6, 1, $4D, $F8	
00006A1E 00                         		even
00006A1E 00                         		even
00006A1E                            Map_ECha:	include	"_maps\Ending Sequence Emeralds.asm"
00006A1E                            ; --------------------------------------------------------------------------------
00006A1E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00006A1E                            ; --------------------------------------------------------------------------------
00006A1E                            
00006A1E                            SME_0ZTmS:	
00006A1E 0000 0000                  		dc.w SME_0ZTmS_E-SME_0ZTmS, SME_0ZTmS_14-SME_0ZTmS	
00006A22 0000 0000                  		dc.w SME_0ZTmS_1A-SME_0ZTmS, SME_0ZTmS_20-SME_0ZTmS	
00006A26 0000 0000                  		dc.w SME_0ZTmS_26-SME_0ZTmS, SME_0ZTmS_2C-SME_0ZTmS	
00006A2A 0000                       		dc.w SME_0ZTmS_32-SME_0ZTmS	
00006A2C 01                         SME_0ZTmS_E:	dc.b 1	
00006A2D F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
00006A32 01                         SME_0ZTmS_14:	dc.b 1	
00006A33 F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
00006A38 01                         SME_0ZTmS_1A:	dc.b 1	
00006A39 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00006A3E 01                         SME_0ZTmS_20:	dc.b 1	
00006A3F F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8	
00006A44 01                         SME_0ZTmS_26:	dc.b 1	
00006A45 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8	
00006A4A 01                         SME_0ZTmS_2C:	dc.b 1	
00006A4B F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8	
00006A50 01                         SME_0ZTmS_32:	dc.b 1	
00006A51 F805 000C F8               		dc.b $F8, 5, 0, $C, $F8	
00006A56                            		even
00006A56                            		even
00006A56                            Map_ESth:	include	"_maps\Ending Sequence STH.asm"
00006A56                            ; --------------------------------------------------------------------------------
00006A56                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00006A56                            ; --------------------------------------------------------------------------------
00006A56                            
00006A56                            SME_WuUDZ:	
00006A56 0000                       		dc.w SME_WuUDZ_2-SME_WuUDZ	
00006A58 03                         SME_WuUDZ_2:	dc.b 3	
00006A59 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0	
00006A5E F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0	
00006A63 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10	
00006A68                            		even
00006A68                            		even
00006A68                            
00006A68                            ; ===========================================================================
00006A68                            ; ---------------------------------------------------------------------------
00006A68                            ; Credits ending sequence
00006A68                            ; ---------------------------------------------------------------------------
00006A68                            
00006A68                            GM_Credits:
00006A68                            		
00006A68 6100 AD8C                  		bsr.w	ClearPLC
00006A6C 6100 B94A                  		bsr.w	PaletteFadeOut
00006A70 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00006A76 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
00006A7A 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00006A7E 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00006A82 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
00006A86 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
00006A8A 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00006A8E 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (line 3; colour 0)
00006A92 4238 F64E                  		clr.b	(f_wtr_state).w
00006A96 6100 A796                  		bsr.w	ClearScreen
00006A9A                            
00006A9A 43F8 D000                  		lea	(v_objspace).w,a1
00006A9E 7000                       		moveq	#0,d0
00006AA0 323C 07FF                  		move.w	#$7FF,d1
00006AA4                            	TryAg_ClrObjRam:
00006AA4 22C0                       		move.l	d0,(a1)+
00006AA6 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00006AAA                            
00006AAA 7000                       		moveq	#plcid_TryAgain,d0
00006AAC 6100 AE56                  		bsr.w	QuickPLC	; load "TRY AGAIN" or "END" patterns
00006AB0                            
00006AB0 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00006AB4 7000                       		moveq	#0,d0
00006AB6 323C 001F                  		move.w	#$1F,d1
00006ABA                            	TryAg_ClrPal:
00006ABA 22C0                       		move.l	d0,(a1)+
00006ABC 51C9 FFFC                  		dbf	d1,TryAg_ClrPal ; fill palette with black
00006AC0                            
00006AC0 7015                       		moveq	#palid_Ending,d0
00006AC2 6100 BB9E                  		bsr.w	PalLoad1	; load ending palette
00006AC6 4278 FBC0                  		clr.w	(v_pal_dry_dup+$40).w
00006ACA 11FC 0000 D080             		move.b	#id_EndEggman,(v_objspace+$80).w ; load Eggman object
00006AD0 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006AD6 4EB9 0000 0000             		jsr	(BuildSprites).l
00006ADC 31FC 0B40 F614             		move.w	#2880,(v_demolength).w ; show screen for 48 seconds
00006AE2 6100 B82E                  		bsr.w	PaletteFadeIn
00006AE6                            
00006AE6                            ; ---------------------------------------------------------------------------
00006AE6                            ; "TRY AGAIN" and "END"	screen main loop
00006AE6                            ; ---------------------------------------------------------------------------
00006AE6                            TryAg_MainLoop:
00006AE6 6100 A822                  		bsr.w	PauseGame
00006AEA 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00006AF0 6100 D204                  		bsr.w	WaitForVBla
00006AF4 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006AFA 4EB9 0000 0000             		jsr	(BuildSprites).l
00006B00 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00006B06 6600                       		bne.s	TryAg_Exit	; if yes, branch
00006B08 4A78 F614                  		tst.w	(v_demolength).w ; has 30 seconds elapsed?
00006B0C 6700                       		beq.s	TryAg_Exit	; if yes, branch
00006B0E 0C38 0000 F600             		cmpi.b	#id_Credits,(v_gamemode).w
00006B14 67D0                       		beq.s	TryAg_MainLoop
00006B16                            
00006B16                            TryAg_Exit:
00006B16 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
00006B1C 4E75                       		rts	
00006B1E                            
00006B1E                            ; ===========================================================================
00006B1E                            
00006B1E                            		include	"_incObj\8B Try Again & End Eggman.asm"
00006B1E                            ; ---------------------------------------------------------------------------
00006B1E                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00006B1E                            ; ---------------------------------------------------------------------------
00006B1E                            
00006B1E                            EndEggman:
00006B1E 7000                       		moveq	#0,d0
00006B20 1028 0024                  		move.b	obRoutine(a0),d0
00006B24 323B 0000                  		move.w	EEgg_Index(pc,d0.w),d1
00006B28 4EBB 1000                  		jsr	EEgg_Index(pc,d1.w)
00006B2C 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006B32                            ; ===========================================================================
00006B32 0000                       EEgg_Index:	dc.w EEgg_Main-EEgg_Index
00006B34 0000                       		dc.w EEgg_Animate-EEgg_Index
00006B36 0000                       		dc.w EEgg_Juggle-EEgg_Index
00006B38 0000                       		dc.w EEgg_Wait-EEgg_Index
00006B3A                            
00006B3A =00000030                  eegg_time:	equ $30		; time between juggle motions
00006B3A                            ; ===========================================================================
00006B3A                            
00006B3A                            EEgg_Main:	; Routine 0
00006B3A 5428 0024                  		addq.b	#2,obRoutine(a0)
00006B3E 317C 0120 0008             		move.w	#$120,obX(a0)
00006B44 317C 00F4 000A             		move.w	#$F4,obScreenY(a0)
00006B4A 217C 0000 0000 0004        		move.l	#Map_EEgg,obMap(a0)
00006B52 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
00006B58 117C 0000 0001             		move.b	#0,obRender(a0)
00006B5E 317C 0100 0018             		move.w	#$100,obPriority(a0)
00006B64 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "END" animation
00006B6A 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
00006B70 6700                       		beq.s	EEgg_Animate	; if yes, branch
00006B72                            
00006B72 11FC 0000 D0C0             		move.b	#id_CreditsText,(v_objspace+$C0).w ; load credits object
00006B78 31FC 0009 FFF4             		move.w	#9,(v_creditsnum).w ; use "TRY AGAIN" text
00006B7E 11FC 0000 D800             		move.b	#id_TryChaos,(v_objspace+$800).w ; load emeralds object on "TRY AGAIN" screen
00006B84 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "TRY AGAIN" animation
00006B8A                            
00006B8A                            EEgg_Animate:	; Routine 2
00006B8A 43F9 0000 0000             		lea	(Ani_EEgg).l,a1
00006B90 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006B96                            ; ===========================================================================
00006B96                            
00006B96                            EEgg_Juggle:	; Routine 4
00006B96 5428 0024                  		addq.b	#2,obRoutine(a0)
00006B9A 7002                       		moveq	#2,d0
00006B9C 0828 0000 001C             		btst	#0,obAnim(a0)
00006BA2 6700                       		beq.s	@noflip
00006BA4 4440                       		neg.w	d0
00006BA6                            
00006BA6                            	@noflip:
00006BA6 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; get RAM address for emeralds
00006BAA 7205                       		moveq	#5,d1
00006BAC                            
00006BAC                            @emeraldloop:
00006BAC 1340 003E                  		move.b	d0,$3E(a1)
00006BB0 3400                       		move.w	d0,d2
00006BB2 E742                       		asl.w	#3,d2
00006BB4 D529 0026                  		add.b	d2,obAngle(a1)
00006BB8 43E9 0040                  		lea	$40(a1),a1
00006BBC 51C9 FFEE                  		dbf	d1,@emeraldloop
00006BC0 5228 001A                  		addq.b	#1,obFrame(a0)
00006BC4 317C 0070 0030             		move.w	#112,eegg_time(a0)
00006BCA                            
00006BCA                            EEgg_Wait:	; Routine 6
00006BCA 5368 0030                  		subq.w	#1,eegg_time(a0) ; decrement timer
00006BCE 6A00                       		bpl.s	@nochg		; branch if time remains
00006BD0 0868 0000 001C             		bchg	#0,obAnim(a0)
00006BD6 117C 0002 0024             		move.b	#2,obRoutine(a0) ; goto EEgg_Animate next
00006BDC                            
00006BDC                            	@nochg:
00006BDC 4E75                       		rts	
00006BDC 4E75                       		rts	
00006BDE                            		include "_anim\Try Again & End Eggman.asm"
00006BDE                            ; ---------------------------------------------------------------------------
00006BDE                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00006BDE                            ; ---------------------------------------------------------------------------
00006BDE 0000                       Ani_EEgg:	dc.w @tryagain1-Ani_EEgg
00006BE0 0000                       		dc.w @tryagain2-Ani_EEgg
00006BE2 0000                       		dc.w @end-Ani_EEgg
00006BE4 0500 FC01                  @tryagain1:	dc.b 5,	0, afRoutine, 1
00006BE8 0502 FC03                  @tryagain2:	dc.b 5,	2, afRoutine, 3
00006BEC 0704 0506 0504 0506 0504+  @end:		dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	afEnd
00006BFE                            		even
00006BFE                            		even
00006BFE                            		include	"_incObj\8C Try Again Emeralds.asm"
00006BFE                            ; ---------------------------------------------------------------------------
00006BFE                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00006BFE                            ; ---------------------------------------------------------------------------
00006BFE                            
00006BFE                            TryChaos:
00006BFE 7000                       		moveq	#0,d0
00006C00 1028 0024                  		move.b	obRoutine(a0),d0
00006C04 323B 0000                  		move.w	TCha_Index(pc,d0.w),d1
00006C08 4EBB 1000                  		jsr	TCha_Index(pc,d1.w)
00006C0C 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006C12                            ; ===========================================================================
00006C12 0000                       TCha_Index:	dc.w TCha_Main-TCha_Index
00006C14 0000                       		dc.w TCha_Move-TCha_Index
00006C16                            ; ===========================================================================
00006C16                            
00006C16                            TCha_Main:	; Routine 0
00006C16 2248                       		movea.l	a0,a1
00006C18 7400                       		moveq	#0,d2
00006C1A 7600                       		moveq	#0,d3
00006C1C 7205                       		moveq	#5,d1
00006C1E 9238 FE57                  		sub.b	(v_emeralds).w,d1
00006C22                            
00006C22                            @makeemerald:
00006C22 12BC 0000                  		move.b	#id_TryChaos,(a1) ; load emerald object
00006C26 5429 0024                  		addq.b	#2,obRoutine(a1)
00006C2A 237C 0000 6A1E 0004        		move.l	#Map_ECha,obMap(a1)
00006C32 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
00006C38 137C 0000 0001             		move.b	#0,obRender(a1)
00006C3E 337C 0080 0018             		move.w	#$80,obPriority(a1)
00006C44 337C 0104 0008             		move.w	#$104,obX(a1)
00006C4A 337C 0120 0038             		move.w	#$120,$38(a1)
00006C50 337C 00EC 000A             		move.w	#$EC,obScreenY(a1)
00006C56 3369 000A 003A             		move.w	obScreenY(a1),$3A(a1)
00006C5C 137C 001C 003C             		move.b	#$1C,$3C(a1)
00006C62 47F8 FE58                  		lea	(v_emldlist).w,a3
00006C66                            
00006C66                            	@chkemerald:
00006C66 7000                       		moveq	#0,d0
00006C68 1038 FE57                  		move.b	(v_emeralds).w,d0
00006C6C 5340                       		subq.w	#1,d0
00006C6E 6500                       		bcs.s	@loc_5B42
00006C70                            
00006C70                            	@chkloop:
00006C70 B433 0000                  		cmp.b	(a3,d0.w),d2
00006C74 6600                       		bne.s	@notgot
00006C76 5202                       		addq.b	#1,d2
00006C78 60EC                       		bra.s	@chkemerald
00006C7A                            ; ===========================================================================
00006C7A                            
00006C7A                            	@notgot:
00006C7A 51C8 FFF4                  		dbf	d0,@chkloop
00006C7E                            
00006C7E                            @loc_5B42:
00006C7E 1342 001A                  		move.b	d2,obFrame(a1)
00006C82 5229 001A                  		addq.b	#1,obFrame(a1)
00006C86 5202                       		addq.b	#1,d2
00006C88 137C 0080 0026             		move.b	#$80,obAngle(a1)
00006C8E 1343 001E                  		move.b	d3,obTimeFrame(a1)
00006C92 1343 001F                  		move.b	d3,obDelayAni(a1)
00006C96 0643 000A                  		addi.w	#10,d3
00006C9A 43E9 0040                  		lea	$40(a1),a1
00006C9E 51C9 FF82                  		dbf	d1,@makeemerald	; repeat 5 times
00006CA2                            
00006CA2                            TCha_Move:	; Routine 2
00006CA2 4A68 003E                  		tst.w	$3E(a0)
00006CA6 6700                       		beq.s	locret_5BBA
00006CA8 4A28 001E                  		tst.b	obTimeFrame(a0)
00006CAC 6700                       		beq.s	loc_5B78
00006CAE 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00006CB2 6600                       		bne.s	loc_5B80
00006CB4                            
00006CB4                            loc_5B78:
00006CB4 3028 003E                  		move.w	$3E(a0),d0
00006CB8 D168 0026                  		add.w	d0,obAngle(a0)
00006CBC                            
00006CBC                            loc_5B80:
00006CBC 1028 0026                  		move.b	obAngle(a0),d0
00006CC0 6700                       		beq.s	loc_5B8C
00006CC2 0C00 0080                  		cmpi.b	#$80,d0
00006CC6 6600                       		bne.s	loc_5B96
00006CC8                            
00006CC8                            loc_5B8C:
00006CC8 4268 003E                  		clr.w	$3E(a0)
00006CCC 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
00006CD2                            
00006CD2                            loc_5B96:
00006CD2 4EB9 0000 3D28             		jsr	(CalcSine).l
00006CD8 7800                       		moveq	#0,d4
00006CDA 1828 003C                  		move.b	$3C(a0),d4
00006CDE C3C4                       		muls.w	d4,d1
00006CE0 E081                       		asr.l	#8,d1
00006CE2 C1C4                       		muls.w	d4,d0
00006CE4 E080                       		asr.l	#8,d0
00006CE6 D268 0038                  		add.w	$38(a0),d1
00006CEA D068 003A                  		add.w	$3A(a0),d0
00006CEE 3141 0008                  		move.w	d1,obX(a0)
00006CF2 3140 000A                  		move.w	d0,obScreenY(a0)
00006CF6                            
00006CF6                            locret_5BBA:
00006CF6 4E75                       		rts	
00006CF6 4E75                       		rts	
00006CF8                            Map_EEgg:	include	"_maps\Try Again & End Eggman.asm"
00006CF8                            ; ---------------------------------------------------------------------------
00006CF8                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006CF8                            ; ---------------------------------------------------------------------------
00006CF8                            Map_EEgg_internal:
00006CF8 0000                       		dc.w M_EEgg_Try1-Map_EEgg_internal
00006CFA 0000                       		dc.w M_EEgg_Try2-Map_EEgg_internal
00006CFC 0000                       		dc.w M_EEgg_Try3-Map_EEgg_internal
00006CFE 0000                       		dc.w M_EEgg_Try4-Map_EEgg_internal
00006D00 0000                       		dc.w M_EEgg_End1-Map_EEgg_internal
00006D02 0000                       		dc.w M_EEgg_End2-Map_EEgg_internal
00006D04 0000                       		dc.w M_EEgg_End3-Map_EEgg_internal
00006D06 0000                       		dc.w M_EEgg_End4-Map_EEgg_internal
00006D08 08                         M_EEgg_Try1:	dc.b 8
00006D09 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006D0E F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006D13 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006D18 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006D1D 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006D22 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006D27 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006D2C 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006D31 08                         M_EEgg_Try2:	dc.b 8
00006D32 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006D37 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006D3C E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006D41 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006D46 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006D4B 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006D50 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006D55 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006D5A 08                         M_EEgg_Try3:	dc.b 8
00006D5B E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006D60 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006D65 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00006D6A F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006D6F 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006D74 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006D79 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006D7E 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006D83 08                         M_EEgg_Try4:	dc.b 8
00006D84 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006D89 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006D8E E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00006D93 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00006D98 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006D9D 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006DA2 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006DA7 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006DAC 0C                         M_EEgg_End1:	dc.b $C
00006DAD ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00006DB2 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00006DB7 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00006DBC 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00006DC1 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00006DC6 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00006DCB 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00006DD0 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00006DD5 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00006DDA 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00006DDF 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006DE4 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006DE9 0A                         M_EEgg_End2:	dc.b $A
00006DEA D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006DEF DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006DF4 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006DF9 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006DFE DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006E03 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006E08 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006E0D 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006E12 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006E17 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006E1C 0A                         M_EEgg_End3:	dc.b $A
00006E1D C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006E22 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006E27 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006E2C C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006E31 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006E36 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006E3B 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006E40 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006E45 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006E4A 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006E4F 0C                         M_EEgg_End4:	dc.b $C
00006E50 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006E55 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006E5A 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006E5F 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006E64 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006E69 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006E6E 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006E73 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006E78 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006E7D 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006E82 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006E87 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006E8C                            		even
00006E8C                            		even
00006E8C                            
00006E8C                            ; ---------------------------------------------------------------------------
00006E8C                            ; Ending sequence demos
00006E8C                            ; ---------------------------------------------------------------------------
00006E8C                            Demo_EndGHZ1:	incbin	"demodata\Ending - GHZ1.bin"
00006EBA                            		even
00006EBA                            Demo_EndMZ:	incbin	"demodata\Ending - MZ.bin"
00006EFA                            		even
00006EFA                            Demo_EndSYZ:	incbin	"demodata\Ending - SYZ.bin"
00006F2A                            		even
00006F2A                            Demo_EndLZ:	incbin	"demodata\Ending - LZ.bin"
00006F5A                            		even
00006F5A                            Demo_EndSLZ:	incbin	"demodata\Ending - SLZ.bin"
00006F7A                            		even
00006F7A                            Demo_EndSBZ1:	incbin	"demodata\Ending - SBZ1.bin"
00006F9A                            		even
00006F9A                            Demo_EndSBZ2:	incbin	"demodata\Ending - SBZ2.bin"
00006FCA                            		even
00006FCA                            Demo_EndGHZ2:	incbin	"demodata\Ending - GHZ2.bin"
00006FFA                            		even
00006FFA                            
00006FFA                            		include	"_inc\LevelSizeLoad & BgScrollSpeed (JP1).asm"
00006FFA                            ; ---------------------------------------------------------------------------
00006FFA                            ; Subroutine to	load level boundaries and start	locations
00006FFA                            ; ---------------------------------------------------------------------------
00006FFA                            
00006FFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FFA                            
00006FFA                            
00006FFA                            LevelSizeLoad:
00006FFA 7000                       		moveq	#0,d0
00006FFC 11C0 F740                  		move.b	d0,($FFFFF740).w
00007000 11C0 F741                  		move.b	d0,($FFFFF741).w
00007004 11C0 F746                  		move.b	d0,($FFFFF746).w
00007008 11C0 F748                  		move.b	d0,($FFFFF748).w
0000700C 11C0 F742                  		move.b	d0,(v_dle_routine).w
00007010 3038 FE10                  		move.w	(v_zone).w,d0
00007014 ED08                       		lsl.b	#6,d0
00007016 E848                       		lsr.w	#4,d0
00007018 3200                       		move.w	d0,d1
0000701A D040                       		add.w	d0,d0
0000701C D041                       		add.w	d1,d0
0000701E 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00007022 3018                       		move.w	(a0)+,d0
00007024 31C0 F730                  		move.w	d0,($FFFFF730).w
00007028 2018                       		move.l	(a0)+,d0
0000702A 21C0 F728                  		move.l	d0,(v_limitleft2).w
0000702E 21C0 F720                  		move.l	d0,(v_limitleft1).w
00007032 2018                       		move.l	(a0)+,d0
00007034 21C0 F72C                  		move.l	d0,(v_limittop2).w
00007038 21C0 F724                  		move.l	d0,(v_limittop1).w
0000703C 3038 F728                  		move.w	(v_limitleft2).w,d0
00007040 0640 0240                  		addi.w	#$240,d0
00007044 31C0 F732                  		move.w	d0,(v_limitleft3).w
00007048 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
0000704E 3018                       		move.w	(a0)+,d0
00007050 31C0 F73E                  		move.w	d0,(v_lookshift).w
00007054 31FC 00A0 F7A0             		move.w    #160,(v_camera_pan).w    ; reset the horizontal camera pan value to 160 pixels
0000705A 6000 0000                  		bra.w	LevSz_ChkLamp
0000705E                            
0000705E                            ; ===========================================================================
0000705E                            ; ---------------------------------------------------------------------------
0000705E                            ; Level size array
0000705E                            ; ---------------------------------------------------------------------------
0000705E                            LevelSizeArray:
0000705E                            		; GHZ
0000705E 0004 0000 4470 0000 0400+  		dc.w $0004, $0000, $4470, $0000, $0400, $0060
0000706A 0004 0000 2E60 0000 0300+  		dc.w $0004, $0000, $2E60, $0000, $0300, $0060
00007076 0004 0000 2960 0000 0300+  		dc.w $0004, $0000, $2960, $0000, $0300, $0060
00007082 0004 0000 7EC0 0000 0400+  		dc.w $0004, $0000, $7EC0, $0000, $0400, $0060
0000708E                            		; LZ
0000708E 0004 0000 19AF 0000 0530+  		dc.w $0004, $0000, $19AF, $0000, $0530, $0060
0000709A 0004 0000 10AF 0000 0720+  		dc.w $0004, $0000, $10AF, $0000, $0720, $0060
000070A6 0004 0000 202F FF00 0800+  		dc.w $0004, $0000, $202F, $FF00, $0800, $0060
000070B2 0004 0000 20BF 0000 0720+  		dc.w $0004, $0000, $20BF, $0000, $0720, $0060
000070BE                            		; MZ
000070BE 0004 0000 21C0 0000 0520+  		dc.w $0004, $0000, $21C0, $0000, $0520, $0060
000070CA 0004 0000 2DE0 0000 0520+  		dc.w $0004, $0000, $2DE0, $0000, $0520, $0060
000070D6 0004 0000 1800 0000 0720+  		dc.w $0004, $0000, $1800, $0000, $0720, $0060
000070E2 0004 0000 16BF 0000 0720+  		dc.w $0004, $0000, $16BF, $0000, $0720, $0060
000070EE                            		; SLZ
000070EE 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
000070FA 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00007106 0004 0000 2000 0000 0640+  		dc.w $0004, $0000, $2000, $0000, $0640, $0060
00007112 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
0000711E                            		; SYZ
0000711E 0004 0000 1B00 0000 0520+  		dc.w $0004, $0000, $1B00, $0000, $0520, $0060
0000712A 0004 0000 1B60 0000 0520+  		dc.w $0004, $0000, $1B60, $0000, $0520, $0060
00007136 0004 0000 2C00 0000 0620+  		dc.w $0004, $0000, $2C00, $0000, $0620, $0060
00007142 0004 0000 2EC0 0000 0620+  		dc.w $0004, $0000, $2EC0, $0000, $0620, $0060
0000714E                            		; SBZ
0000714E 0004 0000 21C0 0000 0720+  		dc.w $0004, $0000, $21C0, $0000, $0720, $0060
0000715A 0004 0000 1E40 0000 0800+  		dc.w $0004, $0000, $1E40, $0000, $0800, $0060
00007166 0004 2080 2460 0510 0510+  		dc.w $0004, $2080, $2460, $0510, $0510, $0060
00007172 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
0000717E                            		; Ending
0000717E 0004 0000 0500 0110 0110+  		dc.w $0004, $0000, $0500, $0110, $0110, $0060
0000718A 0004 0000 0DC0 0110 0110+  		dc.w $0004, $0000, $0DC0, $0110, $0110, $0060
00007196 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
000071A2 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
000071AE                            
000071AE                            ; ---------------------------------------------------------------------------
000071AE                            ; Ending start location array
000071AE                            ; ---------------------------------------------------------------------------
000071AE                            EndingStLocArray:
000071AE                            		include	"_inc\Start Location Array - Ending.asm"
000071AE                            ; ---------------------------------------------------------------------------
000071AE                            ; Ending start location array
000071AE                            ; ---------------------------------------------------------------------------
000071AE                            
000071AE                            		incbin	"startpos\ghz1 (Credits demo 1).bin"
000071B2                            		incbin	"startpos\mz2 (Credits demo).bin"
000071B6                            		incbin	"startpos\syz3 (Credits demo).bin"
000071BA                            		incbin	"startpos\lz3 (Credits demo).bin"
000071BE                            		incbin	"startpos\slz3 (Credits demo).bin"
000071C2                            		incbin	"startpos\sbz1 (Credits demo).bin"
000071C6                            		incbin	"startpos\sbz2 (Credits demo).bin"
000071CA                            		incbin	"startpos\ghz1 (Credits demo 2).bin"
000071CE                            		even
000071CE                            		even
000071CE                            
000071CE                            ; ===========================================================================
000071CE                            
000071CE                            LevSz_ChkLamp:
000071CE 4A38 FE30                  		tst.b	(v_lastlamp).w	; have any lampposts been hit?
000071D2 6700                       		beq.s	LevSz_StartLoc	; if not, branch
000071D4                            
000071D4 4EB9 0000 0000             		jsr	(Lamp_LoadInfo).l
000071DA 3238 D008                  		move.w	(v_player+obX).w,d1
000071DE 3038 D00C                  		move.w	(v_player+obY).w,d0
000071E2 6000                       		bra.s	LevSz_SkipStartPos
000071E4                            ; ===========================================================================
000071E4                            
000071E4                            LevSz_StartLoc:
000071E4 3038 FE10                  		move.w	(v_zone).w,d0
000071E8 ED08                       		lsl.b	#6,d0
000071EA E848                       		lsr.w	#4,d0
000071EC 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
000071F0 4A78 FFF0                  		tst.w	(f_demo).w	; is ending demo mode on?
000071F4 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
000071F6                            
000071F6 3038 FFF4                  		move.w	(v_creditsnum).w,d0
000071FA 5340                       		subq.w	#1,d0
000071FC E548                       		lsl.w	#2,d0
000071FE 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00007202                            
00007202                            LevSz_SonicPos:
00007202 7200                       		moveq	#0,d1
00007204 3219                       		move.w	(a1)+,d1
00007206 31C1 D008                  		move.w	d1,(v_player+obX).w ; set Sonic's position on x-axis
0000720A 7000                       		moveq	#0,d0
0000720C 3011                       		move.w	(a1),d0
0000720E 31C0 D00C                  		move.w	d0,(v_player+obY).w ; set Sonic's position on y-axis
00007212                            
00007212                            SetScreen:
00007212                            	LevSz_SkipStartPos:
00007212 4278 F7A8                  		clr.w (v_trackpos).w ; reset Sonic's position tracking index 
00007216 45F8 CB00                  		lea (v_tracksonic).w,a2 ; load the tracking array into a2 
0000721A 743F                       		moveq #63,d2 ; begin a 64-step loop 
0000721C                            @looppoint: 
0000721C 34C1                       		move.w d1,(a2)+ ; fill in X 
0000721E 34C0                       		move.w d0,(a2)+ ; fill in Y 
00007220 51CA FFFA                  		dbf d2,@looppoint ; loop	
00007224 0441 00A0                  		subi.w	#160,d1		; is Sonic more than 160px from left edge?
00007228 6400                       		bcc.s	SetScr_WithinLeft ; if yes, branch
0000722A 7200                       		moveq	#0,d1
0000722C                            
0000722C                            	SetScr_WithinLeft:
0000722C 3438 F72A                  		move.w	(v_limitright2).w,d2
00007230 B242                       		cmp.w	d2,d1		; is Sonic inside the right edge?
00007232 6500                       		bcs.s	SetScr_WithinRight ; if yes, branch
00007234 3202                       		move.w	d2,d1
00007236                            
00007236                            	SetScr_WithinRight:
00007236 31C1 F700                  		move.w	d1,(v_screenposx).w ; set horizontal screen position
0000723A                            
0000723A 0440 0060                  		subi.w	#96,d0		; is Sonic within 96px of upper edge?
0000723E 6400                       		bcc.s	SetScr_WithinTop ; if yes, branch
00007240 7000                       		moveq	#0,d0
00007242                            
00007242                            	SetScr_WithinTop:
00007242 B078 F72E                  		cmp.w	(v_limitbtm2).w,d0 ; is Sonic above the bottom edge?
00007246 6D00                       		blt.s	SetScr_WithinBottom ; if yes, branch
00007248 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000724C                            
0000724C                            	SetScr_WithinBottom:
0000724C 31C0 F704                  		move.w	d0,(v_screenposy).w ; set vertical screen position
00007250 6100 0000                  		bsr.w	BgScrollSpeed
00007254 7000                       		moveq	#0,d0
00007256 1038 FE10                  		move.b	(v_zone).w,d0
0000725A E508                       		lsl.b	#2,d0
0000725C 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),(v_256loop1).w
00007262 4E75                       		rts
00007264                            ; ===========================================================================
00007264                            ; ---------------------------------------------------------------------------
00007264                            ; Sonic start location array
00007264                            ; ---------------------------------------------------------------------------
00007264                            StartLocArray:	include	"_inc\Start Location Array - Levels.asm"
00007264                            ; ---------------------------------------------------------------------------
00007264                            ; Sonic start location array
00007264                            ; ---------------------------------------------------------------------------
00007264                            
00007264                            		incbin	"startpos\ghz1.bin"
00007268                            		incbin	"startpos\ghz2.bin"
0000726C                            		incbin	"startpos\ghz3.bin"
00007270 0080 00A8                  		dc.w	$80,$A8
00007274                            
00007274                            		incbin	"startpos\lz1.bin"
00007278                            		incbin	"startpos\lz2.bin"
0000727C                            		incbin	"startpos\lz3.bin"
00007280                            		incbin	"startpos\sbz3.bin"
00007284                            
00007284                            		incbin	"startpos\mz1.bin"
00007288                            		incbin	"startpos\mz2.bin"
0000728C                            		incbin	"startpos\mz3.bin"
00007290 0080 00A8                  		dc.w	$80,$A8
00007294                            
00007294                            		incbin	"startpos\slz1.bin"
00007298                            		incbin	"startpos\slz2.bin"
0000729C                            		incbin	"startpos\slz3.bin"
000072A0 0080 00A8                  		dc.w	$80,$A8
000072A4                            
000072A4                            		incbin	"startpos\syz1.bin"
000072A8                            		incbin	"startpos\syz2.bin"
000072AC                            		incbin	"startpos\syz3.bin"
000072B0 0080 00A8                  		dc.w	$80,$A8
000072B4                            
000072B4                            		incbin	"startpos\sbz1.bin"
000072B8                            		incbin	"startpos\sbz2.bin"
000072BC                            		incbin	"startpos\fz.bin"
000072C0 0080 00A8                  		dc.w	$80,$A8
000072C4                            
000072C4                            
000072C4                            		incbin	"startpos\end1.bin"
000072C8                            		incbin	"startpos\end2.bin"
000072CC 0080 00A8                  		dc.w	$80,$A8
000072D0 0080 00A8                  		dc.w	$80,$A8
000072D4                            
000072D4                            		even
000072D4                            		even
000072D4                            
000072D4                            ; ---------------------------------------------------------------------------
000072D4                            ; Which	256x256	tiles contain loops or roll-tunnels
000072D4                            ; ---------------------------------------------------------------------------
000072D4                            
000072D4                            LoopTileNums:
000072D4                            
000072D4                            ; 		loop	loop	tunnel	tunnel
000072D4                            
000072D4 B5C0 1F20                  	dc.b	$B5,	$C0,	$1F,	$20	; Green Hill
000072D8 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Labyrinth
000072DC 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Marble
000072E0 AAB4 7F7F                  	dc.b	$AA,	$B4,	$7F,	$7F	; Star Light
000072E4 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Spring Yard
000072E8 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Scrap Brain
000072EC 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Ending (Green Hill)
000072F0                            
000072F0                            		even
000072F0                            
000072F0                            ; ---------------------------------------------------------------------------
000072F0                            ; Subroutine to	set scroll speed of some backgrounds
000072F0                            ; ---------------------------------------------------------------------------
000072F0                            
000072F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072F0                            
000072F0                            
000072F0                            BgScrollSpeed:
000072F0 4A38 FE30                  		tst.b	(v_lastlamp).w
000072F4 6600                       		bne.s	loc_6206
000072F6 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000072FA 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
000072FE 31C1 F708                  		move.w	d1,(v_bgscreenposx).w
00007302 31C1 F710                  		move.w	d1,(v_bg2screenposx).w
00007306 31C1 F718                  		move.w	d1,(v_bg3screenposx).w
0000730A                            
0000730A                            loc_6206:
0000730A 7400                       		moveq	#0,d2
0000730C 1438 FE10                  		move.b	(v_zone).w,d2
00007310 D442                       		add.w	d2,d2
00007312 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00007316 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
0000731A                            ; End of function BgScrollSpeed
0000731A                            
0000731A                            ; ===========================================================================
0000731A 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
0000731E 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00007322 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00007326 0000                       		dc.w BgScroll_End-BgScroll_Index
00007328                            ; ===========================================================================
00007328                            
00007328                            BgScroll_GHZ:
00007328 42B8 F708                  		clr.l	(v_bgscreenposx).w
0000732C 42B8 F70C                  		clr.l	(v_bgscreenposy).w
00007330 42B8 F714                  		clr.l	(v_bg2screenposy).w
00007334 42B8 F71C                  		clr.l	(v_bg3screenposy).w
00007338 45F8 A800                  		lea	($FFFFA800).w,a2
0000733C 429A                       		clr.l	(a2)+
0000733E 429A                       		clr.l	(a2)+
00007340 429A                       		clr.l	(a2)+
00007342 4E75                       		rts
00007344                            ; ===========================================================================
00007344                            
00007344                            BgScroll_LZ:
00007344 E280                       		asr.l	#1,d0
00007346 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
0000734A 4E75                       		rts	
0000734C                            ; ===========================================================================
0000734C                            
0000734C                            BgScroll_MZ:
0000734C 4E75                       		rts	
0000734E                            ; ===========================================================================
0000734E                            
0000734E                            BgScroll_SLZ:
0000734E E280                       		asr.l	#1,d0
00007350 0640 00C0                  		addi.w	#$C0,d0
00007354 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007358 42B8 F708                  		clr.l	(v_bgscreenposx).w
0000735C 4E75                       		rts	
0000735E                            ; ===========================================================================
0000735E                            
0000735E                            BgScroll_SYZ:
0000735E E980                       		asl.l	#4,d0
00007360 2400                       		move.l	d0,d2
00007362 E380                       		asl.l	#1,d0
00007364 D082                       		add.l	d2,d0
00007366 E080                       		asr.l	#8,d0
00007368 5240                       		addq.w	#1,d0
0000736A 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
0000736E 42B8 F708                  		clr.l	(v_bgscreenposx).w
00007372 4E75                       		rts	
00007374                            ; ===========================================================================
00007374                            
00007374                            BgScroll_SBZ:
00007374 0240 07F8                  		andi.w	#$7F8,d0
00007378 E640                       		asr.w	#3,d0
0000737A 5240                       		addq.w	#1,d0
0000737C 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007380 4E75                       		rts	
00007382                            ; ===========================================================================
00007382                            
00007382                            BgScroll_End:
00007382 3038 F700                  		move.w	(v_screenposx).w,d0
00007386 E240                       		asr.w	#1,d0
00007388 31C0 F708                  		move.w	d0,(v_bgscreenposx).w
0000738C 31C0 F710                  		move.w	d0,(v_bg2screenposx).w
00007390 E440                       		asr.w	#2,d0
00007392 3200                       		move.w	d0,d1
00007394 D040                       		add.w	d0,d0
00007396 D041                       		add.w	d1,d0
00007398 31C0 F718                  		move.w	d0,(v_bg3screenposx).w
0000739C 42B8 F70C                  		clr.l	(v_bgscreenposy).w
000073A0 42B8 F714                  		clr.l	(v_bg2screenposy).w
000073A4 42B8 F71C                  		clr.l	(v_bg3screenposy).w
000073A8 45F8 A800                  		lea	($FFFFA800).w,a2
000073AC 429A                       		clr.l	(a2)+
000073AE 429A                       		clr.l	(a2)+
000073B0 429A                       		clr.l	(a2)+
000073B2 4E75                       		rts
000073B2 4E75                       		rts
000073B4                            		include	"_inc\DeformLayers (JP1).asm"
000073B4                            ; ---------------------------------------------------------------------------
000073B4                            ; Background layer deformation subroutines
000073B4                            ; ---------------------------------------------------------------------------
000073B4                            
000073B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000073B4                            
000073B4                            
000073B4                            DeformLayers:
000073B4 4A38 F744                  		tst.b	(f_nobgscroll).w
000073B8 6700                       		beq.s	@bgscroll
000073BA 4E75                       		rts	
000073BC                            ; ===========================================================================
000073BC                            
000073BC                            	@bgscroll:
000073BC 4278 F754                  		clr.w	(v_fg_scroll_flags).w
000073C0 4278 F756                  		clr.w	(v_bg1_scroll_flags).w
000073C4 4278 F758                  		clr.w	(v_bg2_scroll_flags).w
000073C8 4278 F75A                  		clr.w	(v_bg3_scroll_flags).w
000073CC 6100 0000                  		bsr.w	ScrollHoriz
000073D0 6100 0000                  		bsr.w	ScrollVertical
000073D4 6100 0000                  		bsr.w	DynamicLevelEvents
000073D8 31F8 F704 F616             		move.w	(v_screenposy).w,(v_scrposy_dup).w
000073DE 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000073E4 7000                       		moveq	#0,d0
000073E6 1038 FE10                  		move.b	(v_zone).w,d0
000073EA D040                       		add.w	d0,d0
000073EC 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
000073F0 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
000073F4                            ; End of function DeformLayers
000073F4                            
000073F4                            ; ===========================================================================
000073F4                            ; ---------------------------------------------------------------------------
000073F4                            ; Offset index for background layer deformation	code
000073F4                            ; ---------------------------------------------------------------------------
000073F4 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
000073F8 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
000073FC 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00007400 0000                       		dc.w Deform_GHZ-Deform_Index
00007402                            ; ---------------------------------------------------------------------------
00007402                            ; Green	Hill Zone background layer deformation code
00007402                            ; ---------------------------------------------------------------------------
00007402                            
00007402                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007402                            
00007402                            
00007402                            Deform_GHZ:
00007402                            	;cmpi.b    #id_Title,(v_gamemode).w
00007402                            	;beq.w    Deform_Title
00007402                            
00007402                            ;Deform_GHZ_Stage:
00007402                            	; block 3 - distant mountains
00007402 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007406 48C4                       		ext.l	d4
00007408 EB84                       		asl.l	#5,d4
0000740A 2204                       		move.l	d4,d1
0000740C E384                       		asl.l	#1,d4
0000740E D881                       		add.l	d1,d4
00007410 7C00                       		moveq	#0,d6
00007412 6100 0000                  		bsr.w	BGScroll_Block3
00007416                            	; block 2 - hills & waterfalls
00007416 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000741A 48C4                       		ext.l	d4
0000741C EF84                       		asl.l	#7,d4
0000741E 7C00                       		moveq	#0,d6
00007420 6100 0000                  		bsr.w	BGScroll_Block2
00007424                            	; calculate Y position
00007424 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007428 3038 F704                  		move.w	(v_screenposy).w,d0
0000742C 0240 07FF                  		andi.w	#$7FF,d0
00007430 EA48                       		lsr.w	#5,d0
00007432 4440                       		neg.w	d0
00007434 0640 0020                  		addi.w	#$20,d0
00007438 6A00                       		bpl.s	@limitY
0000743A 7000                       		moveq	#0,d0
0000743C                            	@limitY:
0000743C 3800                       		move.w	d0,d4
0000743E 31C0 F618                  		move.w	d0,(v_bgscrposy_dup).w
00007442 3038 F700                  		move.w	(v_screenposx).w,d0
00007446 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
0000744C 6600                       		bne.s	@notTitle
0000744E 7000                       		moveq	#0,d0	; reset foreground position in title screen
00007450                            	@notTitle:
00007450 4440                       		neg.w	d0
00007452 4840                       		swap	d0
00007454                            	; auto-scroll clouds
00007454 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007458 069A 0001 0000             		addi.l	#$10000,(a2)+
0000745E 069A 0000 C000             		addi.l	#$C000,(a2)+
00007464 069A 0000 8000             		addi.l	#$8000,(a2)+
0000746A                            	; calculate background scroll	
0000746A 3038 A800                  		move.w	(v_bgscroll_buffer).w,d0
0000746E D078 F718                  		add.w	(v_bg3screenposx).w,d0
00007472 4440                       		neg.w	d0
00007474 323C 001F                  		move.w	#$1F,d1
00007478 9244                       		sub.w	d4,d1
0000747A 6500                       		bcs.s	@gotoCloud2
0000747C                            	@cloudLoop1:		; upper cloud (32px)
0000747C 22C0                       		move.l	d0,(a1)+
0000747E 51C9 FFFC                  		dbf	d1,@cloudLoop1
00007482                            
00007482                            	@gotoCloud2:
00007482 3038 A804                  		move.w	(v_bgscroll_buffer+4).w,d0
00007486 D078 F718                  		add.w	(v_bg3screenposx).w,d0
0000748A 4440                       		neg.w	d0
0000748C 323C 000F                  		move.w	#$F,d1
00007490                            	@cloudLoop2:		; middle cloud (16px)
00007490 22C0                       		move.l	d0,(a1)+
00007492 51C9 FFFC                  		dbf	d1,@cloudLoop2
00007496                            
00007496 3038 A808                  		move.w	(v_bgscroll_buffer+8).w,d0
0000749A D078 F718                  		add.w	(v_bg3screenposx).w,d0
0000749E 4440                       		neg.w	d0
000074A0 323C 000F                  		move.w	#$F,d1
000074A4                            	@cloudLoop3:		; lower cloud (16px)
000074A4 22C0                       		move.l	d0,(a1)+
000074A6 51C9 FFFC                  		dbf	d1,@cloudLoop3
000074AA                            
000074AA 323C 002F                  		move.w	#$2F,d1
000074AE 3038 F718                  		move.w	(v_bg3screenposx).w,d0
000074B2 4440                       		neg.w	d0
000074B4                            	@mountainLoop:		; distant mountains (48px)
000074B4 22C0                       		move.l	d0,(a1)+
000074B6 51C9 FFFC                  		dbf	d1,@mountainLoop
000074BA                            
000074BA 323C 0027                  		move.w	#$27,d1
000074BE 3038 F710                  		move.w	(v_bg2screenposx).w,d0
000074C2 4440                       		neg.w	d0
000074C4                            	@hillLoop:			; hills & waterfalls (40px)
000074C4 22C0                       		move.l	d0,(a1)+
000074C6 51C9 FFFC                  		dbf	d1,@hillLoop
000074CA                            
000074CA 3038 F710                  		move.w	(v_bg2screenposx).w,d0
000074CE 3438 F700                  		move.w	(v_screenposx).w,d2
000074D2 9440                       		sub.w	d0,d2
000074D4 48C2                       		ext.l	d2
000074D6 E182                       		asl.l	#8,d2
000074D8 85FC 0068                  		divs.w	#$68,d2
000074DC 48C2                       		ext.l	d2
000074DE E182                       		asl.l	#8,d2
000074E0 7600                       		moveq	#0,d3
000074E2 3600                       		move.w	d0,d3
000074E4 323C 0047                  		move.w	#$47,d1
000074E8 D244                       		add.w	d4,d1
000074EA                            	@waterLoop:			; water deformation
000074EA 3003                       		move.w	d3,d0
000074EC 4440                       		neg.w	d0
000074EE 22C0                       		move.l	d0,(a1)+
000074F0 4843                       		swap	d3
000074F2 D682                       		add.l	d2,d3
000074F4 4843                       		swap	d3
000074F6 51C9 FFF2                  		dbf	d1,@waterLoop
000074FA 4E75                       		rts
000074FC                            ; End of function Deform_GHZ
000074FC                            
000074FC                            Deform_Title:
000074FC 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007500 48C4                       		ext.l	d4
00007502 EB84                       		asl.l	#5,d4
00007504 2204                       		move.l	d4,d1
00007506 E384                       		asl.l	#1,d4
00007508 D881                       		add.l	d1,d4
0000750A 7A00                       		moveq	#0,d5
0000750C 6100 0000                  		bsr.w	BGScroll_Block1
00007510 6100 0000                  		bsr.w	BGScroll_Block3
00007514 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007518 3038 F704                  		move.w	(v_screenposy).w,d0
0000751C 0240 07FF                  		andi.w	#$7FF,d0
00007520 EA48                       		lsr.w	#5,d0
00007522 4440                       		neg.w	d0
00007524 0640 0026                  		addi.w	#$26,d0
00007528 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
0000752C 3800                       		move.w	d0,d4
0000752E 6100 0000                  		bsr.w	BGScroll_Block3
00007532 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007538 323C 006F                  		move.w	#$6F,d1
0000753C 9244                       		sub.w	d4,d1
0000753E 3038 F700                  		move.w	(v_screenposx).w,d0
00007542 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
00007548 6600                       		bne.s	loc_633C
0000754A 7000                       		moveq	#0,d0
0000754C                            
0000754C                            loc_633C:
0000754C 4440                       		neg.w	d0
0000754E 4840                       		swap	d0
00007550 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007554 4440                       		neg.w	d0
00007556                            
00007556                            loc_6346:
00007556 22C0                       		move.l	d0,(a1)+
00007558 51C9 FFFC                  		dbf	d1,loc_6346
0000755C 323C 0027                  		move.w	#$27,d1
00007560 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007564 4440                       		neg.w	d0
00007566                            
00007566                            loc_6356:
00007566 22C0                       		move.l	d0,(a1)+
00007568 51C9 FFFC                  		dbf	d1,loc_6356
0000756C 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007570 0640 0000                  		addi.w	#0,d0
00007574 3438 F700                  		move.w	(v_screenposx).w,d2
00007578 0642 FE00                  		addi.w	#-$200,d2
0000757C 9440                       		sub.w	d0,d2
0000757E 48C2                       		ext.l	d2
00007580 E182                       		asl.l	#8,d2
00007582 85FC 0068                  		divs.w	#$68,d2
00007586 48C2                       		ext.l	d2
00007588 E182                       		asl.l	#8,d2
0000758A 7600                       		moveq	#0,d3
0000758C 3600                       		move.w	d0,d3
0000758E 323C 0047                  		move.w	#$47,d1
00007592 D244                       		add.w	d4,d1
00007594                            
00007594                            loc_6384:
00007594 3003                       		move.w	d3,d0
00007596 4440                       		neg.w	d0
00007598 22C0                       		move.l	d0,(a1)+
0000759A 4843                       		swap	d3
0000759C D682                       		add.l	d2,d3
0000759E 4843                       		swap	d3
000075A0 51C9 FFF2                  		dbf	d1,loc_6384
000075A4 4E75                       		rts	
000075A6                            
000075A6                            ; ===========================================================================
000075A6                            ; ---------------------------------------------------------------------------
000075A6                            ; Labyrinth Zone background layer deformation code
000075A6                            ; ---------------------------------------------------------------------------
000075A6                            
000075A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075A6                            
000075A6                            
000075A6                            Deform_LZ:
000075A6                            	; plain background scroll
000075A6 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000075AA 48C4                       		ext.l	d4
000075AC EF84                       		asl.l	#7,d4
000075AE 3A38 F73C                  		move.w	(v_scrshifty).w,d5
000075B2 48C5                       		ext.l	d5
000075B4 EF85                       		asl.l	#7,d5
000075B6 6100 0000                  		bsr.w	BGScroll_XY
000075BA                            
000075BA 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000075C0 47F9 0000 0000             		lea	(Lz_Scroll_Data).l,a3
000075C6 45F9 0000 0000             		lea	(Drown_WobbleData).l,a2
000075CC 1438 F7D8                  		move.b	(v_lz_deform).w,d2
000075D0 1602                       		move.b	d2,d3
000075D2 0678 0080 F7D8             		addi.w	#$80,(v_lz_deform).w
000075D8                            
000075D8 D478 F70C                  		add.w	(v_bgscreenposy).w,d2
000075DC 0242 00FF                  		andi.w	#$FF,d2
000075E0 D678 F704                  		add.w	(v_screenposy).w,d3
000075E4 0243 00FF                  		andi.w	#$FF,d3
000075E8 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000075EC 323C 00DF                  		move.w	#$DF,d1
000075F0 3038 F700                  		move.w	(v_screenposx).w,d0
000075F4 4440                       		neg.w	d0
000075F6 3C00                       		move.w	d0,d6
000075F8 4840                       		swap	d0
000075FA 3038 F708                  		move.w	(v_bgscreenposx).w,d0
000075FE 4440                       		neg.w	d0
00007600 3838 F646                  		move.w	(v_waterpos1).w,d4
00007604 3A38 F704                  		move.w	(v_screenposy).w,d5
00007608                            	; write normal scroll before meeting water position
00007608                            	@normalLoop:		
00007608 BA44                       		cmp.w	d4,d5	; is current y >= water y?
0000760A 6C00                       		bge.s	@underwaterLoop	; if yes, branch
0000760C 22C0                       		move.l	d0,(a1)+
0000760E 5245                       		addq.w	#1,d5
00007610 5202                       		addq.b	#1,d2
00007612 5203                       		addq.b	#1,d3
00007614 51C9 FFF2                  		dbf	d1,@normalLoop
00007618 4E75                       		rts
0000761A                            	; apply water deformation when underwater
0000761A                            	@underwaterLoop:
0000761A 1833 3000                  		move.b	(a3,d3),d4
0000761E 4884                       		ext.w	d4
00007620 D846                       		add.w	d6,d4
00007622 32C4                       		move.w	d4,(a1)+
00007624 1832 2000                  		move.b	(a2,d2),d4
00007628 4884                       		ext.w	d4
0000762A D840                       		add.w	d0,d4
0000762C 32C4                       		move.w	d4,(a1)+
0000762E 5202                       		addq.b	#1,d2
00007630 5203                       		addq.b	#1,d3
00007632 51C9 FFE6                  		dbf	d1,@underwaterLoop
00007636 4E75                       		rts
00007638                            
00007638                            Lz_Scroll_Data:
00007638 0101 0202 0303 0303 0202+  		dc.b $01,$01,$02,$02,$03,$03,$03,$03,$02,$02,$01,$01,$00,$00,$00,$00
00007648 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007658 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007668 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007678 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007688 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007698 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000076A8 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000076B8 FFFF FEFE FDFD FDFD FEFE+  		dc.b $FF,$FF,$FE,$FE,$FD,$FD,$FD,$FD,$FE,$FE,$FF,$FF,$00,$00,$00,$00
000076C8 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000076D8 0101 0202 0303 0303 0202+  		dc.b $01,$01,$02,$02,$03,$03,$03,$03,$02,$02,$01,$01,$00,$00,$00,$00
000076E8 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000076F8 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007708 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007718 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007728 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007738                            ; End of function Deform_LZ
00007738                            
00007738                            ; ---------------------------------------------------------------------------
00007738                            ; Marble Zone background layer deformation code
00007738                            ; ---------------------------------------------------------------------------
00007738                            
00007738                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007738                            
00007738                            
00007738                            Deform_MZ:
00007738                            	; block 1 - dungeon interior
00007738 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000773C 48C4                       		ext.l	d4
0000773E ED84                       		asl.l	#6,d4
00007740 2204                       		move.l	d4,d1
00007742 E384                       		asl.l	#1,d4
00007744 D881                       		add.l	d1,d4
00007746 7C02                       		moveq	#2,d6
00007748 6100 0000                  		bsr.w	BGScroll_Block1
0000774C                            	; block 3 - mountains
0000774C 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007750 48C4                       		ext.l	d4
00007752 ED84                       		asl.l	#6,d4
00007754 7C06                       		moveq	#6,d6
00007756 6100 0000                  		bsr.w	BGScroll_Block3
0000775A                            	; block 2 - bushes & antique buildings
0000775A 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000775E 48C4                       		ext.l	d4
00007760 EF84                       		asl.l	#7,d4
00007762 7C04                       		moveq	#4,d6
00007764 6100 0000                  		bsr.w	BGScroll_Block2
00007768                            	; calculate y-position of background
00007768 303C 0200                  		move.w	#$200,d0	; start with 512px, ignoring 2 chunks
0000776C 3238 F704                  		move.w	(v_screenposy).w,d1
00007770 0441 01C8                  		subi.w	#$1C8,d1	; 0% scrolling when y <= 56px 
00007774 6500                       		bcs.s	@noYscroll
00007776 3401                       		move.w	d1,d2
00007778 D241                       		add.w	d1,d1
0000777A D242                       		add.w	d2,d1
0000777C E441                       		asr.w	#2,d1
0000777E D041                       		add.w	d1,d0
00007780                            	@noYscroll:
00007780 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007784 31C0 F71C                  		move.w	d0,(v_bg3screenposy).w
00007788 6100 0000                  		bsr.w	BGScroll_YAbsolute
0000778C 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007792                            	; do something with redraw flags
00007792 1038 F756                  		move.b	(v_bg1_scroll_flags).w,d0
00007796 8038 F758                  		or.b	(v_bg2_scroll_flags).w,d0
0000779A 8138 F75A                  		or.b	d0,(v_bg3_scroll_flags).w
0000779E 4238 F756                  		clr.b	(v_bg1_scroll_flags).w
000077A2 4238 F758                  		clr.b	(v_bg2_scroll_flags).w
000077A6                            	; calculate background scroll buffer
000077A6 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
000077AA 3438 F700                  		move.w	(v_screenposx).w,d2
000077AE 4442                       		neg.w	d2
000077B0 3002                       		move.w	d2,d0
000077B2 E440                       		asr.w	#2,d0
000077B4 9042                       		sub.w	d2,d0
000077B6 48C0                       		ext.l	d0
000077B8 E780                       		asl.l	#3,d0
000077BA 81FC 0005                  		divs.w	#5,d0
000077BE 48C0                       		ext.l	d0
000077C0 E980                       		asl.l	#4,d0
000077C2 E180                       		asl.l	#8,d0
000077C4 7600                       		moveq	#0,d3
000077C6 3602                       		move.w	d2,d3
000077C8 E243                       		asr.w	#1,d3
000077CA 323C 0004                  		move.w	#4,d1
000077CE                            	@cloudLoop:		
000077CE 32C3                       		move.w	d3,(a1)+
000077D0 4843                       		swap	d3
000077D2 D680                       		add.l	d0,d3
000077D4 4843                       		swap	d3
000077D6 51C9 FFF6                  		dbf	d1,@cloudLoop
000077DA                            
000077DA 3038 F718                  		move.w	(v_bg3screenposx).w,d0
000077DE 4440                       		neg.w	d0
000077E0 323C 0001                  		move.w	#1,d1
000077E4                            	@mountainLoop:		
000077E4 32C0                       		move.w	d0,(a1)+
000077E6 51C9 FFFC                  		dbf	d1,@mountainLoop
000077EA                            
000077EA 3038 F710                  		move.w	(v_bg2screenposx).w,d0
000077EE 4440                       		neg.w	d0
000077F0 323C 0008                  		move.w	#8,d1
000077F4                            	@bushLoop:		
000077F4 32C0                       		move.w	d0,(a1)+
000077F6 51C9 FFFC                  		dbf	d1,@bushLoop
000077FA                            
000077FA 3038 F708                  		move.w	(v_bgscreenposx).w,d0
000077FE 4440                       		neg.w	d0
00007800 323C 000F                  		move.w	#$F,d1
00007804                            	@interiorLoop:		
00007804 32C0                       		move.w	d0,(a1)+
00007806 51C9 FFFC                  		dbf	d1,@interiorLoop
0000780A                            
0000780A 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
0000780E 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007812 0440 0200                  		subi.w	#$200,d0	; subtract 512px (unused 2 chunks)
00007816 3400                       		move.w	d0,d2
00007818 0C40 0100                  		cmpi.w	#$100,d0
0000781C 6500                       		bcs.s	@limitY
0000781E 303C 0100                  		move.w	#$100,d0
00007822                            	@limitY:
00007822 0240 01F0                  		andi.w	#$1F0,d0
00007826 E648                       		lsr.w	#3,d0
00007828 45F2 0000                  		lea	(a2,d0),a2
0000782C 6000 0000                  		bra.w	Bg_Scroll_X
00007830                            ; End of function Deform_MZ
00007830                            
00007830                            ; ---------------------------------------------------------------------------
00007830                            ; Star Light Zone background layer deformation code
00007830                            ; ---------------------------------------------------------------------------
00007830                            
00007830                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007830                            
00007830                            
00007830                            Deform_SLZ:
00007830                            	; vertical scrolling
00007830 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007834 48C5                       		ext.l	d5
00007836 EF85                       		asl.l	#7,d5
00007838 6100 0000                  		bsr.w	Bg_Scroll_Y
0000783C 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007842                            	; calculate background scroll buffer
00007842 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007846 3438 F700                  		move.w	(v_screenposx).w,d2
0000784A 4442                       		neg.w	d2
0000784C 3002                       		move.w	d2,d0
0000784E E640                       		asr.w	#3,d0
00007850 9042                       		sub.w	d2,d0
00007852 48C0                       		ext.l	d0
00007854 E980                       		asl.l	#4,d0
00007856 81FC 001C                  		divs.w	#$1C,d0
0000785A 48C0                       		ext.l	d0
0000785C E980                       		asl.l	#4,d0
0000785E E180                       		asl.l	#8,d0
00007860 7600                       		moveq	#0,d3
00007862 3602                       		move.w	d2,d3
00007864 323C 001B                  		move.w	#$1B,d1
00007868                            	@starLoop:		
00007868 32C3                       		move.w	d3,(a1)+
0000786A 4843                       		swap	d3
0000786C D680                       		add.l	d0,d3
0000786E 4843                       		swap	d3
00007870 51C9 FFF6                  		dbf	d1,@starLoop
00007874                            
00007874 3002                       		move.w	d2,d0
00007876 E640                       		asr.w	#3,d0
00007878 3200                       		move.w	d0,d1
0000787A E241                       		asr.w	#1,d1
0000787C D041                       		add.w	d1,d0
0000787E 323C 0004                  		move.w	#4,d1
00007882                            	@buildingLoop1:		; distant black buildings
00007882 32C0                       		move.w	d0,(a1)+
00007884 51C9 FFFC                  		dbf	d1,@buildingLoop1
00007888                            
00007888 3002                       		move.w	d2,d0
0000788A E440                       		asr.w	#2,d0
0000788C 323C 0004                  		move.w	#4,d1
00007890                            	@buildingLoop2:		; closer buildings
00007890 32C0                       		move.w	d0,(a1)+
00007892 51C9 FFFC                  		dbf	d1,@buildingLoop2
00007896                            
00007896 3002                       		move.w	d2,d0
00007898 E240                       		asr.w	#1,d0
0000789A 323C 001D                  		move.w	#$1D,d1
0000789E                            	@bottomLoop:		; bottom part of background
0000789E 32C0                       		move.w	d0,(a1)+
000078A0 51C9 FFFC                  		dbf	d1,@bottomLoop
000078A4                            
000078A4 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
000078A8 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
000078AC 3400                       		move.w	d0,d2
000078AE 0440 00C0                  		subi.w	#$C0,d0
000078B2 0240 03F0                  		andi.w	#$3F0,d0
000078B6 E648                       		lsr.w	#3,d0
000078B8 45F2 0000                  		lea	(a2,d0),a2
000078BC                            ;-------------------------------------------------------------------------------
000078BC                            ;-------------------------------------------------------------------------------
000078BC                            Bg_Scroll_X:
000078BC 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000078C0 323C 000E                  		move.w	#$E,d1
000078C4 3038 F700                  		move.w	(v_screenposx).w,d0
000078C8 4440                       		neg.w	d0
000078CA 4840                       		swap	d0
000078CC 0242 000F                  		andi.w	#$F,d2
000078D0 D442                       		add.w	d2,d2
000078D2 301A                       		move.w	(a2)+,d0
000078D4 4EFB 2000                  		jmp	@pixelJump(pc,d2.w)		; skip pixels for first row
000078D8                            	@blockLoop:
000078D8 301A                       		move.w	(a2)+,d0
000078DA                            	@pixelJump:		
000078DA 22C0                       		move.l	d0,(a1)+
000078DC 22C0                       		move.l	d0,(a1)+
000078DE 22C0                       		move.l	d0,(a1)+
000078E0 22C0                       		move.l	d0,(a1)+
000078E2 22C0                       		move.l	d0,(a1)+
000078E4 22C0                       		move.l	d0,(a1)+
000078E6 22C0                       		move.l	d0,(a1)+
000078E8 22C0                       		move.l	d0,(a1)+
000078EA 22C0                       		move.l	d0,(a1)+
000078EC 22C0                       		move.l	d0,(a1)+
000078EE 22C0                       		move.l	d0,(a1)+
000078F0 22C0                       		move.l	d0,(a1)+
000078F2 22C0                       		move.l	d0,(a1)+
000078F4 22C0                       		move.l	d0,(a1)+
000078F6 22C0                       		move.l	d0,(a1)+
000078F8 22C0                       		move.l	d0,(a1)+
000078FA 51C9 FFDC                  		dbf	d1,@blockLoop
000078FE 4E75                       		rts
00007900                            
00007900                            ; ---------------------------------------------------------------------------
00007900                            ; Spring Yard Zone background layer deformation	code
00007900                            ; ---------------------------------------------------------------------------
00007900                            
00007900                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007900                            
00007900                            
00007900                            Deform_SYZ:
00007900                            	; vertical scrolling
00007900 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007904 48C5                       		ext.l	d5
00007906 E985                       		asl.l	#4,d5
00007908 2205                       		move.l	d5,d1
0000790A E385                       		asl.l	#1,d5
0000790C DA81                       		add.l	d1,d5
0000790E 6100 0000                  		bsr.w	Bg_Scroll_Y
00007912 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007918                            	; calculate background scroll buffer
00007918 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
0000791C 3438 F700                  		move.w	(v_screenposx).w,d2
00007920 4442                       		neg.w	d2
00007922 3002                       		move.w	d2,d0
00007924 E640                       		asr.w	#3,d0
00007926 9042                       		sub.w	d2,d0
00007928 48C0                       		ext.l	d0
0000792A E780                       		asl.l	#3,d0
0000792C 81FC 0008                  		divs.w	#8,d0
00007930 48C0                       		ext.l	d0
00007932 E980                       		asl.l	#4,d0
00007934 E180                       		asl.l	#8,d0
00007936 7600                       		moveq	#0,d3
00007938 3602                       		move.w	d2,d3
0000793A E243                       		asr.w	#1,d3
0000793C 323C 0007                  		move.w	#7,d1
00007940                            	@cloudLoop:		
00007940 32C3                       		move.w	d3,(a1)+
00007942 4843                       		swap	d3
00007944 D680                       		add.l	d0,d3
00007946 4843                       		swap	d3
00007948 51C9 FFF6                  		dbf	d1,@cloudLoop
0000794C                            
0000794C 3002                       		move.w	d2,d0
0000794E E640                       		asr.w	#3,d0
00007950 323C 0004                  		move.w	#4,d1
00007954                            	@mountainLoop:		
00007954 32C0                       		move.w	d0,(a1)+
00007956 51C9 FFFC                  		dbf	d1,@mountainLoop
0000795A                            
0000795A 3002                       		move.w	d2,d0
0000795C E440                       		asr.w	#2,d0
0000795E 323C 0005                  		move.w	#5,d1
00007962                            	@buildingLoop:		
00007962 32C0                       		move.w	d0,(a1)+
00007964 51C9 FFFC                  		dbf	d1,@buildingLoop
00007968                            
00007968 3002                       		move.w	d2,d0
0000796A 3202                       		move.w	d2,d1
0000796C E241                       		asr.w	#1,d1
0000796E 9041                       		sub.w	d1,d0
00007970 48C0                       		ext.l	d0
00007972 E980                       		asl.l	#4,d0
00007974 81FC 000E                  		divs.w	#$E,d0
00007978 48C0                       		ext.l	d0
0000797A E980                       		asl.l	#4,d0
0000797C E180                       		asl.l	#8,d0
0000797E 7600                       		moveq	#0,d3
00007980 3602                       		move.w	d2,d3
00007982 E243                       		asr.w	#1,d3
00007984 323C 000D                  		move.w	#$D,d1
00007988                            	@bushLoop:		
00007988 32C3                       		move.w	d3,(a1)+
0000798A 4843                       		swap	d3
0000798C D680                       		add.l	d0,d3
0000798E 4843                       		swap	d3
00007990 51C9 FFF6                  		dbf	d1,@bushLoop
00007994                            
00007994 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007998 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
0000799C 3400                       		move.w	d0,d2
0000799E 0240 01F0                  		andi.w	#$1F0,d0
000079A2 E648                       		lsr.w	#3,d0
000079A4 45F2 0000                  		lea	(a2,d0),a2
000079A8 6000 FF12                  		bra.w	Bg_Scroll_X
000079AC                            ; End of function Deform_SYZ
000079AC                            
000079AC                            ; ---------------------------------------------------------------------------
000079AC                            ; Scrap	Brain Zone background layer deformation	code
000079AC                            ; ---------------------------------------------------------------------------
000079AC                            
000079AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079AC                            
000079AC                            
000079AC                            Deform_SBZ:
000079AC 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000079B0 48C4                       		ext.l	d4
000079B2 ED84                       		asl.l	#6,d4
000079B4 3A38 F73C                  		move.w	(v_scrshifty).w,d5
000079B8 48C5                       		ext.l	d5
000079BA E985                       		asl.l	#4,d5
000079BC E385                       		asl.l	#1,d5
000079BE 6100 0000                  		bsr.w	BGScroll_XY
000079C2 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000079C8 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000079CC 323C 00DF                  		move.w	#223,d1
000079D0 3038 F700                  		move.w	(v_screenposx).w,d0
000079D4 4440                       		neg.w	d0
000079D6 4840                       		swap	d0
000079D8 3038 F708                  		move.w	(v_bgscreenposx).w,d0
000079DC 4440                       		neg.w	d0
000079DE                            
000079DE                            loc_6576:
000079DE 22C0                       		move.l	d0,(a1)+
000079E0 51C9 FFFC                  		dbf	d1,loc_6576
000079E4 4E75                       		rts	
000079E6                            ;-------------------------------------------------------------------------------
000079E6                            Deform_SBZ2:;loc_68A2:
000079E6 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000079EA 48C4                       		ext.l	d4
000079EC ED84                       		asl.l	#6,d4
000079EE 3A38 F73C                  		move.w	(v_scrshifty).w,d5
000079F2 48C5                       		ext.l	d5
000079F4 E985                       		asl.l	#4,d5
000079F6 E385                       		asl.l	#1,d5
000079F8 6100 0000                  		bsr.w	BGScroll_XY
000079FC 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007A02 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007A06 323C 00DF                  		move.w	#223,d1
00007A0A 3038 F700                  		move.w	(v_screenposx).w,d0
00007A0E 4440                       		neg.w	d0
00007A10 4840                       		swap	d0
00007A12 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007A16 4440                       		neg.w	d0
00007A18                            
00007A18                            loc_6577:
00007A18 22C0                       		move.l	d0,(a1)+
00007A1A 51C9 FFFC                  		dbf	d1,loc_6577
00007A1E 4E75                       		rts	
00007A20                            
00007A20                            ; ---------------------------------------------------------------------------
00007A20                            ; Subroutine to	scroll the level horizontally as Sonic moves
00007A20                            ; ---------------------------------------------------------------------------
00007A20                            
00007A20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A20                            
00007A20                            
00007A20                            ScrollHoriz:
00007A20 3838 F700                  		move.w	(v_screenposx).w,d4 ; save old screen position
00007A24 6100                       		bsr.s	MoveScreenHoriz
00007A26 3038 F700                  		move.w	(v_screenposx).w,d0
00007A2A 0240 0010                  		andi.w	#$10,d0
00007A2E 1238 F74A                  		move.b	(v_fg_xblock).w,d1
00007A32 B300                       		eor.b	d1,d0
00007A34 6600                       		bne.s	@return
00007A36 0A38 0010 F74A             		eori.b	#$10,(v_fg_xblock).w
00007A3C 3038 F700                  		move.w	(v_screenposx).w,d0
00007A40 9044                       		sub.w	d4,d0		; compare new with old screen position
00007A42 6A00                       		bpl.s	@scrollRight
00007A44                            
00007A44 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w ; screen moves backward
00007A4A 4E75                       		rts	
00007A4C                            
00007A4C                            	@scrollRight:
00007A4C 08F8 0003 F754             		bset	#3,(v_fg_scroll_flags).w ; screen moves forward
00007A52                            
00007A52                            	@return:
00007A52 4E75                       		rts	
00007A54                            ; End of function ScrollHoriz
00007A54                            
00007A54                            
00007A54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A54                            
00007A54                            MoveScreenHoriz:
00007A54 4A38 FF8B                  		tst.b	($FFFFFF8B).w
00007A58 6700 0000                  		beq.w	@cont		
00007A5C 4EF9 0000 0000             		jmp	MoveScreenHorizEXT
00007A62                            		
00007A62                            	@cont:		
00007A62 3238 C904                  		move.w	($FFFFC904).w,d1
00007A66 6700                       		beq.s	@cont1
00007A68 0441 0100                  		sub.w	#$100,d1
00007A6C 31C1 C904                  		move.w	d1,($FFFFC904).w
00007A70 7200                       		moveq	#0,d1
00007A72 1238 C904                  		move.b	($FFFFC904).w,d1
00007A76 E509                       		lsl.b	#2,d1
00007A78 5801                       		addq.b	#4,d1
00007A7A 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007A7E 9001                       		sub.b	d1,d0
00007A80 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007A84 3031 0000                  		move.w	(a1,d0.w),d0
00007A88 0240 3FFF                  		and.w	#$3FFF,d0
00007A8C 6000                       		bra.s	@cont2
00007A8E                            		
00007A8E                            @cont1:
00007A8E 3038 D008                  		move.w	($FFFFD008).w,d0
00007A92                            		
00007A92                            @cont2:
00007A92 9078 F700                  		sub.w	($FFFFF700).w,d0
00007A96 0440 0090                          subi.w    #144,d0        ; is distance less than 144px?
00007A9A 6500                               bcs.s    SH_BehindMid    ; if yes, branch
00007A9C 0440 0010                          subi.w    #16,d0        ; is distance more than 160px?
00007AA0 6400                               bcc.s    SH_AheadOfMid    ; if yes, branch
00007AA2 4278 F73A                          clr.w    (v_scrshiftx).w
00007AA6 4E75                               rts 
00007AA8                            ; ===========================================================================
00007AA8                            
00007AA8                            SH_AheadOfMid:
00007AA8 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007AAC 6500                               bcs.s    SH_Ahead16    ; if yes, branch
00007AAE 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007AB2                            
00007AB2                                SH_Ahead16:
00007AB2 D078 F700                          add.w    (v_screenposx).w,d0
00007AB6 B078 F72A                          cmp.w    (v_limitright2).w,d0
00007ABA 6D00                               blt.s    SH_SetScreen
00007ABC 3038 F72A                          move.w    (v_limitright2).w,d0
00007AC0                            
00007AC0                            SH_SetScreen:
00007AC0 3200                               move.w    d0,d1
00007AC2 9278 F700                          sub.w    (v_screenposx).w,d1
00007AC6 E141                               asl.w    #8,d1
00007AC8 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007ACC 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007AD0 4E75                               rts 
00007AD2                            ; ===========================================================================
00007AD2                            
00007AD2                            SH_BehindMid:
00007AD2 0C40 FFF0                  		cmpi.w	#-$10,d0
00007AD6 6400                       		bcc.s	@cont
00007AD8 303C FFF0                  		move.w	#-$10,d0	
00007ADC                            
00007ADC                            @cont:
00007ADC D078 F700                  		add.w	(v_screenposx).w,d0
00007AE0 B078 F728                  		cmp.w	(v_limitleft2).w,d0
00007AE4 6EDA                       		bgt.s	SH_SetScreen
00007AE6 3038 F728                  		move.w	(v_limitleft2).w,d0
00007AEA 60D4                       		bra.s	SH_SetScreen
00007AEC                            ; End of function MoveScreenHoriz
00007AEC                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00007AEC                            
00007AEC                            MoveScreenHorizEXT:
00007AEC 3238 C904                  		move.w	($FFFFC904).w,d1
00007AF0 6700                       		beq.s	@cont1
00007AF2 0441 0100                  		sub.w	#$100,d1
00007AF6 31C1 C904                  		move.w	d1,($FFFFC904).w
00007AFA 7200                       		moveq	#0,d1
00007AFC 1238 C904                  		move.b	($FFFFC904).w,d1
00007B00 E509                       		lsl.b	#2,d1
00007B02 5801                       		addq.b	#4,d1
00007B04 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007B08 9001                       		sub.b	d1,d0
00007B0A 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007B0E 3031 0000                  		move.w	(a1,d0.w),d0
00007B12 0240 3FFF                  		and.w	#$3FFF,d0
00007B16 6000                       		bra.s	@cont2
00007B18                            		
00007B18                            @cont1:
00007B18 3038 D008                  		move.w	($FFFFD008).w,d0
00007B1C                            		
00007B1C                            @cont2:
00007B1C 9078 F700                  		sub.w	($FFFFF700).w,d0
00007B20 9078 F7A0                          sub.w    (v_camera_pan).w,d0    ; Horizontal camera pan value
00007B24 6700                               beq.s    SHEXT_ProperlyFramed    ; if zero, branch
00007B26 6500                               bcs.s    SHEXT_BehindMid    ; if less than, branch
00007B28 6000                               bra.s    SHEXT_AheadOfMid    ; branch
00007B2A                            ; ===========================================================================
00007B2A                            
00007B2A                            SHEXT_ProperlyFramed:
00007B2A 4278 F73A                          clr.w    (v_scrshiftx).w
00007B2E 4E75                               rts 
00007B30                            ; ===========================================================================
00007B30                            
00007B30                            SHEXT_AheadOfMid:
00007B30 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007B34 6D00                               blt.s    SHEXT_Ahead16    ; if yes, branch
00007B36 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007B3A                            
00007B3A                            SHEXT_Ahead16:
00007B3A D078 F700                          add.w    (v_screenposx).w,d0
00007B3E B078 F72A                          cmp.w    (v_limitright2).w,d0
00007B42 6D00                               blt.s    SHEXT_SetScreen
00007B44 3038 F72A                          move.w    (v_limitright2).w,d0
00007B48                            
00007B48                            SHEXT_SetScreen:
00007B48 3200                               move.w    d0,d1
00007B4A 9278 F700                          sub.w    (v_screenposx).w,d1
00007B4E E141                               asl.w    #8,d1
00007B50 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007B54 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007B58 4E75                               rts
00007B5A                            
00007B5A                            ; ===========================================================================
00007B5A                            
00007B5A                            SHEXT_BehindMid:
00007B5A 0C40 FFF0                          cmpi.w    #-16,d0        ; is Sonic within 16px of middle area?
00007B5E 6C00                               bge.s    SHEXT_Behind16    ; if no, branch
00007B60 303C FFF0                          move.w    #-16,d0        ; set to -16 if less
00007B64                            
00007B64                            SHEXT_Behind16:
00007B64 D078 F700                          add.w    (v_screenposx).w,d0
00007B68 B078 F728                          cmp.w    (v_limitleft2).w,d0
00007B6C 6EDA                               bgt.s    SHEXT_SetScreen
00007B6E 3038 F728                          move.w    (v_limitleft2).w,d0
00007B72 60D4                               bra.s    SHEXT_SetScreen
00007B74                                  
00007B74                            ; End of function MoveScreenHoriz
00007B74                            
00007B74                            
00007B74                            ; ---------------------------------------------------------------------------
00007B74                            ; Subroutine to	scroll the level vertically as Sonic moves
00007B74                            ; ---------------------------------------------------------------------------
00007B74                            
00007B74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B74                            
00007B74                            
00007B74                            ScrollVertical:
00007B74 7200                       		moveq	#0,d1
00007B76 3038 D00C                  		move.w	(v_player+obY).w,d0
00007B7A 9078 F704                  		sub.w	(v_screenposy).w,d0 ; Sonic's distance from top of screen
00007B7E 0838 0002 D022             		btst	#2,(v_player+obStatus).w ; is Sonic rolling?
00007B84 6700                       		beq.s	SV_NotRolling	; if not, branch
00007B86 5B40                       		subq.w	#5,d0
00007B88                            
00007B88                            	SV_NotRolling:
00007B88 0838 0001 D022             		btst	#1,(v_player+obStatus).w ; is Sonic jumping?
00007B8E 6700                       		beq.s	loc_664A	; if not, branch
00007B90                            
00007B90 0640 0020                  		addi.w	#32,d0
00007B94 9078 F73E                  		sub.w	(v_lookshift).w,d0
00007B98 6500                       		bcs.s	loc_6696
00007B9A 0440 0040                  		subi.w	#64,d0
00007B9E 6400                       		bcc.s	loc_6696
00007BA0 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00007BA4 6600                       		bne.s	loc_66A8
00007BA6 6000                       		bra.s	loc_6656
00007BA8                            ; ===========================================================================
00007BA8                            
00007BA8                            loc_664A:
00007BA8 9078 F73E                  		sub.w	(v_lookshift).w,d0
00007BAC 6600                       		bne.s	loc_665C
00007BAE 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00007BB2 6600                       		bne.s	loc_66A8
00007BB4                            
00007BB4                            loc_6656:
00007BB4 4278 F73C                  		clr.w	(v_scrshifty).w
00007BB8 4E75                       		rts	
00007BBA                            ; ===========================================================================
00007BBA                            
00007BBA                            loc_665C:
00007BBA 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w
00007BC0 6600                       		bne.s	loc_6684
00007BC2 3238 D020                  		move.w	(v_player+obInertia).w,d1
00007BC6 6A00                       		bpl.s	loc_666C
00007BC8 4441                       		neg.w	d1
00007BCA                            
00007BCA                            loc_666C:
00007BCA 0C41 0800                  		cmpi.w	#$800,d1
00007BCE 6400                       		bcc.s	loc_6696
00007BD0 323C 0600                  		move.w	#$600,d1
00007BD4 0C40 0006                  		cmpi.w	#6,d0
00007BD8 6E00                       		bgt.s	loc_66F6
00007BDA 0C40 FFFA                  		cmpi.w	#-6,d0
00007BDE 6D00                       		blt.s	loc_66C0
00007BE0 6000                       		bra.s	loc_66AE
00007BE2                            ; ===========================================================================
00007BE2                            
00007BE2                            loc_6684:
00007BE2 323C 0200                  		move.w	#$200,d1
00007BE6 0C40 0002                  		cmpi.w	#2,d0
00007BEA 6E00                       		bgt.s	loc_66F6
00007BEC 0C40 FFFE                  		cmpi.w	#-2,d0
00007BF0 6D00                       		blt.s	loc_66C0
00007BF2 6000                       		bra.s	loc_66AE
00007BF4                            ; ===========================================================================
00007BF4                            
00007BF4                            loc_6696:
00007BF4 323C 1000                  		move.w	#$1000,d1
00007BF8 0C40 0010                  		cmpi.w	#$10,d0
00007BFC 6E00                       		bgt.s	loc_66F6
00007BFE 0C40 FFF0                  		cmpi.w	#-$10,d0
00007C02 6D00                       		blt.s	loc_66C0
00007C04 6000                       		bra.s	loc_66AE
00007C06                            ; ===========================================================================
00007C06                            
00007C06                            loc_66A8:
00007C06 7000                       		moveq	#0,d0
00007C08 11C0 F75C                  		move.b	d0,(f_bgscrollvert).w
00007C0C                            
00007C0C                            loc_66AE:
00007C0C 7200                       		moveq	#0,d1
00007C0E 3200                       		move.w	d0,d1
00007C10 D278 F704                  		add.w	(v_screenposy).w,d1
00007C14 4A40                       		tst.w	d0
00007C16 6A00 0000                  		bpl.w	loc_6700
00007C1A 6000 0000                  		bra.w	loc_66CC
00007C1E                            ; ===========================================================================
00007C1E                            
00007C1E                            loc_66C0:
00007C1E 4441                       		neg.w	d1
00007C20 48C1                       		ext.l	d1
00007C22 E181                       		asl.l	#8,d1
00007C24 D2B8 F704                  		add.l	(v_screenposy).w,d1
00007C28 4841                       		swap	d1
00007C2A                            
00007C2A                            loc_66CC:
00007C2A B278 F72C                  		cmp.w	(v_limittop2).w,d1
00007C2E 6E00                       		bgt.s	loc_6724
00007C30 0C41 FF00                  		cmpi.w	#-$100,d1
00007C34 6E00                       		bgt.s	loc_66F0
00007C36 0241 07FF                  		andi.w	#$7FF,d1
00007C3A 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00007C40 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
00007C46 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00007C4C 6000                       		bra.s	loc_6724
00007C4E                            ; ===========================================================================
00007C4E                            
00007C4E                            loc_66F0:
00007C4E 3238 F72C                  		move.w	(v_limittop2).w,d1
00007C52 6000                       		bra.s	loc_6724
00007C54                            ; ===========================================================================
00007C54                            
00007C54                            loc_66F6:
00007C54 48C1                       		ext.l	d1
00007C56 E181                       		asl.l	#8,d1
00007C58 D2B8 F704                  		add.l	(v_screenposy).w,d1
00007C5C 4841                       		swap	d1
00007C5E                            
00007C5E                            loc_6700:
00007C5E B278 F72E                  		cmp.w	(v_limitbtm2).w,d1
00007C62 6D00                       		blt.s	loc_6724
00007C64 0441 0800                  		subi.w	#$800,d1
00007C68 6500                       		bcs.s	loc_6720
00007C6A 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00007C70 0478 0800 F704             		subi.w	#$800,(v_screenposy).w
00007C76 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00007C7C 6000                       		bra.s	loc_6724
00007C7E                            ; ===========================================================================
00007C7E                            
00007C7E                            loc_6720:
00007C7E 3238 F72E                  		move.w	(v_limitbtm2).w,d1
00007C82                            
00007C82                            loc_6724:
00007C82 3838 F704                  		move.w	(v_screenposy).w,d4
00007C86 4841                       		swap	d1
00007C88 2601                       		move.l	d1,d3
00007C8A 96B8 F704                  		sub.l	(v_screenposy).w,d3
00007C8E E09B                       		ror.l	#8,d3
00007C90 31C3 F73C                  		move.w	d3,(v_scrshifty).w
00007C94 21C1 F704                  		move.l	d1,(v_screenposy).w
00007C98 3038 F704                  		move.w	(v_screenposy).w,d0
00007C9C 0240 0010                  		andi.w	#$10,d0
00007CA0 1238 F74B                  		move.b	(v_fg_yblock).w,d1
00007CA4 B300                       		eor.b	d1,d0
00007CA6 6600                       		bne.s	@return
00007CA8 0A38 0010 F74B             		eori.b	#$10,(v_fg_yblock).w
00007CAE 3038 F704                  		move.w	(v_screenposy).w,d0
00007CB2 9044                       		sub.w	d4,d0
00007CB4 6A00                       		bpl.s	@scrollBottom
00007CB6 08F8 0000 F754             		bset	#0,(v_fg_scroll_flags).w
00007CBC 4E75                       		rts	
00007CBE                            ; ===========================================================================
00007CBE                            
00007CBE                            	@scrollBottom:
00007CBE 08F8 0001 F754             		bset	#1,(v_fg_scroll_flags).w
00007CC4                            
00007CC4                            	@return:
00007CC4 4E75                       		rts	
00007CC6                            ; End of function ScrollVertical
00007CC6                            
00007CC6                            
00007CC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CC6                            ; Scrolls background and sets redraw flags.
00007CC6                            ; d4 - background x offset * $10000
00007CC6                            ; d5 - background y offset * $10000
00007CC6                            
00007CC6                            BGScroll_XY:
00007CC6 2438 F708                  		move.l	(v_bgscreenposx).w,d2
00007CCA 2002                       		move.l	d2,d0
00007CCC D084                       		add.l	d4,d0
00007CCE 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00007CD2 2200                       		move.l	d0,d1
00007CD4 4841                       		swap	d1
00007CD6 0241 0010                  		andi.w	#$10,d1
00007CDA 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
00007CDE B701                       		eor.b	d3,d1
00007CE0 6600                       		bne.s	BGScroll_YRelative	; no change in Y
00007CE2 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00007CE8 9082                       		sub.l	d2,d0	; new - old
00007CEA 6A00                       		bpl.s	@scrollRight
00007CEC 08F8 0002 F756             		bset	#2,(v_bg1_scroll_flags).w
00007CF2 6000                       		bra.s	BGScroll_YRelative
00007CF4                            	@scrollRight:
00007CF4 08F8 0003 F756             		bset	#3,(v_bg1_scroll_flags).w
00007CFA                            BGScroll_YRelative:
00007CFA 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
00007CFE 2003                       		move.l	d3,d0
00007D00 D085                       		add.l	d5,d0
00007D02 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
00007D06 2200                       		move.l	d0,d1
00007D08 4841                       		swap	d1
00007D0A 0241 0010                  		andi.w	#$10,d1
00007D0E 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007D12 B501                       		eor.b	d2,d1
00007D14 6600                       		bne.s	@return
00007D16 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007D1C 9083                       		sub.l	d3,d0
00007D1E 6A00                       		bpl.s	@scrollBottom
00007D20 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
00007D26 4E75                       		rts
00007D28                            	@scrollBottom:
00007D28 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00007D2E                            	@return:
00007D2E 4E75                       		rts
00007D30                            ; End of function BGScroll_XY
00007D30                            
00007D30                            Bg_Scroll_Y:
00007D30 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
00007D34 2003                       		move.l	d3,d0
00007D36 D085                       		add.l	d5,d0
00007D38 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
00007D3C 2200                       		move.l	d0,d1
00007D3E 4841                       		swap	d1
00007D40 0241 0010                  		andi.w	#$10,d1
00007D44 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007D48 B501                       		eor.b	d2,d1
00007D4A 6600                       		bne.s	@return
00007D4C 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007D52 9083                       		sub.l	d3,d0
00007D54 6A00                       		bpl.s	@scrollBottom
00007D56 08F8 0004 F756             		bset	#4,(v_bg1_scroll_flags).w
00007D5C 4E75                       		rts
00007D5E                            	@scrollBottom:
00007D5E 08F8 0005 F756             		bset	#5,(v_bg1_scroll_flags).w
00007D64                            	@return:
00007D64 4E75                       		rts
00007D66                            
00007D66                            
00007D66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D66                            
00007D66                            
00007D66                            BGScroll_YAbsolute:
00007D66 3638 F70C                  		move.w	(v_bgscreenposy).w,d3
00007D6A 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007D6E 3200                       		move.w	d0,d1
00007D70 0241 0010                  		andi.w	#$10,d1
00007D74 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007D78 B501                       		eor.b	d2,d1
00007D7A 6600                       		bne.s	@return
00007D7C 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007D82 9043                       		sub.w	d3,d0
00007D84 6A00                       		bpl.s	@scrollBottom
00007D86 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
00007D8C 4E75                       		rts
00007D8E                            	@scrollBottom:
00007D8E 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00007D94                            	@return:
00007D94 4E75                       		rts
00007D96                            ; End of function BGScroll_YAbsolute
00007D96                            
00007D96                            
00007D96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D96                            ; d6 - bit to set for redraw
00007D96                            
00007D96                            BGScroll_Block1:
00007D96 2438 F708                  		move.l	(v_bgscreenposx).w,d2
00007D9A 2002                       		move.l	d2,d0
00007D9C D084                       		add.l	d4,d0
00007D9E 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00007DA2 2200                       		move.l	d0,d1
00007DA4 4841                       		swap	d1
00007DA6 0241 0010                  		andi.w	#$10,d1
00007DAA 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
00007DAE B701                       		eor.b	d3,d1
00007DB0 6600                       		bne.s	@return
00007DB2 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00007DB8 9082                       		sub.l	d2,d0
00007DBA 6A00                       		bpl.s	@scrollRight
00007DBC 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
00007DC0 6000                       		bra.s	@return
00007DC2                            	@scrollRight:
00007DC2 5206                       		addq.b	#1,d6
00007DC4 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
00007DC8                            	@return:
00007DC8 4E75                       		rts
00007DCA                            ; End of function BGScroll_Block1
00007DCA                            
00007DCA                            
00007DCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DCA                            
00007DCA                            
00007DCA                            BGScroll_Block2:
00007DCA 2438 F710                  		move.l	(v_bg2screenposx).w,d2
00007DCE 2002                       		move.l	d2,d0
00007DD0 D084                       		add.l	d4,d0
00007DD2 21C0 F710                  		move.l	d0,(v_bg2screenposx).w
00007DD6 2200                       		move.l	d0,d1
00007DD8 4841                       		swap	d1
00007DDA 0241 0010                  		andi.w	#$10,d1
00007DDE 1638 F74E                  		move.b	(v_bg2_xblock).w,d3
00007DE2 B701                       		eor.b	d3,d1
00007DE4 6600                       		bne.s	@return
00007DE6 0A38 0010 F74E             		eori.b	#$10,(v_bg2_xblock).w
00007DEC 9082                       		sub.l	d2,d0
00007DEE 6A00                       		bpl.s	@scrollRight
00007DF0 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
00007DF4 6000                       		bra.s	@return
00007DF6                            	@scrollRight:
00007DF6 5206                       		addq.b	#1,d6
00007DF8 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
00007DFC                            	@return:
00007DFC 4E75                       		rts
00007DFE                            ;-------------------------------------------------------------------------------
00007DFE                            BGScroll_Block3:
00007DFE 2438 F718                  		move.l	(v_bg3screenposx).w,d2
00007E02 2002                       		move.l	d2,d0
00007E04 D084                       		add.l	d4,d0
00007E06 21C0 F718                  		move.l	d0,(v_bg3screenposx).w
00007E0A 2200                       		move.l	d0,d1
00007E0C 4841                       		swap	d1
00007E0E 0241 0010                  		andi.w	#$10,d1
00007E12 1638 F750                  		move.b	(v_bg3_xblock).w,d3
00007E16 B701                       		eor.b	d3,d1
00007E18 6600                       		bne.s	@return
00007E1A 0A38 0010 F750             		eori.b	#$10,(v_bg3_xblock).w
00007E20 9082                       		sub.l	d2,d0
00007E22 6A00                       		bpl.s	@scrollRight
00007E24 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
00007E28 6000                       		bra.s	@return
00007E2A                            	@scrollRight:
00007E2A 5206                       		addq.b	#1,d6
00007E2C 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
00007E30                            	@return:
00007E30 4E75                       		rts
00007E30 4E75                       		rts
00007E32                            
00007E32                            
00007E32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E32                            
00007E32                            ; sub_6886:
00007E32                            LoadTilesAsYouMove_BGOnly:
00007E32 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00007E38 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00007E3E 45F8 F756                  		lea	(v_bg1_scroll_flags).w,a2
00007E42 47F8 F708                  		lea	(v_bgscreenposx).w,a3
00007E46 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00007E4A 343C 6000                  		move.w	#$6000,d2
00007E4E 6100 0000                  		bsr.w	DrawBGScrollBlock1
00007E52 45F8 F758                  		lea	(v_bg2_scroll_flags).w,a2
00007E56 47F8 F710                  		lea	(v_bg2screenposx).w,a3
00007E5A 6000 0000                  		bra.w	DrawBGScrollBlock2
00007E5E                            ; End of function sub_6886
00007E5E                            
00007E5E                            ; ---------------------------------------------------------------------------
00007E5E                            ; Subroutine to	display	correct	tiles as you move
00007E5E                            ; ---------------------------------------------------------------------------
00007E5E                            
00007E5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E5E                            
00007E5E                            
00007E5E                            LoadTilesAsYouMove:
00007E5E 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00007E64 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00007E6A                            		; First, update the background
00007E6A 45F8 FF32                  		lea	(v_bg1_scroll_flags_dup).w,a2	; Scroll block 1 scroll flags
00007E6E 47F8 FF18                  		lea	(v_bgscreenposx_dup).w,a3	; Scroll block 1 X coordinate
00007E72 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00007E76 343C 6000                  		move.w	#$6000,d2			; VRAM thing for selecting Plane B
00007E7A 6100 0000                  		bsr.w	DrawBGScrollBlock1
00007E7E 45F8 FF34                  		lea	(v_bg2_scroll_flags_dup).w,a2	; Scroll block 2 scroll flags
00007E82 47F8 FF20                  		lea	(v_bg2screenposx_dup).w,a3	; Scroll block 2 X coordinate
00007E86 6100 0000                  		bsr.w	DrawBGScrollBlock2
00007E8A                            		; REV01 added a third scroll block, though, technically,
00007E8A                            		; the RAM for it was already there in REV00
00007E8A 45F8 FF36                  		lea	(v_bg3_scroll_flags_dup).w,a2	; Scroll block 3 scroll flags
00007E8E 47F8 FF28                  		lea	(v_bg3screenposx_dup).w,a3	; Scroll block 3 X coordinate
00007E92 6100 0000                  		bsr.w	DrawBGScrollBlock3
00007E96                            		; Then, update the foreground
00007E96 45F8 FF30                  		lea	(v_fg_scroll_flags_dup).w,a2	; Foreground scroll flags
00007E9A 47F8 FF10                  		lea	(v_screenposx_dup).w,a3		; Foreground X coordinate
00007E9E 49F8 A400                  		lea	(v_lvllayout).w,a4
00007EA2 343C 4000                  		move.w	#$4000,d2			; VRAM thing for selecting Plane A
00007EA6                            		; The FG's update function is inlined here
00007EA6 4A12                       		tst.b	(a2)
00007EA8 6700                       		beq.s	locret_6952	; If there are no flags set, nothing needs updating
00007EAA 0892 0000                  		bclr	#0,(a2)
00007EAE 6700                       		beq.s	loc_6908
00007EB0                            		; Draw new tiles at the top
00007EB0 78F0                       		moveq	#-16,d4	; Y coordinate. Note that 16 is the size of a block in pixels
00007EB2 7AF0                       		moveq	#-16,d5 ; X coordinate
00007EB4 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007EB8 78F0                       		moveq	#-16,d4 ; Y coordinate
00007EBA 7AF0                       		moveq	#-16,d5 ; X coordinate
00007EBC 6100 0000                  		bsr.w	DrawBlocks_LR
00007EC0                            
00007EC0                            loc_6908:
00007EC0 0892 0001                  		bclr	#1,(a2)
00007EC4 6700                       		beq.s	loc_6922
00007EC6                            		; Draw new tiles at the bottom
00007EC6 383C 00E0                  		move.w	#224,d4	; Start at bottom of the screen. Since this draws from top to bottom, we don't need 224+16
00007ECA 7AF0                       		moveq	#-16,d5
00007ECC 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007ED0 383C 00E0                  		move.w	#224,d4
00007ED4 7AF0                       		moveq	#-16,d5
00007ED6 6100 0000                  		bsr.w	DrawBlocks_LR
00007EDA                            
00007EDA                            loc_6922:
00007EDA 0892 0002                  		bclr	#2,(a2)
00007EDE 6700                       		beq.s	loc_6938
00007EE0                            		; Draw new tiles on the left
00007EE0 78F0                       		moveq	#-16,d4
00007EE2 7AF0                       		moveq	#-16,d5
00007EE4 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007EE8 78F0                       		moveq	#-16,d4
00007EEA 7AF0                       		moveq	#-16,d5
00007EEC 6100 0000                  		bsr.w	DrawBlocks_TB
00007EF0                            
00007EF0                            loc_6938:
00007EF0 0892 0003                  		bclr	#3,(a2)
00007EF4 6700                       		beq.s	locret_6952
00007EF6                            		; Draw new tiles on the right
00007EF6 78F0                       		moveq	#-16,d4
00007EF8 3A3C 0140                  		move.w	#320,d5
00007EFC 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007F00 78F0                       		moveq	#-16,d4
00007F02 3A3C 0140                  		move.w	#320,d5
00007F06 6100 0000                  		bsr.w	DrawBlocks_TB
00007F0A                            
00007F0A                            locret_6952:
00007F0A 4E75                       		rts	
00007F0C                            ; End of function LoadTilesAsYouMove
00007F0C                            
00007F0C                            
00007F0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F0C                            
00007F0C                            ; sub_6954:
00007F0C                            DrawBGScrollBlock1:
00007F0C 4A12                       		tst.b	(a2)
00007F0E 6700 0000                  		beq.w	locret_69F2
00007F12 0892 0000                  		bclr	#0,(a2)
00007F16 6700                       		beq.s	loc_6972
00007F18                            		; Draw new tiles at the top
00007F18 78F0                       		moveq	#-16,d4
00007F1A 7AF0                       		moveq	#-16,d5
00007F1C 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007F20 78F0                       		moveq	#-16,d4
00007F22 7AF0                       		moveq	#-16,d5
00007F24 6100 0000                  			bsr.w	DrawBlocks_LR
00007F28                            
00007F28                            loc_6972:
00007F28 0892 0001                  		bclr	#1,(a2)
00007F2C 6700                       		beq.s	loc_698E
00007F2E                            		; Draw new tiles at the top
00007F2E 383C 00E0                  		move.w	#224,d4
00007F32 7AF0                       		moveq	#-16,d5
00007F34 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007F38 383C 00E0                  		move.w	#224,d4
00007F3C 7AF0                       		moveq	#-16,d5
00007F3E 6100 0000                  			bsr.w	DrawBlocks_LR
00007F42                            
00007F42                            loc_698E:
00007F42 0892 0002                  		bclr	#2,(a2)
00007F46                            
00007F46                            
00007F46 6700                       			beq.s	locj_6D56
00007F48                            			; Draw new tiles on the left
00007F48 78F0                       			moveq	#-16,d4
00007F4A 7AF0                       			moveq	#-16,d5
00007F4C 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007F50 78F0                       			moveq	#-16,d4
00007F52 7AF0                       			moveq	#-16,d5
00007F54 6100 0000                  			bsr.w	DrawBlocks_TB
00007F58                            	locj_6D56:
00007F58                            
00007F58 0892 0003                  			bclr	#3,(a2)
00007F5C 6700                       			beq.s	locj_6D70
00007F5E                            			; Draw new tiles on the right
00007F5E 78F0                       			moveq	#-16,d4
00007F60 3A3C 0140                  			move.w	#320,d5
00007F64 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007F68 78F0                       			moveq	#-16,d4
00007F6A 3A3C 0140                  			move.w	#320,d5
00007F6E 6100 0000                  			bsr.w	DrawBlocks_TB
00007F72                            	locj_6D70:
00007F72                            
00007F72 0892 0004                  			bclr	#4,(a2)
00007F76 6700                       			beq.s	locj_6D88
00007F78                            			; Draw entire row at the top
00007F78 78F0                       			moveq	#-16,d4
00007F7A 7A00                       			moveq	#0,d5
00007F7C 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00007F80 78F0                       			moveq	#-16,d4
00007F82 7A00                       			moveq	#0,d5
00007F84 7C1F                       			moveq	#(512/16)-1,d6
00007F86 6100 0000                  			bsr.w	DrawBlocks_LR_3
00007F8A                            	locj_6D88:
00007F8A                            
00007F8A 0892 0005                  			bclr	#5,(a2)
00007F8E 6700                       			beq.s	locret_69F2
00007F90                            			; Draw entire row at the bottom
00007F90 383C 00E0                  			move.w	#224,d4
00007F94 7A00                       			moveq	#0,d5
00007F96 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00007F9A 383C 00E0                  			move.w	#224,d4
00007F9E 7A00                       			moveq	#0,d5
00007FA0 7C1F                       			moveq	#(512/16)-1,d6
00007FA2 6100 0000                  			bsr.w	DrawBlocks_LR_3
00007FA6                            
00007FA6                            locret_69F2:
00007FA6 4E75                       		rts	
00007FA8                            ; End of function DrawBGScrollBlock1
00007FA8                            
00007FA8                            
00007FA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FA8                            
00007FA8                            ; Essentially, this draws everything that isn't scroll block 1
00007FA8                            ; sub_69F4:
00007FA8                            DrawBGScrollBlock2:
00007FA8                            
00007FA8 4A12                       			tst.b	(a2)
00007FAA 6700 0000                  			beq.w	locj_6DF2
00007FAE 0C38 0005 FE10             			cmpi.b	#id_SBZ,(v_zone).w
00007FB4 6700 0000                  			beq.w	Draw_SBz
00007FB8 0892 0000                  			bclr	#0,(a2)
00007FBC 6700                       			beq.s	locj_6DD2
00007FBE                            			; Draw new tiles on the left
00007FBE 383C 0070                  			move.w	#224/2,d4	; Draw the bottom half of the screen
00007FC2 7AF0                       			moveq	#-16,d5
00007FC4 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007FC8 383C 0070                  			move.w	#224/2,d4
00007FCC 7AF0                       			moveq	#-16,d5
00007FCE 7C02                       			moveq	#3-1,d6		; Draw three rows... could this be a repurposed version of the above unused code?
00007FD0 6100 0000                  			bsr.w	DrawBlocks_TB_2
00007FD4                            	locj_6DD2:
00007FD4 0892 0001                  			bclr	#1,(a2)
00007FD8 6700                       			beq.s	locj_6DF2
00007FDA                            			; Draw new tiles on the right
00007FDA 383C 0070                  			move.w	#224/2,d4
00007FDE 3A3C 0140                  			move.w	#320,d5
00007FE2 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007FE6 383C 0070                  			move.w	#224/2,d4
00007FEA 3A3C 0140                  			move.w	#320,d5
00007FEE 7C02                       			moveq	#3-1,d6
00007FF0 6100 0000                  			bsr.w	DrawBlocks_TB_2
00007FF4                            	locj_6DF2:
00007FF4 4E75                       			rts
00007FF6                            ;===============================================================================
00007FF6                            	locj_6DF4:
00007FF6 0000 0000 0006 0606 0606+  			dc.b $00,$00,$00,$00,$00,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$04
00008006 0404 0404 0404 0202 0202+  			dc.b $04,$04,$04,$04,$04,$04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008016 0200                       			dc.b $02,$00						
00008018                            ;===============================================================================
00008018                            	Draw_SBz:
00008018 78F0                       			moveq	#-16,d4
0000801A 0892 0000                  			bclr	#0,(a2)
0000801E 6600                       			bne.s	locj_6E28
00008020 0892 0001                  			bclr	#1,(a2)
00008024 6700                       			beq.s	locj_6E72
00008026 383C 00E0                  			move.w	#224,d4
0000802A                            	locj_6E28:
0000802A 41F9 0000 7FF7             			lea	(locj_6DF4+1).l,a0
00008030 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008034 D044                       			add.w	d4,d0
00008036 0240 01F0                  			andi.w	#$1F0,d0
0000803A E848                       			lsr.w	#4,d0
0000803C 1030 0000                  			move.b	(a0,d0.w),d0
00008040 47F9 0000 0000             			lea	(locj_6FE4).l,a3
00008046 3673 0000                  			movea.w	(a3,d0.w),a3
0000804A 6700                       			beq.s	locj_6E5E
0000804C 7AF0                       			moveq	#-16,d5
0000804E 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008052 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008056 4CDF 0030                  			movem.l	(sp)+,d4/d5
0000805A 6100 0000                  			bsr.w	DrawBlocks_LR
0000805E 6000                       			bra.s	locj_6E72
00008060                            ;===============================================================================
00008060                            	locj_6E5E:
00008060 7A00                       			moveq	#0,d5
00008062 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008066 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
0000806A 4CDF 0030                  			movem.l	(sp)+,d4/d5
0000806E 7C1F                       			moveq	#(512/16)-1,d6
00008070 6100 0000                  			bsr.w	DrawBlocks_LR_3
00008074                            	locj_6E72:
00008074 4A12                       			tst.b	(a2)
00008076 6600                       			bne.s	locj_6E78
00008078 4E75                       			rts
0000807A                            ;===============================================================================			
0000807A                            	locj_6E78:
0000807A 78F0                       			moveq	#-16,d4
0000807C 7AF0                       			moveq	#-16,d5
0000807E 1012                       			move.b	(a2),d0
00008080 0200 00A8                  			andi.b	#$A8,d0
00008084 6700                       			beq.s	locj_6E8C
00008086 E208                       			lsr.b	#1,d0
00008088 1480                       			move.b	d0,(a2)
0000808A 3A3C 0140                  			move.w	#320,d5
0000808E                            	locj_6E8C:
0000808E 41F9 0000 7FF6             			lea	(locj_6DF4).l,a0
00008094 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008098 0240 01F0                  			andi.w	#$1F0,d0
0000809C E848                       			lsr.w	#4,d0
0000809E 41F0 0000                  			lea	(a0,d0.w),a0
000080A2 6000 0000                  			bra.w	locj_6FEC						
000080A6                            ;===============================================================================
000080A6                            
000080A6                            
000080A6                            	; locj_6EA4:
000080A6                            	DrawBGScrollBlock3:
000080A6 4A12                       			tst.b	(a2)
000080A8 6700 0000                  			beq.w	locj_6EF0
000080AC 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
000080B2 6700 0000                  			beq.w	Draw_Mz
000080B6 0892 0000                  			bclr	#0,(a2)
000080BA 6700                       			beq.s	locj_6ED0
000080BC                            			; Draw new tiles on the left
000080BC 383C 0040                  			move.w	#$40,d4
000080C0 7AF0                       			moveq	#-16,d5
000080C2 6100 0000                  			bsr.w	Calc_VRAM_Pos
000080C6 383C 0040                  			move.w	#$40,d4
000080CA 7AF0                       			moveq	#-16,d5
000080CC 7C02                       			moveq	#3-1,d6
000080CE 6100 0000                  			bsr.w	DrawBlocks_TB_2
000080D2                            	locj_6ED0:
000080D2 0892 0001                  			bclr	#1,(a2)
000080D6 6700                       			beq.s	locj_6EF0
000080D8                            			; Draw new tiles on the right
000080D8 383C 0040                  			move.w	#$40,d4
000080DC 3A3C 0140                  			move.w	#320,d5
000080E0 6100 0000                  			bsr.w	Calc_VRAM_Pos
000080E4 383C 0040                  			move.w	#$40,d4
000080E8 3A3C 0140                  			move.w	#320,d5
000080EC 7C02                       			moveq	#3-1,d6
000080EE 6100 0000                  			bsr.w	DrawBlocks_TB_2
000080F2                            	locj_6EF0:
000080F2 4E75                       			rts
000080F4                            	locj_6EF2:
000080F4 0000 0000 0000 0606 0404+  			dc.b $00,$00,$00,$00,$00,$00,$06,$06,$04,$04,$04,$04,$04,$04,$04,$04
00008104 0402 0202 0202 0202 0202+  			dc.b $04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008114 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008124 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008134 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008144 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008154 0200                       			dc.b $02,$00
00008156                            ;===============================================================================
00008156                            	Draw_Mz:
00008156 78F0                       			moveq	#-16,d4
00008158 0892 0000                  			bclr	#0,(a2)
0000815C 6600                       			bne.s	locj_6F66
0000815E 0892 0001                  			bclr	#1,(a2)
00008162 6700                       			beq.s	locj_6FAE
00008164 383C 00E0                  			move.w	#224,d4
00008168                            	locj_6F66:
00008168 41F9 0000 80F5             			lea	(locj_6EF2+1).l,a0
0000816E 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008172 0440 0200                  			subi.w	#$200,d0
00008176 D044                       			add.w	d4,d0
00008178 0240 07F0                  			andi.w	#$7F0,d0
0000817C E848                       			lsr.w	#4,d0
0000817E 1030 0000                  			move.b	(a0,d0.w),d0
00008182 367B 0000                  			movea.w	locj_6FE4(pc,d0.w),a3
00008186 6700                       			beq.s	locj_6F9A
00008188 7AF0                       			moveq	#-16,d5
0000818A 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000818E 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008192 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008196 6100 0000                  			bsr.w	DrawBlocks_LR
0000819A 6000                       			bra.s	locj_6FAE
0000819C                            ;===============================================================================
0000819C                            	locj_6F9A:
0000819C 7A00                       			moveq	#0,d5
0000819E 48E7 0C00                  			movem.l	d4/d5,-(sp)
000081A2 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
000081A6 4CDF 0030                  			movem.l	(sp)+,d4/d5
000081AA 7C1F                       			moveq	#(512/16)-1,d6
000081AC 6100 0000                  			bsr.w	DrawBlocks_LR_3
000081B0                            	locj_6FAE:
000081B0 4A12                       			tst.b	(a2)
000081B2 6600                       			bne.s	locj_6FB4
000081B4 4E75                       			rts
000081B6                            ;===============================================================================			
000081B6                            	locj_6FB4:
000081B6 78F0                       			moveq	#-16,d4
000081B8 7AF0                       			moveq	#-16,d5
000081BA 1012                       			move.b	(a2),d0
000081BC 0200 00A8                  			andi.b	#$A8,d0
000081C0 6700                       			beq.s	locj_6FC8
000081C2 E208                       			lsr.b	#1,d0
000081C4 1480                       			move.b	d0,(a2)
000081C6 3A3C 0140                  			move.w	#320,d5
000081CA                            	locj_6FC8:
000081CA 41F9 0000 80F4             			lea	(locj_6EF2).l,a0
000081D0 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000081D4 0440 0200                  			subi.w	#$200,d0
000081D8 0240 07F0                  			andi.w	#$7F0,d0
000081DC E848                       			lsr.w	#4,d0
000081DE 41F0 0000                  			lea	(a0,d0.w),a0
000081E2 6000 0000                  			bra.w	locj_6FEC
000081E6                            ;===============================================================================			
000081E6                            	locj_6FE4:
000081E6 FF18 FF18 FF20 FF28        			dc.w v_bgscreenposx_dup, v_bgscreenposx_dup, v_bg2screenposx_dup, v_bg3screenposx_dup
000081EE                            	locj_6FEC:
000081EE 7C0F                       			moveq	#((224+16+16)/16)-1,d6
000081F0 2E3C 0080 0000             			move.l	#$800000,d7
000081F6                            	locj_6FF4:			
000081F6 7000                       			moveq	#0,d0
000081F8 1018                       			move.b	(a0)+,d0
000081FA 0112                       			btst	d0,(a2)
000081FC 6700                       			beq.s	locj_701C
000081FE 367B 00E6                  			move.w	locj_6FE4(pc,d0.w),a3
00008202 48E7 0C80                  			movem.l	d4/d5/a0,-(sp)
00008206 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000820A 6100 0000                  			bsr.w	GetBlockData
0000820E 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008212 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008216 6100 0000                  			bsr.w	DrawBlock
0000821A 4CDF 0130                  			movem.l	(sp)+,d4/d5/a0
0000821E                            	locj_701C:
0000821E 0644 0010                  			addi.w	#16,d4
00008222 51CE FFD2                  			dbf	d6,locj_6FF4
00008226 4212                       			clr.b	(a2)
00008228 4E75                       			rts			
0000822A                            
0000822A                            
0000822A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000822A                            
0000822A                            ; Don't be fooled by the name: this function's for drawing from left to right
0000822A                            ; when the camera's moving up or down
0000822A                            ; DrawTiles_LR:
0000822A                            DrawBlocks_LR:
0000822A 7C15                       		moveq	#((320+16+16)/16)-1,d6	; Draw the entire width of the screen + two extra columns
0000822C                            ; DrawTiles_LR_2:
0000822C                            DrawBlocks_LR_2:
0000822C 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
00008232 2200                       		move.l	d0,d1
00008234                            
00008234                            	@loop:
00008234 48E7 0C00                  		movem.l	d4-d5,-(sp)
00008238 6100 0000                  		bsr.w	GetBlockData
0000823C 2001                       		move.l	d1,d0
0000823E 6100 0000                  		bsr.w	DrawBlock
00008242 5801                       		addq.b	#4,d1		; Two tiles ahead
00008244 0201 007F                  		andi.b	#$7F,d1		; Wrap around row
00008248 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000824C 0645 0010                  		addi.w	#16,d5		; Move X coordinate one block ahead
00008250 51CE FFE2                  		dbf	d6,@loop
00008254 4E75                       		rts
00008256                            ; End of function DrawBlocks_LR
00008256                            
00008256                            ; DrawTiles_LR_3:
00008256                            DrawBlocks_LR_3:
00008256 2E3C 0080 0000             		move.l	#$800000,d7
0000825C 2200                       		move.l	d0,d1
0000825E                            
0000825E                            	@loop:
0000825E 48E7 0C00                  		movem.l	d4-d5,-(sp)
00008262 6100 0000                  		bsr.w	GetBlockData_2
00008266 2001                       		move.l	d1,d0
00008268 6100 0000                  		bsr.w	DrawBlock
0000826C 5801                       		addq.b	#4,d1
0000826E 0201 007F                  		andi.b	#$7F,d1
00008272 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008276 0645 0010                  		addi.w	#16,d5
0000827A 51CE FFE2                  		dbf	d6,@loop
0000827E 4E75                       		rts	
00008280                            ; End of function DrawBlocks_LR_3
00008280                            
00008280                            
00008280                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008280                            
00008280                            ; Don't be fooled by the name: this function's for drawing from top to bottom
00008280                            ; when the camera's moving left or right
00008280                            ; DrawTiles_TB:
00008280                            DrawBlocks_TB:
00008280 7C0F                       		moveq	#((224+16+16)/16)-1,d6	; Draw the entire height of the screen + two extra rows
00008282                            ; DrawTiles_TB_2:
00008282                            DrawBlocks_TB_2:
00008282 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
00008288 2200                       		move.l	d0,d1
0000828A                            
0000828A                            	@loop:
0000828A 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000828E 6100 0000                  		bsr.w	GetBlockData
00008292 2001                       		move.l	d1,d0
00008294 6100 0000                  		bsr.w	DrawBlock
00008298 0641 0100                  		addi.w	#$100,d1	; Two rows ahead
0000829C 0241 0FFF                  		andi.w	#$FFF,d1	; Wrap around plane
000082A0 4CDF 0030                  		movem.l	(sp)+,d4-d5
000082A4 0644 0010                  		addi.w	#16,d4		; Move X coordinate one block ahead
000082A8 51CE FFE0                  		dbf	d6,@loop
000082AC 4E75                       		rts	
000082AE                            ; End of function DrawBlocks_TB_2
000082AE                            
000082AE                            
000082AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082AE                            
000082AE                            ; Draws a block's worth of tiles
000082AE                            ; Parameters:
000082AE                            ; a0 = Pointer to block metadata (block index and X/Y flip)
000082AE                            ; a1 = Pointer to block
000082AE                            ; a5 = Pointer to VDP command port
000082AE                            ; a6 = Pointer to VDP data port
000082AE                            ; d0 = VRAM command to access plane
000082AE                            ; d2 = VRAM plane A/B specifier
000082AE                            ; d7 = Plane row delta
000082AE                            ; DrawTiles:
000082AE                            DrawBlock:
000082AE 8042                       		or.w	d2,d0	; OR in that plane A/B specifier to the VRAM command
000082B0 4840                       		swap	d0
000082B2 0810 0004                  		btst	#4,(a0)	; Check Y-flip bit
000082B6 6600                       		bne.s	DrawFlipY
000082B8 0810 0003                  		btst	#3,(a0)	; Check X-flip bit
000082BC 6600                       		bne.s	DrawFlipX
000082BE 2A80                       		move.l	d0,(a5)
000082C0 2C99                       		move.l	(a1)+,(a6)	; Write top two tiles
000082C2 D087                       		add.l	d7,d0		; Next row
000082C4 2A80                       		move.l	d0,(a5)
000082C6 2C99                       		move.l	(a1)+,(a6)	; Write bottom two tiles
000082C8 4E75                       		rts	
000082CA                            ; ===========================================================================
000082CA                            
000082CA                            DrawFlipX:
000082CA 2A80                       		move.l	d0,(a5)
000082CC 2819                       		move.l	(a1)+,d4
000082CE 0A84 0800 0800             		eori.l	#$8000800,d4	; Invert X-flip bits of each tile
000082D4 4844                       		swap	d4		; Swap the tiles around
000082D6 2C84                       		move.l	d4,(a6)		; Write top two tiles
000082D8 D087                       		add.l	d7,d0		; Next row
000082DA 2A80                       		move.l	d0,(a5)
000082DC 2819                       		move.l	(a1)+,d4
000082DE 0A84 0800 0800             		eori.l	#$8000800,d4
000082E4 4844                       		swap	d4
000082E6 2C84                       		move.l	d4,(a6)		; Write bottom two tiles
000082E8 4E75                       		rts	
000082EA                            ; ===========================================================================
000082EA                            
000082EA                            DrawFlipY:
000082EA 0810 0003                  		btst	#3,(a0)
000082EE 6600                       		bne.s	DrawFlipXY
000082F0 2A80                       		move.l	d0,(a5)
000082F2 2A19                       		move.l	(a1)+,d5
000082F4 2819                       		move.l	(a1)+,d4
000082F6 0A84 1000 1000             		eori.l	#$10001000,d4
000082FC 2C84                       		move.l	d4,(a6)
000082FE D087                       		add.l	d7,d0
00008300 2A80                       		move.l	d0,(a5)
00008302 0A85 1000 1000             		eori.l	#$10001000,d5
00008308 2C85                       		move.l	d5,(a6)
0000830A 4E75                       		rts	
0000830C                            ; ===========================================================================
0000830C                            
0000830C                            DrawFlipXY:
0000830C 2A80                       		move.l	d0,(a5)
0000830E 2A19                       		move.l	(a1)+,d5
00008310 2819                       		move.l	(a1)+,d4
00008312 0A84 1800 1800             		eori.l	#$18001800,d4
00008318 4844                       		swap	d4
0000831A 2C84                       		move.l	d4,(a6)
0000831C D087                       		add.l	d7,d0
0000831E 2A80                       		move.l	d0,(a5)
00008320 0A85 1800 1800             		eori.l	#$18001800,d5
00008326 4845                       		swap	d5
00008328 2C85                       		move.l	d5,(a6)
0000832A 4E75                       		rts	
0000832C                            ; End of function DrawBlocks
0000832C                            
0000832C                            ; ===========================================================================
0000832C                            ; unused garbage
0000832C                            
0000832C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000832C                            
0000832C                            ; Gets address of block at a certain coordinate
0000832C                            ; Parameters:
0000832C                            ; a4 = Pointer to level layout
0000832C                            ; d4 = Relative Y coordinate
0000832C                            ; d5 = Relative X coordinate
0000832C                            ; Returns:
0000832C                            ; a0 = Address of block metadata
0000832C                            ; a1 = Address of block
0000832C                            ; DrawBlocks:
0000832C                            GetBlockData:
0000832C DA53                       			add.w	(a3),d5
0000832E                            	GetBlockData_2:
0000832E D86B 0004                  			add.w	4(a3),d4
00008332 43F8 B000                  			lea	(v_16x16).w,a1
00008336                            		; Turn Y coordinate into index into level layout
00008336 3604                       		move.w	d4,d3
00008338 E24B                       		lsr.w	#1,d3
0000833A 0243 0380                  		andi.w	#$380,d3
0000833E                            		; Turn X coordinate into index into level layout
0000833E E64D                       		lsr.w	#3,d5
00008340 3005                       		move.w	d5,d0
00008342 EA48                       		lsr.w	#5,d0
00008344 0240 007F                  		andi.w	#$7F,d0
00008348                            		; Get chunk from level layout
00008348 D043                       		add.w	d3,d0
0000834A 76FF                       		moveq	#-1,d3
0000834C 1634 0000                  		move.b	(a4,d0.w),d3
00008350 6700                       		beq.s	locret_6C1E	; If chunk 00, just return a pointer to the first block (expected to be empty)
00008352                            		; Turn chunk ID into index into chunk table
00008352 5303                       		subq.b	#1,d3
00008354 0243 007F                  		andi.w	#$7F,d3
00008358 EE5B                       		ror.w	#7,d3
0000835A                            		; Turn Y coordinate into index into chunk
0000835A D844                       		add.w	d4,d4
0000835C 0244 01E0                  		andi.w	#$1E0,d4
00008360                            		; Turn X coordinate into index into chunk
00008360 0245 001E                  		andi.w	#$1E,d5
00008364                            		; Get block metadata from chunk
00008364 D644                       		add.w	d4,d3
00008366 D645                       		add.w	d5,d3
00008368 2043                       		movea.l	d3,a0
0000836A 3610                       		move.w	(a0),d3
0000836C                            		; Turn block ID into address
0000836C 0243 03FF                  		andi.w	#$3FF,d3
00008370 E74B                       		lsl.w	#3,d3
00008372 D2C3                       		adda.w	d3,a1
00008374                            
00008374                            locret_6C1E:
00008374 4E75                       		rts	
00008376                            ; End of function GetBlockData
00008376                            
00008376                            
00008376                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008376                            
00008376                            ; Produces a VRAM plane access command from coordinates
00008376                            ; Parameters:
00008376                            ; d4 = Relative Y coordinate
00008376                            ; d5 = Relative X coordinate
00008376                            ; Returns VDP command in d0
00008376                            Calc_VRAM_Pos:
00008376 DA53                       			add.w	(a3),d5
00008378                            	Calc_VRAM_Pos_2:
00008378 D86B 0004                  			add.w	4(a3),d4
0000837C                            		; Floor the coordinates to the nearest pair of tiles (the size of a block).
0000837C                            		; Also note that this wraps the value to the size of the plane:
0000837C                            		; The plane is 64*8 wide, so wrap at $100, and it's 32*8 tall, so wrap at $200
0000837C 0244 00F0                  		andi.w	#$F0,d4
00008380 0245 01F0                  		andi.w	#$1F0,d5
00008384                            		; Transform the adjusted coordinates into a VDP command
00008384 E94C                       		lsl.w	#4,d4
00008386 E44D                       		lsr.w	#2,d5
00008388 D845                       		add.w	d5,d4
0000838A 7003                       		moveq	#3,d0	; Highest bits of plane VRAM address
0000838C 4840                       		swap	d0
0000838E 3004                       		move.w	d4,d0
00008390 4E75                       		rts	
00008392                            ; End of function Calc_VRAM_Pos
00008392                            
00008392                            
00008392                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008392                            ; not used
00008392                            
00008392                            ; This is just like Calc_VRAM_Pos, but seemingly for an earlier
00008392                            ; VRAM layout: the only difference is the high bits of the
00008392                            ; plane's VRAM address, which are 10 instead of 11.
00008392                            ; Both the foreground and background are at $C000 and $E000
00008392                            ; respectively, so this one starting at $8000 makes no sense.
00008392                            ; sub_6C3C:
00008392                            Calc_VRAM_Pos_Unknown:
00008392 D86B 0004                  		add.w	4(a3),d4
00008396 DA53                       		add.w	(a3),d5
00008398 0244 00F0                  		andi.w	#$F0,d4
0000839C 0245 01F0                  		andi.w	#$1F0,d5
000083A0 E94C                       		lsl.w	#4,d4
000083A2 E44D                       		lsr.w	#2,d5
000083A4 D845                       		add.w	d5,d4
000083A6 7002                       		moveq	#2,d0
000083A8 4840                       		swap	d0
000083AA 3004                       		move.w	d4,d0
000083AC 4E75                       		rts	
000083AE                            ; End of function Calc_VRAM_Pos_Unknown
000083AE                            
000083AE                            ; ---------------------------------------------------------------------------
000083AE                            ; Subroutine to	load tiles as soon as the level	appears
000083AE                            ; ---------------------------------------------------------------------------
000083AE                            
000083AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083AE                            
000083AE                            
000083AE                            LoadTilesFromStart:
000083AE 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
000083B4 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000083BA 47F8 F700                  		lea	(v_screenposx).w,a3
000083BE 49F8 A400                  		lea	(v_lvllayout).w,a4
000083C2 343C 4000                  		move.w	#$4000,d2
000083C6 6100                       		bsr.s	DrawChunks
000083C8 47F8 F708                  		lea	(v_bgscreenposx).w,a3
000083CC 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
000083D0 343C 6000                  		move.w	#$6000,d2
000083D4 4A38 FE10                  			tst.b	(v_zone).w
000083D8 6700 0000                  			beq.w	Draw_GHz_Bg
000083DC 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
000083E2 6700 0000                  			beq.w	Draw_Mz_Bg
000083E6 0C78 0500 FE10             			cmpi.w	#(id_SBZ<<8)+0,(v_zone).w
000083EC 6700 0000                  			beq.w	Draw_SBz_Bg
000083F0 0C38 0006 FE10             			cmpi.b	#id_EndZ,(v_zone).w
000083F6 6700 0000                  			beq.w	Draw_GHz_Bg
000083FA                            ; End of function LoadTilesFromStart
000083FA                            
000083FA                            
000083FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083FA                            
000083FA                            
000083FA                            DrawChunks:
000083FA 78F0                       		moveq	#-16,d4
000083FC 7C0F                       		moveq	#((224+16+16)/16)-1,d6
000083FE                            
000083FE                            	@loop:
000083FE 48E7 0E00                  		movem.l	d4-d6,-(sp)
00008402 7A00                       		moveq	#0,d5
00008404 3204                       		move.w	d4,d1
00008406 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
0000840A 3801                       		move.w	d1,d4
0000840C 7A00                       		moveq	#0,d5
0000840E 7C1F                       		moveq	#(512/16)-1,d6
00008410 6100 FE1A                  		bsr.w	DrawBlocks_LR_2
00008414 4CDF 0070                  		movem.l	(sp)+,d4-d6
00008418 0644 0010                  		addi.w	#16,d4
0000841C 51CE FFE0                  		dbf	d6,@loop
00008420 4E75                       		rts	
00008422                            ; End of function DrawChunks
00008422                            
00008422                            	Draw_GHz_Bg:
00008422 7800                       			moveq	#0,d4
00008424 7C0F                       			moveq	#((224+16+16)/16)-1,d6
00008426                            	locj_7224:			
00008426 48E7 0E00                  			movem.l	d4-d6,-(sp)
0000842A 41F9 0000 0000             			lea	(locj_724a),a0
00008430 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008434 D044                       			add.w	d4,d0
00008436 0240 00F0                  			andi.w	#$F0,d0
0000843A 6100 0000                  			bsr.w	locj_72Ba
0000843E 4CDF 0070                  			movem.l	(sp)+,d4-d6
00008442 0644 0010                  			addi.w	#16,d4
00008446 51CE FFDE                  			dbf	d6,locj_7224
0000844A 4E75                       			rts
0000844C                            	locj_724a:
0000844C 0000 0000 0606 0604 0404+  			dc.b $00,$00,$00,$00,$06,$06,$06,$04,$04,$04,$00,$00,$00,$00,$00,$00
0000845C                            ;-------------------------------------------------------------------------------
0000845C                            	Draw_Mz_Bg:;locj_725a:
0000845C 78F0                       			moveq	#-16,d4
0000845E 7C0F                       			moveq	#((224+16+16)/16)-1,d6
00008460                            	locj_725E:			
00008460 48E7 0E00                  			movem.l	d4-d6,-(sp)
00008464 41FA FC8F                  			lea	(locj_6EF2+1),a0
00008468 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
0000846C 0440 0200                  			subi.w	#$200,d0
00008470 D044                       			add.w	d4,d0
00008472 0240 07F0                  			andi.w	#$7F0,d0
00008476 6100 0000                  			bsr.w	locj_72Ba
0000847A 4CDF 0070                  			movem.l	(sp)+,d4-d6
0000847E 0644 0010                  			addi.w	#16,d4
00008482 51CE FFDC                  			dbf	d6,locj_725E
00008486 4E75                       			rts
00008488                            ;-------------------------------------------------------------------------------
00008488                            	Draw_SBz_Bg:;locj_7288:
00008488 78F0                       			moveq	#-16,d4
0000848A 7C0F                       			moveq	#((224+16+16)/16)-1,d6
0000848C                            	locj_728C:			
0000848C 48E7 0E00                  			movem.l	d4-d6,-(sp)
00008490 41F8 7FF7                  			lea	(locj_6DF4+1),a0
00008494 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008498 D044                       			add.w	d4,d0
0000849A 0240 01F0                  			andi.w	#$1F0,d0
0000849E 6100 0000                  			bsr.w	locj_72Ba
000084A2 4CDF 0070                  			movem.l	(sp)+,d4-d6
000084A6 0644 0010                  			addi.w	#16,d4
000084AA 51CE FFE0                  			dbf	d6,locj_728C
000084AE 4E75                       			rts
000084B0                            ;-------------------------------------------------------------------------------
000084B0                            	locj_72B2:
000084B0 F708 F708 F710 F718        			dc.w v_bgscreenposx, v_bgscreenposx, v_bg2screenposx, v_bg3screenposx
000084B8                            	locj_72Ba:
000084B8 E848                       			lsr.w	#4,d0
000084BA 1030 0000                  			move.b	(a0,d0.w),d0
000084BE 367B 00F0                  			movea.w	locj_72B2(pc,d0.w),a3
000084C2 6700                       			beq.s	locj_72da
000084C4 7AF0                       			moveq	#-16,d5
000084C6 48E7 0C00                  			movem.l	d4/d5,-(sp)
000084CA 6100 FEAA                  			bsr.w	Calc_VRAM_Pos
000084CE 4CDF 0030                  			movem.l	(sp)+,d4/d5
000084D2 6100 FD56                  			bsr.w	DrawBlocks_LR
000084D6 6000                       			bra.s	locj_72EE
000084D8                            	locj_72da:
000084D8 7A00                       			moveq	#0,d5
000084DA 48E7 0C00                  			movem.l	d4/d5,-(sp)
000084DE 6100 FE98                  			bsr.w	Calc_VRAM_Pos_2
000084E2 4CDF 0030                  			movem.l	(sp)+,d4/d5
000084E6 7C1F                       			moveq	#(512/16)-1,d6
000084E8 6100 FD6C                  			bsr.w	DrawBlocks_LR_3
000084EC                            	locj_72EE:
000084EC 4E75                       			rts
000084EE                            
000084EE                            ; ---------------------------------------------------------------------------
000084EE                            ; Subroutine to load basic level data
000084EE                            ; ---------------------------------------------------------------------------
000084EE                            
000084EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084EE                            
000084EE                            
000084EE                            LevelDataLoad:
000084EE 7000                       		moveq	#0,d0
000084F0 1038 FE10                  		move.b	(v_zone).w,d0
000084F4 E948                       		lsl.w	#4,d0
000084F6 45F9 0000 0000             		lea	(LevelHeaders).l,a2
000084FC 45F2 0000                  		lea	(a2,d0.w),a2
00008500 2F0A                       		move.l	a2,-(sp)
00008502 588A                       		addq.l	#4,a2
00008504 205A                       		movea.l	(a2)+,a0
00008506 43F8 B000                  		lea	(v_16x16).w,a1	; RAM address for 16x16 mappings
0000850A 303C 0000                  		move.w	#0,d0
0000850E 6100 9426                  		bsr.w	EniDec
00008512 205A                       		movea.l	(a2)+,a0
00008514 43F9 00FF 0000             		lea	(v_256x256).l,a1 ; RAM address for 256x256 mappings
0000851A 6100 9598                  		bsr.w	KosDec
0000851E 6100 0000                  		bsr.w	LevelLayoutLoad
00008522 301A                       		move.w	(a2)+,d0
00008524 3012                       		move.w	(a2),d0
00008526 0240 00FF                  		andi.w	#$FF,d0
0000852A 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; is level SBZ3 (LZ4) ?
00008530 6600                       		bne.s	@notSBZ3	; if not, branch
00008532 700C                       		moveq	#palid_SBZ3,d0	; use SB3 palette
00008534                            
00008534                            	@notSBZ3:
00008534 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w ; is level SBZ2?
0000853A 6700                       		beq.s	@isSBZorFZ	; if yes, branch
0000853C 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; is level FZ?
00008542 6600                       		bne.s	@normalpal	; if not, branch
00008544                            
00008544                            	@isSBZorFZ:
00008544 700E                       		moveq	#palid_SBZ2,d0	; use SBZ2/FZ palette
00008546                            
00008546                            	@normalpal:
00008546 6100 A11A                  		bsr.w	PalLoad1	; load palette (based on d0)
0000854A 245F                       		movea.l	(sp)+,a2
0000854C 584A                       		addq.w	#4,a2		; read number for 2nd PLC
0000854E 7000                       		moveq	#0,d0
00008550 1012                       		move.b	(a2),d0
00008552 6700                       		beq.s	@skipPLC	; if 2nd PLC is 0 (i.e. the ending sequence), branch
00008554 6100 9242                  		bsr.w	AddPLC		; load pattern load cues
00008558                            
00008558                            	@skipPLC:
00008558 4E75                       		rts	
0000855A                            ; End of function LevelDataLoad
0000855A                            
0000855A                            ; ---------------------------------------------------------------------------
0000855A                            ; Level	layout loading subroutine
0000855A                            ; ---------------------------------------------------------------------------
0000855A                            
0000855A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000855A                            
0000855A                            
0000855A                            LevelLayoutLoad:
0000855A 47F8 A400                  		lea	(v_lvllayout).w,a3
0000855E 323C 01FF                  		move.w	#$1FF,d1
00008562 7000                       		moveq	#0,d0
00008564                            
00008564                            LevLoad_ClrRam:
00008564 26C0                       		move.l	d0,(a3)+
00008566 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($A400-A7FF)
0000856A                            
0000856A 47F8 A400                  		lea	(v_lvllayout).w,a3 ; RAM address for level layout
0000856E 7200                       		moveq	#0,d1
00008570 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00008574 47F8 A440                  		lea	(v_lvllayout+$40).w,a3 ; RAM address for background layout
00008578 7202                       		moveq	#2,d1
0000857A                            ; End of function LevelLayoutLoad
0000857A                            
0000857A                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
0000857A                            
0000857A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000857A                            
0000857A                            
0000857A                            LevelLayoutLoad2:
0000857A 3038 FE10                  		move.w	(v_zone).w,d0
0000857E ED08                       		lsl.b	#6,d0
00008580 EA48                       		lsr.w	#5,d0
00008582 3400                       		move.w	d0,d2
00008584 D040                       		add.w	d0,d0
00008586 D042                       		add.w	d2,d0
00008588 D041                       		add.w	d1,d0
0000858A 43F9 0000 0000             		lea	(Level_Index).l,a1
00008590 3031 0000                  		move.w	(a1,d0.w),d0
00008594 43F1 0000                  		lea	(a1,d0.w),a1
00008598 7200                       		moveq	#0,d1
0000859A 3401                       		move.w	d1,d2
0000859C 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
0000859E 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
000085A0                            
000085A0                            LevLoad_NumRows:
000085A0 3001                       		move.w	d1,d0
000085A2 204B                       		movea.l	a3,a0
000085A4                            
000085A4                            LevLoad_Row:
000085A4 10D9                       		move.b	(a1)+,(a0)+
000085A6 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
000085AA 47EB 0080                  		lea	$80(a3),a3	; do next row
000085AE 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
000085B2 4E75                       		rts	
000085B4                            ; End of function LevelLayoutLoad2
000085B4                            
000085B4                            		include	"_inc\DynamicLevelEvents.asm"
000085B4                            ; ---------------------------------------------------------------------------
000085B4                            ; Dynamic level events
000085B4                            ; ---------------------------------------------------------------------------
000085B4                            
000085B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085B4                            
000085B4                            
000085B4                            DynamicLevelEvents:
000085B4 7000                       		moveq	#0,d0
000085B6 1038 FE10                  		move.b	(v_zone).w,d0
000085BA D040                       		add.w	d0,d0
000085BC 303B 0000                  		move.w	DLE_Index(pc,d0.w),d0
000085C0 4EBB 0000                  		jsr	DLE_Index(pc,d0.w) ; run level-specific events
000085C4 7202                       		moveq	#2,d1
000085C6 3038 F726                  		move.w	(v_limitbtm1).w,d0
000085CA 9078 F72E                  		sub.w	(v_limitbtm2).w,d0 ; has lower level boundary changed recently?
000085CE 6700                       		beq.s	DLE_NoChg	; if not, branch
000085D0 6400                       		bcc.s	loc_6DAC
000085D2                            
000085D2 4441                       		neg.w	d1
000085D4 3038 F704                  		move.w	(v_screenposy).w,d0
000085D8 B078 F726                  		cmp.w	(v_limitbtm1).w,d0
000085DC 6300                       		bls.s	loc_6DA0
000085DE 31C0 F72E                  		move.w	d0,(v_limitbtm2).w
000085E2 0278 FFFE F72E             		andi.w	#$FFFE,(v_limitbtm2).w
000085E8                            
000085E8                            loc_6DA0:
000085E8 D378 F72E                  		add.w	d1,(v_limitbtm2).w
000085EC 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
000085F2                            
000085F2                            DLE_NoChg:
000085F2 4E75                       		rts	
000085F4                            ; ===========================================================================
000085F4                            
000085F4                            loc_6DAC:
000085F4 3038 F704                  		move.w	(v_screenposy).w,d0
000085F8 5040                       		addq.w	#8,d0
000085FA B078 F72E                  		cmp.w	(v_limitbtm2).w,d0
000085FE 6500                       		bcs.s	loc_6DC4
00008600 0838 0001 D022             		btst	#1,(v_player+obStatus).w
00008606 6700                       		beq.s	loc_6DC4
00008608 D241                       		add.w	d1,d1
0000860A D241                       		add.w	d1,d1
0000860C                            
0000860C                            loc_6DC4:
0000860C D378 F72E                  		add.w	d1,(v_limitbtm2).w
00008610 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
00008616 4E75                       		rts	
00008618                            ; End of function DynamicLevelEvents
00008618                            
00008618                            ; ===========================================================================
00008618                            ; ---------------------------------------------------------------------------
00008618                            ; Offset index for dynamic level events
00008618                            ; ---------------------------------------------------------------------------
00008618 0000 0000                  DLE_Index:	dc.w DLE_GHZ-DLE_Index, DLE_LZ-DLE_Index
0000861C 0000 0000                  		dc.w DLE_MZ-DLE_Index, DLE_SLZ-DLE_Index
00008620 0000 0000                  		dc.w DLE_SYZ-DLE_Index, DLE_SBZ-DLE_Index
00008624 0000                       		dc.w DLE_Ending-DLE_Index
00008626                            ; ===========================================================================
00008626                            ; ---------------------------------------------------------------------------
00008626                            ; Green	Hill Zone dynamic level events
00008626                            ; ---------------------------------------------------------------------------
00008626                            
00008626                            DLE_GHZ:
00008626 7000                       		moveq	#0,d0
00008628 1038 FE11                  		move.b	(v_act).w,d0
0000862C D040                       		add.w	d0,d0
0000862E 303B 0000                  		move.w	DLE_GHZx(pc,d0.w),d0
00008632 4EFB 0000                  		jmp	DLE_GHZx(pc,d0.w)
00008636                            ; ===========================================================================
00008636 0000                       DLE_GHZx:	dc.w DLE_GHZ1-DLE_GHZx
00008638 0000                       		dc.w DLE_GHZ2-DLE_GHZx
0000863A 0000                       		dc.w DLE_GHZ3-DLE_GHZx
0000863C                            ; ===========================================================================
0000863C                            
0000863C                            DLE_GHZ1:
0000863C 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
00008642 6600                       		bne.s	gohere
00008644 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
0000864A 4E75                       		rts
0000864C                            gohere:
0000864C 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
00008652 0C78 1680 F700             		cmpi.w	#$1680,(v_screenposx).w ; has the camera reached $1780 on x-axis?
00008658 6500                       		bcs.s	locret_6E08	; if not, branch
0000865A 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w ; set lower y-boundary
00008660                            
00008660                            locret_6E08:
00008660 4E75                       		rts	
00008662                            ; ===========================================================================
00008662                            
00008662                            DLE_GHZ2:
00008662 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008668 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
0000866E 6500                       		bcs.s	locret_6E3A
00008670 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
00008676 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
0000867C 6500                       		bcs.s	locret_6E3A
0000867E 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008684 6500                       		bcs.s	loc_6E9A
00008686 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
0000868C 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
00008692 6400                       		bcc.s	loc_6E8F
00008694 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
0000869A 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
000086A0                            
000086A0                            loc_6E8F:
000086A0 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
000086A6 6400                       		bcc.s	loc_6E9A
000086A8                            
000086A8                            locret_6E3A:
000086A8 4E75                       		rts	
000086AA                            ; ===========================================================================
000086AA                            
000086AA                            loc_6E9A:
000086AA 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
000086B0 5438 F742                  		addq.b	#2,(v_dle_routine).w
000086B4 4E75                       		rts		
000086B6                            ; ===========================================================================
000086B6                            
000086B6                            DLE_GHZ3:
000086B6 7000                       		moveq	#0,d0
000086B8 1038 F742                  		move.b	(v_dle_routine).w,d0
000086BC 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
000086C0 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
000086C4                            ; ===========================================================================
000086C4 0000                       off_6E4A:	dc.w DLE_GHZ3main-off_6E4A
000086C6 0000                       		dc.w DLE_GHZ3boss-off_6E4A
000086C8 0000                       		dc.w DLE_GHZ3end-off_6E4A
000086CA                            ; ===========================================================================
000086CA                            
000086CA                            DLE_GHZ3main:
000086CA 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
000086D0 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
000086D6 6500                       		bcs.s	locret_6E96
000086D8 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
000086DE 0C78 0860 F700             		cmpi.w	#$860,(v_screenposx).w
000086E4 6500                       		bcs.s	locret_6E96
000086E6 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
000086EC 6500                       		bcs.s	loc_6E98
000086EE 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
000086F4 0C78 1380 F700             		cmpi.w	#$1380,(v_screenposx).w
000086FA 6400                       		bcc.s	loc_6E8E
000086FC 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
00008702 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
00008708                            
00008708                            loc_6E8E:
00008708 0C78 1300 F700             		cmpi.w	#$1300,(v_screenposx).w
0000870E 6400                       		bcc.s	loc_6E98
00008710                            
00008710                            locret_6E96:
00008710 4E75                       		rts	
00008712                            ; ===========================================================================
00008712                            
00008712                            loc_6E98:
00008712 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008718 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000871C 4E75                       		rts	
0000871E                            ; ===========================================================================
0000871E                            
0000871E                            DLE_GHZ3boss:
0000871E 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008724 6400                       		bcc.s	loc_6EB0
00008726 5538 F742                  		subq.b	#2,(v_dle_routine).w
0000872A                            
0000872A                            loc_6EB0:
0000872A 0C78 2960 F700             		cmpi.w	#$2960,(v_screenposx).w
00008730 6500                       		bcs.s	locret_6EE8
00008732 6100 0000                  		bsr.w	FindFreeObj
00008736 6600                       		bne.s	loc_6ED0
00008738 12BC 0000                  		move.b	#id_BossGreenHill,0(a1) ; load GHZ boss	object
0000873C 337C 2A60 0008             		move.w	#$2A60,obX(a1)
00008742 337C 0280 000C             		move.w	#$280,obY(a1)
00008748                            
00008748                            loc_6ED0:
00008750 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008756 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000875A 7000                       		moveq	#plcid_Boss,d0
0000875C 6000 903A                  		bra.w	AddPLC		; load boss patterns
00008760                            ; ===========================================================================
00008760                            
00008760                            locret_6EE8:
00008760 4E75                       		rts	
00008762                            ; ===========================================================================
00008762                            
00008762                            DLE_GHZ3end:
00008762 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008768 4E75                       		rts	
0000876A                            ; ===========================================================================
0000876A                            ; ---------------------------------------------------------------------------
0000876A                            ; Labyrinth Zone dynamic level events
0000876A                            ; ---------------------------------------------------------------------------
0000876A                            
0000876A                            DLE_LZ:
0000876A 7000                       		moveq	#0,d0
0000876C 1038 FE11                  		move.b	(v_act).w,d0
00008770 D040                       		add.w	d0,d0
00008772 303B 0000                  		move.w	DLE_LZx(pc,d0.w),d0
00008776 4EFB 0000                  		jmp	DLE_LZx(pc,d0.w)
0000877A                            ; ===========================================================================
0000877A 0000                       DLE_LZx:	dc.w DLE_LZ12-DLE_LZx
0000877C 0000                       		dc.w DLE_LZ12-DLE_LZx
0000877E 0000                       		dc.w DLE_LZ3-DLE_LZx
00008780 0000                       		dc.w DLE_SBZ3-DLE_LZx
00008782                            ; ===========================================================================
00008782                            
00008782                            DLE_LZ12:
00008782 4E75                       		rts	
00008784                            ; ===========================================================================
00008784                            
00008784                            DLE_LZ3:
00008784 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch $F	been pressed?
00008788 6700                       		beq.s	loc_6F28	; if not, branch
0000878A 43F8 A506                  		lea	(v_lvllayout+$106).w,a1
0000878E 0C11 0007                  		cmpi.b	#7,(a1)
00008792 6700                       		beq.s	loc_6F28
00008794 12BC 0007                  		move.b	#7,(a1)		; modify level layout
000087A0                            
000087A0                            loc_6F28:
000087A0 4A38 F742                  		tst.b	(v_dle_routine).w
000087A4 6600                       		bne.s	locret_6F64
000087A6 0C78 1CA0 F700             		cmpi.w	#$1CA0,(v_screenposx).w
000087AC 6500                       		bcs.s	locret_6F62
000087AE 0C78 0600 F704             		cmpi.w	#$600,(v_screenposy).w
000087B4 6400                       		bcc.s	locret_6F62
000087B6 6100 0000                  		bsr.w	FindFreeObj
000087BA 6600                       		bne.s	loc_6F4A
000087BC 12BC 0000                  		move.b	#id_BossLabyrinth,0(a1) ; load LZ boss object
000087C0                            
000087C0                            loc_6F4A:
000087C8 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000087CE 5438 F742                  		addq.b	#2,(v_dle_routine).w
000087D2 7000                       		moveq	#plcid_Boss,d0
000087D4 6000 8FC2                  		bra.w	AddPLC		; load boss patterns
000087D8                            ; ===========================================================================
000087D8                            
000087D8                            locret_6F62:
000087D8 4E75                       		rts	
000087DA                            ; ===========================================================================
000087DA                            
000087DA                            locret_6F64:
000087DA 4E75                       		rts	
000087DC                            ; ===========================================================================
000087DC                            
000087DC                            DLE_SBZ3:
000087DC 4A38 F742                          tst.b	(v_dle_routine).w
000087E0 6600                               bne.s   loc_6C28
000087E2 4A38 F7E1                  		tst.b	(f_switch+$1).w	; has switch $F	been pressed?
000087E6 6700                       		beq.s	loc_6C28	; if not, branch
000087F0 11FC 0001 F742             		move.b	#1, (v_dle_routine).w
000087F6                            loc_6C28:
000087F6 0C78 0D00 F700             		cmpi.w	#$D00,(v_screenposx).w
000087FC 6500                       		bcs.s	locret_6F8C
000087FE 0C78 0018 D00C             		cmpi.w	#$18,(v_player+obY).w ; has Sonic reached the top of the level?
00008804 6400                       		bcc.s	locret_6F8C	; if not, branch
00008806 4238 FE30                  		clr.b	(v_lastlamp).w
0000880A 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
00008810 31FC 0502 FE10             		move.w	#(id_SBZ<<8)+2,(v_zone).w ; set level number to 0502 (FZ)
00008816 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; freeze Sonic
0000881C                            
0000881C                            locret_6F8C:
0000881C 4E75                       		rts	
0000881E                            ; ===========================================================================
0000881E                            ; ---------------------------------------------------------------------------
0000881E                            ; Marble Zone dynamic level events
0000881E                            ; ---------------------------------------------------------------------------
0000881E                            
0000881E                            DLE_MZ:
0000881E 7000                       		moveq	#0,d0
00008820 1038 FE11                  		move.b	(v_act).w,d0
00008824 D040                       		add.w	d0,d0
00008826 303B 0000                  		move.w	DLE_MZx(pc,d0.w),d0
0000882A 4EFB 0000                  		jmp	DLE_MZx(pc,d0.w)
0000882E                            ; ===========================================================================
0000882E 0000                       DLE_MZx:	dc.w DLE_MZ1-DLE_MZx
00008830 0000                       		dc.w DLE_MZ2-DLE_MZx
00008832 0000                       		dc.w DLE_MZ3-DLE_MZx
00008834                            ; ===========================================================================
00008834                            
00008834                            DLE_MZ1:
00008834 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
0000883A 0C78 1F40 F700             		cmpi.w	#$1F40,(v_screenposx).w
00008840 6500                       		bcs.s	locret_6FE8
00008842 31FC 0220 F726             		move.w	#$220,(v_limitbtm1).w
00008848                            
00008848                            locret_6FE8:
00008848 4E75                       		rts	
0000884A                            
0000884A                            ; ===========================================================================
0000884A                            
0000884A                            DLE_MZ2:
0000884A 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008850 0C78 2110 F700             		cmpi.w	#$2110,(v_screenposx).w
00008856 6500                       		bcs.s	locret_6FE9
00008858 31FC 0110 F726             		move.w	#$110,(v_limitbtm1).w
0000885E                            		
0000885E                            locret_6FE9:
0000885E 4E75                       		rts	
00008860                            ; ===========================================================================
00008860                            
00008860                            DLE_MZ3:
00008860 7000                       		moveq	#0,d0
00008862 1038 F742                  		move.b	(v_dle_routine).w,d0
00008866 303B 0000                  		move.w	off_7098(pc,d0.w),d0
0000886A 4EFB 0000                  		jmp	off_7098(pc,d0.w)
0000886E                            ; ===========================================================================
0000886E 0000                       off_7098:	dc.w DLE_MZ3boss-off_7098
00008870 0000                       		dc.w DLE_MZ3cutscene-off_7098
00008872 0000                       		dc.w DLE_MZ3boss2-off_7098
00008874 0000                       		dc.w DLE_MZ3end-off_7098
00008876                            ; ===========================================================================
00008876                            
00008876                            DLE_MZ3boss:
00008876 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
0000887C 0C78 0E00 F700             		cmpi.w	#$0E00,(v_screenposx).w
00008882 6500                       		bcs.s	locret_70E8
00008884 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
0000888A 0C78 17F0 F700             		cmpi.w	#$17F0,(v_screenposx).w
00008890 6500                       		bcs.s	locret_70E8
00008892 6100 0000                  		bsr.w	FindFreeObj
00008896 6600                       		bne.s	loc_70D0
00008898 12BC 0000                  		move.b	#id_BossMarble,0(a1) ; load MZ boss object
0000889C 337C 19F0 0008             		move.w	#$19F0,obX(a1)
000088A2 337C 022C 000C             		move.w	#$22C,obY(a1)
000088A8                            
000088A8                            loc_70D0:
000088B0 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000088B6 5438 F742                  		addq.b	#2,(v_dle_routine).w
000088BA 7000                       		moveq	#plcid_Boss,d0
000088BC 6000 8EDA                  		bra.w	AddPLC		; load boss patterns
000088C0                            ; ===========================================================================
000088C0                            
000088C0                            locret_70E8:
000088C0 4E75                       		rts	
000088C2                            		
000088C2                            DLE_MZ3cutscene:
000088C2 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
000088C8 0C78 19B0 F700             		cmpi.w	#$19B0,(v_screenposx).w
000088CE 6500                       		bcs.s	locret_8298
000088D0 6100 0000                  		bsr.w	FindFreeObj
000088D4 6600                       		bne.s	locret_8298
000088D6 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
000088DA 5438 F742                  		addq.b	#2,(v_dle_routine).w
000088DE 7000                       		moveq	#plcid_EggmanSBZ2,d0
000088E0 6000 8EB6                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
000088E4                            ; ===========================================================================
000088E4                            
000088E4                            locret_8298:
000088E4 4E75                       		rts	
000088E6                            ; ===========================================================================
000088E6                            
000088E6                            DLE_MZ3boss2:
000088E6 0C78 1A60 F700             		cmpi.w	#$1A60,(v_screenposx).w
000088EC 6500                       		bcs.s	loc_72C6
000088EE 6100 0000                  		bsr.w	FindFreeObj
000088F2 6600                       		bne.s	loc_72C0
000088F4 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
000088F8 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008904                            
00008904                            loc_72C0:
00008904 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
0000890A                            
0000890A                            loc_72C6:
0000890A 6000                       		bra.s	loc_72D2
0000890C                            ; ===========================================================================
0000890C                            
0000890C                            DLE_MZ3end:
0000890C 0C78 1B50 F700             		cmpi.w	#$1B50,(v_screenposx).w
00008912 6500                       		bcs.s	loc_72D2
00008914 4E75                       		rts	
00008916                            ; ===========================================================================
00008916                            
00008916                            loc_72D2:
00008916 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
0000891C 4E75                       		rts
0000891E                            
0000891E                            
0000891E                            ; ===========================================================================
0000891E                            ; ---------------------------------------------------------------------------
0000891E                            ; Star Light Zone dynamic level events
0000891E                            ; ---------------------------------------------------------------------------
0000891E                            
0000891E                            DLE_SLZ:
0000891E 7000                       		moveq	#0,d0
00008920 1038 FE11                  		move.b	(v_act).w,d0
00008924 D040                       		add.w	d0,d0
00008926 303B 0000                  		move.w	DLE_SLZx(pc,d0.w),d0
0000892A 4EFB 0000                  		jmp	DLE_SLZx(pc,d0.w)
0000892E                            ; ===========================================================================
0000892E 0000                       DLE_SLZx:	dc.w DLE_SLZ12-DLE_SLZx
00008930 0000                       		dc.w DLE_SLZ12-DLE_SLZx
00008932 0000                       		dc.w DLE_SLZ3-DLE_SLZx
00008934                            ; ===========================================================================
00008934                            
00008934                            DLE_SLZ12:
00008934 4E75                       		rts	
00008936                            ; ===========================================================================
00008936                            
00008936                            DLE_SLZ3:
00008936 7000                       		moveq	#0,d0
00008938 1038 F742                  		move.b	(v_dle_routine).w,d0
0000893C 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00008940 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00008944                            ; ===========================================================================
00008944 0000                       off_7118:	dc.w DLE_SLZ3main-off_7118
00008946 0000                       		dc.w DLE_SLZ3boss-off_7118
00008948 0000                       		dc.w DLE_SLZ3end-off_7118
0000894A                            ; ===========================================================================
0000894A                            
0000894A                            DLE_SLZ3main:
0000894A 0C78 1E70 F700             		cmpi.w	#$1E70,(v_screenposx).w
00008950 6500                       		bcs.s	locret_7130
00008952 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
00008958 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000895C                            
0000895C                            locret_7130:
0000895C 4E75                       		rts	
0000895E                            ; ===========================================================================
0000895E                            
0000895E                            DLE_SLZ3boss:
0000895E 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008964 6500                       		bcs.s	locret_715C
00008966 6100 0000                  		bsr.w	FindFreeObj
0000896A 6600                       		bne.s	loc_7144
0000896C 12BC 0000                  		move.b	#id_BossStarLight,(a1) ; load SLZ boss object
00008970                            
00008970                            loc_7144:
00008978 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
0000897E 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008982 7000                       		moveq	#plcid_Boss,d0
00008984 6000 8E12                  		bra.w	AddPLC		; load boss patterns
00008988                            ; ===========================================================================
00008988                            
00008988                            locret_715C:
00008988 4E75                       		rts	
0000898A                            ; ===========================================================================
0000898A                            
0000898A                            DLE_SLZ3end:
0000898A 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008990 4E75                       		rts
00008992 4E75                       		rts
00008994                            ; ===========================================================================
00008994                            ; ---------------------------------------------------------------------------
00008994                            ; Spring Yard Zone dynamic level events
00008994                            ; ---------------------------------------------------------------------------
00008994                            
00008994                            DLE_SYZ:
00008994 7000                       		moveq	#0,d0
00008996 1038 FE11                  		move.b	(v_act).w,d0
0000899A D040                       		add.w	d0,d0
0000899C 303B 0000                  		move.w	DLE_SYZx(pc,d0.w),d0
000089A0 4EFB 0000                  		jmp	DLE_SYZx(pc,d0.w)
000089A4                            ; ===========================================================================
000089A4 0000                       DLE_SYZx:	dc.w DLE_SYZ1-DLE_SYZx
000089A6 0000                       		dc.w DLE_SYZ2-DLE_SYZx
000089A8 0000                       		dc.w DLE_SYZ3-DLE_SYZx
000089AA                            ; ===========================================================================
000089AA                            
000089AA                            DLE_SYZ1:
000089AA 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
000089B0 0C78 1600 F700             		cmpi.w	#$1600,(v_screenposx).w
000089B6 6500                       		bcs.s	locret_71A2
000089B8 31FC 0420 F726             		move.w	#$420,(v_limitbtm1).w
000089BE 4E75                       		rts	
000089C0                            ; ===========================================================================
000089C0                            
000089C0                            DLE_SYZ2:
000089C0 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
000089C6 0C78 25A0 F700             		cmpi.w	#$25A0,(v_screenposx).w
000089CC 6500                       		bcs.s	locret_71A2
000089CE 31FC 0420 F726             		move.w	#$420,(v_limitbtm1).w
000089D4 0C78 04D0 D00C             		cmpi.w	#$4D0,(v_player+obY).w
000089DA 6500                       		bcs.s	locret_71A2
000089DC 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
000089E2                            
000089E2                            locret_71A2:
000089E2 4E75                       		rts	
000089E4                            ; ===========================================================================
000089E4                            
000089E4                            DLE_SYZ3:
000089E4 7000                       		moveq	#0,d0
000089E6 1038 F742                  		move.b	(v_dle_routine).w,d0
000089EA 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
000089EE 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
000089F2                            ; ===========================================================================
000089F2 0000                       off_71B2:	dc.w DLE_SYZ3main-off_71B2
000089F4 0000                       		dc.w DLE_SYZ3boss-off_71B2
000089F6 0000                       		dc.w DLE_SYZ3end-off_71B2
000089F8                            ; ===========================================================================
000089F8                            
000089F8                            DLE_SYZ3main:
000089F8 0C78 2AC0 F700             		cmpi.w	#$2AC0,(v_screenposx).w
000089FE 6500                       		bcs.s	locret_71CE
00008A00 6100 0000                  		bsr.w	FindFreeObj
00008A04 6600                       		bne.s	locret_71CE
00008A06 12BC 0000                  		move.b	#id_BossBlock,(a1) ; load blocks that boss picks up
00008A0A 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008A0E                            
00008A0E                            locret_71CE:
00008A0E 4E75                       		rts	
00008A10                            ; ===========================================================================
00008A10                            
00008A10                            DLE_SYZ3boss:
00008A10 0C78 2C00 F700             		cmpi.w	#$2C00,(v_screenposx).w
00008A16 6500                       		bcs.s	locret_7200
00008A18 31FC 04CC F726             		move.w	#$4CC,(v_limitbtm1).w
00008A1E 6100 0000                  		bsr.w	FindFreeObj
00008A22 6600                       		bne.s	loc_71EC
00008A24 12BC 0000                  		move.b	#id_BossSpringYard,(a1) ; load SYZ boss	object
00008A28 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008A2C                            
00008A2C                            loc_71EC:
00008A34 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008A3A 7000                       		moveq	#plcid_Boss,d0
00008A3C 6000 8D5A                  		bra.w	AddPLC		; load boss patterns
00008A40                            ; ===========================================================================
00008A40                            
00008A40                            locret_7200:
00008A40 4E75                       		rts	
00008A42                            ; ===========================================================================
00008A42                            
00008A42                            DLE_SYZ3end:
00008A42 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008A48 4E75                       		rts	
00008A4A                            ; ===========================================================================
00008A4A                            ; ---------------------------------------------------------------------------
00008A4A                            ; Scrap	Brain Zone dynamic level events
00008A4A                            ; ---------------------------------------------------------------------------
00008A4A                            
00008A4A                            DLE_SBZ:
00008A4A 7000                       		moveq	#0,d0
00008A4C 1038 FE11                  		move.b	(v_act).w,d0
00008A50 D040                       		add.w	d0,d0
00008A52 303B 0000                  		move.w	DLE_SBZx(pc,d0.w),d0
00008A56 4EFB 0000                  		jmp	DLE_SBZx(pc,d0.w)
00008A5A                            ; ===========================================================================
00008A5A 0000                       DLE_SBZx:	dc.w DLE_SBZ1-DLE_SBZx
00008A5C 0000                       		dc.w DLE_SBZ2-DLE_SBZx
00008A5E 0000                       		dc.w DLE_FZ-DLE_SBZx
00008A60                            ; ===========================================================================
00008A60                            
00008A60                            DLE_SBZ1:
00008A60 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
00008A66 0C78 1880 F700             		cmpi.w	#$1880,(v_screenposx).w
00008A6C 6500                       		bcs.s	locret_7242
00008A6E 31FC 0620 F726             		move.w	#$620,(v_limitbtm1).w
00008A74 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008A7A 6500                       		bcs.s	locret_7242
00008A7C 31FC 02A0 F726             		move.w	#$2A0,(v_limitbtm1).w
00008A82                            
00008A82                            locret_7242:
00008A82 4E75                       		rts	
00008A84                            ; ===========================================================================
00008A84                            
00008A84                            DLE_SBZ2:
00008A84 7000                       		moveq	#0,d0
00008A86 1038 F742                  		move.b	(v_dle_routine).w,d0
00008A8A 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00008A8E 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00008A92                            ; ===========================================================================
00008A92 0000                       off_7252:	dc.w DLE_SBZ2main-off_7252
00008A94 0000                       		dc.w DLE_SBZ2boss-off_7252
00008A96 0000                       		dc.w DLE_SBZ2boss2-off_7252
00008A98 0000                       		dc.w DLE_SBZ2end-off_7252
00008A9A                            ; ===========================================================================
00008A9A                            
00008A9A                            DLE_SBZ2main:
00008A9A 31FC 0800 F726             		move.w	#$800,(v_limitbtm1).w
00008AA0 0C78 1800 F700             		cmpi.w	#$1800,(v_screenposx).w
00008AA6 6500                       		bcs.s	locret_727A
00008AA8 31FC 0510 F726             		move.w	#$510,(v_limitbtm1).w
00008AAE 0C78 1E00 F700             		cmpi.w	#$1E00,(v_screenposx).w
00008AB4 6500                       		bcs.s	locret_727A
00008AB6 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008ABA                            
00008ABA                            locret_727A:
00008ABA 4E75                       		rts	
00008ABC                            ; ===========================================================================
00008ABC                            
00008ABC                            DLE_SBZ2boss:
00008ABC 0C78 1EB0 F700             		cmpi.w	#$1EB0,(v_screenposx).w
00008AC2 6500                       		bcs.s	locret_7298
00008AC4 6100 0000                  		bsr.w	FindFreeObj
00008AC8 6600                       		bne.s	locret_7298
00008ACA 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
00008ACE 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008AD2 7000                       		moveq	#plcid_EggmanSBZ2,d0
00008AD4 6000 8CC2                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
00008AD8                            ; ===========================================================================
00008AD8                            
00008AD8                            locret_7298:
00008AD8 4E75                       		rts	
00008ADA                            ; ===========================================================================
00008ADA                            
00008ADA                            DLE_SBZ2boss2:
00008ADA 0C78 1F60 F700             		cmpi.w	#$1F60,(v_screenposx).w
00008AE0 6500                       		bcs.s	loc_72B6
00008AE2 6100 0000                  		bsr.w	FindFreeObj
00008AE6 6600                       		bne.s	loc_72B0
00008AE8 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
00008AEC 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008AF0                            
00008AF0                            loc_72B0:
00008AF0 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008AF6                            
00008AF6                            loc_72B6:
00008AF6 6000                       		bra.s	loc_72C2
00008AF8                            ; ===========================================================================
00008AF8                            
00008AF8                            DLE_SBZ2end:
00008AF8 0C78 2050 F700             		cmpi.w	#$2050,(v_screenposx).w
00008AFE 6500                       		bcs.s	loc_72C2
00008B00 4E75                       		rts	
00008B02                            ; ===========================================================================
00008B02                            
00008B02                            loc_72C2:
00008B02 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008B08 4E75                       		rts	
00008B0A                            ; ===========================================================================
00008B0A                            
00008B0A                            DLE_FZ:
00008B0A 7000                       		moveq	#0,d0
00008B0C 1038 F742                  		move.b	(v_dle_routine).w,d0
00008B10 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00008B14 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00008B18                            ; ===========================================================================
00008B18 0000 0000                  off_72D8:	dc.w DLE_FZmain-off_72D8, DLE_FZboss-off_72D8
00008B1C 0000 0000                  		dc.w DLE_FZend-off_72D8, locret_7322-off_72D8
00008B20 0000                       		dc.w DLE_FZend2-off_72D8
00008B22                            ; ===========================================================================
00008B22                            
00008B22                            DLE_FZmain:
00008B22 0C78 2148 F700             		cmpi.w	#$2148,(v_screenposx).w
00008B28 6500                       		bcs.s	loc_72F4
00008B2A 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008B2E 7000                       		moveq	#plcid_FZBoss,d0
00008B30 6100 8C66                  		bsr.w	AddPLC		; load FZ boss patterns
00008B34                            
00008B34                            loc_72F4:
00008B34 60CC                       		bra.s	loc_72C2
00008B36                            ; ===========================================================================
00008B36                            
00008B36                            DLE_FZboss:
00008B36 0C78 2300 F700             		cmpi.w	#$2300,(v_screenposx).w
00008B3C 6500                       		bcs.s	loc_7312
00008B3E 6100 0000                  		bsr.w	FindFreeObj
00008B42 6600                       		bne.s	loc_7312
00008B44 12BC 0000                  		move.b	#id_BossFinal,(a1) ; load FZ boss object
00008B48 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008B4C 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008B52                            
00008B52                            loc_7312:
00008B52 60AE                       		bra.s	loc_72C2
00008B54                            ; ===========================================================================
00008B54                            
00008B54                            DLE_FZend:
00008B54 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
00008B5A 6500                       		bcs.s	loc_7320
00008B5C 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008B60                            
00008B60                            loc_7320:
00008B60 60A0                       		bra.s	loc_72C2
00008B62                            ; ===========================================================================
00008B62                            
00008B62                            locret_7322:
00008B62 4E75                       		rts	
00008B64                            ; ===========================================================================
00008B64                            
00008B64                            DLE_FZend2:
00008B64 609C                       		bra.s	loc_72C2
00008B66                            ; ===========================================================================
00008B66                            ; ---------------------------------------------------------------------------
00008B66                            ; Ending sequence dynamic level events (empty)
00008B66                            ; ---------------------------------------------------------------------------
00008B66                            
00008B66                            DLE_Ending:
00008B66 4E75                       		rts	
00008B66 4E75                       		rts	
00008B68                            
00008B68                            		include	"_incObj\11 Bridge (part 1).asm"
00008B68                            ; ---------------------------------------------------------------------------
00008B68                            ; Object 11 - GHZ bridge
00008B68                            ; ---------------------------------------------------------------------------
00008B68                            
00008B68                            Bridge:
00008B68 7000                       		moveq	#0,d0
00008B6A 1028 0024                  		move.b	obRoutine(a0),d0
00008B6E 323B 0000                  		move.w	Bri_Index(pc,d0.w),d1
00008B72 4EFB 1000                  		jmp	Bri_Index(pc,d1.w)
00008B76                            ; ===========================================================================
00008B76 0000 0000                  Bri_Index:	dc.w Bri_Main-Bri_Index, Bri_Action-Bri_Index
00008B7A 0000 0000                  		dc.w Bri_Platform-Bri_Index, Bri_Delete-Bri_Index
00008B7E 0000 0000                  		dc.w Bri_Delete-Bri_Index, Bri_Display-Bri_Index
00008B82                            ; ===========================================================================
00008B82                            
00008B82                            Bri_Main:	; Routine 0
00008B82 5428 0024                  		addq.b	#2,obRoutine(a0)
00008B86 217C 0000 0000 0004        		move.l	#Map_Bri,obMap(a0)
00008B8E 317C 438E 0002             		move.w	#$438E,obGfx(a0)
00008B94 117C 0004 0001             		move.b	#4,obRender(a0)
00008B9A 317C 0180 0018             		move.w	#$180,obPriority(a0)
00008BA0 117C 0080 0014             		move.b	#$80,obActWid(a0)
00008BA6 3428 000C                  		move.w	obY(a0),d2
00008BAA 3628 0008                  		move.w	obX(a0),d3
00008BAE 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008BB0 45E8 0028                  		lea	obSubtype(a0),a2
00008BB4 7200                       		moveq	#0,d1
00008BB6 1212                       		move.b	(a2),d1		; copy bridge length to d1
00008BB8 14FC 0000                  		move.b	#0,(a2)+	; clear bridge length
00008BBC 3001                       		move.w	d1,d0
00008BBE E248                       		lsr.w	#1,d0
00008BC0 E948                       		lsl.w	#4,d0
00008BC2 9640                       		sub.w	d0,d3		; d3 is position of leftmost log
00008BC4 5501                       		subq.b	#2,d1
00008BC6 6500                       		bcs.s	Bri_Action	; don't make more if bridge has only 1 log
00008BC8                            
00008BC8                            @buildloop:
00008BC8 6100 0000                  		bsr.w	FindFreeObj
00008BCC 6600                       		bne.s	Bri_Action
00008BCE 5228 0028                  		addq.b	#1,obSubtype(a0)
00008BD2 B668 0008                  		cmp.w	obX(a0),d3	; is this log the leftmost one?
00008BD6 6600                       		bne.s	@notleftmost	; if not, branch
00008BD8                            
00008BD8 0643 0010                  		addi.w	#$10,d3
00008BDC 3142 000C                  		move.w	d2,obY(a0)
00008BE0 3142 003C                  		move.w	d2,$3C(a0)
00008BE4 3A08                       		move.w	a0,d5
00008BE6 0445 D000                  		subi.w	#$D000,d5
00008BEA EC4D                       		lsr.w	#6,d5
00008BEC 0245 007F                  		andi.w	#$7F,d5
00008BF0 14C5                       		move.b	d5,(a2)+
00008BF2 5228 0028                  		addq.b	#1,obSubtype(a0)
00008BF6                            
00008BF6                            	@notleftmost:
00008BF6 3A09                       		move.w	a1,d5
00008BF8 0445 D000                  		subi.w	#$D000,d5
00008BFC EC4D                       		lsr.w	#6,d5
00008BFE 0245 007F                  		andi.w	#$7F,d5
00008C02 14C5                       		move.b	d5,(a2)+
00008C04 137C 000A 0024             		move.b	#$A,obRoutine(a1)
00008C0A 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00008C0C 3342 000C                  		move.w	d2,obY(a1)
00008C10 3342 003C                  		move.w	d2,$3C(a1)
00008C14 3343 0008                  		move.w	d3,obX(a1)
00008C18 237C 0000 0000 0004        		move.l	#Map_Bri,obMap(a1)
00008C20 337C 438E 0002             		move.w	#$438E,obGfx(a1)
00008C26 137C 0004 0001             		move.b	#4,obRender(a1)
00008C2C 337C 0180 0018             		move.w	#$180,obPriority(a1)
00008C32 137C 0008 0014             		move.b	#8,obActWid(a1)
00008C38 0643 0010                  		addi.w	#$10,d3
00008C3C 51C9 FF8A                  		dbf	d1,@buildloop ; repeat d1 times (length of bridge)
00008C40                            
00008C40                            Bri_Action:	; Routine 2
00008C40 6100                       		bsr.s	Bri_Solid
00008C42 4A28 003E                  		tst.b	$3E(a0)
00008C46 6700                       		beq.s	@display
00008C48 5928 003E                  		subq.b	#4,$3E(a0)
00008C4C 6100 0000                  		bsr.w	Bri_Bend
00008C50                            
00008C50                            	@display:
00008C50 6100 0000                  		bsr.w	DisplaySprite
00008C54 6000 0000                  		bra.w	Bri_ChkDel
00008C58                            
00008C58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C58                            
00008C58                            
00008C58                            Bri_Solid:
00008C58 7200                       		moveq	#0,d1
00008C5A 1228 0028                  		move.b	obSubtype(a0),d1
00008C5E E749                       		lsl.w	#3,d1
00008C60 3401                       		move.w	d1,d2
00008C62 5041                       		addq.w	#8,d1
00008C64 D442                       		add.w	d2,d2
00008C66 43F8 D000                  		lea	(v_player).w,a1
00008C6A 4A69 0012                  		tst.w	obVelY(a1)
00008C6E 6B00 0000                  		bmi.w	Plat_Exit
00008C72 3029 0008                  		move.w	obX(a1),d0
00008C76 9068 0008                  		sub.w	obX(a0),d0
00008C7A D041                       		add.w	d1,d0
00008C7C 6B00 0000                  		bmi.w	Plat_Exit
00008C80 B042                       		cmp.w	d2,d0
00008C82 6400 0000                  		bcc.w	Plat_Exit
00008C86 6000                       		bra.s	Plat_NoXCheck
00008C88                            ; End of function Bri_Solid
00008C88                            ; End of function Bri_Solid
00008C88                            
00008C88                            ; ---------------------------------------------------------------------------
00008C88                            ; Platform subroutine
00008C88                            ; ---------------------------------------------------------------------------
00008C88                            
00008C88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C88                            
00008C88                            PlatformObject:
00008C88 43F8 D000                  		lea	(v_player).w,a1
00008C8C 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving up/jumping?
00008C90 6B00 0000                  		bmi.w	Plat_Exit	; if yes, branch
00008C94                            
00008C94                            ;		perform x-axis range check
00008C94 3029 0008                  		move.w	obX(a1),d0
00008C98 9068 0008                  		sub.w	obX(a0),d0
00008C9C D041                       		add.w	d1,d0
00008C9E 6B00 0000                  		bmi.w	Plat_Exit
00008CA2 D241                       		add.w	d1,d1
00008CA4 B041                       		cmp.w	d1,d0
00008CA6 6400 0000                  		bhs.w	Plat_Exit
00008CAA                            
00008CAA                            	Plat_NoXCheck:
00008CAA 3028 000C                  		move.w	obY(a0),d0
00008CAE 5140                       		subq.w	#8,d0
00008CB0                            
00008CB0                            Platform3:
00008CB0                            ;		perform y-axis range check
00008CB0 3429 000C                  		move.w	obY(a1),d2
00008CB4 1229 0016                  		move.b	obHeight(a1),d1
00008CB8 4881                       		ext.w	d1
00008CBA D242                       		add.w	d2,d1
00008CBC 5841                       		addq.w	#4,d1
00008CBE 9041                       		sub.w	d1,d0
00008CC0 6200 0000                  		bhi.w	Plat_Exit
00008CC4 0C40 FFF0                  		cmpi.w	#-$10,d0
00008CC8 6500 0000                  		blo.w	Plat_Exit
00008CCC                            
00008CCC 4A38 F7C8                  		tst.b	(f_lockmulti).w
00008CD0 6B00 0000                  		bmi.w	Plat_Exit
00008CD4 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
00008CDA 6400 0000                  		bhs.w	Plat_Exit
00008CDE D440                       		add.w	d0,d2
00008CE0 5642                       		addq.w	#3,d2
00008CE2 3342 000C                  		move.w	d2,obY(a1)
00008CE6 5428 0024                  		addq.b	#2,obRoutine(a0)
00008CEA                            
00008CEA                            loc_74AE:
00008CEA 0829 0003 0022             		btst	#3,obStatus(a1)
00008CF0 6700                       		beq.s	loc_74DC
00008CF2 7000                       		moveq	#0,d0
00008CF4 1029 003D                  		move.b	$3D(a1),d0
00008CF8 ED48                       		lsl.w	#6,d0
00008CFA 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008D00 2440                       		movea.l	d0,a2
00008D02 08AA 0003 0022             		bclr	#3,obStatus(a2)
00008D08 422A 0025                  		clr.b	ob2ndRout(a2)
00008D0C 0C2A 0004 0024             		cmpi.b	#4,obRoutine(a2)
00008D12 6600                       		bne.s	loc_74DC
00008D14 552A 0024                  		subq.b	#2,obRoutine(a2)
00008D18                            
00008D18                            loc_74DC:
00008D18 3008                       		move.w	a0,d0
00008D1A 0440 D000                  		subi.w	#-$3000,d0
00008D1E EC48                       		lsr.w	#6,d0
00008D20 0240 007F                  		andi.w	#$7F,d0
00008D24 1340 003D                  		move.b	d0,$3D(a1)
00008D28 137C 0000 0026             		move.b	#0,obAngle(a1)
00008D2E 337C 0000 0012             		move.w	#0,obVelY(a1)
00008D34 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
00008D3A 0829 0001 0022             		btst	#1,obStatus(a1)
00008D40 6700                       		beq.s	loc_7512
00008D42 2F08                       		move.l	a0,-(sp)
00008D44 2049                       		movea.l	a1,a0
00008D46 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l
00008D4C 205F                       		movea.l	(sp)+,a0
00008D4E                            
00008D4E                            loc_7512:
00008D4E 08E9 0003 0022             		bset	#3,obStatus(a1)
00008D54 08E8 0003 0022             		bset	#3,obStatus(a0)
00008D5A                            
00008D5A                            Plat_Exit:
00008D5A 4E75                       		rts	
00008D5C                            ; End of function PlatformObject
00008D5C                            
00008D5C                            ; ---------------------------------------------------------------------------
00008D5C                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00008D5C                            ; ---------------------------------------------------------------------------
00008D5C                            
00008D5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D5C                            
00008D5C                            
00008D5C                            SlopeObject:
00008D5C 43F8 D000                  		lea	(v_player).w,a1
00008D60 4A69 0012                  		tst.w	obVelY(a1)
00008D64 6B00 FFF4                  		bmi.w	Plat_Exit
00008D68 3029 0008                  		move.w	obX(a1),d0
00008D6C 9068 0008                  		sub.w	obX(a0),d0
00008D70 D041                       		add.w	d1,d0
00008D72 6BE6                       		bmi.s	Plat_Exit
00008D74 D241                       		add.w	d1,d1
00008D76 B041                       		cmp.w	d1,d0
00008D78 64E0                       		bhs.s	Plat_Exit
00008D7A 0828 0000 0001             		btst	#0,obRender(a0)
00008D80 6700                       		beq.s	loc_754A
00008D82 4640                       		not.w	d0
00008D84 D041                       		add.w	d1,d0
00008D86                            
00008D86                            loc_754A:
00008D86 E248                       		lsr.w	#1,d0
00008D88 7600                       		moveq	#0,d3
00008D8A 1632 0000                  		move.b	(a2,d0.w),d3
00008D8E 3028 000C                  		move.w	obY(a0),d0
00008D92 9043                       		sub.w	d3,d0
00008D94 6000 FF1A                  		bra.w	Platform3
00008D98                            ; End of function SlopeObject
00008D98                            
00008D98                            
00008D98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D98                            
00008D98                            
00008D98                            Swing_Solid:
00008D98 43F8 D000                  		lea	(v_player).w,a1
00008D9C 4A69 0012                  		tst.w	obVelY(a1)
00008DA0 6B00 FFB8                  		bmi.w	Plat_Exit
00008DA4 3029 0008                  		move.w	obX(a1),d0
00008DA8 9068 0008                  		sub.w	obX(a0),d0
00008DAC D041                       		add.w	d1,d0
00008DAE 6B00 FFAA                  		bmi.w	Plat_Exit
00008DB2 D241                       		add.w	d1,d1
00008DB4 B041                       		cmp.w	d1,d0
00008DB6 6400 FFA2                  		bhs.w	Plat_Exit
00008DBA 3028 000C                  		move.w	obY(a0),d0
00008DBE 9043                       		sub.w	d3,d0
00008DC0 6000 FEEE                  		bra.w	Platform3
00008DC4                            ; End of function Obj15_Solid
00008DC4                            
00008DC4                            ; ===========================================================================
00008DC4                            
00008DC4                            		include	"_incObj\11 Bridge (part 2).asm"
00008DC4                            
00008DC4                            Bri_Platform:	; Routine 4
00008DC4 6100                       		bsr.s	Bri_WalkOff
00008DC6 6100 0000                  		bsr.w	DisplaySprite
00008DCA 6000 0000                  		bra.w	Bri_ChkDel
00008DCE                            
00008DCE                            ; ---------------------------------------------------------------------------
00008DCE                            ; Subroutine allowing Sonic to walk off a bridge
00008DCE                            ; ---------------------------------------------------------------------------
00008DCE                            
00008DCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008DCE                            
00008DCE                            
00008DCE                            Bri_WalkOff:
00008DCE 7200                       		moveq	#0,d1
00008DD0 1228 0028                  		move.b	obSubtype(a0),d1
00008DD4 E749                       		lsl.w	#3,d1
00008DD6 3401                       		move.w	d1,d2
00008DD8 5041                       		addq.w	#8,d1
00008DDA 6100                       		bsr.s	ExitPlatform2
00008DDC 6400                       		bcc.s	locret_75BE
00008DDE E848                       		lsr.w	#4,d0
00008DE0 1140 003F                  		move.b	d0,$3F(a0)
00008DE4 1028 003E                  		move.b	$3E(a0),d0
00008DE8 0C00 0040                  		cmpi.b	#$40,d0
00008DEC 6700                       		beq.s	loc_75B6
00008DEE 5828 003E                  		addq.b	#4,$3E(a0)
00008DF2                            
00008DF2                            loc_75B6:
00008DF2 6100 0000                  		bsr.w	Bri_Bend
00008DF6 6100 0000                  		bsr.w	Bri_MoveSonic
00008DFA                            
00008DFA                            locret_75BE:
00008DFA 4E75                       		rts	
00008DFC                            ; End of function Bri_WalkOff
00008DFC                            ; End of function Bri_WalkOff
00008DFC                            
00008DFC                            ; ---------------------------------------------------------------------------
00008DFC                            ; Subroutine allowing Sonic to walk or jump off	a platform
00008DFC                            ; ---------------------------------------------------------------------------
00008DFC                            
00008DFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008DFC                            
00008DFC                            
00008DFC                            ExitPlatform:
00008DFC 3401                       		move.w	d1,d2
00008DFE                            
00008DFE                            ExitPlatform2:
00008DFE D442                       		add.w	d2,d2
00008E00 43F8 D000                  		lea	(v_player).w,a1
00008E04 0829 0001 0022             		btst	#1,obStatus(a1)
00008E0A 6600                       		bne.s	loc_75E0
00008E0C 3029 0008                  		move.w	obX(a1),d0
00008E10 9068 0008                  		sub.w	obX(a0),d0
00008E14 D041                       		add.w	d1,d0
00008E16 6B00                       		bmi.s	loc_75E0
00008E18 B042                       		cmp.w	d2,d0
00008E1A 6500                       		blo.s	locret_75F2
00008E1C                            
00008E1C                            loc_75E0:
00008E1C 08A9 0003 0022             		bclr	#3,obStatus(a1)
00008E22 117C 0002 0024             		move.b	#2,obRoutine(a0)
00008E28 08A8 0003 0022             		bclr	#3,obStatus(a0)
00008E2E                            
00008E2E                            locret_75F2:
00008E2E 4E75                       		rts	
00008E30                            ; End of function ExitPlatform
00008E30                            
00008E30                            		include	"_incObj\11 Bridge (part 3).asm"
00008E30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E30                            
00008E30                            
00008E30                            Bri_MoveSonic:
00008E30 7000                       		moveq	#0,d0
00008E32 1028 003F                  		move.b	$3F(a0),d0
00008E36 1030 0029                  		move.b	$29(a0,d0.w),d0
00008E3A ED48                       		lsl.w	#6,d0
00008E3C 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008E42 2440                       		movea.l	d0,a2
00008E44 43F8 D000                  		lea	(v_player).w,a1
00008E48 302A 000C                  		move.w	obY(a2),d0
00008E4C 5140                       		subq.w	#8,d0
00008E4E 7200                       		moveq	#0,d1
00008E50 1229 0016                  		move.b	obHeight(a1),d1
00008E54 9041                       		sub.w	d1,d0
00008E56 3340 000C                  		move.w	d0,obY(a1)	; change Sonic's position on y-axis
00008E5A 4E75                       		rts	
00008E5C                            ; End of function Bri_MoveSonic
00008E5C                            
00008E5C                            
00008E5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E5C                            
00008E5C                            
00008E5C                            Bri_Bend:
00008E5C 1028 003E                  		move.b	$3E(a0),d0
00008E60 6100 AEC6                  		bsr.w	CalcSine
00008E64 3800                       		move.w	d0,d4
00008E66 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00008E6C 7000                       		moveq	#0,d0
00008E6E 1028 0028                  		move.b	obSubtype(a0),d0
00008E72 E948                       		lsl.w	#4,d0
00008E74 7600                       		moveq	#0,d3
00008E76 1628 003F                  		move.b	$3F(a0),d3
00008E7A 3403                       		move.w	d3,d2
00008E7C D640                       		add.w	d0,d3
00008E7E 7A00                       		moveq	#0,d5
00008E80 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00008E86 1A35 3000                  		move.b	(a5,d3.w),d5
00008E8A 0243 000F                  		andi.w	#$F,d3
00008E8E E94B                       		lsl.w	#4,d3
00008E90 47F4 3000                  		lea	(a4,d3.w),a3
00008E94 45E8 0029                  		lea	$29(a0),a2
00008E98                            
00008E98                            loc_765C:
00008E98 7000                       		moveq	#0,d0
00008E9A 101A                       		move.b	(a2)+,d0
00008E9C ED48                       		lsl.w	#6,d0
00008E9E 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008EA4 2240                       		movea.l	d0,a1
00008EA6 7000                       		moveq	#0,d0
00008EA8 101B                       		move.b	(a3)+,d0
00008EAA 5240                       		addq.w	#1,d0
00008EAC C0C5                       		mulu.w	d5,d0
00008EAE C0C4                       		mulu.w	d4,d0
00008EB0 4840                       		swap	d0
00008EB2 D069 003C                  		add.w	$3C(a1),d0
00008EB6 3340 000C                  		move.w	d0,obY(a1)
00008EBA 51CA FFDC                  		dbf	d2,loc_765C
00008EBE 7000                       		moveq	#0,d0
00008EC0 1028 0028                  		move.b	obSubtype(a0),d0
00008EC4 7600                       		moveq	#0,d3
00008EC6 1628 003F                  		move.b	$3F(a0),d3
00008ECA 5203                       		addq.b	#1,d3
00008ECC 9600                       		sub.b	d0,d3
00008ECE 4403                       		neg.b	d3
00008ED0 6B00                       		bmi.s	locret_76CA
00008ED2 3403                       		move.w	d3,d2
00008ED4 E94B                       		lsl.w	#4,d3
00008ED6 47F4 3000                  		lea	(a4,d3.w),a3
00008EDA D6C2                       		adda.w	d2,a3
00008EDC 5342                       		subq.w	#1,d2
00008EDE 6500                       		bcs.s	locret_76CA
00008EE0                            
00008EE0                            loc_76A4:
00008EE0 7000                       		moveq	#0,d0
00008EE2 101A                       		move.b	(a2)+,d0
00008EE4 ED48                       		lsl.w	#6,d0
00008EE6 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008EEC 2240                       		movea.l	d0,a1
00008EEE 7000                       		moveq	#0,d0
00008EF0 1023                       		move.b	-(a3),d0
00008EF2 5240                       		addq.w	#1,d0
00008EF4 C0C5                       		mulu.w	d5,d0
00008EF6 C0C4                       		mulu.w	d4,d0
00008EF8 4840                       		swap	d0
00008EFA D069 003C                  		add.w	$3C(a1),d0
00008EFE 3340 000C                  		move.w	d0,obY(a1)
00008F02 51CA FFDC                  		dbf	d2,loc_76A4
00008F06                            
00008F06                            locret_76CA:
00008F06 4E75                       		rts	
00008F08                            ; End of function Bri_Bend
00008F08                            
00008F08                            ; ===========================================================================
00008F08                            ; ---------------------------------------------------------------------------
00008F08                            ; GHZ bridge-bending data
00008F08                            ; (Defines how the bridge bends	when Sonic walks across	it)
00008F08                            ; ---------------------------------------------------------------------------
00008F08                            Obj11_BendData:	incbin	"misc\ghzbend1.bin"
00009018                            		even
00009018                            Obj11_BendData2:incbin	"misc\ghzbend2.bin"
00009118                            		even
00009118                            
00009118                            ; ===========================================================================
00009118                            
00009118                            Bri_ChkDel:
00009136 4E75                       		rts	
00009138                            ; ===========================================================================
00009138                            
00009138                            @deletebridge:
00009138 7400                       		moveq	#0,d2
0000913A 45E8 0028                  		lea	obSubtype(a0),a2 ; load bridge length
0000913E 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00009140 5302                       		subq.b	#1,d2		; subtract 1
00009142 6500                       		bcs.s	@delparent
00009144                            
00009144                            	@loop:
00009144 7000                       		moveq	#0,d0
00009146 101A                       		move.b	(a2)+,d0
00009148 ED48                       		lsl.w	#6,d0
0000914A 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009150 2240                       		movea.l	d0,a1
00009152 B048                       		cmp.w	a0,d0
00009154 6700                       		beq.s	@skipdel
00009156 6100 0000                  		bsr.w	DeleteChild
0000915A                            
0000915A                            	@skipdel:
0000915A 51CA FFE8                  		dbf	d2,@loop ; repeat d2 times (bridge length)
0000915E                            
0000915E                            @delparent:
0000915E 6100 0000                  		bsr.w	DeleteObject
00009162 4E75                       		rts	
00009164                            ; ===========================================================================
00009164                            
00009164                            Bri_Delete:	; Routine 6, 8
00009164 6100 0000                  		bsr.w	DeleteObject
00009168 4E75                       		rts	
0000916A                            ; ===========================================================================
0000916A                            
0000916A                            Bri_Display:	; Routine $A
0000916A 6100 0000                  		bsr.w	DisplaySprite
0000916E 4E75                       		rts	
0000916E 4E75                       		rts	
00009170                            Map_Bri:	include	"_maps\Bridge.asm"
00009170                            ; ---------------------------------------------------------------------------
00009170                            ; Sprite mappings - GHZ	bridge
00009170                            ; ---------------------------------------------------------------------------
00009170                            Map_Bri_internal:
00009170 0000                       		dc.w M_Bri_Log-Map_Bri_internal
00009172 0000                       		dc.w M_Bri_Stump-Map_Bri_internal
00009174 0000                       		dc.w M_Bri_Rope-Map_Bri_internal
00009176 01                         M_Bri_Log:	dc.b 1
00009177 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; log
0000917C 02                         M_Bri_Stump:	dc.b 2
0000917D F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0	; stump & rope
00009182 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00009187 01                         M_Bri_Rope:	dc.b 1
00009188 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8	; rope only
0000918E 00                         		even
0000918E 00                         		even
0000918E                            
0000918E                            		include	"_incObj\15 Swinging Platforms (part 1).asm"
0000918E                            ; ---------------------------------------------------------------------------
0000918E                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
0000918E                            ;	    - spiked ball on a chain (SBZ)
0000918E                            ; ---------------------------------------------------------------------------
0000918E                            
0000918E                            SwingingPlatform:
0000918E 7000                       		moveq	#0,d0
00009190 1028 0024                  		move.b	obRoutine(a0),d0
00009194 323B 0000                  		move.w	Swing_Index(pc,d0.w),d1
00009198 4EFB 1000                  		jmp	Swing_Index(pc,d1.w)
0000919C                            ; ===========================================================================
0000919C 0000 0000                  Swing_Index:	dc.w Swing_Main-Swing_Index, Swing_SetSolid-Swing_Index
000091A0 0000 0000                  		dc.w Swing_Action2-Swing_Index,	Swing_Delete-Swing_Index
000091A4 0000 0000                  		dc.w Swing_Delete-Swing_Index, Swing_Display-Swing_Index
000091A8 0000                       		dc.w Swing_Action-Swing_Index
000091AA                            
000091AA =0000003A                  swing_origX:	equ $3A		; original x-axis position
000091AA =00000038                  swing_origY:	equ $38		; original y-axis position
000091AA                            ; ===========================================================================
000091AA                            
000091AA                            Swing_Main:	; Routine 0
000091AA 5428 0024                  		addq.b	#2,obRoutine(a0)
000091AE 217C 0000 0000 0004        		move.l	#Map_Swing_GHZ,obMap(a0) ; GHZ and MZ specific code
000091B6 317C 4380 0002             		move.w	#$4380,obGfx(a0)
000091BC 117C 0004 0001             		move.b	#4,obRender(a0)
000091C2 317C 0180 0018             		move.w	#$180,obPriority(a0)
000091C8 117C 0018 0014             		move.b	#$18,obActWid(a0)
000091CE 117C 0008 0016             		move.b	#8,obHeight(a0)
000091D4 3168 000C 0038             		move.w	obY(a0),swing_origY(a0)
000091DA 3168 0008 003A             		move.w	obX(a0),swing_origX(a0)
000091E0 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
000091E6 6600                       		bne.s	@notSLZ
000091E8                            
000091E8 217C 0000 0000 0004        		move.l	#Map_Swing_SLZ,obMap(a0) ; SLZ specific code
000091F0 317C 43DC 0002             		move.w	#$43DC,obGfx(a0)
000091F6 117C 0020 0014             		move.b	#$20,obActWid(a0)
000091FC 117C 0010 0016             		move.b	#$10,obHeight(a0)
00009202 117C 0099 0020             		move.b	#$99,obColType(a0)
00009208                            
00009208                            	@notSLZ:
00009208 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
0000920E 6600                       		bne.s	@length
00009210                            
00009210 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0) ; SBZ specific code
00009218 317C 0391 0002             		move.w	#$391,obGfx(a0)
0000921E 117C 0018 0014             		move.b	#$18,obActWid(a0)
00009224 117C 0018 0016             		move.b	#$18,obHeight(a0)
0000922A 117C 0086 0020             		move.b	#$86,obColType(a0)
00009230 117C 000C 0024             		move.b	#$C,obRoutine(a0) ; goto Swing_Action next
00009236                            
00009236                            @length:
00009236 1810                       		move.b	0(a0),d4
00009238 7200                       		moveq	#0,d1
0000923A 45E8 0028                  		lea	obSubtype(a0),a2 ; move chain length to a2
0000923E 1212                       		move.b	(a2),d1		; move a2 to d1
00009240 3F01                       		move.w	d1,-(sp)
00009242 0241 000F                  		andi.w	#$F,d1
00009246 14FC 0000                  		move.b	#0,(a2)+
0000924A 3601                       		move.w	d1,d3
0000924C E94B                       		lsl.w	#4,d3
0000924E 5003                       		addq.b	#8,d3
00009250 1143 003C                  		move.b	d3,$3C(a0)
00009254 5103                       		subq.b	#8,d3
00009256 4A28 001A                  		tst.b	obFrame(a0)
0000925A 6700                       		beq.s	@makechain
0000925C 5003                       		addq.b	#8,d3
0000925E 5341                       		subq.w	#1,d1
00009260                            
00009260                            @makechain:
00009260 6100 0000                  		bsr.w	FindFreeObj
00009264 6600                       		bne.s	@fail
00009266 5228 0028                  		addq.b	#1,obSubtype(a0)
0000926A 3A09                       		move.w	a1,d5
0000926C 0445 D000                  		subi.w	#$D000,d5
00009270 EC4D                       		lsr.w	#6,d5
00009272 0245 007F                  		andi.w	#$7F,d5
00009276 14C5                       		move.b	d5,(a2)+
00009278 137C 000A 0024             		move.b	#$A,obRoutine(a1) ; goto Swing_Display next
0000927E 1284                       		move.b	d4,0(a1)	; load swinging	object
00009280 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00009286 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000928C 08A9 0006 0002             		bclr	#6,obGfx(a1)
00009292 137C 0004 0001             		move.b	#4,obRender(a1)
00009298 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000929E 137C 0008 0014             		move.b	#8,obActWid(a1)
000092A4 137C 0001 001A             		move.b	#1,obFrame(a1)
000092AA 1343 003C                  		move.b	d3,$3C(a1)
000092AE 0403 0010                  		subi.b	#$10,d3
000092B2 6400                       		bcc.s	@notanchor
000092B4 137C 0002 001A             		move.b	#2,obFrame(a1)
000092BA 337C 0180 0018             		move.w	#$180,obPriority(a1)
000092C0 08E9 0006 0002             		bset	#6,obGfx(a1)
000092C6                            
000092C6                            	@notanchor:
000092C6 51C9 FF98                  		dbf	d1,@makechain ; repeat d1 times (chain length)
000092CA                            
000092CA                            	@fail:
000092CA 3A08                       		move.w	a0,d5
000092CC 0445 D000                  		subi.w	#$D000,d5
000092D0 EC4D                       		lsr.w	#6,d5
000092D2 0245 007F                  		andi.w	#$7F,d5
000092D6 14C5                       		move.b	d5,(a2)+
000092D8 317C 4080 0026             		move.w	#$4080,obAngle(a0)
000092DE 317C FE00 003E             		move.w	#-$200,$3E(a0)
000092E4 321F                       		move.w	(sp)+,d1
000092E6 0801 0004                  		btst	#4,d1		; is object type $1X ?
000092EA 6700                       		beq.s	@not1X	; if not, branch
000092EC 217C 0000 0000 0004        		move.l	#Map_GBall,obMap(a0) ; use GHZ ball mappings
000092F4 317C 43AA 0002             		move.w	#$43AA,obGfx(a0)
000092FA 117C 0001 001A             		move.b	#1,obFrame(a0)
00009300 317C 0100 0018             		move.w	#$100,obPriority(a0)
00009306 117C 0081 0020             		move.b	#$81,obColType(a0) ; make object hurt when touched
0000930C                            
0000930C                            	@not1X:
0000930C 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; is zone SBZ?
00009312 6700                       		beq.s	Swing_Action	; if yes, branch
00009314                            
00009314                            Swing_SetSolid:	; Routine 2
00009314 7200                       		moveq	#0,d1
00009316 1228 0014                  		move.b	obActWid(a0),d1
0000931A 7600                       		moveq	#0,d3
0000931C 1628 0016                  		move.b	obHeight(a0),d3
00009320 6100 FA76                  		bsr.w	Swing_Solid
00009324                            
00009324                            Swing_Action:	; Routine $C
00009324 6100 0000                  		bsr.w	Swing_Move
00009328 6100 0000                  		bsr.w	DisplaySprite
0000932C 6000 0000                  		bra.w	Swing_ChkDel
00009330                            ; ===========================================================================
00009330                            
00009330                            Swing_Action2:	; Routine 4
00009330 7200                       		moveq	#0,d1
00009332 1228 0014                  		move.b	obActWid(a0),d1
00009336 6100 FAC4                  		bsr.w	ExitPlatform
0000933A 3F28 0008                  		move.w	obX(a0),-(sp)
0000933E 6100 0000                  		bsr.w	Swing_Move
00009342 341F                       		move.w	(sp)+,d2
00009344 7600                       		moveq	#0,d3
00009346 1628 0016                  		move.b	obHeight(a0),d3
0000934A 5203                       		addq.b	#1,d3
0000934C 6100 0000                  		bsr.w	MvSonicOnPtfm
00009350 6100 0000                  		bsr.w	DisplaySprite
00009354 6000 0000                  		bra.w	Swing_ChkDel
00009358                            
00009358 4E75                       		rts
00009358 4E75                       		rts
0000935A                            
0000935A                            ; ---------------------------------------------------------------------------
0000935A                            ; Subroutine to	change Sonic's position with a platform
0000935A                            ; ---------------------------------------------------------------------------
0000935A                            
0000935A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000935A                            
0000935A                            
0000935A                            MvSonicOnPtfm:
0000935A 43F8 D000                  		lea	(v_player).w,a1
0000935E 3028 000C                  		move.w	obY(a0),d0
00009362 9043                       		sub.w	d3,d0
00009364 6000                       		bra.s	MvSonic2
00009366                            ; End of function MvSonicOnPtfm
00009366                            
00009366                            ; ---------------------------------------------------------------------------
00009366                            ; Subroutine to	change Sonic's position with a platform
00009366                            ; ---------------------------------------------------------------------------
00009366                            
00009366                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009366                            
00009366                            
00009366                            MvSonicOnPtfm2:
00009366 43F8 D000                  		lea	(v_player).w,a1
0000936A 3028 000C                  		move.w	obY(a0),d0
0000936E 0440 0009                  		subi.w	#9,d0
00009372                            
00009372                            MvSonic2:
00009372 4A38 F7C8                  		tst.b	(f_lockmulti).w
00009376 6B00                       		bmi.s	locret_7B62
00009378 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000937E 6400                       		bhs.s	locret_7B62
00009380 4A78 FE08                  		tst.w	(v_debuguse).w
00009384 6600                       		bne.s	locret_7B62
00009386 7200                       		moveq	#0,d1
00009388 1229 0016                  		move.b	obHeight(a1),d1
0000938C 9041                       		sub.w	d1,d0
0000938E 3340 000C                  		move.w	d0,obY(a1)
00009392 9468 0008                  		sub.w	obX(a0),d2
00009396 9569 0008                  		sub.w	d2,obX(a1)
0000939A                            
0000939A                            locret_7B62:
0000939A 4E75                       		rts	
0000939C                            ; End of function MvSonicOnPtfm2
0000939C                            
0000939C                            		include	"_incObj\15 Swinging Platforms (part 2).asm"
0000939C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000939C                            
0000939C                            
0000939C                            Swing_Move:
0000939C 1038 FE78                  		move.b	(v_oscillate+$1A).w,d0
000093A0 323C 0080                  		move.w	#$80,d1
000093A4 0828 0000 0022             		btst	#0,obStatus(a0)
000093AA 6700                       		beq.s	loc_7B78
000093AC 4440                       		neg.w	d0
000093AE D041                       		add.w	d1,d0
000093B0                            
000093B0                            loc_7B78:
000093B0 6000                       		bra.s	Swing_Move2
000093B2                            ; End of function Swing_Move
000093B2                            
000093B2                            
000093B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000093B2                            
000093B2                            
000093B2                            Obj48_Move:
000093B2 4A28 003D                  		tst.b	$3D(a0)
000093B6 6600                       		bne.s	loc_7B9C
000093B8 3028 003E                  		move.w	$3E(a0),d0
000093BC 5040                       		addq.w	#8,d0
000093BE 3140 003E                  		move.w	d0,$3E(a0)
000093C2 D168 0026                  		add.w	d0,obAngle(a0)
000093C6 0C40 0200                  		cmpi.w	#$200,d0
000093CA 6600                       		bne.s	loc_7BB6
000093CC 117C 0001 003D             		move.b	#1,$3D(a0)
000093D2 6000                       		bra.s	loc_7BB6
000093D4                            ; ===========================================================================
000093D4                            
000093D4                            loc_7B9C:
000093D4 3028 003E                  		move.w	$3E(a0),d0
000093D8 5140                       		subq.w	#8,d0
000093DA 3140 003E                  		move.w	d0,$3E(a0)
000093DE D168 0026                  		add.w	d0,obAngle(a0)
000093E2 0C40 FE00                  		cmpi.w	#-$200,d0
000093E6 6600                       		bne.s	loc_7BB6
000093E8 117C 0000 003D             		move.b	#0,$3D(a0)
000093EE                            
000093EE                            loc_7BB6:
000093EE 1028 0026                  		move.b	obAngle(a0),d0
000093F2                            ; End of function Obj48_Move
000093F2                            
000093F2                            
000093F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000093F2                            
000093F2                            
000093F2                            Swing_Move2:
000093F2 6100 A934                  		bsr.w	CalcSine
000093F6 3428 0038                  		move.w	$38(a0),d2
000093FA 3628 003A                  		move.w	$3A(a0),d3
000093FE 45E8 0028                  		lea	obSubtype(a0),a2
00009402 7C00                       		moveq	#0,d6
00009404 1C1A                       		move.b	(a2)+,d6
00009406                            
00009406                            loc_7BCE:
00009406 7800                       		moveq	#0,d4
00009408 181A                       		move.b	(a2)+,d4
0000940A ED4C                       		lsl.w	#6,d4
0000940C 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
00009412 2244                       		movea.l	d4,a1
00009414 7800                       		moveq	#0,d4
00009416 1829 003C                  		move.b	$3C(a1),d4
0000941A 2A04                       		move.l	d4,d5
0000941C C9C0                       		muls.w	d0,d4
0000941E E084                       		asr.l	#8,d4
00009420 CBC1                       		muls.w	d1,d5
00009422 E085                       		asr.l	#8,d5
00009424 D842                       		add.w	d2,d4
00009426 DA43                       		add.w	d3,d5
00009428 3344 000C                  		move.w	d4,obY(a1)
0000942C 3345 0008                  		move.w	d5,obX(a1)
00009430 51CE FFD4                  		dbf	d6,loc_7BCE
00009434 4E75                       		rts	
00009436                            ; End of function Swing_Move2
00009436                            
00009436                            ; ===========================================================================
00009436                            
00009436                            Swing_ChkDel:
00009454 4E75                       		rts	
00009456                            ; ===========================================================================
00009456                            
00009456                            Swing_DelAll:
00009456 7400                       		moveq	#0,d2
00009458 45E8 0028                  		lea	obSubtype(a0),a2
0000945C 141A                       		move.b	(a2)+,d2
0000945E                            
0000945E                            Swing_DelLoop:
0000945E 7000                       		moveq	#0,d0
00009460 101A                       		move.b	(a2)+,d0
00009462 ED48                       		lsl.w	#6,d0
00009464 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
0000946A 2240                       		movea.l	d0,a1
0000946C 6100 0000                  		bsr.w	DeleteChild
00009470 51CA FFEC                  		dbf	d2,Swing_DelLoop ; repeat for length of	chain
00009474 4E75                       		rts	
00009476                            ; ===========================================================================
00009476                            
00009476                            Swing_Delete:	; Routine 6, 8
00009476 6100 0000                  		bsr.w	DeleteObject
0000947A 4E75                       		rts	
0000947C                            ; ===========================================================================
0000947C                            
0000947C                            Swing_Display:	; Routine $A
0000947C 6000 0000                  		bra.w	DisplaySprite
0000947C 6000 0000                  		bra.w	DisplaySprite
00009480                            Map_Swing_GHZ:	include	"_maps\Swinging Platforms (GHZ).asm"
00009480                            ; ---------------------------------------------------------------------------
00009480                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00009480                            ; ---------------------------------------------------------------------------
00009480                            Map_Swing_GHZ_internal:
00009480 0000                       		dc.w @block-Map_Swing_GHZ_internal
00009482 0000                       		dc.w @chain-Map_Swing_GHZ_internal
00009484 0000                       		dc.w @anchor-Map_Swing_GHZ_internal
00009486 02                         @block:		dc.b 2
00009487 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
0000948C F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00009491 01                         @chain:		dc.b 1
00009492 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00009497 01                         @anchor:	dc.b 1
00009498 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000949E 00                         		even
0000949E 00                         		even
0000949E                            Map_Swing_SLZ:	include	"_maps\Swinging Platforms (SLZ).asm"
0000949E                            ; ---------------------------------------------------------------------------
0000949E                            ; Sprite mappings - SLZ	swinging platforms
0000949E                            ; ---------------------------------------------------------------------------
0000949E                            Map_Swing_SLZ_internal:
0000949E 0000                       		dc.w @block-Map_Swing_SLZ_internal
000094A0 0000                       		dc.w @chain-Map_Swing_SLZ_internal
000094A2 0000                       		dc.w @anchor-Map_Swing_SLZ_internal
000094A4 08                         @block:		dc.b 8
000094A5 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
000094AA F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
000094AF F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
000094B4 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
000094B9 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
000094BE 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
000094C3 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
000094C8 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
000094CD 01                         @chain:		dc.b 1
000094CE F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
000094D3 01                         @anchor:	dc.b 1
000094D4 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
000094DA 00                         		even
000094DA 00                         		even
000094DA                            		include	"_incObj\17 Spiked Pole Helix.asm"
000094DA                            ; ---------------------------------------------------------------------------
000094DA                            ; Object 17 - helix of spikes on a pole	(GHZ)
000094DA                            ; ---------------------------------------------------------------------------
000094DA                            
000094DA                            Helix:
000094DA 7000                       		moveq	#0,d0
000094DC 1028 0024                  		move.b	obRoutine(a0),d0
000094E0 323B 0000                  		move.w	Hel_Index(pc,d0.w),d1
000094E4 4EFB 1000                  		jmp	Hel_Index(pc,d1.w)
000094E8                            ; ===========================================================================
000094E8 0000                       Hel_Index:	dc.w Hel_Main-Hel_Index
000094EA 0000                       		dc.w Hel_Action-Hel_Index
000094EC 0000                       		dc.w Hel_Action-Hel_Index
000094EE 0000                       		dc.w Hel_Delete-Hel_Index
000094F0 0000                       		dc.w Hel_Display-Hel_Index
000094F2                            
000094F2 =0000003E                  hel_frame:	equ $3E		; start frame (different for each spike)
000094F2                            
000094F2                            ;		$29-38 are used for child object addresses
000094F2                            ; ===========================================================================
000094F2                            
000094F2                            Hel_Main:	; Routine 0
000094F2 5428 0024                  		addq.b	#2,obRoutine(a0)
000094F6 217C 0000 0000 0004        		move.l	#Map_Hel,obMap(a0)
000094FE 317C 4398 0002             		move.w	#$4398,obGfx(a0)
00009504 117C 0007 0022             		move.b	#7,obStatus(a0)
0000950A 117C 0004 0001             		move.b	#4,obRender(a0)
00009510 317C 0180 0018             		move.w	#$180,obPriority(a0)
00009516 117C 0008 0014             		move.b	#8,obActWid(a0)
0000951C 3428 000C                  		move.w	obY(a0),d2
00009520 3628 0008                  		move.w	obX(a0),d3
00009524 1810                       		move.b	0(a0),d4
00009526 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
0000952A 7200                       		moveq	#0,d1
0000952C 1212                       		move.b	(a2),d1		; move helix length to d1
0000952E 14FC 0000                  		move.b	#0,(a2)+	; clear subtype
00009532 3001                       		move.w	d1,d0
00009534 E248                       		lsr.w	#1,d0
00009536 E948                       		lsl.w	#4,d0
00009538 9640                       		sub.w	d0,d3		; d3 is x-axis position of leftmost spike
0000953A 5501                       		subq.b	#2,d1
0000953C 6500                       		bcs.s	Hel_Action	; skip to action if length is only 1
0000953E 7C00                       		moveq	#0,d6
00009540                            
00009540                            Hel_Build:
00009540 6100 0000                  		bsr.w	FindFreeObj
00009544 6600                       		bne.s	Hel_Action
00009546 5228 0028                  		addq.b	#1,obSubtype(a0)
0000954A 3A09                       		move.w	a1,d5
0000954C 0445 D000                  		subi.w	#$D000,d5
00009550 EC4D                       		lsr.w	#6,d5
00009552 0245 007F                  		andi.w	#$7F,d5
00009556 14C5                       		move.b	d5,(a2)+	; copy child address to parent RAM
00009558 137C 0008 0024             		move.b	#8,obRoutine(a1)
0000955E 1284                       		move.b	d4,0(a1)
00009560 3342 000C                  		move.w	d2,ObY(a1)
00009564 3343 0008                  		move.w	d3,obX(a1)
00009568 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
0000956E 337C 4398 0002             		move.w	#$4398,obGfx(a1)
00009574 137C 0004 0001             		move.b	#4,obRender(a1)
0000957A 337C 0180 0018             		move.w	#$180,obPriority(a1)
00009580 137C 0008 0014             		move.b	#8,obActWid(a1)
00009586 1346 003E                  		move.b	d6,hel_frame(a1)
0000958A 5206                       		addq.b	#1,d6
0000958C 0206 0007                  		andi.b	#7,d6
00009590 0643 0010                  		addi.w	#$10,d3
00009594 B668 0008                  		cmp.w	obX(a0),d3	; is this spike in the centre?
00009598 6600                       		bne.s	Hel_NotCentre	; if not, branch
0000959A                            
0000959A 1146 003E                  		move.b	d6,hel_frame(a0) ; set parent spike frame
0000959E 5206                       		addq.b	#1,d6
000095A0 0206 0007                  		andi.b	#7,d6
000095A4 0643 0010                  		addi.w	#$10,d3		; skip to next spike
000095A8 5228 0028                  		addq.b	#1,obSubtype(a0)
000095AC                            
000095AC                            	Hel_NotCentre:
000095AC 51C9 FF92                  		dbf	d1,Hel_Build ; repeat d1 times (helix length)
000095B0                            
000095B0                            Hel_Action:	; Routine 2, 4
000095B0 6100 0000                  		bsr.w	Hel_RotateSpikes
000095B4 6100 0000                  		bsr.w	DisplaySprite
000095B8 6000 0000                  		bra.w	Hel_ChkDel
000095BC                            
000095BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000095BC                            
000095BC                            
000095BC                            Hel_RotateSpikes:
000095BC 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
000095C0 117C 0000 0020             		move.b	#0,obColType(a0) ; make object harmless
000095C6 D028 003E                  		add.b	hel_frame(a0),d0
000095CA 0200 0007                  		andi.b	#7,d0
000095CE 1140 001A                  		move.b	d0,obFrame(a0)	; change current frame
000095D2 6600                       		bne.s	locret_7DA6
000095D4 117C 0084 0020             		move.b	#$84,obColType(a0) ; make object harmful
000095DA                            
000095DA                            locret_7DA6:
000095DA 4E75                       		rts	
000095DC                            ; End of function Hel_RotateSpikes
000095DC                            
000095DC                            ; ===========================================================================
000095DC                            
000095DC                            Hel_ChkDel:
000095FA 4E75                       		rts	
000095FC                            ; ===========================================================================
000095FC                            
000095FC                            Hel_DelAll:
000095FC 7400                       		moveq	#0,d2
000095FE 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
00009602 141A                       		move.b	(a2)+,d2	; move helix length to d2
00009604 5502                       		subq.b	#2,d2
00009606 6500                       		bcs.s	Hel_Delete
00009608                            
00009608                            	Hel_DelLoop:
00009608 7000                       		moveq	#0,d0
0000960A 101A                       		move.b	(a2)+,d0
0000960C ED48                       		lsl.w	#6,d0
0000960E 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009614 2240                       		movea.l	d0,a1		; get child address
00009616 6100 0000                  		bsr.w	DeleteChild	; delete object
0000961A 51CA FFEC                  		dbf	d2,Hel_DelLoop ; repeat d2 times (helix length)
0000961E                            
0000961E                            Hel_Delete:	; Routine 6
0000961E 6100 0000                  		bsr.w	DeleteObject
00009622 4E75                       		rts	
00009624                            ; ===========================================================================
00009624                            
00009624                            Hel_Display:	; Routine 8
00009624 6100 FF96                  		bsr.w	Hel_RotateSpikes
00009628 6000 0000                  		bra.w	DisplaySprite
00009628 6000 0000                  		bra.w	DisplaySprite
0000962C                            Map_Hel:	include	"_maps\Spiked Pole Helix.asm"
0000962C                            ; ---------------------------------------------------------------------------
0000962C                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000962C                            ; ---------------------------------------------------------------------------
0000962C                            Map_Hel_internal:
0000962C 0000                       		dc.w byte_7E08-Map_Hel_internal
0000962E 0000                       		dc.w byte_7E0E-Map_Hel_internal
00009630 0000                       		dc.w byte_7E14-Map_Hel_internal
00009632 0000                       		dc.w byte_7E1A-Map_Hel_internal
00009634 0000                       		dc.w byte_7E20-Map_Hel_internal
00009636 0000                       		dc.w byte_7E26-Map_Hel_internal
00009638 0000                       		dc.w byte_7E2E-Map_Hel_internal
0000963A 0000                       		dc.w byte_7E2C-Map_Hel_internal
0000963C 01                         byte_7E08:	dc.b 1
0000963D F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC	; points straight up (harmful)
00009642 01                         byte_7E0E:	dc.b 1
00009643 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8	; 45 degree
00009648 01                         byte_7E14:	dc.b 1
00009649 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8	; 90 degree
0000964E 01                         byte_7E1A:	dc.b 1
0000964F FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8	; 45 degree
00009654 01                         byte_7E20:	dc.b 1
00009655 0001 000E FC               		dc.b 0,	1, 0, $E, $FC	; straight down
0000965A 01                         byte_7E26:	dc.b 1
0000965B 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD	; 45 degree
00009660 01                         byte_7E2C:	dc.b 1
00009661 F4                         		dc.b $F4
00009662                            byte_7E2E:	; reads the 0 below	; not visible
00009662 0000 11FD                  		dc.b 0, 0,	$11, $FD ; 45 degree
00009666                            		even
00009666                            		even
00009666                            		include	"_incObj\18 Platforms.asm"
00009666                            ; ---------------------------------------------------------------------------
00009666                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00009666                            ; ---------------------------------------------------------------------------
00009666                            
00009666                            BasicPlatform:
00009666 7000                       		moveq	#0,d0
00009668 1028 0024                  		move.b	obRoutine(a0),d0
0000966C 323B 0000                  		move.w	Plat_Index(pc,d0.w),d1
00009670 4EFB 1000                  		jmp	Plat_Index(pc,d1.w)
00009674                            ; ===========================================================================
00009674 0000                       Plat_Index:	dc.w Plat_Main-Plat_Index
00009676 0000                       		dc.w Plat_Solid-Plat_Index
00009678 0000                       		dc.w Plat_Action2-Plat_Index
0000967A 0000                       		dc.w Plat_Delete-Plat_Index
0000967C 0000                       		dc.w Plat_Action-Plat_Index
0000967E                            ; ===========================================================================
0000967E                            
0000967E                            Plat_Main:	; Routine 0
0000967E 5428 0024                  		addq.b	#2,obRoutine(a0)
00009682 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009688 217C 0000 0000 0004        		move.l	#Map_Plat_GHZ,obMap(a0)
00009690 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009696 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; check if level is SYZ
0000969C 6600                       		bne.s	@notSYZ
0000969E                            
0000969E 217C 0000 0000 0004        		move.l	#Map_Plat_SYZ,obMap(a0) ; SYZ specific code
000096A6 117C 0020 0014             		move.b	#$20,obActWid(a0)
000096AC                            
000096AC                            	@notSYZ:
000096AC 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
000096B2 6600                       		bne.s	@notSLZ
000096B4 217C 0000 0000 0004        		move.l	#Map_Plat_SLZ,obMap(a0) ; SLZ specific code
000096BC 117C 0020 0014             		move.b	#$20,obActWid(a0)
000096C2 317C 4000 0002             		move.w	#$4000,obGfx(a0)
000096C8 117C 0003 0028             		move.b	#3,obSubtype(a0)
000096CE                            
000096CE                            	@notSLZ:
000096CE 117C 0004 0001             		move.b	#4,obRender(a0)
000096D4 317C 0200 0018             		move.w	#$200,obPriority(a0)
000096DA 3168 000C 002C             		move.w	obY(a0),$2C(a0)
000096E0 3168 000C 0034             		move.w	obY(a0),$34(a0)
000096E6 3168 0008 0032             		move.w	obX(a0),$32(a0)
000096EC 317C 0080 0026             		move.w	#$80,obAngle(a0)
000096F2 7200                       		moveq	#0,d1
000096F4 1028 0028                  		move.b	obSubtype(a0),d0
000096F8 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
000096FC 6600                       		bne.s	@setframe	; if not, branch
000096FE 5201                       		addq.b	#1,d1		; use frame #1
00009700 117C 0020 0014             		move.b	#$20,obActWid(a0) ; set width
00009706                            
00009706                            	@setframe:
00009706 1141 001A                  		move.b	d1,obFrame(a0)	; set frame to d1
0000970A                            
0000970A                            Plat_Solid:	; Routine 2
0000970A 4A28 0038                  		tst.b	$38(a0)
0000970E 6700                       		beq.s	loc_7EE0
00009710 5928 0038                  		subq.b	#4,$38(a0)
00009714                            
00009714                            	loc_7EE0:
00009714 7200                       		moveq	#0,d1
00009716 1228 0014                  		move.b	obActWid(a0),d1
0000971A 6100 F56C                  		bsr.w	PlatformObject
0000971E                            
0000971E                            Plat_Action:	; Routine 8
0000971E 6100 0000                  		bsr.w	Plat_Move
00009722 6100 0000                  		bsr.w	Plat_Nudge
00009726 6100 0000                  		bsr.w	DisplaySprite
0000972A 6000 0000                  		bra.w	Plat_ChkDel
0000972E                            ; ===========================================================================
0000972E                            
0000972E                            Plat_Action2:	; Routine 4
0000972E 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00009734 6700                       		beq.s	loc_7F06
00009736 5828 0038                  		addq.b	#4,$38(a0)
0000973A                            
0000973A                            	loc_7F06:
0000973A 7200                       		moveq	#0,d1
0000973C 1228 0014                  		move.b	obActWid(a0),d1
00009740 6100 F6BA                  		bsr.w	ExitPlatform
00009744 3F28 0008                  		move.w	obX(a0),-(sp)
00009748 6100 0000                  		bsr.w	Plat_Move
0000974C 6100 0000                  		bsr.w	Plat_Nudge
00009750 341F                       		move.w	(sp)+,d2
00009752 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00009756 6100 0000                  		bsr.w	DisplaySprite
0000975A 6000 0000                  		bra.w	Plat_ChkDel
0000975E                            
0000975E 4E75                       		rts
00009760                            
00009760                            ; ---------------------------------------------------------------------------
00009760                            ; Subroutine to	move platform slightly when you	stand on it
00009760                            ; ---------------------------------------------------------------------------
00009760                            
00009760                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009760                            
00009760                            
00009760                            Plat_Nudge:
00009760 1028 0038                  		move.b	$38(a0),d0
00009764 6100 A5C2                  		bsr.w	CalcSine
00009768 323C 0400                  		move.w	#$400,d1
0000976C C1C1                       		muls.w	d1,d0
0000976E 4840                       		swap	d0
00009770 D068 002C                  		add.w	$2C(a0),d0
00009774 3140 000C                  		move.w	d0,obY(a0)
00009778 4E75                       		rts	
0000977A                            ; End of function Plat_Nudge
0000977A                            
0000977A                            ; ---------------------------------------------------------------------------
0000977A                            ; Subroutine to	move platforms
0000977A                            ; ---------------------------------------------------------------------------
0000977A                            
0000977A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000977A                            
0000977A                            
0000977A                            Plat_Move:
0000977A 7000                       		moveq	#0,d0
0000977C 1028 0028                  		move.b	obSubtype(a0),d0
00009780 0240 000F                  		andi.w	#$F,d0
00009784 D040                       		add.w	d0,d0
00009786 323B 0000                  		move.w	@index(pc,d0.w),d1
0000978A 4EFB 1000                  		jmp	@index(pc,d1.w)
0000978E                            ; End of function Plat_Move
0000978E                            
0000978E                            ; ===========================================================================
0000978E 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00009792 0000 0000                  		dc.w @type02-@index, @type03-@index
00009796 0000 0000                  		dc.w @type04-@index, @type05-@index
0000979A 0000 0000                  		dc.w @type06-@index, @type07-@index
0000979E 0000 0000                  		dc.w @type08-@index, @type00-@index
000097A2 0000 0000                  		dc.w @type0A-@index, @type0B-@index
000097A6 0000                       		dc.w @type0C-@index
000097A8                            ; ===========================================================================
000097A8                            
000097A8                            @type00:
000097A8 4E75                       		rts			; platform 00 doesn't move
000097AA                            ; ===========================================================================
000097AA                            
000097AA                            @type05:
000097AA 3028 0032                  		move.w	$32(a0),d0
000097AE 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
000097B2 4401                       		neg.b	d1		; reverse platform-motion
000097B4 0601 0040                  		addi.b	#$40,d1
000097B8 6000                       		bra.s	@type01_move
000097BA                            ; ===========================================================================
000097BA                            
000097BA                            @type01:
000097BA 3028 0032                  		move.w	$32(a0),d0
000097BE 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
000097C2 0401 0040                  		subi.b	#$40,d1
000097C6                            
000097C6                            	@type01_move:
000097C6 4881                       		ext.w	d1
000097C8 D041                       		add.w	d1,d0
000097CA 3140 0008                  		move.w	d0,obX(a0)	; change position on x-axis
000097CE 6000 0000                  		bra.w	@chgmotion
000097D2                            ; ===========================================================================
000097D2                            
000097D2                            @type0C:
000097D2 3028 0034                  		move.w	$34(a0),d0
000097D6 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
000097DA 4401                       		neg.b	d1		; reverse platform-motion
000097DC 0601 0030                  		addi.b	#$30,d1
000097E0 6000                       		bra.s	@type02_move
000097E2                            ; ===========================================================================
000097E2                            
000097E2                            @type0B:
000097E2 3028 0034                  		move.w	$34(a0),d0
000097E6 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
000097EA 0401 0030                  		subi.b	#$30,d1
000097EE 6000                       		bra.s	@type02_move
000097F0                            ; ===========================================================================
000097F0                            
000097F0                            @type06:
000097F0 3028 0034                  		move.w	$34(a0),d0
000097F4 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
000097F8 4401                       		neg.b	d1		; reverse platform-motion
000097FA 0601 0040                  		addi.b	#$40,d1
000097FE 6000                       		bra.s	@type02_move
00009800                            ; ===========================================================================
00009800                            
00009800                            @type02:
00009800 3028 0034                  		move.w	$34(a0),d0
00009804 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009808 0401 0040                  		subi.b	#$40,d1
0000980C                            
0000980C                            	@type02_move:
0000980C 4881                       		ext.w	d1
0000980E D041                       		add.w	d1,d0
00009810 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009814 6000 0000                  		bra.w	@chgmotion
00009818                            ; ===========================================================================
00009818                            
00009818                            @type03:
00009818 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000981C 6600                       		bne.s	@type03_wait	; if yes, branch
0000981E 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the platform?
00009824 6700                       		beq.s	@type03_nomove	; if not, branch
00009826 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
0000982C                            
0000982C                            	@type03_nomove:
0000982C 4E75                       		rts	
0000982E                            
0000982E                            	@type03_wait:
0000982E 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00009832 66F8                       		bne.s	@type03_nomove	; if time is > 0, branch
00009834 317C 0020 003A             		move.w	#32,$3A(a0)
0000983A 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 04 (falling)
0000983E 4E75                       		rts	
00009840                            ; ===========================================================================
00009840                            
00009840                            @type04:
00009840 4A68 003A                  		tst.w	$3A(a0)
00009844 6700                       		beq.s	@loc_8048
00009846 5368 003A                  		subq.w	#1,$3A(a0)
0000984A 6600                       		bne.s	@loc_8048
0000984C 0828 0003 0022             		btst	#3,obStatus(a0)
00009852 6700                       		beq.s	@loc_8042
00009854 08E9 0001 0022             		bset	#1,obStatus(a1)
0000985A 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009860 137C 0002 0024             		move.b	#2,obRoutine(a1)
00009866 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000986C 4228 0025                  		clr.b	$25(a0)
00009870 3368 0012 0012             		move.w	obVelY(a0),obVelY(a1)
00009876                            
00009876                            	@loc_8042:
00009876 117C 0008 0024             		move.b	#8,obRoutine(a0)
0000987C                            
0000987C                            	@loc_8048:
0000987C 2628 002C                  		move.l	$2C(a0),d3
00009880 3028 0012                  		move.w	obVelY(a0),d0
00009884 48C0                       		ext.l	d0
00009886 E180                       		asl.l	#8,d0
00009888 D680                       		add.l	d0,d3
0000988A 2143 002C                  		move.l	d3,$2C(a0)
0000988E 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00009894 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00009898 0640 00E0                  		addi.w	#$E0,d0
0000989C B068 002C                  		cmp.w	$2C(a0),d0
000098A0 6400                       		bcc.s	@locret_8074
000098A2 117C 0006 0024             		move.b	#6,obRoutine(a0)
000098A8                            
000098A8                            	@locret_8074:
000098A8 4E75                       		rts	
000098AA                            ; ===========================================================================
000098AA                            
000098AA                            @type07:
000098AA 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000098AE 6600                       		bne.s	@type07_wait	; if yes, branch
000098B0 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
000098B4 7000                       		moveq	#0,d0
000098B6 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type ($x7) to d0
000098BA E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
000098BC 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
000098C0 6700                       		beq.s	@type07_nomove	; if not, branch
000098C2 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000098C8                            
000098C8                            	@type07_nomove:
000098C8 4E75                       		rts	
000098CA                            
000098CA                            	@type07_wait:
000098CA 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000098CE 66F8                       		bne.s	@type07_nomove	; if time is > 0, branch
000098D0 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 08
000098D4 4E75                       		rts	
000098D6                            ; ===========================================================================
000098D6                            
000098D6                            @type08:
000098D6 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
000098DA 3028 0034                  		move.w	$34(a0),d0
000098DE 0440 0200                  		subi.w	#$200,d0
000098E2 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
000098E6 6600                       		bne.s	@type08_nostop	; if not, branch
000098E8 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (stop moving)
000098EC                            
000098EC                            	@type08_nostop:
000098EC 4E75                       		rts	
000098EE                            ; ===========================================================================
000098EE                            
000098EE                            @type0A:
000098EE 3028 0034                  		move.w	$34(a0),d0
000098F2 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
000098F6 0401 0040                  		subi.b	#$40,d1
000098FA 4881                       		ext.w	d1
000098FC E241                       		asr.w	#1,d1
000098FE D041                       		add.w	d1,d0
00009900 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009904                            
00009904                            @chgmotion:
00009904 1178 FE78 0026             		move.b	(v_oscillate+$1A).w,$26(a0) ; update platform-movement variable
0000990A 4E75                       		rts	
0000990C                            ; ===========================================================================
0000990C                            
0000990C                            Plat_ChkDel:
00009928 4E75                       		rts	
0000992A                            ; ===========================================================================
0000992A                            
0000992A                            Plat_Delete:	; Routine 6
0000992A 6000 0000                  		bra.w	DeleteObject
0000992A 6000 0000                  		bra.w	DeleteObject
0000992E                            Map_Plat_Unused:include	"_maps\Platforms (unused).asm"
0000992E                            ; ---------------------------------------------------------------------------
0000992E                            ; Sprite mappings - unused
0000992E                            ; ---------------------------------------------------------------------------
0000992E                            Map_Plat_Unused_internal:
0000992E 0000                       		dc.w @small-Map_Plat_Unused_internal
00009930 0000                       		dc.w @large-Map_Plat_Unused_internal
00009932 02                         @small:		dc.b 2
00009933 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00009938 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
0000993D 0A                         @large:		dc.b $A
0000993E F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00009943 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00009948 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
0000994D 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00009952 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00009957 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
0000995C 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00009961 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00009966 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
0000996B 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00009970                            		even
00009970                            		even
00009970                            Map_Plat_GHZ:	include	"_maps\Platforms (GHZ).asm"
00009970                            ; ---------------------------------------------------------------------------
00009970                            ; Sprite mappings - GHZ	platforms
00009970                            ; ---------------------------------------------------------------------------
00009970                            Map_Plat_GHZ_internal:
00009970 0000                       		dc.w @small-Map_Plat_GHZ_internal
00009972 0000                       		dc.w @large-Map_Plat_GHZ_internal
00009974 04                         @small:		dc.b 4
00009975 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
0000997A F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
0000997F F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00009984 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00009989 0A                         @large:		dc.b $A
0000998A F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
0000998F 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00009994 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00009999 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
0000999E 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
000099A3 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
000099A8 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
000099AD 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
000099B2 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
000099B7 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
000099BC                            		even
000099BC                            		even
000099BC                            Map_Plat_SYZ:	include	"_maps\Platforms (SYZ).asm"
000099BC                            ; ---------------------------------------------------------------------------
000099BC                            ; Sprite mappings - SYZ	platforms
000099BC                            ; ---------------------------------------------------------------------------
000099BC                            Map_Plat_SYZ_internal:
000099BC 0000                       		dc.w @platform-Map_Plat_SYZ_internal
000099BE 03                         @platform:	dc.b 3
000099BF F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
000099C4 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
000099C9 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
000099CE                            		even
000099CE                            		even
000099CE                            Map_Plat_SLZ:	include	"_maps\Platforms (SLZ).asm"
000099CE                            ; ---------------------------------------------------------------------------
000099CE                            ; Sprite mappings - SLZ	platforms
000099CE                            ; ---------------------------------------------------------------------------
000099CE                            Map_Plat_SLZ_internal:
000099CE 0000                       		dc.w @platform-Map_Plat_SLZ_internal
000099D0 02                         @platform:	dc.b 2
000099D1 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
000099D6 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
000099DC 00                         		even
000099DC 00                         		even
000099DC                            Map_GBall:	include	"_maps\GHZ Ball.asm"
000099DC                            ; ---------------------------------------------------------------------------
000099DC                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000099DC                            ; ---------------------------------------------------------------------------
000099DC                            Map_GBall_internal:
000099DC 0000                       		dc.w @shiny-Map_GBall_internal
000099DE 0000                       		dc.w @check1-Map_GBall_internal
000099E0 0000                       		dc.w @check2-Map_GBall_internal
000099E2 0000                       		dc.w @check3-Map_GBall_internal
000099E4 06                         @shiny:		dc.b 6
000099E5 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
000099EA F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
000099EF E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000099F4 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000099F9 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
000099FE 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00009A03 04                         @check1:	dc.b 4
00009A04 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00009A09 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00009A0E 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00009A13 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00009A18 04                         @check2:	dc.b 4
00009A19 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00009A1E E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00009A23 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00009A28 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00009A2D 04                         @check3:	dc.b 4
00009A2E E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00009A33 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00009A38 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00009A3D 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00009A42                            		even
00009A42                            		even
00009A42                            		include	"_incObj\1A Collapsing Ledge (part 1).asm"
00009A42                            ; ---------------------------------------------------------------------------
00009A42                            ; Object 1A - GHZ collapsing ledge
00009A42                            ; ---------------------------------------------------------------------------
00009A42                            
00009A42                            CollapseLedge:
00009A42 7000                       		moveq	#0,d0
00009A44 1028 0024                  		move.b	obRoutine(a0),d0
00009A48 323B 0000                  		move.w	Ledge_Index(pc,d0.w),d1
00009A4C 4EFB 1000                  		jmp	Ledge_Index(pc,d1.w)
00009A50                            ; ===========================================================================
00009A50 0000 0000                  Ledge_Index:	dc.w Ledge_Main-Ledge_Index, Ledge_Touch-Ledge_Index
00009A54 0000 0000                  		dc.w Ledge_Collapse-Ledge_Index, Ledge_Display-Ledge_Index
00009A58 0000 0000                  		dc.w Ledge_Delete-Ledge_Index, Ledge_WalkOff-Ledge_Index
00009A5C                            
00009A5C =00000038                  ledge_timedelay:	equ $38		; time between touching the ledge and it collapsing
00009A5C =0000003A                  ledge_collapse_flag:	equ $3A		; collapse flag
00009A5C                            ; ===========================================================================
00009A5C                            
00009A5C                            Ledge_Main:	; Routine 0
00009A5C 5428 0024                  		addq.b	#2,obRoutine(a0)
00009A60 217C 0000 0000 0004        		move.l	#Map_Ledge,obMap(a0)
00009A68 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009A6E 0028 0004 0001             		ori.b	#4,obRender(a0)
00009A74 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009A7A 117C 0007 0038             		move.b	#7,ledge_timedelay(a0) ; set time delay for collapse
00009A80 117C 0064 0014             		move.b	#$64,obActWid(a0)
00009A86 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
00009A8C 117C 0038 0016             		move.b	#$38,obHeight(a0)
00009A92 08E8 0004 0001             		bset	#4,obRender(a0)
00009A98                            
00009A98                            Ledge_Touch:	; Routine 2
00009A98 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009A9C 6700                       		beq.s	@slope		; if not, branch
00009A9E 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time reached zero?
00009AA2 6700 0000                  		beq.w	Ledge_Fragment	; if yes, branch
00009AA6 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009AAA                            
00009AAA                            	@slope:
00009AAA 323C 0030                  		move.w	#$30,d1
00009AAE 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009AB4 6100 F2A6                  		bsr.w	SlopeObject
00009AB8 6000 0000                  		bra.w	RememberState
00009ABC                            ; ===========================================================================
00009ABC                            
00009ABC                            Ledge_Collapse:	; Routine 4
00009ABC 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009AC0 6700 0000                  		beq.w	loc_847A
00009AC4 117C 0001 003A             		move.b	#1,ledge_collapse_flag(a0)	; set collapse flag
00009ACA 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009ACE                            
00009ACE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009ACE                            
00009ACE                            
00009ACE                            Ledge_WalkOff:	; Routine $A
00009ACE 323C 0030                  		move.w	#$30,d1
00009AD2 6100 F328                  		bsr.w	ExitPlatform
00009AD6 323C 0030                  		move.w	#$30,d1
00009ADA 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009AE0 3428 0008                  		move.w	obX(a0),d2
00009AE4 6100 0000                  		bsr.w	SlopeObject2
00009AE8 6000 0000                  		bra.w	RememberState
00009AEC                            ; End of function Ledge_WalkOff
00009AEC                            
00009AEC                            ; ===========================================================================
00009AEC                            
00009AEC                            Ledge_Display:	; Routine 6
00009AEC 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time delay reached zero?
00009AF0 6700                       		beq.s	Ledge_TimeZero	; if yes, branch
00009AF2 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009AF6 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00009AFA 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009AFE 6000 0000                  		bra.w	DisplaySprite
00009B02                            ; ===========================================================================
00009B02                            
00009B02                            loc_82D0:
00009B02 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009B06 6100 FFC6                  		bsr.w	Ledge_WalkOff
00009B0A 43F8 D000                  		lea	(v_player).w,a1
00009B0E 0829 0003 0022             		btst	#3,obStatus(a1)
00009B14 6700                       		beq.s	loc_82FC
00009B16 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009B1A 6600                       		bne.s	locret_8308
00009B1C 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009B22 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009B28 137C 0001 001D             		move.b	#1,obNextAni(a1)
00009B2E                            
00009B2E                            loc_82FC:
00009B2E 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
00009B34 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "Ledge_Display" routine
00009B3A                            
00009B3A                            locret_8308:
00009B3A 4E75                       		rts	
00009B3C                            ; ===========================================================================
00009B3C                            
00009B3C                            Ledge_TimeZero:
00009B3C 6100 0000                  		bsr.w	ObjectFall
00009B40 6100 0000                  		bsr.w	DisplaySprite
00009B44 4A28 0001                  		tst.b	obRender(a0)
00009B48 6A00                       		bpl.s	Ledge_Delete
00009B4A 4E75                       		rts	
00009B4C                            ; ===========================================================================
00009B4C                            
00009B4C                            Ledge_Delete:	; Routine 8
00009B4C 6100 0000                  		bsr.w	DeleteObject
00009B50 4E75                       		rts	
00009B50 4E75                       		rts	
00009B52                            		include	"_incObj\53 Collapsing Floors.asm"
00009B52                            ; ---------------------------------------------------------------------------
00009B52                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00009B52                            ; ---------------------------------------------------------------------------
00009B52                            
00009B52                            CollapseFloor:
00009B52 7000                       		moveq	#0,d0
00009B54 1028 0024                  		move.b	obRoutine(a0),d0
00009B58 323B 0000                  		move.w	CFlo_Index(pc,d0.w),d1
00009B5C 4EFB 1000                  		jmp	CFlo_Index(pc,d1.w)
00009B60                            ; ===========================================================================
00009B60 0000 0000                  CFlo_Index:	dc.w CFlo_Main-CFlo_Index, CFlo_Touch-CFlo_Index
00009B64 0000 0000                  		dc.w CFlo_Collapse-CFlo_Index, CFlo_Display-CFlo_Index
00009B68 0000 0000                  		dc.w CFlo_Delete-CFlo_Index, CFlo_WalkOff-CFlo_Index
00009B6C                            
00009B6C =00000038                  cflo_timedelay:		equ $38
00009B6C =0000003A                  cflo_collapse_flag:	equ $3A
00009B6C                            ; ===========================================================================
00009B6C                            
00009B6C                            CFlo_Main:	; Routine 0
00009B6C 5428 0024                  		addq.b	#2,obRoutine(a0)
00009B70 217C 0000 0000 0004        		move.l	#Map_CFlo,obMap(a0)
00009B78 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00009B7E 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009B84 6600                       		bne.s	@notSLZ
00009B86                            
00009B86 317C 44E0 0002             		move.w	#$44E0,obGfx(a0) ; SLZ specific code
00009B8C 5428 001A                  		addq.b	#2,obFrame(a0)
00009B90                            
00009B90                            	@notSLZ:
00009B90 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; check if level is SBZ
00009B96 6600                       		bne.s	@notSBZ
00009B98 317C 43C2 0002             		move.w	#$43C2,obGfx(a0) ; SBZ specific code
00009B9E                            
00009B9E                            	@notSBZ:
00009B9E 0028 0004 0001             		ori.b	#4,obRender(a0)
00009BA4 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009BAA 117C 0007 0038             		move.b	#7,cflo_timedelay(a0)
00009BB0 117C 0044 0014             		move.b	#$44,obActWid(a0)
00009BB6                            
00009BB6                            CFlo_Touch:	; Routine 2
00009BB6 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009BBA 6700                       		beq.s	@solid		; if not, branch
00009BBC 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009BC0 6700 0000                  		beq.w	CFlo_Fragment	; if yes, branch
00009BC4 5328 0038                  		subq.b	#1,cflo_timedelay(a0) ; subtract 1 from time
00009BC8                            
00009BC8                            	@solid:
00009BC8 323C 0020                  		move.w	#$20,d1
00009BCC 6100 F0BA                  		bsr.w	PlatformObject
00009BD0 4A28 0028                  		tst.b	obSubtype(a0)
00009BD4 6A00                       		bpl.s	@remstate
00009BD6 0829 0003 0022             		btst	#3,obStatus(a1)
00009BDC 6700                       		beq.s	@remstate
00009BDE 08A8 0000 0001             		bclr	#0,obRender(a0)
00009BE4 3029 0008                  		move.w	obX(a1),d0
00009BE8 9068 0008                  		sub.w	obX(a0),d0
00009BEC 6400                       		bcc.s	@remstate
00009BEE 08E8 0000 0001             		bset	#0,obRender(a0)
00009BF4                            
00009BF4                            	@remstate:
00009BF4 6000 0000                  		bra.w	RememberState
00009BF8                            ; ===========================================================================
00009BF8                            
00009BF8                            CFlo_Collapse:	; Routine 4
00009BF8 4A28 0038                  		tst.b	cflo_timedelay(a0)
00009BFC 6700 0000                  		beq.w	loc_8458
00009C00 117C 0001 003A             		move.b	#1,cflo_collapse_flag(a0)	; set object as	"touched"
00009C06 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
00009C0A                            
00009C0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C0A                            
00009C0A                            
00009C0A                            CFlo_WalkOff:	; Routine $A
00009C0A 323C 0020                  		move.w	#$20,d1
00009C0E 6100 F1EC                  		bsr.w	ExitPlatform
00009C12 3428 0008                  		move.w	obX(a0),d2
00009C16 6100 F74E                  		bsr.w	MvSonicOnPtfm2
00009C1A 6000 0000                  		bra.w	RememberState
00009C1E                            ; End of function CFlo_WalkOff
00009C1E                            
00009C1E                            ; ===========================================================================
00009C1E                            
00009C1E                            CFlo_Display:	; Routine 6
00009C1E 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009C22 6700                       		beq.s	CFlo_TimeZero	; if yes, branch
00009C24 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009C28 6600 0000                  		bne.w	loc_8402	; if yes, branch
00009C2C 5328 0038                  		subq.b	#1,cflo_timedelay(a0); subtract 1 from time
00009C30 6000 0000                  		bra.w	DisplaySprite
00009C34                            ; ===========================================================================
00009C34                            
00009C34                            loc_8402:
00009C34 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
00009C38 6100 FFD0                  		bsr.w	CFlo_WalkOff
00009C3C 43F8 D000                  		lea	(v_player).w,a1
00009C40 0829 0003 0022             		btst	#3,obStatus(a1)
00009C46 6700                       		beq.s	loc_842E
00009C48 4A28 0038                  		tst.b	cflo_timedelay(a0)
00009C4C 6600                       		bne.s	locret_843A
00009C4E 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009C54 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009C5A 137C 0001 001D             		move.b	#1,obNextAni(a1)
00009C60                            
00009C60                            loc_842E:
00009C60 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
00009C66 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "CFlo_Display" routine
00009C6C                            
00009C6C                            locret_843A:
00009C6C 4E75                       		rts	
00009C6E                            ; ===========================================================================
00009C6E                            
00009C6E                            CFlo_TimeZero:
00009C6E 6100 0000                  		bsr.w	ObjectFall
00009C72 6100 0000                  		bsr.w	DisplaySprite
00009C76 4A28 0001                  		tst.b	obRender(a0)
00009C7A 6A00                       		bpl.s	CFlo_Delete
00009C7C 4E75                       		rts	
00009C7E                            ; ===========================================================================
00009C7E                            
00009C7E                            CFlo_Delete:	; Routine 8
00009C7E 6100 0000                  		bsr.w	DeleteObject
00009C82 4E75                       		rts	
00009C84                            ; ===========================================================================
00009C84                            
00009C84                            CFlo_Fragment:
00009C84 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
00009C8A                            
00009C8A                            loc_8458:
00009C8A 49F9 0000 0000             		lea	(CFlo_Data2).l,a4
00009C90 0828 0000 0028             		btst	#0,obSubtype(a0)
00009C96 6700                       		beq.s	loc_846C
00009C98 49F9 0000 0000             		lea	(CFlo_Data3).l,a4
00009C9E                            
00009C9E                            loc_846C:
00009C9E 7207                       		moveq	#7,d1
00009CA0 5228 001A                  		addq.b	#1,obFrame(a0)
00009CA4 6000                       		bra.s	loc_8486
00009CA4 6000                       		bra.s	loc_8486
00009CA6                            
00009CA6                            ; ===========================================================================
00009CA6                            
00009CA6                            Ledge_Fragment:
00009CA6 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
00009CAC                            
00009CAC                            loc_847A:
00009CAC 49F9 0000 0000             		lea	(CFlo_Data1).l,a4
00009CB2 7218                       		moveq	#$18,d1
00009CB4 5428 001A                  		addq.b	#2,obFrame(a0)
00009CB8                            
00009CB8                            loc_8486:
00009CB8 7000                       		moveq	#0,d0
00009CBA 1028 001A                  		move.b	obFrame(a0),d0
00009CBE D040                       		add.w	d0,d0
00009CC0 2668 0004                  		movea.l	obMap(a0),a3
00009CC4 D6F3 0000                  		adda.w	(a3,d0.w),a3
00009CC8 524B                       		addq.w	#1,a3
00009CCA 08E8 0005 0001             		bset	#5,obRender(a0)
00009CD0 1810                       		move.b	0(a0),d4
00009CD2 1A28 0001                  		move.b	obRender(a0),d5
00009CD6 2248                       		movea.l	a0,a1
00009CD8 137C 0006 0024             		move.b	#6,obRoutine(a1)
00009CDE 1284                       		move.b	d4,0(a1)
00009CE0 234B 0004                  		move.l	a3,obMap(a1)
00009CE4 1345 0001                  		move.b	d5,obRender(a1)
00009CE8 3368 0008 0008             		move.w	obX(a0),obX(a1)
00009CEE 3368 000C 000C             		move.w	obY(a0),obY(a1)
00009CF4 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00009CFA 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00009D00 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00009D06 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
00009D0A 5341                       		subq.w	#1,d1
00009D0C 43F8 D800                  		lea		(v_lvlobjspace).w,a1
00009D10 303C 005F                  		move.w	#$5F,d0
00009D14                            ; ===========================================================================
00009D14                            
00009D14                            loc_84AA:
00009D14 4A11                       		tst.b	(a1)
00009D16 6700                       		beq.s	@cont		
00009D18 43E9 0040                  		lea		$40(a1),a1
00009D1C 51C8 FFF6                  		dbf		d0,loc_84AA	
00009D20 6600                       		bne.s	loc_84F2	
00009D22                            	@cont:
00009D22 5A4B                       		addq.w	#5,a3
00009D24                            
00009D24                            loc_84B2:
00009D24 137C 0006 0024             		move.b	#6,obRoutine(a1)
00009D2A 1284                       		move.b	d4,0(a1)
00009D2C 234B 0004                  		move.l	a3,obMap(a1)
00009D30 1345 0001                  		move.b	d5,obRender(a1)
00009D34 3368 0008 0008             		move.w	obX(a0),obX(a1)
00009D3A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00009D40 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00009D46 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00009D4C 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00009D52 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
00009D56 6100 0000                  		bsr.w	DisplaySprite1
00009D5A                            
00009D5A                            loc_84EE:
00009D5A 51C9 FFB8                  		dbf	d1,loc_84AA
00009D5E                            
00009D5E                            loc_84F2:
00009D5E 6100 0000                  		bsr.w	DisplaySprite
00009D6C                            ; ===========================================================================
00009D6C                            ; ---------------------------------------------------------------------------
00009D6C                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00009D6C                            ; ---------------------------------------------------------------------------
00009D6C 1C18 1410 1A16 120E 0A06+  CFlo_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00009D7C 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00009D86 1E16 0E06 1A12 0A02        CFlo_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00009D8E 161E 1A12 060E 0A02        CFlo_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00009D96                            
00009D96                            ; ---------------------------------------------------------------------------
00009D96                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00009D96                            ; ---------------------------------------------------------------------------
00009D96                            
00009D96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009D96                            
00009D96                            
00009D96                            SlopeObject2:
00009D96 43F8 D000                  		lea	(v_player).w,a1
00009D9A 0829 0003 0022             		btst	#3,obStatus(a1)
00009DA0 6700                       		beq.s	locret_856E
00009DA2 3029 0008                  		move.w	obX(a1),d0
00009DA6 9068 0008                  		sub.w	obX(a0),d0
00009DAA D041                       		add.w	d1,d0
00009DAC E248                       		lsr.w	#1,d0
00009DAE 0828 0000 0001             		btst	#0,obRender(a0)
00009DB4 6700                       		beq.s	loc_854E
00009DB6 4640                       		not.w	d0
00009DB8 D041                       		add.w	d1,d0
00009DBA                            
00009DBA                            loc_854E:
00009DBA 7200                       		moveq	#0,d1
00009DBC 1232 0000                  		move.b	(a2,d0.w),d1
00009DC0 3028 000C                  		move.w	obY(a0),d0
00009DC4 9041                       		sub.w	d1,d0
00009DC6 7200                       		moveq	#0,d1
00009DC8 1229 0016                  		move.b	obHeight(a1),d1
00009DCC 9041                       		sub.w	d1,d0
00009DCE 3340 000C                  		move.w	d0,obY(a1)
00009DD2 9468 0008                  		sub.w	obX(a0),d2
00009DD6 9569 0008                  		sub.w	d2,obX(a1)
00009DDA                            
00009DDA                            locret_856E:
00009DDA 4E75                       		rts	
00009DDC                            ; End of function SlopeObject2
00009DDC                            
00009DDC                            ; ===========================================================================
00009DDC                            ; ---------------------------------------------------------------------------
00009DDC                            ; Collision data for GHZ collapsing ledge
00009DDC                            ; ---------------------------------------------------------------------------
00009DDC                            Ledge_SlopeData:
00009DDC                            		incbin	"misc\GHZ Collapsing Ledge Heightmap.bin"
00009E0C                            		even
00009E0C                            
00009E0C                            Map_Ledge:	include	"_maps\Collapsing Ledge.asm"
00009E0C                            ; ---------------------------------------------------------------------------
00009E0C                            ; Sprite mappings - GHZ	collapsing ledge
00009E0C                            ; ---------------------------------------------------------------------------
00009E0C                            Map_Ledge_internal:
00009E0C 0000                       		dc.w @left-Map_Ledge_internal
00009E0E 0000                       		dc.w @right-Map_Ledge_internal
00009E10 0000                       		dc.w @leftsmash-Map_Ledge_internal
00009E12 0000                       		dc.w @rightsmash-Map_Ledge_internal
00009E14 10                         @left:		dc.b $10
00009E15 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00009E1A D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009E1F E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009E24 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009E29 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009E2E D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009E33 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009E38 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009E3D F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009E42 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009E47 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009E4C 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009E51 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009E56 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009E5B 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009E60 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009E65 10                         @right:		dc.b $10
00009E66 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00009E6B D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009E70 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009E75 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009E7A D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009E7F D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009E84 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009E89 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009E8E F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009E93 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00009E98 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009E9D 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009EA2 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009EA7 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00009EAC 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009EB1 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009EB6 19                         @leftsmash:	dc.b $19
00009EB7 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00009EBC C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009EC1 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009EC6 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009ECB E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009ED0 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009ED5 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009EDA E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009EDF D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009EE4 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009EE9 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009EEE F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009EF3 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009EF8 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009EFD F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009F02 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009F07 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00009F0C 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00009F11 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009F16 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00009F1B 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00009F20 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009F25 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00009F2A 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009F2F 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009F34 19                         @rightsmash:	dc.b $19
00009F35 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00009F3A C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009F3F D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009F44 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009F49 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009F4E E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009F53 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009F58 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009F5D D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009F62 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009F67 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009F6C F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009F71 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009F76 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009F7B F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009F80 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00009F85 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00009F8A 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00009F8F 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009F94 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00009F99 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00009F9E 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00009FA3 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00009FA8 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009FAD 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009FB2                            		even
00009FB2                            		even
00009FB2                            Map_CFlo:	include	"_maps\Collapsing Floors.asm"
00009FB2                            ; --------------------------------------------------------------------------------
00009FB2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00009FB2                            ; --------------------------------------------------------------------------------
00009FB2                            
00009FB2                            SME_WNa9T:	
00009FB2 0000 0000                  		dc.w SME_WNa9T_8-SME_WNa9T, SME_WNa9T_31-SME_WNa9T	
00009FB6 0000 0000                  		dc.w SME_WNa9T_5A-SME_WNa9T, SME_WNa9T_6F-SME_WNa9T	
00009FBA 08                         SME_WNa9T_8:	dc.b 8	
00009FBB F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
00009FC0 0805 0004 E0               		dc.b 8, 5, 0, 4, $E0	
00009FC5 F805 0000 F0               		dc.b $F8, 5, 0, 0, $F0	
00009FCA 0805 0004 F0               		dc.b 8, 5, 0, 4, $F0	
00009FCF F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
00009FD4 0805 0004 00               		dc.b 8, 5, 0, 4, 0	
00009FD9 F805 0000 10               		dc.b $F8, 5, 0, 0, $10	
00009FDE 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
00009FE3 08                         SME_WNa9T_31:	dc.b 8	
00009FE4 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
00009FE9 0805 0004 E0               		dc.b 8, 5, 0, 4, $E0	
00009FEE F805 0000 F0               		dc.b $F8, 5, 0, 0, $F0	
00009FF3 0805 0004 F0               		dc.b 8, 5, 0, 4, $F0	
00009FF8 F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
00009FFD 0805 0004 00               		dc.b 8, 5, 0, 4, 0	
0000A002 F805 0000 10               		dc.b $F8, 5, 0, 0, $10	
0000A007 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
0000A00C 04                         SME_WNa9T_5A:	dc.b 4	
0000A00D F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
0000A012 080D 0008 E0               		dc.b 8, $D, 0, 8, $E0	
0000A017 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0	
0000A01C 080D 0008 00               		dc.b 8, $D, 0, 8, 0	
0000A021 08                         SME_WNa9T_6F:	dc.b 8	
0000A022 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
0000A027 F805 0004 F0               		dc.b $F8, 5, 0, 4, $F0	
0000A02C F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
0000A031 F805 0004 10               		dc.b $F8, 5, 0, 4, $10	
0000A036 0805 0008 E0               		dc.b 8, 5, 0, 8, $E0	
0000A03B 0805 000C F0               		dc.b 8, 5, 0, $C, $F0	
0000A040 0805 0008 00               		dc.b 8, 5, 0, 8, 0	
0000A045 0805 000C 10               		dc.b 8, 5, 0, $C, $10	
0000A04A                            		even
0000A04A                            		even
0000A04A                            
0000A04A                            		include	"_incObj\1C Scenery.asm"
0000A04A                            ; ---------------------------------------------------------------------------
0000A04A                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
0000A04A                            ; ---------------------------------------------------------------------------
0000A04A                            
0000A04A                            Scenery:
0000A04A 7000                       		moveq	#0,d0
0000A04C 1028 0024                  		move.b	obRoutine(a0),d0
0000A050 323B 0000                  		move.w	Scen_Index(pc,d0.w),d1
0000A054 4EFB 1000                  		jmp	Scen_Index(pc,d1.w)
0000A058                            ; ===========================================================================
0000A058 0000                       Scen_Index:	dc.w Scen_Main-Scen_Index
0000A05A 0000                       		dc.w Scen_ChkDel-Scen_Index
0000A05C                            ; ===========================================================================
0000A05C                            
0000A05C                            Scen_Main:	; Routine 0
0000A05C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A060 7000                       		moveq	#0,d0
0000A062 1028 0028                  		move.b	obSubtype(a0),d0 ; copy object subtype to d0
0000A066 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000A06A 43FB 0000                  		lea	Scen_Values(pc,d0.w),a1
0000A06E 2159 0004                  		move.l	(a1)+,obMap(a0)
0000A072 3159 0002                  		move.w	(a1)+,obGfx(a0)
0000A076 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A07C 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000A080 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000A084 1159 0018                  		move.b	(a1)+,obPriority(a0)
0000A088 3028 0018                  		move.w obPriority(a0),d0 
0000A08C E248                       		lsr.w #1,d0 
0000A08E 0240 0380                  		andi.w #$380,d0 
0000A092 3140 0018                  		move.w d0,obPriority(a0)		
0000A096 1159 0020                  		move.b	(a1)+,obColType(a0)
0000A09A                            
0000A09A                            Scen_ChkDel:	; Routine 2
0000A0B8 6000 0000                  		bra.w	DisplaySprite
0000A0BC                            ; ===========================================================================
0000A0BC                            ; ---------------------------------------------------------------------------
0000A0BC                            ; Variables for	object $1C are stored in an array
0000A0BC                            ; ---------------------------------------------------------------------------
0000A0BC 0000 0000                  Scen_Values:	dc.l Map_Scen		; mappings address
0000A0C0 44D8                       		dc.w $44D8		; VRAM setting
0000A0C2 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
0000A0C6 0000 0000                  		dc.l Map_Scen
0000A0CA 44D8                       		dc.w $44D8
0000A0CC 0008 0200                  		dc.b 0,	8, 2, 0
0000A0D0 0000 0000                  		dc.l Map_Scen
0000A0D4 44D8                       		dc.w $44D8
0000A0D6 0008 0200                  		dc.b 0,	8, 2, 0
0000A0DA 0000 9170                  		dc.l Map_Bri
0000A0DE 438E                       		dc.w $438E
0000A0E0 0110 0100                  		dc.b 1,	$10, 1,	0
0000A0E4                            		even
0000A0E4                            		even
0000A0E4                            Map_Scen:	include	"_maps\Scenery.asm"
0000A0E4                            ; ---------------------------------------------------------------------------
0000A0E4                            ; Sprite mappings - SLZ	lava thrower
0000A0E4                            ; ---------------------------------------------------------------------------
0000A0E4                            Map_Scen_internal:
0000A0E4 0000                       		dc.w byte_8858-Map_Scen_internal
0000A0E6 01                         byte_8858:	dc.b 1
0000A0E7 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000A0EC                            		even
0000A0EC                            		even
0000A0EC                            
0000A0EC                            		include	"_incObj\1D Water Switcher.asm"
0000A0EC                            ; ----------------------------------------------------------------------------
0000A0EC                            ; Object 1D - Water Switcher
0000A0EC                            ; ----------------------------------------------------------------------------
0000A0EC                            ; Sprite_1FCDC:
0000A0EC                            WaterSwitcher:
0000A0EC 7000                       		moveq	#0,d0
0000A0EE 1028 0024                  		move.b	obRoutine(a0),d0
0000A0F2 323B 0000                  		move.w	PSwapper_Index(pc,d0.w),d1
0000A0F6 4EFB 1000                  		jmp	PSwapper_Index(pc,d1.w) ;TIS Don't Delete if out of range
0000A0FA                            	;if DebugPathSwappers
0000A0FA                            		;tst.w	(f_debugcheat).w
0000A0FA                            		;bne.w	RememberState
0000A0FA                            	;endif
0000A0FA                            		; like RememberState, but doesn't display (Sonic 2's MarkObjGone3)
0000A0FA                            		;out_of_range	@offscreen
0000A0FA                            		;rts
0000A0FA                            
0000A0FA                            	;@offscreen:
0000A0FA                            		;lea	(v_objstate).w,a2
0000A0FA                            		;moveq	#0,d0
0000A0FA                            		;move.b	obRespawnNo(a0),d0
0000A0FA                            		;beq.s	@delete
0000A0FA                            		;bclr	#7,2(a2,d0.w)
0000A0FA                            
0000A0FA                            	;@delete:
0000A0FA                            		;bra.w	DeleteObject
0000A0FA                            ; ===========================================================================
0000A0FA                            ; off_1FCF0:
0000A0FA                            PSwapper_Index:
0000A0FA 0000                       		dc.w PSwapper_Init-PSwapper_Index	; 0
0000A0FC 0000                       		dc.w PSwapper_MainX-PSwapper_Index	; 2
0000A0FE 0000                       		dc.w PSwapper_MainY-PSwapper_Index	; 4
0000A100                            ; ===========================================================================
0000A100                            ; loc_1FCF6:
0000A100                            PSwapper_Init:
0000A100 5428 0024                  		addq.b	#2,obRoutine(a0) ; => PSwapper_MainX
0000A104 217C 0000 0000 0004        		move.l	#Map_WaterSwitcher,obMap(a0)
0000A10C 317C 27B2 0002             		move.w	#$27B2,obGfx(a0)
0000A112 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A118 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000A11E 117C 0005 0018             		move.b	#5,obPriority(a0)
0000A124 1028 0028                  		move.b	obSubtype(a0),d0
0000A128 0800 0002                  		btst	#2,d0
0000A12C 6700                       		beq.s	PSwapper_Init_CheckX
0000A12E                            ;PSwapper_Init_CheckY:
0000A12E 5428 0024                  		addq.b	#2,obRoutine(a0) ; => PSwapper_MainY
0000A132 0240 0007                  		andi.w	#7,d0
0000A136 1140 001A                  		move.b	d0,obFrame(a0)
0000A13A 0240 0003                  		andi.w	#3,d0
0000A13E D040                       		add.w	d0,d0
0000A140 317B 0000 0032             		move.w	word_1FD68(pc,d0.w),$32(a0)
0000A146 3228 000C                  		move.w	obY(a0),d1
0000A14A 43F8 D000                  		lea	(v_player).w,a1 ; a1=character
0000A14E B269 000C                  		cmp.w	obY(a1),d1
0000A152 6400 0000                  		bhs.w	PSwapper_MainY
0000A156 117C 0001 0034             		move.b	#1,$34(a0)
0000A15C 6000 0000                  		bra.w	PSwapper_MainY
0000A160                            ; ===========================================================================
0000A160                            word_1FD68:
0000A160 0020                       	dc.w   $20
0000A162 0040                       	dc.w   $40	; 1
0000A164 0080                       	dc.w   $80	; 2
0000A166 0100                       	dc.w  $100	; 3
0000A168                            ; ===========================================================================
0000A168                            ; loc_1FD70:
0000A168                            PSwapper_Init_CheckX:
0000A168 0240 0003                  		andi.w	#3,d0
0000A16C 1140 001A                  		move.b	d0,obFrame(a0)
0000A170 D040                       		add.w	d0,d0
0000A172 317B 00EC 0032             		move.w	word_1FD68(pc,d0.w),$32(a0)
0000A178 3228 0008                  		move.w	obX(a0),d1
0000A17C 43F8 D000                  		lea	(v_player).w,a1 ; a1=character
0000A180 B269 0008                  		cmp.w	obX(a1),d1
0000A184 6400                       		bhs.s	@jump
0000A186 117C 0001 0034             		move.b	#1,$34(a0)
0000A18C                            @jump:
0000A18C                            
0000A18C                            ; loc_1FDA4:
0000A18C                            PSwapper_MainX:
0000A18C 4A78 FE08                  		tst.w	(v_debuguse).w
0000A190 6600 0000                  		bne.w	@locret
0000A194 3228 0008                  		move.w	obX(a0),d1
0000A198 45E8 0034                  		lea	$34(a0),a2
0000A19C 43F8 D000                  		lea	(v_player).w,a1 ; a1=character
0000A1A0 4A1A                       		tst.b	(a2)+
0000A1A2 6600 0000                  		bne.w	PSwapper_MainX_Alt
0000A1A6 B269 0008                  		cmp.w	obX(a1),d1
0000A1AA 6200 0000                  		bhi.w	@locret	;TIS
0000A1AE 157C 0001 FFFF             		move.b	#1,-1(a2)
0000A1B4 3428 000C                  		move.w	obY(a0),d2
0000A1B8 3602                       		move.w	d2,d3
0000A1BA 3828 0032                  		move.w	$32(a0),d4
0000A1BE 9444                       		sub.w	d4,d2
0000A1C0 D644                       		add.w	d4,d3
0000A1C2 3829 000C                  		move.w	obY(a1),d4
0000A1C6 B842                       		cmp.w	d2,d4
0000A1C8 6D00                       		blt.s	@locret
0000A1CA B843                       		cmp.w	d3,d4
0000A1CC 6C00                       		bge.s	@locret
0000A1CE 1028 0028                  		move.b	obSubtype(a0),d0
0000A1D2 6A00                       		bpl.s	@jump
0000A1D4 0829 0001 0022             		btst	#1,obStatus(a1)
0000A1DA 6600                       		bne.s	@locret
0000A1DC                            @jump:
0000A1DC 0828 0000 0001             		btst	#0,obRender(a0)
0000A1E2 6600                       		bne.s	@jump2
0000A1E4 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0000A1EA                            
0000A1EA                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0000A1EA                            		;lea    (Pal_Sonic),a1  ;Palette location
0000A1EA                                    	;lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0000A1EA                            		;jsr	Palload_Loop
0000A1EA                            
0000A1EA                            
0000A1EA 0800 0003                  		btst	#3,d0
0000A1EE 6700                       		beq.s	@jump2
0000A1F0                            		
0000A1F0                            
0000A1F0 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0000A1F6                            
0000A1F6                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0000A1F6                            		;lea    (Pal_LZSonWatr2),a1  ;Palette location
0000A1F6                                    	;lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0000A1F6                            		;jsr	Palload_Loop
0000A1F6                            
0000A1F6                            @jump2:
0000A1F6 0269 7FFF 0002             		andi.w	#$7FFF,obGfx(a1)
0000A1FC 0800 0005                  		btst	#5,d0
0000A200 6700                       		beq.s	@jump3
0000A202 0069 8000 0002             		ori.w	#(1<<15),obGfx(a1)
0000A208                            @jump3:
0000A208                            	;if DebugPathSwappers
0000A208                            		;tst.b	(f_debugcheat).w
0000A208                            		;beq.s	@locret
0000A208                            		;sfx	sfx_Lamppost,1,0,1
0000A208                            	;endif
0000A208                            @locret:
0000A208 4E75                       		rts
0000A20A                            ; ===========================================================================
0000A20A                            ; loc_1FE38:
0000A20A                            PSwapper_MainX_Alt:
0000A20A B269 0008                  		cmp.w	obX(a1),d1
0000A20E 6300                       		bls.s	@locret
0000A210 157C 0000 FFFF             		move.b	#0,-1(a2)
0000A216 3428 000C                  		move.w	obY(a0),d2
0000A21A 3602                       		move.w	d2,d3
0000A21C 3828 0032                  		move.w	$32(a0),d4
0000A220 9444                       		sub.w	d4,d2
0000A222 D644                       		add.w	d4,d3
0000A224 3829 000C                  		move.w	obY(a1),d4
0000A228 B842                       		cmp.w	d2,d4
0000A22A 6D00                       		blt.s	@locret
0000A22C B843                       		cmp.w	d3,d4
0000A22E 6C00                       		bge.s	@locret
0000A230 1028 0028                  		move.b	obSubtype(a0),d0
0000A234 6A00                       		bpl.s	@jump
0000A236 0829 0001 0022             		btst	#1,obStatus(a1)
0000A23C 6600                       		bne.s	@locret
0000A23E                            @jump:
0000A23E 0828 0000 0001             		btst	#0,obRender(a0)
0000A244 6600                       		bne.s	@jump2
0000A246                            		
0000A246                            
0000A246                            
0000A246 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0000A24C                            
0000A24C                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0000A24C                            		;lea    (Pal_Sonic),a1  ;Palette location
0000A24C                                    	;lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0000A24C                            		;jsr	Palload_Loop
0000A24C                            
0000A24C 0800 0004                  		btst	#4,d0
0000A250 6700                       		beq.s	@jump2
0000A252                            		
0000A252 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0000A258                            
0000A258                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0000A258                            		;lea    (Pal_LZSonWatr2),a1  ;Palette location
0000A258                                    	;lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0000A258                            		;jsr	Palload_Loop
0000A258                            
0000A258                            @jump2:
0000A258 0269 7FFF 0002             		andi.w	#$7FFF,obGfx(a1)
0000A25E 0800 0006                  		btst	#6,d0
0000A262 6700                       		beq.s	@jump3
0000A264 0069 8000 0002             		ori.w	#(1<<15),obGfx(a1)
0000A26A                            @jump3:
0000A26A                            	;if DebugPathSwappers
0000A26A                            		;tst.b	(f_debugcheat).w
0000A26A                            		;beq.s	@locret
0000A26A                            		;sfx	sfx_Lamppost,1,0,1
0000A26A                            	;endif
0000A26A                            @locret:
0000A26A 4E75                       		rts
0000A26C                            ; ===========================================================================
0000A26C                            
0000A26C                            PSwapper_MainY:
0000A26C 4A78 FE08                  		tst.w	(v_debuguse).w
0000A270 6600 0000                  		bne.w	@locret
0000A274 3228 000C                  		move.w	obY(a0),d1
0000A278 45E8 0034                  		lea	$34(a0),a2
0000A27C 43F8 D000                  		lea	(v_player).w,a1 ; a1=character
0000A280 4A1A                       		tst.b	(a2)+
0000A282 6600 0000                  		bne.w	PSwapper_MainY_Alt	;TIS
0000A286 B269 000C                  		cmp.w	obY(a1),d1
0000A28A 6200                       		bhi.s	@locret
0000A28C 157C 0001 FFFF             		move.b	#1,-1(a2)
0000A292 3428 0008                  		move.w	obX(a0),d2
0000A296 3602                       		move.w	d2,d3
0000A298 3828 0032                  		move.w	$32(a0),d4
0000A29C 9444                       		sub.w	d4,d2
0000A29E D644                       		add.w	d4,d3
0000A2A0 3829 0008                  		move.w	obX(a1),d4
0000A2A4 B842                       		cmp.w	d2,d4
0000A2A6 6D00                       		blt.s	@locret
0000A2A8 B843                       		cmp.w	d3,d4
0000A2AA 6C00                       		bge.s	@locret
0000A2AC 1028 0028                  		move.b	obSubtype(a0),d0
0000A2B0 6A00                       		bpl.s	@jump
0000A2B2 0829 0001 0022             		btst	#1,obStatus(a1)
0000A2B8 6600                       		bne.s	@locret
0000A2BA                            @jump:
0000A2BA 0828 0000 0001             		btst	#0,obRender(a0)
0000A2C0 6600                       		bne.s	@jump2
0000A2C2                            		
0000A2C2 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0000A2C8                            
0000A2C8                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0000A2C8                            		;lea    (Pal_Sonic),a1  ;Palette location
0000A2C8                                    	;lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0000A2C8                            		;jsr	Palload_Loop
0000A2C8                            
0000A2C8 0800 0003                  		btst	#3,d0
0000A2CC 6700                       		beq.s	@jump2
0000A2CE                            		
0000A2CE 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0000A2D4                            
0000A2D4                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0000A2D4                            		;lea    (Pal_LZSonWatr2),a1  ;Palette location
0000A2D4                                    	;lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0000A2D4                            		;jsr	Palload_Loop
0000A2D4                            
0000A2D4                            @jump2:
0000A2D4 0269 7FFF 0002             		andi.w	#$7FFF,obGfx(a1)
0000A2DA 0800 0005                  		btst	#5,d0
0000A2DE 6700                       		beq.s	@jump3
0000A2E0 0069 8000 0002             		ori.w	#(1<<15),obGfx(a1)
0000A2E6                            @jump3:
0000A2E6                            	;if DebugPathSwappers
0000A2E6                            		;tst.b	(f_debugcheat).w
0000A2E6                            		;beq.s	@locret
0000A2E6                            		;sfx	sfx_Lamppost,1,0,1
0000A2E6                            	;endif
0000A2E6                            @locret:
0000A2E6 4E75                       		rts
0000A2E8                            ; ===========================================================================
0000A2E8                            ; loc_1FF42:
0000A2E8                            PSwapper_MainY_Alt:
0000A2E8 B269 000C                  		cmp.w	obY(a1),d1
0000A2EC 6300                       		bls.s	@locret
0000A2EE 157C 0000 FFFF             		move.b	#0,-1(a2)
0000A2F4 3428 0008                  		move.w	obX(a0),d2
0000A2F8 3602                       		move.w	d2,d3
0000A2FA 3828 0032                  		move.w	$32(a0),d4
0000A2FE 9444                       		sub.w	d4,d2
0000A300 D644                       		add.w	d4,d3
0000A302 3829 0008                  		move.w	obX(a1),d4
0000A306 B842                       		cmp.w	d2,d4
0000A308 6D00                       		blt.s	@locret
0000A30A B843                       		cmp.w	d3,d4
0000A30C 6C00                       		bge.s	@locret
0000A30E 1028 0028                  		move.b	obSubtype(a0),d0
0000A312 6A00                       		bpl.s	@jump
0000A314 0829 0001 0022             		btst	#1,obStatus(a1)
0000A31A 6600                       		bne.s	@locret
0000A31C                            @jump:
0000A31C 0828 0000 0001             		btst	#0,obRender(a0)
0000A322 6600                       		bne.s	@jump2
0000A324                            		
0000A324 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0000A32A                            
0000A32A                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0000A32A                            		;lea    (Pal_Sonic),a1  ;Palette location
0000A32A                                    	;lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0000A32A                            		;jsr	Palload_Loop
0000A32A                            
0000A32A 0800 0004                  		btst	#4,d0
0000A32E 6700                       		beq.s	@jump2
0000A330                            
0000A330                            		
0000A330 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0000A336                            
0000A336                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0000A336                            		;lea    (Pal_LZSonWatr2),a1  ;Palette location
0000A336                                    	;lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0000A336                            		;jsr	Palload_Loop
0000A336                            
0000A336                            @jump2:
0000A336 0269 7FFF 0002             		andi.w	#$7FFF,obGfx(a1)
0000A33C 0800 0006                  		btst	#6,d0
0000A340 6700                       		beq.s	@jump3
0000A342 0069 8000 0002             		ori.w	#(1<<15),obGfx(a1)
0000A348                            @jump3:
0000A348                            	;if DebugPathSwappers
0000A348                            		;tst.b	(f_debugcheat).w
0000A348                            		;beq.s	@locret
0000A348                            		;sfx	sfx_Lamppost,1,0,1
0000A348                            	;endif
0000A348                            @locret:
0000A348 4E75                       		rts
0000A34A                            ; ===========================================================================
0000A34A                            ; -------------------------------------------------------------------------------
0000A34A                            ; sprite mappings
0000A34A                            ; -------------------------------------------------------------------------------
0000A34A                            Map_WaterSwitcher:	include "_maps\WaterSwitcher.asm"
0000A34A                            WaterSwitcher_Map:
0000A34A 0000                       	dc.w	WaterSwitcher_0010-WaterSwitcher
0000A34C 0000                       	dc.w	WaterSwitcher_0032-WaterSwitcher
0000A34E 0000                       	dc.w	WaterSwitcher_0054-WaterSwitcher
0000A350 0000                       	dc.w	WaterSwitcher_0054-WaterSwitcher
0000A352 0000                       	dc.w	WaterSwitcher_0076-WaterSwitcher
0000A354 0000                       	dc.w	WaterSwitcher_0098-WaterSwitcher
0000A356 0000                       	dc.w	WaterSwitcher_00BA-WaterSwitcher
0000A358 0000                       	dc.w	WaterSwitcher_00BA-WaterSwitcher
0000A35A                            
0000A35A 04                         WaterSwitcher_0010:	dc.b 4
0000A35B E005 0000 F8               	dc.b $E0, 5, 0, 0, $F8
0000A360 F005 0000 F8               	dc.b $F0, 5, 0, 0, $F8
0000A365 0005 0000 F8               	dc.b 0, 5, 0, 0, $F8
0000A36A 1005 0000 F8               	dc.b $10, 5, 0, 0, $F8
0000A36F                            
0000A36F 04                         WaterSwitcher_0032:	dc.b 4
0000A370 C005 0000 F8               	dc.b $C0, 5, 0, 0, $F8
0000A375 E005 0000 F8               	dc.b $E0, 5, 0, 0, $F8
0000A37A 0005 0000 F8               	dc.b 0, 5, 0, 0, $F8
0000A37F 3005 0000 F8               	dc.b $30, 5, 0, 0, $F8
0000A384                            
0000A384 04                         WaterSwitcher_0054:	dc.b 4
0000A385 8005 0000 F8               	dc.b $80, 5, 0, 0, $F8
0000A38A E005 0000 F8               	dc.b $E0, 5, 0, 0, $F8
0000A38F 0005 0000 F8               	dc.b 0, 5, 0, 0, $F8
0000A394 7005 0000 F8               	dc.b $70, 5, 0, 0, $F8
0000A399                            
0000A399 04                         WaterSwitcher_0076:	dc.b 4
0000A39A F805 0000 E0               	dc.b $F8, 5, 0, 0, $E0
0000A39F F805 0000 F0               	dc.b $F8, 5, 0, 0, $F0
0000A3A4 F805 0000 00               	dc.b $F8, 5, 0, 0, 0
0000A3A9 F805 0000 10               	dc.b $F8, 5, 0, 0, $10
0000A3AE                            
0000A3AE 04                         WaterSwitcher_0098:	dc.b 4
0000A3AF F805 0000 C0               	dc.b $F8, 5, 0, 0, $C0
0000A3B4 F805 0000 E0               	dc.b $F8, 5, 0, 0, $E0
0000A3B9 F805 0000 00               	dc.b $F8, 5, 0, 0, 0
0000A3BE F805 0000 30               	dc.b $F8, 5, 0, 0, $30
0000A3C3                            
0000A3C3 04                         WaterSwitcher_00BA:	dc.b 4
0000A3C4 F805 0000 80               	dc.b $F8, 5, 0, 0, $80
0000A3C9 F805 0000 E0               	dc.b $F8, 5, 0, 0, $E0
0000A3CE F805 0000 00               	dc.b $F8, 5, 0, 0, 0
0000A3D3 F805 0000 70               	dc.b $F8, 5, 0, 0, $70
0000A3D8                            
0000A3D8                            	even
0000A3D8                            	even
0000A3D8                            ; ===========================================================================
0000A3D8                            ; ===========================================================================
0000A3D8                            Map_Swi:	include	"_maps\Unused Switch.asm"
0000A3D8                            ; ---------------------------------------------------------------------------
0000A3D8                            ; Sprite mappings - Unused switch thingy
0000A3D8                            ; ---------------------------------------------------------------------------
0000A3D8                            Map_Swi_internal:
0000A3D8 0000                       		dc.w byte_891E-Map_Swi_internal
0000A3DA 04                         byte_891E:	dc.b 4
0000A3DB E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000A3E0 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0000A3E5 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000A3EA 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000A3F0 00                         		even
0000A3F0 00                         		even
0000A3F0                            
0000A3F0                            		include	"_incObj\2A SBZ Small Door.asm"
0000A3F0                            ; ---------------------------------------------------------------------------
0000A3F0                            ; Object 2A - small vertical door (SBZ)
0000A3F0                            ; ---------------------------------------------------------------------------
0000A3F0                            
0000A3F0                            AutoDoor:
0000A3F0 7000                       		moveq	#0,d0
0000A3F2 1028 0024                  		move.b	obRoutine(a0),d0
0000A3F6 323B 0000                  		move.w	ADoor_Index(pc,d0.w),d1
0000A3FA 4EFB 1000                  		jmp	ADoor_Index(pc,d1.w)
0000A3FE                            ; ===========================================================================
0000A3FE 0000                       ADoor_Index:	dc.w ADoor_Main-ADoor_Index
0000A400 0000                       		dc.w ADoor_OpenShut-ADoor_Index
0000A402                            ; ===========================================================================
0000A402                            
0000A402                            ADoor_Main:	; Routine 0
0000A402 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A406 217C 0000 0000 0004        		move.l	#Map_ADoor,obMap(a0)
0000A40E 317C 42EA 0002             		move.w	#$42EA,obGfx(a0)
0000A414 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A41A 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A420                            		;move.b	#4,obPriority(a0)
0000A420                            
0000A420                            ADoor_OpenShut:	; Routine 2
0000A420 323C 0040                  		move.w	#$40,d1		; set range for door detection
0000A424 4228 001C                  		clr.b	obAnim(a0)	; use "closing"	animation
0000A428 3038 D008                  		move.w	(v_player+obX).w,d0
0000A42C D041                       		add.w	d1,d0
0000A42E B068 0008                  		cmp.w	obX(a0),d0
0000A432 6500                       		bcs.s	ADoor_Animate
0000A434 9041                       		sub.w	d1,d0
0000A436 9041                       		sub.w	d1,d0
0000A438 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic > $40 pixels from door?
0000A43C 6400                       		bcc.s	ADoor_Animate	; close door
0000A43E D041                       		add.w	d1,d0
0000A440 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic left of the door?
0000A444 6400                       		bcc.s	loc_899A	; if yes, branch
0000A446 0828 0000 0022             		btst	#0,obStatus(a0)
0000A44C 6600                       		bne.s	ADoor_Animate
0000A44E 6000                       		bra.s	ADoor_Open
0000A450                            ; ===========================================================================
0000A450                            
0000A450                            loc_899A:
0000A450 0828 0000 0022             		btst	#0,obStatus(a0)
0000A456 6700                       		beq.s	ADoor_Animate
0000A458                            
0000A458                            ADoor_Open:
0000A458 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "opening"	animation
0000A45E                            
0000A45E                            ADoor_Animate:
0000A45E 43F9 0000 0000             		lea	(Ani_ADoor).l,a1
0000A464 6100 0000                  		bsr.w	AnimateSprite
0000A468 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
0000A46C 6600                       		bne.s	@remember	; if yes, branch
0000A46E 323C 0011                  		move.w	#$11,d1
0000A472 343C 0020                  		move.w	#$20,d2
0000A476 3602                       		move.w	d2,d3
0000A478 5243                       		addq.w	#1,d3
0000A47A 3828 0008                  		move.w	obX(a0),d4
0000A47E 6100 0000                  		bsr.w	SolidObject
0000A482                            
0000A482                            	@remember:
0000A482 6000 0000                  		bra.w	RememberState
0000A482 6000 0000                  		bra.w	RememberState
0000A486                            		include	"_anim\SBZ Small Door.asm"
0000A486                            ; ---------------------------------------------------------------------------
0000A486                            ; Animation script - doors (SBZ)
0000A486                            ; ---------------------------------------------------------------------------
0000A486 0000                       Ani_ADoor:	dc.w @close-Ani_ADoor
0000A488 0000                       		dc.w @open-Ani_ADoor
0000A48A 0008 0706 0504 0302 0100+  @close:		dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, afBack, 1
0000A496 0000 0102 0304 0506 0708+  @open:		dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, afBack, 1
0000A4A2                            		even
0000A4A2                            		even
0000A4A2                            Map_ADoor:	include	"_maps\SBZ Small Door.asm"
0000A4A2                            ; --------------------------------------------------------------------------------
0000A4A2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A4A2                            ; --------------------------------------------------------------------------------
0000A4A2                            
0000A4A2                            SME_YnmwF:	
0000A4A2 0000 0000                  		dc.w SME_YnmwF_12-SME_YnmwF, SME_YnmwF_1D-SME_YnmwF	
0000A4A6 0000 0000                  		dc.w SME_YnmwF_28-SME_YnmwF, SME_YnmwF_33-SME_YnmwF	
0000A4AA 0000 0000                  		dc.w SME_YnmwF_3E-SME_YnmwF, SME_YnmwF_49-SME_YnmwF	
0000A4AE 0000 0000                  		dc.w SME_YnmwF_54-SME_YnmwF, SME_YnmwF_5F-SME_YnmwF	
0000A4B2 0000                       		dc.w SME_YnmwF_6A-SME_YnmwF	
0000A4B4 02                         SME_YnmwF_12:	dc.b 2	
0000A4B5 E007 0800 F8               		dc.b $E0, 7, 8, 0, $F8	
0000A4BA 0007 0800 F8               		dc.b 0, 7, 8, 0, $F8	
0000A4BF 02                         SME_YnmwF_1D:	dc.b 2	
0000A4C0 DC07 0800 F8               		dc.b $DC, 7, 8, 0, $F8	
0000A4C5 0407 0800 F8               		dc.b 4, 7, 8, 0, $F8	
0000A4CA 02                         SME_YnmwF_28:	dc.b 2	
0000A4CB D807 0800 F8               		dc.b $D8, 7, 8, 0, $F8	
0000A4D0 0807 0800 F8               		dc.b 8, 7, 8, 0, $F8	
0000A4D5 02                         SME_YnmwF_33:	dc.b 2	
0000A4D6 D407 0800 F8               		dc.b $D4, 7, 8, 0, $F8	
0000A4DB 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8	
0000A4E0 02                         SME_YnmwF_3E:	dc.b 2	
0000A4E1 D007 0800 F8               		dc.b $D0, 7, 8, 0, $F8	
0000A4E6 1007 0800 F8               		dc.b $10, 7, 8, 0, $F8	
0000A4EB 02                         SME_YnmwF_49:	dc.b 2	
0000A4EC CC07 0800 F8               		dc.b $CC, 7, 8, 0, $F8	
0000A4F1 1407 0800 F8               		dc.b $14, 7, 8, 0, $F8	
0000A4F6 02                         SME_YnmwF_54:	dc.b 2	
0000A4F7 C807 0800 F8               		dc.b $C8, 7, 8, 0, $F8	
0000A4FC 1807 0800 F8               		dc.b $18, 7, 8, 0, $F8	
0000A501 02                         SME_YnmwF_5F:	dc.b 2	
0000A502 C407 0800 F8               		dc.b $C4, 7, 8, 0, $F8	
0000A507 1C07 0800 F8               		dc.b $1C, 7, 8, 0, $F8	
0000A50C 02                         SME_YnmwF_6A:	dc.b 2	
0000A50D C007 0800 F8               		dc.b $C0, 7, 8, 0, $F8	
0000A512 2007 0800 F8               		dc.b $20, 7, 8, 0, $F8	
0000A518 00                         		even
0000A518 00                         		even
0000A518                            
0000A518                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A518                            
0000A518                            
0000A518                            Obj44_SolidWall:
0000A518 6100 0000                  		bsr.w	Obj44_SolidWall2
0000A51C 6700                       		beq.s	loc_8AA8
0000A51E 6B00 0000                  		bmi.w	loc_8AC4
0000A522 4A40                       		tst.w	d0
0000A524 6700 0000                  		beq.w	loc_8A92
0000A528 6B00                       		bmi.s	loc_8A7C
0000A52A 4A69 0010                  		tst.w	obVelX(a1)
0000A52E 6B00                       		bmi.s	loc_8A92
0000A530 6000                       		bra.s	loc_8A82
0000A532                            ; ===========================================================================
0000A532                            
0000A532                            loc_8A7C:
0000A532 4A69 0010                  		tst.w	obVelX(a1)
0000A536 6A00                       		bpl.s	loc_8A92
0000A538                            
0000A538                            loc_8A82:
0000A538 9169 0008                  		sub.w	d0,obX(a1)
0000A53C 337C 0000 0020             		move.w	#0,obInertia(a1)
0000A542 337C 0000 0010             		move.w	#0,obVelX(a1)
0000A548                            
0000A548                            loc_8A92:
0000A548 0829 0001 0022             		btst	#1,obStatus(a1)
0000A54E 6600                       		bne.s	loc_8AB6
0000A550 08E9 0005 0022             		bset	#5,obStatus(a1)
0000A556 08E8 0005 0022             		bset	#5,obStatus(a0)
0000A55C 4E75                       		rts	
0000A55E                            ; ===========================================================================
0000A55E                            
0000A55E                            loc_8AA8:
0000A55E 0828 0005 0022             		btst	#5,obStatus(a0)
0000A564 6700                       		beq.s	locret_8AC2
0000A566 337C 0000 001C             		move.w	#id_Run,obAnim(a1)
0000A56C                            
0000A56C                            loc_8AB6:
0000A56C 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000A572 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000A578                            
0000A578                            locret_8AC2:
0000A578 4E75                       		rts	
0000A57A                            ; ===========================================================================
0000A57A                            
0000A57A                            loc_8AC4:
0000A57A 4A69 0012                  		tst.w	obVelY(a1)
0000A57E 6A00                       		bpl.s	locret_8AD8
0000A580 4A43                       		tst.w	d3
0000A582 6A00                       		bpl.s	locret_8AD8
0000A584 9769 000C                  		sub.w	d3,obY(a1)
0000A588 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A58E                            
0000A58E                            locret_8AD8:
0000A58E 4E75                       		rts	
0000A590                            ; End of function Obj44_SolidWall
0000A590                            
0000A590                            
0000A590                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A590                            
0000A590                            
0000A590                            Obj44_SolidWall2:
0000A590 43F8 D000                  		lea	(v_player).w,a1
0000A594 3029 0008                  		move.w	obX(a1),d0
0000A598 9068 0008                  		sub.w	obX(a0),d0
0000A59C D041                       		add.w	d1,d0
0000A59E 6B00                       		bmi.s	loc_8B48
0000A5A0 3601                       		move.w	d1,d3
0000A5A2 D643                       		add.w	d3,d3
0000A5A4 B043                       		cmp.w	d3,d0
0000A5A6 6200                       		bhi.s	loc_8B48
0000A5A8 1629 0016                  		move.b	obHeight(a1),d3
0000A5AC 4883                       		ext.w	d3
0000A5AE D443                       		add.w	d3,d2
0000A5B0 3629 000C                  		move.w	obY(a1),d3
0000A5B4 9668 000C                  		sub.w	obY(a0),d3
0000A5B8 D642                       		add.w	d2,d3
0000A5BA 6B00                       		bmi.s	loc_8B48
0000A5BC 3802                       		move.w	d2,d4
0000A5BE D844                       		add.w	d4,d4
0000A5C0 B644                       		cmp.w	d4,d3
0000A5C2 6400                       		bhs.s	loc_8B48
0000A5C4 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000A5C8 6B00                       		bmi.s	loc_8B48
0000A5CA 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000A5D0 6400                       		bhs.s	loc_8B48
0000A5D2 4A78 FE08                  		tst.w	(v_debuguse).w
0000A5D6 6600                       		bne.s	loc_8B48
0000A5D8 3A00                       		move.w	d0,d5
0000A5DA B240                       		cmp.w	d0,d1
0000A5DC 6400                       		bhs.s	loc_8B30
0000A5DE D241                       		add.w	d1,d1
0000A5E0 9041                       		sub.w	d1,d0
0000A5E2 3A00                       		move.w	d0,d5
0000A5E4 4445                       		neg.w	d5
0000A5E6                            
0000A5E6                            loc_8B30:
0000A5E6 3203                       		move.w	d3,d1
0000A5E8 B443                       		cmp.w	d3,d2
0000A5EA 6400                       		bhs.s	loc_8B3C
0000A5EC 9644                       		sub.w	d4,d3
0000A5EE 3203                       		move.w	d3,d1
0000A5F0 4441                       		neg.w	d1
0000A5F2                            
0000A5F2                            loc_8B3C:
0000A5F2 BA41                       		cmp.w	d1,d5
0000A5F4 6200                       		bhi.s	loc_8B44
0000A5F6 7801                       		moveq	#1,d4
0000A5F8 4E75                       		rts	
0000A5FA                            ; ===========================================================================
0000A5FA                            
0000A5FA                            loc_8B44:
0000A5FA 78FF                       		moveq	#-1,d4
0000A5FC 4E75                       		rts	
0000A5FE                            ; ===========================================================================
0000A5FE                            
0000A5FE                            loc_8B48:
0000A5FE 7800                       		moveq	#0,d4
0000A600 4E75                       		rts	
0000A602                            ; End of function Obj44_SolidWall2
0000A602                            
0000A602                            ; ===========================================================================
0000A602                            
0000A602                            		include	"_incObj\1E Ball Hog.asm"
0000A602                            ; ---------------------------------------------------------------------------
0000A602                            ; Object 1E - Ball Hog enemy (SBZ)
0000A602                            ; ---------------------------------------------------------------------------
0000A602                            
0000A602                            BallHog:
0000A602 7000                       		moveq	#0,d0
0000A604 1028 0024                  		move.b	obRoutine(a0),d0
0000A608 323B 0000                  		move.w	Hog_Index(pc,d0.w),d1
0000A60C 4EFB 1000                  		jmp	Hog_Index(pc,d1.w)
0000A610                            ; ===========================================================================
0000A610 0000                       Hog_Index:	dc.w Hog_Main-Hog_Index
0000A612 0000                       		dc.w Hog_Action-Hog_Index
0000A614                            
0000A614 =00000032                  hog_launchflag:	equ $32		; 0 to launch a cannonball
0000A614                            ; ===========================================================================
0000A614                            
0000A614                            Hog_Main:	; Routine 0
0000A614 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000A61A 117C 0008 0017             		move.b	#8,obWidth(a0)
0000A620 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A628 317C 0302 0002             		move.w	#$302,obGfx(a0)
0000A62E 117C 0004 0001             		move.b	#4,obRender(a0)
0000A634 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000A63A 117C 0005 0020             		move.b	#5,obColType(a0)
0000A640 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A646 6100 0000                  		bsr.w	ObjectFall
0000A64A 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000A650 4A41                       		tst.w	d1
0000A652 6A00                       		bpl.s	@floornotfound
0000A654 D368 000C                  		add.w	d1,obY(a0)
0000A658 317C 0000 0012             		move.w	#0,obVelY(a0)
0000A65E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A662                            
0000A662                            	@floornotfound:
0000A662 4E75                       		rts	
0000A664                            ; ===========================================================================
0000A664                            
0000A664                            Hog_Action:	; Routine 2
0000A664 43F9 0000 0000             		lea	(Ani_Hog).l,a1
0000A66A 6100 0000                  		bsr.w	AnimateSprite
0000A66E 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is final frame (01) displayed?
0000A674 6600                       		bne.s	@setlaunchflag	; if not, branch
0000A676 4A28 0032                  		tst.b	hog_launchflag(a0)	; is it	set to launch cannonball?
0000A67A 6700                       		beq.s	@makeball	; if yes, branch
0000A67C 6000                       		bra.s	@remember
0000A67E                            ; ===========================================================================
0000A67E                            
0000A67E                            @setlaunchflag:
0000A67E 4228 0032                  		clr.b	hog_launchflag(a0)	; set to launch	cannonball
0000A682                            
0000A682                            @remember:
0000A682 6000 0000                  		bra.w	RememberState
0000A686                            ; ===========================================================================
0000A686                            
0000A686                            @makeball:
0000A686 117C 0001 0032             		move.b	#1,hog_launchflag(a0)
0000A68C 6100 0000                  		bsr.w	FindFreeObj
0000A690 6600                       		bne.s	@fail
0000A692 12BC 0000                  		move.b	#id_Cannonball,0(a1) ; load cannonball object ($20)
0000A696 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A69C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A6A2 337C FF00 0010             		move.w	#-$100,obVelX(a1) ; cannonball bounces to the left
0000A6A8 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A6AE 70FC                       		moveq	#-4,d0
0000A6B0 0828 0000 0022             		btst	#0,obStatus(a0)	; is Ball Hog facing right?
0000A6B6 6700                       		beq.s	@noflip		; if not, branch
0000A6B8 4440                       		neg.w	d0
0000A6BA 4469 0010                  		neg.w	obVelX(a1)	; cannonball bounces to	the right
0000A6BE                            
0000A6BE                            	@noflip:
0000A6BE D169 0008                  		add.w	d0,obX(a1)
0000A6C2 0669 000C 000C             		addi.w	#$C,obY(a1)
0000A6C8 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1) ; copy object type from Ball Hog
0000A6CE                            
0000A6CE                            	@fail:
0000A6CE 60B2                       		bra.s	@remember
0000A6CE 60B2                       		bra.s	@remember
0000A6D0                            		include	"_incObj\20 Cannonball.asm"
0000A6D0                            ; ---------------------------------------------------------------------------
0000A6D0                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000A6D0                            ; ---------------------------------------------------------------------------
0000A6D0                            
0000A6D0                            Cannonball:
0000A6D0 7000                       		moveq	#0,d0
0000A6D2 1028 0024                  		move.b	obRoutine(a0),d0
0000A6D6 323B 0000                  		move.w	Cbal_Index(pc,d0.w),d1
0000A6DA 4EFB 1000                  		jmp	Cbal_Index(pc,d1.w)
0000A6DE                            ; ===========================================================================
0000A6DE 0000                       Cbal_Index:	dc.w Cbal_Main-Cbal_Index
0000A6E0 0000                       		dc.w Cbal_Bounce-Cbal_Index
0000A6E2                            
0000A6E2 =00000030                  cbal_time:	equ $30		; time until the cannonball explodes (2 bytes)
0000A6E2                            ; ===========================================================================
0000A6E2                            
0000A6E2                            Cbal_Main:	; Routine 0
0000A6E2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A6E6 117C 0007 0016             		move.b	#7,obHeight(a0)
0000A6EC 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A6F4 317C 2302 0002             		move.w	#$2302,obGfx(a0)
0000A6FA 117C 0004 0001             		move.b	#4,obRender(a0)
0000A700 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000A706 117C 0087 0020             		move.b	#$87,obColType(a0)
0000A70C 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A712 7000                       		moveq	#0,d0
0000A714 1028 0028                  		move.b	obSubtype(a0),d0 ; move subtype to d0
0000A718 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000A71C 3140 0030                  		move.w	d0,cbal_time(a0) ; set explosion time
0000A720 117C 0004 001A             		move.b	#4,obFrame(a0)
0000A726                            
0000A726                            Cbal_Bounce:	; Routine 2
0000A726 4EB9 0000 0000             		jsr	(ObjectFall).l
0000A72C 4A68 0012                  		tst.w	obVelY(a0)
0000A730 6B00                       		bmi.s	Cbal_ChkExplode
0000A732 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A738 4A41                       		tst.w	d1		; has ball hit the floor?
0000A73A 6A00                       		bpl.s	Cbal_ChkExplode	; if not, branch
0000A73C                            
0000A73C D368 000C                  		add.w	d1,obY(a0)
0000A740 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; bounce
0000A746 4A03                       		tst.b	d3
0000A748 6700                       		beq.s	Cbal_ChkExplode
0000A74A 6B00                       		bmi.s	loc_8CA4
0000A74C 4A68 0010                  		tst.w	obVelX(a0)
0000A750 6A00                       		bpl.s	Cbal_ChkExplode
0000A752 4468 0010                  		neg.w	obVelX(a0)
0000A756 6000                       		bra.s	Cbal_ChkExplode
0000A758                            ; ===========================================================================
0000A758                            
0000A758                            loc_8CA4:
0000A758 4A68 0010                  		tst.w	obVelX(a0)
0000A75C 6B00                       		bmi.s	Cbal_ChkExplode
0000A75E 4468 0010                  		neg.w	obVelX(a0)
0000A762                            
0000A762                            Cbal_ChkExplode:
0000A762 5368 0030                  		subq.w	#1,cbal_time(a0) ; subtract 1 from explosion time
0000A766 6A00                       		bpl.s	Cbal_Animate	; if time is > 0, branch
0000A768                            
0000A768                            	Cbal_Explode:
0000A768 10BC 0000                  		move.b	#id_MissileDissolve,0(a0)
0000A76C 10BC 0000                  		move.b	#id_ExplosionBomb,0(a0)	; change object	to an explosion	($3F)
0000A770 117C 0000 0024             		move.b	#0,obRoutine(a0) ; reset routine counter
0000A776 6000 0000                  		bra.w	ExplosionBomb	; jump to explosion code
0000A77A                            ; ===========================================================================
0000A77A                            
0000A77A                            Cbal_Animate:
0000A77A 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A77E 6A00                       		bpl.s	Cbal_Display
0000A780 117C 0005 001E             		move.b	#5,obTimeFrame(a0) ; set frame duration to 5 frames
0000A786 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
0000A78C                            
0000A78C                            Cbal_Display:
0000A78C 6100 0000                  		bsr.w	DisplaySprite
0000A790 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000A794 0640 00E0                  		addi.w	#$E0,d0
0000A798 B068 000C                  		cmp.w	obY(a0),d0	; has object fallen off	the level?
0000A79C 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000A7A0 4E75                       		rts	
0000A7A0 4E75                       		rts	
0000A7A2                            		include	"_incObj\24, 27 & 3F Explosions.asm"
0000A7A2                            ; ---------------------------------------------------------------------------
0000A7A2                            ; Object 24 - buzz bomber missile vanishing (unused?)
0000A7A2                            ; ---------------------------------------------------------------------------
0000A7A2                            
0000A7A2                            MissileDissolve:
0000A7A2 7000                       		moveq	#0,d0
0000A7A4 1028 0024                  		move.b	obRoutine(a0),d0
0000A7A8 323B 0000                  		move.w	MDis_Index(pc,d0.w),d1
0000A7AC 4EFB 1000                  		jmp	MDis_Index(pc,d1.w)
0000A7B0                            ; ===========================================================================
0000A7B0 0000                       MDis_Index:	dc.w MDis_Main-MDis_Index
0000A7B2 0000                       		dc.w MDis_Animate-MDis_Index
0000A7B4                            ; ===========================================================================
0000A7B4                            
0000A7B4                            MDis_Main:	; Routine 0
0000A7B4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A7B8 217C 0000 0000 0004        		move.l	#Map_MisDissolve,obMap(a0)
0000A7C0 317C 041C 0002             		move.w	#$41C,obGfx(a0)
0000A7C6 117C 0004 0001             		move.b	#4,obRender(a0)
0000A7CC 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A7D2 117C 0000 0020             		move.b	#0,obColType(a0)
0000A7D8 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A7DE 117C 0009 001E             		move.b	#9,obTimeFrame(a0)
0000A7E4 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A7F4                            
0000A7F4                            MDis_Animate:	; Routine 2
0000A7F4 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A7F8 6A00                       		bpl.s	@display
0000A7FA 117C 0009 001E             		move.b	#9,obTimeFrame(a0) ; set frame duration to 9 frames
0000A800 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000A804 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has animation completed?
0000A80A 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A80E                            
0000A80E                            	@display:
0000A80E 6000 0000                  		bra.w	DisplaySprite
0000A812                            ; ===========================================================================
0000A812                            
0000A812                            ; ---------------------------------------------------------------------------
0000A812                            ; Object 27 - explosion	from a destroyed enemy or monitor
0000A812                            ; ---------------------------------------------------------------------------
0000A812                            
0000A812                            ExplosionItem:
0000A812 7000                       		moveq	#0,d0
0000A814 1028 0024                  		move.b	obRoutine(a0),d0
0000A818 323B 0000                  		move.w	ExItem_Index(pc,d0.w),d1
0000A81C 4EFB 1000                  		jmp	ExItem_Index(pc,d1.w)
0000A820                            ; ===========================================================================
0000A820 0000                       ExItem_Index:	dc.w ExItem_Animal-ExItem_Index
0000A822 0000                       		dc.w ExItem_Main-ExItem_Index
0000A824 0000                       		dc.w ExItem_Animate-ExItem_Index
0000A826                            ; ===========================================================================
0000A826                            
0000A826                            ExItem_Animal:	; Routine 0
0000A826 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A82A 6100 0000                  		bsr.w	FindFreeObj
0000A82E 6600                       		bne.s	ExItem_Main
0000A830 12BC 0000                  		move.b	#id_Animals,0(a1) ; load animal object
0000A834 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A83A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A840 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000A846                            
0000A846                            ExItem_Main:	; Routine 2
0000A846 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A84A 217C 0000 0000 0004        		move.l	#Map_ExplodeItem,obMap(a0)
0000A852 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000A858 117C 0004 0001             		move.b	#4,obRender(a0)
0000A85E 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A864 117C 0000 0020             		move.b	#0,obColType(a0)
0000A86A 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A870 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000A876 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A886                            
0000A886                            ExItem_Animate:	; Routine 4 (2 for ExplosionBomb)
0000A886 5528 001E                  		subq.b	#2,obTimeFrame(a0) ; subtract 1 from frame duration
0000A88A 6A00                       		bpl.s	@display
0000A88C 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000A892 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000A896 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is the final frame (05) displayed?
0000A89C 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A8A0                            
0000A8A0                            	@display:
0000A8A0 6000 0000                  		bra.w	DisplaySprite
0000A8A4                            ; ===========================================================================
0000A8A4                            ; ---------------------------------------------------------------------------
0000A8A4                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000A8A4                            ; ---------------------------------------------------------------------------
0000A8A4                            
0000A8A4                            ExplosionBomb:
0000A8A4 7000                       		moveq	#0,d0
0000A8A6 1028 0024                  		move.b	obRoutine(a0),d0
0000A8AA 323B 0000                  		move.w	ExBom_Index(pc,d0.w),d1
0000A8AE 4EFB 1000                  		jmp	ExBom_Index(pc,d1.w)
0000A8B2                            ; ===========================================================================
0000A8B2 0000                       ExBom_Index:	dc.w ExBom_Main-ExBom_Index
0000A8B4 FFD4                       		dc.w ExItem_Animate-ExBom_Index
0000A8B6                            ; ===========================================================================
0000A8B6                            
0000A8B6                            ExBom_Main:	; Routine 0
0000A8B6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A8BA 217C 0000 0000 0004        		move.l	#Map_ExplodeBomb,obMap(a0)
0000A8C2 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000A8C8 117C 0004 0001             		move.b	#4,obRender(a0)
0000A8CE 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A8D4 117C 0000 0020             		move.b	#0,obColType(a0)
0000A8DA 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A8E0 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000A8E6 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A8F6                            		include	"_anim\Ball Hog.asm"
0000A8F6                            ; ---------------------------------------------------------------------------
0000A8F6                            ; Animation script - doors (SBZ)
0000A8F6                            ; ---------------------------------------------------------------------------
0000A8F6 0000                       Ani_Hog:	dc.w @hog-Ani_Hog
0000A8F8 0900 0002 0203 0200 0002+  @hog:		dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, afEnd
0000A910 00                         		even
0000A910 00                         		even
0000A910                            Map_Hog:	include	"_maps\Ball Hog.asm"
0000A910                            ; --------------------------------------------------------------------------------
0000A910                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A910                            ; --------------------------------------------------------------------------------
0000A910                            
0000A910                            SME_ZER01:	
0000A910 0000 0000                  		dc.w SME_ZER01_C-SME_ZER01, SME_ZER01_17-SME_ZER01	
0000A914 0000 0000                  		dc.w SME_ZER01_22-SME_ZER01, SME_ZER01_2D-SME_ZER01	
0000A918 0000 0000                  		dc.w SME_ZER01_38-SME_ZER01, SME_ZER01_3E-SME_ZER01	
0000A91C 02                         SME_ZER01_C:	dc.b 2	
0000A91D EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000A922 FF0A 2006 F4               		dc.b $FF, $A, $20, 6, $F4	
0000A927 02                         SME_ZER01_17:	dc.b 2	
0000A928 EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000A92D FF0A 200F F4               		dc.b $FF, $A, $20, $F, $F4	
0000A932 02                         SME_ZER01_22:	dc.b 2	
0000A933 F409 2000 F4               		dc.b $F4, 9, $20, 0, $F4	
0000A938 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000A93D 02                         SME_ZER01_2D:	dc.b 2	
0000A93E E409 2000 F4               		dc.b $E4, 9, $20, 0, $F4	
0000A943 F40A 201E F4               		dc.b $F4, $A, $20, $1E, $F4	
0000A948 01                         SME_ZER01_38:	dc.b 1	
0000A949 F805 0027 F8               		dc.b $F8, 5, 0, $27, $F8	
0000A94E 01                         SME_ZER01_3E:	dc.b 1	
0000A94F F805 602B F8               		dc.b $F8, 5, $60, $2B, $F8	
0000A954                            		even
0000A954                            		even
0000A954                            Map_MisDissolve:include	"_maps\Buzz Bomber Missile Dissolve.asm"
0000A954                            ; ---------------------------------------------------------------------------
0000A954                            ; Sprite mappings - buzz bomber missile vanishing
0000A954                            ; ---------------------------------------------------------------------------
0000A954                            Map_MisDissolve_internal:
0000A954 0000                       		dc.w byte_8EAE-Map_MisDissolve_internal
0000A956 0000                       		dc.w byte_8EB4-Map_MisDissolve_internal
0000A958 0000                       		dc.w byte_8EBA-Map_MisDissolve_internal
0000A95A 0000                       		dc.w byte_8EC0-Map_MisDissolve_internal
0000A95C 01                         byte_8EAE:	dc.b 1
0000A95D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000A962 01                         byte_8EB4:	dc.b 1
0000A963 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000A968 01                         byte_8EBA:	dc.b 1
0000A969 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000A96E 01                         byte_8EC0:	dc.b 1
0000A96F F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000A974                            		even
0000A974                            		even
0000A974                            		include	"_maps\Explosions.asm"
0000A974                            ; ---------------------------------------------------------------------------
0000A974                            ; Sprite mappings - explosion from a badnik or monitor
0000A974                            ; ---------------------------------------------------------------------------
0000A974 0000 0000                  Map_ExplodeItem:dc.w byte_8ED0-Map_ExplodeItem, byte_8ED6-Map_ExplodeItem
0000A978 0000 0000                  		dc.w byte_8EDC-Map_ExplodeItem, byte_8EE2-Map_ExplodeItem
0000A97C 0000                       		dc.w byte_8EF7-Map_ExplodeItem
0000A97E 01                         byte_8ED0:	dc.b 1
0000A97F F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000A984 01                         byte_8ED6:	dc.b 1
0000A985 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000A98A 01                         byte_8EDC:	dc.b 1
0000A98B F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000A990 04                         byte_8EE2:	dc.b 4
0000A991 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000A996 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000A99B 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000A9A0 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000A9A5 04                         byte_8EF7:	dc.b 4
0000A9A6 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000A9AB EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000A9B0 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000A9B5 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000A9BA                            		even
0000A9BA                            ; ---------------------------------------------------------------------------
0000A9BA                            ; Sprite mappings - explosion from when	a boss is destroyed
0000A9BA                            ; ---------------------------------------------------------------------------
0000A9BA FFC4                       Map_ExplodeBomb:dc.w byte_8ED0-Map_ExplodeBomb
0000A9BC 0000                       		dc.w byte_8F16-Map_ExplodeBomb
0000A9BE 0000                       		dc.w byte_8F1C-Map_ExplodeBomb
0000A9C0 FFD6                       		dc.w byte_8EE2-Map_ExplodeBomb
0000A9C2 FFEB                       		dc.w byte_8EF7-Map_ExplodeBomb
0000A9C4 01                         byte_8F16:	dc.b 1
0000A9C5 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000A9CA 01                         byte_8F1C:	dc.b 1
0000A9CB F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000A9D0                            		even
0000A9D0                            		even
0000A9D0                            
0000A9D0                            		include	"_incObj\28 Animals.asm"
0000A9D0                            ; ---------------------------------------------------------------------------
0000A9D0                            ; Object 28 - animals
0000A9D0                            ; ---------------------------------------------------------------------------
0000A9D0                            
0000A9D0                            Animals:
0000A9D0 7000                       		moveq	#0,d0
0000A9D2 1028 0024                  		move.b	obRoutine(a0),d0
0000A9D6 323B 0000                  		move.w	Anml_Index(pc,d0.w),d1
0000A9DA 4EFB 1000                  		jmp	Anml_Index(pc,d1.w)
0000A9DE                            ; ===========================================================================
0000A9DE 0000 0000                  Anml_Index:	dc.w Anml_Ending-Anml_Index, loc_912A-Anml_Index
0000A9E2 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000A9E6 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9184-Anml_Index
0000A9EA 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000A9EE 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9240-Anml_Index
0000A9F2 0000 0000                  		dc.w loc_9260-Anml_Index, loc_9260-Anml_Index
0000A9F6 0000 0000                  		dc.w loc_9280-Anml_Index, loc_92BA-Anml_Index
0000A9FA 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000A9FE 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000AA02 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9370-Anml_Index
0000AA06 0000                       		dc.w loc_92D6-Anml_Index
0000AA08                            
0000AA08 0005 0203 0603 0405 0401+  Anml_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000AA14                            
0000AA14 FE00 FC00                  Anml_Variables:	dc.w $FE00, $FC00
0000AA18 0000 0000                  		dc.l Map_Animal1
0000AA1C FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000AA20 0000 0000                  		dc.l Map_Animal2	; mappings address
0000AA24 FE80 FD00                  		dc.w $FE80, $FD00
0000AA28 0000 0000                  		dc.l Map_Animal1
0000AA2C FEC0 FE80                  		dc.w $FEC0, $FE80
0000AA30 0000 0000                  		dc.l Map_Animal2
0000AA34 FE40 FD00                  		dc.w $FE40, $FD00
0000AA38 0000 0000                  		dc.l Map_Animal3
0000AA3C FD00 FC00                  		dc.w $FD00, $FC00
0000AA40 0000 0000                  		dc.l Map_Animal2
0000AA44 FD80 FC80                  		dc.w $FD80, $FC80
0000AA48 0000 0000                  		dc.l Map_Animal3
0000AA4C                            
0000AA4C FBC0 FC00 FBC0 FC00 FBC0+  Anml_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000AA5C FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000AA6C FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000AA78                            
0000AA78 0000 0000 0000 0000 0000+  Anml_EndMap:	dc.l Map_Animal2, Map_Animal2, Map_Animal2, Map_Animal1, Map_Animal1
0000AA8C 0000 0000 0000 0000 0000+  		dc.l Map_Animal1, Map_Animal1, Map_Animal2, Map_Animal3, Map_Animal2
0000AAA0 0000 0000                  		dc.l Map_Animal3
0000AAA4                            
0000AAA4 05A5 05A5 05A5 0553 0553+  Anml_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000AAB6 0565 05B3                  		dc.w $565, $5B3
0000AABA                            ; ===========================================================================
0000AABA                            
0000AABA                            Anml_Ending:	; Routine 0
0000AABA 4A28 0028                  		tst.b	obSubtype(a0)	; did animal come from a destroyed enemy?
0000AABE 6700 0000                  		beq.w	Anml_FromEnemy	; if yes, branch
0000AAC2 7000                       		moveq	#0,d0
0000AAC4 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type to d0
0000AAC8 D040                       		add.w	d0,d0		; multiply d0 by 2
0000AACA 1140 0024                  		move.b	d0,obRoutine(a0) ; move d0 to routine counter
0000AACE 0440 0014                  		subi.w	#$14,d0
0000AAD2 317B 00D0 0002             		move.w	Anml_EndVram(pc,d0.w),obGfx(a0)
0000AAD8 D040                       		add.w	d0,d0
0000AADA 217B 009C 0004             		move.l	Anml_EndMap(pc,d0.w),obMap(a0)
0000AAE0 43FA FF6A                  		lea	Anml_EndSpeed(pc),a1
0000AAE4 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000AAEA 3171 0000 0010             		move.w	(a1,d0.w),obVelX(a0)
0000AAF0 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000AAF6 3171 0002 0012             		move.w	2(a1,d0.w),obVelY(a0)
0000AAFC 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000AB02 117C 0004 0001             		move.b	#4,obRender(a0)
0000AB08 08E8 0000 0001             		bset	#0,obRender(a0)
0000AB0E 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000AB14 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AB1A 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000AB20 6000 0000                  		bra.w	DisplaySprite
0000AB24                            ; ===========================================================================
0000AB24                            
0000AB24                            Anml_FromEnemy:
0000AB24 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AB28 6100 91D8                  		bsr.w	RandomNumber
0000AB2C 0240 0001                  		andi.w	#1,d0
0000AB30 7200                       		moveq	#0,d1
0000AB32 1238 FE10                  		move.b	(v_zone).w,d1
0000AB36 D241                       		add.w	d1,d1
0000AB38 D240                       		add.w	d0,d1
0000AB3A 43FA FECC                  		lea	Anml_VarIndex(pc),a1
0000AB3E 1031 1000                  		move.b	(a1,d1.w),d0
0000AB42 1140 0030                  		move.b	d0,$30(a0)
0000AB46 E748                       		lsl.w	#3,d0
0000AB48 43FA FECA                  		lea	Anml_Variables(pc),a1
0000AB4C D2C0                       		adda.w	d0,a1
0000AB4E 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000AB52 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000AB56 2159 0004                  		move.l	(a1)+,obMap(a0)	; load mappings
0000AB5A 317C 0580 0002             		move.w	#$580,obGfx(a0)	; VRAM setting for 1st animal
0000AB60 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000AB66 6700                       		beq.s	loc_90C0	; if yes, branch
0000AB68 317C 0592 0002             		move.w	#$592,obGfx(a0)	; VRAM setting for 2nd animal
0000AB6E                            
0000AB6E                            loc_90C0:
0000AB6E 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000AB74 117C 0004 0001             		move.b	#4,obRender(a0)
0000AB7A 08E8 0000 0001             		bset	#0,obRender(a0)
0000AB80 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000AB86 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AB8C 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000AB92 117C 0002 001A             		move.b	#2,obFrame(a0)
0000AB98 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000AB9E 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000ABA2 6600                       		bne.s	loc_911C
0000ABA4 6100 0000                  		bsr.w	FindFreeObj
0000ABA8 6600                       		bne.s	Anml_Display
0000ABAA 12BC 0000                  		move.b	#id_Points,0(a1) ; load points object
0000ABAE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000ABB4 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000ABBA 3028 003E                  		move.w	$3E(a0),d0
0000ABBE E248                       		lsr.w	#1,d0
0000ABC0 1340 001A                  		move.b	d0,obFrame(a1)
0000ABC4                            
0000ABC4                            Anml_Display:
0000ABC4 6000 0000                  		bra.w	DisplaySprite
0000ABC8                            ; ===========================================================================
0000ABC8                            
0000ABC8                            loc_911C:
0000ABC8 117C 0012 0024             		move.b	#$12,obRoutine(a0)
0000ABCE 4268 0010                  		clr.w	obVelX(a0)
0000ABD2 6000 0000                  		bra.w	DisplaySprite
0000ABD6                            ; ===========================================================================
0000ABD6                            
0000ABD6                            loc_912A:
0000ABD6 4A28 0001                  		tst.b	obRender(a0)
0000ABDA 6A00 0000                  		bpl.w	DeleteObject
0000ABDE 6100 0000                  		bsr.w	ObjectFall
0000ABE2 4A68 0012                  		tst.w	obVelY(a0)
0000ABE6 6B00                       		bmi.s	loc_9180
0000ABE8 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000ABEE 4A41                       		tst.w	d1
0000ABF0 6A00                       		bpl.s	loc_9180
0000ABF2 D368 000C                  		add.w	d1,obY(a0)
0000ABF6 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000ABFC 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AC02 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AC08 1028 0030                  		move.b	$30(a0),d0
0000AC0C D000                       		add.b	d0,d0
0000AC0E 5800                       		addq.b	#4,d0
0000AC10 1140 0024                  		move.b	d0,obRoutine(a0)
0000AC14 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000AC18 6700                       		beq.s	loc_9180
0000AC1A 0838 0004 FE0F             		btst	#4,(v_vbla_byte).w
0000AC20 6700                       		beq.s	loc_9180
0000AC22 4468 0010                  		neg.w	obVelX(a0)
0000AC26 0868 0000 0001             		bchg	#0,obRender(a0)
0000AC2C                            
0000AC2C                            loc_9180:
0000AC2C 6000 0000                  		bra.w	DisplaySprite
0000AC30                            ; ===========================================================================
0000AC30                            
0000AC30                            loc_9184:
0000AC30 6100 0000                  		bsr.w	ObjectFall
0000AC34 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AC3A 4A68 0012                  		tst.w	obVelY(a0)
0000AC3E 6B00                       		bmi.s	loc_91AE
0000AC40 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AC46 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AC4C 4A41                       		tst.w	d1
0000AC4E 6A00                       		bpl.s	loc_91AE
0000AC50 D368 000C                  		add.w	d1,obY(a0)
0000AC54 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AC5A                            
0000AC5A                            loc_91AE:
0000AC5A 4A28 0028                  		tst.b	obSubtype(a0)
0000AC5E 6600                       		bne.s	loc_9224
0000AC60 4A28 0001                  		tst.b	obRender(a0)
0000AC64 6A00 0000                  		bpl.w	DeleteObject
0000AC68 6000 0000                  		bra.w	DisplaySprite
0000AC6C                            ; ===========================================================================
0000AC6C                            
0000AC6C                            loc_91C0:
0000AC6C 6100 0000                  		bsr.w	SpeedToPos
0000AC70 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AC76 4A68 0012                  		tst.w	obVelY(a0)
0000AC7A 6B00                       		bmi.s	loc_91FC
0000AC7C 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AC82 4A41                       		tst.w	d1
0000AC84 6A00                       		bpl.s	loc_91FC
0000AC86 D368 000C                  		add.w	d1,obY(a0)
0000AC8A 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AC90 4A28 0028                  		tst.b	obSubtype(a0)
0000AC94 6700                       		beq.s	loc_91FC
0000AC96 0C28 000A 0028             		cmpi.b	#$A,obSubtype(a0)
0000AC9C 6700                       		beq.s	loc_91FC
0000AC9E 4468 0010                  		neg.w	obVelX(a0)
0000ACA2 0868 0000 0001             		bchg	#0,obRender(a0)
0000ACA8                            
0000ACA8                            loc_91FC:
0000ACA8 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000ACAC 6A00                       		bpl.s	loc_9212
0000ACAE 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000ACB4 5228 001A                  		addq.b	#1,obFrame(a0)
0000ACB8 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000ACBE                            
0000ACBE                            loc_9212:
0000ACBE 4A28 0028                  		tst.b	obSubtype(a0)
0000ACC2 6600                       		bne.s	loc_9224
0000ACC4 4A28 0001                  		tst.b	obRender(a0)
0000ACC8 6A00 0000                  		bpl.w	DeleteObject
0000ACCC 6000 0000                  		bra.w	DisplaySprite
0000ACD0                            ; ===========================================================================
0000ACD0                            
0000ACD0                            loc_9224:
0000ACD0 3028 0008                  		move.w	obX(a0),d0
0000ACD4 9078 D008                  		sub.w	(v_player+obX).w,d0
0000ACD8 6500                       		bcs.s	loc_923C
0000ACDA 0440 0180                  		subi.w	#$180,d0
0000ACDE 6A00                       		bpl.s	loc_923C
0000ACE0 4A28 0001                  		tst.b	obRender(a0)
0000ACE4 6A00 0000                  		bpl.w	DeleteObject
0000ACE8                            
0000ACE8                            loc_923C:
0000ACE8 6000 0000                  		bra.w	DisplaySprite
0000ACEC                            ; ===========================================================================
0000ACEC                            
0000ACEC                            loc_9240:
0000ACEC 4A28 0001                  		tst.b	obRender(a0)
0000ACF0 6A00 0000                  		bpl.w	DeleteObject
0000ACF4 5368 0036                  		subq.w	#1,$36(a0)
0000ACF8 6600 0000                  		bne.w	loc_925C
0000ACFC 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000AD02 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000AD08                            
0000AD08                            loc_925C:
0000AD08 6000 0000                  		bra.w	DisplaySprite
0000AD0C                            ; ===========================================================================
0000AD0C                            
0000AD0C                            loc_9260:
0000AD0C 6100 0000                  		bsr.w	sub_9404
0000AD10 6400                       		bcc.s	loc_927C
0000AD12 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AD18 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AD1E 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000AD24 6000 FF46                  		bra.w	loc_91C0
0000AD28                            ; ===========================================================================
0000AD28                            
0000AD28                            loc_927C:
0000AD28 6000 FFA6                  		bra.w	loc_9224
0000AD2C                            ; ===========================================================================
0000AD2C                            
0000AD2C                            loc_9280:
0000AD2C 6100 0000                  		bsr.w	sub_9404
0000AD30 6A00                       		bpl.s	loc_92B6
0000AD32 4268 0010                  		clr.w	obVelX(a0)
0000AD36 4268 0032                  		clr.w	$32(a0)
0000AD3A 6100 0000                  		bsr.w	SpeedToPos
0000AD3E 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AD44 6100 0000                  		bsr.w	loc_93C4
0000AD48 6100 0000                  		bsr.w	loc_93EC
0000AD4C 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AD50 6A00                       		bpl.s	loc_92B6
0000AD52 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AD58 5228 001A                  		addq.b	#1,obFrame(a0)
0000AD5C 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AD62                            
0000AD62                            loc_92B6:
0000AD62 6000 FF6C                  		bra.w	loc_9224
0000AD66                            ; ===========================================================================
0000AD66                            
0000AD66                            loc_92BA:
0000AD66 6100 0000                  		bsr.w	sub_9404
0000AD6A 6A00                       		bpl.s	loc_9310
0000AD6C 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AD72 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AD78 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000AD7E 6000 FEB0                  		bra.w	loc_9184
0000AD82                            ; ===========================================================================
0000AD82                            
0000AD82                            loc_92D6:
0000AD82 6100 0000                  		bsr.w	ObjectFall
0000AD86 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AD8C 4A68 0012                  		tst.w	obVelY(a0)
0000AD90 6B00                       		bmi.s	loc_9310
0000AD92 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AD98 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AD9E 4A41                       		tst.w	d1
0000ADA0 6A00                       		bpl.s	loc_9310
0000ADA2 4628 0029                  		not.b	$29(a0)
0000ADA6 6600                       		bne.s	loc_9306
0000ADA8 4468 0010                  		neg.w	obVelX(a0)
0000ADAC 0868 0000 0001             		bchg	#0,obRender(a0)
0000ADB2                            
0000ADB2                            loc_9306:
0000ADB2 D368 000C                  		add.w	d1,obY(a0)
0000ADB6 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ADBC                            
0000ADBC                            loc_9310:
0000ADBC 6000 FF12                  		bra.w	loc_9224
0000ADC0                            ; ===========================================================================
0000ADC0                            
0000ADC0                            loc_9314:
0000ADC0 6100 0000                  		bsr.w	sub_9404
0000ADC4 6A00                       		bpl.s	loc_932E
0000ADC6 4268 0010                  		clr.w	obVelX(a0)
0000ADCA 4268 0032                  		clr.w	$32(a0)
0000ADCE 6100 0000                  		bsr.w	ObjectFall
0000ADD2 6100 0000                  		bsr.w	loc_93C4
0000ADD6 6100 0000                  		bsr.w	loc_93EC
0000ADDA                            
0000ADDA                            loc_932E:
0000ADDA 6000 FEF4                  		bra.w	loc_9224
0000ADDE                            ; ===========================================================================
0000ADDE                            
0000ADDE                            loc_9332:
0000ADDE 6100 0000                  		bsr.w	sub_9404
0000ADE2 6A00                       		bpl.s	loc_936C
0000ADE4 6100 0000                  		bsr.w	ObjectFall
0000ADE8 117C 0001 001A             		move.b	#1,obFrame(a0)
0000ADEE 4A68 0012                  		tst.w	obVelY(a0)
0000ADF2 6B00                       		bmi.s	loc_936C
0000ADF4 117C 0000 001A             		move.b	#0,obFrame(a0)
0000ADFA 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AE00 4A41                       		tst.w	d1
0000AE02 6A00                       		bpl.s	loc_936C
0000AE04 4468 0010                  		neg.w	obVelX(a0)
0000AE08 0868 0000 0001             		bchg	#0,obRender(a0)
0000AE0E D368 000C                  		add.w	d1,obY(a0)
0000AE12 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AE18                            
0000AE18                            loc_936C:
0000AE18 6000 FEB6                  		bra.w	loc_9224
0000AE1C                            ; ===========================================================================
0000AE1C                            
0000AE1C                            loc_9370:
0000AE1C 6100 0000                  		bsr.w	sub_9404
0000AE20 6A00                       		bpl.s	loc_93C0
0000AE22 6100 0000                  		bsr.w	SpeedToPos
0000AE26 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AE2C 4A68 0012                  		tst.w	obVelY(a0)
0000AE30 6B00                       		bmi.s	loc_93AA
0000AE32 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AE38 4A41                       		tst.w	d1
0000AE3A 6A00                       		bpl.s	loc_93AA
0000AE3C 4628 0029                  		not.b	$29(a0)
0000AE40 6600                       		bne.s	loc_93A0
0000AE42 4468 0010                  		neg.w	obVelX(a0)
0000AE46 0868 0000 0001             		bchg	#0,obRender(a0)
0000AE4C                            
0000AE4C                            loc_93A0:
0000AE4C D368 000C                  		add.w	d1,obY(a0)
0000AE50 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AE56                            
0000AE56                            loc_93AA:
0000AE56 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AE5A 6A00                       		bpl.s	loc_93C0
0000AE5C 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AE62 5228 001A                  		addq.b	#1,obFrame(a0)
0000AE66 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AE6C                            
0000AE6C                            loc_93C0:
0000AE6C 6000 FE62                  		bra.w	loc_9224
0000AE70                            ; ===========================================================================
0000AE70                            
0000AE70                            loc_93C4:
0000AE70 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AE76 4A68 0012                  		tst.w	obVelY(a0)
0000AE7A 6B00                       		bmi.s	locret_93EA
0000AE7C 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AE82 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AE88 4A41                       		tst.w	d1
0000AE8A 6A00                       		bpl.s	locret_93EA
0000AE8C D368 000C                  		add.w	d1,obY(a0)
0000AE90 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AE96                            
0000AE96                            locret_93EA:
0000AE96 4E75                       		rts	
0000AE98                            ; ===========================================================================
0000AE98                            
0000AE98                            loc_93EC:
0000AE98 08E8 0000 0001             		bset	#0,obRender(a0)
0000AE9E 3028 0008                  		move.w	obX(a0),d0
0000AEA2 9078 D008                  		sub.w	(v_player+obX).w,d0
0000AEA6 6400                       		bcc.s	locret_9402
0000AEA8 08A8 0000 0001             		bclr	#0,obRender(a0)
0000AEAE                            
0000AEAE                            locret_9402:
0000AEAE 4E75                       		rts	
0000AEB0                            
0000AEB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AEB0                            
0000AEB0                            
0000AEB0                            sub_9404:
0000AEB0 3038 D008                  		move.w	(v_player+obX).w,d0
0000AEB4 9068 0008                  		sub.w	obX(a0),d0
0000AEB8 0440 00B8                  		subi.w	#$B8,d0
0000AEBC 4E75                       		rts	
0000AEBE                            ; End of function sub_9404
0000AEBE                            ; End of function sub_9404
0000AEBE                            		include	"_incObj\29 Points.asm"
0000AEBE                            ; ---------------------------------------------------------------------------
0000AEBE                            ; Object 29 - points that appear when you destroy something
0000AEBE                            ; ---------------------------------------------------------------------------
0000AEBE                            
0000AEBE                            Points:
0000AEBE 7000                       		moveq	#0,d0
0000AEC0 1028 0024                  		move.b	obRoutine(a0),d0
0000AEC4 323B 0000                  		move.w	Poi_Index(pc,d0.w),d1
0000AEC8 4EBB 1000                  		jsr	Poi_Index(pc,d1.w)
0000AECC 6000 0000                  		bra.w	DisplaySprite
0000AED0                            ; ===========================================================================
0000AED0 0000                       Poi_Index:	dc.w Poi_Main-Poi_Index
0000AED2 0000                       		dc.w Poi_Slower-Poi_Index
0000AED4                            ; ===========================================================================
0000AED4                            
0000AED4                            Poi_Main:	; Routine 0
0000AED4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AED8 217C 0000 0000 0004        		move.l	#Map_Poi,obMap(a0)
0000AEE0 317C 256D 0002             		move.w	#$256D,obGfx(a0)
0000AEE6 117C 0004 0001             		move.b	#4,obRender(a0)
0000AEEC 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000AEF2 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AEF8 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; move object upwards
0000AEFE                            
0000AEFE                            Poi_Slower:	; Routine 2
0000AEFE 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000AF02 6A00 0000                  		bpl.w	DeleteObject	; if not, delete
0000AF06 6100 0000                  		bsr.w	SpeedToPos
0000AF0A 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000AF10 4E75                       		rts	
0000AF10 4E75                       		rts	
0000AF12                            Map_Animal1:	include	"_maps\Animals 1.asm"
0000AF12                            ; ---------------------------------------------------------------------------
0000AF12                            ; Sprite mappings - animals
0000AF12                            ; ---------------------------------------------------------------------------
0000AF12                            Map_Animal1_internal:
0000AF12 0000                       		dc.w byte_9472-Map_Animal1_internal
0000AF14 0000                       		dc.w byte_9478-Map_Animal1_internal
0000AF16 0000                       		dc.w byte_946C-Map_Animal1_internal
0000AF18 01                         byte_946C:	dc.b 1
0000AF19 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AF1E 01                         byte_9472:	dc.b 1
0000AF1F F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000AF24 01                         byte_9478:	dc.b 1
0000AF25 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000AF2A                            		even
0000AF2A                            		even
0000AF2A                            Map_Animal2:	include	"_maps\Animals 2.asm"
0000AF2A                            ; ---------------------------------------------------------------------------
0000AF2A                            ; Sprite mappings - animals
0000AF2A                            ; ---------------------------------------------------------------------------
0000AF2A                            Map_Animal2_internal:
0000AF2A 0000                       		dc.w byte_948A-Map_Animal2_internal
0000AF2C 0000                       		dc.w byte_9490-Map_Animal2_internal
0000AF2E 0000                       		dc.w byte_9484-Map_Animal2_internal
0000AF30 01                         byte_9484:	dc.b 1
0000AF31 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AF36 01                         byte_948A:	dc.b 1
0000AF37 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000AF3C 01                         byte_9490:	dc.b 1
0000AF3D FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000AF42                            		even
0000AF42                            		even
0000AF42                            Map_Animal3:	include	"_maps\Animals 3.asm"
0000AF42                            ; ---------------------------------------------------------------------------
0000AF42                            ; Sprite mappings - animals
0000AF42                            ; ---------------------------------------------------------------------------
0000AF42                            Map_Animal3_internal:
0000AF42 0000                       		dc.w byte_94A2-Map_Animal3_internal
0000AF44 0000                       		dc.w byte_94A8-Map_Animal3_internal
0000AF46 0000                       		dc.w byte_949C-Map_Animal3_internal
0000AF48 01                         byte_949C:	dc.b 1
0000AF49 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AF4E 01                         byte_94A2:	dc.b 1
0000AF4F FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000AF54 01                         byte_94A8:	dc.b 1
0000AF55 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000AF5A                            		even
0000AF5A                            		even
0000AF5A                            Map_Poi:	include	"_maps\Points.asm"
0000AF5A                            ; --------------------------------------------------------------------------------
0000AF5A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000AF5A                            ; --------------------------------------------------------------------------------
0000AF5A                            
0000AF5A                            SME_yDUNR:	
0000AF5A 0000 0000                  		dc.w SME_yDUNR_E-SME_yDUNR, SME_yDUNR_19-SME_yDUNR	
0000AF5E 0000 0000                  		dc.w SME_yDUNR_24-SME_yDUNR, SME_yDUNR_2F-SME_yDUNR	
0000AF62 0000 0000                  		dc.w SME_yDUNR_3A-SME_yDUNR, SME_yDUNR_40-SME_yDUNR	
0000AF66 0000                       		dc.w SME_yDUNR_55-SME_yDUNR	
0000AF68 02                         SME_yDUNR_E:	dc.b 2	
0000AF69 FC00 0003 FC               		dc.b $FC, 0, 0, 3, $FC	
0000AF6E FC00 0000 00               		dc.b $FC, 0, 0, 0, 0	
0000AF73 02                         SME_yDUNR_19:	dc.b 2	
0000AF74 FC00 0001 F8               		dc.b $FC, 0, 0, 1, $F8	
0000AF79 FC00 0000 00               		dc.b $FC, 0, 0, 0, 0	
0000AF7E 02                         SME_yDUNR_24:	dc.b 2	
0000AF7F FC00 0002 F8               		dc.b $FC, 0, 0, 2, $F8	
0000AF84 FC00 0000 00               		dc.b $FC, 0, 0, 0, 0	
0000AF89 02                         SME_yDUNR_2F:	dc.b 2	
0000AF8A FC00 0003 F8               		dc.b $FC, 0, 0, 3, $F8	
0000AF8F FC00 0000 00               		dc.b $FC, 0, 0, 0, 0	
0000AF94 01                         SME_yDUNR_3A:	dc.b 1	
0000AF95 FC00 0003 FC               		dc.b $FC, 0, 0, 3, $FC	
0000AF9A 04                         SME_yDUNR_40:	dc.b 4	
0000AF9B FC04 0007 05               		dc.b $FC, 4, 0, 7, 5	
0000AFA0 FC00 0003 F4               		dc.b $FC, 0, 0, 3, $F4	
0000AFA5 FC00 0000 F8               		dc.b $FC, 0, 0, 0, $F8	
0000AFAA FC00 0000 FC               		dc.b $FC, 0, 0, 0, $FC	
0000AFAF 02                         SME_yDUNR_55:	dc.b 2	
0000AFB0 FC08 0003 F4               		dc.b $FC, 8, 0, 3, $F4	
0000AFB5 FC04 0007 06               		dc.b $FC, 4, 0, 7, 6	
0000AFBA                            		even
0000AFBA                            		even
0000AFBA                            
0000AFBA                            		include	"_incObj\1F Crabmeat.asm"
0000AFBA                            ; ---------------------------------------------------------------------------
0000AFBA                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000AFBA                            ; ---------------------------------------------------------------------------
0000AFBA                            
0000AFBA                            Crabmeat:
0000AFBA 7000                       		moveq	#0,d0
0000AFBC 1028 0024                  		move.b	obRoutine(a0),d0
0000AFC0 323B 0000                  		move.w	Crab_Index(pc,d0.w),d1
0000AFC4 4EFB 1000                  		jmp	Crab_Index(pc,d1.w)
0000AFC8                            ; ===========================================================================
0000AFC8                            Crab_Index:
0000AFC8 0000                       ptr_Crab_Main:		dc.w Crab_Main-Crab_Index
0000AFCA 0000                       ptr_Crab_Action:	dc.w Crab_Action-Crab_Index
0000AFCC 0000                       ptr_Crab_Delete:	dc.w Crab_Delete-Crab_Index
0000AFCE 0000                       ptr_Crab_BallMain:	dc.w Crab_BallMain-Crab_Index
0000AFD0 0000                       ptr_Crab_BallMove:	dc.w Crab_BallMove-Crab_Index
0000AFD2                            
0000AFD2 =00000000                  id_Crab_Main:		equ ptr_Crab_Main-Crab_Index	; 0
0000AFD2 =00000002                  id_Crab_Action:		equ ptr_Crab_Action-Crab_Index	; 2
0000AFD2 =00000004                  id_Crab_Delete:		equ ptr_Crab_Delete-Crab_Index	; 4
0000AFD2 =00000006                  id_Crab_BallMain:	equ ptr_Crab_BallMain-Crab_Index	; 6
0000AFD2 =00000008                  id_Crab_BallMove:	equ ptr_Crab_BallMove-Crab_Index	; 8
0000AFD2                            
0000AFD2 =00000030                  crab_timedelay:	equ $30
0000AFD2 =00000032                  crab_mode:	equ $32
0000AFD2                            ; ===========================================================================
0000AFD2                            
0000AFD2                            Crab_Main:	; Routine 0
0000AFD2 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000AFD8 117C 0008 0017             		move.b	#8,obWidth(a0)
0000AFDE 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000AFE6 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000AFEC 117C 0004 0001             		move.b	#4,obRender(a0)
0000AFF2 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000AFF8 117C 0006 0020             		move.b	#6,obColType(a0)
0000AFFE 117C 0015 0014             		move.b	#$15,obActWid(a0)
0000B004 6100 0000                  		bsr.w	ObjectFall
0000B008 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000B00E 4A41                       		tst.w	d1
0000B010 6A00                       		bpl.s	@floornotfound
0000B012 D368 000C                  		add.w	d1,obY(a0)
0000B016 1143 0026                  		move.b	d3,obAngle(a0)
0000B01A 317C 0000 0012             		move.w	#0,obVelY(a0)
0000B020 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B024                            
0000B024                            	@floornotfound:
0000B024 4E75                       		rts	
0000B026                            ; ===========================================================================
0000B026                            
0000B026                            Crab_Action:	; Routine 2
0000B026 7000                       		moveq	#0,d0
0000B028 1028 0025                  		move.b	ob2ndRout(a0),d0
0000B02C 323B 0000                  		move.w	@index(pc,d0.w),d1
0000B030 4EBB 1000                  		jsr	@index(pc,d1.w)
0000B034 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000B03A 6100 0000                  		bsr.w	AnimateSprite
0000B03E 6000 0000                  		bra.w	RememberState
0000B042                            ; ===========================================================================
0000B042 0000                       @index:		dc.w @waittofire-@index
0000B044 0000                       		dc.w @walkonfloor-@index
0000B046                            ; ===========================================================================
0000B046                            
0000B046                            @waittofire:
0000B046 5368 0030                  		subq.w	#1,crab_timedelay(a0) ; subtract 1 from time delay
0000B04A 6A00                       		bpl.s	@dontmove
0000B04C 4A28 0001                  		tst.b	obRender(a0)
0000B050 6A00                       		bpl.s	@movecrab
0000B052 0868 0001 0032             		bchg	#1,crab_mode(a0)
0000B058 6600                       		bne.s	@fire
0000B05A                            
0000B05A                            	@movecrab:
0000B05A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B05E 317C 007F 0030             		move.w	#127,crab_timedelay(a0) ; set time delay to approx 2 seconds
0000B064 317C 0080 0010             		move.w	#$80,obVelX(a0)	; move Crabmeat	to the right
0000B06A 6100 0000                  		bsr.w	Crab_SetAni
0000B06E 5600                       		addq.b	#3,d0
0000B070 1140 001C                  		move.b	d0,obAnim(a0)
0000B074 0868 0000 0022             		bchg	#0,obStatus(a0)
0000B07A 6600                       		bne.s	@noflip
0000B07C 4468 0010                  		neg.w	obVelX(a0)	; change direction
0000B080                            
0000B080                            	@dontmove:
0000B080                            	@noflip:
0000B080 4E75                       		rts	
0000B082                            ; ===========================================================================
0000B082                            
0000B082                            @fire:
0000B082 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000B088 117C 0006 001C             		move.b	#6,obAnim(a0)	; use firing animation
0000B08E 6100 0000                  		bsr.w	FindFreeObj
0000B092 6600                       		bne.s	@failleft
0000B094 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load left fireball
0000B098 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000B09E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B0A4 0469 0010 0008             		subi.w	#$10,obX(a1)
0000B0AA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B0B0 337C FF00 0010             		move.w	#-$100,obVelX(a1)
0000B0B6                            
0000B0B6                            	@failleft:
0000B0B6 6100 0000                  		bsr.w	FindFreeObj
0000B0BA 6600                       		bne.s	@failright
0000B0BC 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load right fireball
0000B0C0 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000B0C6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B0CC 0669 0010 0008             		addi.w	#$10,obX(a1)
0000B0D2 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B0D8 337C 0100 0010             		move.w	#$100,obVelX(a1)
0000B0DE                            
0000B0DE                            	@failright:
0000B0DE 4E75                       		rts	
0000B0E0                            ; ===========================================================================
0000B0E0                            
0000B0E0                            @walkonfloor:
0000B0E0 5368 0030                  		subq.w	#1,crab_timedelay(a0)
0000B0E4 6B00                       		bmi.s	loc_966E
0000B0E6 6100 0000                  		bsr.w	SpeedToPos
0000B0EA 0868 0000 0032             		bchg	#0,crab_mode(a0)
0000B0F0 6600                       		bne.s	loc_9654
0000B0F2 3628 0008                  		move.w	obX(a0),d3
0000B0F6 0643 0010                  		addi.w	#$10,d3
0000B0FA 0828 0000 0022             		btst	#0,obStatus(a0)
0000B100 6700                       		beq.s	loc_9640
0000B102 0443 0020                  		subi.w	#$20,d3
0000B106                            
0000B106                            loc_9640:
0000B106 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000B10C 0C41 FFF8                  		cmpi.w	#-8,d1
0000B110 6D00                       		blt.s	loc_966E
0000B112 0C41 000C                  		cmpi.w	#$C,d1
0000B116 6C00                       		bge.s	loc_966E
0000B118 4E75                       		rts	
0000B11A                            ; ===========================================================================
0000B11A                            
0000B11A                            loc_9654:
0000B11A 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B120 D368 000C                  		add.w	d1,obY(a0)
0000B124 1143 0026                  		move.b	d3,obAngle(a0)
0000B128 6100 0000                  		bsr.w	Crab_SetAni
0000B12C 5600                       		addq.b	#3,d0
0000B12E 1140 001C                  		move.b	d0,obAnim(a0)
0000B132 4E75                       		rts	
0000B134                            ; ===========================================================================
0000B134                            
0000B134                            loc_966E:
0000B134 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B138 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000B13E 317C 0000 0010             		move.w	#0,obVelX(a0)
0000B144 6100 0000                  		bsr.w	Crab_SetAni
0000B148 1140 001C                  		move.b	d0,obAnim(a0)
0000B14C 4E75                       		rts	
0000B14E                            ; ---------------------------------------------------------------------------
0000B14E                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000B14E                            ; ---------------------------------------------------------------------------
0000B14E                            
0000B14E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B14E                            
0000B14E                            
0000B14E                            Crab_SetAni:
0000B14E 7000                       		moveq	#0,d0
0000B150 1628 0026                  		move.b	obAngle(a0),d3
0000B154 6B00                       		bmi.s	loc_96A4
0000B156 0C03 0006                  		cmpi.b	#6,d3
0000B15A 6500                       		bcs.s	locret_96A2
0000B15C 7001                       		moveq	#1,d0
0000B15E 0828 0000 0022             		btst	#0,obStatus(a0)
0000B164 6600                       		bne.s	locret_96A2
0000B166 7002                       		moveq	#2,d0
0000B168                            
0000B168                            locret_96A2:
0000B168 4E75                       		rts	
0000B16A                            ; ===========================================================================
0000B16A                            
0000B16A                            loc_96A4:
0000B16A 0C03 00FA                  		cmpi.b	#-6,d3
0000B16E 6200                       		bhi.s	locret_96B6
0000B170 7002                       		moveq	#2,d0
0000B172 0828 0000 0022             		btst	#0,obStatus(a0)
0000B178 6600                       		bne.s	locret_96B6
0000B17A 7001                       		moveq	#1,d0
0000B17C                            
0000B17C                            locret_96B6:
0000B17C 4E75                       		rts	
0000B17E                            ; End of function Crab_SetAni
0000B17E                            
0000B17E                            ; ===========================================================================
0000B17E                            
0000B17E                            Crab_Delete:	; Routine 4
0000B17E 6100 0000                  		bsr.w	DeleteObject
0000B182 4E75                       		rts	
0000B184                            ; ===========================================================================
0000B184                            ; ---------------------------------------------------------------------------
0000B184                            ; Sub-object - missile that the	Crabmeat throws
0000B184                            ; ---------------------------------------------------------------------------
0000B184                            
0000B184                            Crab_BallMain:	; Routine 6
0000B184 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B188 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000B190 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000B196 117C 0004 0001             		move.b	#4,obRender(a0)
0000B19C 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B1A2 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B1A8 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B1AE 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000B1B4 117C 0007 001C             		move.b	#7,obAnim(a0)
0000B1BA                            
0000B1BA                            Crab_BallMove:	; Routine 8
0000B1BA 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000B1C0 6100 0000                  		bsr.w	AnimateSprite
0000B1C4 6100 0000                  		bsr.w	ObjectFall
0000B1C8 6100 0000                  		bsr.w	DisplaySprite
0000B1CC 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B1D0 0640 00E0                  		addi.w	#$E0,d0
0000B1D4 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B1D8 6500                       		bcs.s	@delete		; if yes, branch
0000B1DA 4E75                       		rts	
0000B1DC                            
0000B1DC                            	@delete:
0000B1DC 6000 0000                  		bra.w	DeleteObject
0000B1DC 6000 0000                  		bra.w	DeleteObject
0000B1E0                            		include	"_anim\Crabmeat.asm"
0000B1E0                            ; ---------------------------------------------------------------------------
0000B1E0                            ; Animation script - Crabmeat enemy
0000B1E0                            ; ---------------------------------------------------------------------------
0000B1E0 0000 0000 0000             Ani_Crab:	dc.w @stand-Ani_Crab, @standslope-Ani_Crab, @standsloperev-Ani_Crab
0000B1E6 0000 0000 0000             		dc.w @walk-Ani_Crab, @walkslope-Ani_Crab, @walksloperev-Ani_Crab
0000B1EC 0000 0000                  		dc.w @firing-Ani_Crab, @ball-Ani_Crab
0000B1F0 0F00 FF                    @stand:		dc.b $F, 0, afEnd
0000B1F4 00                         		even
0000B1F4 0F02 FF                    @standslope:	dc.b $F, 2, afEnd
0000B1F8 00                         		even
0000B1F8 0F22 FF                    @standsloperev:	dc.b $F, $22, afEnd
0000B1FC 00                         		even
0000B1FC 0F01 2100 FF               @walk:		dc.b $F, 1, $21, 0, afEnd
0000B202 00                         		even
0000B202 0F21 0302 FF               @walkslope:	dc.b $F, $21, 3, 2, afEnd
0000B208 00                         		even
0000B208 0F01 2322 FF               @walksloperev:	dc.b $F, 1, $23, $22, afEnd
0000B20E 00                         		even
0000B20E 0F04 FF                    @firing:	dc.b $F, 4, afEnd
0000B212 00                         		even
0000B212 0105 06FF                  @ball:		dc.b 1,	5, 6, afEnd
0000B216                            		even
0000B216                            		even
0000B216                            Map_Crab:	include	"_maps\Crabmeat.asm"
0000B216                            ; ---------------------------------------------------------------------------
0000B216                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000B216                            ; ---------------------------------------------------------------------------
0000B216                            Map_Crab_internal:
0000B216 0000                       		dc.w @stand-Map_Crab_internal
0000B218 0000                       		dc.w @walk-Map_Crab_internal
0000B21A 0000                       		dc.w @slope1-Map_Crab_internal
0000B21C 0000                       		dc.w @slope2-Map_Crab_internal
0000B21E 0000                       		dc.w @firing-Map_Crab_internal
0000B220 0000                       		dc.w @ball1-Map_Crab_internal
0000B222 0000                       		dc.w @ball2-Map_Crab_internal
0000B224 04                         @stand:		dc.b 4
0000B225 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8	; standing/middle walking frame
0000B22A F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000B22F 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000B234 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000B239 04                         @walk:		dc.b 4
0000B23A F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8	; walking
0000B23F F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000B244 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000B249 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000B24E 04                         @slope1:	dc.b 4
0000B24F EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8	; walking on slope
0000B254 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000B259 FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000B25E FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000B263 04                         @slope2:	dc.b 4
0000B264 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8	; walking on slope
0000B269 EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000B26E FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000B273 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000B278 06                         @firing:	dc.b 6
0000B279 F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0 ; firing projectiles
0000B27E F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000B283 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000B288 F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000B28D 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000B292 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000B297 01                         @ball1:		dc.b 1
0000B298 F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8 ; projectile
0000B29D 01                         @ball2:		dc.b 1
0000B29E F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8 ; projectile
0000B2A4 00                         		even
0000B2A4 00                         		even
0000B2A4                            		include	"_incObj\06 Mozzietron.asm"
0000B2A4                            ; ===========================================================================
0000B2A4                            ; ---------------------------------------------------------------------------
0000B2A4                            ; Object 06 - Mozzietron enemy	(GHZ)
0000B2A4                            ; ---------------------------------------------------------------------------
0000B2A4                            
0000B2A4                            Mozzietron:					; XREF: Obj_Index
0000B2A4 7000                       		moveq	#0,d0
0000B2A6 1028 0024                  		move.b	$24(a0),d0
0000B2AA 323B 0000                  		move.w	MozIndex(pc,d0.w),d1
0000B2AE 4EFB 1000                  		jmp	MozIndex(pc,d1.w)
0000B2B2                            ; ===========================================================================
0000B2B2 0000                       MozIndex:	dc.w MozMain-MozIndex
0000B2B4 0000                       		dc.w MozAction-MozIndex
0000B2B6 0000                       		dc.w MozDelete-MozIndex
0000B2B8                            ; ===========================================================================
0000B2B8                            
0000B2B8                            MozMain:				; XREF: MozIndex
0000B2B8 5428 0024                  		addq.b	#2,$24(a0)
0000B2BC 217C 0000 0000 0004        		move.l	#Map_Mozzietron,4(a0)
0000B2C4 317C 0444 0002             		move.w	#$444,2(a0)
0000B2CA 117C 0004 0001             		move.b	#4,1(a0)
0000B2D0 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B2D6 117C 0005 0020             		move.b	#5,$20(a0) ; hit box
0000B2DC 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B2E2                            MozAction:				; XREF: MozIndex
0000B2E2 7000                       		moveq	#0,d0
0000B2E4 1028 0025                  		move.b	$25(a0),d0
0000B2E8 323B 0000                  		move.w	MozIndex2(pc,d0.w),d1
0000B2EC 4EBB 1000                  		jsr	MozIndex2(pc,d1.w)
0000B2F0 43F9 0000 0000             		lea	(Ani_Mozzietron).l,a1
0000B2F6 6100 0000                  		bsr.w	AnimateSprite
0000B2FA 6000 0000                  		bra.w	RememberState
0000B2FE                            ; ===========================================================================
0000B2FE 0000                       MozIndex2:	dc.w MozMove-MozIndex2
0000B300 0000                       		dc.w MozChkNrSonic-MozIndex2
0000B302 0000                       		dc.w MozPinned-MozIndex2
0000B304                            ; ===========================================================================
0000B304                            
0000B304                            MozMove:				; XREF: MozIndex2
0000B304 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B308 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000B30A 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000B310 6600                       		bne.s	MozFire	; if yes, branch
0000B312 5428 0025                  		addq.b	#2,$25(a0)
0000B316 317C 0064 0032             		move.w	#100,$32(a0)	; set time delay to just over 2	seconds
0000B31C 317C 0100 0010             		move.w	#$100,$10(a0)	; move Buzz Bomber to the right
0000B322 117C 0000 001C             		move.b	#0,$1C(a0)	; use "flying" animation
0000B328 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000B32E 6600                       		bne.s	locret_986C	; if not, branch
0000B330 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000B334                            
0000B334                            locret_986C:
0000B334 4E75                       		rts	
0000B336                            ; ===========================================================================
0000B336                            
0000B336                            MozFire:				; XREF: MozMove
0000B336 117C 0002 001C             		move.b	#2,$1C(a0)	; use "diving" animation
0000B33C 6100 0000                  		bsr.w	ObjectFall
0000B340 4EB9 0000 0000             		jsr     ObjFloorDist ; check distance between object and floor
0000B346 4A41                       		tst.w	d1 ; is floor distance positive? 
0000B348 6A00                       		bpl.s   @return ; if yes, branch 
0000B34A 303C 00B6                  		move.w    #$B6,d0
0000B34E 4EB9 0000 12FE             		jsr    (PlaySound_Special).l ;    play "spikes moving" sound
0000B354 117C 0004 0025             		move.b #4,$25(a0) ; set 2nd state to pinned
0000B35A D368 000C                  		add.w	d1,$C(a0) ; snap to the ground
0000B35E 4268 0012                  		clr.w	$12(a0) ; clear Y Velocity 
0000B362 4228 0015                  		clr.b	$15(a0) ; $15(a0) is unused in this object, except this line
0000B366                            		@return:
0000B366 4E75                       	    		rts
0000B368                            		
0000B368                            
0000B368                            ; ===========================================================================
0000B368                            
0000B368                            MozPinned:
0000B368 4E75                               rts
0000B36A                                    
0000B36A                            ; ===========================================================================
0000B36A                            
0000B36A                            MozChkDel:				; XREF: Obj55_DropFly
0000B36A 4A28 0001                  		tst.b	1(a0)
0000B36E 6A00 0000                  		bpl.w	DeleteObject
0000B372 4E75                       		rts	
0000B374                            ; ===========================================================================
0000B374                            
0000B374                            MozChkNrSonic:			; XREF: MozIndex2
0000B374                            ;		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B374 6B00                       		bmi.s	MozChgDir
0000B376 6100 0000                  		bsr.w	SpeedToPos
0000B37A 4A28 0034                  		tst.b	$34(a0)
0000B37E 6600                       		bne.s	locret_992A
0000B380 3038 D008                  		move.w	($FFFFD008).w,d0
0000B384 9068 0008                  		sub.w	8(a0),d0
0000B388 6A00                       		bpl.s	MozSetNrSonic
0000B38A 4440                       		neg.w	d0
0000B38C                            
0000B38C                            MozSetNrSonic:
0000B38C 0C40 0005                  		cmpi.w	#$05,d0		; is Buzz Bomber within	$05 pixels of Sonic?
0000B390 6400                       		bcc.s	locret_992A	; if not, branch
0000B392 4A28 0001                  		tst.b	1(a0)
0000B396 6A00                       		bpl.s	locret_992A
0000B398 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000B39E 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000B3A4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000B3AA 6000                       		bra.s	MozStop
0000B3AC                            ; ===========================================================================
0000B3AC                            
0000B3AC                            MozChgDir:				; XREF: MozChkNrSonic
0000B3AC 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000B3B2 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000B3B8 317C 003B 0032             		move.w	#59,$32(a0)
0000B3BE                            
0000B3BE                            MozStop:				; XREF: MozSetNrSonic
0000B3BE 5528 0025                  		subq.b	#2,$25(a0)	; run "MozFire" routine
0000B3C2 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000B3C8 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000B3CE                            
0000B3CE                            locret_992A:
0000B3CE 4E75                       		rts	
0000B3D0                            ; ===========================================================================
0000B3D0                            
0000B3D0                            MozDelete:				; XREF: MozIndex
0000B3D0 6100 0000                  		bsr.w	DeleteObject
0000B3D4 4E75                       		rts	
0000B3D4 4E75                       		rts	
0000B3D6                            		include	"_incObj\22 Buzz Bomber.asm"
0000B3D6                            ; ===========================================================================
0000B3D6                            ; ---------------------------------------------------------------------------
0000B3D6                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000B3D6                            ; ---------------------------------------------------------------------------
0000B3D6                            
0000B3D6                            BuzzBomber:
0000B3D6 7000                       		moveq	#0,d0
0000B3D8 1028 0024                  		move.b	obRoutine(a0),d0
0000B3DC 323B 0000                  		move.w	Buzz_Index(pc,d0.w),d1
0000B3E0 4EFB 1000                  		jmp	Buzz_Index(pc,d1.w)
0000B3E4                            ; ===========================================================================
0000B3E4 0000                       Buzz_Index:	dc.w Buzz_Main-Buzz_Index
0000B3E6 0000                       		dc.w Buzz_Action-Buzz_Index
0000B3E8 0000                       		dc.w Buzz_Delete-Buzz_Index
0000B3EA                            
0000B3EA =00000032                  buzz_timedelay:	equ $32
0000B3EA =00000034                  buzz_buzzstatus:	equ $34
0000B3EA =0000003C                  buzz_parent:	equ $3C
0000B3EA                            ; ===========================================================================
0000B3EA                            
0000B3EA                            Buzz_Main:	; Routine 0
0000B3EA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B3EE 217C 0000 0000 0004        		move.l	#Map_Buzz,obMap(a0)
0000B3F6 317C 0444 0002             		move.w	#$444,obGfx(a0)
0000B3FC 117C 0004 0001             		move.b	#4,obRender(a0)
0000B402 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B408 117C 0008 0020             		move.b	#8,obColType(a0)
0000B40E 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B414                            
0000B414                            Buzz_Action:	; Routine 2
0000B414 7000                       		moveq	#0,d0
0000B416 1028 0025                  		move.b	ob2ndRout(a0),d0
0000B41A 323B 0000                  		move.w	@index(pc,d0.w),d1
0000B41E 4EBB 1000                  		jsr	@index(pc,d1.w)
0000B422 43F9 0000 0000             		lea	(Ani_Buzz).l,a1
0000B428 6100 0000                  		bsr.w	AnimateSprite
0000B42C 6000 0000                  		bra.w	RememberState
0000B430                            ; ===========================================================================
0000B430 0000                       @index:		dc.w @move-@index
0000B432 0000                       		dc.w @chknearsonic-@index
0000B434                            ; ===========================================================================
0000B434                            
0000B434                            @move:
0000B434 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B438 6A00                       		bpl.s	@noflip		; if time remains, branch
0000B43A 0828 0001 0034             		btst	#1,buzz_buzzstatus(a0) ; is Buzz Bomber near Sonic?
0000B440 6600                       		bne.s	@fire		; if yes, branch
0000B442 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B446 317C 007F 0032             		move.w	#127,buzz_timedelay(a0) ; set time delay to just over 2 seconds
0000B44C 317C 0400 0010             		move.w	#$400,obVelX(a0) ; move Buzz Bomber to the right
0000B452 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "flying" animation
0000B458 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B45E 6600                       		bne.s	@noflip		; if not, branch
0000B460 4468 0010                  		neg.w	obVelX(a0)	; move Buzz Bomber to the left
0000B464                            
0000B464                            	@noflip:
0000B464 4E75                       		rts	
0000B466                            ; ===========================================================================
0000B466                            
0000B466                            	@fire:
0000B466 6100 0000                  		bsr.w	FindFreeObj
0000B46A 6600                       		bne.s	@fail
0000B46C 12BC 0000                  		move.b	#id_Missile,0(a1) ; load missile object
0000B470 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B476 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B47C 0669 001C 000C             		addi.w	#$1C,obY(a1)
0000B482 337C 0200 0012             		move.w	#$200,obVelY(a1) ; move missile downwards
0000B488 337C 0200 0010             		move.w	#$200,obVelX(a1) ; move missile to the right
0000B48E 303C 0018                  		move.w	#$18,d0
0000B492 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B498 6600                       		bne.s	@noflip2	; if not, branch
0000B49A 4440                       		neg.w	d0
0000B49C 4469 0010                  		neg.w	obVelX(a1)	; move missile to the left
0000B4A0                            
0000B4A0                            	@noflip2:
0000B4A0 D169 0008                  		add.w	d0,obX(a1)
0000B4A4 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0000B4AA 337C 000E 0032             		move.w	#$E,buzz_timedelay(a1)
0000B4B0 2348 003C                  		move.l	a0,buzz_parent(a1)
0000B4B4 117C 0001 0034             		move.b	#1,buzz_buzzstatus(a0) ; set to "already fired" to prevent refiring
0000B4BA 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B4C0 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "firing" animation
0000B4C6                            
0000B4C6                            	@fail:
0000B4C6 4E75                       		rts	
0000B4C8                            ; ===========================================================================
0000B4C8                            
0000B4C8                            @chknearsonic:
0000B4C8 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B4CC 6B00                       		bmi.s	@chgdirection
0000B4CE 6100 0000                  		bsr.w	SpeedToPos
0000B4D2 4A28 0034                  		tst.b	buzz_buzzstatus(a0)
0000B4D6 6600                       		bne.s	@keepgoing
0000B4D8 3038 D008                  		move.w	(v_player+obX).w,d0
0000B4DC 9068 0008                  		sub.w	obX(a0),d0
0000B4E0 6A00                       		bpl.s	@isleft
0000B4E2 4440                       		neg.w	d0
0000B4E4                            
0000B4E4                            	@isleft:
0000B4E4 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000B4E8 6400                       		bcc.s	@keepgoing	; if not, branch
0000B4EA 4A28 0001                  		tst.b	obRender(a0)
0000B4EE 6A00                       		bpl.s	@keepgoing
0000B4F0 117C 0002 0034             		move.b	#2,buzz_buzzstatus(a0) ; set Buzz Bomber to "near Sonic"
0000B4F6 317C 001D 0032             		move.w	#29,buzz_timedelay(a0) ; set time delay to half a second
0000B4FC 6000                       		bra.s	@stop
0000B4FE                            ; ===========================================================================
0000B4FE                            
0000B4FE                            	@chgdirection:
0000B4FE 117C 0000 0034             		move.b	#0,buzz_buzzstatus(a0) ; set Buzz Bomber to "normal"
0000B504 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction
0000B50A 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B510                            
0000B510                            	@stop:
0000B510 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B514 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Buzz Bomber moving
0000B51A 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "hovering" animation
0000B520                            
0000B520                            @keepgoing:
0000B520 4E75                       		rts	
0000B522                            ; ===========================================================================
0000B522                            
0000B522                            Buzz_Delete:	; Routine 4
0000B522 6100 0000                  		bsr.w	DeleteObject
0000B526 4E75                       		rts	
0000B526 4E75                       		rts	
0000B528                            		include	"_incObj\23 Buzz Bomber Missile.asm"
0000B528                            ; ---------------------------------------------------------------------------
0000B528                            ; Object 23 - missile that Buzz	Bomber throws
0000B528                            ; ---------------------------------------------------------------------------
0000B528                            
0000B528                            Missile:
0000B528 7000                       		moveq	#0,d0
0000B52A 1028 0024                  		move.b	obRoutine(a0),d0
0000B52E 323B 0000                  		move.w	Msl_Index(pc,d0.w),d1
0000B532 4EFB 1000                  		jmp	Msl_Index(pc,d1.w)
0000B536                            ; ===========================================================================
0000B536 0000                       Msl_Index:	dc.w Msl_Main-Msl_Index
0000B538 0000                       		dc.w Msl_Animate-Msl_Index
0000B53A 0000                       		dc.w Msl_FromBuzz-Msl_Index
0000B53C 0000                       		dc.w Msl_Delete-Msl_Index
0000B53E 0000                       		dc.w Msl_FromNewt-Msl_Index
0000B540                            
0000B540 =0000003C                  msl_parent:	equ $3C
0000B540                            ; ===========================================================================
0000B540                            
0000B540                            Msl_Main:	; Routine 0
0000B540 5368 0032                  		subq.w	#1,$32(a0)
0000B544 6A00                       		bpl.s	Msl_ChkCancel
0000B546 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B54A 217C 0000 0000 0004        		move.l	#Map_Missile,obMap(a0)
0000B552 317C 2444 0002             		move.w	#$2444,obGfx(a0)
0000B558 117C 0004 0001             		move.b	#4,obRender(a0)
0000B55E 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B564 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B56A 0228 0003 0022             		andi.b	#3,obStatus(a0)
0000B570 4A28 0028                  		tst.b	obSubtype(a0)	; was object created by	a Newtron?
0000B574 6700                       		beq.s	Msl_Animate	; if not, branch
0000B576                            
0000B576 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Msl_FromNewt" routine
0000B57C 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B582 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B588 6000                       		bra.s	Msl_Animate2
0000B58A                            ; ===========================================================================
0000B58A                            
0000B58A                            Msl_Animate:	; Routine 2
0000B58A 6100                       		bsr.s	Msl_ChkCancel
0000B58C 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B592 6100 0000                  		bsr.w	AnimateSprite
0000B596 6000 0000                  		bra.w	DisplaySprite
0000B59A                            
0000B59A                            ; ---------------------------------------------------------------------------
0000B59A                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000B59A                            ; destroyed, and if it has, then cancel	the missile
0000B59A                            ; ---------------------------------------------------------------------------
0000B59A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B59A                            
0000B59A                            
0000B59A                            Msl_ChkCancel:
0000B59A 2268 003C                  		movea.l	msl_parent(a0),a1
0000B59E 0C11 0000                  		cmpi.b	#id_ExplosionItem,0(a1) ; has Buzz Bomber been destroyed?
0000B5A2 6700                       		beq.s	Msl_Delete	; if yes, branch
0000B5A4 4E75                       		rts	
0000B5A6                            ; End of function Msl_ChkCancel
0000B5A6                            
0000B5A6                            ; ===========================================================================
0000B5A6                            
0000B5A6                            Msl_FromBuzz:	; Routine 4
0000B5A6 0828 0007 0022             		btst	#7,obStatus(a0)
0000B5AC 6600                       		bne.s	@explode
0000B5AE 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B5B4 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B5BA 6100 0000                  		bsr.w	SpeedToPos
0000B5BE 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B5C4 6100 0000                  		bsr.w	AnimateSprite
0000B5C8 6100 0000                  		bsr.w	DisplaySprite
0000B5CC 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B5D0 0640 00E0                  		addi.w	#$E0,d0
0000B5D4 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B5D8 6500                       		bcs.s	Msl_Delete	; if yes, branch
0000B5DA 4E75                       		rts	
0000B5DC                            ; ===========================================================================
0000B5DC                            
0000B5DC                            	@explode:
0000B5DC 10BC 0000                  		move.b	#id_MissileDissolve,0(a0) ; change object to an explosion (Obj24)
0000B5E0 117C 0000 0024             		move.b	#0,obRoutine(a0)
0000B5E6 6000 F1BA                  		bra.w	MissileDissolve
0000B5EA                            ; ===========================================================================
0000B5EA                            
0000B5EA                            Msl_Delete:	; Routine 6
0000B5EA 6100 0000                  		bsr.w	DeleteObject
0000B5EE 4E75                       		rts	
0000B5F0                            ; ===========================================================================
0000B5F0                            
0000B5F0                            Msl_FromNewt:	; Routine 8
0000B5F0 4A28 0001                  		tst.b	obRender(a0)
0000B5F4 6AF4                       		bpl.s	Msl_Delete
0000B5F6 6100 0000                  		bsr.w	SpeedToPos
0000B5FA                            
0000B5FA                            Msl_Animate2:
0000B5FA 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B600 6100 0000                  		bsr.w	AnimateSprite
0000B604 6100 0000                  		bsr.w	DisplaySprite
0000B608 4E75                       		rts	
0000B608 4E75                       		rts	
0000B60A                            		include	"_anim\Mozzietron.asm"
0000B60A                            ; ---------------------------------------------------------------------------
0000B60A                            ; Animation script - Buzz Bomber enemy
0000B60A                            ; ---------------------------------------------------------------------------
0000B60A 0000                       Ani_Mozzietron:	dc.w byte_9A1E-Ani_Mozzietron;0
0000B60C 0000                       		dc.w byte_9A22-Ani_Mozzietron;1
0000B60E 0000                       		dc.w byte_9A26-Ani_Mozzietron;2
0000B610 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000B614 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000B618 0502 0304 05FE 01          byte_9A26:	dc.b 5, 2, 3, 4, 5, $FE, 1
0000B620 00                         		even
0000B620 00                         		even
0000B620                            		include	"_anim\Buzz Bomber.asm"
0000B620                            ; ---------------------------------------------------------------------------
0000B620                            ; Animation script - Buzz Bomber enemy
0000B620                            ; ---------------------------------------------------------------------------
0000B620 0000                       Ani_Buzz:	dc.w @fly1-Ani_Buzz
0000B622 0000                       		dc.w @fly2-Ani_Buzz
0000B624 0000                       		dc.w @fires-Ani_Buzz
0000B626 0100 01FF                  @fly1:		dc.b 1,	0, 1, afEnd
0000B62A 0102 03FF                  @fly2:		dc.b 1,	2, 3, afEnd
0000B62E 0104 05FF                  @fires:		dc.b 1,	4, 5, afEnd
0000B632                            		even
0000B632                            		even
0000B632                            		include	"_anim\Buzz Bomber Missile.asm"
0000B632                            ; ---------------------------------------------------------------------------
0000B632                            ; Animation script - missile that Buzz Bomber throws
0000B632                            ; ---------------------------------------------------------------------------
0000B632 0000                       Ani_Missile:	dc.w @flare-Ani_Missile
0000B634 0000                       		dc.w @missile-Ani_Missile
0000B636 0700 01FC                  @flare:		dc.b 7,	0, 1, afRoutine
0000B63A 0102 03FF                  @missile:	dc.b 1,	2, 3, afEnd
0000B63E                            		even
0000B63E                            		even
0000B63E                            Map_Mozzietron:	include	"_maps\Mozzietron.asm"
0000B63E                            ; --------------------------------------------------------------------------------
0000B63E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B63E                            ; --------------------------------------------------------------------------------
0000B63E                            
0000B63E                            SME_qvHIs:	
0000B63E 0000 0000                  		dc.w SME_qvHIs_C-SME_qvHIs, SME_qvHIs_17-SME_qvHIs	
0000B642 0000 0000                  		dc.w SME_qvHIs_1D-SME_qvHIs, SME_qvHIs_28-SME_qvHIs	
0000B646 0000 0000                  		dc.w SME_qvHIs_38-SME_qvHIs, SME_qvHIs_4D-SME_qvHIs	
0000B64A 02                         SME_qvHIs_C:	dc.b 2	
0000B64B FD0C 2000 F0               		dc.b $FD, $C, $20, 0, $F0	
0000B650 ED09 2004 F8               		dc.b $ED, 9, $20, 4, $F8	
0000B655 01                         SME_qvHIs_17:	dc.b 1	
0000B656 F80D 200A F0               		dc.b $F8, $D, $20, $A, $F0	
0000B65B 02                         SME_qvHIs_1D:	dc.b 2	
0000B65C E90A 2012 F8               		dc.b $E9, $A, $20, $12, $F8	
0000B661 F901 201B F0               		dc.b $F9, 1, $20, $1B, $F0	
0000B666 03                         SME_qvHIs_28:	dc.b 3	
0000B667 DF07 2025 FB               		dc.b $DF, 7, $20, $25, $FB	
0000B66C E700 2030 0B               		dc.b $E7, 0, $20, $30, $B	
0000B671 FF00 002D FB               		dc.b $FF, 0, 0, $2D, $FB	
0000B676 04                         SME_qvHIs_38:	dc.b 4	
0000B677 E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B67C F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B681 F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B686 F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B68B 04                         SME_qvHIs_4D:	dc.b 4	
0000B68C E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B691 F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B696 F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B69B F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B6A0                            		even
0000B6A0                            		even
0000B6A0                            Map_Buzz:	include	"_maps\Buzz Bomber.asm"
0000B6A0                            ; --------------------------------------------------------------------------------
0000B6A0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B6A0                            ; --------------------------------------------------------------------------------
0000B6A0                            
0000B6A0                            SME_yccqJ:	
0000B6A0 0000 0000                  		dc.w SME_yccqJ_C-SME_yccqJ, SME_yccqJ_2B-SME_yccqJ	
0000B6A4 0000 0000                  		dc.w SME_yccqJ_4A-SME_yccqJ, SME_yccqJ_69-SME_yccqJ	
0000B6A8 0000 0000                  		dc.w SME_yccqJ_88-SME_yccqJ, SME_yccqJ_AC-SME_yccqJ	
0000B6AC 06                         SME_yccqJ_C:	dc.b 6	
0000B6AD F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B6B2 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B6B7 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B6BC 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B6C1 EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B6C6 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B6CB 06                         SME_yccqJ_2B:	dc.b 6	
0000B6CC F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B6D1 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B6D6 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B6DB 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B6E0 F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B6E5 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B6EA 06                         SME_yccqJ_4A:	dc.b 6	
0000B6EB F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B6F0 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B6F5 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B6FA 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B6FF EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B704 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B709 06                         SME_yccqJ_69:	dc.b 6	
0000B70A F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B70F F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B714 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B719 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B71E F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B723 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B728 07                         SME_yccqJ_88:	dc.b 7	
0000B729 F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B72E 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B733 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B738 EE04 201D 04               		dc.b $EE, 4, $20, $1D, 4	
0000B73D 0C00 200E FC               		dc.b $C, 0, $20, $E, $FC	
0000B742 0C00 200D F4               		dc.b $C, 0, $20, $D, $F4	
0000B747 EE08 201A EC               		dc.b $EE, 8, $20, $1A, $EC	
0000B74C 04                         SME_yccqJ_AC:	dc.b 4	
0000B74D F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B752 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B757 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B75C 0C04 200D F4               		dc.b $C, 4, $20, $D, $F4	
0000B762 00                         		even
0000B762 00                         		even
0000B762                            Map_Missile:	include	"_maps\Buzz Bomber Missile.asm"
0000B762                            ; ---------------------------------------------------------------------------
0000B762                            ; Sprite mappings - missile that Buzz Bomber throws
0000B762                            ; ---------------------------------------------------------------------------
0000B762                            Map_Missile_internal:
0000B762 0000                       		dc.w @Flare1-Map_Missile_internal
0000B764 0000                       		dc.w @Flare2-Map_Missile_internal
0000B766 0000                       		dc.w @Ball1-Map_Missile_internal
0000B768 0000                       		dc.w @Ball2-Map_Missile_internal
0000B76A 01                         @Flare1:	dc.b 1
0000B76B F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8 ; buzz bomber firing flare
0000B770 01                         @Flare2:	dc.b 1
0000B771 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000B776 01                         @Ball1:		dc.b 1
0000B777 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8 ; missile itself
0000B77C 01                         @Ball2:		dc.b 1
0000B77D F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000B782                            		even
0000B782                            		even
0000B782                            
0000B782                            		include	"_incObj\25 & 37 Rings.asm"
0000B782                            ; ---------------------------------------------------------------------------
0000B782                            ; Object 25 - rings
0000B782                            ; ---------------------------------------------------------------------------
0000B782                            
0000B782                            Rings:
0000B782 7000                       		moveq	#0,d0
0000B784 1028 0024                  		move.b	obRoutine(a0),d0
0000B788 323B 0000                  		move.w	Ring_Index(pc,d0.w),d1
0000B78C 4EFB 1000                  		jmp	Ring_Index(pc,d1.w)
0000B790                            ; ===========================================================================
0000B790                            Ring_Index:
0000B790 0000                       ptr_Ring_Main:		dc.w Ring_Main-Ring_Index
0000B792 0000                       ptr_Ring_Animate:	dc.w Ring_Animate-Ring_Index
0000B794 0000                       ptr_Ring_Collect:	dc.w Ring_Collect-Ring_Index
0000B796 0000                       ptr_Ring_Sparkle:	dc.w Ring_Sparkle-Ring_Index
0000B798 0000                       ptr_Ring_Delete:	dc.w Ring_Delete-Ring_Index
0000B79A 0000                       ptr_Ring_Attract:	dc.w Ring_Attract-Ring_Index
0000B79C 0000                       ptr_Ring_Collect1:	dc.w Ring_Collect-Ring_Index
0000B79E 0000                       ptr_Ring_Sparkle1:	dc.w Ring_Sparkle-Ring_Index
0000B7A0 0000                       ptr_Ring_Delete1:	dc.w Ring_Delete-Ring_Index
0000B7A2                            
0000B7A2 =00000000                  id_Ring_Main:			equ ptr_Ring_Main-Ring_Index	; 0
0000B7A2 =00000002                  id_Ring_Animate:		equ ptr_Ring_Animate-Ring_Index	; 2
0000B7A2 =00000004                  id_Ring_Collect:		equ ptr_Ring_Collect-Ring_Index	; 4
0000B7A2 =00000006                  id_Ring_Sparkle:		equ ptr_Ring_Sparkle-Ring_Index	; 6
0000B7A2 =00000008                  id_Ring_Delete:			equ ptr_Ring_Delete-Ring_Index	; 8
0000B7A2 =0000000A                  id_Ring_Attract:		equ ptr_Ring_Attract-Ring_Index	; $A
0000B7A2 =00000004                  id_Ring_Collect1:		equ ptr_Ring_Collect-Ring_Index	; $C
0000B7A2 =00000006                  id_Ring_Sparkle1:		equ ptr_Ring_Sparkle-Ring_Index	; $E
0000B7A2 =00000008                  id_Ring_Delete1:		equ ptr_Ring_Delete-Ring_Index	; $10
0000B7A2                            ; ---------------------------------------------------------------------------
0000B7A2                            ; Distances between rings (format: horizontal, vertical)
0000B7A2                            ; ---------------------------------------------------------------------------
0000B7A2 1000                       Ring_PosData:	dc.b $10, 0		; horizontal tight
0000B7A4 1800                       		dc.b $18, 0		; horizontal normal
0000B7A6 2000                       		dc.b $20, 0		; horizontal wide
0000B7A8 0010                       		dc.b 0,	$10		; vertical tight
0000B7AA 0018                       		dc.b 0,	$18		; vertical normal
0000B7AC 0020                       		dc.b 0,	$20		; vertical wide
0000B7AE 1010                       		dc.b $10, $10		; diagonal
0000B7B0 1818                       		dc.b $18, $18
0000B7B2 2020                       		dc.b $20, $20
0000B7B4 F010                       		dc.b $F0, $10
0000B7B6 E818                       		dc.b $E8, $18
0000B7B8 E020                       		dc.b $E0, $20
0000B7BA 1008                       		dc.b $10, 8
0000B7BC 1810                       		dc.b $18, $10
0000B7BE F008                       		dc.b $F0, 8
0000B7C0 E810                       		dc.b $E8, $10
0000B7C2                            ; ===========================================================================
0000B7C2                            
0000B7C2                            Ring_Main:	; Routine 0
0000B7C2 45F8 FC00                  		lea	(v_objstate).w,a2
0000B7C6 7000                       		moveq	#0,d0
0000B7C8 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B7CC 45F2 0002                  		lea	2(a2,d0.w),a2
0000B7D0 1812                       		move.b	(a2),d4
0000B7D2 1228 0028                  		move.b	obSubtype(a0),d1
0000B7D6 1001                       		move.b	d1,d0
0000B7D8 0241 0007                  		andi.w	#7,d1
0000B7DC 0C41 0007                  		cmpi.w	#7,d1
0000B7E0 6600                       		bne.s	loc_9B80
0000B7E2 7206                       		moveq	#6,d1
0000B7E4                            
0000B7E4                            	loc_9B80:
0000B7E4 4841                       		swap	d1
0000B7E6 323C 0000                  		move.w	#0,d1
0000B7EA E808                       		lsr.b	#4,d0
0000B7EC D040                       		add.w	d0,d0
0000B7EE 1A3B 00B2                  		move.b	Ring_PosData(pc,d0.w),d5 ; load ring spacing data
0000B7F2 4885                       		ext.w	d5
0000B7F4 1C3B 00AD                  		move.b	Ring_PosData+1(pc,d0.w),d6
0000B7F8 4886                       		ext.w	d6
0000B7FA 2248                       		movea.l	a0,a1
0000B7FC 3428 0008                  		move.w	obX(a0),d2
0000B800 3628 000C                  		move.w	obY(a0),d3
0000B804 E20C                       		lsr.b	#1,d4
0000B806 6500                       		bcs.s	loc_9C02
0000B808 0892 0007                  		bclr	#7,(a2)
0000B80C 6000                       		bra.s	loc_9BBA
0000B80E                            ; ===========================================================================
0000B80E                            
0000B80E                            Ring_MakeRings:
0000B80E 4841                       		swap	d1
0000B810 E20C                       		lsr.b	#1,d4
0000B812 6500                       		bcs.s	loc_9C02
0000B814 0892 0007                  		bclr	#7,(a2)
0000B818 6100 0000                  		bsr.w	FindFreeObj
0000B81C 6600                       		bne.s	loc_9C0E
0000B81E                            
0000B81E                            loc_9BBA:
0000B81E 12BC 0000                  		move.b	#id_Rings,0(a1)	; load ring object
0000B822 5429 0024                  		addq.b	#2,obRoutine(a1)
0000B826 3342 0008                  		move.w	d2,obX(a1)	; set x-axis position based on d2
0000B82A 3368 0008 0032             		move.w	obX(a0),$32(a1)
0000B830 3343 000C                  		move.w	d3,obY(a1)	; set y-axis position based on d3
0000B834 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000B83C 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000B842 137C 0004 0001             		move.b	#4,obRender(a1)
0000B848 337C 0100 0018             		move.w	#$100,obPriority(a1)
0000B84E 137C 0047 0020             		move.b	#$47,obColType(a1)
0000B854 137C 0008 0014             		move.b	#8,obActWid(a1)
0000B85A 1368 0023 0023             		move.b	obRespawnNo(a0),obRespawnNo(a1)
0000B860 1341 0034                  		move.b	d1,$34(a1)
0000B864                            
0000B864                            loc_9C02:
0000B864 5241                       		addq.w	#1,d1
0000B866 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000B868 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000B86A 4841                       		swap	d1
0000B86C 51C9 FFA0                  		dbf	d1,Ring_MakeRings ; repeat for	number of rings
0000B870                            
0000B870                            loc_9C0E:
0000B870 0812 0000                  		btst	#0,(a2)
0000B874 6600 0000                  		bne.w	DeleteObject
0000B878                            
0000B878                            Ring_Animate:	; Routine 2
0000B878 4A38 FE2C                  		tst.b	(v_shield).w
0000B87C 6700                       		beq.s	@skip
0000B87E 4A28 0001                  		tst.b	obRender(a0)
0000B882 6A00                       		bpl.s	@skip
0000B884                            		
0000B884 43F8 D000                  		lea (v_player).w,a1
0000B888                            		
0000B888 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000B88C 9068 0008                  		sub.w	obX(a0),d0
0000B890 6A00                       		bpl.s	@a1
0000B892 4440                       		neg.w	d0
0000B894                            		
0000B894                            	@a1:
0000B894 0C40 0040                  		cmpi.w	#$40,d0
0000B898 6200                       		bhi.s	@skip
0000B89A                            		
0000B89A 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000B89E 9068 000C                  		sub.w	obY(a0),d0
0000B8A2 6A00                       		bpl.s	@a2
0000B8A4 4440                       		neg.w	d0
0000B8A6                            		
0000B8A6                            	@a2:
0000B8A6 0C40 0040                  		cmpi.w	#$40,d0
0000B8AA 6200                       		bhi.s	@skip
0000B8AC                            		
0000B8AC 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000B8B2 45F8 FC00                  		lea	(v_objstate).w,a2
0000B8B6 7000                       		moveq	#0,d0
0000B8B8 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B8BC 1228 0034                  		move.b	$34(a0),d1
0000B8C0 03F2 0002                  		bset	d1,2(a2,d0.w)
0000B8C4                            		
0000B8C4                            	@skip:
0000B8C4 1178 FEC5 001A             		move.b	(v_ani2_frame).w,obFrame(a0) ; set frame
0000B8CA 6100 0000                  		bsr.w	DisplaySprite
0000B8EA 4E75                       		rts	
0000B8EC                            ; ===========================================================================
0000B8EC                            
0000B8EC                            Ring_Collect:	; Routine 4
0000B8EC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B8F0 117C 0000 0020             		move.b	#0,obColType(a0)
0000B8F6 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000B8FC 6100 0000                  		bsr.w	CollectRing
0000B900 45F8 FC00                  		lea	(v_objstate).w,a2
0000B904 7000                       		moveq	#0,d0
0000B906 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B90A 1228 0034                  		move.b	$34(a0),d1
0000B90E 03F2 0002                  		bset	d1,2(a2,d0.w)
0000B912                            
0000B912                            Ring_Sparkle:	; Routine 6
0000B912 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000B918 6100 0000                  		bsr.w	AnimateSprite
0000B91C 6000 0000                  		bra.w	DisplaySprite
0000B920                            ; ===========================================================================
0000B920                            
0000B920                            Ring_Delete:	; Routine 8
0000B920 6000 0000                  		bra.w	DeleteObject
0000B924                            
0000B924                            Ring_Attract:	; Routine $A
0000B924 4A38 FE2C                  		tst.b	(v_shield).w
0000B928 6600                       		bne.s	@skip
0000B92A 10BC 0000                  		move.b	#id_RingLoss,0(a0)
0000B92E 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000B934 11FC 00FF FEC6             		move.b	#-1,(v_ani3_time).w
0000B93A 6000                       		bra.s	@display
0000B93C                            		
0000B93C                            	@skip:
0000B93C 323C 0030                  		move.w	#$30,d1	; horizontal
0000B940 3038 D008                  		move.w	(v_player+obX).w,d0
0000B944 B068 0008                  		cmp.w	obX(a0),d0
0000B948 6400                       		bcc.s	@a1
0000B94A 4441                       		neg.w	d1
0000B94C 4A68 0010                  		tst.w	obVelX(a0)
0000B950 6B00                       		bmi.s	@a2
0000B952 D241                       		add.w	d1,d1
0000B954 D241                       		add.w	d1,d1
0000B956 6000                       		bra.s	@a2
0000B958                            
0000B958                            	@a1:
0000B958 4A68 0010                  		tst.w	obVelX(a0)
0000B95C 6A00                       		bpl.s	@a2
0000B95E D241                       		add.w	d1,d1
0000B960 D241                       		add.w	d1,d1
0000B962                            
0000B962                            	@a2:
0000B962 D368 0010                  		add.w	d1,obVelX(a0)
0000B966 323C 0030                  		move.w	#$30,d1	; vertical
0000B96A 3038 D00C                  		move.w	(v_player+obY).w,d0
0000B96E B068 000C                  		cmp.w	obY(a0),d0
0000B972 6400                       		bcc.s	@a3
0000B974 4441                       		neg.w	d1
0000B976 4A68 0012                  		tst.w	obVelY(a0)
0000B97A 6B00                       		bmi.s	@a4
0000B97C D241                       		add.w	d1,d1
0000B97E D241                       		add.w	d1,d1
0000B980 6000                       		bra.s	@a4
0000B982                            
0000B982                            	@a3:
0000B982 4A68 0012                  		tst.w	obVelY(a0)
0000B986 6A00                       		bpl.s	@a4
0000B988 D241                       		add.w	d1,d1
0000B98A D241                       		add.w	d1,d1
0000B98C                            
0000B98C                            	@a4:
0000B98C D368 0012                  		add.w	d1,obVelY(a0)
0000B990 6100 0000                  		bsr.w	SpeedToPos
0000B994                            		
0000B994                            	@display:
0000B994 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0) ; set frame
0000B99A 6000 0000                  		bra.w	DisplaySprite
0000B99E                            
0000B99E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B99E                            
0000B99E                            
0000B99E                            CollectRing:
0000B99E 5278 FE20                  		addq.w	#1,(v_rings).w	; add 1 to rings
0000B9A2 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the rings counter
0000B9A8 303C 0000                  		move.w	#sfx_Ring,d0	; play ring sound
0000B9AC 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; do you have < 100 rings?
0000B9B2 6500                       		bcs.s	@playsnd	; if yes, branch
0000B9B4 08F8 0001 FE1B             		bset	#1,(v_lifecount).w ; update lives counter
0000B9BA 6700                       		beq.s	@got100
0000B9BC 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; do you have < 200 rings?
0000B9C2 6500                       		bcs.s	@playsnd	; if yes, branch
0000B9C4 08F8 0002 FE1B             		bset	#2,(v_lifecount).w ; update lives counter
0000B9CA 6600                       		bne.s	@playsnd
0000B9CC                            
0000B9CC                            	@got100:
0000B9CC 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000B9D0 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000B9D4 303C 0000                  		move.w	#bgm_ExtraLife,d0 ; play extra life music
0000B9D8                            		
0000B9D8                            
0000B9D8                            	@playsnd:
0000B9D8 4EF9 0000 12FE             		jmp	(PlaySound_Special).l
0000B9DE                            ; End of function CollectRing
0000B9DE                            
0000B9DE                            ; ===========================================================================
0000B9DE                            ; ---------------------------------------------------------------------------
0000B9DE                            ; Object 37 - rings flying out of Sonic	when he's hit
0000B9DE                            ; ---------------------------------------------------------------------------
0000B9DE                            
0000B9DE                            RingLoss:
0000B9DE 7000                       		moveq	#0,d0
0000B9E0 1028 0024                  		move.b	obRoutine(a0),d0
0000B9E4 323B 0000                  		move.w	RLoss_Index(pc,d0.w),d1
0000B9E8 4EFB 1000                  		jmp	RLoss_Index(pc,d1.w)
0000B9EC                            ; ===========================================================================
0000B9EC 0000                       RLoss_Index:	dc.w RLoss_Count-RLoss_Index
0000B9EE 0000                       		dc.w RLoss_Bounce-RLoss_Index
0000B9F0 0000                       		dc.w RLoss_Collect-RLoss_Index
0000B9F2 0000                       		dc.w RLoss_Sparkle-RLoss_Index
0000B9F4 0000                       		dc.w RLoss_Delete-RLoss_Index
0000B9F6                            ; ===========================================================================
0000B9F6                            
0000B9F6                            RLoss_Count:	; Routine 0
0000B9F6 2248                       		movea.l	a0,a1
0000B9F8 7A00                       		moveq	#0,d5
0000B9FA 3A38 FE20                  		move.w	(v_rings).w,d5	; check number of rings you have
0000B9FE 47F9 0000 0000                     lea     SpillRingData,a3        ; load the address of the array in a3
0000BA04 7018                               moveq   #24,d0                  ; lose a max of 24 rings
0000BA06 45F8 D000                          lea     (v_player).w,a2    ; a2=character
0000BA0A 082A 0006 0022                     btst    #6,obStatus(a2)           ; is Sonic underwater?
0000BA10 6700                               beq.s   @cont                       ; if not, branch
0000BA12 47F9 0000 0000                     lea    SpillRingData_Water,a3        ; load the UNDERWATER address of the array in a3
0000BA18 7010                               moveq   #16,d0                   ; lose a max of 16 rings underwater
0000BA1A                            @cont:
0000BA1A BA40                               cmp.w   d0,d5
0000BA1C 6500                               bcs.s   @belowmax
0000BA1E 3A00                               move.w  d0,d5
0000BA20                            
0000BA20                            @belowmax:
0000BA20 5345                               subq.w  #1,d5
0000BA22 383C 0288                          move.w  #$288,d4
0000BA26 6000                       		bra.s	@makerings
0000BA28                            ; ===========================================================================
0000BA28                            
0000BA28                            	@loop:
0000BA28 6100 0000                  		bsr.w	FindFreeObj
0000BA2C 6600 0000                  		bne.w	@resetcounter
0000BA30                            
0000BA30                            @makerings:
0000BA30 12BC 0000                  		move.b	#id_RingLoss,0(a1) ; load bouncing ring object
0000BA34 5429 0024                  		addq.b	#2,obRoutine(a1)
0000BA38 137C 0008 0016             		move.b	#8,obHeight(a1)
0000BA3E 137C 0008 0017             		move.b	#8,obWidth(a1)
0000BA44 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BA4A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BA50 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000BA58 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000BA5E 137C 0004 0001             		move.b	#4,obRender(a1)
0000BA64 137C 0047 0020             		move.b	#$47,obColType(a1)
0000BA6A 137C 0008 0014             		move.b	#8,obActWid(a1)
0000BA70 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000BA74 6700                       		beq.s	@skiphalvingvel		; If not, branch and skip underwater checks
0000BA76 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000BA7A BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000BA7E 6E00                       		bgt.s	@skiphalvingvel		; If not, branch and skip underwater commands
0000BA80 E240                       		asr.w	d0			; Half d0. Makes the ring's x_vel bounce to the left/right slower
0000BA82 E241                       		asr.w	d1			; Half d1. Makes the ring's y_vel bounce up/down slower
0000BA84                            @skiphalvingvel:
0000BA84 335B 0010                  		move.w  (a3)+,obVelX(a1)         ; move the data contained in the array to the x velocity and increment the address in a3
0000BA88 335B 0012                  		move.w  (a3)+,obVelY(a1)         ; move the data contained in the array to the y velocity and increment the address in a3	
0000BA8C 51CD FF9A                  		dbf	d5,@loop	; repeat for number of rings (max 31)
0000BA90                            
0000BA90                            @resetcounter:
0000BA90 31FC 0000 FE20             		move.w	#0,(v_rings).w	; reset number of rings to zero
0000BA96 11FC 0080 FE1D             		move.b	#$80,(f_ringcount).w ; update ring counter
0000BA9C 11FC 0000 FE1B             		move.b	#0,(v_lifecount).w
0000BAA2 70FF                               moveq   #-1,d0                  ; Move #-1 to d0
0000BAA4 1140 001F                          move.b  d0,obDelayAni(a0)       ; Move d0 to new timer
0000BAA8 11C0 FEC6                          move.b  d0,(v_ani3_time).w      ; Move d0 to old timer (for animated purposes)
0000BAB6                            
0000BAB6                            RLoss_Bounce:	; Routine 2
0000BAB6 1178 FEC7 001A             		move.b	(v_ani3_frame).w,obFrame(a0)
0000BABC 6100 0000                  		bsr.w	SpeedToPos
0000BAC0 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000BAC6 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000BACA 6700                       		beq.s	@skipbounceslow		; If not, branch and skip underwater checks
0000BACC 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000BAD0 BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000BAD4 6E00                       		bgt.s	@skipbounceslow		; If not, branch and skip underwater commands
0000BAD6 0468 000E 0012             		subi.w	#$E,obVelY(a0)		; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
0000BADC                            	@skipbounceslow:
0000BADC 6B00                       		bmi.s	@chkdel
0000BADE 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000BAE2 D007                       		add.b	d7,d0
0000BAE4 0200 0003                  		andi.b	#3,d0
0000BAE8 6600                       		bne.s	@chkdel
0000BAEA 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000BAF0 4A41                       		tst.w	d1
0000BAF2 6A00                       		bpl.s	@chkdel
0000BAF4 D368 000C                  		add.w	d1,obY(a0)
0000BAF8 3028 0012                  		move.w	obVelY(a0),d0
0000BAFC E440                       		asr.w	#2,d0
0000BAFE 9168 0012                  		sub.w	d0,obVelY(a0)
0000BB02 4468 0012                  		neg.w	obVelY(a0)
0000BB06                            
0000BB06                            	@chkdel:
0000BB06 5328 001F                  		subq.b  #1,obDelayAni(a0)  ; Subtract 1   ; RHS Ring Timer fix
0000BB0A 6700 0000                          beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
0000BB0E 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000BB12 0640 00E0                  		addi.w	#$E0,d0
0000BB16 B068 000C                  		cmp.w	obY(a0),d0	   ; has object moved below level boundary?
0000BB1A 6500 0000                  		bcs.w	RLoss_Delete	   ; if yes, branch
0000BB1E 4A38 FE2C                  		tst.b	(v_shield).w
0000BB22 6700                       		beq.s	@skip
0000BB24 4A28 0001                  		tst.b	obRender(a0)
0000BB28 6A00                       		bpl.s	@skip
0000BB2A                            		
0000BB2A 43F8 D000                  		lea (v_player).w,a1
0000BB2E                            		
0000BB2E 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000BB32 9068 0008                  		sub.w	obX(a0),d0
0000BB36 6A00                       		bpl.s	@a1
0000BB38 4440                       		neg.w	d0
0000BB3A                            		
0000BB3A                            	@a1:
0000BB3A 0C40 00A0                  		cmpi.w	#$A0,d0
0000BB3E 6200                       		bhi.s	@skip
0000BB40                            		
0000BB40 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000BB44 9068 000C                  		sub.w	obY(a0),d0
0000BB48 6A00                       		bpl.s	@a2
0000BB4A 4440                       		neg.w	d0
0000BB4C                            		
0000BB4C                            	@a2:
0000BB4C 0C40 00A0                  		cmpi.w	#$A0,d0
0000BB50 6200                       		bhi.s	@skip
0000BB52                            		
0000BB52 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000BB58 10BC 0000                  		move.b	#id_Rings,0(a0)
0000BB5C                            		
0000BB5C                            	@skip:		
0000BB5C 43F8 AD80                          lea     v_spritequeue+$180,a1
0000BB60 D2FC 0080                          adda.w  #$80,a1
0000BB64 0C51 007E                          cmpi.w  #$7E,(a1)
0000BB68 6400                               bcc.s   @cont
0000BB6A 5451                               addq.w  #2,(a1)
0000BB6C D2D1                               adda.w  (a1),a1
0000BB6E 3288                               move.w  a0,(a1)
0000BB70                            		
0000BB70                            	@cont:
0000BB70 4E75                               rts		
0000BB72                            ; ===========================================================================
0000BB72                            
0000BB72                            RLoss_Collect:	; Routine 4
0000BB72 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BB76 117C 0000 0020             		move.b	#0,obColType(a0)
0000BB7C 6100 FE20                  		bsr.w	CollectRing
0000BB80                            
0000BB80                            RLoss_Sparkle:	; Routine 6
0000BB80 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000BB86 6100 0000                  		bsr.w	AnimateSprite
0000BB8A 43F8 AD80                  		lea     v_spritequeue+$180,a1
0000BB8E 0C51 007E                          cmpi.w  #$7E,(a1)
0000BB92 6400                               bcc.s   @cont
0000BB94 5451                               addq.w  #2,(a1)
0000BB96 D2D1                               adda.w  (a1),a1
0000BB98 3288                               move.w  a0,(a1)
0000BB9A                            			
0000BB9A                            	@cont:
0000BB9A 4E75                               rts
0000BB9C                            ; ===========================================================================
0000BB9C                            
0000BB9C                            RLoss_Delete:	; Routine 8
0000BB9C 6000 0000                  		bra.w	DeleteObject
0000BBA0                            
0000BBA0                            ; ----------------------------------------------------------------------------------------------
0000BBA0                            ; Ring Spawn Array 
0000BBA0                            ; ----------------------------------------------------------------------------------------------
0000BBA0                            
0000BBA0 FF3C FC14 00C4 FC14 FDC8+  SpillRingData:  dc.w    $FF3C,$FC14, $00C4,$FC14, $FDC8,$FCB0, $0238,$FCB0 ; 4
0000BBB0 FCB0 FDC8 0350 FDC8 FC14+                  dc.w    $FCB0,$FDC8, $0350,$FDC8, $FC14,$FF3C, $03EC,$FF3C ; 8
0000BBC0 FC14 00C4 03EC 00C4 FCB0+                  dc.w    $FC14,$00C4, $03EC,$00C4, $FCB0,$0238, $0350,$0238 ; 12
0000BBD0 FDC8 0350 0238 0350 FF3C+                  dc.w    $FDC8,$0350, $0238,$0350, $FF3C,$03EC, $00C4,$03EC ; 16
0000BBE0 FF9E FE0A 0062 FE0A FEE4+                  dc.w    $FF9E,$FE0A, $0062,$FE0A, $FEE4,$FE58, $011C,$FE58 ; 20
0000BBF0 FE58 FEE4 01A8 FEE4 FE0A+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE0A,$FF9E, $01F6,$FF9E ; 24
0000BC00 FE0A 0062 01F6 0062 FE58+                  dc.w    $FE0A,$0062, $01F6,$0062, $FE58,$011C, $01A8,$011C ; 28
0000BC10 FEE4 01A8 011C 01A8 FF9E+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9E,$0156, $0062,$0156 ; 32
0000BC20                                            even
0000BC20                            ; ===========================================================================
0000BC20                            ; -------------------------------------------------------------------------------------
0000BC20                            ; Ring Spawn Array - Underwater - same thing as I said above. Edit at your own risk!!!
0000BC20                            ; -------------------------------------------------------------------------------------
0000BC20                            
0000BC20                            SpillRingData_Water:
0000BC20 FF9C FE08 0064 FE08 FEE4+  				dc.w    $FF9C,$FE08, $0064,$FE08, $FEE4,$FE58, $011C,$FE58 ; 4
0000BC30 FE58 FEE4 01A8 FEE4 FE08+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE08,$FF9C, $01F8,$FF9C ; 8
0000BC40 FE08 0060 01F8 0060 FE58+                  dc.w    $FE08,$0060, $01F8,$0060, $FE58,$011C, $01A8,$011C ; 12
0000BC50 FEE4 01A8 011C 01A8 FF9C+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9C,$01F4, $0064,$01F4 ; 16
0000BC60 FFCE FF04 0032 FF04 FF72+                  dc.w    $FFCE,$FF04, $0032,$FF04, $FF72,$FF2C, $008E,$FF2C ; 20
0000BC70 FF2C FF72 00D4 FF72 FF04+                  dc.w    $FF2C,$FF72, $00D4,$FF72, $FF04,$FFCE, $00FC,$FFCE ; 24
0000BC80 FF04 0030 00FC 0030 FF2C+                  dc.w    $FF04,$0030, $00FC,$0030, $FF2C,$008E, $00D4,$008E ; 28
0000BC90 FF72 00D4 008E 00D4 FFCE+                  dc.w    $FF72,$00D4, $008E,$00D4, $FFCE,$00FA, $0032,$00FA ; 32
0000BCA0                                            even
0000BCA0                            ; ===========================================================================				
0000BCA0                            ; ===========================================================================				
0000BCA0                            		include	"_incObj\4B Giant Ring.asm"
0000BCA0                            ; ---------------------------------------------------------------------------
0000BCA0                            ; Object 4B - giant ring for entry to special stage
0000BCA0                            ; ---------------------------------------------------------------------------
0000BCA0                            
0000BCA0                            GiantRing:
0000BCA0 7000                       		moveq	#0,d0
0000BCA2 1028 0024                  		move.b	obRoutine(a0),d0
0000BCA6 323B 0000                  		move.w	GRing_Index(pc,d0.w),d1
0000BCAA 4EFB 1000                  		jmp	GRing_Index(pc,d1.w)
0000BCAE                            ; ===========================================================================
0000BCAE 0000                       GRing_Index:	dc.w GRing_Main-GRing_Index
0000BCB0 0000                       		dc.w GRing_Animate-GRing_Index
0000BCB2 0000                       		dc.w GRing_Collect-GRing_Index
0000BCB4 0000                       		dc.w GRing_Delete-GRing_Index
0000BCB6                            ; ===========================================================================
0000BCB6                            
0000BCB6                            GRing_Main:    ; Routine 0
0000BCB6 217C 0000 0000 0004        		move.l	#Map_GRing,obMap(a0)
0000BCBE 317C 2400 0002             		move.w	#$2400,obGfx(a0)
0000BCC4 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BCCA 117C 0040 0014             		move.b	#$40,obActWid(a0)
0000BCD0 4A28 0001                  		tst.b	obRender(a0)
0000BCD4 6A00                       		bpl.s	GRing_Animate
0000BCD6 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have 6 emeralds?
0000BCDC 6700 0000                  		beq.w	GRing_Delete    ; if yes, branch
0000BCE0 0C38 0002 F5C3             		cmpi.b	#2,(f_emeraldm).w    ;TIS Did you  hit the S-Monitor?
0000BCE6 6700                       		beq.s	GRing_Okay    ; if yes, branch
0000BCE8                            
0000BCE8 4E75                       		rts    
0000BCEA                            ; ===========================================================================
0000BCEA                            
0000BCEA                            GRing_Okay:
0000BCEA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BCEE 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000BCF4 117C 0052 0020             		move.b	#$52,obColType(a0)
0000BCFA 31FC 0C40 F7BE             		move.w	#$C40,(v_gfxbigring).w	; Signal that Art_BigRing should be loaded ($C40 is the size of Art_BigRing)
0000BD00                            
0000BD00                            GRing_Animate:	; Routine 2
0000BD00 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0)
0000BD24 6000 0000                  		bra.w	DisplaySprite
0000BD28                            ; ===========================================================================
0000BD28                            
0000BD28                            GRing_Collect:	; Routine 4
0000BD28 5528 0024                  		subq.b	#2,obRoutine(a0)
0000BD2C 117C 0000 0020             		move.b	#0,obColType(a0)
0000BD32 6100 0000                  		bsr.w	FindFreeObj
0000BD36 6600 0000                  		bne.w	GRing_PlaySnd
0000BD3A 12BC 0000                  		move.b	#id_RingFlash,0(a1) ; load giant ring flash object
0000BD3E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BD44 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BD4A 2348 003C                  		move.l	a0,$3C(a1)
0000BD4E 3038 D008                  		move.w	(v_player+obX).w,d0
0000BD52 B068 0008                  		cmp.w	obX(a0),d0	; has Sonic come from the left?
0000BD56 6500                       		bcs.s	GRing_PlaySnd	; if yes, branch
0000BD58 08E9 0000 0001             		bset	#0,obRender(a1)	; reverse flash	object	
0000BD5E 11FC 0001 FE57             		move.b  #1,(v_emeralds).w
0000BD64 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000BD6A                            		
0000BD6A                            GRing_PlaySnd:
0000BD74 608A                       		bra.s	GRing_Animate
0000BD76                            ; ===========================================================================
0000BD76                            
0000BD76                            GRing_Delete:	; Routine 6
0000BD76 6000 0000                  		bra.w	DeleteObject
0000BD76 6000 0000                  		bra.w	DeleteObject
0000BD7A                            		include	"_incObj\7C Ring Flash.asm"
0000BD7A                            ; ---------------------------------------------------------------------------
0000BD7A                            ; Object 7C - flash effect when	you collect the	giant ring
0000BD7A                            ; ---------------------------------------------------------------------------
0000BD7A                            
0000BD7A                            RingFlash:
0000BD7A 7000                       		moveq	#0,d0
0000BD7C 1028 0024                  		move.b	obRoutine(a0),d0
0000BD80 323B 0000                  		move.w	Flash_Index(pc,d0.w),d1
0000BD84 4EFB 1000                  		jmp	Flash_Index(pc,d1.w)
0000BD88                            ; ===========================================================================
0000BD88 0000                       Flash_Index:	dc.w Flash_Main-Flash_Index
0000BD8A 0000                       		dc.w Flash_ChkDel-Flash_Index
0000BD8C 0000                       		dc.w Flash_Delete-Flash_Index
0000BD8E                            ; ===========================================================================
0000BD8E                            
0000BD8E                            Flash_Main:	; Routine 0
0000BD8E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BD92 217C 0000 0000 0004        		move.l	#Map_Flash,obMap(a0)
0000BD9A 317C 2462 0002             		move.w	#$2462,obGfx(a0)
0000BDA0 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BDA6 317C 0000 0018             		move.w	#0,obPriority(a0)
0000BDAC 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000BDB2 117C 00FF 001A             		move.b	#$FF,obFrame(a0)
0000BDB8                            
0000BDB8                            Flash_ChkDel:	; Routine 2
0000BDB8 6100                       		bsr.s	Flash_Collect
0000BDD8 6000 0000                  		bra.w	DisplaySprite
0000BDDC                            
0000BDDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BDDC                            
0000BDDC                            
0000BDDC                            Flash_Collect:
0000BDDC 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000BDE0 6A00                       		bpl.s	locret_9F76
0000BDE2 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000BDE8 5228 001A                  		addq.b	#1,obFrame(a0)
0000BDEC 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)	; has animation	finished?
0000BDF2 6400                       		bcc.s	Flash_End	; if yes, branch
0000BDF4 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is 3rd frame displayed?
0000BDFA 6600                       		bne.s	locret_9F76	; if not, branch
0000BDFC 2268 003C                  		movea.l	$3C(a0),a1	; get parent object address
0000BE00 137C 0006 0024             		move.b	#6,obRoutine(a1) ; delete parent object
0000BE06 11FC 0000 D01C             		move.b	#id_Null,(v_player+obAnim).w ; make Sonic invisible
0000BE0C 11FC 0001 F7CD             		move.b	#1,(f_bigring).w ; stop	Sonic getting bonuses
0000BE12 4238 FE2D                  		clr.b	(v_invinc).w	; remove invincibility
0000BE16 4238 FE2C                  		clr.b	(v_shield).w	; remove shield
0000BE1A                            
0000BE1A                            locret_9F76:
0000BE1A 4E75                       		rts	
0000BE1C                            ; ===========================================================================
0000BE1C                            
0000BE1C                            Flash_End:
0000BE1C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BE20 31FC 0000 D000             		move.w	#0,(v_player).w ; remove Sonic object
0000BE26 588F                       		addq.l	#4,sp
0000BE28 4E75                       		rts	
0000BE2A                            ; End of function Flash_Collect
0000BE2A                            
0000BE2A                            ; ===========================================================================
0000BE2A                            
0000BE2A                            Flash_Delete:	; Routine 4
0000BE2A 6000 0000                  		bra.w	DeleteObject
0000BE2A 6000 0000                  		bra.w	DeleteObject
0000BE2E                            
0000BE2E                            		include	"_anim\Rings.asm"
0000BE2E                            ; ---------------------------------------------------------------------------
0000BE2E                            ; Animation script - ring
0000BE2E                            ; ---------------------------------------------------------------------------
0000BE2E 0000                       Ani_Ring:	dc.w @ring-Ani_Ring
0000BE30 0706 0708 09FC             @ring:		dc.b 7,	6, 7, 8, 9, afRoutine
0000BE36                            		even
0000BE36                            		even
0000BE36                            Map_Ring:		include	"_maps\Rings (JP1).asm"
0000BE36                            ; --------------------------------------------------------------------------------
0000BE36                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BE36                            ; --------------------------------------------------------------------------------
0000BE36                            
0000BE36                            SME_aSMQh:	
0000BE36 0000 0000                  		dc.w SME_aSMQh_14-SME_aSMQh, SME_aSMQh_1A-SME_aSMQh	
0000BE3A 0000 0000                  		dc.w SME_aSMQh_20-SME_aSMQh, SME_aSMQh_26-SME_aSMQh	
0000BE3E 0000 0000                  		dc.w SME_aSMQh_2C-SME_aSMQh, SME_aSMQh_32-SME_aSMQh	
0000BE42 0000 0000                  		dc.w SME_aSMQh_38-SME_aSMQh, SME_aSMQh_3E-SME_aSMQh	
0000BE46 0000 0000                  		dc.w SME_aSMQh_44-SME_aSMQh, SME_aSMQh_4A-SME_aSMQh	
0000BE4A 01                         SME_aSMQh_14:	dc.b 1	
0000BE4B F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
0000BE50 01                         SME_aSMQh_1A:	dc.b 1	
0000BE51 F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
0000BE56 01                         SME_aSMQh_20:	dc.b 1	
0000BE57 F805 000A F8               		dc.b $F8, 5, 0, $A, $F8	
0000BE5C 01                         SME_aSMQh_26:	dc.b 1	
0000BE5D F801 0008 FC               		dc.b $F8, 1, 0, 8, $FC	
0000BE62 01                         SME_aSMQh_2C:	dc.b 1	
0000BE63 F805 080A F8               		dc.b $F8, 5, 8, $A, $F8	
0000BE68 01                         SME_aSMQh_32:	dc.b 1	
0000BE69 F805 0804 F8               		dc.b $F8, 5, 8, 4, $F8	
0000BE6E 01                         SME_aSMQh_38:	dc.b 1	
0000BE6F F805 0010 F8               		dc.b $F8, 5, 0, $10, $F8	
0000BE74 01                         SME_aSMQh_3E:	dc.b 1	
0000BE75 F805 1810 F8               		dc.b $F8, 5, $18, $10, $F8	
0000BE7A 01                         SME_aSMQh_44:	dc.b 1	
0000BE7B F805 0810 F8               		dc.b $F8, 5, 8, $10, $F8	
0000BE80 01                         SME_aSMQh_4A:	dc.b 1	
0000BE81 F805 1010 F8               		dc.b $F8, 5, $10, $10, $F8	
0000BE86                            		even
0000BE86                            		even
0000BE86                            Map_GRing:	include	"_maps\Giant Ring.asm"
0000BE86                            ; ---------------------------------------------------------------------------
0000BE86                            ; Sprite mappings - giant ring
0000BE86                            ; ---------------------------------------------------------------------------
0000BE86                            Map_GRing_internal:
0000BE86 0000                       		dc.w byte_9FDA-Map_GRing_internal
0000BE88 0000                       		dc.w byte_A00D-Map_GRing_internal
0000BE8A 0000                       		dc.w byte_A036-Map_GRing_internal
0000BE8C 0000                       		dc.w byte_A04B-Map_GRing_internal
0000BE8E 0A                         byte_9FDA:	dc.b $A
0000BE8F E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8	; ring front
0000BE94 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000BE99 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000BE9E E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000BEA3 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000BEA8 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000BEAD 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000BEB2 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000BEB7 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000BEBC 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000BEC1 08                         byte_A00D:	dc.b 8
0000BEC2 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0 ; ring angle
0000BEC7 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000BECC E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000BED1 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000BED6 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000BEDB 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000BEE0 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000BEE5 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000BEEA 04                         byte_A036:	dc.b 4
0000BEEB E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4 ; ring perpendicular
0000BEF0 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000BEF5 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000BEFA 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000BEFF 08                         byte_A04B:	dc.b 8
0000BF00 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0 ; ring angle
0000BF05 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000BF0A E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000BF0F F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000BF14 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000BF19 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000BF1E 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000BF23 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000BF28                            		even
0000BF28                            		even
0000BF28                            Map_Flash:	include	"_maps\Ring Flash.asm"
0000BF28                            ; ---------------------------------------------------------------------------
0000BF28                            ; Sprite mappings - flash effect when you collect the giant ring
0000BF28                            ; ---------------------------------------------------------------------------
0000BF28                            Map_Flash_internal:
0000BF28 0000                       		dc.w byte_A084-Map_Flash_internal
0000BF2A 0000                       		dc.w byte_A08F-Map_Flash_internal
0000BF2C 0000                       		dc.w byte_A0A4-Map_Flash_internal
0000BF2E 0000                       		dc.w byte_A0B9-Map_Flash_internal
0000BF30 0000                       		dc.w byte_A0CE-Map_Flash_internal
0000BF32 0000                       		dc.w byte_A0E3-Map_Flash_internal
0000BF34 0000                       		dc.w byte_A0F8-Map_Flash_internal
0000BF36 0000                       		dc.w byte_A103-Map_Flash_internal
0000BF38 02                         byte_A084:	dc.b 2
0000BF39 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000BF3E 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000BF43 04                         byte_A08F:	dc.b 4
0000BF44 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000BF49 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000BF4E 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000BF53 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000BF58 04                         byte_A0A4:	dc.b 4
0000BF59 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000BF5E E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000BF63 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000BF68 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000BF6D 04                         byte_A0B9:	dc.b 4
0000BF6E E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000BF73 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000BF78 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000BF7D 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000BF82 04                         byte_A0CE:	dc.b 4
0000BF83 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000BF88 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000BF8D 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000BF92 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000BF97 04                         byte_A0E3:	dc.b 4
0000BF98 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000BF9D E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000BFA2 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000BFA7 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000BFAC 02                         byte_A0F8:	dc.b 2
0000BFAD E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000BFB2 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000BFB7 04                         byte_A103:	dc.b 4
0000BFB8 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000BFBD E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000BFC2 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000BFC7 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000BFCC                            		even
0000BFCC                            		even
0000BFCC                            		include	"_incObj\26 Monitor.asm"
0000BFCC                            ; ---------------------------------------------------------------------------
0000BFCC                            ; Object 26 - monitors
0000BFCC                            ; ---------------------------------------------------------------------------
0000BFCC                            
0000BFCC                            Monitor:
0000BFCC 7000                       		moveq	#0,d0
0000BFCE 1028 0024                  		move.b	obRoutine(a0),d0
0000BFD2 323B 0000                  		move.w	Mon_Index(pc,d0.w),d1
0000BFD6 4EFB 1000                  		jmp	Mon_Index(pc,d1.w)
0000BFDA                            ; ===========================================================================
0000BFDA 0000                       Mon_Index:	dc.w Mon_Main-Mon_Index
0000BFDC 0000                       		dc.w Mon_Solid-Mon_Index
0000BFDE 0000                       		dc.w Mon_BreakOpen-Mon_Index
0000BFE0 0000                       		dc.w Mon_Animate-Mon_Index
0000BFE2 0000                       		dc.w Mon_Display-Mon_Index
0000BFE4                            ; ===========================================================================
0000BFE4                            
0000BFE4                            Mon_Main:	; Routine 0
0000BFE4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BFE8 117C 000E 0016             		move.b	#$E,obHeight(a0)
0000BFEE 117C 000E 0017             		move.b	#$E,obWidth(a0)
0000BFF4 217C 0000 0000 0004        		move.l	#Map_Monitor,obMap(a0)
0000BFFC 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000C002 117C 0004 0001             		move.b	#4,obRender(a0)
0000C008 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000C00E 117C 000F 0014             		move.b	#$F,obActWid(a0)
0000C014 45F8 FC00                  		lea	(v_objstate).w,a2
0000C018 7000                       		moveq	#0,d0
0000C01A 1028 0023                  		move.b	obRespawnNo(a0),d0
0000C01E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C024 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000C02A 6700                       		beq.s	@notbroken	; if not, branch
0000C02C 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Mon_Display" routine
0000C032 117C 000B 001A             		move.b	#$B,obFrame(a0)	; use broken monitor frame
0000C038 4E75                       		rts	
0000C03A                            ; ===========================================================================
0000C03A                            
0000C03A                            	@notbroken:
0000C03A 117C 0046 0020             		move.b	#$46,obColType(a0)
0000C040 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0)
0000C046                            
0000C046                            Mon_Solid:	; Routine 2
0000C046 1028 0025                  		move.b	ob2ndRout(a0),d0 ; is monitor set to fall?
0000C04A 6700                       		beq.s	@normal		; if not, branch
0000C04C 5500                       		subq.b	#2,d0
0000C04E 6600                       		bne.s	@fall
0000C050                            
0000C050                            		; 2nd Routine 2
0000C050 7200                       		moveq	#0,d1
0000C052 1228 0014                  		move.b	obActWid(a0),d1
0000C056 0641 000B                  		addi.w	#$B,d1
0000C05A 6100 CDA0                  		bsr.w	ExitPlatform
0000C05E 0829 0003 0022             		btst	#3,obStatus(a1) ; is Sonic on top of the monitor?
0000C064 6600 0000                  		bne.w	@ontop		; if yes, branch
0000C068 4228 0025                  		clr.b	ob2ndRout(a0)
0000C06C 6000 0000                  		bra.w	Mon_Animate
0000C070                            ; ===========================================================================
0000C070                            
0000C070                            	@ontop:
0000C070 363C 0010                  		move.w	#$10,d3
0000C074 3428 0008                  		move.w	obX(a0),d2
0000C078 6100 D2E0                  		bsr.w	MvSonicOnPtfm
0000C07C 6000 0000                  		bra.w	Mon_Animate
0000C080                            ; ===========================================================================
0000C080                            
0000C080                            @fall:		; 2nd Routine 4
0000C080 6100 0000                  		bsr.w	ObjectFall
0000C084 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000C08A 4A41                       		tst.w	d1
0000C08C 6A00 0000                  		bpl.w	Mon_Animate
0000C090 D368 000C                  		add.w	d1,obY(a0)
0000C094 4268 0012                  		clr.w	obVelY(a0)
0000C098 4228 0025                  		clr.b	ob2ndRout(a0)
0000C09C 6000 0000                  		bra.w	Mon_Animate
0000C0A0                            ; ===========================================================================
0000C0A0                            
0000C0A0                            @normal:	; 2nd Routine 0
0000C0A0 323C 001A                  		move.w	#$1A,d1
0000C0A4 343C 000F                  		move.w	#$F,d2
0000C0A8 6100 0000                  		bsr.w	Mon_SolidSides
0000C0AC 6700 0000                  		beq.w	loc_A25C
0000C0B0 4A69 0012                  		tst.w	obVelY(a1)
0000C0B4 6B00                       		bmi.s	loc_A20A
0000C0B6 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000C0BC 6700                       		beq.s	loc_A25C	; if yes, branch
0000C0BE 0C29 0000 001C             		cmpi.b	#id_SpinDash,obAnim(a1) ; is Sonic Spindashing?
0000C0C4 6700                       		beq.s	loc_A25C	; if yes, branch
0000C0C6 0C29 0000 001C             		cmpi.b	#id_Peelout,obAnim(a1) ; is Sonic Spindashing?
0000C0CC 6700                       		beq.s	loc_A25C	; if yes, branch
0000C0CE                            
0000C0CE                            loc_A20A:
0000C0CE 4A41                       		tst.w	d1
0000C0D0 6A00                       		bpl.s	loc_A220
0000C0D2 9769 000C                  		sub.w	d3,obY(a1)
0000C0D6 6100 CC12                  		bsr.w	loc_74AE
0000C0DA 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
0000C0E0 6000 0000                  		bra.w	Mon_Animate
0000C0E4                            ; ===========================================================================
0000C0E4                            
0000C0E4                            loc_A220:
0000C0E4 4A40                       		tst.w	d0
0000C0E6 6700 0000                  		beq.w	loc_A246
0000C0EA 6B00                       		bmi.s	loc_A230
0000C0EC 4A69 0010                  		tst.w	obVelX(a1)
0000C0F0 6B00                       		bmi.s	loc_A246
0000C0F2 6000                       		bra.s	loc_A236
0000C0F4                            ; ===========================================================================
0000C0F4                            
0000C0F4                            loc_A230:
0000C0F4 4A69 0010                  		tst.w	obVelX(a1)
0000C0F8 6A00                       		bpl.s	loc_A246
0000C0FA                            
0000C0FA                            loc_A236:
0000C0FA 9169 0008                  		sub.w	d0,obX(a1)
0000C0FE 337C 0000 0020             		move.w	#0,obInertia(a1)
0000C104 337C 0000 0010             		move.w	#0,obVelX(a1)
0000C10A                            
0000C10A                            loc_A246:
0000C10A 0829 0001 0022             		btst	#1,obStatus(a1)
0000C110 6600                       		bne.s	loc_A26A
0000C112 08E9 0005 0022             		bset	#5,obStatus(a1)
0000C118 08E8 0005 0022             		bset	#5,obStatus(a0)
0000C11E 6000                       		bra.s	Mon_Animate
0000C120                            ; ===========================================================================
0000C120                            
0000C120                            loc_A25C:
0000C120 0828 0005 0022             		btst	#5,obStatus(a0)
0000C126 6700                       		beq.s	Mon_Animate
0000C128 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
0000C12E 6700                       		beq.s	loc_A26A	; if so, branch
0000C130 337C 0001 001C             		move.w	#1,obAnim(a1)	; clear obAnim and set obNextAni to 1, putting Sonic in his walking animation
0000C136                            
0000C136                            loc_A26A:
0000C136 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000C13C 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000C142                            
0000C142                            Mon_Animate:	; Routine 6
0000C142 43F9 0000 0000             		lea	(Ani_Monitor).l,a1
0000C148 6100 0000                  		bsr.w	AnimateSprite
0000C14C                            
0000C14C                            Mon_Display:	; Routine 8
0000C14C 6100 0000                  		bsr.w	DisplaySprite
0000C16E 4E75                       		rts	
0000C170                            ; ===========================================================================
0000C170                            
0000C170                            Mon_BreakOpen:	; Routine 4
0000C170 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C174 117C 0000 0020             		move.b	#0,obColType(a0)
0000C17A 6100 0000                  		bsr.w	FindFreeObj
0000C17E 6600                       		bne.s	Mon_Explode
0000C180 12BC 0000                  		move.b	#id_PowerUp,0(a1) ; load monitor contents object
0000C184 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C18A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C190 1368 001C 001C             		move.b	obAnim(a0),obAnim(a1)
0000C196                            
0000C196                            Mon_Explode:
0000C196 6100 0000                  		bsr.w	FindFreeObj
0000C19A 6600                       		bne.s	@fail
0000C19C 12BC 0000                  		move.b	#id_ExplosionItem,0(a1) ; load explosion object
0000C1A0 5429 0024                  		addq.b	#2,obRoutine(a1) ; don't create an animal
0000C1A4 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C1AA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C1B0                            
0000C1B0                            	@fail:
0000C1B0 45F8 FC00                  		lea	(v_objstate).w,a2
0000C1B4 7000                       		moveq	#0,d0
0000C1B6 1028 0023                  		move.b	obRespawnNo(a0),d0
0000C1BA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C1C0 117C 0009 001C             		move.b	#9,obAnim(a0)	; set monitor type to broken
0000C1C6 6000 0000                  		bra.w	DisplaySprite
0000C1C6 6000 0000                  		bra.w	DisplaySprite
0000C1CA                            		include	"_incObj\2E Monitor Content Power-Up.asm"
0000C1CA                            ; ---------------------------------------------------------------------------
0000C1CA                            ; Object 2E - contents of monitors
0000C1CA                            ; ---------------------------------------------------------------------------
0000C1CA                            
0000C1CA                            PowerUp:
0000C1CA 7000                       		moveq	#0,d0
0000C1CC 1028 0024                  		move.b	obRoutine(a0),d0
0000C1D0 323B 0000                  		move.w	Pow_Index(pc,d0.w),d1
0000C1D4 4EBB 1000                  		jsr	Pow_Index(pc,d1.w)
0000C1D8 6000 0000                  		bra.w	DisplaySprite
0000C1DC                            ; ===========================================================================
0000C1DC 0000                       Pow_Index:	dc.w Pow_Main-Pow_Index
0000C1DE 0000                       		dc.w Pow_Move-Pow_Index
0000C1E0 0000                       		dc.w Pow_Delete-Pow_Index
0000C1E2                            ; ===========================================================================
0000C1E2                            
0000C1E2                            Pow_Main:	; Routine 0
0000C1E2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C1E6 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000C1EC 117C 0024 0001             		move.b	#$24,obRender(a0)
0000C1F2 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000C1F8 117C 0008 0014             		move.b	#8,obActWid(a0)
0000C1FE 317C FD00 0012             		move.w	#-$300,obVelY(a0)
0000C204 7000                       		moveq	#0,d0
0000C206 1028 001C                  		move.b	obAnim(a0),d0	; get subtype
0000C20A 5400                       		addq.b	#2,d0
0000C20C 1140 001A                  		move.b	d0,obFrame(a0)	; use correct frame
0000C210 227C 0000 0000             		movea.l	#Map_Monitor,a1
0000C216 D000                       		add.b	d0,d0
0000C218 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000C21C 5249                       		addq.w	#1,a1
0000C21E 2149 0004                  		move.l	a1,obMap(a0)
0000C222                            
0000C222                            Pow_Move:	; Routine 2
0000C222 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000C226 6A00 0000                  		bpl.w	Pow_Checks	; if not, branch
0000C22A 6100 0000                  		bsr.w	SpeedToPos
0000C22E 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000C234 4E75                       		rts	
0000C236                            ; ===========================================================================
0000C236                            
0000C236                            Pow_Checks:
0000C236 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C23A 317C 001D 001E             		move.w	#29,obTimeFrame(a0) ; display icon for half a second
0000C240                            
0000C240                            Pow_ChkEggman:
0000C240 1028 001C                  		move.b	obAnim(a0),d0
0000C244 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000C248 6600                       		bne.s	Pow_ChkSonic
0000C24A                            		
0000C24A 4EF9 0000 0000             		jmp	Spik_Hurt
0000C250                            		
0000C250 4E75                       		rts
0000C252                            ; ===========================================================================
0000C252                            
0000C252                            Pow_ChkSonic:
0000C252 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000C256 6600                       		bne.s	Pow_ChkShoes
0000C258                            
0000C258                            	ExtraLife:
0000C258 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000C25C 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000C26A                            
0000C26A                            ; ===========================================================================
0000C26A                            
0000C26A                            Pow_ChkShoes:
0000C26A 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000C26E 6600                       		bne.s	Pow_ChkShield
0000C270 0C38 0001 FE19             		cmpi.b #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
0000C276 6700 0000                  		beq 	Pow_NoMus
0000C27A 11FC 0001 FE2E             		move.b	#1,(v_shoes).w	; speed up the BG music
0000C280 31FC 04B0 D034             		move.w	#$4B0,(v_player+$34).w	; time limit for the power-up
0000C286 31FC 0C00 F760             		move.w	#$C00,(v_sonspeedmax).w ; change Sonic's top speed
0000C28C 31FC 0018 F762             		move.w	#$18,(v_sonspeedacc).w	; change Sonic's acceleration
0000C292 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w	; change Sonic's deceleration
0000C298 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C29C 6600                       		bne.s	Pow_NoMus	; if yes, branch
0000C29E 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C2A4 6300                       			bls.s	Pow_NoMus
0000C2B0                            ; ===========================================================================
0000C2B0                            
0000C2B0                            Pow_NoMus:
0000C2B0 4E75                       		rts	
0000C2B2                            ; ===========================================================================
0000C2B2                            
0000C2B2                            Pow_ChkShield:
0000C2B2 0C00 0004                          cmpi.b    #4,d0        ; does monitor contain a shield?
0000C2B6 6600                               bne.s    Pow_ChkInvinc
0000C2B8                            
0000C2B8 11FC 0001 FE2C                     move.b    #1,(v_shield).w    ; give Sonic a shield
0000C2BE 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove red shield
0000C2C4 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C2CA 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C2D0 11FC 0000 D180                     move.b    #id_ShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C2D6 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000C2DA 303C 0000                          move.w    #sfx_Shield,d0
0000C2DE 4EF9 0000 12FE                     jmp    (PlaySound_Special).l    ; play shield sound
0000C2E4                            ; ===========================================================================
0000C2E4                            
0000C2E4                            Pow_ChkInvinc:
0000C2E4 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000C2E8 6600                       		bne.s	Pow_ChkRings
0000C2EA 0C38 0001 FE19             		cmpi.b #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
0000C2F0 6700 0000                  		beq 	Pow_NoMusic
0000C2F4 11FC 0001 FE2D             		move.b	#1,(v_invinc).w	; make Sonic invincible
0000C2FA 31FC 0560 D032             		move.w	#$560,(v_player+$32).w ; time limit for the power-up
0000C300 11FC 0000 D200             		move.b	#id_InvStars,(v_objspace+$200).w ; load stars object ($3801)
0000C306 11FC 0001 D21C             		move.b	#1,(v_objspace+$200+obAnim).w
0000C30C 11FC 0000 D240             		move.b	#id_InvStars,(v_objspace+$240).w ; load stars object ($3802)
0000C312 11FC 0002 D25C             		move.b	#2,(v_objspace+$240+obAnim).w
0000C318 11FC 0000 D280             		move.b	#id_InvStars,(v_objspace+$280).w ; load stars object ($3803)
0000C31E 11FC 0003 D29C             		move.b	#3,(v_objspace+$280+obAnim).w
0000C324 11FC 0000 D2C0             		move.b	#id_InvStars,(v_objspace+$2C0).w ; load stars object ($3804)
0000C32A 11FC 0004 D2DC             		move.b	#4,(v_objspace+$2C0+obAnim).w
0000C330 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C334 6600                       		bne.s	Pow_NoMusic	; if yes, branch
0000C336 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C33C 6300                       			bls.s	Pow_NoMusic
0000C348                            ; ===========================================================================
0000C348                            
0000C348                            Pow_NoMusic:
0000C348 4E75                       		rts	
0000C34A                            ; ===========================================================================
0000C34A                            
0000C34A                            Pow_ChkRings:
0000C34A 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000C34E 6600                       		bne.s	Pow_ChkS
0000C350                            
0000C350 0678 000A FE20             		addi.w	#10,(v_rings).w	; add 10 rings to the number of rings you have
0000C356 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the ring counter
0000C35C 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C362 6500                       		bcs.s	Pow_RingSound
0000C364 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C36A 6700 FEEC                  		beq.w	ExtraLife
0000C36E 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C374 6500                       		bcs.s	Pow_RingSound
0000C376 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C37C 6700 FEDA                  		beq.w	ExtraLife
0000C380                            
0000C380                            	Pow_RingSound:
0000C38A                            ; ===========================================================================
0000C38A                            
0000C38A                            Pow_ChkS:
0000C38A 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'?
0000C38E 6600                       		bne.s	Pow_ChkSRing
0000C390                            		
0000C390 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0000C396 6700                       		beq.s	PowS2	; if yes, branch
0000C398 0404 003B                  		subi.b	#$3B,d4
0000C39C 7000                       		moveq	#0,d0
0000C39E 11FC 0000 F5C3             		move.b	#0,(f_emeraldm).w
0000C3A4 11FC 0001 F5C3             		move.b	#1,(f_emeraldm).w
0000C3AA 6000                       		bra.s	PowSPlay
0000C3AC                            
0000C3AC                            PowS2:
0000C3AC 0678 0032 FE20             		addi.w	#50,(v_rings).w	; add 50 rings to the number of rings you have
0000C3B2 11FC 0000 F5C3             		move.b	#0,(f_emeraldm).w
0000C3B8 0038 0005 FE1D             		ori.b	#5,(f_ringcount).w ; update the ring counter
0000C3BE 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C3C4 6500                       		bcs.s	PowSPlay
0000C3C6 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C3CC 6700 FE8A                  		beq.w	ExtraLife
0000C3D0 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C3D6 6500                       		bcs.s	PowSPlay
0000C3D8 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C3DE 6700 FE78                  		beq.w	ExtraLife	
0000C3E2                            
0000C3E2                            PowSPlay:
0000C3EC                            
0000C3EC                            		
0000C3EC                            
0000C3EC                            
0000C3EC                            Pow_ChkSRing:
0000C3EC 0C00 0008                  		cmpi.b	#8,d0		; does monitor contain 'S'?
0000C3F0 6600                       		bne.s	Pow_ChkRShield
0000C3F2                            
0000C3F2                            		
0000C3F2 0678 0014 FE20             		addi.w	#20,(v_rings).w	; add 20 rings to the number of rings you have
0000C3F8 0038 0002 FE1D             		ori.b	#2,(f_ringcount).w ; update the ring counter
0000C3FE 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C404 6500                       		bcs.s	Pow_ChkSRingSound
0000C406 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C40C 6700 FE4A                  		beq.w	ExtraLife
0000C410 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C416 6500                       		bcs.s	Pow_ChkSRingSound
0000C418 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C41E 6700 FE38                  		beq.w	ExtraLife	
0000C422                            
0000C422                            Pow_ChkSRingSound:
0000C42C                            
0000C42C                            
0000C42C                            Pow_ChkRShield:
0000C42C 0C00 000A                          cmpi.b    #10,d0        ; does monitor contain a shield?
0000C430 6600                               bne.s    Pow_ChkGShield
0000C432                            
0000C432 11FC 0002 F5C8                     move.b    #2,(v_rshield).w    ; give Sonic a shield
0000C438 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove red shield
0000C43E 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C444 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C44A 11FC 0000 D180                     move.b    #id_RShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C450 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000C454 303C 0000                          move.w    #sfx_FireShield,d0
0000C458 4EF9 0000 12FE                     jmp    (PlaySound_Special).l    ; play shield sound
0000C45E                            
0000C45E                            Pow_ChkGShield:
0000C45E 0C00 000B                          cmpi.b    #11,d0        ; does monitor contain a shield?
0000C462 6600                               bne.s    Pow_ChkSpShield
0000C464                            
0000C464 11FC 0001 F5C9                     move.b    #1,(v_gshield).w    ; give Sonic a shield
0000C46A 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove red shield
0000C470 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove g shield
0000C476 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C47C 11FC 0000 D180                     move.b    #id_GShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C482 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000C486 303C 0000                          move.w    #sfx_LightningShield,d0
0000C48A 4EF9 0000 12FE                     jmp    (PlaySound_Special).l    ; play shield sound
0000C490                            
0000C490                            Pow_ChkSpShield:
0000C490 0C00 000C                         cmpi.b    #12,d0        ; does monitor contain a shield?
0000C494 66FA                               bne.s    Pow_ChkSpShield
0000C496                            
0000C496 11FC 0001 F5CA                     move.b    #1,(v_spshield).w    ; give Sonic a shield
0000C49C 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove red shield
0000C4A2 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove g shield
0000C4A8 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove s shield
0000C4AE 11FC 0000 D180                     move.b    #id_SpShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C4B4 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000C4B8 303C 0000                          move.w    #sfx_SpikesMove,d0
0000C4BC 4EF9 0000 12FE                     jmp    (PlaySound_Special).l    ; play shield sound
0000C4C2                            
0000C4C2                            Pow_ChkEnd:
0000C4C2 4E75                       		rts
0000C4C4                            ; ===========================================================================
0000C4C4                            
0000C4C4                            Pow_Delete:	; Routine 4
0000C4C4 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0000C4C8 6B00 0000                  		bmi.w	DeleteObject	; delete after half a second
0000C4CC 4E75                       		rts	
0000C4CC 4E75                       		rts	
0000C4CE                            		include	"_incObj\26 Monitor (SolidSides subroutine).asm"
0000C4CE                            ; ---------------------------------------------------------------------------
0000C4CE                            ; Subroutine to	make the sides of a monitor solid
0000C4CE                            ; ---------------------------------------------------------------------------
0000C4CE                            
0000C4CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C4CE                            
0000C4CE                            
0000C4CE                            Mon_SolidSides:
0000C4CE 43F8 D000                  		lea	(v_player).w,a1
0000C4D2 3029 0008                  		move.w	obX(a1),d0
0000C4D6 9068 0008                  		sub.w	obX(a0),d0
0000C4DA D041                       		add.w	d1,d0
0000C4DC 6B00                       		bmi.s	loc_A4E6
0000C4DE 3601                       		move.w	d1,d3
0000C4E0 D643                       		add.w	d3,d3
0000C4E2 B043                       		cmp.w	d3,d0
0000C4E4 6200                       		bhi.s	loc_A4E6
0000C4E6 1629 0016                  		move.b	obHeight(a1),d3
0000C4EA 4883                       		ext.w	d3
0000C4EC D443                       		add.w	d3,d2
0000C4EE 3629 000C                  		move.w	obY(a1),d3
0000C4F2 9668 000C                  		sub.w	obY(a0),d3
0000C4F6 D642                       		add.w	d2,d3
0000C4F8 6B00                       		bmi.s	loc_A4E6
0000C4FA D442                       		add.w	d2,d2
0000C4FC B642                       		cmp.w	d2,d3
0000C4FE 6400                       		bcc.s	loc_A4E6
0000C500 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000C504 6B00                       		bmi.s	loc_A4E6
0000C506 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000C50C 6400                       		bcc.s	loc_A4E6
0000C50E 4A78 FE08                  		tst.w	(v_debuguse).w
0000C512 6600                       		bne.s	loc_A4E6
0000C514 B240                       		cmp.w	d0,d1
0000C516 6400                       		bcc.s	loc_A4DC
0000C518 D241                       		add.w	d1,d1
0000C51A 9041                       		sub.w	d1,d0
0000C51C                            
0000C51C                            loc_A4DC:
0000C51C 0C43 0010                  		cmpi.w	#$10,d3
0000C520 6500                       		bcs.s	loc_A4EA
0000C522                            
0000C522                            loc_A4E2:
0000C522 7201                       		moveq	#1,d1
0000C524 4E75                       		rts	
0000C526                            ; ===========================================================================
0000C526                            
0000C526                            loc_A4E6:
0000C526 7200                       		moveq	#0,d1
0000C528 4E75                       		rts	
0000C52A                            ; ===========================================================================
0000C52A                            
0000C52A                            loc_A4EA:
0000C52A 7200                       		moveq	#0,d1
0000C52C 1228 0014                  		move.b	obActWid(a0),d1
0000C530 5841                       		addq.w	#4,d1
0000C532 3401                       		move.w	d1,d2
0000C534 D442                       		add.w	d2,d2
0000C536 D269 0008                  		add.w	obX(a1),d1
0000C53A 9268 0008                  		sub.w	obX(a0),d1
0000C53E 6BE2                       		bmi.s	loc_A4E2
0000C540 B242                       		cmp.w	d2,d1
0000C542 64DE                       		bcc.s	loc_A4E2
0000C544 72FF                       		moveq	#-1,d1
0000C546 4E75                       		rts	
0000C548                            ; End of function Obj26_SolidSides
0000C548                            ; End of function Obj26_SolidSides
0000C548                            		include	"_anim\Monitor.asm"
0000C548                            ; ---------------------------------------------------------------------------
0000C548                            ; Animation script - monitors
0000C548                            ; ---------------------------------------------------------------------------
0000C548 0000 0000 0000             Ani_Monitor:	dc.w @static-Ani_Monitor, @eggman-Ani_Monitor, @sonic-Ani_Monitor
0000C54E 0000 0000 0000             		dc.w @shoes-Ani_Monitor, @shield-Ani_Monitor, @invincible-Ani_Monitor
0000C554 0000 0000 0000             		dc.w @rings-Ani_Monitor, @s-Ani_Monitor, @goggles-Ani_Monitor
0000C55A 0000 0000 0000             		dc.w @breaking-Ani_Monitor, @rshield-Ani_Monitor, @yshield-Ani_Monitor
0000C560 0000                       		dc.w @spshield-Ani_Monitor
0000C562                            		
0000C562 0100 0102 FF               @static:	dc.b 1,	0, 1, 2, afEnd
0000C568 00                         		even
0000C568 0100 0303 0103 0302 0303+  @eggman:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, afEnd
0000C574 00                         		even
0000C574 0100 0404 0104 0402 0404+  @sonic:		dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, afEnd
0000C580 00                         		even
0000C580 0100 0505 0105 0502 0505+  @shoes:		dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, afEnd
0000C58C 00                         		even
0000C58C 0100 0606 0106 0602 0606+  @shield:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, afEnd
0000C598 00                         		even
0000C598 0100 0707 0107 0702 0707+  @invincible:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, afEnd
0000C5A4 00                         		even
0000C5A4 0100 0808 0108 0802 0808+  @rings:		dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, afEnd
0000C5B0 00                         		even
0000C5B0 0100 0909 0109 0902 0909+  @s:		dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, afEnd
0000C5BC 00                         		even
0000C5BC 0100 0A0A 010A 0A02 0A0A+  @goggles:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, afEnd
0000C5C8 00                         		even
0000C5C8 0200 0102 0BFE 01          @breaking:	dc.b 2,	0, 1, 2, $B, afBack, 1
0000C5D0 00                         		even
0000C5D0 0100 0C0C 010C 0C02 0C0C+  @rshield:	dc.b 1,	0, $C, $C, 1, $C, $C, 2, $C, $C, afEnd
0000C5DC 00                         		even
0000C5DC 0100 0D0D 010D 0D02 0D0D+  @yshield:	dc.b 1,	0, $D, $D, 1, $D, $D, 2, $D, $D, afEnd
0000C5E8 00                         		even
0000C5E8 0100 0E0E 010E 0E02 0E0E+  @spshield:	dc.b 1,	0, $E, $E, 1, $E, $E, 2, $E, $E, afEnd
0000C5F4 00                         		even
0000C5F4 00                         		even
0000C5F4                            Map_Monitor:	include	"_maps\Monitor.asm"
0000C5F4                            ; --------------------------------------------------------------------------------
0000C5F4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C5F4                            ; --------------------------------------------------------------------------------
0000C5F4                            
0000C5F4                            SME_0IgQe:	
0000C5F4 0000 0000                  		dc.w SME_0IgQe_1E-SME_0IgQe, SME_0IgQe_24-SME_0IgQe	
0000C5F8 0000 0000                  		dc.w SME_0IgQe_2F-SME_0IgQe, SME_0IgQe_3A-SME_0IgQe	
0000C5FC 0000 0000                  		dc.w SME_0IgQe_45-SME_0IgQe, SME_0IgQe_50-SME_0IgQe	
0000C600 0000 0000                  		dc.w SME_0IgQe_5B-SME_0IgQe, SME_0IgQe_66-SME_0IgQe	
0000C604 0000 0000                  		dc.w SME_0IgQe_71-SME_0IgQe, SME_0IgQe_7C-SME_0IgQe	
0000C608 0000 0000                  		dc.w SME_0IgQe_87-SME_0IgQe, SME_0IgQe_92-SME_0IgQe	
0000C60C 0000 0000                  		dc.w SME_0IgQe_AC-SME_0IgQe, SME_0IgQe_B7-SME_0IgQe	
0000C610 0000                       		dc.w SME_0IgQe_C2-SME_0IgQe	
0000C612 01                         SME_0IgQe_1E:	dc.b 1	
0000C613 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C618 02                         SME_0IgQe_24:	dc.b 2	
0000C619 F505 0010 F8               		dc.b $F5, 5, 0, $10, $F8	
0000C61E F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C623 02                         SME_0IgQe_2F:	dc.b 2	
0000C624 F505 0014 F8               		dc.b $F5, 5, 0, $14, $F8	
0000C629 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C62E 02                         SME_0IgQe_3A:	dc.b 2	
0000C62F F505 0018 F8               		dc.b $F5, 5, 0, $18, $F8	
0000C634 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C639 02                         SME_0IgQe_45:	dc.b 2	
0000C63A F505 0154 F8               		dc.b $F5, 5, 1, $54, $F8	
0000C63F F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C644 02                         SME_0IgQe_50:	dc.b 2	
0000C645 F505 0024 F8               		dc.b $F5, 5, 0, $24, $F8	
0000C64A F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C64F 02                         SME_0IgQe_5B:	dc.b 2	
0000C650 F505 2028 F8               		dc.b $F5, 5, $20, $28, $F8	
0000C655 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C65A 02                         SME_0IgQe_66:	dc.b 2	
0000C65B F505 002C F8               		dc.b $F5, 5, 0, $2C, $F8	
0000C660 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C665 02                         SME_0IgQe_71:	dc.b 2	
0000C666 F505 2030 F8               		dc.b $F5, 5, $20, $30, $F8	
0000C66B F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C670 02                         SME_0IgQe_7C:	dc.b 2	
0000C671 F505 0034 F8               		dc.b $F5, 5, 0, $34, $F8	
0000C676 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C67B 02                         SME_0IgQe_87:	dc.b 2	
0000C67C F505 0020 F8               		dc.b $F5, 5, 0, $20, $F8	
0000C681 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C686 05                         SME_0IgQe_92:	dc.b 5	
0000C687 010C 0038 F0               		dc.b 1, $C, 0, $38, $F0	
0000C68C 0900 0003 F0               		dc.b 9, 0, 0, 3, $F0	
0000C691 0900 0007 F8               		dc.b 9, 0, 0, 7, $F8	
0000C696 0900 000B 00               		dc.b 9, 0, 0, $B, 0	
0000C69B 0900 000F 08               		dc.b 9, 0, 0, $F, 8	
0000C6A0 02                         SME_0IgQe_AC:	dc.b 2	
0000C6A1 F505 001C F8               		dc.b $F5, 5, 0, $1C, $F8	
0000C6A6 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C6AB 02                         SME_0IgQe_B7:	dc.b 2	
0000C6AC F505 201C F8               		dc.b $F5, 5, $20, $1C, $F8	
0000C6B1 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C6B6 02                         SME_0IgQe_C2:	dc.b 2	
0000C6B7 F505 003C F8               		dc.b $F5, 5, 0, $3C, $F8	
0000C6BC F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C6C2 00                         		even
0000C6C2 00                         		even
0000C6C2                            
0000C6C2                            		include	"_incObj\0E Title Screen Sonic.asm"
0000C6C2                            ; ---------------------------------------------------------------------------
0000C6C2                            ; Object 0E - Sonic on the title screen
0000C6C2                            ; ---------------------------------------------------------------------------
0000C6C2                            
0000C6C2                            TitleSonic:
0000C6C2 7000                       		moveq	#0,d0
0000C6C4 1028 0024                  		move.b	obRoutine(a0),d0
0000C6C8 323B 0000                  		move.w	TSon_Index(pc,d0.w),d1
0000C6CC 4EFB 1000                  		jmp	TSon_Index(pc,d1.w)
0000C6D0                            ; ===========================================================================
0000C6D0 0000                       TSon_Index:	dc.w TSon_Main-TSon_Index
0000C6D2 0000                       		dc.w TSon_Delay-TSon_Index
0000C6D4 0000                       		dc.w TSon_Move-TSon_Index
0000C6D6 0000                       		dc.w TSon_Animate-TSon_Index
0000C6D8                            ; ===========================================================================
0000C6D8                            
0000C6D8                            TSon_Main:	; Routine 0
0000C6D8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C6DC 317C 00F0 0008             		move.w	#$F0,obX(a0)
0000C6E2 317C 00DE 000A             		move.w	#$DE,obScreenY(a0) ; position is fixed to screen
0000C6E8 217C 0000 0000 0004        		move.l	#Map_TSon,obMap(a0)
0000C6F0 317C 2348 0002             		move.w	#$2348,obGfx(a0)
0000C6F6 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000C6FC 117C 001D 001F             		move.b	#29,obDelayAni(a0) ; set time delay to 0.5 seconds
0000C702 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C708 6100 0000                  		bsr.w	AnimateSprite
0000C70C                            
0000C70C                            TSon_Delay:	;Routine 2
0000C70C 5328 001F                  		subq.b	#1,obDelayAni(a0) ; subtract 1 from time delay
0000C710 6A00                       		bpl.s	@wait		; if time remains, branch
0000C712 5428 0024                  		addq.b	#2,obRoutine(a0) ; go to next routine
0000C716 6000 0000                  		bra.w	DisplaySprite
0000C71A                            
0000C71A                            	@wait:
0000C71A 4E75                       		rts	
0000C71C                            ; ===========================================================================
0000C71C                            
0000C71C                            TSon_Move:	; Routine 4
0000C71C 5168 000A                  		subq.w	#8,obScreenY(a0) ; move Sonic up
0000C720 0C68 0096 000A             		cmpi.w	#$96,obScreenY(a0) ; has Sonic reached final position?
0000C726 6600                       		bne.s	@display	; if not, branch
0000C728 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C72C                            
0000C72C                            	@display:
0000C72C 6000 0000                  		bra.w	DisplaySprite
0000C730                            
0000C730 4E75                       		rts	
0000C732                            ; ===========================================================================
0000C732                            
0000C732                            TSon_Animate:	; Routine 6
0000C732 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C738 6100 0000                  		bsr.w	AnimateSprite
0000C73C 6000 0000                  		bra.w	DisplaySprite
0000C740                            
0000C740 4E75                       		rts	
0000C740 4E75                       		rts	
0000C742                            		include	"_incObj\0F Press Start and TM.asm"
0000C742                            ; ---------------------------------------------------------------------------
0000C742                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000C742                            ; ---------------------------------------------------------------------------
0000C742                            
0000C742                            PSBTM:
0000C742 7000                       		moveq	#0,d0
0000C744 1028 0024                  		move.b	obRoutine(a0),d0
0000C748 323B 0000                  		move.w	PSB_Index(pc,d0.w),d1
0000C74C 4EBB 1000                  		jsr	PSB_Index(pc,d1.w)
0000C750 6000 0000                  		bra.w	DisplaySprite
0000C754                            ; ===========================================================================
0000C754 0000                       PSB_Index:	dc.w PSB_Main-PSB_Index
0000C756 0000                       		dc.w PSB_PrsStart-PSB_Index
0000C758 0000                       		dc.w PSB_Exit-PSB_Index
0000C75A 0000                       		dc.w PSB_Menu-PSB_Index		
0000C75C                            ; ===========================================================================
0000C75C                            
0000C75C                            PSB_Main:	; Routine 0
0000C75C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C760 317C 00D0 0008             		move.w	#$D0,obX(a0)
0000C766 317C 0130 000A             		move.w	#$130,obScreenY(a0)
0000C76C 217C 0000 0000 0004        		move.l	#Map_PSB,obMap(a0)
0000C774 317C 0200 0002             		move.w	#$200,obGfx(a0)
0000C77A 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)	; is object "PRESS START"?
0000C780 6500                       		bcs.s	PSB_PrsStart	; if yes, branch
0000C782                            
0000C782 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C786 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is the object	"TM"?
0000C78C 6600                       		bne.s	PSB_Exit	; if not, branch
0000C78E                            
0000C78E 317C 2510 0002             		move.w	#$2510,obGfx(a0) ; "TM" specific code
0000C794 317C 0170 0008             		move.w	#$170,obX(a0)
0000C79A 317C 00F8 000A             		move.w	#$F8,obScreenY(a0)
0000C7A0                            
0000C7A0                            PSB_Exit:	; Routine 4
0000C7A0 4E75                       		rts	
0000C7A2                            ; ===========================================================================
0000C7A2                            
0000C7A2                            PSB_PrsStart:	; Routine 2
0000C7A2 0838 0007 F605             		btst   #7,(v_jpadpress1).w   ; check if Start is pressed
0000C7A8 6700                       		beq.s   PSB_PrsStart_Show   ; if not, branch
0000C7AA 5828 0024                  		addq.b   #4,obRoutine(a0)      ; go to Menu in next frame
0000C7AE 303C 00A1                  		move.w   #$A1,d0 
0000C7B2 4EB8 12FE                  		jsr   PlaySound_Special
0000C7B6 317C 056F 0002             		move.w   #$56F,obGfx(a0)
0000C7BC 217C 0000 0000 0004        		move.l   #Map_TitleMenu,obMap(a0) 
0000C7C4 317C 00F8 0008             		move.w	#$F8,obX(a0)
0000C7CA 317C 0150 000A             		move.w	#$150,obScreenY(a0)
0000C7D0 4E75                       		rts
0000C7D2                            
0000C7D2                            PSB_PrsStart_Show:
0000C7D2 43F9 0000 0000             		lea	(Ani_PSBTM).l,a1
0000C7D8 6000 0000                  		bra.w	AnimateSprite	; "PRESS START" is animated
0000C7DC                            
0000C7DC                            PSB_Menu:
0000C7DC 7400                             moveq   #0,d2
0000C7DE 1438 FFB0                        move.b   (Title_screen_option).w,d2
0000C7E2 1038 F605                        move.b   (v_jpadpress1).w,d0
0000C7E6 0800 0000                        btst   #0,d0
0000C7EA 6700                             beq.s   MAIN2
0000C7EC 5302                             subq.b   #1,d2
0000C7EE 6400                             bcc.s   MAIN2
0000C7F0 143C 0001                        move.b   #1,d2
0000C7F4                            
0000C7F4                            MAIN2:
0000C7F4 0800 0001                        btst   #1,d0
0000C7F8 6700                             beq.s   MAIN3
0000C7FA 5202                             addq.b   #1,d2
0000C7FC 0C02 0002                        cmpi.b   #2,d2
0000C800 6500                             blo.s   MAIN3
0000C802 7400                             moveq   #0,d2
0000C804                            
0000C804                            MAIN3:
0000C804 1142 001A                        move.b   d2,$1A(a0)
0000C808 11C2 FFB0                        move.b   d2,(Title_screen_option).w
0000C80C 0200 0003                        andi.b   #3,d0
0000C810 6700                             beq.s   MAIN4   
0000C812 303C 00CD                        move.w   #$CD,d0 ; selection blip sound
0000C816 4EB8 12FE                        jsr   PlaySound_Special
0000C81A                            
0000C81A                            MAIN4:
0000C81A 0838 0007 F605                   btst   #7,(v_jpadpress1).w   ; check if Start is pressed
0000C820 6700                             beq.s   MENURTS   ; if not, branch
0000C822 4EF9 0000 0000                   jmp   DeleteObject   ; if yes, delete the Title Screen Menu
0000C828                            
0000C828                            MENURTS:
0000C828 4E75                             rts															 
0000C82A                            ; ===========================================================================
0000C82A                            
0000C82A                            
0000C82A                            Map_TitleMenu:
0000C82A                            		include "_maps\Title Screen Menu.asm"		
0000C82A                            ; --------------------------------------------------------------------------------
0000C82A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C82A                            ; --------------------------------------------------------------------------------
0000C82A                            
0000C82A                            SME_g2Qfx:	
0000C82A 0000 0000                  		dc.w SME_g2Qfx_6-SME_g2Qfx, SME_g2Qfx_6B-SME_g2Qfx	
0000C82E 10                         SME_g2Qfx_6:	dc.b $10	
0000C82F E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000C834 E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000C839 E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000C83E E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000C843 E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000C848 E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000C84D E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000C852 E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000C857 F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000C85C F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000C861 F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000C866 F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000C86B F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000C870 F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000C875 F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000C87A E004 0028 E0               		dc.b $E0, 4, 0, $28, $E0	
0000C87F 10                         SME_g2Qfx_6B:	dc.b $10	
0000C880 E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000C885 E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000C88A E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000C88F E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000C894 E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000C899 E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000C89E E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000C8A3 E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000C8A8 F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000C8AD F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000C8B2 F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000C8B7 F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000C8BC F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000C8C1 F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000C8C6 F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000C8CB F004 0028 E0               		dc.b $F0, 4, 0, $28, $E0
0000C8D0                            		even
0000C8D0                            		even
0000C8D0                            		even
0000C8D0                            
0000C8D0                            		include	"_anim\Title Screen Sonic.asm"
0000C8D0                            ; ---------------------------------------------------------------------------
0000C8D0                            ; Animation script - Sonic on the title screen
0000C8D0                            ; ---------------------------------------------------------------------------
0000C8D0 0000                       Ani_TSon:	dc.w byte_A706-Ani_TSon
0000C8D2 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	afBack, 2
0000C8DE 00                         		even
0000C8DE 00                         		even
0000C8DE                            		include	"_anim\Press Start and TM.asm"
0000C8DE                            ; ---------------------------------------------------------------------------
0000C8DE                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000C8DE                            ; ---------------------------------------------------------------------------
0000C8DE 0000                       Ani_PSBTM:	dc.w @flash-Ani_PSBTM
0000C8E0 1F00 01FF                  @flash:		dc.b $1F, 0, 1,	afEnd
0000C8E4                            		even
0000C8E4                            		even
0000C8E4                            
0000C8E4                            		include	"_incObj\sub AnimateSprite.asm"
0000C8E4                            ; ---------------------------------------------------------------------------
0000C8E4                            ; Subroutine to	animate	a sprite using an animation script
0000C8E4                            ; ---------------------------------------------------------------------------
0000C8E4                            
0000C8E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C8E4                            
0000C8E4                            
0000C8E4                            AnimateSprite:
0000C8E4 7000                       		moveq	#0,d0
0000C8E6 1028 001C                  		move.b	obAnim(a0),d0	; move animation number	to d0
0000C8EA B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
0000C8EE 6700                       		beq.s	Anim_Run	; if not, branch
0000C8F0                            
0000C8F0 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
0000C8F4 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000C8FA 117C 0000 001E             		move.b	#0,obTimeFrame(a0) ; reset frame duration
0000C900                            
0000C900                            Anim_Run:
0000C900 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000C904 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000C906 D040                       		add.w	d0,d0
0000C908 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000C90C 1151 001E                  		move.b	(a1),obTimeFrame(a0) ; load frame duration
0000C910 7200                       		moveq	#0,d1
0000C912 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
0000C916 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000C91A 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000C91C                            
0000C91C                            Anim_Next:
0000C91C 1200                       		move.b	d0,d1
0000C91E 0200 001F                  		andi.b	#$1F,d0
0000C922 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
0000C926 1028 0022                  		move.b	obStatus(a0),d0
0000C92A E719                       		rol.b	#3,d1
0000C92C B101                       		eor.b	d0,d1
0000C92E 0201 0003                  		andi.b	#3,d1
0000C932 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0000C938 8328 0001                  		or.b	d1,obRender(a0)
0000C93C 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
0000C940                            
0000C940                            Anim_Wait:
0000C940 4E75                       		rts	
0000C942                            ; ===========================================================================
0000C942                            
0000C942                            Anim_End_FF:
0000C942 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000C944 6600                       		bne.s	Anim_End_FE	; if not, branch
0000C946 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; restart the animation
0000C94C 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000C950 60CA                       		bra.s	Anim_Next
0000C952                            ; ===========================================================================
0000C952                            
0000C952                            Anim_End_FE:
0000C952 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000C954 6600                       		bne.s	Anim_End_FD	; if not, branch
0000C956 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000C95A 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
0000C95E 9200                       		sub.b	d0,d1
0000C960 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000C964 60B6                       		bra.s	Anim_Next
0000C966                            ; ===========================================================================
0000C966                            
0000C966                            Anim_End_FD:
0000C966 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000C968 6600                       		bne.s	Anim_End_FC	; if not, branch
0000C96A 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
0000C970                            
0000C970                            Anim_End_FC:
0000C970 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000C972 6600                       		bne.s	Anim_End_FB	; if not, branch
0000C974 5428 0024                  		addq.b	#2,obRoutine(a0) ; jump to next routine
0000C978                            
0000C978                            Anim_End_FB:
0000C978 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000C97A 6600                       		bne.s	Anim_End_FA	; if not, branch
0000C97C 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000C982 4228 0025                  		clr.b	ob2ndRout(a0)	; reset	2nd routine counter
0000C986                            
0000C986                            Anim_End_FA:
0000C986 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000C988 6600                       		bne.s	Anim_End	; if not, branch
0000C98A 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; jump to next routine
0000C98E                            
0000C98E                            Anim_End:
0000C98E 4E75                       		rts	
0000C990                            ; End of function AnimateSprite
0000C990                            ; End of function AnimateSprite
0000C990                            
0000C990                            Map_PSB:	include	"_maps\Press Start and TM.asm"
0000C990                            ; ---------------------------------------------------------------------------
0000C990                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000C990                            ; ---------------------------------------------------------------------------
0000C990                            Map_PSB_internal:
0000C990 0000                       		dc.w byte_A7CD-Map_PSB_internal
0000C992 0000                       		dc.w M_PSB_PSB-Map_PSB_internal
0000C994 0000                       		dc.w M_PSB_Limiter-Map_PSB_internal
0000C996 0000                       		dc.w M_PSB_TM-Map_PSB_internal
0000C998 06                         M_PSB_PSB:	dc.b 6			; "PRESS START BUTTON"
0000C999 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000C99E 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000C9A3 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000C9A8 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000C9AD 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000C9B2 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000C9B7 1E                         M_PSB_Limiter:	dc.b $1E		; sprite line limiter
0000C9B8 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C9BD B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C9C2 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C9C7 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C9CC B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C9D1 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C9D6 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C9DB B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C9E0 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C9E5 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C9EA D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C9EF D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C9F4 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C9F9 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C9FE D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CA03 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CA08 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CA0D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CA12 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CA17 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CA1C F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA21 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA26 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA2B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA30 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA35 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA3A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA3F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA44 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA49 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA4E 01                         M_PSB_TM:	dc.b 1			; "TM"
0000CA4F FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000CA54                            		even
0000CA54                            		even
0000CA54                            Map_TSon:	include	"_maps\Title Screen Sonic.asm"
0000CA54                            ; ---------------------------------------------------------------------------
0000CA54                            ; Sprite mappings - Sonic on the title screen
0000CA54                            ; ---------------------------------------------------------------------------
0000CA54                            Map_TSon_internal:
0000CA54 0000                       		dc.w byte_A898-Map_TSon_internal
0000CA56 0000                       		dc.w byte_A8CB-Map_TSon_internal
0000CA58 0000                       		dc.w byte_A917-Map_TSon_internal
0000CA5A 0000                       		dc.w byte_A96D-Map_TSon_internal
0000CA5C 0000                       		dc.w byte_A9AF-Map_TSon_internal
0000CA5E 0000                       		dc.w byte_A9E7-Map_TSon_internal
0000CA60 0000                       		dc.w byte_AA47-Map_TSon_internal
0000CA62 0000                       		dc.w byte_AAB1-Map_TSon_internal
0000CA64 0A                         byte_A898:	dc.b $A
0000CA65 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000CA6A 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000CA6F 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000CA74 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000CA79 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000CA7E 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000CA83 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000CA88 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000CA8D 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000CA92 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000CA97 0F                         byte_A8CB:	dc.b $F
0000CA98 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000CA9D 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000CAA2 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000CAA7 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000CAAC 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000CAB1 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000CAB6 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000CABB 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000CAC0 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000CAC5 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000CACA 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000CACF 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000CAD4 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000CAD9 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000CADE 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000CAE3 11                         byte_A917:	dc.b $11
0000CAE4 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000CAE9 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000CAEE 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000CAF3 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000CAF8 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000CAFD 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000CB02 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000CB07 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000CB0C 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000CB11 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000CB16 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000CB1B 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000CB20 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000CB25 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000CB2A 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000CB2F 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000CB34 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000CB39 0D                         byte_A96D:	dc.b $D
0000CB3A 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000CB3F 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000CB44 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000CB49 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000CB4E 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000CB53 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000CB58 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000CB5D 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000CB62 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000CB67 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000CB6C 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000CB71 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000CB76 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000CB7B 0B                         byte_A9AF:	dc.b $B
0000CB7C 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000CB81 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000CB86 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000CB8B 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000CB90 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000CB95 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000CB9A 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000CB9F 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000CBA4 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000CBA9 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000CBAE 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000CBB3 13                         byte_A9E7:	dc.b $13
0000CBB4 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000CBB9 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000CBBE 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000CBC3 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000CBC8 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CBCD 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CBD2 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CBD7 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CBDC 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CBE1 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CBE6 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CBEB 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CBF0 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CBF5 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CBFA 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CBFF 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CC04 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CC09 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CC0E 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CC13 15                         byte_AA47:	dc.b $15
0000CC14 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000CC19 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000CC1E 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000CC23 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000CC28 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000CC2D 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000CC32 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CC37 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CC3C 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CC41 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CC46 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CC4B 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CC50 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CC55 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CC5A 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CC5F 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CC64 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CC69 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CC6E 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CC73 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CC78 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CC7D 16                         byte_AAB1:	dc.b $16
0000CC7E 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000CC83 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000CC88 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000CC8D 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000CC92 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000CC97 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000CC9C 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000CCA1 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CCA6 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CCAB 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CCB0 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CCB5 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CCBA 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CCBF 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CCC4 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CCC9 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CCCE 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CCD3 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CCD8 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CCDD 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CCE2 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CCE7 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CCEC                            		even
0000CCEC                            		even
0000CCEC                            
0000CCEC                            		include	"_incObj\2B Chopper.asm"
0000CCEC                            ; ---------------------------------------------------------------------------
0000CCEC                            ; Object 2B - Chopper enemy (GHZ)
0000CCEC                            ; ---------------------------------------------------------------------------
0000CCEC                            
0000CCEC                            Chopper:
0000CCEC 7000                       		moveq	#0,d0
0000CCEE 1028 0024                  		move.b	obRoutine(a0),d0
0000CCF2 323B 0000                  		move.w	Chop_Index(pc,d0.w),d1
0000CCF6 4EBB 1000                  		jsr	Chop_Index(pc,d1.w)
0000CCFA 6000 0000                  		bra.w	RememberState
0000CCFE                            ; ===========================================================================
0000CCFE 0000                       Chop_Index:	dc.w Chop_Main-Chop_Index
0000CD00 0000                       		dc.w Chop_ChgSpeed-Chop_Index
0000CD02                            
0000CD02 =00000030                  chop_origY:	equ $30
0000CD02                            ; ===========================================================================
0000CD02                            
0000CD02                            Chop_Main:	; Routine 0
0000CD02 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CD06 217C 0000 0000 0004        		move.l	#Map_Chop,obMap(a0)
0000CD0E 317C 047B 0002             		move.w	#$47B,obGfx(a0)
0000CD14 117C 0004 0001             		move.b	#4,obRender(a0)
0000CD1A 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CD20 117C 0009 0020             		move.b	#9,obColType(a0)
0000CD26 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CD2C 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CD32 3168 000C 0030             		move.w	obY(a0),chop_origY(a0) ; save original position
0000CD38                            
0000CD38                            Chop_ChgSpeed:	; Routine 2
0000CD38 43F9 0000 0000             		lea	(Ani_Chop).l,a1
0000CD3E 6100 FBA4                  		bsr.w	AnimateSprite
0000CD42 6100 0000                  		bsr.w	SpeedToPos
0000CD46 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce speed
0000CD4C 3028 0030                  		move.w	chop_origY(a0),d0
0000CD50 B068 000C                  		cmp.w	obY(a0),d0	; has Chopper returned to its original position?
0000CD54 6400                       		bcc.s	@chganimation	; if not, branch
0000CD56 3140 000C                  		move.w	d0,obY(a0)
0000CD5A 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CD60                            
0000CD60                            	@chganimation:
0000CD60 117C 0001 001C             		move.b	#1,obAnim(a0)	; use fast animation
0000CD66 0440 00C0                  		subi.w	#$C0,d0
0000CD6A B068 000C                  		cmp.w	obY(a0),d0
0000CD6E 6400                       		bcc.s	@nochg
0000CD70 117C 0000 001C             		move.b	#0,obAnim(a0)	; use slow animation
0000CD76 4A68 0012                  		tst.w	obVelY(a0)	; is Chopper at	its highest point?
0000CD7A 6B00                       		bmi.s	@nochg		; if not, branch
0000CD7C 117C 0002 001C             		move.b	#2,obAnim(a0)	; use stationary animation
0000CD82                            
0000CD82                            	@nochg:
0000CD82 4E75                       		rts	
0000CD82 4E75                       		rts	
0000CD84                            		include	"_anim\Chopper.asm"
0000CD84                            ; ---------------------------------------------------------------------------
0000CD84                            ; Animation script - Chopper enemy
0000CD84                            ; ---------------------------------------------------------------------------
0000CD84 0000                       Ani_Chop:	dc.w @slow-Ani_Chop
0000CD86 0000                       		dc.w @fast-Ani_Chop
0000CD88 0000                       		dc.w @still-Ani_Chop
0000CD8A 0700 01FF                  @slow:		dc.b 7,	0, 1, afEnd
0000CD8E 0300 01FF                  @fast:		dc.b 3,	0, 1, afEnd
0000CD92 0700 FF                    @still:		dc.b 7,	0, afEnd
0000CD96 00                         		even
0000CD96 00                         		even
0000CD96                            Map_Chop:	include	"_maps\Chopper.asm"
0000CD96                            ; ---------------------------------------------------------------------------
0000CD96                            ; Sprite mappings - Chopper enemy (GHZ)
0000CD96                            ; ---------------------------------------------------------------------------
0000CD96                            Map_Chop_internal:
0000CD96 0000                       		dc.w @mouthshut-Map_Chop_internal
0000CD98 0000                       		dc.w @mouthopen-Map_Chop_internal
0000CD9A 01                         @mouthshut:	dc.b 1
0000CD9B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000CDA0 01                         @mouthopen:	dc.b 1
0000CDA1 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000CDA6                            		even
0000CDA6                            		even
0000CDA6                            		include	"_incObj\2C Jaws.asm"
0000CDA6                            ; ---------------------------------------------------------------------------
0000CDA6                            ; Object 2C - Jaws enemy (LZ)
0000CDA6                            ; ---------------------------------------------------------------------------
0000CDA6                            
0000CDA6                            Jaws:
0000CDA6 7000                       		moveq	#0,d0
0000CDA8 1028 0024                  		move.b	obRoutine(a0),d0
0000CDAC 323B 0000                  		move.w	Jaws_Index(pc,d0.w),d1
0000CDB0 4EFB 1000                  		jmp	Jaws_Index(pc,d1.w)
0000CDB4                            ; ===========================================================================
0000CDB4 0000                       Jaws_Index:	dc.w Jaws_Main-Jaws_Index
0000CDB6 0000                       		dc.w Jaws_Turn-Jaws_Index
0000CDB8                            
0000CDB8 =00000030                  jaws_timecount:	equ $30
0000CDB8 =00000032                  jaws_timedelay:	equ $32
0000CDB8                            ; ===========================================================================
0000CDB8                            
0000CDB8                            Jaws_Main:	; Routine 0
0000CDB8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CDBC 217C 0000 0000 0004        		move.l	#Map_Jaws,obMap(a0)
0000CDC4 317C 2486 0002             		move.w	#$2486,obGfx(a0)
0000CDCA 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CDD0 117C 000A 0020             		move.b	#$A,obColType(a0)
0000CDD6 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CDDC 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CDE2 7000                       		moveq	#0,d0
0000CDE4 1028 0028                  		move.b	obSubtype(a0),d0 ; load object subtype number
0000CDE8 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000CDEA 5340                       		subq.w	#1,d0
0000CDEC 3140 0030                  		move.w	d0,jaws_timecount(a0) ; set turn delay time
0000CDF0 3140 0032                  		move.w	d0,jaws_timedelay(a0)
0000CDF4 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move Jaws to the left
0000CDFA 0828 0000 0022             		btst	#0,obStatus(a0)	; is Jaws facing left?
0000CE00 6700                       		beq.s	Jaws_Turn	; if yes, branch
0000CE02 4468 0010                  		neg.w	obVelX(a0)	; move Jaws to the right
0000CE06                            
0000CE06                            Jaws_Turn:	; Routine 2
0000CE06 5368 0030                  		subq.w	#1,jaws_timecount(a0) ; subtract 1 from turn delay time
0000CE0A 6A00                       		bpl.s	@animate	; if time remains, branch
0000CE0C 3168 0032 0030             		move.w	jaws_timedelay(a0),jaws_timecount(a0) ; reset turn delay time
0000CE12 4468 0010                  		neg.w	obVelX(a0)	; change speed direction
0000CE16 0868 0000 0022             		bchg	#0,obStatus(a0)	; change Jaws facing direction
0000CE1C 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000CE22                            
0000CE22                            	@animate:
0000CE22 43F9 0000 0000             		lea	(Ani_Jaws).l,a1
0000CE28 6100 FABA                  		bsr.w	AnimateSprite
0000CE2C 6100 0000                  		bsr.w	SpeedToPos
0000CE30 6000 0000                  		bra.w	RememberState
0000CE30 6000 0000                  		bra.w	RememberState
0000CE34                            		include	"_anim\Jaws.asm"
0000CE34                            ; ---------------------------------------------------------------------------
0000CE34                            ; Animation script - Jaws enemy
0000CE34                            ; ---------------------------------------------------------------------------
0000CE34 0000                       Ani_Jaws:	dc.w @swim-Ani_Jaws
0000CE36 0700 0102 03FF             @swim:		dc.b 7,	0, 1, 2, 3, afEnd
0000CE3C                            		even
0000CE3C                            		even
0000CE3C                            Map_Jaws:	include	"_maps\Jaws.asm"
0000CE3C                            ; --------------------------------------------------------------------------------
0000CE3C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CE3C                            ; --------------------------------------------------------------------------------
0000CE3C                            
0000CE3C                            SME_O5C0c:	
0000CE3C 0000 0000                  		dc.w SME_O5C0c_8-SME_O5C0c, SME_O5C0c_13-SME_O5C0c	
0000CE40 0000 0000                  		dc.w SME_O5C0c_1E-SME_O5C0c, SME_O5C0c_29-SME_O5C0c	
0000CE44 02                         SME_O5C0c_8:	dc.b 2	
0000CE45 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CE4A F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CE4F 02                         SME_O5C0c_13:	dc.b 2	
0000CE50 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CE55 F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CE5A 02                         SME_O5C0c_1E:	dc.b 2	
0000CE5B F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CE60 F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CE65 02                         SME_O5C0c_29:	dc.b 2	
0000CE66 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CE6B F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CE70                            		even
0000CE70                            		even
0000CE70                            		include	"_incObj\2D Burrobot.asm"
0000CE70                            ; ---------------------------------------------------------------------------
0000CE70                            ; Object 2D - Burrobot enemy (LZ)
0000CE70                            ; ---------------------------------------------------------------------------
0000CE70                            
0000CE70                            Burrobot:
0000CE70 7000                       		moveq	#0,d0
0000CE72 1028 0024                  		move.b	obRoutine(a0),d0
0000CE76 323B 0000                  		move.w	Burro_Index(pc,d0.w),d1
0000CE7A 4EFB 1000                  		jmp	Burro_Index(pc,d1.w)
0000CE7E                            ; ===========================================================================
0000CE7E 0000                       Burro_Index:	dc.w Burro_Main-Burro_Index
0000CE80 0000                       		dc.w Burro_Action-Burro_Index
0000CE82                            
0000CE82 =00000030                  burro_timedelay:	equ $30		; time between direction changes
0000CE82                            ; ===========================================================================
0000CE82                            
0000CE82                            Burro_Main:	; Routine 0
0000CE82 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CE86 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000CE8C 117C 0008 0017             		move.b	#8,obWidth(a0)
0000CE92 217C 0000 0000 0004        		move.l	#Map_Burro,obMap(a0)
0000CE9A 317C 04A6 0002             		move.w	#$4A6,obGfx(a0)
0000CEA0 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CEA6 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CEAC 117C 0005 0020             		move.b	#5,obColType(a0)
0000CEB2 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000CEB8 5C28 0025                  		addq.b	#6,ob2ndRout(a0) ; run "Burro_ChkSonic" routine
0000CEBC 117C 0002 001C             		move.b	#2,obAnim(a0)
0000CEC2                            
0000CEC2                            Burro_Action:	; Routine 2
0000CEC2 7000                       		moveq	#0,d0
0000CEC4 1028 0025                  		move.b	ob2ndRout(a0),d0
0000CEC8 323B 0000                  		move.w	@index(pc,d0.w),d1
0000CECC 4EBB 1000                  		jsr	@index(pc,d1.w)
0000CED0 43F9 0000 0000             		lea	(Ani_Burro).l,a1
0000CED6 6100 FA0C                  		bsr.w	AnimateSprite
0000CEDA 6000 0000                  		bra.w	RememberState
0000CEDE                            ; ===========================================================================
0000CEDE 0000                       @index:		dc.w @changedir-@index
0000CEE0 0000                       		dc.w Burro_Move-@index
0000CEE2 0000                       		dc.w Burro_Jump-@index
0000CEE4 0000                       		dc.w Burro_ChkSonic-@index
0000CEE6                            ; ===========================================================================
0000CEE6                            
0000CEE6                            @changedir:
0000CEE6 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000CEEA 6A00                       		bpl.s	@nochg
0000CEEC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000CEF0 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000CEF6 317C 0080 0010             		move.w	#$80,obVelX(a0)
0000CEFC 117C 0001 001C             		move.b	#1,obAnim(a0)
0000CF02 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction the Burrobot	is facing
0000CF08 6700                       		beq.s	@nochg
0000CF0A 4468 0010                  		neg.w	obVelX(a0)	; change direction the Burrobot	is moving
0000CF0E                            
0000CF0E                            	@nochg:
0000CF0E 4E75                       		rts	
0000CF10                            ; ===========================================================================
0000CF10                            
0000CF10                            Burro_Move:
0000CF10 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000CF14 6B00                       		bmi.s	loc_AD84
0000CF16 6100 0000                  		bsr.w	SpeedToPos
0000CF1A 0868 0000 0032             		bchg	#0,$32(a0)
0000CF20 6600                       		bne.s	loc_AD78
0000CF22 3628 0008                  		move.w	obX(a0),d3
0000CF26 0643 000C                  		addi.w	#$C,d3
0000CF2A 0828 0000 0022             		btst	#0,obStatus(a0)
0000CF30 6600                       		bne.s	loc_AD6A
0000CF32 0443 0018                  		subi.w	#$18,d3
0000CF36                            
0000CF36                            loc_AD6A:
0000CF36 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000CF3C 0C41 000C                  		cmpi.w	#$C,d1
0000CF40 6C00                       		bge.s	loc_AD84
0000CF42 4E75                       		rts	
0000CF44                            ; ===========================================================================
0000CF44                            
0000CF44                            loc_AD78:
0000CF44 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000CF4A D368 000C                  		add.w	d1,obY(a0)
0000CF4E 4E75                       		rts	
0000CF50                            ; ===========================================================================
0000CF50                            
0000CF50                            loc_AD84:
0000CF50 0838 0002 FE0F             		btst	#2,(v_vbla_byte).w
0000CF56 6700                       		beq.s	loc_ADA4
0000CF58 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CF5C 317C 003B 0030             		move.w	#59,burro_timedelay(a0)
0000CF62 317C 0000 0010             		move.w	#0,obVelX(a0)
0000CF68 117C 0000 001C             		move.b	#0,obAnim(a0)
0000CF6E 4E75                       		rts	
0000CF70                            ; ===========================================================================
0000CF70                            
0000CF70                            loc_ADA4:
0000CF70 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000CF74 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000CF7A 117C 0002 001C             		move.b	#2,obAnim(a0)
0000CF80 4E75                       		rts	
0000CF82                            ; ===========================================================================
0000CF82                            
0000CF82                            Burro_Jump:
0000CF82 6100 0000                  		bsr.w	SpeedToPos
0000CF86 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000CF8C 6B00                       		bmi.s	locret_ADF0
0000CF8E 117C 0003 001C             		move.b	#3,obAnim(a0)
0000CF94 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000CF9A 4A41                       		tst.w	d1
0000CF9C 6A00                       		bpl.s	locret_ADF0
0000CF9E D368 000C                  		add.w	d1,obY(a0)
0000CFA2 317C 0000 0012             		move.w	#0,obVelY(a0)
0000CFA8 117C 0001 001C             		move.b	#1,obAnim(a0)
0000CFAE 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000CFB4 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CFB8 6100 0000                  		bsr.w	Burro_ChkSonic2
0000CFBC                            
0000CFBC                            locret_ADF0:
0000CFBC 4E75                       		rts	
0000CFBE                            ; ===========================================================================
0000CFBE                            
0000CFBE                            Burro_ChkSonic:
0000CFBE 343C 0060                  		move.w	#$60,d2
0000CFC2 6100 0000                  		bsr.w	Burro_ChkSonic2
0000CFC6 6400                       		bcc.s	locret_AE20
0000CFC8 3038 D00C                  		move.w	(v_player+obY).w,d0
0000CFCC 9068 000C                  		sub.w	obY(a0),d0
0000CFD0 6400                       		bcc.s	locret_AE20
0000CFD2 0C40 FF80                  		cmpi.w	#-$80,d0
0000CFD6 6500                       		bcs.s	locret_AE20
0000CFD8 4A78 FE08                  		tst.w	(v_debuguse).w
0000CFDC 6600                       		bne.s	locret_AE20
0000CFDE 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CFE2 3141 0010                  		move.w	d1,obVelX(a0)
0000CFE6 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000CFEC                            
0000CFEC                            locret_AE20:
0000CFEC 4E75                       		rts	
0000CFEE                            
0000CFEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CFEE                            
0000CFEE                            
0000CFEE                            Burro_ChkSonic2:
0000CFEE 323C 0080                  		move.w	#$80,d1
0000CFF2 08E8 0000 0022             		bset	#0,obStatus(a0)
0000CFF8 3038 D008                  		move.w	(v_player+obX).w,d0
0000CFFC 9068 0008                  		sub.w	obX(a0),d0
0000D000 6400                       		bcc.s	loc_AE40
0000D002 4440                       		neg.w	d0
0000D004 4441                       		neg.w	d1
0000D006 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000D00C                            
0000D00C                            loc_AE40:
0000D00C B042                       		cmp.w	d2,d0
0000D00E 4E75                       		rts	
0000D010                            ; End of function Burro_ChkSonic2
0000D010                            ; End of function Burro_ChkSonic2
0000D010                            		include	"_anim\Burrobot.asm"
0000D010                            ; ---------------------------------------------------------------------------
0000D010                            ; Animation script - Burrobot enemy
0000D010                            ; ---------------------------------------------------------------------------
0000D010 0000                       Ani_Burro:	dc.w @walk1-Ani_Burro
0000D012 0000                       		dc.w @walk2-Ani_Burro
0000D014 0000                       		dc.w @digging-Ani_Burro
0000D016 0000                       		dc.w @fall-Ani_Burro
0000D018 0300 06FF                  @walk1:		dc.b 3,	0, 6, afEnd
0000D01C 0300 01FF                  @walk2:		dc.b 3,	0, 1, afEnd
0000D020 0302 03FF                  @digging:	dc.b 3,	2, 3, afEnd
0000D024 0304 FF                    @fall:		dc.b 3,	4, afEnd
0000D028 00                         		even
0000D028 00                         		even
0000D028                            Map_Burro:	include	"_maps\Burrobot.asm"
0000D028                            ; --------------------------------------------------------------------------------
0000D028                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D028                            ; --------------------------------------------------------------------------------
0000D028                            
0000D028                            SME_Ag_86:	
0000D028 0000 0000                  		dc.w SME_Ag_86_E-SME_Ag_86, SME_Ag_86_19-SME_Ag_86	
0000D02C 0000 0000                  		dc.w SME_Ag_86_24-SME_Ag_86, SME_Ag_86_2F-SME_Ag_86	
0000D030 0000 0000                  		dc.w SME_Ag_86_3A-SME_Ag_86, SME_Ag_86_45-SME_Ag_86	
0000D034 0000                       		dc.w SME_Ag_86_50-SME_Ag_86	
0000D036 02                         SME_Ag_86_E:	dc.b 2	
0000D037 EC0A 2000 F0               		dc.b $EC, $A, $20, 0, $F0	
0000D03C 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000D041 02                         SME_Ag_86_19:	dc.b 2	
0000D042 EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000D047 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000D04C 02                         SME_Ag_86_24:	dc.b 2	
0000D04D E80A 201E F4               		dc.b $E8, $A, $20, $1E, $F4	
0000D052 000A 2027 F4               		dc.b 0, $A, $20, $27, $F4	
0000D057 02                         SME_Ag_86_2F:	dc.b 2	
0000D058 E80A 2030 F4               		dc.b $E8, $A, $20, $30, $F4	
0000D05D 000A 2039 F4               		dc.b 0, $A, $20, $39, $F4	
0000D062 02                         SME_Ag_86_3A:	dc.b 2	
0000D063 E80A 200F F0               		dc.b $E8, $A, $20, $F, $F0	
0000D068 000A 2042 F4               		dc.b 0, $A, $20, $42, $F4	
0000D06D 02                         SME_Ag_86_45:	dc.b 2	
0000D06E F406 204B E8               		dc.b $F4, 6, $20, $4B, $E8	
0000D073 F40A 2051 F8               		dc.b $F4, $A, $20, $51, $F8	
0000D078 02                         SME_Ag_86_50:	dc.b 2	
0000D079 EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000D07E 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000D084 00                         		even
0000D084 00                         		even
0000D084                            
0000D084                            		include	"_incObj\2F MZ Large Grassy Platforms.asm"
0000D084                            ; ---------------------------------------------------------------------------
0000D084                            ; Object 2F - large grass-covered platforms (MZ)
0000D084                            ; ---------------------------------------------------------------------------
0000D084                            
0000D084                            LargeGrass:
0000D084 7000                       		moveq	#0,d0
0000D086 1028 0024                  		move.b	obRoutine(a0),d0
0000D08A 323B 0000                  		move.w	LGrass_Index(pc,d0.w),d1
0000D08E 4EFB 1000                  		jmp	LGrass_Index(pc,d1.w)
0000D092                            ; ===========================================================================
0000D092 0000                       LGrass_Index:	dc.w LGrass_Main-LGrass_Index
0000D094 0000                       		dc.w LGrass_Action-LGrass_Index
0000D096                            
0000D096 =0000002A                  lgrass_origX:	equ $2A
0000D096 =0000002C                  lgrass_origY:	equ $2C
0000D096                            
0000D096 0000                       LGrass_Data:	dc.w LGrass_Data1-LGrass_Data 	; collision angle data
0000D098 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000D09A 0000                       		dc.w LGrass_Data3-LGrass_Data
0000D09C 0140                       		dc.b 1,	$40
0000D09E 0000                       		dc.w LGrass_Data2-LGrass_Data
0000D0A0 0220                       		dc.b 2,	$20
0000D0A2                            ; ===========================================================================
0000D0A2                            
0000D0A2                            LGrass_Main:	; Routine 0
0000D0A2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D0A6 217C 0000 0000 0004        		move.l	#Map_LGrass,obMap(a0)
0000D0AE 317C C000 0002             		move.w	#$C000,obGfx(a0)
0000D0B4 117C 0004 0001             		move.b	#4,obRender(a0)
0000D0BA 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000D0C0 3168 000C 002C             		move.w	obY(a0),lgrass_origY(a0)
0000D0C6 3168 0008 002A             		move.w	obX(a0),lgrass_origX(a0)
0000D0CC 7000                       		moveq	#0,d0
0000D0CE 1028 0028                  		move.b	obSubtype(a0),d0
0000D0D2 E448                       		lsr.w	#2,d0
0000D0D4 0240 001C                  		andi.w	#$1C,d0
0000D0D8 43FB 00BC                  		lea	LGrass_Data(pc,d0.w),a1
0000D0DC 3019                       		move.w	(a1)+,d0
0000D0DE 45FB 00B6                  		lea	LGrass_Data(pc,d0.w),a2
0000D0E2 214A 0030                  		move.l	a2,$30(a0)
0000D0E6 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000D0EA 1151 0014                  		move.b	(a1),obActWid(a0)
0000D0EE 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000D0F4 117C 0040 0016             		move.b	#$40,obHeight(a0)
0000D0FA 08E8 0004 0001             		bset	#4,1(a0)
0000D100                            
0000D100                            LGrass_Action:	; Routine 2
0000D100 6100 0000                  		bsr.w	LGrass_Types
0000D104 4A28 0025                  		tst.b	ob2ndRout(a0)
0000D108 6700                       		beq.s	LGrass_Solid
0000D10A 7200                       		moveq	#0,d1
0000D10C 1228 0014                  		move.b	obActWid(a0),d1
0000D110 0641 000B                  		addi.w	#$B,d1
0000D114 6100 BCE6                  		bsr.w	ExitPlatform
0000D118 0829 0003 0022             		btst	#3,obStatus(a1)
0000D11E 6600 0000                  		bne.w	LGrass_Slope
0000D122 4228 0025                  		clr.b	ob2ndRout(a0)
0000D126 6000                       		bra.s	LGrass_Display
0000D128                            ; ===========================================================================
0000D128                            
0000D128                            LGrass_Slope:
0000D128 7200                       		moveq	#0,d1
0000D12A 1228 0014                  		move.b	obActWid(a0),d1
0000D12E 0641 000B                  		addi.w	#$B,d1
0000D132 2468 0030                  		movea.l	$30(a0),a2
0000D136 3428 0008                  		move.w	obX(a0),d2
0000D13A 6100 CC5A                  		bsr.w	SlopeObject2
0000D13E 6000                       		bra.s	LGrass_Display
0000D140                            ; ===========================================================================
0000D140                            
0000D140                            LGrass_Solid:
0000D140 7200                       		moveq	#0,d1
0000D142 1228 0014                  		move.b	obActWid(a0),d1
0000D146 0641 000B                  		addi.w	#$B,d1
0000D14A 343C 0020                  		move.w	#$20,d2
0000D14E 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000D154 6600                       		bne.s	loc_AF8E
0000D156 343C 0030                  		move.w	#$30,d2
0000D15A                            
0000D15A                            loc_AF8E:
0000D15A 2468 0030                  		movea.l	$30(a0),a2
0000D15E 6100 0000                  		bsr.w	SolidObject2F
0000D162                            
0000D162                            LGrass_Display:
0000D162 6100 0000                  		bsr.w	DisplaySprite
0000D166 6000 0000                  		bra.w	LGrass_ChkDel
0000D16A                            
0000D16A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D16A                            
0000D16A                            
0000D16A                            LGrass_Types:
0000D16A 7000                       		moveq	#0,d0
0000D16C 1028 0028                  		move.b	obSubtype(a0),d0
0000D170 0240 0007                  		andi.w	#7,d0
0000D174 D040                       		add.w	d0,d0
0000D176 323B 0000                  		move.w	LGrass_TypeIndex(pc,d0.w),d1
0000D17A 4EFB 1000                  		jmp	LGrass_TypeIndex(pc,d1.w)
0000D17E                            ; End of function LGrass_Types
0000D17E                            
0000D17E                            ; ===========================================================================
0000D17E 0000                       LGrass_TypeIndex:dc.w LGrass_Type00-LGrass_TypeIndex
0000D180 0000                       		dc.w LGrass_Type01-LGrass_TypeIndex
0000D182 0000                       		dc.w LGrass_Type02-LGrass_TypeIndex
0000D184 0000                       		dc.w LGrass_Type03-LGrass_TypeIndex
0000D186 0000                       		dc.w LGrass_Type04-LGrass_TypeIndex
0000D188 0000                       		dc.w LGrass_Type05-LGrass_TypeIndex
0000D18A                            ; ===========================================================================
0000D18A                            
0000D18A                            LGrass_Type00:
0000D18A 4E75                       		rts			; type 00 platform doesn't move
0000D18C                            ; ===========================================================================
0000D18C                            
0000D18C                            LGrass_Type01:
0000D18C 1038 FE60                  		move.b	(v_oscillate+2).w,d0
0000D190 323C 0020                  		move.w	#$20,d1
0000D194 6000                       		bra.s	LGrass_Move
0000D196                            ; ===========================================================================
0000D196                            
0000D196                            LGrass_Type02:
0000D196 1038 FE64                  		move.b	(v_oscillate+6).w,d0
0000D19A 323C 0030                  		move.w	#$30,d1
0000D19E 6000                       		bra.s	LGrass_Move
0000D1A0                            ; ===========================================================================
0000D1A0                            
0000D1A0                            LGrass_Type03:
0000D1A0 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
0000D1A4 323C 0040                  		move.w	#$40,d1
0000D1A8 6000                       		bra.s	LGrass_Move
0000D1AA                            ; ===========================================================================
0000D1AA                            
0000D1AA                            LGrass_Type04:
0000D1AA 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
0000D1AE 323C 0060                  		move.w	#$60,d1
0000D1B2                            
0000D1B2                            LGrass_Move:
0000D1B2 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D1B8 6700                       		beq.s	loc_AFF2
0000D1BA 4440                       		neg.w	d0
0000D1BC D041                       		add.w	d1,d0
0000D1BE                            
0000D1BE                            loc_AFF2:
0000D1BE 3228 002C                  		move.w	lgrass_origY(a0),d1
0000D1C2 9240                       		sub.w	d0,d1
0000D1C4 3141 000C                  		move.w	d1,obY(a0)	; update position on y-axis
0000D1C8 4E75                       		rts	
0000D1CA                            ; ===========================================================================
0000D1CA                            
0000D1CA                            LGrass_Type05:
0000D1CA 1028 0034                  		move.b	$34(a0),d0
0000D1CE 4A28 0025                  		tst.b	ob2ndRout(a0)
0000D1D2 6600                       		bne.s	loc_B010
0000D1D4 5500                       		subq.b	#2,d0
0000D1D6 6400                       		bcc.s	loc_B01C
0000D1D8 7000                       		moveq	#0,d0
0000D1DA 6000                       		bra.s	loc_B01C
0000D1DC                            ; ===========================================================================
0000D1DC                            
0000D1DC                            loc_B010:
0000D1DC 5800                       		addq.b	#4,d0
0000D1DE 0C00 0040                  		cmpi.b	#$40,d0
0000D1E2 6500                       		bcs.s	loc_B01C
0000D1E4 103C 0040                  		move.b	#$40,d0
0000D1E8                            
0000D1E8                            loc_B01C:
0000D1E8 1140 0034                  		move.b	d0,$34(a0)
0000D1EC 4EB9 0000 3D28             		jsr	(CalcSine).l
0000D1F2 E848                       		lsr.w	#4,d0
0000D1F4 3200                       		move.w	d0,d1
0000D1F6 D068 002C                  		add.w	lgrass_origY(a0),d0
0000D1FA 3140 000C                  		move.w	d0,obY(a0)
0000D1FE 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000D204 6600                       		bne.s	loc_B07A
0000D206 4A28 0035                  		tst.b	$35(a0)
0000D20A 6600                       		bne.s	loc_B07A
0000D20C 117C 0001 0035             		move.b	#1,$35(a0)
0000D212 6100 0000                  		bsr.w	FindNextFreeObj
0000D216 6600                       		bne.s	loc_B07A
0000D218 12BC 0000                  		move.b	#id_GrassFire,0(a1) ; load sitting flame object
0000D21C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D222 3368 002C 002C             		move.w	lgrass_origY(a0),lgrass_origY(a1)
0000D228 5069 002C                  		addq.w	#8,lgrass_origY(a1)
0000D22C 5769 002C                  		subq.w	#3,lgrass_origY(a1)
0000D230 0469 0040 0008             		subi.w	#$40,obX(a1)
0000D236 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000D23C 2348 0038                  		move.l	a0,$38(a1)
0000D240 2448                       		movea.l	a0,a2
0000D242 6100                       		bsr.s	sub_B09C
0000D244                            
0000D244                            loc_B07A:
0000D244 7400                       		moveq	#0,d2
0000D246 45E8 0036                  		lea	$36(a0),a2
0000D24A 141A                       		move.b	(a2)+,d2
0000D24C 5302                       		subq.b	#1,d2
0000D24E 6500                       		bcs.s	locret_B09A
0000D250                            
0000D250                            loc_B086:
0000D250 7000                       		moveq	#0,d0
0000D252 101A                       		move.b	(a2)+,d0
0000D254 ED48                       		lsl.w	#6,d0
0000D256 0640 D000                  		addi.w	#$D000,d0
0000D25A 3240                       		movea.w	d0,a1
0000D25C 3341 003C                  		move.w	d1,$3C(a1)
0000D260 51CA FFEE                  		dbf	d2,loc_B086
0000D264                            
0000D264                            locret_B09A:
0000D264 4E75                       		rts	
0000D266                            
0000D266                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D266                            
0000D266                            
0000D266                            sub_B09C:
0000D266 45EA 0036                  		lea	$36(a2),a2
0000D26A 7000                       		moveq	#0,d0
0000D26C 1012                       		move.b	(a2),d0
0000D26E 5212                       		addq.b	#1,(a2)
0000D270 45F2 0001                  		lea	1(a2,d0.w),a2
0000D274 3009                       		move.w	a1,d0
0000D276 0440 D000                  		subi.w	#$D000,d0
0000D27A EC48                       		lsr.w	#6,d0
0000D27C 0240 007F                  		andi.w	#$7F,d0
0000D280 1480                       		move.b	d0,(a2)
0000D282 4E75                       		rts	
0000D284                            ; End of function sub_B09C
0000D284                            
0000D284                            ; ===========================================================================
0000D284                            
0000D284                            LGrass_ChkDel:
0000D284 4A28 0035                  		tst.b	$35(a0)
0000D288 6700                       		beq.s	loc_B0C6
0000D28A 4A28 0001                  		tst.b	obRender(a0)
0000D28E 6A00                       		bpl.s	LGrass_DelFlames
0000D290                            
0000D290                            loc_B0C6:
0000D2AE 4E75                       		rts	
0000D2B0                            ; ===========================================================================
0000D2B0                            
0000D2B0                            LGrass_DelFlames:
0000D2B0 7400                       		moveq	#0,d2
0000D2B2                            
0000D2B2                            loc_B0E8:
0000D2B2 45E8 0036                  		lea	$36(a0),a2
0000D2B6 1412                       		move.b	(a2),d2
0000D2B8 421A                       		clr.b	(a2)+
0000D2BA 5302                       		subq.b	#1,d2
0000D2BC 6500                       		bcs.s	locret_B116
0000D2BE                            
0000D2BE                            loc_B0F4:
0000D2BE 7000                       		moveq	#0,d0
0000D2C0 1012                       		move.b	(a2),d0
0000D2C2 421A                       		clr.b	(a2)+
0000D2C4 ED48                       		lsl.w	#6,d0
0000D2C6 0640 D000                  		addi.w	#$D000,d0
0000D2CA 3240                       		movea.w	d0,a1
0000D2CC 6100 0000                  		bsr.w	DeleteChild
0000D2D0 51CA FFEC                  		dbf	d2,loc_B0F4
0000D2D4 117C 0000 0035             		move.b	#0,$35(a0)
0000D2DA 117C 0000 0034             		move.b	#0,$34(a0)
0000D2E0                            
0000D2E0                            locret_B116:
0000D2E0 4E75                       		rts	
0000D2E2                            ; ===========================================================================
0000D2E2                            ; ---------------------------------------------------------------------------
0000D2E2                            ; Collision data for large moving platforms (MZ)
0000D2E2                            ; ---------------------------------------------------------------------------
0000D2E2                            LGrass_Data1:	incbin	"misc\mz_pfm1.bin"
0000D32E                            		even
0000D32E                            LGrass_Data2:	incbin	"misc\mz_pfm2.bin"
0000D35A                            		even
0000D35A                            LGrass_Data3:	incbin	"misc\mz_pfm3.bin"
0000D3A6                            		even
0000D3A6                            		even
0000D3A6                            		include	"_incObj\35 Burning Grass.asm"
0000D3A6                            ; ---------------------------------------------------------------------------
0000D3A6                            ; Object 35 - fireball that sits on the	floor (MZ)
0000D3A6                            ; (appears when	you walk on sinking platforms)
0000D3A6                            ; ---------------------------------------------------------------------------
0000D3A6                            
0000D3A6                            GrassFire:
0000D3A6 7000                       		moveq	#0,d0
0000D3A8 1028 0024                  		move.b	obRoutine(a0),d0
0000D3AC 323B 0000                  		move.w	GFire_Index(pc,d0.w),d1
0000D3B0 4EFB 1000                  		jmp	GFire_Index(pc,d1.w)
0000D3B4                            ; ===========================================================================
0000D3B4 0000                       GFire_Index:	dc.w GFire_Main-GFire_Index
0000D3B6 0000                       		dc.w loc_B238-GFire_Index
0000D3B8 0000                       		dc.w GFire_Move-GFire_Index
0000D3BA                            
0000D3BA =0000002A                  gfire_origX:	equ $2A
0000D3BA                            ; ===========================================================================
0000D3BA                            
0000D3BA                            GFire_Main:	; Routine 0
0000D3BA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D3BE 217C 0000 0000 0004        		move.l	#Map_Fire,obMap(a0)
0000D3C6 317C 0345 0002             		move.w	#$345,obGfx(a0)
0000D3CC 3168 0008 002A             		move.w	obX(a0),gfire_origX(a0)
0000D3D2 117C 0004 0001             		move.b	#4,obRender(a0)
0000D3D8 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000D3DE 117C 008B 0020             		move.b	#$8B,obColType(a0)
0000D3E4 117C 0008 0014             		move.b	#8,obActWid(a0)
0000D3F4 4A28 0028                  		tst.b	obSubtype(a0)
0000D3F8 6700                       		beq.s	loc_B238
0000D3FA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D3FE 6000 0000                  		bra.w	GFire_Move
0000D402                            ; ===========================================================================
0000D402                            
0000D402                            loc_B238:	; Routine 2
0000D402 2268 0030                  		movea.l	$30(a0),a1
0000D406 3228 0008                  		move.w	obX(a0),d1
0000D40A 9268 002A                  		sub.w	gfire_origX(a0),d1
0000D40E 0641 000C                  		addi.w	#$C,d1
0000D412 3001                       		move.w	d1,d0
0000D414 E248                       		lsr.w	#1,d0
0000D416 1031 0000                  		move.b	(a1,d0.w),d0
0000D41A 4440                       		neg.w	d0
0000D41C D068 002C                  		add.w	$2C(a0),d0
0000D420 3400                       		move.w	d0,d2
0000D422 D068 003C                  		add.w	$3C(a0),d0
0000D426 3140 000C                  		move.w	d0,obY(a0)
0000D42A 0C41 0084                  		cmpi.w	#$84,d1
0000D42E 6400                       		bcc.s	loc_B2B0
0000D430 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000D438 0C41 0080                  		cmpi.w	#$80,d1
0000D43C 6400                       		bcc.s	loc_B2B0
0000D43E 2028 0008                  		move.l	obX(a0),d0
0000D442 0680 0008 0000             		addi.l	#$80000,d0
0000D448 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000D44E 6600                       		bne.s	loc_B2B0
0000D450 6100 0000                  		bsr.w	FindNextFreeObj
0000D454 6600                       		bne.s	loc_B2B0
0000D456 12BC 0000                  		move.b	#id_GrassFire,0(a1)
0000D45A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D460 3342 002C                  		move.w	d2,$2C(a1)
0000D464 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000D46A 137C 0001 0028             		move.b	#1,obSubtype(a1)
0000D470 2468 0038                  		movea.l	$38(a0),a2
0000D474 6100 FDF0                  		bsr.w	sub_B09C
0000D478                            
0000D478                            loc_B2B0:
0000D478 6000                       		bra.s	GFire_Animate
0000D47A                            ; ===========================================================================
0000D47A                            
0000D47A                            GFire_Move:	; Routine 4
0000D47A 3028 002C                  		move.w	$2C(a0),d0
0000D47E D068 003C                  		add.w	$3C(a0),d0
0000D482 3140 000C                  		move.w	d0,obY(a0)
0000D486                            
0000D486                            GFire_Animate:
0000D486 43F9 0000 0000             		lea	(Ani_GFire).l,a1
0000D48C 6100 F456                  		bsr.w	AnimateSprite
0000D490 6000 0000                  		bra.w	DisplaySprite
0000D490 6000 0000                  		bra.w	DisplaySprite
0000D494                            		include	"_anim\Burning Grass.asm"
0000D494                            ; ---------------------------------------------------------------------------
0000D494                            ; Animation script - burning grass that sits on the floor (MZ)
0000D494                            ; ---------------------------------------------------------------------------
0000D494 0000                       Ani_GFire:	dc.w @burn-Ani_GFire
0000D496 0500 2001 21FF             @burn:		dc.b 5,	0, $20,	1, $21,	afEnd
0000D49C                            		even
0000D49C                            		even
0000D49C                            Map_LGrass:	include	"_maps\MZ Large Grassy Platforms.asm"
0000D49C                            ; ---------------------------------------------------------------------------
0000D49C                            ; Sprite mappings - large moving grass-covered platforms (MZ)
0000D49C                            ; ---------------------------------------------------------------------------
0000D49C                            Map_LGrass_internal:
0000D49C 0000                       		dc.w @wide-Map_LGrass_internal
0000D49E 0000                       		dc.w @sloped-Map_LGrass_internal
0000D4A0 0000                       		dc.w @narrow-Map_LGrass_internal
0000D4A2 0D                         @wide:		dc.b $D
0000D4A3 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0 ; wide platform
0000D4A8 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000D4AD 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D4B2 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000D4B7 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000D4BC F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D4C1 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000D4C6 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000D4CB F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000D4D0 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D4D5 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000D4DA D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000D4DF F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000D4E4 0A                         @sloped:	dc.b $A
0000D4E5 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0 ; sloped platform (catches fire)
0000D4EA F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000D4EF 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D4F4 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000D4F9 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000D4FE F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D503 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000D508 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000D50D C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000D512 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000D517 06                         @narrow:	dc.b 6
0000D518 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0 ; narrow platform
0000D51D F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D522 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000D527 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000D52C F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D531 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000D536                            		even
0000D536                            		even
0000D536                            Map_Fire:	include	"_maps\Fireballs.asm"
0000D536                            ; --------------------------------------------------------------------------------
0000D536                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D536                            ; --------------------------------------------------------------------------------
0000D536                            
0000D536                            SME_gyvTV:	
0000D536 0000 0000                  		dc.w SME_gyvTV_C-SME_gyvTV, SME_gyvTV_12-SME_gyvTV	
0000D53A 0000 0000                  		dc.w SME_gyvTV_18-SME_gyvTV, SME_gyvTV_1E-SME_gyvTV	
0000D53E 0000 0000                  		dc.w SME_gyvTV_24-SME_gyvTV, SME_gyvTV_2A-SME_gyvTV	
0000D542 01                         SME_gyvTV_C:	dc.b 1	
0000D543 E807 6000 F8               		dc.b $E8, 7, $60, 0, $F8	
0000D548 01                         SME_gyvTV_12:	dc.b 1	
0000D549 E807 6008 F8               		dc.b $E8, 7, $60, 8, $F8	
0000D54E 01                         SME_gyvTV_18:	dc.b 1	
0000D54F F006 6010 F8               		dc.b $F0, 6, $60, $10, $F8	
0000D554 01                         SME_gyvTV_1E:	dc.b 1	
0000D555 F80D 6016 E8               		dc.b $F8, $D, $60, $16, $E8	
0000D55A 01                         SME_gyvTV_24:	dc.b 1	
0000D55B F80D 601E E8               		dc.b $F8, $D, $60, $1E, $E8	
0000D560 01                         SME_gyvTV_2A:	dc.b 1	
0000D561 F809 6026 F0               		dc.b $F8, 9, $60, $26, $F0	
0000D566                            		even
0000D566                            		even
0000D566                            		include	"_incObj\30 MZ Large Green Glass Blocks.asm"
0000D566                            ; ---------------------------------------------------------------------------
0000D566                            ; Object 30 - large green glass blocks (MZ)
0000D566                            ; ---------------------------------------------------------------------------
0000D566                            
0000D566                            GlassBlock:
0000D566 7000                       		moveq	#0,d0
0000D568 1028 0024                  		move.b	obRoutine(a0),d0
0000D56C 323B 0000                  		move.w	Glass_Index(pc,d0.w),d1
0000D570 4EBB 1000                  		jsr	Glass_Index(pc,d1.w)
0000D592 6000 0000                  		bra.w	DisplaySprite
0000D596                            ; ===========================================================================
0000D596                            
0000D596                            Glass_Delete:
0000D596 6000 0000                  		bra.w	DeleteObject
0000D59A                            ; ===========================================================================
0000D59A 0000                       Glass_Index:	dc.w Glass_Main-Glass_Index
0000D59C 0000                       		dc.w Glass_Block012-Glass_Index
0000D59E 0000                       		dc.w Glass_Reflect012-Glass_Index
0000D5A0 0000                       		dc.w Glass_Block34-Glass_Index
0000D5A2 0000                       		dc.w Glass_Reflect34-Glass_Index
0000D5A4                            
0000D5A4 =00000032                  glass_dist:	equ $32		; distance block moves when switch is pressed
0000D5A4 =0000003C                  glass_parent:	equ $3C		; address of parent object
0000D5A4                            
0000D5A4 0200 00                    Glass_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000D5A7 0400 01                    		dc.b 4,	0, 1
0000D5AA 0600 02                    Glass_Vars2:	dc.b 6,	0, 2
0000D5AD 0800 01                    		dc.b 8,	0, 1
0000D5B0                            ; ===========================================================================
0000D5B0                            
0000D5B0                            Glass_Main:	; Routine 0
0000D5B0 45F9 0000 D5A4             		lea	(Glass_Vars1).l,a2
0000D5B6 7201                       		moveq	#1,d1
0000D5B8 117C 0048 0016             		move.b	#$48,obHeight(a0)
0000D5BE 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object type 0/1/2 ?
0000D5C4 6500                       		bcs.s	@IsType012	; if yes, branch
0000D5C6                            
0000D5C6 45F9 0000 D5AA             		lea	(Glass_Vars2).l,a2
0000D5CC 7201                       		moveq	#1,d1
0000D5CE 117C 0038 0016             		move.b	#$38,obHeight(a0)
0000D5D4                            
0000D5D4                            	@IsType012:
0000D5D4 2248                       		movea.l	a0,a1
0000D5D6 6000                       		bra.s	@Load		; load main object
0000D5D8                            ; ===========================================================================
0000D5D8                            
0000D5D8                            	@Repeat:
0000D5D8 6100 0000                  		bsr.w	FindNextFreeObj
0000D5DC 6600                       		bne.s	@Fail
0000D5DE                            
0000D5DE                            @Load:
0000D5DE 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D5E2 12BC 0000                  		move.b	#id_GlassBlock,0(a1)
0000D5E6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D5EC 101A                       		move.b	(a2)+,d0
0000D5EE 4880                       		ext.w	d0
0000D5F0 D068 000C                  		add.w	obY(a0),d0
0000D5F4 3340 000C                  		move.w	d0,obY(a1)
0000D5F8 237C 0000 0000 0004        		move.l	#Map_Glass,obMap(a1)
0000D600 337C C38E 0002             		move.w	#$C38E,obGfx(a1)
0000D606 137C 0004 0001             		move.b	#4,obRender(a1)
0000D60C 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D612 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D618 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000D61E 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D624 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D628 2348 003C                  		move.l	a0,glass_parent(a1)
0000D62C 51C9 FFAA                  		dbf	d1,@Repeat	; repeat once to load "reflection object"
0000D630                            
0000D630 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D636 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D63C 5029 0028                  		addq.b	#8,obSubtype(a1)
0000D640 0229 000F 0028             		andi.b	#$F,obSubtype(a1)
0000D646                            
0000D646                            	@Fail:
0000D646 317C 0090 0032             		move.w	#$90,glass_dist(a0)
0000D64C 08E8 0004 0001             		bset	#4,obRender(a0)
0000D652                            
0000D652                            Glass_Block012:	; Routine 2
0000D652 6100 0000                  		bsr.w	Glass_Types
0000D656 323C 002B                  		move.w	#$2B,d1
0000D65A 343C 0048                  		move.w	#$48,d2
0000D65E 363C 0049                  		move.w	#$49,d3
0000D662 3828 0008                  		move.w	obX(a0),d4
0000D666 6000 0000                  		bra.w	SolidObject
0000D66A                            ; ===========================================================================
0000D66A                            
0000D66A                            Glass_Reflect012:
0000D66A                            		; Routine 4
0000D66A 2268 003C                  		movea.l	$3C(a0),a1
0000D66E 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D674 6000 0000                  		bra.w	Glass_Types
0000D678                            ; ===========================================================================
0000D678                            
0000D678                            Glass_Block34:	; Routine 6
0000D678 6100 0000                  		bsr.w	Glass_Types
0000D67C 323C 002B                  		move.w	#$2B,d1
0000D680 343C 0038                  		move.w	#$38,d2
0000D684 363C 0039                  		move.w	#$39,d3
0000D688 3828 0008                  		move.w	obX(a0),d4
0000D68C 6000 0000                  		bra.w	SolidObject
0000D690                            ; ===========================================================================
0000D690                            
0000D690                            Glass_Reflect34:
0000D690                            		; Routine 8
0000D690 2268 003C                  		movea.l	$3C(a0),a1
0000D694 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D69A 3169 000C 0030             		move.w	obY(a1),$30(a0)
0000D6A0 6000 0000                  		bra.w	Glass_Types
0000D6A4                            
0000D6A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D6A4                            
0000D6A4                            
0000D6A4                            Glass_Types:
0000D6A4 7000                       		moveq	#0,d0
0000D6A6 1028 0028                  		move.b	obSubtype(a0),d0
0000D6AA 0240 0007                  		andi.w	#7,d0
0000D6AE D040                       		add.w	d0,d0
0000D6B0 323B 0000                  		move.w	Glass_TypeIndex(pc,d0.w),d1
0000D6B4 4EFB 1000                  		jmp	Glass_TypeIndex(pc,d1.w)
0000D6B8                            ; End of function Glass_Types
0000D6B8                            
0000D6B8                            ; ===========================================================================
0000D6B8 0000                       Glass_TypeIndex:dc.w Glass_Type00-Glass_TypeIndex
0000D6BA 0000                       		dc.w Glass_Type01-Glass_TypeIndex
0000D6BC 0000                       		dc.w Glass_Type02-Glass_TypeIndex
0000D6BE 0000                       		dc.w Glass_Type03-Glass_TypeIndex
0000D6C0 0000                       		dc.w Glass_Type04-Glass_TypeIndex
0000D6C2                            ; ===========================================================================
0000D6C2                            
0000D6C2                            Glass_Type00:
0000D6C2 4E75                       		rts	
0000D6C4                            ; ===========================================================================
0000D6C4                            
0000D6C4                            Glass_Type01:
0000D6C4 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D6C8 323C 0040                  		move.w	#$40,d1
0000D6CC 6000                       		bra.s	loc_B514
0000D6CE                            ; ===========================================================================
0000D6CE                            
0000D6CE                            Glass_Type02:
0000D6CE 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D6D2 323C 0040                  		move.w	#$40,d1
0000D6D6 4440                       		neg.w	d0
0000D6D8 D041                       		add.w	d1,d0
0000D6DA                            
0000D6DA                            loc_B514:
0000D6DA 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D6E0 6700                       		beq.s	loc_B526
0000D6E2 4440                       		neg.w	d0
0000D6E4 D041                       		add.w	d1,d0
0000D6E6 E208                       		lsr.b	#1,d0
0000D6E8 0640 0020                  		addi.w	#$20,d0
0000D6EC                            
0000D6EC                            loc_B526:
0000D6EC 6000 0000                  		bra.w	loc_B5EE
0000D6F0                            ; ===========================================================================
0000D6F0                            
0000D6F0                            Glass_Type03:
0000D6F0 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D6F6 6700                       		beq.s	loc_B53E
0000D6F8 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D6FC 0440 0010                  		subi.w	#$10,d0
0000D700 6000 0000                  		bra.w	loc_B5EE
0000D704                            ; ===========================================================================
0000D704                            
0000D704                            loc_B53E:
0000D704 0828 0003 0022             		btst	#3,obStatus(a0)
0000D70A 6600                       		bne.s	loc_B54E
0000D70C 08A8 0000 0034             		bclr	#0,$34(a0)
0000D712 6000                       		bra.s	loc_B582
0000D714                            ; ===========================================================================
0000D714                            
0000D714                            loc_B54E:
0000D714 4A28 0034                  		tst.b	$34(a0)
0000D718 6600                       		bne.s	loc_B582
0000D71A 117C 0001 0034             		move.b	#1,$34(a0)
0000D720 08E8 0000 0035             		bset	#0,$35(a0)
0000D726 6700                       		beq.s	loc_B582
0000D728 08E8 0007 0034             		bset	#7,$34(a0)
0000D72E 317C 0010 0036             		move.w	#$10,$36(a0)
0000D734 117C 000A 0038             		move.b	#$A,$38(a0)
0000D73A 0C68 0040 0032             		cmpi.w	#$40,glass_dist(a0)
0000D740 6600                       		bne.s	loc_B582
0000D742 317C 0040 0036             		move.w	#$40,$36(a0)
0000D748                            
0000D748                            loc_B582:
0000D748 4A28 0034                  		tst.b	$34(a0)
0000D74C 6A00                       		bpl.s	loc_B5AA
0000D74E 4A28 0038                  		tst.b	$38(a0)
0000D752 6700                       		beq.s	loc_B594
0000D754 5328 0038                  		subq.b	#1,$38(a0)
0000D758 6600                       		bne.s	loc_B5AA
0000D75A                            
0000D75A                            loc_B594:
0000D75A 4A68 0032                  		tst.w	glass_dist(a0)
0000D75E 6700                       		beq.s	loc_B5A4
0000D760 5368 0032                  		subq.w	#1,glass_dist(a0)
0000D764 5368 0036                  		subq.w	#1,$36(a0)
0000D768 6600                       		bne.s	loc_B5AA
0000D76A                            
0000D76A                            loc_B5A4:
0000D76A 08A8 0007 0034             		bclr	#7,$34(a0)
0000D770                            
0000D770                            loc_B5AA:
0000D770 3028 0032                  		move.w	glass_dist(a0),d0
0000D774 6000                       		bra.s	loc_B5EE
0000D776                            ; ===========================================================================
0000D776                            
0000D776                            Glass_Type04:
0000D776 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D77C 6700                       		beq.s	Glass_ChkSwitch
0000D77E 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D782 0440 0010                  		subi.w	#$10,d0
0000D786 6000                       		bra.s	loc_B5EE
0000D788                            ; ===========================================================================
0000D788                            
0000D788                            Glass_ChkSwitch:
0000D788 4A28 0034                  		tst.b	$34(a0)
0000D78C 6600                       		bne.s	loc_B5E0
0000D78E 45F8 F7E0                  		lea	(f_switch).w,a2
0000D792 7000                       		moveq	#0,d0
0000D794 1028 0028                  		move.b	obSubtype(a0),d0 ; load object type number
0000D798 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000D79A 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000D79E 6700                       		beq.s	loc_B5EA	; if not, branch
0000D7A0 117C 0001 0034             		move.b	#1,$34(a0)
0000D7A6                            
0000D7A6                            loc_B5E0:
0000D7A6 4A68 0032                  		tst.w	glass_dist(a0)
0000D7AA 6700                       		beq.s	loc_B5EA
0000D7AC 5568 0032                  		subq.w	#2,glass_dist(a0)
0000D7B0                            
0000D7B0                            loc_B5EA:
0000D7B0 3028 0032                  		move.w	glass_dist(a0),d0
0000D7B4                            
0000D7B4                            loc_B5EE:
0000D7B4 3228 0030                  		move.w	$30(a0),d1
0000D7B8 9240                       		sub.w	d0,d1
0000D7BA 3141 000C                  		move.w	d1,obY(a0)
0000D7BE 4E75                       		rts	
0000D7BE 4E75                       		rts	
0000D7C0                            Map_Glass:	include	"_maps\MZ Large Green Glass Blocks.asm"
0000D7C0                            ; --------------------------------------------------------------------------------
0000D7C0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D7C0                            ; --------------------------------------------------------------------------------
0000D7C0                            
0000D7C0                            SME_NEyTf:	
0000D7C0 0000 0000                  		dc.w SME_NEyTf_6-SME_NEyTf, SME_NEyTf_43-SME_NEyTf	
0000D7C4 0000                       		dc.w SME_NEyTf_4E-SME_NEyTf	
0000D7C6 0C                         SME_NEyTf_6:	dc.b $C	
0000D7C7 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0	
0000D7CC B80C 0800 00               		dc.b $B8, $C, 8, 0, 0	
0000D7D1 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0	
0000D7D6 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0	
0000D7DB E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0	
0000D7E0 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0	
0000D7E5 000F 0004 E0               		dc.b 0, $F, 0, 4, $E0	
0000D7EA 000F 0804 00               		dc.b 0, $F, 8, 4, 0	
0000D7EF 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0	
0000D7F4 200F 0804 00               		dc.b $20, $F, 8, 4, 0	
0000D7F9 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0	
0000D7FE 400C 1800 00               		dc.b $40, $C, $18, 0, 0	
0000D803 02                         SME_NEyTf_43:	dc.b 2	
0000D804 0806 6014 F0               		dc.b 8, 6, $60, $14, $F0	
0000D809 0006 6014 00               		dc.b 0, 6, $60, $14, 0	
0000D80E 0A                         SME_NEyTf_4E:	dc.b $A	
0000D80F C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0	
0000D814 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0	
0000D819 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0	
0000D81E D00F 0804 00               		dc.b $D0, $F, 8, 4, 0	
0000D823 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0	
0000D828 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0	
0000D82D 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0	
0000D832 100F 0804 00               		dc.b $10, $F, 8, 4, 0	
0000D837 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0	
0000D83C 300C 1800 00               		dc.b $30, $C, $18, 0, 0	
0000D842 00                         		even
0000D842 00                         		even
0000D842                            		include	"_incObj\31 Chained Stompers.asm"
0000D842                            ; ---------------------------------------------------------------------------
0000D842                            ; Object 31 - stomping metal blocks on chains (MZ)
0000D842                            ; ---------------------------------------------------------------------------
0000D842                            
0000D842                            ChainStomp:
0000D842 7000                       		moveq	#0,d0
0000D844 1028 0024                  		move.b	obRoutine(a0),d0
0000D848 323B 0000                  		move.w	CStom_Index(pc,d0.w),d1
0000D84C 4EFB 1000                  		jmp	CStom_Index(pc,d1.w)
0000D850                            ; ===========================================================================
0000D850 0000                       CStom_Index:	dc.w CStom_Main-CStom_Index
0000D852 0000                       		dc.w loc_B798-CStom_Index
0000D854 0000                       		dc.w loc_B7FE-CStom_Index
0000D856 0000                       		dc.w CStom_Display2-CStom_Index
0000D858 0000                       		dc.w loc_B7E2-CStom_Index
0000D85A                            
0000D85A =0000003A                  CStom_switch:	equ $3A			; switch number for the current stomper
0000D85A                            
0000D85A 0000                       CStom_SwchNums:	dc.b 0,	0		; switch number, obj number
0000D85C 0100                       		dc.b 1,	0
0000D85E                            
0000D85E 0200 00                    CStom_Var:	dc.b 2,	0, 0		; routine number, y-position, frame number
0000D861 041C 01                    		dc.b 4,	$1C, 1
0000D864 08CC 03                    		dc.b 8,	$CC, 3
0000D867 06F0 02                    		dc.b 6,	$F0, 2
0000D86A                            
0000D86A 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000D86E 5000 7800                  		dc.w $5000, $7800
0000D872 3800 5800                  		dc.w $3800, $5800
0000D876 B800                       		dc.w $B800
0000D878                            ; ===========================================================================
0000D878                            
0000D878                            CStom_Main:	; Routine 0
0000D878 7000                       		moveq	#0,d0
0000D87A 1028 0028                  		move.b	obSubtype(a0),d0
0000D87E 6A00                       		bpl.s	loc_B6CE
0000D880 0240 007F                  		andi.w	#$7F,d0
0000D884 D040                       		add.w	d0,d0
0000D886 45FB 00D2                  		lea	CStom_SwchNums(pc,d0.w),a2
0000D88A 115A 003A                  		move.b	(a2)+,CStom_switch(a0)
0000D88E 101A                       		move.b	(a2)+,d0
0000D890 1140 0028                  		move.b	d0,obSubtype(a0)
0000D894                            
0000D894                            loc_B6CE:
0000D894 0200 000F                  		andi.b	#$F,d0
0000D898 D040                       		add.w	d0,d0
0000D89A 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000D89E 4A40                       		tst.w	d0
0000D8A0 6600                       		bne.s	loc_B6E0
0000D8A2 3142 0032                  		move.w	d2,$32(a0)
0000D8A6                            
0000D8A6                            loc_B6E0:
0000D8A6 45F9 0000 D85E             		lea	(CStom_Var).l,a2
0000D8AC 2248                       		movea.l	a0,a1
0000D8AE 7203                       		moveq	#3,d1
0000D8B0 6000                       		bra.s	CStom_MakeStomper
0000D8B2                            ; ===========================================================================
0000D8B2                            
0000D8B2                            CStom_Loop:
0000D8B2 6100 0000                  		bsr.w	FindNextFreeObj
0000D8B6 6600 0000                  		bne.w	CStom_SetSize
0000D8BA                            
0000D8BA                            CStom_MakeStomper:
0000D8BA 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D8BE 12BC 0000                  		move.b	#id_ChainStomp,0(a1)
0000D8C2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D8C8 101A                       		move.b	(a2)+,d0
0000D8CA 4880                       		ext.w	d0
0000D8CC D068 000C                  		add.w	obY(a0),d0
0000D8D0 3340 000C                  		move.w	d0,obY(a1)
0000D8D4 237C 0000 0000 0004        		move.l	#Map_CStom,obMap(a1)
0000D8DC 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000D8E2 137C 0004 0001             		move.b	#4,obRender(a1)
0000D8E8 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D8EE 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D8F4 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D8FA 3342 0034                  		move.w	d2,$34(a1)
0000D8FE 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D904 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D908 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0000D90E 6600                       		bne.s	loc_B76A
0000D910 5341                       		subq.w	#1,d1
0000D912 1028 0028                  		move.b	obSubtype(a0),d0
0000D916 0240 00F0                  		andi.w	#$F0,d0
0000D91A 0C40 0020                  		cmpi.w	#$20,d0
0000D91E 679A                       		beq.s	CStom_MakeStomper
0000D920 137C 0038 0014             		move.b	#$38,obActWid(a1)
0000D926 137C 0090 0020             		move.b	#$90,obColType(a1)
0000D92C 5241                       		addq.w	#1,d1
0000D92E                            
0000D92E                            loc_B76A:
0000D92E 2348 003C                  		move.l	a0,$3C(a1)
0000D932 51C9 FF7E                  		dbf	d1,CStom_Loop
0000D936                            
0000D936 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D93C                            
0000D93C                            CStom_SetSize:
0000D93C 7000                       		moveq	#0,d0
0000D93E 1028 0028                  		move.b	obSubtype(a0),d0
0000D942 E648                       		lsr.w	#3,d0
0000D944 0200 000E                  		andi.b	#$E,d0
0000D948 45FB 0000                  		lea	CStom_Var2(pc,d0.w),a2
0000D94C 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000D950 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000D954 6000                       		bra.s	loc_B798
0000D956                            ; ===========================================================================
0000D956 3800                       CStom_Var2:	dc.b $38, 0		; width, frame number
0000D958 3009                       		dc.b $30, 9
0000D95A 100A                       		dc.b $10, $A
0000D95C                            ; ===========================================================================
0000D95C                            
0000D95C                            loc_B798:	; Routine 2
0000D95C 6100 0000                  		bsr.w	CStom_Types
0000D960 31E8 000C F7A4             		move.w	obY(a0),(v_obj31ypos).w
0000D966 7200                       		moveq	#0,d1
0000D968 1228 0014                  		move.b	obActWid(a0),d1
0000D96C 0641 000B                  		addi.w	#$B,d1
0000D970 343C 000C                  		move.w	#$C,d2
0000D974 363C 000D                  		move.w	#$D,d3
0000D978 3828 0008                  		move.w	obX(a0),d4
0000D97C 6100 0000                  		bsr.w	SolidObject
0000D980 0828 0003 0022             		btst	#3,obStatus(a0)
0000D986 6700                       		beq.s	CStom_Display
0000D988 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D98E 6400                       		bcc.s	CStom_Display
0000D990 2448                       		movea.l	a0,a2
0000D992 41F8 D000                  		lea	(v_player).w,a0
0000D996 4EB9 0000 0000             		jsr	(KillSonic).l
0000D99C 204A                       		movea.l	a2,a0
0000D99E                            
0000D99E                            CStom_Display:
0000D99E 6100 0000                  		bsr.w	DisplaySprite
0000D9A2 6000 0000                  		bra.w	CStom_ChkDel
0000D9A6                            ; ===========================================================================
0000D9A6                            
0000D9A6                            loc_B7E2:	; Routine 8
0000D9A6 117C 0080 0016             		move.b	#$80,obHeight(a0)
0000D9AC 08E8 0004 0001             		bset	#4,obRender(a0)
0000D9B2 2268 003C                  		movea.l	$3C(a0),a1
0000D9B6 1029 0032                  		move.b	$32(a1),d0
0000D9BA EA08                       		lsr.b	#5,d0
0000D9BC 5600                       		addq.b	#3,d0
0000D9BE 1140 001A                  		move.b	d0,obFrame(a0)
0000D9C2                            
0000D9C2                            loc_B7FE:	; Routine 4
0000D9C2 2268 003C                  		movea.l	$3C(a0),a1
0000D9C6 7000                       		moveq	#0,d0
0000D9C8 1029 0032                  		move.b	$32(a1),d0
0000D9CC D068 0030                  		add.w	$30(a0),d0
0000D9D0 3140 000C                  		move.w	d0,obY(a0)
0000D9D4                            
0000D9D4                            CStom_Display2:	; Routine 6
0000D9D4 6100 0000                  		bsr.w	DisplaySprite
0000D9D8                            
0000D9D8                            CStom_ChkDel:
0000D9F6 4E75                       		rts	
0000D9F8                            ; ===========================================================================
0000D9F8                            
0000D9F8                            CStom_Types:
0000D9F8 1028 0028                  		move.b	obSubtype(a0),d0
0000D9FC 0240 000F                  		andi.w	#$F,d0
0000DA00 D040                       		add.w	d0,d0
0000DA02 323B 0000                  		move.w	CStom_TypeIndex(pc,d0.w),d1
0000DA06 4EFB 1000                  		jmp	CStom_TypeIndex(pc,d1.w)
0000DA0A                            ; ===========================================================================
0000DA0A 0000                       CStom_TypeIndex:dc.w CStom_Type00-CStom_TypeIndex
0000DA0C 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DA0E 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DA10 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000DA12 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DA14 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000DA16 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DA18                            ; ===========================================================================
0000DA18                            
0000DA18                            CStom_Type00:
0000DA18 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
0000DA1C 7000                       		moveq	#0,d0
0000DA1E 1028 003A                  		move.b	CStom_switch(a0),d0 ; move number 0 or 1 to d0
0000DA22 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000DA26 6700                       		beq.s	loc_B8A8	; if not, branch
0000DA28 4A78 F7A4                  		tst.w	(v_obj31ypos).w
0000DA2C 6A00                       		bpl.s	loc_B872
0000DA2E 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000DA34 6700                       		beq.s	loc_B8A0
0000DA36                            
0000DA36                            loc_B872:
0000DA36 4A68 0032                  		tst.w	$32(a0)
0000DA3A 6700                       		beq.s	loc_B8A0
0000DA3C 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000DA40 0200 000F                  		andi.b	#$F,d0
0000DA44 6600                       		bne.s	loc_B892
0000DA46 4A28 0001                  		tst.b	1(a0)
0000DA4A 6A00                       		bpl.s	loc_B892
0000DA56                            
0000DA56                            loc_B892:
0000DA56 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DA5C 6400                       		bcc.s	CStom_Restart
0000DA5E 317C 0000 0032             		move.w	#0,$32(a0)
0000DA64                            
0000DA64                            loc_B8A0:
0000DA64 317C 0000 0012             		move.w	#0,obVelY(a0)
0000DA6A 6000                       		bra.s	CStom_Restart
0000DA6C                            ; ===========================================================================
0000DA6C                            
0000DA6C                            loc_B8A8:
0000DA6C 3228 0034                  		move.w	$34(a0),d1
0000DA70 B268 0032                  		cmp.w	$32(a0),d1
0000DA74 6700                       		beq.s	CStom_Restart
0000DA76 3028 0012                  		move.w	obVelY(a0),d0
0000DA7A 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000DA80 D168 0032                  		add.w	d0,$32(a0)
0000DA84 B268 0032                  		cmp.w	$32(a0),d1
0000DA88 6200                       		bhi.s	CStom_Restart
0000DA8A 3141 0032                  		move.w	d1,$32(a0)
0000DA8E 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000DA94 4A28 0001                  		tst.b	obRender(a0)
0000DA98 6A00                       		bpl.s	CStom_Restart
0000DAA4                            
0000DAA4                            CStom_Restart:
0000DAA4 7000                       		moveq	#0,d0
0000DAA6 1028 0032                  		move.b	$32(a0),d0
0000DAAA D068 0030                  		add.w	$30(a0),d0
0000DAAE 3140 000C                  		move.w	d0,obY(a0)
0000DAB2 4E75                       		rts	
0000DAB4                            ; ===========================================================================
0000DAB4                            
0000DAB4                            CStom_Type01:
0000DAB4 4A68 0036                  		tst.w	$36(a0)
0000DAB8 6700                       		beq.s	loc_B938
0000DABA 4A68 0038                  		tst.w	$38(a0)
0000DABE 6700                       		beq.s	loc_B902
0000DAC0 5368 0038                  		subq.w	#1,$38(a0)
0000DAC4 6000                       		bra.s	loc_B97C
0000DAC6                            ; ===========================================================================
0000DAC6                            
0000DAC6                            loc_B902:
0000DAC6 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000DACA 0200 000F                  		andi.b	#$F,d0
0000DACE 6600                       		bne.s	loc_B91C
0000DAD0 4A28 0001                  		tst.b	obRender(a0)
0000DAD4 6A00                       		bpl.s	loc_B91C
0000DAE0                            
0000DAE0                            loc_B91C:
0000DAE0 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DAE6 6400                       		bcc.s	loc_B97C
0000DAE8 317C 0000 0032             		move.w	#0,$32(a0)
0000DAEE 317C 0000 0012             		move.w	#0,obVelY(a0)
0000DAF4 317C 0000 0036             		move.w	#0,$36(a0)
0000DAFA 6000                       		bra.s	loc_B97C
0000DAFC                            ; ===========================================================================
0000DAFC                            
0000DAFC                            loc_B938:
0000DAFC 3228 0034                  		move.w	$34(a0),d1
0000DB00 B268 0032                  		cmp.w	$32(a0),d1
0000DB04 6700                       		beq.s	loc_B97C
0000DB06 3028 0012                  		move.w	obVelY(a0),d0
0000DB0A 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000DB10 D168 0032                  		add.w	d0,$32(a0)
0000DB14 B268 0032                  		cmp.w	$32(a0),d1
0000DB18 6200                       		bhi.s	loc_B97C
0000DB1A 3141 0032                  		move.w	d1,$32(a0)
0000DB1E 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000DB24 317C 0001 0036             		move.w	#1,$36(a0)
0000DB2A 317C 003C 0038             		move.w	#$3C,$38(a0)
0000DB30 4A28 0001                  		tst.b	obRender(a0)
0000DB34 6A00                       		bpl.s	loc_B97C
0000DB40                            
0000DB40                            loc_B97C:
0000DB40 6000 FF62                  		bra.w	CStom_Restart
0000DB44                            ; ===========================================================================
0000DB44                            
0000DB44                            CStom_Type03:
0000DB44 3038 D008                  		move.w	(v_player+obX).w,d0
0000DB48 9068 0008                  		sub.w	obX(a0),d0
0000DB4C 6400                       		bcc.s	loc_B98C
0000DB4E 4440                       		neg.w	d0
0000DB50                            
0000DB50                            loc_B98C:
0000DB50 0C40 0090                  		cmpi.w	#$90,d0
0000DB54 6400                       		bcc.s	loc_B996
0000DB56 5228 0028                  		addq.b	#1,obSubtype(a0)
0000DB5A                            
0000DB5A                            loc_B996:
0000DB5A 6000 FF48                  		bra.w	CStom_Restart
0000DB5A 6000 FF48                  		bra.w	CStom_Restart
0000DB5E                            		include	"_incObj\45 Sideways Stomper.asm"
0000DB5E                            ; ---------------------------------------------------------------------------
0000DB5E                            ; Object 45 - spiked metal block from beta version (MZ)
0000DB5E                            ; ---------------------------------------------------------------------------
0000DB5E                            
0000DB5E                            SideStomp:
0000DB5E 7000                       		moveq	#0,d0
0000DB60 1028 0024                  		move.b	obRoutine(a0),d0
0000DB64 323B 0000                  		move.w	SStom_Index(pc,d0.w),d1
0000DB68 4EFB 1000                  		jmp	SStom_Index(pc,d1.w)
0000DB6C                            ; ===========================================================================
0000DB6C 0000                       SStom_Index:	dc.w SStom_Main-SStom_Index
0000DB6E 0000                       		dc.w SStom_Solid-SStom_Index
0000DB70 0000                       		dc.w loc_BA8E-SStom_Index
0000DB72 0000                       		dc.w SStom_Display-SStom_Index
0000DB74 0000                       		dc.w SStom_Pole-SStom_Index
0000DB76                            
0000DB76                            		;	routine		frame
0000DB76                            		;		 xpos
0000DB76 0204 00                    SStom_Var:	dc.b	2,  	 4,	0	; main block
0000DB79 04E4 01                    		dc.b	4,	-$1C,	1	; spikes
0000DB7C 0834 03                    		dc.b	8,	 $34,	3	; pole
0000DB7F 0628 02                    		dc.b	6,	 $28,	2	; wall bracket
0000DB82                            
0000DB82                            ;word_B9BE:	; Note that this indicates three subtypes
0000DB82 3800                       SStom_Len:	dc.w $3800	; short
0000DB84 A000                       		dc.w $A000	; long
0000DB86 5000                       		dc.w $5000	; medium
0000DB88                            ; ===========================================================================
0000DB88                            
0000DB88                            SStom_Main:	; Routine 0
0000DB88 7000                       		moveq	#0,d0
0000DB8A 1028 0028                  		move.b	obSubtype(a0),d0
0000DB8E D040                       		add.w	d0,d0
0000DB90 343B 00F0                  		move.w	SStom_Len(pc,d0.w),d2
0000DB94 45F9 0000 DB76             		lea	(SStom_Var).l,a2
0000DB9A 2248                       		movea.l	a0,a1
0000DB9C 7203                       		moveq	#3,d1
0000DB9E 6000                       		bra.s	@load
0000DBA0                            
0000DBA0                            	@loop:
0000DBA0 6100 0000                  		bsr.w	FindNextFreeObj
0000DBA4 6600                       		bne.s	@fail
0000DBA6                            
0000DBA6                            	@load:
0000DBA6 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000DBAA 12BC 0000                  		move.b	#id_SideStomp,0(a1)
0000DBAE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000DBB4 101A                       		move.b	(a2)+,d0
0000DBB6 4880                       		ext.w	d0
0000DBB8 D068 0008                  		add.w	obX(a0),d0
0000DBBC 3340 0008                  		move.w	d0,obX(a1)
0000DBC0 237C 0000 0000 0004        		move.l	#Map_SStom,obMap(a1)
0000DBC8 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000DBCE 137C 0004 0001             		move.b	#4,obRender(a1)
0000DBD4 3369 0008 0030             		move.w	obX(a1),$30(a1)
0000DBDA 3368 0008 003A             		move.w	obX(a0),$3A(a1)
0000DBE0 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000DBE6 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000DBEC 3342 0034                  		move.w	d2,$34(a1)
0000DBF0 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000DBF6 0C12 0001                  		cmpi.b	#1,(a2)		; is subobject spikes?
0000DBFA 6600                       		bne.s	@notspikes	; if not, branch
0000DBFC 137C 0091 0020             		move.b	#$91,obColType(a1) ; use harmful collision type
0000DC02                            
0000DC02                            	@notspikes:
0000DC02 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000DC06 2348 003C                  		move.l	a0,$3C(a1)
0000DC0A 51C9 FF94                  		dbf	d1,@loop	; repeat 3 times
0000DC0E                            
0000DC0E 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000DC14                            
0000DC14                            	@fail:
0000DC14 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000DC1A                            
0000DC1A                            SStom_Solid:	; Routine 2
0000DC1A 3F28 0008                  		move.w	obX(a0),-(sp)
0000DC1E 6100 0000                  		bsr.w	SStom_Move
0000DC22 323C 0017                  		move.w	#$17,d1
0000DC26 343C 0020                  		move.w	#$20,d2
0000DC2A 363C 0020                  		move.w	#$20,d3
0000DC2E 381F                       		move.w	(sp)+,d4
0000DC30 6100 0000                  		bsr.w	SolidObject
0000DC34 6100 0000                  		bsr.w	DisplaySprite
0000DC38 6000 0000                  		bra.w	SStom_ChkDel
0000DC3C                            ; ===========================================================================
0000DC3C                            
0000DC3C                            SStom_Pole:	; Routine 8
0000DC3C 2268 003C                  		movea.l	$3C(a0),a1
0000DC40 1029 0032                  		move.b	$32(a1),d0
0000DC44 0600 0010                  		addi.b	#$10,d0
0000DC48 EA08                       		lsr.b	#5,d0
0000DC4A 5600                       		addq.b	#3,d0
0000DC4C 1140 001A                  		move.b	d0,obFrame(a0)
0000DC50                            
0000DC50                            loc_BA8E:	; Routine 4
0000DC50 2268 003C                  		movea.l	$3C(a0),a1
0000DC54 7000                       		moveq	#0,d0
0000DC56 1029 0032                  		move.b	$32(a1),d0
0000DC5A 4440                       		neg.w	d0
0000DC5C D068 0030                  		add.w	$30(a0),d0
0000DC60 3140 0008                  		move.w	d0,obX(a0)
0000DC64                            
0000DC64                            SStom_Display:	; Routine 6
0000DC64 6100 0000                  		bsr.w	DisplaySprite
0000DC68                            
0000DC68                            SStom_ChkDel:
0000DC86 4E75                       		rts	
0000DC88                            
0000DC88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC88                            
0000DC88                            
0000DC88                            SStom_Move:
0000DC88 7000                       		moveq	#0,d0
0000DC8A 1028 0028                  		move.b	obSubtype(a0),d0
0000DC8E D040                       		add.w	d0,d0
0000DC90 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000DC94 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000DC98                            ; End of function SStom_Move
0000DC98                            
0000DC98                            ; ===========================================================================
0000DC98                            		; This indicates only two subtypes... that do the same thing
0000DC98                            		; Compare to SStom_Len. This breaks subtype 02
0000DC98 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000DC9A 0000                       		dc.w loc_BADA-off_BAD6
0000DC9C                            ; ===========================================================================
0000DC9C                            
0000DC9C                            loc_BADA:
0000DC9C 4A68 0036                  		tst.w	$36(a0)
0000DCA0 6700                       		beq.s	loc_BB08
0000DCA2 4A68 0038                  		tst.w	$38(a0)
0000DCA6 6700                       		beq.s	loc_BAEC
0000DCA8 5368 0038                  		subq.w	#1,$38(a0)
0000DCAC 6000                       		bra.s	loc_BB3C
0000DCAE                            ; ===========================================================================
0000DCAE                            
0000DCAE                            loc_BAEC:
0000DCAE 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DCB4 6400                       		bcc.s	loc_BB3C
0000DCB6 317C 0000 0032             		move.w	#0,$32(a0)
0000DCBC 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DCC2 317C 0000 0036             		move.w	#0,$36(a0)
0000DCC8 6000                       		bra.s	loc_BB3C
0000DCCA                            ; ===========================================================================
0000DCCA                            
0000DCCA                            loc_BB08:
0000DCCA 3228 0034                  		move.w	$34(a0),d1
0000DCCE B268 0032                  		cmp.w	$32(a0),d1
0000DCD2 6700                       		beq.s	loc_BB3C
0000DCD4 3028 0010                  		move.w	obVelX(a0),d0
0000DCD8 0668 0070 0010             		addi.w	#$70,obVelX(a0)
0000DCDE D168 0032                  		add.w	d0,$32(a0)
0000DCE2 B268 0032                  		cmp.w	$32(a0),d1
0000DCE6 6200                       		bhi.s	loc_BB3C
0000DCE8 3141 0032                  		move.w	d1,$32(a0)
0000DCEC 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DCF2 317C 0001 0036             		move.w	#1,$36(a0)
0000DCF8 317C 003C 0038             		move.w	#$3C,$38(a0)
0000DCFE                            
0000DCFE                            loc_BB3C:
0000DCFE 7000                       		moveq	#0,d0
0000DD00 1028 0032                  		move.b	$32(a0),d0
0000DD04 4440                       		neg.w	d0
0000DD06 D068 0030                  		add.w	$30(a0),d0
0000DD0A 3140 0008                  		move.w	d0,obX(a0)
0000DD0E 4E75                       		rts	
0000DD0E 4E75                       		rts	
0000DD10                            Map_CStom:	include	"_maps\Chained Stompers.asm"
0000DD10                            ; ---------------------------------------------------------------------------
0000DD10                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000DD10                            ; ---------------------------------------------------------------------------
0000DD10                            Map_CStom_internal:
0000DD10 0000                       		dc.w @wideblock-Map_CStom_internal
0000DD12 0000                       		dc.w @spikes-Map_CStom_internal
0000DD14 0000                       		dc.w @ceiling-Map_CStom_internal
0000DD16 0000                       		dc.w @chain1-Map_CStom_internal
0000DD18 0000                       		dc.w @chain2-Map_CStom_internal
0000DD1A 0000                       		dc.w @chain3-Map_CStom_internal
0000DD1C 0000                       		dc.w @chain4-Map_CStom_internal
0000DD1E 0000                       		dc.w @chain5-Map_CStom_internal
0000DD20 0000                       		dc.w @chain5-Map_CStom_internal
0000DD22 0000                       		dc.w @mediumblock-Map_CStom_internal
0000DD24 0000                       		dc.w @smallblock-Map_CStom_internal
0000DD26 05                         @wideblock:	dc.b 5
0000DD27 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000DD2C F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000DD31 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DD36 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000DD3B F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000DD40 05                         @spikes:	dc.b 5
0000DD41 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000DD46 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000DD4B F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000DD50 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000DD55 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000DD5A 01                         @ceiling:	dc.b 1
0000DD5B DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000DD60 02                         @chain1:	dc.b 2
0000DD61 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DD66 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DD6B 04                         @chain2:	dc.b 4
0000DD6C E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DD71 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DD76 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DD7B 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DD80 06                         @chain3:	dc.b 6
0000DD81 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DD86 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DD8B E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DD90 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DD95 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DD9A 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DD9F 08                         @chain4:	dc.b 8
0000DDA0 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DDA5 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DDAA C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DDAF D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DDB4 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DDB9 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DDBE 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DDC3 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DDC8 0A                         @chain5:	dc.b $A
0000DDC9 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000DDCE 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000DDD3 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DDD8 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DDDD C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DDE2 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DDE7 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DDEC F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DDF1 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DDF6 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DDFB 05                         @mediumblock:	dc.b 5
0000DDFC F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000DE01 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000DE06 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000DE0B F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000DE10 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DE15 01                         @smallblock:	dc.b 1
0000DE16 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000DE1C 00                         		even
0000DE1C 00                         		even
0000DE1C                            Map_SStom:	include	"_maps\Sideways Stomper.asm"
0000DE1C                            ; ---------------------------------------------------------------------------
0000DE1C                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000DE1C                            ; ---------------------------------------------------------------------------
0000DE1C                            Map_SStom_internal:
0000DE1C 0000                       		dc.w @block-Map_SStom_internal
0000DE1E 0000                       		dc.w @spikes-Map_SStom_internal
0000DE20 0000                       		dc.w @wallbracket-Map_SStom_internal
0000DE22 0000                       		dc.w @pole1-Map_SStom_internal
0000DE24 0000                       		dc.w @pole2-Map_SStom_internal
0000DE26 0000                       		dc.w @pole3-Map_SStom_internal
0000DE28 0000                       		dc.w @pole4-Map_SStom_internal
0000DE2A 0000                       		dc.w @pole5-Map_SStom_internal
0000DE2C 0000                       		dc.w @pole5-Map_SStom_internal
0000DE2E 03                         @block:		dc.b 3
0000DE2F E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4 ; main metal block
0000DE34 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000DE39 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000DE3E 03                         @spikes:	dc.b 3
0000DE3F E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0 ; three spikes
0000DE44 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000DE49 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000DE4E 01                         @wallbracket:	dc.b 1
0000DE4F F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC ; thing holding it to the wall
0000DE54 02                         @pole1:		dc.b 2
0000DE55 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0 ; poles of various lengths
0000DE5A F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DE5F 04                         @pole2:		dc.b 4
0000DE60 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DE65 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DE6A F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DE6F F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DE74 06                         @pole3:		dc.b 6
0000DE75 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DE7A F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DE7F F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DE84 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DE89 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DE8E F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DE93 08                         @pole4:		dc.b 8
0000DE94 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DE99 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DE9E F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DEA3 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DEA8 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DEAD F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DEB2 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000DEB7 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000DEBC 08                         @pole5:		dc.b 8		; Incorrect: this should be $A
0000DEBD F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DEC2 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DEC7 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DECC F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DED1 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DED6 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DEDB F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000DEE0 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000DEE5 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000DEEA F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000DEEF                            		; @pole6 should be here, but it isn't...
0000DEF0 00                         		even
0000DEF0 00                         		even
0000DEF0                            
0000DEF0                            		include	"_incObj\32 Button.asm"
0000DEF0                            ; ---------------------------------------------------------------------------
0000DEF0                            ; Object 32 - buttons (MZ, SYZ, LZ, SBZ)
0000DEF0                            ; ---------------------------------------------------------------------------
0000DEF0                            
0000DEF0                            Button:
0000DEF0 7000                       		moveq	#0,d0
0000DEF2 1028 0024                  		move.b	obRoutine(a0),d0
0000DEF6 323B 0000                  		move.w	But_Index(pc,d0.w),d1
0000DEFA 4EFB 1000                  		jmp	But_Index(pc,d1.w)
0000DEFE                            ; ===========================================================================
0000DEFE 0000                       But_Index:	dc.w But_Main-But_Index
0000DF00 0000                       		dc.w But_Pressed-But_Index
0000DF02                            ; ===========================================================================
0000DF02                            
0000DF02                            But_Main:	; Routine 0
0000DF02 5428 0024                  		addq.b	#2,obRoutine(a0)
0000DF06 217C 0000 0000 0004        		move.l	#Map_But,obMap(a0)
0000DF0E 317C 4513 0002             		move.w	#$4513,obGfx(a0) ; MZ specific code
0000DF14 0C38 0002 FE10             		cmpi.b	#id_MZ,(v_zone).w ; is level Marble Zone?
0000DF1A 6700                       		beq.s	But_IsMZ	; if yes, branch
0000DF1C                            
0000DF1C 317C 0513 0002             		move.w	#$513,obGfx(a0)	; SYZ, LZ and SBZ specific code
0000DF22                            
0000DF22                            	But_IsMZ:
0000DF22 117C 0004 0001             		move.b	#4,obRender(a0)
0000DF28 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000DF2E 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000DF34 5668 000C                  		addq.w	#3,obY(a0)
0000DF38                            
0000DF38                            But_Pressed:	; Routine 2
0000DF38 4A28 0001                  		tst.b	obRender(a0)
0000DF3C 6A00                       		bpl.s	But_Display
0000DF3E 323C 001B                  		move.w	#$1B,d1
0000DF42 343C 0005                  		move.w	#5,d2
0000DF46 363C 0005                  		move.w	#5,d3
0000DF4A 3828 0008                  		move.w	obX(a0),d4
0000DF4E 6100 0000                  		bsr.w	SolidObject
0000DF52 08A8 0000 001A             		bclr	#0,obFrame(a0)	; use "unpressed" frame
0000DF58 1028 0028                  		move.b	obSubtype(a0),d0
0000DF5C 0240 000F                  		andi.w	#$F,d0
0000DF60 47F8 F7E0                  		lea	(f_switch).w,a3
0000DF64 47F3 0000                  		lea	(a3,d0.w),a3
0000DF68 7600                       		moveq	#0,d3
0000DF6A 0828 0006 0028             		btst	#6,obSubtype(a0)
0000DF70 6700                       		beq.s	loc_BDB2
0000DF72 7607                       		moveq	#7,d3
0000DF74                            
0000DF74                            loc_BDB2:
0000DF74 4A28 0028                  		tst.b	obSubtype(a0)
0000DF78 6A00                       		bpl.s	loc_BDBE
0000DF7A 6100 0000                  		bsr.w	But_MZBlock
0000DF7E 6600                       		bne.s	loc_BDC8
0000DF80                            
0000DF80                            loc_BDBE:
0000DF80 4A28 0025                  		tst.b	ob2ndRout(a0)
0000DF84 6600                       		bne.s	loc_BDC8
0000DF86 0793                       		bclr	d3,(a3)
0000DF88 6000                       		bra.s	loc_BDDE
0000DF8A                            ; ===========================================================================
0000DF8A                            
0000DF8A                            loc_BDC8:
0000DF8A 4A13                       		tst.b	(a3)
0000DF8C 6600                       		bne.s	loc_BDD6
0000DF98                            
0000DF98                            loc_BDD6:
0000DF98 07D3                       		bset	d3,(a3)
0000DF9A 08E8 0000 001A             		bset	#0,obFrame(a0)	; use "pressed"	frame
0000DFA0                            
0000DFA0                            loc_BDDE:
0000DFA0 0828 0005 0028             		btst	#5,obSubtype(a0)
0000DFA6 6700                       		beq.s	But_Display
0000DFA8 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000DFAC 6A00                       		bpl.s	But_Display
0000DFAE 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000DFB4 0868 0001 001A             		bchg	#1,obFrame(a0)
0000DFBA                            
0000DFBA                            But_Display:
0000DFBA 6100 0000                  		bsr.w	DisplaySprite
0000DFDC 4E75                       		rts	
0000DFDE                            ; ===========================================================================
0000DFDE                            
0000DFDE                            But_Delete:
0000DFDE 6100 0000                  		bsr.w	DeleteObject
0000DFE2 4E75                       		rts	
0000DFE4                            
0000DFE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DFE4                            
0000DFE4                            
0000DFE4                            But_MZBlock:
0000DFE4 3F03                       		move.w	d3,-(sp)
0000DFE6 3428 0008                  		move.w	obX(a0),d2
0000DFEA 3628 000C                  		move.w	obY(a0),d3
0000DFEE 0442 0010                  		subi.w	#$10,d2
0000DFF2 5143                       		subq.w	#8,d3
0000DFF4 383C 0020                  		move.w	#$20,d4
0000DFF8 3A3C 0010                  		move.w	#$10,d5
0000DFFC 43F8 D800                  		lea	(v_lvlobjspace).w,a1 ; begin checking object RAM
0000E000 3C3C 005F                  		move.w	#$5F,d6
0000E004                            
0000E004                            But_MZLoop:
0000E004 4A29 0001                  		tst.b	obRender(a1)
0000E008 6A00                       		bpl.s	loc_BE4E
0000E00A 0C11 0000                  		cmpi.b	#id_PushBlock,(a1) ; is the object a green MZ block?
0000E00E 6700                       		beq.s	loc_BE5E	; if yes, branch
0000E010                            
0000E010                            loc_BE4E:
0000E010 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000E014 51CE FFEE                  		dbf	d6,But_MZLoop	; repeat $5F times
0000E018                            
0000E018 361F                       		move.w	(sp)+,d3
0000E01A 7000                       		moveq	#0,d0
0000E01C                            
0000E01C                            locret_BE5A:
0000E01C 4E75                       		rts	
0000E01E                            ; ===========================================================================
0000E01E 1010                       But_MZData:	dc.b $10, $10
0000E020                            ; ===========================================================================
0000E020                            
0000E020                            loc_BE5E:
0000E020 7001                       		moveq	#1,d0
0000E022 0240 003F                  		andi.w	#$3F,d0
0000E026 D040                       		add.w	d0,d0
0000E028 45FB 00F2                  		lea	But_MZData-2(pc,d0.w),a2
0000E02C 121A                       		move.b	(a2)+,d1
0000E02E 4881                       		ext.w	d1
0000E030 3029 0008                  		move.w	obX(a1),d0
0000E034 9041                       		sub.w	d1,d0
0000E036 9042                       		sub.w	d2,d0
0000E038 6400                       		bcc.s	loc_BE80
0000E03A D241                       		add.w	d1,d1
0000E03C D041                       		add.w	d1,d0
0000E03E 6500                       		bcs.s	loc_BE84
0000E040 60CE                       		bra.s	loc_BE4E
0000E042                            ; ===========================================================================
0000E042                            
0000E042                            loc_BE80:
0000E042 B044                       		cmp.w	d4,d0
0000E044 62CA                       		bhi.s	loc_BE4E
0000E046                            
0000E046                            loc_BE84:
0000E046 121A                       		move.b	(a2)+,d1
0000E048 4881                       		ext.w	d1
0000E04A 3029 000C                  		move.w	obY(a1),d0
0000E04E 9041                       		sub.w	d1,d0
0000E050 9043                       		sub.w	d3,d0
0000E052 6400                       		bcc.s	loc_BE9A
0000E054 D241                       		add.w	d1,d1
0000E056 D041                       		add.w	d1,d0
0000E058 6500                       		bcs.s	loc_BE9E
0000E05A 60B4                       		bra.s	loc_BE4E
0000E05C                            ; ===========================================================================
0000E05C                            
0000E05C                            loc_BE9A:
0000E05C B045                       		cmp.w	d5,d0
0000E05E 62B0                       		bhi.s	loc_BE4E
0000E060                            
0000E060                            loc_BE9E:
0000E060 361F                       		move.w	(sp)+,d3
0000E062 7001                       		moveq	#1,d0
0000E064 4E75                       		rts	
0000E066                            ; End of function But_MZBlock
0000E066                            ; End of function But_MZBlock
0000E066                            Map_But:	include	"_maps\Button.asm"
0000E066                            ; ---------------------------------------------------------------------------
0000E066                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000E066                            ; ---------------------------------------------------------------------------
0000E066                            Map_But_internal:
0000E066 0000                       		dc.w byte_BEAC-Map_But_internal
0000E068 0000                       		dc.w byte_BEB7-Map_But_internal
0000E06A 0000                       		dc.w byte_BEC2-Map_But_internal
0000E06C 0000                       		dc.w byte_BEB7-Map_But_internal
0000E06E 02                         byte_BEAC:	dc.b 2
0000E06F F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000E074 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000E079 02                         byte_BEB7:	dc.b 2
0000E07A F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000E07F F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000E084 02                         byte_BEC2:	dc.b 2
0000E085 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000E08A F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000E08F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000E094                            		even
0000E094                            		even
0000E094                            
0000E094                            		include	"_incObj\33 Pushable Blocks.asm"
0000E094                            ; ---------------------------------------------------------------------------
0000E094                            ; Object 33 - pushable blocks (MZ, LZ)
0000E094                            ; ---------------------------------------------------------------------------
0000E094                            
0000E094                            PushBlock:
0000E094 7000                       		moveq	#0,d0
0000E096 1028 0024                  		move.b	obRoutine(a0),d0
0000E09A 323B 0000                  		move.w	PushB_Index(pc,d0.w),d1
0000E09E 4EFB 1000                  		jmp	PushB_Index(pc,d1.w)
0000E0A2                            ; ===========================================================================
0000E0A2 0000                       PushB_Index:	dc.w PushB_Main-PushB_Index
0000E0A4 0000                       		dc.w loc_BF6E-PushB_Index
0000E0A6 0000                       		dc.w loc_C02C-PushB_Index
0000E0A8                            
0000E0A8 1000                       PushB_Var:	dc.b $10, 0	; object width,	frame number
0000E0AA 4001                       		dc.b $40, 1
0000E0AC                            ; ===========================================================================
0000E0AC                            
0000E0AC                            PushB_Main:	; Routine 0
0000E0AC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E0B0 117C 000F 0016             		move.b	#$F,obHeight(a0)
0000E0B6 117C 000F 0017             		move.b	#$F,obWidth(a0)
0000E0BC 217C 0000 0000 0004        		move.l	#Map_Push,obMap(a0)
0000E0C4 317C 42B8 0002             		move.w	#$42B8,obGfx(a0) ; MZ specific code
0000E0CA 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w
0000E0D0 6600                       		bne.s	@notLZ
0000E0D2 317C 43DE 0002             		move.w	#$43DE,obGfx(a0) ; LZ specific code
0000E0D8                            
0000E0D8                            	@notLZ:
0000E0D8 117C 0004 0001             		move.b	#4,obRender(a0)
0000E0DE 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000E0E4 3168 0008 0034             		move.w	obX(a0),$34(a0)
0000E0EA 3168 000C 0036             		move.w	obY(a0),$36(a0)
0000E0F0 7000                       		moveq	#0,d0
0000E0F2 1028 0028                  		move.b	obSubtype(a0),d0
0000E0F6 D040                       		add.w	d0,d0
0000E0F8 0240 000E                  		andi.w	#$E,d0
0000E0FC 45FB 00AA                  		lea	PushB_Var(pc,d0.w),a2
0000E100 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000E104 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000E108 4A28 0028                  		tst.b	obSubtype(a0)
0000E10C 6700                       		beq.s	@chkgone
0000E10E 317C C2B8 0002             		move.w	#$C2B8,obGfx(a0)
0000E114                            
0000E114                            	@chkgone:
0000E114 45F8 FC00                  		lea	(v_objstate).w,a2
0000E118 7000                       		moveq	#0,d0
0000E11A 1028 0023                  		move.b	obRespawnNo(a0),d0
0000E11E 6700                       		beq.s	loc_BF6E
0000E120 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E126 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000E12C 6600 0000                  		bne.w	DeleteObject
0000E130                            
0000E130                            loc_BF6E:	; Routine 2
0000E130 4A28 0032                  		tst.b	$32(a0)
0000E134 6600 0000                  		bne.w	loc_C046
0000E138 7200                       		moveq	#0,d1
0000E13A 1228 0014                  		move.b	obActWid(a0),d1
0000E13E 0641 000B                  		addi.w	#$B,d1
0000E142 343C 0010                  		move.w	#$10,d2
0000E146 363C 0011                  		move.w	#$11,d3
0000E14A 3828 0008                  		move.w	obX(a0),d4
0000E14E 6100 0000                  		bsr.w	loc_C186
0000E152 0C78 0200 FE10             		cmpi.w	#(id_MZ<<8)+0,(v_zone).w ; is the level MZ act 1?
0000E158 6600                       		bne.s	loc_BFC6	; if not, branch
0000E15A 08A8 0007 0028             		bclr	#7,obSubtype(a0)
0000E160 3028 0008                  		move.w	obX(a0),d0
0000E164 0C40 0A20                  		cmpi.w	#$A20,d0
0000E168 6500                       		bcs.s	loc_BFC6
0000E16A 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000E16E 6400                       		bcc.s	loc_BFC6
0000E170 3038 F7A4                  		move.w	(v_obj31ypos).w,d0
0000E174 0440 001C                  		subi.w	#$1C,d0
0000E178 3140 000C                  		move.w	d0,obY(a0)
0000E17C 08F8 0007 F7A4             		bset	#7,(v_obj31ypos).w
0000E182 08E8 0007 0028             		bset	#7,obSubtype(a0)
0000E188                            
0000E188                            	loc_BFC6:
0000E1A4 6000 0000                  		bra.w	DisplaySprite
0000E1A8                            ; ===========================================================================
0000E1A8                            
0000E1A8                            loc_ppppp:
0000E1C4 3168 0034 0008             		move.w	$34(a0),obX(a0)
0000E1CA 3168 0036 000C             		move.w	$36(a0),obY(a0)
0000E1D0 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000E1D6 6000                       		bra.s	loc_C02C
0000E1D8                            ; ===========================================================================
0000E1D8                            
0000E1D8                            loc_C016:
0000E1D8 45F8 FC00                  		lea	(v_objstate).w,a2
0000E1DC 7000                       		moveq	#0,d0
0000E1DE 1028 0023                  		move.b	obRespawnNo(a0),d0
0000E1E2 6700                       		beq.s	loc_C028
0000E1E4 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000E1EA                            
0000E1EA                            loc_C028:
0000E1EA 6000 0000                  		bra.w	DeleteObject
0000E1EE                            ; ===========================================================================
0000E1EE                            
0000E1EE                            loc_C02C:	; Routine 4
0000E1EE 6100 0000                  		bsr.w	ChkPartiallyVisible
0000E1F2 6700                       		beq.s	locret_C044
0000E1F4 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000E1FA 4228 0032                  		clr.b	$32(a0)
0000E1FE 4268 0010                  		clr.w	obVelX(a0)
0000E202 4268 0012                  		clr.w	obVelY(a0)
0000E206                            
0000E206                            locret_C044:
0000E206 4E75                       		rts	
0000E208                            ; ===========================================================================
0000E208                            
0000E208                            loc_C046:
0000E208 3F28 0008                  		move.w	obX(a0),-(sp)
0000E20C 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0000E212 6400                       		bcc.s	loc_C056
0000E214 6100 0000                  		bsr.w	SpeedToPos
0000E218                            
0000E218                            loc_C056:
0000E218 0828 0001 0022             		btst	#1,obStatus(a0)
0000E21E 6700                       		beq.s	loc_C0A0
0000E220 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E226 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E22C 4A41                       		tst.w	d1
0000E22E 6A00 0000                  		bpl.w	loc_C09E
0000E232 D368 000C                  		add.w	d1,obY(a0)
0000E236 4268 0012                  		clr.w	obVelY(a0)
0000E23A 08A8 0001 0022             		bclr	#1,obStatus(a0)
0000E240 3011                       		move.w	(a1),d0
0000E242 0240 03FF                  		andi.w	#$3FF,d0
0000E246 0C40 016A                  		cmpi.w	#$16A,d0
0000E24A 6500                       		bcs.s	loc_C09E
0000E24C 3028 0030                  		move.w	$30(a0),d0
0000E250 E640                       		asr.w	#3,d0
0000E252 3140 0010                  		move.w	d0,obVelX(a0)
0000E256 117C 0001 0032             		move.b	#1,$32(a0)
0000E25C 4268 000E                  		clr.w	$E(a0)
0000E260                            
0000E260                            loc_C09E:
0000E260 6000                       		bra.s	loc_C0E6
0000E262                            ; ===========================================================================
0000E262                            
0000E262                            loc_C0A0:
0000E262 4A68 0010                  		tst.w	obVelX(a0)
0000E266 6700 0000                  		beq.w	loc_C0D6
0000E26A 6B00                       		bmi.s	loc_C0BC
0000E26C 7600                       		moveq	#0,d3
0000E26E 1628 0014                  		move.b	obActWid(a0),d3
0000E272 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E278 4A41                       		tst.w	d1		; has block touched a wall?
0000E27A 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000E27C 6000                       		bra.s	loc_C0E6
0000E27E                            ; ===========================================================================
0000E27E                            
0000E27E                            loc_C0BC:
0000E27E 7600                       		moveq	#0,d3
0000E280 1628 0014                  		move.b	obActWid(a0),d3
0000E284 4643                       		not.w	d3
0000E286 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E28C 4A41                       		tst.w	d1		; has block touched a wall?
0000E28E 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000E290 6000                       		bra.s	loc_C0E6
0000E292                            ; ===========================================================================
0000E292                            
0000E292                            PushB_StopPush:
0000E292 4268 0010                  		clr.w	obVelX(a0)		; stop block moving
0000E296 6000                       		bra.s	loc_C0E6
0000E298                            ; ===========================================================================
0000E298                            
0000E298                            loc_C0D6:
0000E298 06A8 0000 2001 000C        		addi.l	#$2001,obY(a0)
0000E2A0 0C28 00A0 000F             		cmpi.b	#$A0,obY+3(a0)
0000E2A6 6400                       		bcc.s	loc_C104
0000E2A8                            
0000E2A8                            loc_C0E6:
0000E2A8 7200                       		moveq	#0,d1
0000E2AA 1228 0014                  		move.b	obActWid(a0),d1
0000E2AE 0641 000B                  		addi.w	#$B,d1
0000E2B2 343C 0010                  		move.w	#$10,d2
0000E2B6 363C 0011                  		move.w	#$11,d3
0000E2BA 381F                       		move.w	(sp)+,d4
0000E2BC 6100 0000                  		bsr.w	loc_C186
0000E2C0 6100                       		bsr.s	PushB_ChkLava
0000E2C2 6000 FEC4                  		bra.w	loc_BFC6
0000E2C6                            ; ===========================================================================
0000E2C6                            
0000E2C6                            loc_C104:
0000E2C6 381F                       		move.w	(sp)+,d4
0000E2C8 43F8 D000                  		lea	(v_player).w,a1
0000E2CC 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000E2D2 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000E2D8 6000 FECE                  		bra.w	loc_ppppp
0000E2DC                            ; ===========================================================================
0000E2DC                            
0000E2DC                            PushB_ChkLava:
0000E2DC 0C78 0201 FE10             		cmpi.w	#(id_MZ<<8)+1,(v_zone).w ; is the level MZ act 2?
0000E2E2 6600                       		bne.s	PushB_ChkLava2	; if not, branch
0000E2E4 343C FFE0                  		move.w	#-$20,d2
0000E2E8 0C68 0DD0 0008             		cmpi.w	#$DD0,obX(a0)
0000E2EE 6700                       		beq.s	PushB_LoadLava
0000E2F0 0C68 0CC0 0008             		cmpi.w	#$CC0,obX(a0)
0000E2F6 6700                       		beq.s	PushB_LoadLava
0000E2F8 0C68 0BA0 0008             		cmpi.w	#$BA0,obX(a0)
0000E2FE 6700                       		beq.s	PushB_LoadLava
0000E300 4E75                       		rts	
0000E302                            ; ===========================================================================
0000E302                            
0000E302                            PushB_ChkLava2:
0000E302 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is the level MZ act 3?
0000E308 6600                       		bne.s	PushB_NoLava	; if not, branch
0000E30A 343C 0020                  		move.w	#$20,d2
0000E30E 0C68 0560 0008             		cmpi.w	#$560,obX(a0)
0000E314 6700                       		beq.s	PushB_LoadLava
0000E316 0C68 05C0 0008             		cmpi.w	#$5C0,obX(a0)
0000E31C 6700                       		beq.s	PushB_LoadLava
0000E31E                            
0000E31E                            PushB_NoLava:
0000E31E 4E75                       		rts	
0000E320                            ; ===========================================================================
0000E320                            
0000E320                            PushB_LoadLava:
0000E320 6100 0000                  		bsr.w	FindFreeObj
0000E324 6600                       		bne.s	locret_C184
0000E326 12BC 0000                  		move.b	#id_GeyserMaker,0(a1) ; load lava geyser object
0000E32A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000E330 D569 0008                  		add.w	d2,obX(a1)
0000E334 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000E33A 0669 0010 000C             		addi.w	#$10,obY(a1)
0000E340 2348 003C                  		move.l	a0,$3C(a1)
0000E344                            
0000E344                            locret_C184:
0000E344 4E75                       		rts	
0000E346                            ; ===========================================================================
0000E346                            
0000E346                            loc_C186:
0000E346 1028 0025                  		move.b	ob2ndRout(a0),d0
0000E34A 6700 0000                  		beq.w	loc_C218
0000E34E 5500                       		subq.b	#2,d0
0000E350 6600                       		bne.s	loc_C1AA
0000E352 6100 AAA8                  		bsr.w	ExitPlatform
0000E356 0829 0003 0022             		btst	#3,obStatus(a1)
0000E35C 6600                       		bne.s	loc_C1A4
0000E35E 4228 0025                  		clr.b	ob2ndRout(a0)
0000E362 4E75                       		rts	
0000E364                            ; ===========================================================================
0000E364                            
0000E364                            loc_C1A4:
0000E364 3404                       		move.w	d4,d2
0000E366 6000 AFF2                  		bra.w	MvSonicOnPtfm
0000E36A                            ; ===========================================================================
0000E36A                            
0000E36A                            loc_C1AA:
0000E36A 5500                       		subq.b	#2,d0
0000E36C 6600                       		bne.s	loc_C1F2
0000E36E 6100 0000                  		bsr.w	SpeedToPos
0000E372 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E378 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E37E 4A41                       		tst.w	d1
0000E380 6A00 0000                  		bpl.w	locret_C1F0
0000E384 D368 000C                  		add.w	d1,obY(a0)
0000E388 4268 0012                  		clr.w	obVelY(a0)
0000E38C 4228 0025                  		clr.b	ob2ndRout(a0)
0000E390 3011                       		move.w	(a1),d0
0000E392 0240 03FF                  		andi.w	#$3FF,d0
0000E396 0C40 016A                  		cmpi.w	#$16A,d0
0000E39A 6500                       		bcs.s	locret_C1F0
0000E39C 3028 0030                  		move.w	$30(a0),d0
0000E3A0 E640                       		asr.w	#3,d0
0000E3A2 3140 0010                  		move.w	d0,obVelX(a0)
0000E3A6 117C 0001 0032             		move.b	#1,$32(a0)
0000E3AC 4268 000E                  		clr.w	obY+2(a0)
0000E3B0                            
0000E3B0                            locret_C1F0:
0000E3B0 4E75                       		rts	
0000E3B2                            ; ===========================================================================
0000E3B2                            
0000E3B2                            loc_C1F2:
0000E3B2 6100 0000                  		bsr.w	SpeedToPos
0000E3B6 3028 0008                  		move.w	obX(a0),d0
0000E3BA 0240 000C                  		andi.w	#$C,d0
0000E3BE 6600 0000                  		bne.w	locret_C2E4
0000E3C2 0268 FFF0 0008             		andi.w	#-$10,obX(a0)
0000E3C8 3168 0010 0030             		move.w	obVelX(a0),$30(a0)
0000E3CE 4268 0010                  		clr.w	obVelX(a0)
0000E3D2 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000E3D6 4E75                       		rts	
0000E3D8                            ; ===========================================================================
0000E3D8                            
0000E3D8                            loc_C218:
0000E3D8 6100 0000                  		bsr.w	Solid_ChkEnter
0000E3DC 4A44                       		tst.w	d4
0000E3DE 6700 0000                  		beq.w	locret_C2E4
0000E3E2 6B00 0000                  		bmi.w	locret_C2E4
0000E3E6 4A28 0032                  		tst.b	$32(a0)
0000E3EA 6700                       		beq.s	loc_C230
0000E3EC 6000 0000                  		bra.w	locret_C2E4
0000E3F0                            ; ===========================================================================
0000E3F0                            
0000E3F0                            loc_C230:
0000E3F0 4A40                       		tst.w	d0
0000E3F2 6700 0000                  		beq.w	locret_C2E4
0000E3F6 6B00                       		bmi.s	loc_C268
0000E3F8 0829 0000 0022             		btst	#0,obStatus(a1)
0000E3FE 6600 0000                  		bne.w	locret_C2E4
0000E402 3F00                       		move.w	d0,-(sp)
0000E404 7600                       		moveq	#0,d3
0000E406 1628 0014                  		move.b	obActWid(a0),d3
0000E40A 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E410 301F                       		move.w	(sp)+,d0
0000E412 4A41                       		tst.w	d1
0000E414 6B00 0000                  		bmi.w	locret_C2E4
0000E418 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000E420 7001                       		moveq	#1,d0
0000E422 323C 0040                  		move.w	#$40,d1
0000E426 6000                       		bra.s	loc_C294
0000E428                            ; ===========================================================================
0000E428                            
0000E428                            loc_C268:
0000E428 0829 0000 0022             		btst	#0,obStatus(a1)
0000E42E 6700                       		beq.s	locret_C2E4
0000E430 3F00                       		move.w	d0,-(sp)
0000E432 7600                       		moveq	#0,d3
0000E434 1628 0014                  		move.b	obActWid(a0),d3
0000E438 4643                       		not.w	d3
0000E43A 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E440 301F                       		move.w	(sp)+,d0
0000E442 4A41                       		tst.w	d1
0000E444 6B00                       		bmi.s	locret_C2E4
0000E446 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
0000E44E 70FF                       		moveq	#-1,d0
0000E450 323C FFC0                  		move.w	#-$40,d1
0000E454                            
0000E454                            loc_C294:
0000E454 43F8 D000                  		lea	(v_player).w,a1
0000E458 D169 0008                  		add.w	d0,obX(a1)
0000E45C 3341 0020                  		move.w	d1,obInertia(a1)
0000E460 337C 0000 0010             		move.w	#0,obVelX(a1)
0000E466 3F00                       		move.w	d0,-(sp)
0000E472 301F                       		move.w	(sp)+,d0
0000E474 4A28 0028                  		tst.b	obSubtype(a0)
0000E478 6B00                       		bmi.s	locret_C2E4
0000E47A 3F00                       		move.w	d0,-(sp)
0000E47C 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E482 301F                       		move.w	(sp)+,d0
0000E484 0C41 0004                  		cmpi.w	#4,d1
0000E488 6F00                       		ble.s	loc_C2E0
0000E48A 317C 0400 0010             		move.w	#$400,obVelX(a0)
0000E490 4A40                       		tst.w	d0
0000E492 6A00                       		bpl.s	loc_C2D8
0000E494 4468 0010                  		neg.w	obVelX(a0)
0000E498                            
0000E498                            loc_C2D8:
0000E498 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0000E49E 6000                       		bra.s	locret_C2E4
0000E4A0                            ; ===========================================================================
0000E4A0                            
0000E4A0                            loc_C2E0:
0000E4A0 D368 000C                  		add.w	d1,obY(a0)
0000E4A4                            
0000E4A4                            locret_C2E4:
0000E4A4 4E75                       		rts	
0000E4A4 4E75                       		rts	
0000E4A6                            Map_Push:	include	"_maps\Pushable Blocks.asm"
0000E4A6                            ; ---------------------------------------------------------------------------
0000E4A6                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000E4A6                            ; ---------------------------------------------------------------------------
0000E4A6                            Map_Push_internal:
0000E4A6 0000                       		dc.w @single-Map_Push_internal
0000E4A8 0000                       		dc.w @four-Map_Push_internal
0000E4AA 01                         @single:	dc.b 1
0000E4AB F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000E4B0 04                         @four:		dc.b 4
0000E4B1 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000E4B6 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000E4BB F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000E4C0 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000E4C6 00                         		even
0000E4C6 00                         		even
0000E4C6                            
0000E4C6                            		include	"_incObj\34 Title Cards.asm"
0000E4C6                            ; ---------------------------------------------------------------------------
0000E4C6                            ; Object 34 - zone title cards
0000E4C6                            ; ---------------------------------------------------------------------------
0000E4C6                            
0000E4C6                            TitleCard:
0000E4C6 7000                       		moveq	#0,d0
0000E4C8 1028 0024                  		move.b	obRoutine(a0),d0
0000E4CC 323B 0000                  		move.w	Card_Index(pc,d0.w),d1
0000E4D0 4EFB 1000                  		jmp	Card_Index(pc,d1.w)
0000E4D4                            ; ===========================================================================
0000E4D4 0000                       Card_Index:	dc.w Card_CheckSBZ3-Card_Index
0000E4D6 0000                       		dc.w Card_ChkPos-Card_Index
0000E4D8 0000                       		dc.w Card_Wait-Card_Index
0000E4DA 0000                       		dc.w Card_Wait-Card_Index
0000E4DC                            
0000E4DC =00000030                  card_mainX:	equ $30		; position for card to display on
0000E4DC =00000032                  card_finalX:	equ $32		; position for card to finish on
0000E4DC                            ; ===========================================================================
0000E4DC                            
0000E4DC                            Card_CheckSBZ3:	; Routine 0
0000E4DC 2248                       		movea.l	a0,a1
0000E4DE 7000                       		moveq	#0,d0
0000E4E0 1038 FE10                  		move.b	(v_zone).w,d0
0000E4E4 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; check if level is SBZ 3
0000E4EA 6600                       		bne.s	Card_CheckFZ
0000E4EC 7001                       		moveq	#1,d0		; load title card number 6 (FZ)
0000E4EE                            
0000E4EE                            	Card_CheckFZ:
0000E4EE 3400                       		move.w	d0,d2
0000E4F0 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; check if level is FZ
0000E4F6 6600                       		bne.s	Card_LoadConfig
0000E4F8 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000E4FA 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000E4FC                            
0000E4FC                            	Card_LoadConfig:
0000E4FC 47F9 0000 0000             		lea	(Card_ConData).l,a3
0000E502 E948                       		lsl.w	#4,d0
0000E504 D6C0                       		adda.w	d0,a3
0000E506 45F9 0000 0000             		lea	(Card_ItemData).l,a2
0000E50C 7203                       		moveq	#3,d1
0000E50E                            
0000E50E                            Card_Loop:
0000E50E 12BC 0000                  		move.b	#id_TitleCard,0(a1)
0000E512 3353 0008                  		move.w	(a3),obX(a1)	; load start x-position
0000E516 335B 0032                  		move.w	(a3)+,card_finalX(a1) ; load finish x-position (same as start)
0000E51A 335B 0030                  		move.w	(a3)+,card_mainX(a1) ; load main x-position
0000E51E 335A 000A                  		move.w	(a2)+,obScreenY(a1)
0000E522 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E526 101A                       		move.b	(a2)+,d0
0000E528 6600                       		bne.s	Card_ActNumber
0000E52A 1002                       		move.b	d2,d0
0000E52C                            
0000E52C                            	Card_ActNumber:
0000E52C 0C00 0007                  		cmpi.b	#7,d0
0000E530 6600                       		bne.s	Card_MakeSprite
0000E532 D038 FE11                  		add.b	(v_act).w,d0
0000E536 0C38 0003 FE11             		cmpi.b	#3,(v_act).w
0000E53C 6600                       		bne.s	Card_MakeSprite
0000E53E 5300                       		subq.b	#1,d0
0000E540                            
0000E540                            	Card_MakeSprite:
0000E540 1340 001A                  		move.b	d0,obFrame(a1)	; display frame	number d0
0000E544 237C 0000 0000 0004        		move.l	#Map_Card,obMap(a1)
0000E54C 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E552 137C 0078 0014             		move.b	#$78,obActWid(a1)
0000E558 137C 0000 0001             		move.b	#0,obRender(a1)
0000E55E 337C 0000 0018             		move.w	#0,obPriority(a1)
0000E564 337C 003C 001E             		move.w	#60,obTimeFrame(a1) ; set time delay to 1 second
0000E56A 43E9 0040                  		lea	$40(a1),a1	; next object
0000E56E 51C9 FF9E                  		dbf	d1,Card_Loop	; repeat sequence another 3 times
0000E572                            
0000E572                            Card_ChkPos:	; Routine 2
0000E572 7210                       		moveq	#$10,d1		; set horizontal speed
0000E574 3028 0030                  		move.w	card_mainX(a0),d0
0000E578 B068 0008                  		cmp.w	obX(a0),d0	; has item reached the target position?
0000E57C 6700                       		beq.s	Card_NoMove	; if yes, branch
0000E57E 6C00                       		bge.s	Card_Move
0000E580 4441                       		neg.w	d1
0000E582                            
0000E582                            Card_Move:
0000E582 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E586                            
0000E586                            Card_NoMove:
0000E586 3028 0008                  		move.w	obX(a0),d0
0000E58A 6B00                       		bmi.s	locret_C3D8
0000E58C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E590 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000E592 6000 0000                  		bra.w	DisplaySprite
0000E596                            ; ===========================================================================
0000E596                            
0000E596                            locret_C3D8:
0000E596 4E75                       		rts	
0000E598                            ; ===========================================================================
0000E598                            
0000E598                            Card_Wait:	; Routine 4/6
0000E598 4A68 001E                  		tst.w	obTimeFrame(a0)	; is time remaining zero?
0000E59C 6700                       		beq.s	Card_ChkPos2	; if yes, branch
0000E59E 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time
0000E5A2 6000 0000                  		bra.w	DisplaySprite
0000E5A6                            ; ===========================================================================
0000E5A6                            
0000E5A6                            Card_ChkPos2:
0000E5A6 4A28 0001                  		tst.b	obRender(a0)
0000E5AA 6A00                       		bpl.s	Card_ChangeArt
0000E5AC 7220                       		moveq	#$20,d1
0000E5AE 3028 0032                  		move.w	card_finalX(a0),d0
0000E5B2 B068 0008                  		cmp.w	obX(a0),d0	; has item reached the finish position?
0000E5B6 6700                       		beq.s	Card_ChangeArt	; if yes, branch
0000E5B8 6C00                       		bge.s	Card_Move2
0000E5BA 4441                       		neg.w	d1
0000E5BC                            
0000E5BC                            Card_Move2:
0000E5BC D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E5C0 3028 0008                  		move.w	obX(a0),d0
0000E5C4 6B00                       		bmi.s	locret_C412
0000E5C6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E5CA 6400                       		bcc.s	locret_C412	; if yes, branch
0000E5CC 6000 0000                  		bra.w	DisplaySprite
0000E5D0                            ; ===========================================================================
0000E5D0                            
0000E5D0                            locret_C412:
0000E5D0 4E75                       		rts	
0000E5D2                            ; ===========================================================================
0000E5D2                            
0000E5D2                            Card_ChangeArt:
0000E5D2 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000E5D8 6600                       		bne.s	Card_Delete
0000E5DA 7000                       		moveq	#plcid_Explode,d0
0000E5DC 4EB9 0000 1798             		jsr	(AddPLC).l	; load explosion patterns
0000E5E2 7000                       		moveq	#0,d0
0000E5E4 1038 FE10                  		move.b	(v_zone).w,d0
0000E5E8 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
0000E5EC 4EB9 0000 1798             		jsr	(AddPLC).l	; load animal patterns
0000E5F2                            
0000E5F2                            Card_Delete:
0000E5F2 6000 0000                  		bra.w	DeleteObject
0000E5F6                            ; ===========================================================================
0000E5F6 00D0                       Card_ItemData:	dc.w $D0	; y-axis position
0000E5F8 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000E5FA 00E4                       		dc.w $E4
0000E5FC 0206                       		dc.b 2,	6
0000E5FE 00EA                       		dc.w $EA
0000E600 0207                       		dc.b 2,	7
0000E602 00E0                       		dc.w $E0
0000E604 020A                       		dc.b 2,	$A
0000E606                            ; ---------------------------------------------------------------------------
0000E606                            ; Title	card configuration data
0000E606                            ; Format:
0000E606                            ; 4 bytes per item (YYYY XXXX)
0000E606                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000E606                            ; ---------------------------------------------------------------------------
0000E606 0000 0120 FEFC 013C 0414+  Card_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000E616 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000E626 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000E636 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000E646 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000E656 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000E666 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000E676                            ; ===========================================================================
0000E676                            ; ===========================================================================
0000E676                            		include	"_incObj\39 Game Over.asm"
0000E676                            ; ---------------------------------------------------------------------------
0000E676                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000E676                            ; ---------------------------------------------------------------------------
0000E676                            
0000E676                            GameOverCard:
0000E676 7000                       		moveq	#0,d0
0000E678 1028 0024                  		move.b	obRoutine(a0),d0
0000E67C 323B 0000                  		move.w	Over_Index(pc,d0.w),d1
0000E680 4EFB 1000                  		jmp	Over_Index(pc,d1.w)
0000E684                            ; ===========================================================================
0000E684 0000                       Over_Index:	dc.w Over_ChkPLC-Over_Index
0000E686 0000                       		dc.w Over_Move-Over_Index
0000E688 0000                       		dc.w Over_Wait-Over_Index
0000E68A                            ; ===========================================================================
0000E68A                            
0000E68A                            Over_ChkPLC:	; Routine 0
0000E68A 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E68E 6700                       		beq.s	Over_Main	; if yes, branch
0000E690 4E75                       		rts	
0000E692                            ; ===========================================================================
0000E692                            
0000E692                            Over_Main:
0000E692 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E696 317C 0050 0008             		move.w	#$50,obX(a0)	; set x-position
0000E69C 0828 0000 001A             		btst	#0,obFrame(a0)	; is the object	"OVER"?
0000E6A2 6700                       		beq.s	Over_1stWord	; if not, branch
0000E6A4 317C 01F0 0008             		move.w	#$1F0,obX(a0)	; set x-position for "OVER"
0000E6AA                            
0000E6AA                            	Over_1stWord:
0000E6AA 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0000E6B0 217C 0000 0000 0004        		move.l	#Map_Over,obMap(a0)
0000E6B8 317C 855E 0002             		move.w	#$855E,obGfx(a0)
0000E6BE 117C 0000 0001             		move.b	#0,obRender(a0)
0000E6C4 317C 0000 0018             		move.w	#0,obPriority(a0)
0000E6CA                            
0000E6CA                            Over_Move:	; Routine 2
0000E6CA 7210                       		moveq	#$10,d1		; set horizontal speed
0000E6CC 0C68 0120 0008             		cmpi.w	#$120,obX(a0)	; has item reached its target position?
0000E6D2 6700                       		beq.s	Over_SetWait	; if yes, branch
0000E6D4 6500                       		bcs.s	Over_UpdatePos
0000E6D6 4441                       		neg.w	d1
0000E6D8                            
0000E6D8                            	Over_UpdatePos:
0000E6D8 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E6DC 6000 0000                  		bra.w	DisplaySprite
0000E6E0                            ; ===========================================================================
0000E6E0                            
0000E6E0                            Over_SetWait:
0000E6E0 317C 02D0 001E             		move.w	#720,obTimeFrame(a0) ; set time delay to 12 seconds
0000E6E6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E6EA 4E75                       		rts	
0000E6EC                            ; ===========================================================================
0000E6EC                            
0000E6EC                            Over_Wait:	; Routine 4
0000E6EC 1038 F605                  		move.b	(v_jpadpress1).w,d0
0000E6F0 0200 0070                  		andi.b	#btnABC,d0	; is button A, B or C pressed?
0000E6F4 6600                       		bne.s	Over_ChgMode	; if yes, branch
0000E6F6 0828 0000 001A             		btst	#0,obFrame(a0)
0000E6FC 6600                       		bne.s	Over_Display
0000E6FE 4A68 001E                  		tst.w	obTimeFrame(a0)	; has time delay reached zero?
0000E702 6700                       		beq.s	Over_ChgMode	; if yes, branch
0000E704 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E708 6000 0000                  		bra.w	DisplaySprite
0000E70C                            ; ===========================================================================
0000E70C                            
0000E70C                            Over_ChgMode:
0000E70C 4A38 FE1A                  		tst.b	(f_timeover).w	; is time over flag set?
0000E710 6600                       		bne.s	Over_ResetLvl	; if yes, branch
0000E712 11FC 0000 F600             		move.b	#id_Continue,(v_gamemode).w ; set mode to $14 (continue screen)
0000E718 4A38 FE18                  		tst.b	(v_continues).w	; do you have any continues?
0000E71C 6600                       		bne.s	Over_Display	; if yes, branch
0000E71E 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set mode to 0 (Sega screen)
0000E724 6000                       		bra.s	Over_Display
0000E726                            ; ===========================================================================
0000E726                            
0000E726                            Over_ResetLvl:
0000E726 42B8 FE38                  			clr.l	(v_lamp_time).w
0000E72A 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E730                            
0000E730                            Over_Display:
0000E730 6000 0000                  		bra.w	DisplaySprite
0000E730 6000 0000                  		bra.w	DisplaySprite
0000E734                            		include	"_incObj\3A Got Through Card.asm"
0000E734                            ; ---------------------------------------------------------------------------
0000E734                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000E734                            ; ---------------------------------------------------------------------------
0000E734                            
0000E734                            GotThroughCard:
0000E734 7000                       		moveq	#0,d0
0000E736 1028 0024                  		move.b	obRoutine(a0),d0
0000E73A 323B 0000                  		move.w	Got_Index(pc,d0.w),d1
0000E73E 4EFB 1000                  		jmp	Got_Index(pc,d1.w)
0000E742                            ; ===========================================================================
0000E742 0000                       Got_Index:	dc.w Got_ChkPLC-Got_Index
0000E744 0000                       		dc.w Got_Move-Got_Index
0000E746 0000                       		dc.w Got_Wait-Got_Index
0000E748 0000                       		dc.w Got_TimeBonus-Got_Index
0000E74A 0000                       		dc.w Got_Wait-Got_Index
0000E74C 0000                       		dc.w Got_NextLevel-Got_Index
0000E74E 0000                       		dc.w Got_Wait-Got_Index
0000E750 0000                       		dc.w Got_Move2-Got_Index
0000E752 0000                       		dc.w loc_C766-Got_Index
0000E754                            
0000E754 =00000030                  got_mainX:	equ $30		; position for card to display on
0000E754 =00000032                  got_finalX:	equ $32		; position for card to finish on
0000E754                            ; ===========================================================================
0000E754                            
0000E754                            Got_ChkPLC:	; Routine 0
0000E754 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E758 6700                       		beq.s	Got_Main	; if yes, branch
0000E75A 4E75                       		rts	
0000E75C                            ; ===========================================================================
0000E75C                            
0000E75C                            Got_Main:
0000E75C 2248                       		movea.l	a0,a1
0000E75E 45F9 0000 0000             		lea	(Got_Config).l,a2
0000E764 7206                       		moveq	#6,d1
0000E766                            
0000E766                            Got_Loop:
0000E766 12BC 0000                  		move.b	#id_GotThroughCard,0(a1)
0000E76A 3352 0008                  		move.w	(a2),obX(a1)	; load start x-position
0000E76E 335A 0032                  		move.w	(a2)+,got_finalX(a1) ; load finish x-position (same as start)
0000E772 335A 0030                  		move.w	(a2)+,got_mainX(a1) ; load main x-position
0000E776 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E77A 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E77E 101A                       		move.b	(a2)+,d0
0000E780 0C00 0006                  		cmpi.b	#6,d0
0000E784 6600                       		bne.s	loc_C5CA
0000E786 D038 FE11                  		add.b	(v_act).w,d0	; add act number to frame number
0000E78A                            
0000E78A                            	loc_C5CA:
0000E78A 1340 001A                  		move.b	d0,obFrame(a1)
0000E78E 237C 0000 0000 0004        		move.l	#Map_Got,obMap(a1)
0000E796 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E79C 137C 0000 0001             		move.b	#0,obRender(a1)
0000E7A2 43E9 0040                  		lea	$40(a1),a1
0000E7A6 51C9 FFBE                  		dbf	d1,Got_Loop	; repeat 6 times
0000E7AA                            
0000E7AA                            Got_Move:	; Routine 2
0000E7AA 7210                       		moveq	#$10,d1		; set horizontal speed
0000E7AC 3028 0030                  		move.w	got_mainX(a0),d0
0000E7B0 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000E7B4 6700                       		beq.s	loc_C61A	; if yes, branch
0000E7B6 6C00                       		bge.s	Got_ChgPos
0000E7B8 4441                       		neg.w	d1
0000E7BA                            
0000E7BA                            	Got_ChgPos:
0000E7BA D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E7BE                            
0000E7BE                            	loc_C5FE:
0000E7BE 3028 0008                  		move.w	obX(a0),d0
0000E7C2 6B00                       		bmi.s	locret_C60E
0000E7C4 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E7C8 6400                       		bcc.s	locret_C60E	; if yes, branch
0000E7CA 6000 0000                  		bra.w	DisplaySprite
0000E7CE                            ; ===========================================================================
0000E7CE                            
0000E7CE                            locret_C60E:
0000E7CE 4E75                       		rts	
0000E7D0                            ; ===========================================================================
0000E7D0                            
0000E7D0                            loc_C610:
0000E7D0 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000E7D6 6000 0000                  		bra.w	Got_Move2
0000E7DA                            ; ===========================================================================
0000E7DA                            
0000E7DA                            loc_C61A:
0000E7DA 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000E7E0 67EE                       		beq.s	loc_C610
0000E7E2 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E7E8 66D4                       		bne.s	loc_C5FE
0000E7EA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E7EE 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E7F4                            		;move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000E7F4                            
0000E7F4                            Got_Wait:	; Routine 4, 8, $C
0000E7F4 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E7F8 6600                       		bne.s	Got_Display
0000E7FA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E7FE                            
0000E7FE                            Got_Display:
0000E7FE 6000 0000                  		bra.w	DisplaySprite
0000E802                            ; ===========================================================================
0000E802                            
0000E802                            Got_TimeBonus:	; Routine 6
0000E802 6100 0000                  		bsr.w	DisplaySprite
0000E806 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set time/ring bonus update flag
0000E80C 7000                       		moveq	#0,d0
0000E80E 4A78 F7D2                  		tst.w	(v_timebonus).w	; is time bonus	= zero?
0000E812 6700                       		beq.s	Got_RingBonus	; if yes, branch
0000E814 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E818 0478 000A F7D2             		subi.w	#10,(v_timebonus).w ; subtract 10 from time bonus
0000E81E                            
0000E81E                            Got_RingBonus:
0000E81E 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000E822 6700                       		beq.s	Got_ChkBonus	; if yes, branch
0000E824 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E828 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000E82E                            
0000E82E                            Got_ChkBonus:
0000E82E 4A40                       		tst.w	d0		; is there any bonus?
0000E830 6600                       		bne.s	Got_AddBonus	; if yes, branch
0000E83C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E840 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w
0000E846 6600                       		bne.s	Got_SetDelay
0000E848 5828 0024                  		addq.b	#4,obRoutine(a0)
0000E84C                            
0000E84C                            Got_SetDelay:
0000E84C 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E852                            
0000E852                            locret_C692:
0000E852 4E75                       		rts	
0000E854                            ; ===========================================================================
0000E854                            
0000E854                            Got_AddBonus:
0000E854 4EB9 0000 0000             		jsr	(AddPoints).l
0000E85A 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E85E 0200 0003                  		andi.b	#3,d0
0000E862 66EE                       		bne.s	locret_C692
0000E86E                            ; ===========================================================================
0000E86E                            
0000E86E                            Got_NextLevel:	; Routine $A
0000E86E 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E874 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E87A 1038 FE10                  		move.b	(v_zone).w,d0
0000E87E 0240 0007                  		andi.w	#7,d0
0000E882 E748                       		lsl.w	#3,d0
0000E884 1238 FE11                  		move.b	(v_act).w,d1
0000E888 0241 0003                  		andi.w	#3,d1
0000E88C D241                       		add.w	d1,d1
0000E88E D041                       		add.w	d1,d0
0000E890 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000E894 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
0000E898 4A40                       		tst.w	d0
0000E89A 6600                       		bne.s	Got_ChkSS
0000E89C 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
0000E8A2 6000                       		bra.s	Got_Display2
0000E8A4                            ; ===========================================================================
0000E8A4                            
0000E8A4                            Got_ChkSS:	
0000E8A4 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
0000E8A8                            		;tst.b	(f_emeraldm).w
0000E8A8                            		;beq.s	VBla_08A
0000E8A8                            		;addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0000E8A8                            		;sfx		bgm_Emerald,1,0,0 ;	play emerald music
0000E8A8                            		;bra.s	Got_Display2
0000E8A8 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E8AE                            		
0000E8AE                            ; ===========================================================================
0000E8AE                            
0000E8AE                            VBla_08A:
0000E8AE 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E8B4                            
0000E8B4                            Got_Display2:
0000E8B4 6000 0000                  		bra.w	DisplaySprite
0000E8B8                            ; ===========================================================================
0000E8B8                            ; ---------------------------------------------------------------------------
0000E8B8                            ; Level	order array
0000E8B8                            ; ---------------------------------------------------------------------------
0000E8B8                            LevelOrder:
0000E8B8                            		; Green Hill Zone
0000E8B8 0001                       		dc.b id_GHZ, 1	; Act 2
0000E8BA 0002                       		dc.b id_GHZ, 2	; Act 2
0000E8BC 0400                       		dc.b id_SYZ, 0	; Act 3
0000E8BE 0000                       		dc.b 0, 0
0000E8C0                            
0000E8C0                            		; Labyrinth Zone
0000E8C0 0101                       		dc.b id_LZ, 1	; Act 1
0000E8C2 0102                       		dc.b id_LZ, 2	; Act 2
0000E8C4 0000                       		dc.b id_GHZ, 0 	; Act 3
0000E8C6 0502                       		dc.b id_SBZ, 2	; Scrap Brain Zone Act 3
0000E8C8                            
0000E8C8                            		; Marble Zone
0000E8C8 0201                       		dc.b id_MZ, 1	; Act 1
0000E8CA 0202                       		dc.b id_MZ, 2	; Act 2
0000E8CC 0502                       		dc.b id_SBZ, 2	; Act 3
0000E8CE 0000                       		dc.b 0, 0
0000E8D0                            
0000E8D0                            		; Star Light Zone
0000E8D0 0301                       		dc.b id_SLZ, 1	; Act 1
0000E8D2 0302                       		dc.b id_SLZ, 2	; Act 2
0000E8D4 0500                       		dc.b id_SBZ, 0	; Act 3
0000E8D6 0000                       		dc.b 0, 0
0000E8D8                            
0000E8D8                            		; Spring Yard Zone
0000E8D8 0401                       		dc.b id_SYZ, 1	; Act 1
0000E8DA 0200                       		dc.b id_MZ,  0	; Act 2
0000E8DC 0200                       		dc.b id_MZ,	 0	; Act 3
0000E8DE 0000                       		dc.b 0, 0
0000E8E0                            
0000E8E0                            		; Scrap Brain Zone
0000E8E0 0501                       		dc.b id_SBZ, 1	; Act 1
0000E8E2 0103                       		dc.b id_LZ, 3	; Act 2
0000E8E4 0000                       		dc.b 0, 0	; Final Zone
0000E8E6 0000                       		dc.b 0, 0
0000E8E8                            		even
0000E8E8                            ; ===========================================================================
0000E8E8                            
0000E8E8                            Got_Move2:	; Routine $E
0000E8E8 7220                       		moveq	#$20,d1		; set horizontal speed
0000E8EA 3028 0032                  		move.w	got_finalX(a0),d0
0000E8EE B068 0008                  		cmp.w	obX(a0),d0	; has item reached its finish position?
0000E8F2 6700                       		beq.s	Got_SBZ2	; if yes, branch
0000E8F4 6C00                       		bge.s	Got_ChgPos2
0000E8F6 4441                       		neg.w	d1
0000E8F8                            
0000E8F8                            	Got_ChgPos2:
0000E8F8 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E8FC 3028 0008                  		move.w	obX(a0),d0
0000E900 6B00                       		bmi.s	locret_C748
0000E902 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E906 6400                       		bcc.s	locret_C748	; if yes, branch
0000E908 6000 0000                  		bra.w	DisplaySprite
0000E90C                            ; ===========================================================================
0000E90C                            
0000E90C                            locret_C748:
0000E90C 4E75                       		rts	
0000E90E                            ; ===========================================================================
0000E90E                            
0000E90E                            Got_SBZ2:
0000E90E 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E914 6600 0000                  		bne.w	DeleteObject
0000E918 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E91C 4238 F7CC                  		clr.b	(f_lockctrl).w	; unlock controls
0000E920 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E926                            ; ===========================================================================
0000E926                            
0000E926                            loc_C766:	; Routine $10
0000E926 5478 F72A                  		addq.w	#2,(v_limitright2).w
0000E92A 0C78 2100 F72A             		cmpi.w	#$2100,(v_limitright2).w
0000E930 6700 0000                  		beq.w	DeleteObject
0000E934 4E75                       		rts	
0000E936                            ; ===========================================================================
0000E936                            		;    x-start,	x-main,	y-main,
0000E936                            		;				routine, frame number
0000E936                            
0000E936 0004 0124 00BC             Got_Config:	dc.w 4,		$124,	$BC			; "SONIC HAS"
0000E93C 0200                       		dc.b 				2,	0
0000E93E                            
0000E93E FEE0 0120 00D0             		dc.w -$120,	$120,	$D0			; "PASSED"
0000E944 0201                       		dc.b 				2,	1
0000E946                            
0000E946 040C 014C 00D6             		dc.w $40C,	$14C,	$D6			; "ACT" 1/2/3
0000E94C 0206                       		dc.b 				2,	6
0000E94E                            
0000E94E 0520 0120 0112             		dc.w $520,	$120,	$112			; score
0000E954 0202                       		dc.b 				2,	2
0000E956                            
0000E956 0540 0120 00F2             		dc.w $540,	$120,	$F2			; time bonus
0000E95C 0203                       		dc.b 				2,	3
0000E95E                            
0000E95E 0560 0120 0102             		dc.w $560,	$120,	$102			; ring bonus
0000E964 0204                       		dc.b 				2,	4
0000E966                            
0000E966 020C 014C 00CC             		dc.w $20C,	$14C,	$CC			; oval
0000E96C 0205                       		dc.b 				2,	5
0000E96C 0205                       		dc.b 				2,	5
0000E96E                            		include	"_incObj\7E Special Stage Results.asm"
0000E96E                            ; ---------------------------------------------------------------------------
0000E96E                            ; Object 7E - special stage results screen
0000E96E                            ; ---------------------------------------------------------------------------
0000E96E                            
0000E96E                            SSResult:
0000E96E 7000                       		moveq	#0,d0
0000E970 1028 0024                  		move.b	obRoutine(a0),d0
0000E974 323B 0000                  		move.w	SSR_Index(pc,d0.w),d1
0000E978 4EFB 1000                  		jmp	SSR_Index(pc,d1.w)
0000E97C                            ; ===========================================================================
0000E97C 0000                       SSR_Index:	dc.w SSR_ChkPLC-SSR_Index
0000E97E 0000                       		dc.w SSR_Move-SSR_Index
0000E980 0000                       		dc.w SSR_Wait-SSR_Index
0000E982 0000                       		dc.w SSR_RingBonus-SSR_Index
0000E984 0000                       		dc.w SSR_Wait-SSR_Index
0000E986 0000                       		dc.w SSR_Exit-SSR_Index
0000E988 0000                       		dc.w SSR_Wait-SSR_Index
0000E98A 0000                       		dc.w SSR_Continue-SSR_Index
0000E98C 0000                       		dc.w SSR_Wait-SSR_Index
0000E98E 0000                       		dc.w SSR_Exit-SSR_Index
0000E990 0000                       		dc.w loc_C91A-SSR_Index
0000E992                            
0000E992 =00000030                  ssr_mainX:	equ $30		; position for card to display on
0000E992                            ; ===========================================================================
0000E992                            
0000E992                            SSR_ChkPLC:	; Routine 0
0000E992 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E996 6700                       		beq.s	SSR_Main	; if yes, branch
0000E998 4E75                       		rts	
0000E99A                            ; ===========================================================================
0000E99A                            
0000E99A                            SSR_Main:
0000E99A 2248                       		movea.l	a0,a1
0000E99C 45F9 0000 0000             		lea	(SSR_Config).l,a2
0000E9A2 7203                       		moveq	#3,d1
0000E9A4 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have 50 or more rings?
0000E9AA 6500                       		bcs.s	SSR_Loop	; if no, branch
0000E9AC 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000E9AE                            
0000E9AE                            	SSR_Loop:
0000E9AE 12BC 0000                  		move.b	#id_SSResult,0(a1)
0000E9B2 335A 0008                  		move.w	(a2)+,obX(a1)	; load start x-position
0000E9B6 335A 0030                  		move.w	(a2)+,ssr_mainX(a1) ; load main x-position
0000E9BA 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E9BE 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E9C2 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000E9C6 237C 0000 0000 0004        		move.l	#Map_SSR,obMap(a1)
0000E9CE 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E9D4 137C 0000 0001             		move.b	#0,obRender(a1)
0000E9DA 43E9 0040                  		lea	$40(a1),a1
0000E9DE 51C9 FFCE                  		dbf	d1,SSR_Loop	; repeat sequence 3 or 4 times
0000E9E2                            
0000E9E2 7007                       		moveq	#7,d0
0000E9E4 1238 FE57                  		move.b	(v_emeralds).w,d1
0000E9E8 6700                       		beq.s	loc_C842
0000E9EA 7000                       		moveq	#0,d0
0000E9EC 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000E9F0 6600                       		bne.s	loc_C842	; if not, branch
0000E9F2 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000E9F4 317C 0018 0008             		move.w	#$18,obX(a0)
0000E9FA 317C 0118 0030             		move.w	#$118,ssr_mainX(a0) ; change position of text
0000EA00                            
0000EA00                            loc_C842:
0000EA00 1140 001A                  		move.b	d0,obFrame(a0)
0000EA04                            
0000EA04                            SSR_Move:	; Routine 2
0000EA04 7210                       		moveq	#$10,d1		; set horizontal speed
0000EA06 3028 0030                  		move.w	ssr_mainX(a0),d0
0000EA0A B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000EA0E 6700                       		beq.s	loc_C86C	; if yes, branch
0000EA10 6C00                       		bge.s	SSR_ChgPos
0000EA12 4441                       		neg.w	d1
0000EA14                            
0000EA14                            SSR_ChgPos:
0000EA14 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000EA18                            
0000EA18                            loc_C85A:
0000EA18 3028 0008                  		move.w	obX(a0),d0
0000EA1C 6B00                       		bmi.s	locret_C86A
0000EA1E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000EA22 6400                       		bcc.s	locret_C86A	; if yes, branch
0000EA24 6000 0000                  		bra.w	DisplaySprite
0000EA28                            ; ===========================================================================
0000EA28                            
0000EA28                            locret_C86A:
0000EA28 4E75                       		rts	
0000EA2A                            ; ===========================================================================
0000EA2A                            
0000EA2A                            loc_C86C:
0000EA2A 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000EA30 66E6                       		bne.s	loc_C85A
0000EA32 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EA36 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000EA3C 11FC 0000 D800             		move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000EA42                            
0000EA42                            SSR_Wait:	; Routine 4, 8, $C, $10
0000EA42 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000EA46 6600                       		bne.s	SSR_Display
0000EA48 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EA4C                            
0000EA4C                            SSR_Display:
0000EA4C 6000 0000                  		bra.w	DisplaySprite
0000EA50                            ; ===========================================================================
0000EA50                            
0000EA50                            SSR_RingBonus:	; Routine 6
0000EA50 6100 0000                  		bsr.w	DisplaySprite
0000EA54 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set ring bonus update flag
0000EA5A 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000EA5E 6700                       		beq.s	loc_C8C4	; if yes, branch
0000EA60 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000EA66 700A                       		moveq	#10,d0		; add 10 to score
0000EA68 4EB9 0000 0000             		jsr	(AddPoints).l
0000EA6E 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000EA72 0200 0003                  		andi.b	#3,d0
0000EA76 6600                       		bne.s	locret_C8EA
0000EA82                            ; ===========================================================================
0000EA82                            
0000EA82                            loc_C8C4:
0000EA8C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EA90 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000EA96 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have at least 50 rings?
0000EA9C 6500                       		bcs.s	locret_C8EA	; if not, branch
0000EA9E 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time delay to 1 second
0000EAA4 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto "SSR_Continue" routine
0000EAA8                            
0000EAA8                            locret_C8EA:
0000EAA8 4E75                       		rts	
0000EAAA                            ; ===========================================================================
0000EAAA                            
0000EAAA                            SSR_Exit:	; Routine $A, $12
0000EAAA 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000EAB0 6000 0000                  		bra.w	DisplaySprite
0000EAB4                            ; ===========================================================================
0000EAB4                            
0000EAB4                            SSR_Continue:	; Routine $E
0000EAB4 11FC 0004 D6DA             		move.b	#4,(v_objspace+$6C0+obFrame).w
0000EABA 11FC 0014 D6E4             		move.b	#$14,(v_objspace+$6C0+obRoutine).w
0000EACA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EACE 317C 0168 001E             		move.w	#360,obTimeFrame(a0) ; set time delay to 6 seconds
0000EAD4 6000 0000                  		bra.w	DisplaySprite
0000EAD8                            ; ===========================================================================
0000EAD8                            
0000EAD8                            loc_C91A:	; Routine $14
0000EAD8 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000EADC 0200 000F                  		andi.b	#$F,d0
0000EAE0 6600                       		bne.s	SSR_Display2
0000EAE2 0868 0000 001A             		bchg	#0,obFrame(a0)
0000EAE8                            
0000EAE8                            SSR_Display2:
0000EAE8 6000 0000                  		bra.w	DisplaySprite
0000EAEC                            ; ===========================================================================
0000EAEC 0020 0120 00C4             SSR_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000EAF2 0200                       		dc.b 2,	0		; rountine number, frame number
0000EAF4 0320 0120 0118             		dc.w $320, $120, $118
0000EAFA 0201                       		dc.b 2,	1
0000EAFC 0360 0120 0128             		dc.w $360, $120, $128
0000EB02 0202                       		dc.b 2,	2
0000EB04 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000EB0A 0203                       		dc.b 2,	3
0000EB0C 03A0 0120 0138             		dc.w $3A0, $120, $138
0000EB12 0206                       		dc.b 2,	6
0000EB12 0206                       		dc.b 2,	6
0000EB14                            		include	"_incObj\7F SS Result Chaos Emeralds.asm"
0000EB14                            ; ---------------------------------------------------------------------------
0000EB14                            ; Object 7F - chaos emeralds from the special stage results screen
0000EB14                            ; ---------------------------------------------------------------------------
0000EB14                            
0000EB14                            SSRChaos:
0000EB14 7000                       		moveq	#0,d0
0000EB16 1028 0024                  		move.b	obRoutine(a0),d0
0000EB1A 323B 0000                  		move.w	SSRC_Index(pc,d0.w),d1
0000EB1E 4EFB 1000                  		jmp	SSRC_Index(pc,d1.w)
0000EB22                            ; ===========================================================================
0000EB22 0000                       SSRC_Index:	dc.w SSRC_Main-SSRC_Index
0000EB24 0000                       		dc.w SSRC_Flash-SSRC_Index
0000EB26                            
0000EB26                            ; ---------------------------------------------------------------------------
0000EB26                            ; X-axis positions for chaos emeralds
0000EB26                            ; ---------------------------------------------------------------------------
0000EB26 0110 0128 00F8 0140 00E0+  SSRC_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000EB32                            ; ===========================================================================
0000EB32                            
0000EB32                            SSRC_Main:	; Routine 0
0000EB32 2248                       		movea.l	a0,a1
0000EB34 45F9 0000 EB26             		lea	(SSRC_PosData).l,a2
0000EB3A 7400                       		moveq	#0,d2
0000EB3C 7200                       		moveq	#0,d1
0000EB3E 1238 FE57                  		move.b	(v_emeralds).w,d1 ; d1 is number of emeralds
0000EB42 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000EB44 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000EB48                            
0000EB48                            	SSRC_Loop:
0000EB48 12BC 0000                  		move.b	#id_SSRChaos,0(a1)
0000EB4C 335A 0008                  		move.w	(a2)+,obX(a1)	; set x-position
0000EB50 337C 00F0 000A             		move.w	#$F0,obScreenY(a1) ; set y-position
0000EB56 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0000EB5A 1633 2000                  		move.b	(a3,d2.w),d3
0000EB5E 1343 001A                  		move.b	d3,obFrame(a1)
0000EB62 1343 001C                  		move.b	d3,obAnim(a1)
0000EB66 5202                       		addq.b	#1,d2
0000EB68 5429 0024                  		addq.b	#2,obRoutine(a1)
0000EB6C 237C 0000 0000 0004        		move.l	#Map_SSRC,obMap(a1)
0000EB74 337C 8541 0002             		move.w	#$8541,obGfx(a1)
0000EB7A 137C 0000 0001             		move.b	#0,obRender(a1)
0000EB80 43E9 0040                  		lea	$40(a1),a1	; next object
0000EB84 51C9 FFC2                  		dbf	d1,SSRC_Loop	; loop for d1 number of	emeralds
0000EB88                            
0000EB88                            SSRC_Flash:	; Routine 2
0000EB88 1028 001A                  		move.b	obFrame(a0),d0
0000EB8C 117C 0006 001A             		move.b	#6,obFrame(a0)	; load 6th frame (blank)
0000EB92 0C00 0006                  		cmpi.b	#6,d0
0000EB96 6600                       		bne.s	SSRC_Display
0000EB98 1168 001C 001A             		move.b	obAnim(a0),obFrame(a0) ; load visible frame
0000EB9E                            
0000EB9E                            	SSRC_Display:
0000EB9E 6000 0000                  		bra.w	DisplaySprite
0000EB9E 6000 0000                  		bra.w	DisplaySprite
0000EBA2                            
0000EBA2                            ; ---------------------------------------------------------------------------
0000EBA2                            ; Sprite mappings - zone title cards
0000EBA2                            ; ---------------------------------------------------------------------------
0000EBA2 0000                       Map_Card:	dc.w M_Card_GHZ-Map_Card
0000EBA4 0000                       		dc.w M_Card_LZ-Map_Card
0000EBA6 0000                       		dc.w M_Card_MZ-Map_Card
0000EBA8 0000                       		dc.w M_Card_SLZ-Map_Card
0000EBAA 0000                       		dc.w M_Card_SYZ-Map_Card
0000EBAC 0000                       		dc.w M_Card_SBZ-Map_Card
0000EBAE 0000                       		dc.w M_Card_Zone-Map_Card
0000EBB0 0000                       		dc.w M_Card_Act1-Map_Card
0000EBB2 0000                       		dc.w M_Card_Act2-Map_Card
0000EBB4 0000                       		dc.w M_Card_Act3-Map_Card
0000EBB6 0000                       		dc.w M_Card_Oval-Map_Card
0000EBB8 0000                       		dc.w M_Card_FZ-Map_Card
0000EBBA 09                         M_Card_GHZ:	dc.b 9 			; GREEN HILL
0000EBBB F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000EBC0 F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000EBC5 F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000EBCA F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000EBCF F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000EBD4 F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000EBD9 F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000EBDE F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000EBE3 F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000EBE8                            		even
0000EBE8 0D                         M_Card_LZ:	dc.b $D	;  LABYRINTH | ROBOTIC ABYSS
0000EBE9 F805 003A 9C               		dc.b $F8, 5, 0, $3A, $9C	; R
0000EBEE F805 0032 AC               		dc.b $F8, 5, 0, $32, $AC	; O
0000EBF3 F805 0004 BC               		dc.b $F8, 5, 0, 4, $BC		; B
0000EBF8 F805 0032 CC               		dc.b $F8, 5, 0, $32, $CC	; O
0000EBFD F805 0042 DC               		dc.b $F8, 5, 0, $42, $DC	; T
0000EC02 F801 0020 EC               		dc.b $F8, 1, 0, $20, $EC	; I
0000EC07 F805 0008 F4               		dc.b $F8, 5, 0, 8, $F4		; C
0000EC0C F800 0056 04               		dc.b $F8, 0, 0, $56, $4	; Space
0000EC11 F805 0000 14               		dc.b $F8, 5, 0, 0, $14		; A
0000EC16 F805 0004 24               		dc.b $F8, 5, 0, 4, $24		; B
0000EC1B F805 004A 34               		dc.b $F8, 5, 0, $4A, $34	; Y
0000EC20 F805 003E 44               		dc.b $F8, 5, 0, $3E, $44	; S
0000EC25 F805 003E 54               		dc.b $F8, 5, 0, $3E, $54	; S
0000EC2A 0B                         M_Card_MZ:	dc.b $B	;  MARBLE | SCRAP RUINS
0000EC2B F805 003E A4               		dc.b $F8, 5, 0, $3E, $A4	; S
0000EC30 F805 0008 B4               		dc.b $F8, 5, 0, 8, $B4		; C
0000EC35 F805 003A C4               		dc.b $F8, 5, 0, $3A, $C4	; R
0000EC3A F805 0000 D4               		dc.b $F8, 5, 0, 0, $D4		; A
0000EC3F F805 0036 E4               		dc.b $F8, 5, 0, $36, $E4	; P
0000EC44 F800 0056 F4               		dc.b $F8, 0, 0, $56, $F4	; Space
0000EC49 F805 003A 04               		dc.b $F8, 5, 0, $3A, $4	; R
0000EC4E F805 0046 14               		dc.b $F8, 5, 0, $46, $14	; U
0000EC53 F801 0020 24               		dc.b $F8, 1, 0, $20, $24	; I
0000EC58 F805 002E 2C               		dc.b $F8, 5, 0, $2E, $2C	; N
0000EC5D F805 003E 3C               		dc.b $F8, 5, 0, $3E, $3C	; S
0000EC62 09                         M_Card_SLZ:	dc.b 9			; STAR LIGHT
0000EC63 F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000EC68 F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000EC6D F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000EC72 F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000EC77 F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000EC7C F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000EC81 F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000EC86 F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000EC8B F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000EC90                            		even
0000EC90 0A                         M_Card_SYZ:	dc.b $A	;  SPRING YARD | FUTURE BAY
0000EC91 F805 0014 AC               		dc.b $F8, 5, 0, $14, $AC	; F
0000EC96 F805 0046 BC               		dc.b $F8, 5, 0, $46, $BC	; U
0000EC9B F805 0042 CC               		dc.b $F8, 5, 0, $42, $CC	; T
0000ECA0 F805 0046 DC               		dc.b $F8, 5, 0, $46, $DC	; U
0000ECA5 F805 003A EC               		dc.b $F8, 5, 0, $3A, $EC	; R
0000ECAA F805 0010 FC               		dc.b $F8, 5, 0, $10, $FC	; E
0000ECAF F800 0056 0C               		dc.b $F8, 0, 0, $56, $C	; Space
0000ECB4 F805 0004 1C               		dc.b $F8, 5, 0, 4, $1C		; B
0000ECB9 F805 0000 2C               		dc.b $F8, 5, 0, 0, $2C		; A
0000ECBE F805 004A 3C               		dc.b $F8, 5, 0, $4A, $3C	; Y
0000ECC3 0A                         M_Card_SBZ:	dc.b $A			; SCRAP BRAIN
0000ECC4 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000ECC9 F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000ECCE F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000ECD3 F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000ECD8 F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000ECDD F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000ECE2 F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000ECE7 F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000ECEC F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000ECF1 F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000ECF6                            		even
0000ECF6 04                         M_Card_Zone:	dc.b 4			; ZONE
0000ECF7 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000ECFC F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000ED01 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000ED06 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000ED0C 00                         		even
0000ED0C 02                         M_Card_Act1:	dc.b 2			; ACT 1
0000ED0D 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000ED12 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000ED17 02                         M_Card_Act2:	dc.b 2			; ACT 2
0000ED18 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000ED1D F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000ED22 02                         M_Card_Act3:	dc.b 2			; ACT 3
0000ED23 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000ED28 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000ED2D 0D                         M_Card_Oval:	dc.b $D			; Oval
0000ED2E E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000ED33 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000ED38 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000ED3D F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000ED42 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000ED47 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000ED4C 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000ED51 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000ED56 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000ED5B F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000ED60 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000ED65 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000ED6A 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000ED70 00                         		even
0000ED70 05                         M_Card_FZ:	dc.b 5			; FINAL
0000ED71 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000ED76 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000ED7B F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000ED80 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000ED85 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000ED8A                            		even
0000ED8A                            
0000ED8A                            Map_Over:	include	"_maps\Game Over.asm"
0000ED8A                            ; ---------------------------------------------------------------------------
0000ED8A                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000ED8A                            ; ---------------------------------------------------------------------------
0000ED8A                            Map_Over_internal:
0000ED8A 0000                       		dc.w byte_CBAC-Map_Over_internal
0000ED8C 0000                       		dc.w byte_CBB7-Map_Over_internal
0000ED8E 0000                       		dc.w byte_CBC2-Map_Over_internal
0000ED90 0000                       		dc.w byte_CBCD-Map_Over_internal
0000ED92 02                         byte_CBAC:	dc.b 2			; GAME
0000ED93 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000ED98 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000ED9D 02                         byte_CBB7:	dc.b 2			; OVER
0000ED9E F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000EDA3 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000EDA8 02                         byte_CBC2:	dc.b 2			; TIME
0000EDA9 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000EDAE F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000EDB3 02                         byte_CBCD:	dc.b 2			; OVER
0000EDB4 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000EDB9 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000EDBE                            		even
0000EDBE                            		even
0000EDBE                            
0000EDBE                            ; ---------------------------------------------------------------------------
0000EDBE                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000EDBE                            ; ---------------------------------------------------------------------------
0000EDBE 0000                       Map_Got:	dc.w M_Got_SonicHas-Map_Got
0000EDC0 0000                       		dc.w M_Got_Passed-Map_Got
0000EDC2 0000                       		dc.w M_Got_Score-Map_Got
0000EDC4 0000                       		dc.w M_Got_TBonus-Map_Got
0000EDC6 0000                       		dc.w M_Got_RBonus-Map_Got
0000EDC8 FF6F                       		dc.w M_Card_Oval-Map_Got
0000EDCA FF4E                       		dc.w M_Card_Act1-Map_Got
0000EDCC FF59                       		dc.w M_Card_Act2-Map_Got
0000EDCE FF64                       		dc.w M_Card_Act3-Map_Got
0000EDD0 08                         M_Got_SonicHas:	dc.b 8			; SONIC HAS
0000EDD1 F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000EDD6 F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000EDDB F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000EDE0 F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000EDE5 F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000EDEA F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000EDEF F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000EDF4 F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000EDF9 06                         M_Got_Passed:	dc.b 6			; PASSED
0000EDFA F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000EDFF F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000EE04 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000EE09 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000EE0E F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EE13 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000EE18 06                         M_Got_Score:	dc.b 6			; SCORE
0000EE19 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000EE1E F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000EE23 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000EE28 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000EE2D F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000EE32 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000EE37 07                         M_Got_TBonus:	dc.b 7			; TIME BONUS
0000EE38 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000EE3D F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EE42 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EE47 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EE4C FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EE51 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000EE56 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EE5B 07                         M_Got_RBonus:	dc.b 7			; RING BONUS
0000EE5C F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000EE61 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EE66 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EE6B F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EE70 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EE75 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000EE7A F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EE80 00                         		even
0000EE80                            ; ---------------------------------------------------------------------------
0000EE80                            ; Sprite mappings - special stage results screen
0000EE80                            ; ---------------------------------------------------------------------------
0000EE80 0000                       Map_SSR:	dc.w M_SSR_Chaos-Map_SSR
0000EE82 0000                       		dc.w M_SSR_Score-Map_SSR
0000EE84 0000                       		dc.w byte_CD0D-Map_SSR
0000EE86 FEAD                       		dc.w M_Card_Oval-Map_SSR
0000EE88 0000                       		dc.w byte_CD31-Map_SSR
0000EE8A 0000                       		dc.w byte_CD46-Map_SSR
0000EE8C 0000                       		dc.w byte_CD5B-Map_SSR
0000EE8E 0000                       		dc.w byte_CD6B-Map_SSR
0000EE90 0000                       		dc.w byte_CDA8-Map_SSR
0000EE92 0D                         M_SSR_Chaos:	dc.b $D			; "CHAOS EMERALDS"
0000EE93 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000EE98 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000EE9D F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000EEA2 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000EEA7 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000EEAC F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000EEB1 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000EEB6 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EEBB F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000EEC0 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000EEC5 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000EECA F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000EECF F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000EED4 06                         M_SSR_Score:	dc.b 6			; "SCORE"
0000EED5 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000EEDA F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000EEDF F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000EEE4 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000EEE9 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000EEEE FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000EEF3 07                         byte_CD0D:	dc.b 7
0000EEF4 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000EEF9 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EEFE F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EF03 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EF08 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EF0D F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000EF12 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EF17 04                         byte_CD31:	dc.b 4
0000EF18 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EF1D F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EF22 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EF27 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000EF2C 04                         byte_CD46:	dc.b 4
0000EF2D F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EF32 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EF37 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EF3C F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000EF41 03                         byte_CD5B:	dc.b 3
0000EF42 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EF47 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EF4C F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EF51 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000EF52 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000EF57 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000EF5C F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000EF61 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000EF66 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000EF6B F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000EF70 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000EF75 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000EF7A F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000EF7F F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000EF84 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000EF89 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000EF8E 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000EF8F F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000EF94 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000EF99 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000EF9E F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000EFA3 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000EFA8 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000EFAD F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000EFB2 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000EFB7 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000EFBC F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000EFC1 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000EFC6 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000EFCB F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000EFD0 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000EFD5 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000EFDA                            		even
0000EFDA                            
0000EFDA                            Map_SSRC:	include	"_maps\SS Result Chaos Emeralds.asm"
0000EFDA                            ; ---------------------------------------------------------------------------
0000EFDA                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000EFDA                            ; ---------------------------------------------------------------------------
0000EFDA                            Map_SSRC_internal:
0000EFDA 0000                       		dc.w byte_CE02-Map_SSRC_internal
0000EFDC 0000                       		dc.w byte_CE08-Map_SSRC_internal
0000EFDE 0000                       		dc.w byte_CE0E-Map_SSRC_internal
0000EFE0 0000                       		dc.w byte_CE14-Map_SSRC_internal
0000EFE2 0000                       		dc.w byte_CE1A-Map_SSRC_internal
0000EFE4 0000                       		dc.w byte_CE20-Map_SSRC_internal
0000EFE6 0000                       		dc.w byte_CE26-Map_SSRC_internal
0000EFE8 01                         byte_CE02:	dc.b 1
0000EFE9 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000EFEE 01                         byte_CE08:	dc.b 1
0000EFEF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000EFF4 01                         byte_CE0E:	dc.b 1
0000EFF5 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000EFFA 01                         byte_CE14:	dc.b 1
0000EFFB F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000F000 01                         byte_CE1A:	dc.b 1
0000F001 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000F006 01                         byte_CE20:	dc.b 1
0000F007 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000F00C 00                         byte_CE26:	dc.b 0			; Blank frame
0000F00E 00                         		even
0000F00E 00                         		even
0000F00E                            
0000F00E                            		include	"_incObj\36 Spikes.asm"
0000F00E                            ; ---------------------------------------------------------------------------
0000F00E                            ; Object 36 - spikes
0000F00E                            ; ---------------------------------------------------------------------------
0000F00E                            
0000F00E                            Spikes:
0000F00E 7000                       		moveq	#0,d0
0000F010 1028 0024                  		move.b	obRoutine(a0),d0
0000F014 323B 0000                  		move.w	Spik_Index(pc,d0.w),d1
0000F018 4EFB 1000                  		jmp	Spik_Index(pc,d1.w)
0000F01C                            ; ===========================================================================
0000F01C 0000                       Spik_Index:	dc.w Spik_Main-Spik_Index
0000F01E 0000                       		dc.w Spik_Solid-Spik_Index
0000F020                            
0000F020 =00000030                  spik_origX:	equ $30		; start X position
0000F020 =00000032                  spik_origY:	equ $32		; start Y position
0000F020                            
0000F020 0014                       Spik_Var:	dc.b 0,	$14		; frame	number,	object width
0000F022 0110                       		dc.b 1,	$10
0000F024 0204                       		dc.b 2,	4
0000F026 031C                       		dc.b 3,	$1C
0000F028 0440                       		dc.b 4,	$40
0000F02A 0510                       		dc.b 5,	$10
0000F02C                            ; ===========================================================================
0000F02C                            
0000F02C                            Spik_Main:	; Routine 0
0000F02C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F030 217C 0000 0000 0004        		move.l	#Map_Spike,obMap(a0)
0000F038 317C 051B 0002             		move.w	#$51B,obGfx(a0)
0000F03E 0028 0004 0001             		ori.b	#4,obRender(a0)
0000F044 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F04A 1028 0028                  		move.b	obSubtype(a0),d0
0000F04E 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000F054 0240 00F0                  		andi.w	#$F0,d0
0000F058 43F9 0000 F020             		lea	(Spik_Var).l,a1
0000F05E E648                       		lsr.w	#3,d0
0000F060 D2C0                       		adda.w	d0,a1
0000F062 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000F066 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000F06A 3168 0008 0030             		move.w	obX(a0),spik_origX(a0)
0000F070 3168 000C 0032             		move.w	obY(a0),spik_origY(a0)
0000F076                            
0000F076                            Spik_Solid:	; Routine 2
0000F076 6100 0000                  		bsr.w	Spik_Type0x	; make the object move
0000F07A 343C 0004                  		move.w	#4,d2
0000F07E 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is object type $5x ?
0000F084 6700                       		beq.s	Spik_SideWays	; if yes, branch
0000F086 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is object type $1x ?
0000F08C 6600                       		bne.s	Spik_Upright	; if not, branch
0000F08E 343C 0014                  		move.w	#$14,d2
0000F092                            
0000F092                            ; Spikes types $1x and $5x face	sideways
0000F092                            
0000F092                            Spik_SideWays:
0000F092 323C 001B                  		move.w	#$1B,d1
0000F096 3602                       		move.w	d2,d3
0000F098 5243                       		addq.w	#1,d3
0000F09A 3828 0008                  		move.w	obX(a0),d4
0000F09E 6100 0000                  		bsr.w	SolidObject
0000F0A2 0828 0003 0022             		btst	#3,obStatus(a0)
0000F0A8 6600                       		bne.s	Spik_Display
0000F0AA 0C44 0001                  		cmpi.w	#1,d4
0000F0AE 6700                       		beq.s	Spik_Hurt
0000F0B0 6000                       		bra.s	Spik_Display
0000F0B2                            ; ===========================================================================
0000F0B2                            
0000F0B2                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000F0B2                            
0000F0B2                            Spik_Upright:
0000F0B2 7200                       		moveq	#0,d1
0000F0B4 1228 0014                  		move.b	obActWid(a0),d1
0000F0B8 0641 000B                  		addi.w	#$B,d1
0000F0BC 343C 0010                  		move.w	#$10,d2
0000F0C0 363C 0011                  		move.w	#$11,d3
0000F0C4 3828 0008                  		move.w	obX(a0),d4
0000F0C8 6100 0000                  		bsr.w	SolidObject
0000F0CC 0828 0003 0022             		btst	#3,obStatus(a0)
0000F0D2 6600                       		bne.s	Spik_Hurt
0000F0D4 4A44                       		tst.w	d4
0000F0D6 6A00                       		bpl.s	Spik_Display
0000F0D8                            
0000F0D8                            Spik_Hurt:
0000F0D8 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0000F0DC 6600                       		bne.s	Spik_Display	; if yes, branch
0000F0DE 4A78 D030                  		tst.w	(v_player+$30).w ; +++ is Sonic invulnerable?
0000F0E2 6600                       		bne.s	Spik_Display	; +++ if yes, branch
0000F0E4 2F08                       		move.l	a0,-(sp)
0000F0E6 2448                       		movea.l	a0,a2
0000F0E8 41F8 D000                  		lea	(v_player).w,a0
0000F0EC 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000F0F2 6400                       		bcc.s	loc_CF20
0000F0F4                            		; This fixes the infamous "spike bug"
0000F0F4 4A68 0030                  		tst.w	flashtime(a0)	; Is Sonic flashing after being hurt?
0000F0F8 6600                       		bne.s	loc_CF20	; If so, skip getting hurt
0000F0FA 4EF9 0000 00E0             		jmp	(loc_E0).l	; This is a copy of the above code that was pushed aside for this
0000F100                            loc_D5A2:
0000F100 9680                       		sub.l	d0,d3
0000F102 2143 000C                  		move.l	d3,obY(a0)
0000F106 4EB9 0000 0000             		jsr	(HurtSonic).l
0000F10C                            
0000F10C                            loc_CF20:
0000F10C 205F                       		movea.l	(sp)+,a0
0000F10E                            
0000F10E                            Spik_Display:
0000F10E 6100 0000                  		bsr.w	DisplaySprite
0000F130 4E75                       		rts	
0000F132                            ; ===========================================================================
0000F132                            
0000F132                            Spik_Type0x:
0000F132 7000                       		moveq	#0,d0
0000F134 1028 0028                  		move.b	obSubtype(a0),d0
0000F138 D040                       		add.w	d0,d0
0000F13A 323B 0000                  		move.w	Spik_TypeIndex(pc,d0.w),d1
0000F13E 4EFB 1000                  		jmp	Spik_TypeIndex(pc,d1.w)
0000F142                            ; ===========================================================================
0000F142 0000                       Spik_TypeIndex:	dc.w Spik_Type00-Spik_TypeIndex
0000F144 0000                       		dc.w Spik_Type01-Spik_TypeIndex
0000F146 0000                       		dc.w Spik_Type02-Spik_TypeIndex
0000F148                            ; ===========================================================================
0000F148                            
0000F148                            Spik_Type00:
0000F148 4E75                       		rts			; don't move the object
0000F14A                            ; ===========================================================================
0000F14A                            
0000F14A                            Spik_Type01:
0000F14A 6100 0000                  		bsr.w	Spik_Wait
0000F14E 7000                       		moveq	#0,d0
0000F150 1028 0034                  		move.b	$34(a0),d0
0000F154 D068 0032                  		add.w	spik_origY(a0),d0
0000F158 3140 000C                  		move.w	d0,obY(a0)	; move the object vertically
0000F15C 4E75                       		rts	
0000F15E                            ; ===========================================================================
0000F15E                            
0000F15E                            Spik_Type02:
0000F15E 6100 0000                  		bsr.w	Spik_Wait
0000F162 7000                       		moveq	#0,d0
0000F164 1028 0034                  		move.b	$34(a0),d0
0000F168 D068 0030                  		add.w	spik_origX(a0),d0
0000F16C 3140 0008                  		move.w	d0,obX(a0)	; move the object horizontally
0000F170 4E75                       		rts	
0000F172                            ; ===========================================================================
0000F172                            
0000F172                            Spik_Wait:
0000F172 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000F176 6700                       		beq.s	loc_CFA4	; if yes, branch
0000F178 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000F17C 6600                       		bne.s	locret_CFE6
0000F17E 4A28 0001                  		tst.b	obRender(a0)
0000F182 6A00                       		bpl.s	locret_CFE6
0000F18E 6000                       		bra.s	locret_CFE6
0000F190                            ; ===========================================================================
0000F190                            
0000F190                            loc_CFA4:
0000F190 4A68 0036                  		tst.w	$36(a0)
0000F194 6700                       		beq.s	loc_CFC6
0000F196 0468 0800 0034             		subi.w	#$800,$34(a0)
0000F19C 6400                       		bcc.s	locret_CFE6
0000F19E 317C 0000 0034             		move.w	#0,$34(a0)
0000F1A4 317C 0000 0036             		move.w	#0,$36(a0)
0000F1AA 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000F1B0 6000                       		bra.s	locret_CFE6
0000F1B2                            ; ===========================================================================
0000F1B2                            
0000F1B2                            loc_CFC6:
0000F1B2 0668 0800 0034             		addi.w	#$800,$34(a0)
0000F1B8 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000F1BE 6500                       		bcs.s	locret_CFE6
0000F1C0 317C 2000 0034             		move.w	#$2000,$34(a0)
0000F1C6 317C 0001 0036             		move.w	#1,$36(a0)
0000F1CC 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000F1D2                            
0000F1D2                            locret_CFE6:
0000F1D2 4E75                       		rts	
0000F1D2 4E75                       		rts	
0000F1D4                            Map_Spike:	include	"_maps\Spikes.asm"
0000F1D4                            ; --------------------------------------------------------------------------------
0000F1D4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000F1D4                            ; --------------------------------------------------------------------------------
0000F1D4                            
0000F1D4                            SME_XgeaQ:	
0000F1D4 0000 0000                  		dc.w SME_XgeaQ_C-SME_XgeaQ, SME_XgeaQ_1C-SME_XgeaQ	
0000F1D8 0000 0000                  		dc.w SME_XgeaQ_2C-SME_XgeaQ, SME_XgeaQ_32-SME_XgeaQ	
0000F1DC 0000 0000                  		dc.w SME_XgeaQ_42-SME_XgeaQ, SME_XgeaQ_61-SME_XgeaQ	
0000F1E0 03                         SME_XgeaQ_C:	dc.b 3	
0000F1E1 F003 2004 EC               		dc.b $F0, 3, $20, 4, $EC	
0000F1E6 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F1EB F003 2004 0C               		dc.b $F0, 3, $20, 4, $C	
0000F1F0 03                         SME_XgeaQ_1C:	dc.b 3	
0000F1F1 EC0C 2000 F0               		dc.b $EC, $C, $20, 0, $F0	
0000F1F6 FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000F1FB 0C0C 2000 F0               		dc.b $C, $C, $20, 0, $F0	
0000F200 01                         SME_XgeaQ_2C:	dc.b 1	
0000F201 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F206 03                         SME_XgeaQ_32:	dc.b 3	
0000F207 F003 2004 E4               		dc.b $F0, 3, $20, 4, $E4	
0000F20C F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F211 F003 2004 14               		dc.b $F0, 3, $20, 4, $14	
0000F216 06                         SME_XgeaQ_42:	dc.b 6	
0000F217 F003 2004 C0               		dc.b $F0, 3, $20, 4, $C0	
0000F21C F003 2004 D8               		dc.b $F0, 3, $20, 4, $D8	
0000F221 F003 2004 F0               		dc.b $F0, 3, $20, 4, $F0	
0000F226 F003 2004 08               		dc.b $F0, 3, $20, 4, 8	
0000F22B F003 2004 20               		dc.b $F0, 3, $20, 4, $20	
0000F230 F003 2004 38               		dc.b $F0, 3, $20, 4, $38	
0000F235 01                         SME_XgeaQ_61:	dc.b 1	
0000F236 FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000F23C 00                         		even
0000F23C 00                         		even
0000F23C                            		include	"_incObj\3B Purple Rock.asm"
0000F23C                            ; ---------------------------------------------------------------------------
0000F23C                            ; Object 3B - purple rock (GHZ)
0000F23C                            ; ---------------------------------------------------------------------------
0000F23C                            
0000F23C                            PurpleRock:
0000F23C 7000                       		moveq	#0,d0
0000F23E 1028 0024                  		move.b	obRoutine(a0),d0
0000F242 323B 0000                  		move.w	Rock_Index(pc,d0.w),d1
0000F246 4EFB 1000                  		jmp	Rock_Index(pc,d1.w)
0000F24A                            ; ===========================================================================
0000F24A 0000                       Rock_Index:	dc.w Rock_Main-Rock_Index
0000F24C 0000                       		dc.w Rock_Solid-Rock_Index
0000F24E                            ; ===========================================================================
0000F24E                            
0000F24E                            Rock_Main:	; Routine 0
0000F24E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F252 217C 0000 0000 0004        		move.l	#Map_PRock,obMap(a0)
0000F25A 317C 63D0 0002             		move.w	#$63D0,obGfx(a0)
0000F260 117C 0004 0001             		move.b	#4,obRender(a0)
0000F266 117C 0013 0014             		move.b	#$13,obActWid(a0)
0000F26C 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F272                            
0000F272                            Rock_Solid:	; Routine 2
0000F272 323C 001B                  		move.w	#$1B,d1
0000F276 343C 0010                  		move.w	#$10,d2
0000F27A 363C 0010                  		move.w	#$10,d3
0000F27E 3828 0008                  		move.w	obX(a0),d4
0000F282 6100 0000                  		bsr.w	SolidObject
0000F286 6100 0000                  		bsr.w	DisplaySprite
0000F2A8 4E75                       		rts	
0000F2A8 4E75                       		rts	
0000F2AA                            		include	"_incObj\49 Waterfall Sound.asm"
0000F2AA                            ; ---------------------------------------------------------------------------
0000F2AA                            ; Object 49 - waterfall	sound effect (GHZ)
0000F2AA                            ; ---------------------------------------------------------------------------
0000F2AA                            
0000F2AA                            WaterSound:
0000F2AA 7000                       		moveq	#0,d0
0000F2AC 1028 0024                  		move.b	obRoutine(a0),d0
0000F2B0 323B 0000                  		move.w	WSnd_Index(pc,d0.w),d1
0000F2B4 4EFB 1000                  		jmp	WSnd_Index(pc,d1.w)
0000F2B8                            ; ===========================================================================
0000F2B8 0000                       WSnd_Index:	dc.w WSnd_Main-WSnd_Index
0000F2BA 0000                       		dc.w WSnd_PlaySnd-WSnd_Index
0000F2BC                            ; ===========================================================================
0000F2BC                            
0000F2BC                            WSnd_Main:	; Routine 0
0000F2BC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F2C0 117C 0004 0001             		move.b	#4,obRender(a0)
0000F2C6                            
0000F2C6                            WSnd_PlaySnd:	; Routine 2
0000F2C6 1038 FE0F                  		move.b	(v_vbla_byte).w,d0 ; get low byte of VBlank counter
0000F2CA 0200 003F                  		andi.b	#$3F,d0
0000F2CE 6600                       		bne.s	WSnd_ChkDel
0000F2DA                            
0000F2DA                            	WSnd_ChkDel:
0000F2F8 4E75                       		rts	
0000F2F8 4E75                       		rts	
0000F2FA                            Map_PRock:	include	"_maps\Purple Rock.asm"
0000F2FA                            ; ---------------------------------------------------------------------------
0000F2FA                            ; Sprite mappings - purple rock	(GHZ)
0000F2FA                            ; ---------------------------------------------------------------------------
0000F2FA                            Map_PRock_internal:
0000F2FA 0000                       		dc.w byte_D110-Map_PRock_internal
0000F2FC 02                         byte_D110:	dc.b 2
0000F2FD F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F302 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000F308 00                         		even
0000F308 00                         		even
0000F308                            		include	"_incObj\3C Smashable Wall.asm"
0000F308                            ; ---------------------------------------------------------------------------
0000F308                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000F308                            ; ---------------------------------------------------------------------------
0000F308                            
0000F308                            SmashWall:
0000F308 7000                       		moveq	#0,d0
0000F30A 1028 0024                  		move.b	obRoutine(a0),d0
0000F30E 323B 0000                  		move.w	Smash_Index(pc,d0.w),d1
0000F312 4EBB 1000                  		jsr	Smash_Index(pc,d1.w)
0000F316 6000 0000                  		bra.w	RememberState
0000F31A                            ; ===========================================================================
0000F31A 0000                       Smash_Index:	dc.w Smash_Main-Smash_Index
0000F31C 0000                       		dc.w Smash_Solid-Smash_Index
0000F31E 0000                       		dc.w Smash_FragMove-Smash_Index
0000F320                            
0000F320 =00000030                  smash_speed:	equ $30		; Sonic's horizontal speed
0000F320                            ; ===========================================================================
0000F320                            
0000F320                            Smash_Main:	; Routine 0
0000F320 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F324 217C 0000 0000 0004        		move.l	#Map_Smash,obMap(a0)
0000F32C 317C 450F 0002             		move.w	#$450F,obGfx(a0)
0000F332 117C 0004 0001             		move.b	#4,obRender(a0)
0000F338 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000F33E 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F344 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0000F34A                            
0000F34A                            Smash_Solid:	; Routine 2
0000F34A 3178 D010 0030             		move.w	(v_player+obVelX).w,smash_speed(a0) ; load Sonic's horizontal speed
0000F350 323C 001B                  		move.w	#$1B,d1
0000F354 343C 0020                  		move.w	#$20,d2
0000F358 363C 0020                  		move.w	#$20,d3
0000F35C 3828 0008                  		move.w	obX(a0),d4
0000F360 6100 0000                  		bsr.w	SolidObject	
0000F364 4A04                       		tst.b	d4
0000F366 6E00 0000                  		bgt.w	@chkroll	
0000F36A 6700 0000                  		beq.w	@donothing								
0000F36E 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing against the wall?
0000F374 6700 0000                  		beq.w	@donothing	; if yes, branch
0000F378                            ; ===========================================================================
0000F378                            
0000F378                            @chkroll:
0000F378 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000F37E 6600                       		bne.s	@donothing	; if not, branch	
0000F380 3028 0030                  		move.w	smash_speed(a0),d0
0000F384 6A00                       		bpl.s	@chkspeed
0000F386 4440                       		neg.w	d0
0000F388                            
0000F388                            	@chkspeed:
0000F388 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000F38C 6500                       		bcs.s	@donothing	; if not, branch	
0000F38E                            		
0000F38E                            	@continue:	
0000F38E 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000F394 3368 0030 0010             		move.w	smash_speed(a0),obVelX(a1)
0000F39A 49F9 0000 0000             		lea	(Smash_FragSpd1).l,a4 ;	use fragments that move	right
0000F3A0 3028 0008                  		move.w	obX(a0),d0
0000F3A4 B069 0008                  		cmp.w	obX(a1),d0	; is Sonic to the right	of the block?
0000F3A8 6500                       		bcs.s	@smash		; if yes, branch
0000F3AA 49F9 0000 0000             		lea	(Smash_FragSpd2).l,a4 ;	use fragments that move	left
0000F3B0                            
0000F3B0                            	@smash:
0000F3B0 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000F3B6 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000F3BC 7206                       		moveq	#6,d1		; load 7 fragments
0000F3BE 343C 0070                  		move.w	#$70,d2
0000F3C2 6100                       		bsr.s	SmashObject
0000F3C4                            
0000F3C4                            @donothing:
0000F3C4 4E75                       		rts	
0000F3C6                            
0000F3C6                            Smash_FragMove:	; Routine 4
0000F3C6 588F                       		addq.l	#4,sp
0000F3C8 6100 0000                  		bsr.w	SpeedToPos
0000F3CC 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make fragment	fall faster
0000F3D2 4A28 0001                  		tst.b	obRender(a0)
0000F3D6 6A00 0000                  		bpl.w	DeleteObject
0000F3DA 6000 0000                  		bra.w	DisplaySprite
0000F3DE                            
0000F3DE                            
0000F3DE                            
0000F3DE                            		include	"_incObj\sub SmashObject.asm"
0000F3DE                            ; ---------------------------------------------------------------------------
0000F3DE                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000F3DE                            ; ---------------------------------------------------------------------------
0000F3DE                            
0000F3DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F3DE                            
0000F3DE                            
0000F3DE                            SmashObject:
0000F3DE 7000                       		moveq	#0,d0
0000F3E0 1028 001A                  		move.b	obFrame(a0),d0
0000F3E4 D040                       		add.w	d0,d0
0000F3E6 2668 0004                  		movea.l	obMap(a0),a3
0000F3EA D6F3 0000                  		adda.w	(a3,d0.w),a3
0000F3EE 524B                       		addq.w	#1,a3
0000F3F0 08E8 0005 0001             		bset	#5,obRender(a0)
0000F3F6 1810                       		move.b	0(a0),d4
0000F3F8 1A28 0001                  		move.b	obRender(a0),d5
0000F3FC 2248                       		movea.l	a0,a1
0000F3FE 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F404 1284                       		move.b	d4,0(a1)
0000F406 234B 0004                  		move.l	a3,obMap(a1)
0000F40A 1345 0001                  		move.b	d5,obRender(a1)
0000F40E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F414 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F41A 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F420 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F426 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F42C 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F430 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F434 5341                       		subq.w #1,d1
0000F436 43F8 D800                  		lea (v_lvlobjspace).w,a1
0000F43A 303C 005F                  		move.w #$5F,d0
0000F43E                            ; ===========================================================================
0000F43E                            
0000F43E                            Smash_Loop:
0000F43E 4A11                       		tst.b	(a1)
0000F440 6700                       		beq.s	@cont
0000F442 43E9 0040                  		lea		$40(a1),a1
0000F446 51C8 FFF6                  		dbf 	d0,Smash_Loop 
0000F44A 6600                       		bne.s	Smash_PlaySnd
0000F44C                            
0000F44C                            	@cont:
0000F44C 5A4B                       		addq.w #5,a3
0000F44E                            
0000F44E                            Smash_LoadFrag:				; XREF: SmashObject
0000F44E 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F454 1284                       		move.b	d4,0(a1)
0000F456 234B 0004                  		move.l	a3,obMap(a1)
0000F45A 1345 0001                  		move.b	d5,obRender(a1)
0000F45E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F464 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F46A 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F470 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F476 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F47C 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F480 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F484 51C9 FFB8                  		dbf	d1,Smash_Loop
0000F488                            
0000F488                            Smash_PlaySnd:
0000F488 303C 0000                  		move.w	#sfx_WallSmash,d0
0000F48C 4EF9 0000 12FE             		jmp	(PlaySound_Special).l ; play smashing sound
0000F492                            
0000F492                            ; End of function SmashObject
0000F492                            ; End of function SmashObject
0000F492                            
0000F492                            ; ===========================================================================
0000F492                            ; Smashed block	fragment speeds
0000F492                            ;
0000F492 0400 FB00                  Smash_FragSpd1:	dc.w $400, -$500	; x-move speed,	y-move speed
0000F496 0600 FF00                  		dc.w $600, -$100
0000F49A 0600 0100                  		dc.w $600, $100
0000F49E 0400 0500                  		dc.w $400, $500
0000F4A2 0600 FA00                  		dc.w $600, -$600
0000F4A6 0800 FE00                  		dc.w $800, -$200
0000F4AA 0800 0200                  		dc.w $800, $200
0000F4AE 0600 0600                  		dc.w $600, $600
0000F4B2                            
0000F4B2 FA00 FA00                  Smash_FragSpd2:	dc.w -$600, -$600
0000F4B6 F800 FE00                  		dc.w -$800, -$200
0000F4BA F800 0200                  		dc.w -$800, $200
0000F4BE FA00 0600                  		dc.w -$600, $600
0000F4C2 FC00 FB00                  		dc.w -$400, -$500
0000F4C6 FA00 FF00                  		dc.w -$600, -$100
0000F4CA FA00 0100                  		dc.w -$600, $100
0000F4CE FC00 0500                  		dc.w -$400, $500
0000F4D2                            
0000F4D2                            Map_Smash:	include	"_maps\Smashable Walls.asm"
0000F4D2                            ; ---------------------------------------------------------------------------
0000F4D2                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000F4D2                            ; ---------------------------------------------------------------------------
0000F4D2                            Map_Smash_internal:
0000F4D2 0000                       		dc.w @left-Map_Smash_internal
0000F4D4 0000                       		dc.w @middle-Map_Smash_internal
0000F4D6 0000                       		dc.w @right-Map_Smash_internal
0000F4D8 08                         @left:		dc.b 8
0000F4D9 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000F4DE F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000F4E3 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000F4E8 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000F4ED E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F4F2 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F4F7 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F4FC 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F501 08                         @middle:	dc.b 8
0000F502 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F507 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F50C 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F511 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F516 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F51B F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F520 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F525 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F52A 08                         @right:		dc.b 8
0000F52B E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F530 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F535 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F53A 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F53F E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000F544 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000F549 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000F54E 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000F554 00                         		even
0000F554 00                         		even
0000F554                            
0000F554                            ; ---------------------------------------------------------------------------
0000F554                            ; Object code execution subroutine
0000F554                            ; ---------------------------------------------------------------------------
0000F554                            
0000F554                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F554                            
0000F554                            
0000F554                            
0000F554                            ExecuteObjects: ; XREF: GM_Title; et al
0000F554 41F8 D000                  		lea (v_objspace).w,a0 ; set address for object RAM
0000F558 7E7F                       		moveq #$7F,d7
0000F55A 7000                       		moveq #0,d0
0000F55C 0C38 0006 D024             		cmpi.b #6,(v_player+obRoutine).w
0000F562 6400                       		bcc.s loc_D362
0000F564                            
0000F564                            loc_D348:
0000F564 1010                       		move.b (a0),d0 ; load object number from RAM
0000F566 6700                       		beq.s loc_D358
0000F568 D040                       		add.w d0,d0
0000F56A D040                       		add.w d0,d0
0000F56C 227B 0000                  		movea.l Obj_Index-4(pc,d0.w),a1
0000F570 4E91                       		jsr (a1) ; run the object's code
0000F572 7000                       		moveq #0,d0
0000F574                            
0000F574                            loc_D358:
0000F574 41E8 0040                  		lea $40(a0),a0 ; next object
0000F578 51CF FFEA                  		dbf d7,loc_D348
0000F57C 4E75                       		rts
0000F57E                            ; ===========================================================================
0000F57E                            
0000F57E                            loc_D362:
0000F57E 7E1F                       		moveq #$1F,d7
0000F580 61E2                       		bsr.s loc_D348
0000F582 7E5F                       		moveq #$5F,d7
0000F584                            
0000F584                            loc_D368:
0000F584 7000                       		moveq #0,d0 ; Clear d0 quickly
0000F586 1010                       		move.b (a0),d0 ; get the object's ID
0000F588 6700                       		beq.s loc_D37C ; if it's obj00, skip it
0000F58A 4A28 0001                  		tst.b obRender(a0) ; should we render it?
0000F58E 6A00                       		bpl.s loc_D37C ; if not, skip it
0000F590 3028 0018                  		move.w obpriority(a0),d0 ; move object's priority to d0
0000F594 0828 0006 0001             		btst #6,obRender(a0) ; is the compound sprites flag set?
0000F59A 6700                       		beq.s loc_D378 ; if not, branch
0000F59C 303C 0200                  		move.w #$200,d0 ; move $200 to d0
0000F5A0                            
0000F5A0                            loc_D378:
0000F5A0 6100 0000                  		bsr.w DisplaySprite2
0000F5A4                            		
0000F5A4                            loc_D37C:
0000F5A4 41E8 0040                  		lea $40(a0),a0
0000F5A8 51CF FFDA                  		dbf d7,loc_D368
0000F5AC 4E75                       		rts
0000F5AE                            ; End of function ExecuteObjects
0000F5AE                            
0000F5AE                            ; ===========================================================================
0000F5AE                            ; ---------------------------------------------------------------------------
0000F5AE                            ; Object pointers
0000F5AE                            ; ---------------------------------------------------------------------------
0000F5AE                            Obj_Index:
0000F5AE                            		include	"_inc\Object Pointers.asm"
0000F5AE                            ; ---------------------------------------------------------------------------
0000F5AE                            ; Object pointers
0000F5AE                            ; ---------------------------------------------------------------------------
0000F5AE 0000 0000                  ptr_SonicPlayer:	dc.l SonicPlayer	; $01
0000F5B2 0000 0000                  ptr_Obj02:			dc.l ObjectFall
0000F5B6 0000 0000                  ptr_Obj03:			dc.l Obj03
0000F5BA 0000 0000                  ptr_GShieldItem:	dc.l GShieldItem
0000F5BE 0000 0000                  ptr_Obj05:		dc.l Spindash_dust
0000F5C2 0000 B2A4                  ptr_Mozzietron:		dc.l Mozzietron
0000F5C6 0000 0000                  ptr_RShieldItem:	dc.l RShieldItem	
0000F5CA 0000 0000                  ptr_Splash:		dc.l Splash		; $08
0000F5CE 0000 0000                  ptr_SonicSpecial:	dc.l SonicSpecial
0000F5D2 0000 0000                  ptr_DrownCount:		dc.l DrownCount
0000F5D6 0000 0000                  ptr_Pole:		dc.l Pole
0000F5DA 0000 0000                  ptr_FlapDoor:		dc.l FlapDoor
0000F5DE 0000 0000                  ptr_Signpost:		dc.l Signpost
0000F5E2 0000 C6C2                  ptr_TitleSonic:		dc.l TitleSonic
0000F5E6 0000 C742                  ptr_PSBTM:		dc.l PSBTM
0000F5EA 0000 0000                  ptr_Obj10:		dc.l Obj10		; $10
0000F5EE 0000 8B68                  ptr_Bridge:		dc.l Bridge
0000F5F2 0000 0000                  ptr_SpinningLight:	dc.l SpinningLight
0000F5F6 0000 0000                  ptr_LavaMaker:		dc.l LavaMaker
0000F5FA 0000 0000                  ptr_LavaBall:		dc.l LavaBall
0000F5FE 0000 918E                  ptr_SwingingPlatform:	dc.l SwingingPlatform
0000F602 0000 0000                  ptr_Harpoon:		dc.l Harpoon
0000F606 0000 94DA                  ptr_Helix:		dc.l Helix
0000F60A 0000 9666                  ptr_BasicPlatform:	dc.l BasicPlatform	; $18
0000F60E 0000 0000                  ptr_InvStars:		dc.l InvStarsObj
0000F612 0000 9A42                  ptr_CollapseLedge:	dc.l CollapseLedge
0000F616 0000 0000                  ptr_WaterSurface:	dc.l WaterSurface
0000F61A 0000 A04A                  ptr_Scenery:		dc.l Scenery
0000F61E 0000 A0EC                  ptr_WaterSwitcher:	dc.l WaterSwitcher
0000F622 0000 A602                  ptr_BallHog:		dc.l BallHog
0000F626 0000 AFBA                  ptr_Crabmeat:		dc.l Crabmeat
0000F62A 0000 A6D0                  ptr_Cannonball:		dc.l Cannonball		; $20
0000F62E 0000 0000                  ptr_HUD:		dc.l HUD
0000F632 0000 B3D6                  ptr_BuzzBomber:		dc.l BuzzBomber
0000F636 0000 B528                  ptr_Missile:		dc.l Missile
0000F63A 0000 A7A2                  ptr_MissileDissolve:	dc.l MissileDissolve
0000F63E 0000 B782                  ptr_Rings:		dc.l Rings
0000F642 0000 BFCC                  ptr_Monitor:		dc.l Monitor
0000F646 0000 A812                  ptr_ExplosionItem:	dc.l ExplosionItem
0000F64A 0000 A9D0                  ptr_Animals:		dc.l Animals		; $28
0000F64E 0000 AEBE                  ptr_Points:		dc.l Points
0000F652 0000 A3F0                  ptr_AutoDoor:		dc.l AutoDoor
0000F656 0000 CCEC                  ptr_Chopper:		dc.l Chopper
0000F65A 0000 CDA6                  ptr_Jaws:		dc.l Jaws
0000F65E 0000 CE70                  ptr_Burrobot:		dc.l Burrobot
0000F662 0000 C1CA                  ptr_PowerUp:		dc.l PowerUp
0000F666 0000 D084                  ptr_LargeGrass:		dc.l LargeGrass
0000F66A 0000 D566                  ptr_GlassBlock:		dc.l GlassBlock		; $30
0000F66E 0000 D842                  ptr_ChainStomp:		dc.l ChainStomp
0000F672 0000 DEF0                  ptr_Button:		dc.l Button
0000F676 0000 E094                  ptr_PushBlock:		dc.l PushBlock
0000F67A 0000 E4C6                  ptr_TitleCard:		dc.l TitleCard
0000F67E 0000 D3A6                  ptr_GrassFire:		dc.l GrassFire
0000F682 0000 F00E                  ptr_Spikes:		dc.l Spikes
0000F686 0000 B9DE                  ptr_RingLoss:		dc.l RingLoss
0000F68A 0000 0000                  ptr_ShieldItem:		dc.l ShieldItem		; $38
0000F68E 0000 E676                  ptr_GameOverCard:	dc.l GameOverCard
0000F692 0000 E734                  ptr_GotThroughCard:	dc.l GotThroughCard
0000F696 0000 F23C                  ptr_PurpleRock:		dc.l PurpleRock
0000F69A 0000 F308                  ptr_SmashWall:		dc.l SmashWall
0000F69E 0000 0000                  ptr_BossGreenHill:	dc.l BossGreenHill
0000F6A2 0000 0000                  ptr_Prison:		dc.l Prison
0000F6A6 0000 A8A4                  ptr_ExplosionBomb:	dc.l ExplosionBomb
0000F6AA 0000 0000                  ptr_MotoBug:		dc.l MotoBug		; $40
0000F6AE 0000 0000                  ptr_Springs:		dc.l Springs
0000F6B2 0000 0000                  ptr_Newtron:		dc.l Newtron
0000F6B6 0000 0000                  ptr_Roller:		dc.l Roller
0000F6BA 0000 0000                  ptr_EdgeWalls:		dc.l EdgeWalls
0000F6BE 0000 DB5E                  ptr_SideStomp:		dc.l SideStomp
0000F6C2 0000 0000                  ptr_MarbleBrick:	dc.l MarbleBrick
0000F6C6 0000 0000                  ptr_Bumper:		dc.l Bumper
0000F6CA 0000 0000                  ptr_BossBall:		dc.l BossBall		; $48
0000F6CE 0000 F2AA                  ptr_WaterSound:		dc.l WaterSound
0000F6D2 0000 0000                  ptr_VanishSonic:	dc.l VanishSonic
0000F6D6 0000 BCA0                  ptr_GiantRing:		dc.l GiantRing
0000F6DA 0000 0000                  ptr_GeyserMaker:	dc.l GeyserMaker
0000F6DE 0000 0000                  ptr_LavaGeyser:		dc.l LavaGeyser
0000F6E2 0000 0000                  ptr_SpShieldItem:	dc.l SpShieldItem
0000F6E6 0000 0000                  ptr_Obj4F:		dc.l Obj4F
0000F6EA 0000 0000                  ptr_Yadrin:		dc.l Yadrin		; $50
0000F6EE 0000 0000                  ptr_SmashBlock:		dc.l SmashBlock
0000F6F2 0000 0000                  ptr_MovingBlock:	dc.l MovingBlock
0000F6F6 0000 9B52                  ptr_CollapseFloor:	dc.l CollapseFloor
0000F6FA 0000 0000                  ptr_LavaTag:		dc.l LavaTag
0000F6FE 0000 0000                  ptr_Basaran:		dc.l Basaran
0000F702 0000 0000                  ptr_FloatingBlock:	dc.l FloatingBlock
0000F706 0000 0000                  ptr_SpikeBall:		dc.l SpikeBall
0000F70A 0000 0000                  ptr_BigSpikeBall:	dc.l BigSpikeBall	; $58
0000F70E 0000 0000                  ptr_Elevator:		dc.l Elevator
0000F712 0000 0000                  ptr_CirclingPlatform:	dc.l CirclingPlatform
0000F716 0000 0000                  ptr_Staircase:		dc.l Staircase
0000F71A 0000 0000                  ptr_Pylon:		dc.l Pylon
0000F71E 0000 0000                  ptr_Fan:		dc.l Fan
0000F722 0000 0000                  ptr_Seesaw:		dc.l Seesaw
0000F726 0000 0000                  ptr_Bomb:		dc.l Bomb
0000F72A 0000 0000                  ptr_Orbinaut:		dc.l Orbinaut		; $60
0000F72E 0000 0000                  ptr_LabyrinthBlock:	dc.l LabyrinthBlock
0000F732 0000 0000                  ptr_Gargoyle:		dc.l Gargoyle
0000F736 0000 0000                  ptr_LabyrinthConvey:	dc.l LabyrinthConvey
0000F73A 0000 0000                  ptr_Bubble:		dc.l Bubble
0000F73E 0000 0000                  ptr_Waterfall:		dc.l Waterfall
0000F742 0000 0000                  ptr_Junction:		dc.l Junction
0000F746 0000 0000                  ptr_RunningDisc:	dc.l RunningDisc
0000F74A 0000 0000                  ptr_Conveyor:		dc.l Conveyor		; $68
0000F74E 0000 0000                  ptr_SpinPlatform:	dc.l SpinPlatform
0000F752 0000 0000                  ptr_Saws:		dc.l Saws
0000F756 0000 0000                  ptr_ScrapStomp:		dc.l ScrapStomp
0000F75A 0000 0000                  ptr_VanishPlatform:	dc.l VanishPlatform
0000F75E 0000 0000                  ptr_Flamethrower:	dc.l Flamethrower
0000F762 0000 0000                  ptr_Electro:		dc.l Electro
0000F766 0000 0000                  ptr_SpinConvey:		dc.l SpinConvey
0000F76A 0000 0000                  ptr_Girder:		dc.l Girder		; $70
0000F76E 0000 0000                  ptr_Invisibarrier:	dc.l Invisibarrier
0000F772 0000 0000                  ptr_Teleport:		dc.l Teleport
0000F776 0000 0000                  ptr_BossMarble:		dc.l BossMarble
0000F77A 0000 0000                  ptr_BossFire:		dc.l BossFire
0000F77E 0000 0000                  ptr_BossSpringYard:	dc.l BossSpringYard
0000F782 0000 0000                  ptr_BossBlock:		dc.l BossBlock
0000F786 0000 0000                  ptr_BossLabyrinth:	dc.l BossLabyrinth
0000F78A 0000 0000                  ptr_Caterkiller:	dc.l Caterkiller	; $78
0000F78E 0000 0000                  ptr_Lamppost:		dc.l Lamppost
0000F792 0000 0000                  ptr_BossStarLight:	dc.l BossStarLight
0000F796 0000 0000                  ptr_BossSpikeball:	dc.l BossSpikeball
0000F79A 0000 BD7A                  ptr_RingFlash:		dc.l RingFlash
0000F79E 0000 0000                  ptr_HiddenBonus:	dc.l HiddenBonus
0000F7A2 0000 E96E                  ptr_SSResult:		dc.l SSResult
0000F7A6 0000 EB14                  ptr_SSRChaos:		dc.l SSRChaos
0000F7AA 0000 60D2                  ptr_ContScrItem:	dc.l ContScrItem	; $80
0000F7AE 0000 61EA                  ptr_ContSonic:		dc.l ContSonic
0000F7B2 0000 0000                  ptr_ScrapEggman:	dc.l ScrapEggman
0000F7B6 0000 0000                  ptr_FalseFloor:		dc.l FalseFloor
0000F7BA 0000 0000                  ptr_EggmanCylinder:	dc.l EggmanCylinder
0000F7BE 0000 0000                  ptr_BossFinal:		dc.l BossFinal
0000F7C2 0000 0000                  ptr_BossPlasma:		dc.l BossPlasma
0000F7C6 0000 6670                  ptr_EndSonic:		dc.l EndSonic
0000F7CA 0000 67CA                  ptr_EndChaos:		dc.l EndChaos		; $88
0000F7CE 0000 68A4                  ptr_EndSTH:		dc.l EndSTH
0000F7D2 0000 0000                  ptr_CreditsText:	dc.l CreditsText
0000F7D6 0000 6B1E                  ptr_EndEggman:		dc.l EndEggman
0000F7DA 0000 6BFE                  ptr_TryChaos:		dc.l TryChaos
0000F7DE 0000 0000                  ptr_SuperStars:		dc.l SuperStars
0000F7E2                            
0000F7E2                            NullObject:
0000F7E2                            		;jmp	(DeleteObject).l	; It would be safer to have this instruction here, but instead it just falls through to ObjectFall
0000F7E2                            
0000F7E2 =00000001                  id_SonicPlayer:		equ ((ptr_SonicPlayer-Obj_Index)/4)+1		; $01
0000F7E2 =00000002                  id_Obj02:		equ ((ptr_Obj02-Obj_Index)/4)+1
0000F7E2 =00000003                  id_Obj03:		equ ((ptr_Obj03-Obj_Index)/4)+1
0000F7E2 =00000004                  id_GShielditem:		equ ((ptr_GShieldItem-Obj_Index)/4)+1
0000F7E2 =00000005                  id_Obj05:		equ ((ptr_Obj05-Obj_Index)/4)+1
0000F7E2 =00000006                  id_Mozzietron:		equ ((ptr_Mozzietron-Obj_Index)/4)+1
0000F7E2 =00000007                  id_RShieldItem:		equ ((ptr_RShieldItem-Obj_Index)/4)+1	
0000F7E2 =00000008                  id_Splash:		equ ((ptr_Splash-Obj_Index)/4)+1		; $08
0000F7E2 =00000009                  id_SonicSpecial:	equ ((ptr_SonicSpecial-Obj_Index)/4)+1
0000F7E2 =0000000A                  id_DrownCount:		equ ((ptr_DrownCount-Obj_Index)/4)+1
0000F7E2 =0000000B                  id_Pole:		equ ((ptr_Pole-Obj_Index)/4)+1
0000F7E2 =0000000C                  id_FlapDoor:		equ ((ptr_FlapDoor-Obj_Index)/4)+1
0000F7E2 =0000000D                  id_Signpost:		equ ((ptr_Signpost-Obj_Index)/4)+1
0000F7E2 =0000000E                  id_TitleSonic:		equ ((ptr_TitleSonic-Obj_Index)/4)+1
0000F7E2 =0000000F                  id_PSBTM:		equ ((ptr_PSBTM-Obj_Index)/4)+1
0000F7E2 =00000010                  id_Obj10:		equ ((ptr_Obj10-Obj_Index)/4)+1			; $10
0000F7E2 =00000011                  id_Bridge:		equ ((ptr_Bridge-Obj_Index)/4)+1
0000F7E2 =00000012                  id_SpinningLight:	equ ((ptr_SpinningLight-Obj_Index)/4)+1
0000F7E2 =00000013                  id_LavaMaker:		equ ((ptr_LavaMaker-Obj_Index)/4)+1
0000F7E2 =00000014                  id_LavaBall:		equ ((ptr_LavaBall-Obj_Index)/4)+1
0000F7E2 =00000015                  id_SwingingPlatform:	equ ((ptr_SwingingPlatform-Obj_Index)/4)+1
0000F7E2 =00000016                  id_Harpoon:		equ ((ptr_Harpoon-Obj_Index)/4)+1
0000F7E2 =00000017                  id_Helix:		equ ((ptr_Helix-Obj_Index)/4)+1
0000F7E2 =00000018                  id_BasicPlatform:	equ ((ptr_BasicPlatform-Obj_Index)/4)+1		; $18
0000F7E2 =00000019                  id_InvStars:		equ ((ptr_InvStars-Obj_Index)/4)+1
0000F7E2 =0000001A                  id_CollapseLedge:	equ ((ptr_CollapseLedge-Obj_Index)/4)+1
0000F7E2 =0000001B                  id_WaterSurface:	equ ((ptr_WaterSurface-Obj_Index)/4)+1
0000F7E2 =0000001C                  id_Scenery:		equ ((ptr_Scenery-Obj_Index)/4)+1
0000F7E2 =0000001D                  id_WaterSwitcher:		equ ((ptr_WaterSwitcher-Obj_Index)/4)+1
0000F7E2 =0000001E                  id_BallHog:		equ ((ptr_BallHog-Obj_Index)/4)+1
0000F7E2 =0000001F                  id_Crabmeat:		equ ((ptr_Crabmeat-Obj_Index)/4)+1
0000F7E2 =00000020                  id_Cannonball:		equ ((ptr_Cannonball-Obj_Index)/4)+1		; $20
0000F7E2 =00000021                  id_HUD:			equ ((ptr_HUD-Obj_Index)/4)+1
0000F7E2 =00000022                  id_BuzzBomber:		equ ((ptr_BuzzBomber-Obj_Index)/4)+1
0000F7E2 =00000023                  id_Missile:		equ ((ptr_Missile-Obj_Index)/4)+1
0000F7E2 =00000024                  id_MissileDissolve:	equ ((ptr_MissileDissolve-Obj_Index)/4)+1
0000F7E2 =00000025                  id_Rings:		equ ((ptr_Rings-Obj_Index)/4)+1
0000F7E2 =00000026                  id_Monitor:		equ ((ptr_Monitor-Obj_Index)/4)+1
0000F7E2 =00000027                  id_ExplosionItem:	equ ((ptr_ExplosionItem-Obj_Index)/4)+1
0000F7E2 =00000028                  id_Animals:		equ ((ptr_Animals-Obj_Index)/4)+1		; $28
0000F7E2 =00000029                  id_Points:		equ ((ptr_Points-Obj_Index)/4)+1
0000F7E2 =0000002A                  id_AutoDoor:		equ ((ptr_AutoDoor-Obj_Index)/4)+1
0000F7E2 =0000002B                  id_Chopper:		equ ((ptr_Chopper-Obj_Index)/4)+1
0000F7E2 =0000002C                  id_Jaws:		equ ((ptr_Jaws-Obj_Index)/4)+1
0000F7E2 =0000002D                  id_Burrobot:		equ ((ptr_Burrobot-Obj_Index)/4)+1
0000F7E2 =0000002E                  id_PowerUp:		equ ((ptr_PowerUp-Obj_Index)/4)+1
0000F7E2 =0000002F                  id_LargeGrass:		equ ((ptr_LargeGrass-Obj_Index)/4)+1
0000F7E2 =00000030                  id_GlassBlock:		equ ((ptr_GlassBlock-Obj_Index)/4)+1		; $30
0000F7E2 =00000031                  id_ChainStomp:		equ ((ptr_ChainStomp-Obj_Index)/4)+1
0000F7E2 =00000032                  id_Button:		equ ((ptr_Button-Obj_Index)/4)+1
0000F7E2 =00000033                  id_PushBlock:		equ ((ptr_PushBlock-Obj_Index)/4)+1
0000F7E2 =00000034                  id_TitleCard:		equ ((ptr_TitleCard-Obj_Index)/4)+1
0000F7E2 =00000035                  id_GrassFire:		equ ((ptr_GrassFire-Obj_Index)/4)+1
0000F7E2 =00000036                  id_Spikes:		equ ((ptr_Spikes-Obj_Index)/4)+1
0000F7E2 =00000037                  id_RingLoss:		equ ((ptr_RingLoss-Obj_Index)/4)+1
0000F7E2 =00000038                  id_ShieldItem:		equ ((ptr_ShieldItem-Obj_Index)/4)+1		; $38
0000F7E2 =00000039                  id_GameOverCard:	equ ((ptr_GameOverCard-Obj_Index)/4)+1
0000F7E2 =0000003A                  id_GotThroughCard:	equ ((ptr_GotThroughCard-Obj_Index)/4)+1
0000F7E2 =0000003B                  id_PurpleRock:		equ ((ptr_PurpleRock-Obj_Index)/4)+1
0000F7E2 =0000003C                  id_SmashWall:		equ ((ptr_SmashWall-Obj_Index)/4)+1
0000F7E2 =0000003D                  id_BossGreenHill:	equ ((ptr_BossGreenHill-Obj_Index)/4)+1
0000F7E2 =0000003E                  id_Prison:		equ ((ptr_Prison-Obj_Index)/4)+1
0000F7E2 =0000003F                  id_ExplosionBomb:	equ ((ptr_ExplosionBomb-Obj_Index)/4)+1
0000F7E2 =00000040                  id_MotoBug:		equ ((ptr_MotoBug-Obj_Index)/4)+1		; $40
0000F7E2 =00000041                  id_Springs:		equ ((ptr_Springs-Obj_Index)/4)+1
0000F7E2 =00000042                  id_Newtron:		equ ((ptr_Newtron-Obj_Index)/4)+1
0000F7E2 =00000043                  id_Roller:		equ ((ptr_Roller-Obj_Index)/4)+1
0000F7E2 =00000044                  id_EdgeWalls:		equ ((ptr_EdgeWalls-Obj_Index)/4)+1
0000F7E2 =00000045                  id_SideStomp:		equ ((ptr_SideStomp-Obj_Index)/4)+1
0000F7E2 =00000046                  id_MarbleBrick:		equ ((ptr_MarbleBrick-Obj_Index)/4)+1
0000F7E2 =00000047                  id_Bumper:		equ ((ptr_Bumper-Obj_Index)/4)+1
0000F7E2 =00000048                  id_BossBall:		equ ((ptr_BossBall-Obj_Index)/4)+1		; $48
0000F7E2 =00000049                  id_WaterSound:		equ ((ptr_WaterSound-Obj_Index)/4)+1
0000F7E2 =0000004A                  id_VanishSonic:		equ ((ptr_VanishSonic-Obj_Index)/4)+1
0000F7E2 =0000004B                  id_GiantRing:		equ ((ptr_GiantRing-Obj_Index)/4)+1
0000F7E2 =0000004C                  id_GeyserMaker:		equ ((ptr_GeyserMaker-Obj_Index)/4)+1
0000F7E2 =0000004D                  id_LavaGeyser:		equ ((ptr_LavaGeyser-Obj_Index)/4)+1
0000F7E2 =0000004E                  id_SpShieldItem:		equ ((ptr_SpShieldItem-Obj_Index)/4)+1
0000F7E2 =0000004F                  id_Obj4F:		equ ((ptr_Obj4F-Obj_Index)/4)+1
0000F7E2 =00000050                  id_Yadrin:		equ ((ptr_Yadrin-Obj_Index)/4)+1		; $50
0000F7E2 =00000051                  id_SmashBlock:		equ ((ptr_SmashBlock-Obj_Index)/4)+1
0000F7E2 =00000052                  id_MovingBlock:		equ ((ptr_MovingBlock-Obj_Index)/4)+1
0000F7E2 =00000053                  id_CollapseFloor:	equ ((ptr_CollapseFloor-Obj_Index)/4)+1
0000F7E2 =00000054                  id_LavaTag:		equ ((ptr_LavaTag-Obj_Index)/4)+1
0000F7E2 =00000055                  id_Basaran:		equ ((ptr_Basaran-Obj_Index)/4)+1
0000F7E2 =00000056                  id_FloatingBlock:	equ ((ptr_FloatingBlock-Obj_Index)/4)+1
0000F7E2 =00000057                  id_SpikeBall:		equ ((ptr_SpikeBall-Obj_Index)/4)+1
0000F7E2 =00000058                  id_BigSpikeBall:	equ ((ptr_BigSpikeBall-Obj_Index)/4)+1		; $58
0000F7E2 =00000059                  id_Elevator:		equ ((ptr_Elevator-Obj_Index)/4)+1
0000F7E2 =0000005A                  id_CirclingPlatform:	equ ((ptr_CirclingPlatform-Obj_Index)/4)+1
0000F7E2 =0000005B                  id_Staircase:		equ ((ptr_Staircase-Obj_Index)/4)+1
0000F7E2 =0000005C                  id_Pylon:		equ ((ptr_Pylon-Obj_Index)/4)+1
0000F7E2 =0000005D                  id_Fan:			equ ((ptr_Fan-Obj_Index)/4)+1
0000F7E2 =0000005E                  id_Seesaw:		equ ((ptr_Seesaw-Obj_Index)/4)+1
0000F7E2 =0000005F                  id_Bomb:		equ ((ptr_Bomb-Obj_Index)/4)+1
0000F7E2 =00000060                  id_Orbinaut:		equ ((ptr_Orbinaut-Obj_Index)/4)+1		; $60
0000F7E2 =00000061                  id_LabyrinthBlock:	equ ((ptr_LabyrinthBlock-Obj_Index)/4)+1
0000F7E2 =00000062                  id_Gargoyle:		equ ((ptr_Gargoyle-Obj_Index)/4)+1
0000F7E2 =00000063                  id_LabyrinthConvey:	equ ((ptr_LabyrinthConvey-Obj_Index)/4)+1
0000F7E2 =00000064                  id_Bubble:		equ ((ptr_Bubble-Obj_Index)/4)+1
0000F7E2 =00000065                  id_Waterfall:		equ ((ptr_Waterfall-Obj_Index)/4)+1
0000F7E2 =00000066                  id_Junction:		equ ((ptr_Junction-Obj_Index)/4)+1
0000F7E2 =00000067                  id_RunningDisc:		equ ((ptr_RunningDisc-Obj_Index)/4)+1
0000F7E2 =00000068                  id_Conveyor:		equ ((ptr_Conveyor-Obj_Index)/4)+1		; $68
0000F7E2 =00000069                  id_SpinPlatform:	equ ((ptr_SpinPlatform-Obj_Index)/4)+1
0000F7E2 =0000006A                  id_Saws:		equ ((ptr_Saws-Obj_Index)/4)+1
0000F7E2 =0000006B                  id_ScrapStomp:		equ ((ptr_ScrapStomp-Obj_Index)/4)+1
0000F7E2 =0000006C                  id_VanishPlatform:	equ ((ptr_VanishPlatform-Obj_Index)/4)+1
0000F7E2 =0000006D                  id_Flamethrower:	equ ((ptr_Flamethrower-Obj_Index)/4)+1
0000F7E2 =0000006E                  id_Electro:		equ ((ptr_Electro-Obj_Index)/4)+1
0000F7E2 =0000006F                  id_SpinConvey:		equ ((ptr_SpinConvey-Obj_Index)/4)+1
0000F7E2 =00000070                  id_Girder:		equ ((ptr_Girder-Obj_Index)/4)+1		; $70
0000F7E2 =00000071                  id_Invisibarrier:	equ ((ptr_Invisibarrier-Obj_Index)/4)+1
0000F7E2 =00000072                  id_Teleport:		equ ((ptr_Teleport-Obj_Index)/4)+1
0000F7E2 =00000073                  id_BossMarble:		equ ((ptr_BossMarble-Obj_Index)/4)+1
0000F7E2 =00000074                  id_BossFire:		equ ((ptr_BossFire-Obj_Index)/4)+1
0000F7E2 =00000075                  id_BossSpringYard:	equ ((ptr_BossSpringYard-Obj_Index)/4)+1
0000F7E2 =00000076                  id_BossBlock:		equ ((ptr_BossBlock-Obj_Index)/4)+1
0000F7E2 =00000077                  id_BossLabyrinth:	equ ((ptr_BossLabyrinth-Obj_Index)/4)+1
0000F7E2 =00000078                  id_Caterkiller:		equ ((ptr_Caterkiller-Obj_Index)/4)+1		; $78
0000F7E2 =00000079                  id_Lamppost:		equ ((ptr_Lamppost-Obj_Index)/4)+1
0000F7E2 =0000007A                  id_BossStarLight:	equ ((ptr_BossStarLight-Obj_Index)/4)+1
0000F7E2 =0000007B                  id_BossSpikeball:	equ ((ptr_BossSpikeball-Obj_Index)/4)+1
0000F7E2 =0000007C                  id_RingFlash:		equ ((ptr_RingFlash-Obj_Index)/4)+1
0000F7E2 =0000007D                  id_HiddenBonus:		equ ((ptr_HiddenBonus-Obj_Index)/4)+1
0000F7E2 =0000007E                  id_SSResult:		equ ((ptr_SSResult-Obj_Index)/4)+1
0000F7E2 =0000007F                  id_SSRChaos:		equ ((ptr_SSRChaos-Obj_Index)/4)+1
0000F7E2 =00000080                  id_ContScrItem:		equ ((ptr_ContScrItem-Obj_Index)/4)+1		; $80
0000F7E2 =00000081                  id_ContSonic:		equ ((ptr_ContSonic-Obj_Index)/4)+1
0000F7E2 =00000082                  id_ScrapEggman:		equ ((ptr_ScrapEggman-Obj_Index)/4)+1
0000F7E2 =00000083                  id_FalseFloor:		equ ((ptr_FalseFloor-Obj_Index)/4)+1
0000F7E2 =00000084                  id_EggmanCylinder:	equ ((ptr_EggmanCylinder-Obj_Index)/4)+1
0000F7E2 =00000085                  id_BossFinal:		equ ((ptr_BossFinal-Obj_Index)/4)+1
0000F7E2 =00000086                  id_BossPlasma:		equ ((ptr_BossPlasma-Obj_Index)/4)+1
0000F7E2 =00000087                  id_EndSonic:		equ ((ptr_EndSonic-Obj_Index)/4)+1
0000F7E2 =00000088                  id_EndChaos:		equ ((ptr_EndChaos-Obj_Index)/4)+1		; $88
0000F7E2 =00000089                  id_EndSTH:		equ ((ptr_EndSTH-Obj_Index)/4)+1
0000F7E2 =0000008A                  id_CreditsText:		equ ((ptr_CreditsText-Obj_Index)/4)+1
0000F7E2 =0000008B                  id_EndEggman:		equ ((ptr_EndEggman-Obj_Index)/4)+1
0000F7E2 =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F7E2 =0000008D                  id_SuperStars:		equ ((ptr_SuperStars-Obj_Index)/4)+1
0000F7E2 =0000008D                  id_SuperStars:		equ ((ptr_SuperStars-Obj_Index)/4)+1
0000F7E2                            
0000F7E2                            		include	"_incObj\sub ObjectFall.asm"
0000F7E2                            ; ---------------------------------------------------------------------------
0000F7E2                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000F7E2                            ; ---------------------------------------------------------------------------
0000F7E2                            
0000F7E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F7E2                            
0000F7E2                            
0000F7E2                            ObjectFall:
0000F7E2 0C28 0050 0012             		cmpi.b	#$50,obVelY(a0)
0000F7E8 6700                       		beq.s	@donothing
0000F7EA 3028 0010                  		move.w	obVelX(a0),d0
0000F7EE 48C0                       		ext.l	d0
0000F7F0 E188                       		lsl.l	#8,d0
0000F7F2 D1A8 0008                  		add.l	d0,obX(a0)
0000F7F6 0C68 0FC8 0012                     cmp.w   #$FC8,obVelY(a0)   ; check if Sonic's Y speed is lower than this value
0000F7FC 6F00                               ble.s   @skipline       ; if yes, branch
0000F7FE 317C 0FC8 0012                     move.w  #$FC8,obVelY(a0)    ; alter Sonic's Y speed
0000F804                                @skipline:		
0000F804 3028 0012                  		move.w	obVelY(a0),d0
0000F808 0668 0038 0012             		addi.w	#$38,obVelY(a0)	; increase vertical speed
0000F80E 48C0                       		ext.l	d0
0000F810 E188                       		lsl.l	#8,d0
0000F812 D1A8 000C                  		add.l	d0,obY(a0)
0000F816 4E75                       		rts	
0000F818                            	
0000F818                            	@donothing:
0000F818 4E75                       		rts
0000F81A                            
0000F81A                            ; End of function ObjectFall
0000F81A                            ; End of function ObjectFall
0000F81A                            		include	"_incObj\sub SpeedToPos.asm"
0000F81A                            ; ---------------------------------------------------------------------------
0000F81A                            ; Subroutine translating object	speed to update	object position
0000F81A                            ; ---------------------------------------------------------------------------
0000F81A                            
0000F81A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F81A                            
0000F81A                            
0000F81A                            SpeedToPos:
0000F81A 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0000F820 E188                       		lsl.l	#8,d0
0000F822 D1A8 0008                  		add.l	d0,obX(a0)
0000F826 E18A                       		lsl.l	#8,d2
0000F828 D5A8 000C                  		add.l	d2,obY(a0)
0000F82C 4E75                       		rts
0000F82E                            ; End of function SpeedToPos
0000F82E                            ; End of function SpeedToPos
0000F82E                            		include	"_incObj\sub DisplaySprite.asm"
0000F82E                            ; ---------------------------------------------------------------------------
0000F82E                            ; Subroutine to    display    a sprite/object, when a0 is the    object RAM
0000F82E                            ; ---------------------------------------------------------------------------
0000F82E                            
0000F82E                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F82E                            
0000F82E                            
0000F82E                            DisplaySprite:
0000F82E 43F8 AC00                          lea    (v_spritequeue).w,a1
0000F832 D2E8 0018                          adda.w  obpriority(a0),a1 ; get sprite priority
0000F836 0C51 007E                          cmpi.w    #$7E,(a1)    ; is this part of the queue full?
0000F83A 6400                               bcc.s    DSpr_Full    ; if yes, branch
0000F83C 5451                               addq.w    #2,(a1)        ; increment sprite count
0000F83E D2D1                               adda.w    (a1),a1        ; jump to empty position
0000F840 3288                               move.w    a0,(a1)        ; insert RAM address for object
0000F842                            
0000F842                                DSpr_Full:
0000F842 4E75                               rts    
0000F844                            
0000F844                            ; End of function DisplaySprite
0000F844                            
0000F844                            
0000F844                            ; ---------------------------------------------------------------------------
0000F844                            ; Subroutine to    display    a 2nd sprite/object, when a1 is    the object RAM
0000F844                            ; ---------------------------------------------------------------------------
0000F844                            
0000F844                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F844                            
0000F844                            
0000F844                            DisplaySprite1:
0000F844 45F8 AC00                          lea    (v_spritequeue).w,a2
0000F848 D4E9 0018                          adda.w  obpriority(a1),a2
0000F84C 0C52 007E                          cmpi.w    #$7E,(a2)
0000F850 6400                               bcc.s    DSpr1_Full
0000F852 5452                               addq.w    #2,(a2)
0000F854 D4D2                               adda.w    (a2),a2
0000F856 3489                               move.w    a1,(a2)
0000F858                            
0000F858                                DSpr1_Full:
0000F858 4E75                               rts    
0000F85A                            
0000F85A                            ; End of function DisplaySprite1
0000F85A                            
0000F85A                            ; ---------------------------------------------------------------------------
0000F85A                            ; Subroutine to display a sprite/object, when a0 is the object RAM
0000F85A                            ; and d0 is already (priority/2)&$380
0000F85A                            ; ---------------------------------------------------------------------------
0000F85A                            
0000F85A                            ; loc_16530:
0000F85A                            DisplaySprite2:
0000F85A 43F8 AC00                      lea    (v_spritequeue).w,a1
0000F85E D2C0                           adda.w    d0,a1
0000F860 0C51 007E                      cmpi.w    #$7E,(a1)
0000F864 6400                           bhs.s    return_16542
0000F866 5451                           addq.w    #2,(a1)
0000F868 D2D1                           adda.w    (a1),a1
0000F86A 3288                           move.w    a0,(a1)
0000F86C                            
0000F86C                            return_16542:
0000F86C 4E75                           rts
0000F86C 4E75                           rts
0000F86E                            		include	"_incObj\sub DeleteObject.asm"
0000F86E                            ; ---------------------------------------------------------------------------
0000F86E                            ; Subroutine to	delete an object
0000F86E                            ; ---------------------------------------------------------------------------
0000F86E                            
0000F86E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F86E                            
0000F86E                            
0000F86E                            DeleteObject:
0000F86E 2248                       		movea.l	a0,a1		; move object RAM address to (a1)
0000F870                            
0000F870                            DeleteChild:				; child objects are already in (a1)
0000F870 7200                       		moveq	#0,d1
0000F872 700F                       		moveq	#$F,d0
0000F874                            
0000F874                            	DelObj_Loop:
0000F874 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000F876 51C8 FFFC                  		dbf	d0,DelObj_Loop	; repeat for length of object RAM
0000F87A 4E75                       		rts	
0000F87C                            
0000F87C                            ; End of function DeleteObject
0000F87C                            ; End of function DeleteObject
0000F87C                            
0000F87C                            ; ===========================================================================
0000F87C 0000 0000                  BldSpr_ScrPos:	dc.l 0				; blank
0000F880 00FF F700                  		dc.l v_screenposx&$FFFFFF	; main screen x-position
0000F884 00FF F708                  		dc.l v_bgscreenposx&$FFFFFF	; background x-position	1
0000F888 00FF F718                  		dc.l v_bg3screenposx&$FFFFFF	; background x-position	2
0000F88C                            ; ---------------------------------------------------------------------------
0000F88C                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000F88C                            ; ---------------------------------------------------------------------------
0000F88C                            
0000F88C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F88C                            BuildSprites:                ; XREF: TitleScreen; et al
0000F88C 45F8 F800                  		lea	(v_spritetablebuffer).w,a2 ; set address for sprite table
0000F890 7A00                       		moveq	#0,d5
0000F892 49F8 AC00                  		lea	(v_spritequeue).w,a4
0000F896 7E07                       		moveq	#7,d7
0000F898                            		
0000F898                            loc_D66A:
0000F898 4A54                       		tst.w	(a4)
0000F89A 6700 0000                  		beq.w	loc_D72E
0000F89E 7C02                       		moveq	#2,d6
0000F8A0                            
0000F8A0                            loc_D672:
0000F8A0 3074 6000                          movea.w    (a4,d6.w),a0
0000F8A4 4A10                               tst.b    (a0)
0000F8A6 6700 0000                          beq.w    loc_D726
0000F8AA 08A8 0007 0001                     bclr    #7,1(a0)
0000F8B0 1028 0001                          move.b    1(a0),d0
0000F8B4 1800                               move.b    d0,d4
0000F8B6 0C10 0001                          cmpi.b    #1,(a0)    ; is this object is Sonic
0000F8BA 6700                               beq.s    @skip    ; if it is, branch
0000F8BC 0800 0006                          btst    #6,d0    ; is the multi-draw flag set?
0000F8C0 6600 0000                          bne.w   BuildSprites_MultiDraw    ; if it is, branch
0000F8C4                               @skip:
0000F8C4 0240 000C                  		andi.w	#$C,d0
0000F8C8 6700                       		beq.s	loc_D6DE
0000F8CA 227B 00B0                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000F8CE 7000                       		moveq	#0,d0
0000F8D0 1028 0014                  		move.b	width_pixels(a0),d0
0000F8D4 3628 0008                  		move.w	8(a0),d3
0000F8D8 9651                       		sub.w	(a1),d3
0000F8DA 3203                       		move.w	d3,d1
0000F8DC D240                       		add.w	d0,d1
0000F8DE 6B00 0000                  		bmi.w	loc_D726
0000F8E2 3203                       		move.w	d3,d1
0000F8E4 9240                       		sub.w	d0,d1
0000F8E6 0C41 0140                  		cmpi.w	#$140,d1
0000F8EA 6C00                       		bge.s	loc_D726
0000F8EC 0643 0080                  		addi.w	#$80,d3
0000F8F0 0804 0004                  		btst	#4,d4
0000F8F4 6700                       		beq.s	loc_D6E8
0000F8F6 7000                       		moveq	#0,d0
0000F8F8 1028 0016                  		move.b	$16(a0),d0
0000F8FC 3428 000C                  		move.w	$C(a0),d2
0000F900 9469 0004                  		sub.w	4(a1),d2
0000F904 3202                       		move.w	d2,d1
0000F906 D240                       		add.w	d0,d1
0000F908 6B00                       		bmi.s	loc_D726
0000F90A 3202                       		move.w	d2,d1
0000F90C 9240                       		sub.w	d0,d1
0000F90E 0C41 00E0                  		cmpi.w	#$E0,d1
0000F912 6C00                       		bge.s	loc_D726
0000F914 0642 0080                  		addi.w	#$80,d2
0000F918 6000                       		bra.s	loc_D700
0000F91A                            ; ===========================================================================
0000F91A                            
0000F91A                            loc_D6DE:
0000F91A 3428 000A                  		move.w	$A(a0),d2
0000F91E 3628 0008                  		move.w	8(a0),d3
0000F922 6000                       		bra.s	loc_D700
0000F924                            ; ===========================================================================
0000F924                            
0000F924                            loc_D6E8:
0000F924 3428 000C                  		move.w	$C(a0),d2
0000F928 9469 0004                  		sub.w	4(a1),d2
0000F92C 0642 0080                  		addi.w	#$80,d2
0000F930 0C42 0060                  		cmpi.w	#$60,d2
0000F934 6500                       		bcs.s	loc_D726
0000F936 0C42 0180                  		cmpi.w	#$180,d2
0000F93A 6400                       		bcc.s	loc_D726
0000F93C                            
0000F93C                            loc_D700:
0000F93C 2268 0004                  		movea.l	4(a0),a1
0000F940 7200                       		moveq	#0,d1
0000F942 0804 0005                  		btst	#5,d4
0000F946 6600                       		bne.s	loc_D71C
0000F948 1228 001A                  		move.b	$1A(a0),d1
0000F94C D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000F94E D2F1 1000                  		adda.w	(a1,d1.w),a1
0000F952 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000F954 1219                       		move.b	(a1)+,d1
0000F956 5301                       		subq.b	#1,d1
0000F958 6B00                       		bmi.s	loc_D720
0000F95A                            
0000F95A                            loc_D71C:
0000F95A 4EB9 0000 0000             		jsr	sub_D750
0000F960                            
0000F960                            loc_D720:
0000F960 08E8 0007 0001             		bset	#7,1(a0)
0000F966                            
0000F966                            loc_D726:
0000F966 5446                       		addq.w	#2,d6
0000F968 5554                       		subq.w	#2,(a4)
0000F96A 6600 FF34                  		bne.w	loc_D672
0000F96E                            
0000F96E                            loc_D72E:
0000F96E 49EC 0080                  		lea	$80(a4),a4
0000F972 51CF FF24                  		dbf	d7,loc_D66A
0000F976 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000F97A 0C05 0050                  		cmpi.b	#$50,d5
0000F97E 6700                       		beq.s	loc_D748
0000F980 24BC 0000 0000             		move.l	#0,(a2)
0000F986 4E75                       		rts	
0000F988                            ; ===========================================================================
0000F988                            
0000F988                            loc_D748:
0000F988 157C 0000 FFFB             		move.b	#0,-5(a2)
0000F98E 4E75                       		rts	
0000F990                            ; End of function BuildSprites
0000F990                            
0000F990                            BuildSprites_MultiDraw:
0000F990 2F0C                       	move.l	a4,-(sp)
0000F992 49F8 F700                  	lea	($FFFFF700).w,a4
0000F996 3668 0002                  	movea.w	art_tile(a0),a3
0000F99A 2A68 0004                  	movea.l	mappings(a0),a5
0000F99E 7000                       	moveq	#0,d0
0000F9A0                            
0000F9A0                            	; check if object is within X bounds
0000F9A0 1028 000E                  	move.b	mainspr_width(a0),d0	; load pixel width
0000F9A4 3628 0008                  	move.w	x_pos(a0),d3
0000F9A8 9654                       	sub.w	(a4),d3
0000F9AA 3203                       	move.w	d3,d1                            
0000F9AC D240                       	add.w	d0,d1                            ; is the object right edge to the left of the screen? 
0000F9AE 6B00 0000                  	bmi.w	BuildSprites_MultiDraw_NextObj   ; if it is, branch
0000F9B2 3203                       	move.w	d3,d1
0000F9B4 9240                       	sub.w	d0,d1
0000F9B6 0C41 0140                  	cmpi.w	#320,d1                          ; is the object left edge to the right of the screen?
0000F9BA 6C00 0000                  	bge.w	BuildSprites_MultiDraw_NextObj   ; if it is, branch
0000F9BE 0643 0080                  	addi.w	#128,d3
0000F9C2                            
0000F9C2                            	; check if object is within Y bounds
0000F9C2 0804 0004                  	btst	#4,d4                            ; is the accurate Y check flag set?
0000F9C6 6700                       	beq.s	BuildSpritesMulti_ApproxYCheck
0000F9C8 7000                       	moveq	#0,d0
0000F9CA 1028 0014                  	move.b	mainspr_height(a0),d0	         ; load pixel height
0000F9CE 3428 000C                  	move.w	y_pos(a0),d2
0000F9D2 946C 0004                  	sub.w	4(a4),d2
0000F9D6 3202                       	move.w	d2,d1
0000F9D8 D240                       	add.w	d0,d1
0000F9DA 6B00 0000                  	bmi.w	BuildSprites_MultiDraw_NextObj  ; if the object is above the screen
0000F9DE 3202                       	move.w	d2,d1
0000F9E0 9240                       	sub.w	d0,d1
0000F9E2 0C41 00E0                  	cmpi.w	#224,d1
0000F9E6 6C00 0000                  	bge.w	BuildSprites_MultiDraw_NextObj  ; if the object is below the screen
0000F9EA 0642 0080                  	addi.w	#128,d2
0000F9EE 6000                       	bra.s	BuildSpritesMulti_DrawSprite
0000F9F0                            BuildSpritesMulti_ApproxYCheck:
0000F9F0 3428 000C                  	move.w	y_pos(a0),d2
0000F9F4 946C 0004                  	sub.w	4(a4),d2
0000F9F8 0642 0080                  	addi.w	#128,d2
0000F9FC 0242 07FF                  	andi.w	#$7FF,d2
0000FA00 0C42 0060                  	cmpi.w	#-32+128,d2
0000FA04 6500                       	blo.s	BuildSprites_MultiDraw_NextObj
0000FA06 0C42 0180                  	cmpi.w	#32+128+224,d2
0000FA0A 6400                       	bhs.s	BuildSprites_MultiDraw_NextObj
0000FA0C                            BuildSpritesMulti_DrawSprite:
0000FA0C 7200                       	moveq	#0,d1
0000FA0E 1228 000B                  	move.b	mainspr_mapframe(a0),d1	         ; get current frame
0000FA12 6700                       	beq.s	.noparenttodraw
0000FA14 D241                       	add.w	d1,d1
0000FA16 224D                       	movea.l	a5,a1                            ; a5 is mappings(a0), copy to a1
0000FA18 D2F1 1000                  	adda.w	(a1,d1.w),a1
0000FA1C 7200                       	moveq	#0,d1
0000FA1E 1219                       	move.b	(a1)+,d1
0000FA20 5301                       	subq.b	#1,d1                            ; get number of pieces
0000FA22 6B00                       	bmi.s	.noparenttodraw                  ; if there are 0 pieces, branch
0000FA24 3F04                       	move.w	d4,-(sp)
0000FA26 4EB9 0000 0000             	jsr	ChkDrawSprite	                 ; draw the sprite
0000FA2C 381F                       	move.w	(sp)+,d4
0000FA2E                            .noparenttodraw:
0000FA2E 0028 0080 0001             	ori.b	#$80,render_flags(a0)	         ; set onscreen flag
0000FA34 4DE8 0010                  	lea	sub2_x_pos(a0),a6                ; address of first child sprite info
0000FA38 7000                       	moveq	#0,d0
0000FA3A 1028 000F                  	move.b	mainspr_childsprites(a0),d0	 ; get child sprite count
0000FA3E 5340                       	subq.w	#1,d0		                 ; if there are 0, go to next object
0000FA40 6500                       	bcs.s	BuildSprites_MultiDraw_NextObj
0000FA42                            
0000FA42                            @drawchildloop:
0000FA42 4840                       	swap	d0
0000FA44 361E                       	move.w	(a6)+,d3	                 ; get X pos
0000FA46 9654                       	sub.w	(a4),d3                          ; subtract the screen's x position
0000FA48 0643 0080                  	addi.w	#128,d3
0000FA4C 341E                       	move.w	(a6)+,d2	                 ; get Y pos
0000FA4E 946C 0004                  	sub.w	4(a4),d2   ; subtract the screen's y position
0000FA52 0642 0080                  	addi.w	#128,d2
0000FA56 0242 07FF                  	andi.w	#$7FF,d2
0000FA5A 524E                       	addq.w	#1,a6
0000FA5C 7200                       	moveq	#0,d1
0000FA5E 121E                       	move.b	(a6)+,d1	                 ; get mapping frame
0000FA60 D241                       	add.w	d1,d1
0000FA62 224D                       	movea.l	a5,a1
0000FA64 D2F1 1000                  	adda.w	(a1,d1.w),a1
0000FA68 7200                       	moveq	#0,d1
0000FA6A 1219                       	move.b	(a1)+,d1
0000FA6C 5301                       	subq.b	#1,d1                            ; get number of pieces
0000FA6E 6B00                       	bmi.s	@nochildleft                     ; if there are 0 pieces, branch
0000FA70 3F04                       	move.w	d4,-(sp)
0000FA72 4EB9 0000 0000             	jsr	ChkDrawSprite
0000FA78 381F                       	move.w	(sp)+,d4
0000FA7A                            @nochildleft:
0000FA7A 4840                       	swap	d0
0000FA7C 51C8 FFC4                  	dbf	d0,@drawchildloop	         ; repeat for number of child sprites
0000FA80                            ; loc_16804:
0000FA80                            BuildSprites_MultiDraw_NextObj:
0000FA80 285F                       	movea.l	(sp)+,a4
0000FA82 6000 FEE2                  	bra.w	loc_D726; End of function BuildSprites
0000FA86                            
0000FA86                            
0000FA86                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000FA86                            
0000FA86                            ; sub_1680A:
0000FA86                            ChkDrawSprite:
0000FA86 0C05 0050                  	cmpi.b	#80,d5		; has the sprite limit been reached?
0000FA8A 6500                       	blo.s	loc_1681C	; if it hasn't, branch
0000FA8C 4E75                       	rts	; otherwise, return
0000FA8E                            
0000FA8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FA8E                            
0000FA8E                            
0000FA8E                            sub_D750:				; XREF: BuildSprites
0000FA8E 3668 0002                  		movea.w	2(a0),a3
0000FA92                            loc_1681C:
0000FA92 0804 0000                  		btst	#0,d4
0000FA96 6600                       		bne.s	loc_D796
0000FA98 0804 0001                  		btst	#1,d4
0000FA9C 6600 0000                  		bne.w	loc_D7E4
0000FAA0                            ; End of function sub_D750
0000FAA0                            
0000FAA0                            
0000FAA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FAA0                            
0000FAA0                            
0000FAA0                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000FAA0 0C05 0050                  		cmpi.b	#$50,d5
0000FAA4 6700                       		beq.s	locret_D794
0000FAA6                            sub_D762_2:				; XREF: sub_D762; SS_ShowLayout
0000FAA6 1019                       		move.b	(a1)+,d0
0000FAA8 4880                       		ext.w	d0
0000FAAA D042                       		add.w	d2,d0
0000FAAC 34C0                       		move.w	d0,(a2)+
0000FAAE 14D9                       		move.b	(a1)+,(a2)+
0000FAB0 5205                       		addq.b	#1,d5
0000FAB2 14C5                       		move.b	d5,(a2)+
0000FAB4 1019                       		move.b	(a1)+,d0
0000FAB6 E148                       		lsl.w	#8,d0
0000FAB8 1019                       		move.b	(a1)+,d0
0000FABA D04B                       		add.w	a3,d0
0000FABC 34C0                       		move.w	d0,(a2)+
0000FABE 1019                       		move.b	(a1)+,d0
0000FAC0 4880                       		ext.w	d0
0000FAC2 D043                       		add.w	d3,d0
0000FAC4 0240 01FF                  		andi.w	#$1FF,d0
0000FAC8 6600                       		bne.s	loc_D78E
0000FACA 5240                       		addq.w	#1,d0
0000FACC                            
0000FACC                            loc_D78E:
0000FACC 34C0                       		move.w	d0,(a2)+
0000FACE 51C9 FFD0                  		dbf	d1,sub_D762
0000FAD2                            
0000FAD2                            locret_D794:
0000FAD2 4E75                       		rts
0000FAD4                            ; End of function sub_D762
0000FAD4                            
0000FAD4                            ; ===========================================================================
0000FAD4                            
0000FAD4                            loc_D796:
0000FAD4 0804 0001                  		btst	#1,d4
0000FAD8 6600 0000                  		bne.w	loc_D82A
0000FADC                            
0000FADC                            loc_D79E:
0000FADC 0C05 0050                  		cmpi.b	#$50,d5
0000FAE0 6700                       		beq.s	locret_D7E2
0000FAE2 1019                       		move.b	(a1)+,d0
0000FAE4 4880                       		ext.w	d0
0000FAE6 D042                       		add.w	d2,d0
0000FAE8 34C0                       		move.w	d0,(a2)+
0000FAEA 1819                       		move.b	(a1)+,d4
0000FAEC 14C4                       		move.b	d4,(a2)+
0000FAEE 5205                       		addq.b	#1,d5
0000FAF0 14C5                       		move.b	d5,(a2)+
0000FAF2 1019                       		move.b	(a1)+,d0
0000FAF4 E148                       		lsl.w	#8,d0
0000FAF6 1019                       		move.b	(a1)+,d0
0000FAF8 D04B                       		add.w	a3,d0
0000FAFA 0A40 0800                  		eori.w	#$800,d0
0000FAFE 34C0                       		move.w	d0,(a2)+
0000FB00 1019                       		move.b	(a1)+,d0
0000FB02 4880                       		ext.w	d0
0000FB04 4440                       		neg.w	d0
0000FB06 D804                       		add.b	d4,d4
0000FB08 0244 0018                  		andi.w	#$18,d4
0000FB0C 5044                       		addq.w	#8,d4
0000FB0E 9044                       		sub.w	d4,d0
0000FB10 D043                       		add.w	d3,d0
0000FB12 0240 01FF                  		andi.w	#$1FF,d0
0000FB16 6600                       		bne.s	loc_D7DC
0000FB18 5240                       		addq.w	#1,d0
0000FB1A                            
0000FB1A                            loc_D7DC:
0000FB1A 34C0                       		move.w	d0,(a2)+
0000FB1C 51C9 FFBE                  		dbf	d1,loc_D79E
0000FB20                            
0000FB20                            locret_D7E2:
0000FB20 4E75                       		rts
0000FB22                            ; ===========================================================================
0000FB22                            
0000FB22                            loc_D7E4:				; XREF: sub_D750
0000FB22 0C05 0050                  		cmpi.b	#$50,d5
0000FB26 6700                       		beq.s	locret_D828
0000FB28 1019                       		move.b	(a1)+,d0
0000FB2A 1811                       		move.b	(a1),d4
0000FB2C 4880                       		ext.w	d0
0000FB2E 4440                       		neg.w	d0
0000FB30 E70C                       		lsl.b	#3,d4
0000FB32 0244 0018                  		andi.w	#$18,d4
0000FB36 5044                       		addq.w	#8,d4
0000FB38 9044                       		sub.w	d4,d0
0000FB3A D042                       		add.w	d2,d0
0000FB3C 34C0                       		move.w	d0,(a2)+
0000FB3E 14D9                       		move.b	(a1)+,(a2)+
0000FB40 5205                       		addq.b	#1,d5
0000FB42 14C5                       		move.b	d5,(a2)+
0000FB44 1019                       		move.b	(a1)+,d0
0000FB46 E148                       		lsl.w	#8,d0
0000FB48 1019                       		move.b	(a1)+,d0
0000FB4A D04B                       		add.w	a3,d0
0000FB4C 0A40 1000                  		eori.w	#$1000,d0
0000FB50 34C0                       		move.w	d0,(a2)+
0000FB52 1019                       		move.b	(a1)+,d0
0000FB54 4880                       		ext.w	d0
0000FB56 D043                       		add.w	d3,d0
0000FB58 0240 01FF                  		andi.w	#$1FF,d0
0000FB5C 6600                       		bne.s	loc_D822
0000FB5E 5240                       		addq.w	#1,d0
0000FB60                            
0000FB60                            loc_D822:
0000FB60 34C0                       		move.w	d0,(a2)+
0000FB62 51C9 FFBE                  		dbf	d1,loc_D7E4
0000FB66                            
0000FB66                            locret_D828:
0000FB66 4E75                       		rts
0000FB68                            ; ===========================================================================
0000FB68                            
0000FB68                            loc_D82A:
0000FB68 0C05 0050                  		cmpi.b	#$50,d5
0000FB6C 6700                       		beq.s	locret_D87C
0000FB6E 1019                       		move.b	(a1)+,d0
0000FB70 1811                       		move.b	(a1),d4
0000FB72 4880                       		ext.w	d0
0000FB74 4440                       		neg.w	d0
0000FB76 E70C                       		lsl.b	#3,d4
0000FB78 0244 0018                  		andi.w	#$18,d4
0000FB7C 5044                       		addq.w	#8,d4
0000FB7E 9044                       		sub.w	d4,d0
0000FB80 D042                       		add.w	d2,d0
0000FB82 34C0                       		move.w	d0,(a2)+
0000FB84 1819                       		move.b	(a1)+,d4
0000FB86 14C4                       		move.b	d4,(a2)+
0000FB88 5205                       		addq.b	#1,d5
0000FB8A 14C5                       		move.b	d5,(a2)+
0000FB8C 1019                       		move.b	(a1)+,d0
0000FB8E E148                       		lsl.w	#8,d0
0000FB90 1019                       		move.b	(a1)+,d0
0000FB92 D04B                       		add.w	a3,d0
0000FB94 0A40 1800                  		eori.w	#$1800,d0
0000FB98 34C0                       		move.w	d0,(a2)+
0000FB9A 1019                       		move.b	(a1)+,d0
0000FB9C 4880                       		ext.w	d0
0000FB9E 4440                       		neg.w	d0
0000FBA0 D804                       		add.b	d4,d4
0000FBA2 0244 0018                  		andi.w	#$18,d4
0000FBA6 5044                       		addq.w	#8,d4
0000FBA8 9044                       		sub.w	d4,d0
0000FBAA D043                       		add.w	d3,d0
0000FBAC 0240 01FF                  		andi.w	#$1FF,d0
0000FBB0 6600                       		bne.s	loc_D876
0000FBB2 5240                       		addq.w	#1,d0
0000FBB4                            
0000FBB4                            loc_D876:
0000FBB4 34C0                       		move.w	d0,(a2)+
0000FBB6 51C9 FFB0                  		dbf	d1,loc_D82A
0000FBBA                            
0000FBBA                            locret_D87C:
0000FBBA 4E75                       		rts
0000FBBC                            ; End of function BuildSpr_Normal
0000FBBC                            
0000FBBC                            ; ===========================================================================
0000FBBC                            
0000FBBC                            		include	"_incObj\sub ChkObjectVisible.asm"
0000FBBC                            ; ---------------------------------------------------------------------------
0000FBBC                            ; Subroutine to	check if an object is off screen
0000FBBC                            
0000FBBC                            ; output:
0000FBBC                            ;	d0 = flag set if object is off screen
0000FBBC                            ; ---------------------------------------------------------------------------
0000FBBC                            
0000FBBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FBBC                            
0000FBBC                            
0000FBBC                            ChkObjectVisible:
0000FBBC 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000FBC0 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000FBC4 6B00                       		bmi.s	@offscreen
0000FBC6 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000FBCA 6C00                       		bge.s	@offscreen	; if not, branch
0000FBCC                            
0000FBCC 3228 000C                  		move.w	obY(a0),d1	; get object y-position
0000FBD0 9278 F704                  		sub.w	(v_screenposy).w,d1 ; subtract screen y-position
0000FBD4 6B00                       		bmi.s	@offscreen
0000FBD6 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000FBDA 6C00                       		bge.s	@offscreen	; if not, branch
0000FBDC                            
0000FBDC 7000                       		moveq	#0,d0		; set flag to 0
0000FBDE 4E75                       		rts	
0000FBE0                            
0000FBE0                            	@offscreen:
0000FBE0 7001                       		moveq	#1,d0		; set flag to 1
0000FBE2 4E75                       		rts	
0000FBE4                            ; End of function ChkObjectVisible
0000FBE4                            
0000FBE4                            ; ---------------------------------------------------------------------------
0000FBE4                            ; Subroutine to	check if an object is off screen
0000FBE4                            ; More precise than above subroutine, taking width into account
0000FBE4                            
0000FBE4                            ; output:
0000FBE4                            ;	d0 = flag set if object is off screen
0000FBE4                            ; ---------------------------------------------------------------------------
0000FBE4                            
0000FBE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FBE4                            
0000FBE4                            
0000FBE4                            ChkPartiallyVisible:
0000FBE4 7200                       		moveq	#0,d1
0000FBE6 1228 0014                  		move.b	obActWid(a0),d1
0000FBEA 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000FBEE 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000FBF2 D041                       		add.w	d1,d0		; add object width
0000FBF4 6B00                       		bmi.s	@offscreen2
0000FBF6 D241                       		add.w	d1,d1
0000FBF8 9041                       		sub.w	d1,d0
0000FBFA 0C40 0140                  		cmpi.w	#320,d0
0000FBFE 6C00                       		bge.s	@offscreen2
0000FC00                            
0000FC00 3228 000C                  		move.w	obY(a0),d1
0000FC04 9278 F704                  		sub.w	(v_screenposy).w,d1
0000FC08 6B00                       		bmi.s	@offscreen2
0000FC0A 0C41 00E0                  		cmpi.w	#224,d1
0000FC0E 6C00                       		bge.s	@offscreen2
0000FC10                            
0000FC10 7000                       		moveq	#0,d0
0000FC12 4E75                       		rts	
0000FC14                            
0000FC14                            	@offscreen2:
0000FC14 7001                       		moveq	#1,d0
0000FC16 4E75                       		rts	
0000FC18                            ; End of function ChkPartiallyVisible
0000FC18                            ; End of function ChkPartiallyVisible
0000FC18                            
0000FC18                            ; ---------------------------------------------------------------------------
0000FC18                            ; Subroutine to	load a level's objects
0000FC18                            ; ---------------------------------------------------------------------------
0000FC18                            
0000FC18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FC18                            
0000FC18                            
0000FC18                            ObjPosLoad:
0000FC18 7000                       		moveq	#0,d0
0000FC1A 1038 F76C                  		move.b	(v_opl_routine).w,d0
0000FC1E 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000FC22 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000FC26                            ; End of function ObjPosLoad
0000FC26                            
0000FC26                            ; ===========================================================================
0000FC26 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000FC28 0000                       		dc.w OPL_Next-OPL_Index
0000FC2A                            ; ===========================================================================
0000FC2A                            
0000FC2A                            OPL_Main:
0000FC2A 5438 F76C                  		addq.b	#2,(v_opl_routine).w
0000FC2E 3038 FE10                  		move.w	(v_zone).w,d0
0000FC32 ED08                       		lsl.b	#6,d0
0000FC34 E848                       		lsr.w	#4,d0
0000FC36 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000FC3C 2248                       		movea.l	a0,a1
0000FC3E D0F0 0000                  		adda.w	(a0,d0.w),a0
0000FC42 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FC46 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FC4A D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000FC4E 21C9 F778                  		move.l	a1,(v_opl_data+8).w
0000FC52 21C9 F77C                  		move.l	a1,(v_opl_data+$C).w
0000FC56 45F8 FC00                  		lea	(v_objstate).w,a2
0000FC5A 34FC 0101                  		move.w	#$101,(a2)+
0000FC5E 303C 005E                  		move.w	#$5E,d0
0000FC62                            
0000FC62                            OPL_ClrList:
0000FC62 429A                       		clr.l	(a2)+
0000FC64 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000FC68                            
0000FC68 45F8 FC00                  		lea	(v_objstate).w,a2
0000FC6C 7400                       		moveq	#0,d2
0000FC6E 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FC72 0446 0080                  		subi.w	#$80,d6
0000FC76 6400                       		bhs.s	loc_D93C
0000FC78 7C00                       		moveq	#0,d6
0000FC7A                            
0000FC7A                            loc_D93C:
0000FC7A 0246 FF80                  		andi.w	#$FF80,d6
0000FC7E 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FC82                            
0000FC82                            loc_D944:
0000FC82 BC50                       		cmp.w	(a0),d6
0000FC84 6300                       		bls.s	loc_D956
0000FC86 4A28 0004                  		tst.b	4(a0)
0000FC8A 6A00                       		bpl.s	loc_D952
0000FC8C 1412                       		move.b	(a2),d2
0000FC8E 5212                       		addq.b	#1,(a2)
0000FC90                            
0000FC90                            loc_D952:
0000FC90 5C48                       		addq.w	#6,a0
0000FC92 60EE                       		bra.s	loc_D944
0000FC94                            ; ===========================================================================
0000FC94                            
0000FC94                            loc_D956:
0000FC94 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FC98 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FC9C 0446 0080                  		subi.w	#$80,d6
0000FCA0 6500                       		blo.s	loc_D976
0000FCA2                            
0000FCA2                            loc_D964:
0000FCA2 BC50                       		cmp.w	(a0),d6
0000FCA4 6300                       		bls.s	loc_D976
0000FCA6 4A28 0004                  		tst.b	4(a0)
0000FCAA 6A00                       		bpl.s	loc_D972
0000FCAC 522A 0001                  		addq.b	#1,1(a2)
0000FCB0                            
0000FCB0                            loc_D972:
0000FCB0 5C48                       		addq.w	#6,a0
0000FCB2 60EE                       		bra.s	loc_D964
0000FCB4                            ; ===========================================================================
0000FCB4                            
0000FCB4                            loc_D976:
0000FCB4 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FCB8 31FC FFFF F76E             		move.w	#-1,(v_opl_screen).w
0000FCBE                            
0000FCBE                            OPL_Next:
0000FCBE 45F8 FC00                  		lea	(v_objstate).w,a2
0000FCC2 7400                       		moveq	#0,d2
0000FCC4 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FCC8 0246 FF80                  		andi.w	#$FF80,d6
0000FCCC BC78 F76E                  		cmp.w	(v_opl_screen).w,d6
0000FCD0 6700 0000                  		beq.w	locret_DA3A
0000FCD4 6C00                       		bge.s	loc_D9F6
0000FCD6 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FCDA 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FCDE 0446 0080                  		subi.w	#$80,d6
0000FCE2 6500                       		blo.s	loc_D9D2
0000FCE4                            
0000FCE4                            loc_D9A6:
0000FCE4 BC68 FFFA                  		cmp.w	-6(a0),d6
0000FCE8 6C00                       		bge.s	loc_D9D2
0000FCEA 5D48                       		subq.w	#6,a0
0000FCEC 4A28 0004                  		tst.b	4(a0)
0000FCF0 6A00                       		bpl.s	loc_D9BC
0000FCF2 532A 0001                  		subq.b	#1,1(a2)
0000FCF6 142A 0001                  		move.b	1(a2),d2
0000FCFA                            
0000FCFA                            loc_D9BC:
0000FCFA 6100 0000                  		bsr.w	loc_DA3C
0000FCFE 6600                       		bne.s	loc_D9C6
0000FD00 5D48                       		subq.w	#6,a0
0000FD02 60E0                       		bra.s	loc_D9A6
0000FD04                            ; ===========================================================================
0000FD04                            
0000FD04                            loc_D9C6:
0000FD04 4A28 0004                  		tst.b	4(a0)
0000FD08 6A00                       		bpl.s	loc_D9D0
0000FD0A 522A 0001                  		addq.b	#1,1(a2)
0000FD0E                            
0000FD0E                            loc_D9D0:
0000FD0E 5C48                       		addq.w	#6,a0
0000FD10                            
0000FD10                            loc_D9D2:
0000FD10 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FD14 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FD18 0646 0300                  		addi.w	#$300,d6
0000FD1C                            
0000FD1C                            loc_D9DE:
0000FD1C BC68 FFFA                  		cmp.w	-6(a0),d6
0000FD20 6E00                       		bgt.s	loc_D9F0
0000FD22 4A28 FFFE                  		tst.b	-2(a0)
0000FD26 6A00                       		bpl.s	loc_D9EC
0000FD28 5312                       		subq.b	#1,(a2)
0000FD2A                            
0000FD2A                            loc_D9EC:
0000FD2A 5D48                       		subq.w	#6,a0
0000FD2C 60EE                       		bra.s	loc_D9DE
0000FD2E                            ; ===========================================================================
0000FD2E                            
0000FD2E                            loc_D9F0:
0000FD2E 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FD32 4E75                       		rts	
0000FD34                            ; ===========================================================================
0000FD34                            
0000FD34                            loc_D9F6:
0000FD34 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FD38 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FD3C 0646 0280                  		addi.w	#$280,d6
0000FD40                            
0000FD40                            loc_DA02:
0000FD40 BC50                       		cmp.w	(a0),d6
0000FD42 6300                       		bls.s	loc_DA16
0000FD44 4A28 0004                  		tst.b	4(a0)
0000FD48 6A00                       		bpl.s	loc_DA10
0000FD4A 1412                       		move.b	(a2),d2
0000FD4C 5212                       		addq.b	#1,(a2)
0000FD4E                            
0000FD4E                            loc_DA10:
0000FD4E 6100 0000                  		bsr.w	loc_DA3C
0000FD52 67EC                       		beq.s	loc_DA02
0000FD54                            
0000FD54                            loc_DA16:
0000FD54 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FD58 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FD5C 0446 0300                  		subi.w	#$300,d6
0000FD60 6500                       		blo.s	loc_DA36
0000FD62                            
0000FD62                            loc_DA24:
0000FD62 BC50                       		cmp.w	(a0),d6
0000FD64 6300                       		bls.s	loc_DA36
0000FD66 4A28 0004                  		tst.b	4(a0)
0000FD6A 6A00                       		bpl.s	loc_DA32
0000FD6C 522A 0001                  		addq.b	#1,1(a2)
0000FD70                            
0000FD70                            loc_DA32:
0000FD70 5C48                       		addq.w	#6,a0
0000FD72 60EE                       		bra.s	loc_DA24
0000FD74                            ; ===========================================================================
0000FD74                            
0000FD74                            loc_DA36:
0000FD74 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FD78                            
0000FD78                            locret_DA3A:
0000FD78 4E75                       		rts	
0000FD7A                            ; ===========================================================================
0000FD7A                            
0000FD7A                            loc_DA3C:
0000FD7A 4A28 0004                  		tst.b	4(a0)
0000FD7E 6A00                       		bpl.s	OPL_MakeItem
0000FD80 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000FD86 6700                       		beq.s	OPL_MakeItem
0000FD88 5C48                       		addq.w	#6,a0
0000FD8A 7000                       		moveq	#0,d0
0000FD8C 4E75                       		rts	
0000FD8E                            ; ===========================================================================
0000FD8E                            
0000FD8E                            OPL_MakeItem:
0000FD8E 6100 0000                  		bsr.w	FindFreeObj
0000FD92 6600                       		bne.s	locret_DA8A
0000FD94 3358 0008                  		move.w	(a0)+,obX(a1)
0000FD98 3018                       		move.w	(a0)+,d0
0000FD9A 3200                       		move.w	d0,d1
0000FD9C 0240 0FFF                  		andi.w	#$FFF,d0
0000FDA0 3340 000C                  		move.w	d0,obY(a1)
0000FDA4 E559                       		rol.w	#2,d1
0000FDA6 0201 0003                  		andi.b	#3,d1
0000FDAA 1341 0001                  		move.b	d1,obRender(a1)
0000FDAE 1341 0022                  		move.b	d1,obStatus(a1)
0000FDB2 1018                       		move.b	(a0)+,d0
0000FDB4 6A00                       		bpl.s	loc_DA80
0000FDB6 0200 007F                  		andi.b	#$7F,d0
0000FDBA 1342 0023                  		move.b	d2,obRespawnNo(a1)
0000FDBE                            
0000FDBE                            loc_DA80:
0000FDBE 1280                       		move.b	d0,0(a1)
0000FDC0 1358 0028                  		move.b	(a0)+,obSubtype(a1)
0000FDC4 7000                       		moveq	#0,d0
0000FDC6                            
0000FDC6                            locret_DA8A:
0000FDC6 4E75                       		rts	
0000FDC8                            
0000FDC8                            		include	"_incObj\sub FindFreeObj.asm"
0000FDC8                            ; ---------------------------------------------------------------------------
0000FDC8                            ; Subroutine to find a free object space
0000FDC8                            
0000FDC8                            ; output:
0000FDC8                            ;	a1 = free position in object RAM
0000FDC8                            ; ---------------------------------------------------------------------------
0000FDC8                            
0000FDC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FDC8                            
0000FDC8                            
0000FDC8                            FindFreeObj:
0000FDC8 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; start address for object RAM
0000FDCC 303C 005F                  		move.w	#$5F,d0
0000FDD0                            
0000FDD0                            	FFree_Loop:
0000FDD0 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000FDD2 6700                       		beq.s	FFree_Found	; if yes, branch
0000FDD4 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000FDD8 51C8 FFF6                  		dbf	d0,FFree_Loop	; repeat $5F times
0000FDDC                            
0000FDDC                            	FFree_Found:
0000FDDC 4E75                       		rts	
0000FDDE                            
0000FDDE                            ; End of function FindFreeObj
0000FDDE                            
0000FDDE                            
0000FDDE                            ; ---------------------------------------------------------------------------
0000FDDE                            ; Subroutine to find a free object space AFTER the current one
0000FDDE                            
0000FDDE                            ; output:
0000FDDE                            ;	a1 = free position in object RAM
0000FDDE                            ; ---------------------------------------------------------------------------
0000FDDE                            
0000FDDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FDDE                            
0000FDDE                            
0000FDDE                            FindNextFreeObj:
0000FDDE 2248                       		movea.l	a0,a1
0000FDE0 303C F000                  		move.w	#$F000,d0
0000FDE4 9048                       		sub.w	a0,d0
0000FDE6 EC48                       		lsr.w	#6,d0
0000FDE8 5340                       		subq.w	#1,d0
0000FDEA 6500                       		bcs.s	NFree_Found
0000FDEC                            
0000FDEC                            	NFree_Loop:
0000FDEC 4A11                       		tst.b	(a1)
0000FDEE 6700                       		beq.s	NFree_Found
0000FDF0 43E9 0040                  		lea	$40(a1),a1
0000FDF4 51C8 FFF6                  		dbf	d0,NFree_Loop
0000FDF8                            
0000FDF8                            	NFree_Found:
0000FDF8 4E75                       		rts	
0000FDFA                            
0000FDFA                            ; End of function FindNextFreeObj
0000FDFA                            ; End of function FindNextFreeObj
0000FDFA                            		include	"_incObj\41 Springs.asm"
0000FDFA                            ; ---------------------------------------------------------------------------
0000FDFA                            ; Object 41 - springs
0000FDFA                            ; ---------------------------------------------------------------------------
0000FDFA                            
0000FDFA                            Springs:
0000FDFA 7000                       		moveq	#0,d0
0000FDFC 1028 0024                  		move.b	obRoutine(a0),d0
0000FE00 323B 0000                  		move.w	Spring_Index(pc,d0.w),d1
0000FE04 4EBB 1000                  		jsr	Spring_Index(pc,d1.w)
0000FE08 6100 FA24                  		bsr.w	DisplaySprite
0000FE2A 4E75                       		rts	
0000FE2C                            ; ===========================================================================
0000FE2C 0000                       Spring_Index:	dc.w Spring_Main-Spring_Index
0000FE2E 0000                       		dc.w Spring_Up-Spring_Index
0000FE30 0000                       		dc.w Spring_AniUp-Spring_Index
0000FE32 0000                       		dc.w Spring_ResetUp-Spring_Index
0000FE34 0000                       		dc.w Spring_LR-Spring_Index
0000FE36 0000                       		dc.w Spring_AniLR-Spring_Index
0000FE38 0000                       		dc.w Spring_ResetLR-Spring_Index
0000FE3A 0000                       		dc.w Spring_Dwn-Spring_Index
0000FE3C 0000                       		dc.w Spring_AniDwn-Spring_Index
0000FE3E 0000                       		dc.w Spring_ResetDwn-Spring_Index
0000FE40                            
0000FE40 =00000030                  spring_pow:	equ $30			; power of current spring
0000FE40                            
0000FE40 F000                       Spring_Powers:	dc.w -$1000		; power	of red spring
0000FE42 F600                       		dc.w -$A00		; power	of yellow spring
0000FE44                            ; ===========================================================================
0000FE44                            
0000FE44                            Spring_Main:	; Routine 0
0000FE44 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FE48 217C 0000 0000 0004        		move.l	#Map_Spring,obMap(a0)
0000FE50 317C 0523 0002             		move.w	#$523,obGfx(a0)
0000FE56 0028 0004 0001             		ori.b	#4,obRender(a0)
0000FE5C 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000FE62 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FE68 1028 0028                  		move.b	obSubtype(a0),d0
0000FE6C 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000FE70 6700                       		beq.s	Spring_NotLR	; if not, branch
0000FE72                            
0000FE72 117C 0008 0024             		move.b	#8,obRoutine(a0) ; use "Spring_LR" routine
0000FE78 117C 0001 001C             		move.b	#1,obAnim(a0)
0000FE7E 117C 0003 001A             		move.b	#3,obFrame(a0)
0000FE84 317C 0533 0002             		move.w	#$533,obGfx(a0)
0000FE8A 117C 0008 0014             		move.b	#8,obActWid(a0)
0000FE90                            
0000FE90                            	Spring_NotLR:
0000FE90 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000FE94 6700                       		beq.s	Spring_NotDwn	; if not, branch
0000FE96                            
0000FE96 117C 000E 0024             		move.b	#$E,obRoutine(a0) ; use "Spring_Dwn" routine
0000FE9C 08E8 0001 0022             		bset	#1,obStatus(a0)
0000FEA2                            
0000FEA2                            	Spring_NotDwn:
0000FEA2 0800 0001                  		btst	#1,d0
0000FEA6 6700                       		beq.s	loc_DB72
0000FEA8 08E8 0005 0002             		bset	#5,obGfx(a0)
0000FEAE                            
0000FEAE                            loc_DB72:
0000FEAE 0240 000F                  		andi.w	#$F,d0
0000FEB2 317B 008C 0030             		move.w	Spring_Powers(pc,d0.w),spring_pow(a0)
0000FEB8 4E75                       		rts	
0000FEBA                            ; ===========================================================================
0000FEBA                            
0000FEBA                            Spring_Up:	; Routine 2
0000FEBA 323C 001B                  		move.w	#$1B,d1
0000FEBE 343C 0008                  		move.w	#8,d2
0000FEC2 363C 0010                  		move.w	#$10,d3
0000FEC6 3828 0008                  		move.w	obX(a0),d4
0000FECA 6100 0000                  		bsr.w	SolidObject
0000FECE 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic on top of the spring?
0000FED2 6600                       		bne.s	Spring_BounceUp	; if yes, branch
0000FED4 4E75                       		rts	
0000FED6                            ; ===========================================================================
0000FED6                            
0000FED6                            Spring_BounceUp:
0000FED6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FEDA 5069 000C                  		addq.w	#8,obY(a1)
0000FEDE 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1) ; move Sonic upwards
0000FEE4 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FEEA 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FEF0 137C 0000 001C             		move.b	#id_Spring,obAnim(a1) ; use "bouncing" animation
0000FEF6 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FEFC 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FF02 4228 0025                  		clr.b	obSolid(a0)
0000FF10                            
0000FF10                            Spring_AniUp:	; Routine 4
0000FF10 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FF16 6000 C9CC                  		bra.w	AnimateSprite
0000FF1A                            ; ===========================================================================
0000FF1A                            
0000FF1A                            Spring_ResetUp:	; Routine 6
0000FF1A 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000FF20 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Up" routine
0000FF24 4E75                       		rts	
0000FF26                            ; ===========================================================================
0000FF26                            
0000FF26                            Spring_LR:	; Routine 8
0000FF26 323C 0013                  		move.w	#$13,d1
0000FF2A 343C 000E                  		move.w	#$E,d2
0000FF2E 363C 000F                  		move.w	#$F,d3
0000FF32 3828 0008                  		move.w	obX(a0),d4
0000FF36 6100 0000                  		bsr.w	SolidObject
0000FF3A 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FF40 6600                       		bne.s	loc_DC0C
0000FF42 117C 0008 0024             		move.b	#8,obRoutine(a0)
0000FF48                            
0000FF48                            loc_DC0C:
0000FF48 0828 0005 0022             		btst	#5,obStatus(a0)
0000FF4E 6600                       		bne.s	Spring_BounceLR
0000FF50 4E75                       		rts	
0000FF52                            ; ===========================================================================
0000FF52                            
0000FF52                            Spring_BounceLR:
0000FF52 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FF56 3368 0030 0010             		move.w	spring_pow(a0),obVelX(a1) ; move Sonic to the left
0000FF5C 5069 0008                  		addq.w	#8,obX(a1)
0000FF60 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
0000FF66 6600                       		bne.s	Spring_Flipped	; if yes, branch
0000FF68 0469 0010 0008             		subi.w	#$10,obX(a1)
0000FF6E 4469 0010                  		neg.w	obVelX(a1)	; move Sonic to	the right
0000FF72                            
0000FF72                            	Spring_Flipped:
0000FF72 337C 000F 003E             		move.w	#$F,$3E(a1)
0000FF78 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000FF7E 0869 0000 0022             		bchg	#0,obStatus(a1)
0000FF84 0829 0002 0022             		btst	#2,obStatus(a1)
0000FF8A 6600                       		bne.s	loc_DC56
0000FF8C 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
0000FF92                            
0000FF92                            loc_DC56:
0000FF92 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000FF98 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000FFA8                            
0000FFA8                            Spring_AniLR:	; Routine $A
0000FFA8 4278 C904                  		clr.w ($FFFFC904).w	; clear screen delay counter
0000FFAC 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FFB2 6000 C930                  		bra.w	AnimateSprite
0000FFB6                            ; ===========================================================================
0000FFB6                            
0000FFB6                            Spring_ResetLR:	; Routine $C
0000FFB6 117C 0002 001D             		move.b	#2,obNextAni(a0) ; reset animation
0000FFBC 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_LR" routine
0000FFC0 4E75                       		rts	
0000FFC2                            ; ===========================================================================
0000FFC2                            
0000FFC2                            Spring_Dwn:	; Routine $E
0000FFC2 323C 001B                  		move.w	#$1B,d1
0000FFC6 343C 0008                  		move.w	#8,d2
0000FFCA 363C 0010                  		move.w	#$10,d3
0000FFCE 3828 0008                  		move.w	obX(a0),d4
0000FFD2 6100 0000                  		bsr.w	SolidObject
0000FFD6 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FFDC 6600                       		bne.s	loc_DCA4
0000FFDE 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000FFE4                            
0000FFE4                            loc_DCA4:
0000FFE4 4A28 0025                  		tst.b	obSolid(a0)
0000FFE8 6600                       		bne.s	locret_DCAE
0000FFEA 4A44                       		tst.w	d4
0000FFEC 6B00                       		bmi.s	Spring_BounceDwn
0000FFEE                            
0000FFEE                            locret_DCAE:
0000FFEE 4E75                       		rts	
0000FFF0                            ; ===========================================================================
0000FFF0                            
0000FFF0                            Spring_BounceDwn:
0000FFF0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FFF4 5169 000C                  		subq.w	#8,obY(a1)
0000FFF8 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1)
0000FFFE 4469 0012                  		neg.w	obVelY(a1)	; move Sonic downwards
00010002 08E9 0001 0022             		bset	#1,obStatus(a1)
00010008 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001000E 137C 0002 0024             		move.b	#2,obRoutine(a1)
00010014 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001001A 4228 0025                  		clr.b	obSolid(a0)
00010028                            
00010028                            Spring_AniDwn:	; Routine $10
00010028 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0001002E 6000 C8B4                  		bra.w	AnimateSprite
00010032                            ; ===========================================================================
00010032                            
00010032                            Spring_ResetDwn:
00010032                            		; Routine $12
00010032 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
00010038 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Dwn" routine
0001003C 4E75                       		rts	
0001003C 4E75                       		rts	
0001003E                            		include	"_anim\Springs.asm"
0001003E                            ; ---------------------------------------------------------------------------
0001003E                            ; Animation script - springs
0001003E                            ; ---------------------------------------------------------------------------
0001003E 0000                       Ani_Spring:	dc.w byte_DD02-Ani_Spring
00010040 0000                       		dc.w byte_DD0E-Ani_Spring
00010042 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, afRoutine
0001004E 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, afRoutine
0001005A                            		even
0001005A                            		even
0001005A                            Map_Spring:	include	"_maps\Springs.asm"
0001005A                            ; ---------------------------------------------------------------------------
0001005A                            ; Sprite mappings - springs
0001005A                            ; ---------------------------------------------------------------------------
0001005A                            Map_Spring_internal:
0001005A 0000                       		dc.w M_Spg_Up-Map_Spring_internal
0001005C 0000                       		dc.w M_Spg_UpFlat-Map_Spring_internal
0001005E 0000                       		dc.w M_Spg_UpExt-Map_Spring_internal
00010060 0000                       		dc.w M_Spg_Left-Map_Spring_internal
00010062 0000                       		dc.w M_Spg_LeftFlat-Map_Spring_internal
00010064 0000                       		dc.w M_Spg_LeftExt-Map_Spring_internal
00010066 02                         M_Spg_Up:	dc.b 2			; facing up
00010067 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0001006C 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
00010071 01                         M_Spg_UpFlat:	dc.b 1			; facing up, flattened
00010072 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
00010077 03                         M_Spg_UpExt:	dc.b 3			; facing up, extended
00010078 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0001007D F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
00010082 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
00010087 01                         M_Spg_Left:	dc.b 1			; facing left
00010088 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0001008D 01                         M_Spg_LeftFlat:	dc.b 1			; facing left, flattened
0001008E F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
00010093 04                         M_Spg_LeftExt:	dc.b 4			; facing left, extended
00010094 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
00010099 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0001009E F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
000100A3 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
000100A8                            		even
000100A8                            		even
000100A8                            
000100A8                            		include	"_incObj\42 Newtron.asm"
000100A8                            ; ---------------------------------------------------------------------------
000100A8                            ; Object 42 - Newtron enemy (GHZ)
000100A8                            ; ---------------------------------------------------------------------------
000100A8                            
000100A8                            Newtron:
000100A8 7000                       		moveq	#0,d0
000100AA 1028 0024                  		move.b	obRoutine(a0),d0
000100AE 323B 0000                  		move.w	Newt_Index(pc,d0.w),d1
000100B2 4EFB 1000                  		jmp	Newt_Index(pc,d1.w)
000100B6                            ; ===========================================================================
000100B6 0000                       Newt_Index:	dc.w Newt_Main-Newt_Index
000100B8 0000                       		dc.w Newt_Action-Newt_Index
000100BA 0000                       		dc.w Newt_Delete-Newt_Index
000100BC                            ; ===========================================================================
000100BC                            
000100BC                            Newt_Main:	; Routine 0
000100BC 5428 0024                  		addq.b	#2,obRoutine(a0)
000100C0 217C 0000 0000 0004        		move.l	#Map_Newt,obMap(a0)
000100C8 317C 049B 0002             		move.w	#$49B,obGfx(a0)
000100CE 117C 0004 0001             		move.b	#4,obRender(a0)
000100D4 317C 0200 0018             		move.w	#$200,obPriority(a0)
000100DA 117C 0014 0014             		move.b	#$14,obActWid(a0)
000100E0 117C 0010 0016             		move.b	#$10,obHeight(a0)
000100E6 117C 0008 0017             		move.b	#8,obWidth(a0)
000100EC                            
000100EC                            Newt_Action:	; Routine 2
000100EC 7000                       		moveq	#0,d0
000100EE 1028 0025                  		move.b	ob2ndRout(a0),d0
000100F2 323B 0000                  		move.w	@index(pc,d0.w),d1
000100F6 4EBB 1000                  		jsr	@index(pc,d1.w)
000100FA 43F9 0000 0000             		lea	(Ani_Newt).l,a1
00010100 6100 C7E2                  		bsr.w	AnimateSprite
00010104 6000 0000                  		bra.w	RememberState
00010108                            ; ===========================================================================
00010108 0000                       @index:		dc.w @chkdistance-@index
0001010A 0000                       		dc.w @type00-@index
0001010C 0000                       		dc.w @matchfloor-@index
0001010E 0000                       		dc.w @speed-@index
00010110 0000                       		dc.w @type01-@index
00010112                            ; ===========================================================================
00010112                            
00010112                            @chkdistance:
00010112 08E8 0000 0022             		bset	#0,obStatus(a0)
00010118 3038 D008                  		move.w	(v_player+obX).w,d0
0001011C 9068 0008                  		sub.w	obX(a0),d0
00010120 6400                       		bcc.s	@sonicisright
00010122 4440                       		neg.w	d0
00010124 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001012A                            
0001012A                            	@sonicisright:
0001012A 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0001012E 6400                       		bcc.s	@outofrange	; if not, branch
00010130 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @type00 next
00010134 117C 0001 001C             		move.b	#1,obAnim(a0)
0001013A 4A28 0028                  		tst.b	obSubtype(a0)	; check	object type
0001013E 6700                       		beq.s	@istype00	; if type is 00, branch
00010140                            
00010140 317C 249B 0002             		move.w	#$249B,obGfx(a0)
00010146 117C 0008 0025             		move.b	#8,ob2ndRout(a0) ; goto @type01 next
0001014C 117C 0004 001C             		move.b	#4,obAnim(a0)	; use different	animation
00010152                            
00010152                            	@outofrange:
00010152                            	@istype00:
00010152 4E75                       		rts	
00010154                            ; ===========================================================================
00010154                            
00010154                            @type00:
00010154 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has "appearing" animation finished?
0001015A 6400                       		bcc.s	@fall		; is yes, branch
0001015C 08E8 0000 0022             		bset	#0,obStatus(a0)
00010162 3038 D008                  		move.w	(v_player+obX).w,d0
00010166 9068 0008                  		sub.w	obX(a0),d0
0001016A 6400                       		bcc.s	@sonicisright2
0001016C 08A8 0000 0022             		bclr	#0,obStatus(a0)
00010172                            
00010172                            	@sonicisright2:
00010172 4E75                       		rts	
00010174                            ; ===========================================================================
00010174                            
00010174                            	@fall:
00010174 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
0001017A 6600                       		bne.s	@loc_DE42
0001017C 117C 000C 0020             		move.b	#$C,obColType(a0)
00010182                            
00010182                            	@loc_DE42:
00010182 6100 F65E                  		bsr.w	ObjectFall
00010186 4EB9 0000 0000             		jsr		ObjFloorDist
0001018C 4A41                       		tst.w	d1		; has newtron hit the floor?
0001018E 6A00                       		bpl.s	@keepfalling	; if not, branch
00010190                            
00010190 D368 000C                  		add.w	d1,obY(a0)
00010194 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop newtron falling
0001019A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001019E 117C 0002 001C             		move.b	#2,obAnim(a0)
000101A4 0828 0005 0002             		btst	#5,obGfx(a0)
000101AA 6700                       		beq.s	@pppppppp
000101AC 5228 001C                  		addq.b	#1,obAnim(a0)
000101B0                            
000101B0                            	@pppppppp:
000101B0 117C 000D 0020             		move.b	#$D,obColType(a0)
000101B6 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move newtron horizontally
000101BC 0828 0000 0022             		btst	#0,obStatus(a0)
000101C2 6600                       		bne.s	@keepfalling
000101C4 4468 0010                  		neg.w	obVelX(a0)
000101C8                            
000101C8                            	@keepfalling:
000101C8 4E75                       		rts	
000101CA                            ; ===========================================================================
000101CA                            
000101CA                            @matchfloor:
000101CA 6100 F64E                  		bsr.w	SpeedToPos
000101CE 4EB9 0000 0000             		jsr		ObjFloorDist
000101D4 0C41 FFF8                  		cmpi.w	#-8,d1
000101D8 6D00                       		blt.s	@nextroutine
000101DA 0C41 000C                  		cmpi.w	#$C,d1
000101DE 6C00                       		bge.s	@nextroutine
000101E0 D368 000C                  		add.w	d1,obY(a0)	; match	newtron's position with floor
000101E4 4E75                       		rts	
000101E6                            ; ===========================================================================
000101E6                            
000101E6                            	@nextroutine:
000101E6 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @speed next
000101EA 4E75                       		rts	
000101EC                            ; ===========================================================================
000101EC                            
000101EC                            @speed:
000101EC 6100 F62C                  		bsr.w	SpeedToPos
000101F0 4E75                       		rts	
000101F2                            ; ===========================================================================
000101F2                            
000101F2                            @type01:
000101F2 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
000101F8 6600                       		bne.s	@firemissile
000101FA 117C 000C 0020             		move.b	#$C,obColType(a0)
00010200                            
00010200                            	@firemissile:
00010200 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
00010206 6600                       		bne.s	@fail
00010208 4A28 0032                  		tst.b	$32(a0)
0001020C 6600                       		bne.s	@fail
0001020E 117C 0001 0032             		move.b	#1,$32(a0)
00010214 6100 FBB2                  		bsr.w	FindFreeObj
00010218 6600                       		bne.s	@fail
0001021A 12BC 0023                  		move.b	#id_Missile,0(a1) ; load missile object
0001021E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010224 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001022A 5169 000C                  		subq.w	#8,obY(a1)
0001022E 337C 0200 0010             		move.w	#$200,obVelX(a1)
00010234 303C 0014                  		move.w	#$14,d0
00010238 0828 0000 0022             		btst	#0,obStatus(a0)
0001023E 6600                       		bne.s	@noflip
00010240 4440                       		neg.w	d0
00010242 4469 0010                  		neg.w	obVelX(a1)
00010246                            
00010246                            	@noflip:
00010246 D169 0008                  		add.w	d0,obX(a1)
0001024A 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00010250 137C 0001 0028             		move.b	#1,obSubtype(a1)
00010256                            
00010256                            	@fail:
00010256 4E75                       		rts	
00010258                            ; ===========================================================================
00010258                            
00010258                            Newt_Delete:	; Routine 4
00010258 6000 F614                  		bra.w	DeleteObject
00010258 6000 F614                  		bra.w	DeleteObject
0001025C                            		include	"_anim\Newtron.asm"
0001025C                            ; ---------------------------------------------------------------------------
0001025C                            ; Animation script - Newtron enemy
0001025C                            ; ---------------------------------------------------------------------------
0001025C 0000                       Ani_Newt:	dc.w A_Newt_Blank-Ani_Newt
0001025E 0000                       		dc.w A_Newt_Drop-Ani_Newt
00010260 0000                       		dc.w A_Newt_Fly1-Ani_Newt
00010262 0000                       		dc.w A_Newt_Fly2-Ani_Newt
00010264 0000                       		dc.w A_Newt_Fires-Ani_Newt
00010266 0F0A FF                    A_Newt_Blank:	dc.b $F, $A, afEnd
0001026A 00                         		even
0001026A 1300 0103 0405 FE01        A_Newt_Drop:	dc.b $13, 0, 1,	3, 4, 5, afBack, 1
00010272 0206 07FF                  A_Newt_Fly1:	dc.b 2,	6, 7, afEnd
00010276 0208 09FF                  A_Newt_Fly2:	dc.b 2,	8, 9, afEnd
0001027A 1300 0101 0201 0100 FC     A_Newt_Fires:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, afRoutine
00010284 00                         		even
00010284 00                         		even
00010284                            Map_Newt:	include	"_maps\Newtron.asm"
00010284                            ; ---------------------------------------------------------------------------
00010284                            ; Sprite mappings - Newtron enemy (GHZ)
00010284                            ; ---------------------------------------------------------------------------
00010284                            Map_Newt_internal:
00010284 0000                       		dc.w M_Newt_Trans-Map_Newt_internal
00010286 0000                       		dc.w M_Newt_Norm-Map_Newt_internal
00010288 0000                       		dc.w M_Newt_Fires-Map_Newt_internal
0001028A 0000                       		dc.w M_Newt_Drop1-Map_Newt_internal
0001028C 0000                       		dc.w M_Newt_Drop2-Map_Newt_internal
0001028E 0000                       		dc.w M_Newt_Drop3-Map_Newt_internal
00010290 0000                       		dc.w M_Newt_Fly1a-Map_Newt_internal
00010292 0000                       		dc.w M_Newt_Fly1b-Map_Newt_internal
00010294 0000                       		dc.w M_Newt_Fly2a-Map_Newt_internal
00010296 0000                       		dc.w M_Newt_Fly2b-Map_Newt_internal
00010298 0000                       		dc.w M_Newt_Blank-Map_Newt_internal
0001029A 03                         M_Newt_Trans:	dc.b 3
0001029B EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC	; partially visible
000102A0 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
000102A5 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
000102AA 03                         M_Newt_Norm:	dc.b 3
000102AB EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC ; visible
000102B0 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
000102B5 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
000102BA 03                         M_Newt_Fires:	dc.b 3
000102BB EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC ; open mouth, firing
000102C0 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
000102C5 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
000102CA 04                         M_Newt_Drop1:	dc.b 4
000102CB EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC ; dropping
000102D0 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
000102D5 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
000102DA 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
000102DF 03                         M_Newt_Drop2:	dc.b 3
000102E0 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
000102E5 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
000102EA 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
000102EF 02                         M_Newt_Drop3:	dc.b 2
000102F0 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
000102F5 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000102FA 03                         M_Newt_Fly1a:	dc.b 3
000102FB F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC ; flying
00010300 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010305 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0001030A 03                         M_Newt_Fly1b:	dc.b 3
0001030B F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010310 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010315 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0001031A 03                         M_Newt_Fly2a:	dc.b 3
0001031B F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010320 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010325 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0001032A 03                         M_Newt_Fly2b:	dc.b 3
0001032B F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010330 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010335 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0001033A 00                         M_Newt_Blank:	dc.b 0
0001033C 00                         		even
0001033C 00                         		even
0001033C                            		include	"_incObj\43 Roller.asm"
0001033C                            ; ---------------------------------------------------------------------------
0001033C                            ; Object 43 - Roller enemy (SYZ)
0001033C                            ; ---------------------------------------------------------------------------
0001033C                            
0001033C                            Roller:
0001033C 7000                       		moveq	#0,d0
0001033E 1028 0024                  		move.b	obRoutine(a0),d0
00010342 323B 0000                  		move.w	Roll_Index(pc,d0.w),d1
00010346 4EFB 1000                  		jmp	Roll_Index(pc,d1.w)
0001034A                            ; ===========================================================================
0001034A 0000                       Roll_Index:	dc.w Roll_Main-Roll_Index
0001034C 0000                       		dc.w Roll_Action-Roll_Index
0001034E                            ; ===========================================================================
0001034E                            
0001034E                            Roll_Main:	; Routine 0
0001034E 117C 000E 0016             		move.b	#$E,obHeight(a0)
00010354 117C 0008 0017             		move.b	#8,obWidth(a0)
0001035A 6100 F486                  		bsr.w	ObjectFall
0001035E 4EB9 0000 0000             		jsr	ObjFloorDist
00010364 4A41                       		tst.w	d1
00010366 6A00                       		bpl.s	locret_E052
00010368 D368 000C                  		add.w	d1,obY(a0)	; match	roller's position with the floor
0001036C 317C 0000 0012             		move.w	#0,obVelY(a0)
00010372 5428 0024                  		addq.b	#2,obRoutine(a0)
00010376 217C 0000 0000 0004        		move.l	#Map_Roll,obMap(a0)
0001037E 317C 04B8 0002             		move.w	#$4B8,obGfx(a0)
00010384 117C 0004 0001             		move.b	#4,obRender(a0)
0001038A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00010390 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010396                            
00010396                            	locret_E052:
00010396 4E75                       		rts	
00010398                            ; ===========================================================================
00010398                            
00010398                            Roll_Action:	; Routine 2
00010398 7000                       		moveq	#0,d0
0001039A 1028 0025                  		move.b	ob2ndRout(a0),d0
0001039E 323B 0000                  		move.w	Roll_Index2(pc,d0.w),d1
000103A2 4EBB 1000                  		jsr	Roll_Index2(pc,d1.w)
000103A6 43F9 0000 0000             		lea	(Ani_Roll).l,a1
000103AC 6100 C536                  		bsr.w	AnimateSprite
000103B0 3028 0008                  		move.w	obX(a0),d0
000103B4 0240 FF80                  		andi.w	#$FF80,d0
000103B8 3238 F700                  		move.w	(v_screenposx).w,d1
000103BC 0441 0080                  		subi.w	#$80,d1
000103C0 0241 FF80                  		andi.w	#$FF80,d1
000103C4 9041                       		sub.w	d1,d0
000103C6 0C40 0280                  		cmpi.w	#$280,d0
000103CA 6E00 0000                  		bgt.w	Roll_ChkGone
000103CE 6000 F45E                  		bra.w	DisplaySprite
000103D2                            ; ===========================================================================
000103D2                            
000103D2                            Roll_ChkGone:
000103D2 45F8 FC00                  		lea	(v_objstate).w,a2
000103D6 7000                       		moveq	#0,d0
000103D8 1028 0023                  		move.b	obRespawnNo(a0),d0
000103DC 6700                       		beq.s	Roll_Delete
000103DE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000103E4                            
000103E4                            Roll_Delete:
000103E4 6000 F488                  		bra.w	DeleteObject
000103E8                            ; ===========================================================================
000103E8 0000                       Roll_Index2:	dc.w Roll_RollChk-Roll_Index2
000103EA 0000                       		dc.w Roll_RollNoChk-Roll_Index2
000103EC 0000                       		dc.w Roll_ChkJump-Roll_Index2
000103EE 0000                       		dc.w Roll_MatchFloor-Roll_Index2
000103F0                            ; ===========================================================================
000103F0                            
000103F0                            Roll_RollChk:
000103F0 3038 D008                  		move.w	(v_player+obX).w,d0
000103F4 0440 0100                  		subi.w	#$100,d0
000103F8 6500                       		bcs.s	loc_E0D2
000103FA 9068 0008                  		sub.w	obX(a0),d0	; check	distance between Roller	and Sonic
000103FE 6500                       		bcs.s	loc_E0D2
00010400 5828 0025                  		addq.b	#4,ob2ndRout(a0)
00010404 117C 0002 001C             		move.b	#2,obAnim(a0)
0001040A 317C 0700 0010             		move.w	#$700,obVelX(a0) ; move Roller horizontally
00010410 117C 008E 0020             		move.b	#$8E,obColType(a0) ; make Roller invincible
00010416                            
00010416                            loc_E0D2:
00010416 588F                       		addq.l	#4,sp
00010418 4E75                       		rts	
0001041A                            ; ===========================================================================
0001041A                            
0001041A                            Roll_RollNoChk:
0001041A 0C28 0002 001C             		cmpi.b	#2,obAnim(a0)
00010420 6700                       		beq.s	loc_E0F8
00010422 5368 0030                  		subq.w	#1,$30(a0)
00010426 6A00                       		bpl.s	locret_E0F6
00010428 117C 0001 001C             		move.b	#1,obAnim(a0)
0001042E 317C 0700 0010             		move.w	#$700,obVelX(a0)
00010434 117C 008E 0020             		move.b	#$8E,obColType(a0)
0001043A                            
0001043A                            locret_E0F6:
0001043A 4E75                       		rts	
0001043C                            ; ===========================================================================
0001043C                            
0001043C                            loc_E0F8:
0001043C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00010440 4E75                       		rts	
00010442                            ; ===========================================================================
00010442                            
00010442                            Roll_ChkJump:
00010442 6100 0000                  		bsr.w	Roll_Stop
00010446 6100 F3D2                  		bsr.w	SpeedToPos
0001044A 4EB9 0000 0000             		jsr	ObjFloorDist
00010450 0C41 FFF8                  		cmpi.w	#-8,d1
00010454 6D00                       		blt.s	Roll_Jump
00010456 0C41 000C                  		cmpi.w	#$C,d1
0001045A 6C00                       		bge.s	Roll_Jump
0001045C D368 000C                  		add.w	d1,obY(a0)
00010460 4E75                       		rts	
00010462                            ; ===========================================================================
00010462                            
00010462                            Roll_Jump:
00010462 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00010466 08E8 0000 0032             		bset	#0,$32(a0)
0001046C 6700                       		beq.s	locret_E12E
0001046E 317C FA00 0012             		move.w	#-$600,obVelY(a0)	; move Roller vertically
00010474                            
00010474                            locret_E12E:
00010474 4E75                       		rts	
00010476                            ; ===========================================================================
00010476                            
00010476                            Roll_MatchFloor:
00010476 6100 F36A                  		bsr.w	ObjectFall
0001047A 4A68 0012                  		tst.w	obVelY(a0)
0001047E 6B00                       		bmi.s	locret_E150
00010480 4EB9 0000 0000             		jsr	ObjFloorDist
00010486 4A41                       		tst.w	d1
00010488 6A00                       		bpl.s	locret_E150
0001048A D368 000C                  		add.w	d1,obY(a0)	; match	Roller's position with the floor
0001048E 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00010492 317C 0000 0012             		move.w	#0,obVelY(a0)
00010498                            
00010498                            locret_E150:
00010498 4E75                       		rts	
0001049A                            
0001049A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001049A                            
0001049A                            
0001049A                            Roll_Stop:
0001049A 4A28 0032                  		tst.b	$32(a0)
0001049E 6B00                       		bmi.s	locret_E188
000104A0 3038 D008                  		move.w	(v_player+obX).w,d0
000104A4 0440 0030                  		subi.w	#$30,d0
000104A8 9068 0008                  		sub.w	obX(a0),d0
000104AC 6400                       		bcc.s	locret_E188
000104AE 117C 0000 001C             		move.b	#0,obAnim(a0)
000104B4 117C 000E 0020             		move.b	#$E,obColType(a0)
000104BA 4268 0010                  		clr.w	obVelX(a0)
000104BE 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
000104C4 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
000104CA 08E8 0007 0032             		bset	#7,$32(a0)
000104D0                            
000104D0                            locret_E188:
000104D0 4E75                       		rts	
000104D2                            ; End of function Roll_Stop
000104D2                            ; End of function Roll_Stop
000104D2                            		include	"_anim\Roller.asm"
000104D2                            ; ---------------------------------------------------------------------------
000104D2                            ; Animation script - Roller enemy
000104D2                            ; ---------------------------------------------------------------------------
000104D2 0000                       Ani_Roll:	dc.w A_Roll_Unfold-Ani_Roll
000104D4 0000                       		dc.w A_Roll_Fold-Ani_Roll
000104D6 0000                       		dc.w A_Roll_Roll-Ani_Roll
000104D8 0F02 0100 FE01             A_Roll_Unfold:	dc.b $F, 2, 1, 0, afBack, 1
000104DE 0F01 02FD 02               A_Roll_Fold:	dc.b $F, 1, 2, afChange, 2
000104E4 00                         		even
000104E4 0303 0402 FF               A_Roll_Roll:	dc.b 3,	3, 4, 2, afEnd
000104EA 00                         		even
000104EA 00                         		even
000104EA                            Map_Roll:	include	"_maps\Roller.asm"
000104EA                            ; --------------------------------------------------------------------------------
000104EA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000104EA                            ; --------------------------------------------------------------------------------
000104EA                            
000104EA                            SME_q3BmU:	
000104EA 0000 0000                  		dc.w SME_q3BmU_A-SME_q3BmU, SME_q3BmU_15-SME_q3BmU	
000104EE 0000 0000                  		dc.w SME_q3BmU_20-SME_q3BmU, SME_q3BmU_26-SME_q3BmU	
000104F2 0000                       		dc.w SME_q3BmU_2C-SME_q3BmU	
000104F4 02                         SME_q3BmU_A:	dc.b 2	
000104F5 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0	
000104FA F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0	
000104FF 02                         SME_q3BmU_15:	dc.b 2	
00010500 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	
00010505 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0	
0001050A 01                         SME_q3BmU_20:	dc.b 1	
0001050B F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0	
00010510 01                         SME_q3BmU_26:	dc.b 1	
00010511 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0	
00010516 01                         SME_q3BmU_2C:	dc.b 1	
00010517 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0	
0001051C                            		even
0001051C                            		even
0001051C                            
0001051C                            		include	"_incObj\44 GHZ Edge Walls.asm"
0001051C                            ; ---------------------------------------------------------------------------
0001051C                            ; Object 44 - edge walls (GHZ)
0001051C                            ; ---------------------------------------------------------------------------
0001051C                            
0001051C                            EdgeWalls:
0001051C 7000                       		moveq	#0,d0
0001051E 1028 0024                  		move.b	obRoutine(a0),d0
00010522 323B 0000                  		move.w	Edge_Index(pc,d0.w),d1
00010526 4EFB 1000                  		jmp	Edge_Index(pc,d1.w)
0001052A                            ; ===========================================================================
0001052A 0000                       Edge_Index:	dc.w Edge_Main-Edge_Index
0001052C 0000                       		dc.w Edge_Solid-Edge_Index
0001052E 0000                       		dc.w Edge_Display-Edge_Index
00010530                            ; ===========================================================================
00010530                            
00010530                            Edge_Main:	; Routine 0
00010530 5428 0024                  		addq.b	#2,obRoutine(a0)
00010534 217C 0000 0000 0004        		move.l	#Map_Edge,obMap(a0)
0001053C 317C 434C 0002             		move.w	#$434C,obGfx(a0)
00010542 0028 0004 0001             		ori.b	#4,obRender(a0)
00010548 117C 0008 0014             		move.b	#8,obActWid(a0)
0001054E 317C 0300 0018             		move.w	#$300,obPriority(a0)
00010554 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0) ; copy object type number to frame number
0001055A 08A8 0004 001A             		bclr	#4,obFrame(a0)	; clear	4th bit	(deduct	$10)
00010560 6700                       		beq.s	Edge_Solid	; make object solid if 4th bit = 0
00010562 5428 0024                  		addq.b	#2,obRoutine(a0)
00010566 6000                       		bra.s	Edge_Display	; don't make it solid if 4th bit = 1
00010568                            ; ===========================================================================
00010568                            
00010568                            Edge_Solid:	; Routine 2
00010568 323C 0013                  		move.w	#$13,d1
0001056C 343C 0028                  		move.w	#$28,d2
00010570 6100 9FA6                  		bsr.w	Obj44_SolidWall
00010574                            
00010574                            Edge_Display:	; Routine 4
00010574 6100 F2B8                  		bsr.w	DisplaySprite
00010596 4E75                       		rts	
00010596 4E75                       		rts	
00010598                            Map_Edge:	include	"_maps\GHZ Edge Walls.asm"
00010598                            ; ---------------------------------------------------------------------------
00010598                            ; Sprite mappings - walls (GHZ)
00010598                            ; ---------------------------------------------------------------------------
00010598                            Map_Edge_internal:
00010598 0000                       		dc.w M_Edge_Shadow-Map_Edge_internal
0001059A 0000                       		dc.w M_Edge_Light-Map_Edge_internal
0001059C 0000                       		dc.w M_Edge_Dark-Map_Edge_internal
0001059E 04                         M_Edge_Shadow:	dc.b 4
0001059F E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8	; light with shadow
000105A4 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000105A9 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
000105AE 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
000105B3 04                         M_Edge_Light:	dc.b 4
000105B4 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8	; light with no shadow
000105B9 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000105BE 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
000105C3 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
000105C8 04                         M_Edge_Dark:	dc.b 4
000105C9 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8	; all shadow
000105CE F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
000105D3 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
000105D8 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
000105DE 00                         		even
000105DE 00                         		even
000105DE                            
000105DE                            		include	"_incObj\13 Lava Ball Maker.asm"
000105DE                            ; ---------------------------------------------------------------------------
000105DE                            ; Object 13 - lava ball	maker (MZ, SLZ)
000105DE                            ; ---------------------------------------------------------------------------
000105DE                            
000105DE                            LavaMaker:
000105DE 7000                       		moveq	#0,d0
000105E0 1028 0024                  		move.b	obRoutine(a0),d0
000105E4 323B 0000                  		move.w	LavaM_Index(pc,d0.w),d1
000105E8 4EBB 1000                  		jsr	LavaM_Index(pc,d1.w)
000105EC 6000 0000                  		bra.w	LBall_ChkDel
000105F0                            ; ===========================================================================
000105F0 0000                       LavaM_Index:	dc.w LavaM_Main-LavaM_Index
000105F2 0000                       		dc.w LavaM_MakeLava-LavaM_Index
000105F4                            ; ---------------------------------------------------------------------------
000105F4                            ;
000105F4                            ; Lava ball production rates
000105F4                            ;
000105F4 1E3C 5A78 96B4             LavaM_Rates:	dc.b 30, 60, 90, 120, 150, 180
000105FA                            ; ===========================================================================
000105FA                            
000105FA                            LavaM_Main:	; Routine 0
000105FA 5428 0024                  		addq.b	#2,obRoutine(a0)
000105FE 1028 0028                  		move.b	obSubtype(a0),d0
00010602 E848                       		lsr.w	#4,d0
00010604 0240 000F                  		andi.w	#$F,d0
00010608 117B 00EA 001F             		move.b	LavaM_Rates(pc,d0.w),obDelayAni(a0)
0001060E 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; set time delay for lava balls
00010614 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0001061A                            
0001061A                            LavaM_MakeLava:	; Routine 2
0001061A 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from time delay
0001061E 6600                       		bne.s	LavaM_Wait	; if time still	remains, branch
00010620 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset time delay
00010626 6100 F594                  		bsr.w	ChkObjectVisible
0001062A 6600                       		bne.s	LavaM_Wait
0001062C 6100 F79A                  		bsr.w	FindFreeObj
00010630 6600                       		bne.s	LavaM_Wait
00010632 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
00010636 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001063C 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010642 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00010648                            
00010648                            	LavaM_Wait:
00010648 4E75                       		rts	
00010648 4E75                       		rts	
0001064A                            		include	"_incObj\14 Lava Ball.asm"
0001064A                            ; ---------------------------------------------------------------------------
0001064A                            ; Object 14 - lava balls (MZ, SLZ)
0001064A                            ; ---------------------------------------------------------------------------
0001064A                            
0001064A                            LavaBall:
0001064A 7000                       		moveq	#0,d0
0001064C 1028 0024                  		move.b	obRoutine(a0),d0
00010650 323B 0000                  		move.w	LBall_Index(pc,d0.w),d1
00010654 4EBB 1000                  		jsr	LBall_Index(pc,d1.w)
00010658 6000 F1D4                  		bra.w	DisplaySprite
0001065C                            ; ===========================================================================
0001065C 0000                       LBall_Index:	dc.w LBall_Main-LBall_Index
0001065E 0000                       		dc.w LBall_Action-LBall_Index
00010660 0000                       		dc.w LBall_Delete-LBall_Index
00010662                            
00010662 FC00 FB00 FA00 F900 FE00   LBall_Speeds:	dc.w -$400, -$500, -$600, -$700, -$200
0001066C 0200 FE00 0200 0000        		dc.w $200, -$200, $200,	0
00010674                            ; ===========================================================================
00010674                            
00010674                            LBall_Main:	; Routine 0
00010674 5428 0024                  		addq.b	#2,obRoutine(a0)
00010678 117C 0008 0016             		move.b	#8,obHeight(a0)
0001067E 117C 0008 0017             		move.b	#8,obWidth(a0)
00010684 217C 0000 D536 0004        		move.l	#Map_Fire,obMap(a0)
0001068C 317C 0345 0002             		move.w	#$345,obGfx(a0)
00010692 0C38 0003 FE10             		cmpi.b	#3,(v_zone).w	; check if level is SLZ
00010698 6600                       		bne.s	@notSLZ
0001069A 317C 0480 0002             		move.w	#$480,obGfx(a0)	; SLZ specific code
000106A0                            
000106A0                            	@notSLZ:
000106A0 117C 0004 0001             		move.b	#4,obRender(a0)
000106A6 317C 0180 0018             		move.w	#$180,obPriority(a0)
000106AC 117C 008B 0020             		move.b	#$8B,obColType(a0)
000106B2 3168 000C 0030             		move.w	obY(a0),$30(a0)
000106B8 4A28 0029                  		tst.b	$29(a0)
000106BC 6700                       		beq.s	@speed
000106BE 5428 0018                  		addq.b	#2,obPriority(a0)
000106C2                            
000106C2                            	@speed:
000106C2 7000                       		moveq	#0,d0
000106C4 1028 0028                  		move.b	obSubtype(a0),d0
000106C8 D040                       		add.w	d0,d0
000106CA 317B 0096 0012             		move.w	LBall_Speeds(pc,d0.w),obVelY(a0) ; load object speed (vertical)
000106D0 117C 0008 0014             		move.b	#8,obActWid(a0)
000106D6 0C28 0006 0028             		cmpi.b	#6,obSubtype(a0) ; is object type below $6 ?
000106DC 6500                       		bcs.s	@sound		; if yes, branch
000106DE                            
000106DE 117C 0010 0014             		move.b	#$10,obActWid(a0)
000106E4 117C 0002 001C             		move.b	#2,obAnim(a0)	; use horizontal animation
000106EA 3168 0012 0010             		move.w	obVelY(a0),obVelX(a0) ; set horizontal speed
000106F0 317C 0000 0012             		move.w	#0,obVelY(a0)	; delete vertical speed
000106F6                            
000106F6                            	@sound:
00010700                            
00010700                            LBall_Action:	; Routine 2
00010700 7000                       		moveq	#0,d0
00010702 1028 0028                  		move.b	obSubtype(a0),d0
00010706 D040                       		add.w	d0,d0
00010708 323B 0000                  		move.w	LBall_TypeIndex(pc,d0.w),d1
0001070C 4EBB 1000                  		jsr	LBall_TypeIndex(pc,d1.w)
00010710 6100 F108                  		bsr.w	SpeedToPos
00010714 43F9 0000 0000             		lea	(Ani_Fire).l,a1
0001071A 6100 C1C8                  		bsr.w	AnimateSprite
0001071E                            
0001071E                            LBall_ChkDel:
0001073C 4E75                       		rts	
0001073E                            ; ===========================================================================
0001073E 0000 0000                  LBall_TypeIndex:dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
00010742 0000 0000                  		dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
00010746 0000 0000                  		dc.w LBall_Type04-LBall_TypeIndex, LBall_Type05-LBall_TypeIndex
0001074A 0000 0000                  		dc.w LBall_Type06-LBall_TypeIndex, LBall_Type07-LBall_TypeIndex
0001074E 0000                       		dc.w LBall_Type08-LBall_TypeIndex
00010750                            ; ===========================================================================
00010750                            ; lavaball types 00-03 fly up and fall back down
00010750                            
00010750                            LBall_Type00:
00010750 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's downward speed
00010756 3028 0030                  		move.w	$30(a0),d0
0001075A B068 000C                  		cmp.w	obY(a0),d0	; has object fallen back to its	original position?
0001075E 6400                       		bcc.s	loc_E41E	; if not, branch
00010760 5428 0024                  		addq.b	#2,obRoutine(a0)	; goto "LBall_Delete" routine
00010764                            
00010764                            loc_E41E:
00010764 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001076A 4A68 0012                  		tst.w	obVelY(a0)
0001076E 6A00                       		bpl.s	locret_E430
00010770 08E8 0001 0022             		bset	#1,obStatus(a0)
00010776                            
00010776                            locret_E430:
00010776 4E75                       		rts	
00010778                            ; ===========================================================================
00010778                            ; lavaball type	04 flies up until it hits the ceiling
00010778                            
00010778                            LBall_Type04:
00010778 08E8 0001 0022             		bset	#1,obStatus(a0)
0001077E 4EB9 0000 0000             		jsr	ObjHitCeiling
00010784 4A41                       		tst.w	d1
00010786 6A00                       		bpl.s	locret_E452
00010788 117C 0008 0028             		move.b	#8,obSubtype(a0)
0001078E 117C 0001 001C             		move.b	#1,obAnim(a0)
00010794 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the ceiling
0001079A                            
0001079A                            locret_E452:
0001079A 4E75                       		rts	
0001079C                            ; ===========================================================================
0001079C                            ; lavaball type	05 falls down until it hits the	floor
0001079C                            
0001079C                            LBall_Type05:
0001079C 08A8 0001 0022             		bclr	#1,obStatus(a0)
000107A2 4EB9 0000 0000             		jsr	ObjFloorDist
000107A8 4A41                       		tst.w	d1
000107AA 6A00                       		bpl.s	locret_E474
000107AC 117C 0008 0028             		move.b	#8,obSubtype(a0)
000107B2 117C 0001 001C             		move.b	#1,obAnim(a0)
000107B8 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the floor
000107BE                            
000107BE                            locret_E474:
000107BE 4E75                       		rts	
000107C0                            ; ===========================================================================
000107C0                            ; lavaball types 06-07 move sideways
000107C0                            
000107C0                            LBall_Type06:
000107C0 08E8 0000 0022             		bset	#0,obStatus(a0)
000107C6 76F8                       		moveq	#-8,d3
000107C8 4EB9 0000 0000             		jsr	ObjHitWallLeft
000107CE 4A41                       		tst.w	d1
000107D0 6A00                       		bpl.s	locret_E498
000107D2 117C 0008 0028             		move.b	#8,obSubtype(a0)
000107D8 117C 0003 001C             		move.b	#3,obAnim(a0)
000107DE 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
000107E4                            
000107E4                            locret_E498:
000107E4 4E75                       		rts	
000107E6                            ; ===========================================================================
000107E6                            
000107E6                            LBall_Type07:
000107E6 08A8 0000 0022             		bclr	#0,obStatus(a0)
000107EC 7608                       		moveq	#8,d3
000107EE 4EB9 0000 0000             		jsr	ObjHitWallRight
000107F4 4A41                       		tst.w	d1
000107F6 6A00                       		bpl.s	locret_E4BC
000107F8 117C 0008 0028             		move.b	#8,obSubtype(a0)
000107FE 117C 0003 001C             		move.b	#3,obAnim(a0)
00010804 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
0001080A                            
0001080A                            locret_E4BC:
0001080A 4E75                       		rts	
0001080C                            ; ===========================================================================
0001080C                            
0001080C                            LBall_Type08:
0001080C 4E75                       		rts	
0001080E                            ; ===========================================================================
0001080E                            
0001080E                            LBall_Delete:
0001080E 6000 F05E                  		bra.w	DeleteObject
0001080E 6000 F05E                  		bra.w	DeleteObject
00010812                            		include	"_anim\Fireballs.asm"
00010812                            ; ---------------------------------------------------------------------------
00010812                            ; Animation script - lava balls
00010812                            ; ---------------------------------------------------------------------------
00010812 0000                       Ani_Fire:	dc.w @vertical-Ani_Fire
00010814 0000                       		dc.w @vertcollide-Ani_Fire
00010816 0000                       		dc.w @horizontal-Ani_Fire
00010818 0000                       		dc.w @horicollide-Ani_Fire
0001081A 0500 2001 21FF             @vertical:	dc.b 5,	0, $20,	1, $21,	afEnd
00010820 0502 FC                    @vertcollide:	dc.b 5,	2, afRoutine
00010824 00                         		even
00010824 0503 4304 44FF             @horizontal:	dc.b 5,	3, $43,	4, $44,	afEnd
0001082A 0505 FC                    @horicollide:	dc.b 5,	5, afRoutine
0001082E 00                         		even
0001082E 00                         		even
0001082E                            
0001082E                            		include	"_incObj\6D Flamethrower.asm"
0001082E                            ; ---------------------------------------------------------------------------
0001082E                            ; Object 6D - flame thrower (SBZ)
0001082E                            ; ---------------------------------------------------------------------------
0001082E                            
0001082E                            Flamethrower:
0001082E 7000                       		moveq	#0,d0
00010830 1028 0024                  		move.b	obRoutine(a0),d0
00010834 323B 0000                  		move.w	Flame_Index(pc,d0.w),d1
00010838 4EFB 1000                  		jmp	Flame_Index(pc,d1.w)
0001083C                            ; ===========================================================================
0001083C 0000                       Flame_Index:	dc.w Flame_Main-Flame_Index
0001083E 0000                       		dc.w Flame_Action-Flame_Index
00010840                            ; ===========================================================================
00010840                            
00010840                            Flame_Main:	; Routine 0
00010840 5428 0024                  		addq.b	#2,obRoutine(a0)
00010844 217C 0000 0000 0004        		move.l	#Map_Flame,obMap(a0)
0001084C 317C 83D9 0002             		move.w	#$83D9,obGfx(a0)
00010852 0028 0004 0001             		ori.b	#4,obRender(a0)
00010858 317C 0080 0018             		move.w	#$80,obPriority(a0)
0001085E 3168 000C 0030             		move.w	obY(a0),$30(a0)	; store obY (gets overwritten later though)
00010864 117C 000C 0014             		move.b	#$C,obActWid(a0)
0001086A 1028 0028                  		move.b	obSubtype(a0),d0
0001086E 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
00010872 D040                       		add.w	d0,d0		; multiply by 2
00010874 3140 0030                  		move.w	d0,$30(a0)
00010878 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0001087C 1028 0028                  		move.b	obSubtype(a0),d0
00010880 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
00010884 EB48                       		lsl.w	#5,d0		; multiply by $20
00010886 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0001088A 117C 000A 0036             		move.b	#$A,$36(a0)
00010890 0828 0001 0022             		btst	#1,obStatus(a0)
00010896 6700                       		beq.s	Flame_Action
00010898 117C 0002 001C             		move.b	#2,obAnim(a0)
0001089E 117C 0015 0036             		move.b	#$15,$36(a0)
000108A4                            
000108A4                            Flame_Action:	; Routine 2
000108A4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000108A8 6A00                       		bpl.s	loc_E57A	; if time remains, branch
000108AA 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
000108B0 0868 0000 001C             		bchg	#0,obAnim(a0)
000108B6 6700                       		beq.s	loc_E57A
000108B8 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
000108C8                            
000108C8                            loc_E57A:
000108C8 43F9 0000 0000             		lea	(Ani_Flame).l,a1
000108CE 6100 C014                  		bsr.w	AnimateSprite
000108D2 117C 0000 0020             		move.b	#0,obColType(a0)
000108D8 1028 0036                  		move.b	$36(a0),d0
000108DC B028 001A                  		cmp.b	obFrame(a0),d0
000108E0 6600                       		bne.s	Flame_ChkDel
000108E2 117C 00A3 0020             		move.b	#$A3,obColType(a0)
000108E8                            
000108E8                            Flame_ChkDel:
00010906 6000 EF26                  		bra.w	DisplaySprite
00010906 6000 EF26                  		bra.w	DisplaySprite
0001090A                            		include	"_anim\Flamethrower.asm"
0001090A                            ; ---------------------------------------------------------------------------
0001090A                            ; Animation script - flamethrower (SBZ)
0001090A                            ; ---------------------------------------------------------------------------
0001090A 0000                       Ani_Flame:	dc.w @pipe1-Ani_Flame
0001090C 0000                       		dc.w @pipe2-Ani_Flame
0001090E 0000                       		dc.w @valve1-Ani_Flame
00010910 0000                       		dc.w @valve2-Ani_Flame
00010912 0300 0102 0304 0506 0708+  @pipe1:		dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, afBack, 2
00010920 0009 0705 0301 00FE 01     @pipe2:		dc.b 0,	9, 7, 5, 3, 1, 0, afBack, 1
0001092A 00                         		even
0001092A 030B 0C0D 0E0F 1011 1213+  @valve1:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, afBack, 2
00010938 0014 1211 0F0D 0BFE 01     @valve2:	dc.b 0,	$14, $12, $11, $F, $D, $B, afBack, 1
00010942 00                         		even
00010942 00                         		even
00010942                            Map_Flame:	include	"_maps\Flamethrower.asm"
00010942                            ; ---------------------------------------------------------------------------
00010942                            ; Sprite mappings - flame thrower (SBZ)
00010942                            ; ---------------------------------------------------------------------------
00010942                            Map_Flame_internal:
00010942 0000                       		dc.w @pipe1-Map_Flame_internal
00010944 0000                       		dc.w @pipe2-Map_Flame_internal
00010946 0000                       		dc.w @pipe3-Map_Flame_internal
00010948 0000                       		dc.w @pipe4-Map_Flame_internal
0001094A 0000                       		dc.w @pipe5-Map_Flame_internal
0001094C 0000                       		dc.w @pipe6-Map_Flame_internal
0001094E 0000                       		dc.w @pipe7-Map_Flame_internal
00010950 0000                       		dc.w @pipe8-Map_Flame_internal
00010952 0000                       		dc.w @pipe9-Map_Flame_internal
00010954 0000                       		dc.w @pipe10-Map_Flame_internal
00010956 0000                       		dc.w @pipe11-Map_Flame_internal
00010958 0000                       		dc.w @valve1-Map_Flame_internal
0001095A 0000                       		dc.w @valve2-Map_Flame_internal
0001095C 0000                       		dc.w @valve3-Map_Flame_internal
0001095E 0000                       		dc.w @valve4-Map_Flame_internal
00010960 0000                       		dc.w @valve5-Map_Flame_internal
00010962 0000                       		dc.w @valve6-Map_Flame_internal
00010964 0000                       		dc.w @valve7-Map_Flame_internal
00010966 0000                       		dc.w @valve8-Map_Flame_internal
00010968 0000                       		dc.w @valve9-Map_Flame_internal
0001096A 0000                       		dc.w @valve10-Map_Flame_internal
0001096C 0000                       		dc.w @valve11-Map_Flame_internal
0001096E 01                         @pipe1:		dc.b 1
0001096F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB ; broken pipe style flamethrower
00010974 02                         @pipe2:		dc.b 2
00010975 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001097A 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001097F 02                         @pipe3:		dc.b 2
00010980 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010985 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001098A 03                         @pipe4:		dc.b 3
0001098B 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010990 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010995 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001099A 03                         @pipe5:		dc.b 3
0001099B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000109A0 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000109A5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109AA 04                         @pipe6:		dc.b 4
000109AB 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000109B0 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000109B5 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000109BA 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109BF 04                         @pipe7:		dc.b 4
000109C0 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000109C5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000109CA 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000109CF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109D4 05                         @pipe8:		dc.b 5
000109D5 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
000109DA 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000109DF 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000109E4 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000109E9 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109EE 05                         @pipe9:		dc.b 5
000109EF F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000109F4 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000109F9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000109FE 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010A03 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010A08 06                         @pipe10:	dc.b 6
00010A09 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010A0E F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010A13 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010A18 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010A1D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010A22 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010A27 06                         @pipe11:	dc.b 6
00010A28 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010A2D F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010A32 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010A37 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010A3C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010A41 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010A46 01                         @valve1:	dc.b 1
00010A47 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9 ; valve style flamethrower
00010A4C 02                         @valve2:	dc.b 2
00010A4D 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A52 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010A57 02                         @valve3:	dc.b 2
00010A58 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A5D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010A62 03                         @valve4:	dc.b 3
00010A63 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010A68 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A6D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010A72 03                         @valve5:	dc.b 3
00010A73 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010A78 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A7D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010A82 04                         @valve6:	dc.b 4
00010A83 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010A88 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010A8D 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A92 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010A97 04                         @valve7:	dc.b 4
00010A98 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010A9D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010AA2 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010AA7 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010AAC 05                         @valve8:	dc.b 5
00010AAD F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010AB2 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010AB7 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010ABC 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010AC1 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010AC6 05                         @valve9:	dc.b 5
00010AC7 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010ACC 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010AD1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010AD6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010ADB 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010AE0 06                         @valve10:	dc.b 6
00010AE1 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010AE6 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010AEB 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010AF0 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010AF5 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010AFA 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010AFF 06                         @valve11:	dc.b 6
00010B00 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010B05 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010B0A 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010B0F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010B14 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010B19 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010B1E                            		even
00010B1E                            		even
00010B1E                            
00010B1E                            		include	"_incObj\46 MZ Bricks.asm"
00010B1E                            ; ---------------------------------------------------------------------------
00010B1E                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
00010B1E                            ; ---------------------------------------------------------------------------
00010B1E                            
00010B1E                            MarbleBrick:
00010B1E 7000                       		moveq	#0,d0
00010B20 1028 0024                  		move.b	obRoutine(a0),d0
00010B24 323B 0000                  		move.w	Brick_Index(pc,d0.w),d1
00010B28 4EFB 1000                  		jmp	Brick_Index(pc,d1.w)
00010B2C                            ; ===========================================================================
00010B2C 0000                       Brick_Index:	dc.w Brick_Main-Brick_Index
00010B2E 0000                       		dc.w Brick_Action-Brick_Index
00010B30                            
00010B30 =00000030                  brick_origY:	equ $30
00010B30                            ; ===========================================================================
00010B30                            
00010B30                            Brick_Main:	; Routine 0
00010B30 5428 0024                  		addq.b	#2,obRoutine(a0)
00010B34 117C 000F 0016             		move.b	#$F,obHeight(a0)
00010B3A 117C 000F 0017             		move.b	#$F,obWidth(a0)
00010B40 217C 0000 0000 0004        		move.l	#Map_Brick,obMap(a0)
00010B48 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00010B4E 117C 0004 0001             		move.b	#4,obRender(a0)
00010B54 317C 0180 0018             		move.w	#$180,obPriority(a0)
00010B5A 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010B60 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010B66 317C 05C0 0032             		move.w	#$5C0,$32(a0)
00010B6C                            
00010B6C                            Brick_Action:	; Routine 2
00010B6C 4A28 0001                  		tst.b	obRender(a0)
00010B70 6A00                       		bpl.s	@chkdel
00010B72 7000                       		moveq	#0,d0
00010B74 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00010B78 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
00010B7C D040                       		add.w	d0,d0
00010B7E 323B 0000                  		move.w	Brick_TypeIndex(pc,d0.w),d1
00010B82 4EBB 1000                  		jsr	Brick_TypeIndex(pc,d1.w)
00010B86 323C 001B                  		move.w	#$1B,d1
00010B8A 343C 0010                  		move.w	#$10,d2
00010B8E 363C 0011                  		move.w	#$11,d3
00010B92 3828 0008                  		move.w	obX(a0),d4
00010B96 6100 0000                  		bsr.w	SolidObject
00010B9A                            
00010B9A                            	@chkdel:
00010BB8 6000 EC74                  			bra.w	DisplaySprite
00010BBC                            ; ===========================================================================
00010BBC 0000                       Brick_TypeIndex:dc.w Brick_Type00-Brick_TypeIndex
00010BBE 0000                       		dc.w Brick_Type01-Brick_TypeIndex
00010BC0 0000                       		dc.w Brick_Type02-Brick_TypeIndex
00010BC2 0000                       		dc.w Brick_Type03-Brick_TypeIndex
00010BC4 0000                       		dc.w Brick_Type04-Brick_TypeIndex
00010BC6                            ; ===========================================================================
00010BC6                            
00010BC6                            Brick_Type00:
00010BC6 4E75                       		rts	
00010BC8                            ; ===========================================================================
00010BC8                            
00010BC8                            Brick_Type02:
00010BC8 3038 D008                  		move.w	(v_player+obX).w,d0
00010BCC 9068 0008                  		sub.w	obX(a0),d0
00010BD0 6400                       		bcc.s	loc_E888
00010BD2 4440                       		neg.w	d0
00010BD4                            
00010BD4                            loc_E888:
00010BD4 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
00010BD8 6400                       		bcc.s	Brick_Type01	; if not, resume wobbling
00010BDA 117C 0003 0028             		move.b	#3,obSubtype(a0)	; if yes, make the block fall
00010BE0                            
00010BE0                            Brick_Type01:
00010BE0 7000                       		moveq	#0,d0
00010BE2 1038 FE74                  		move.b	(v_oscillate+$16).w,d0
00010BE6 0828 0003 0028             		btst	#3,obSubtype(a0)
00010BEC 6700                       		beq.s	loc_E8A8
00010BEE 4440                       		neg.w	d0
00010BF0 0640 0010                  		addi.w	#$10,d0
00010BF4                            
00010BF4                            loc_E8A8:
00010BF4 3228 0030                  		move.w	brick_origY(a0),d1
00010BF8 9240                       		sub.w	d0,d1
00010BFA 3141 000C                  		move.w	d1,obY(a0)	; update the block's position to make it wobble
00010BFE 4E75                       		rts	
00010C00                            ; ===========================================================================
00010C00                            
00010C00                            Brick_Type03:
00010C00 6100 EC18                  		bsr.w	SpeedToPos
00010C04 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase falling speed
00010C0A 6100 0000                  		bsr.w	ObjFloorDist
00010C0E 4A41                       		tst.w	d1		; has the block	hit the	floor?
00010C10 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
00010C14 D368 000C                  		add.w	d1,obY(a0)
00010C18 4268 0012                  		clr.w	obVelY(a0)	; stop the block falling
00010C1C 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010C22 117C 0004 0028             		move.b	#4,obSubtype(a0)
00010C28 3011                       		move.w	(a1),d0
00010C2A 0240 03FF                  		andi.w	#$3FF,d0
00010C2E 0C40 016A                  			cmpi.w	#$16A,d0
00010C32 6400                       		bcc.s	locret_E8EE
00010C34 117C 0000 0028             		move.b	#0,obSubtype(a0)
00010C3A                            
00010C3A                            locret_E8EE:
00010C3A 4E75                       		rts	
00010C3C                            ; ===========================================================================
00010C3C                            
00010C3C                            Brick_Type04:
00010C3C 7000                       		moveq	#0,d0
00010C3E 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
00010C42 E648                       		lsr.w	#3,d0
00010C44 3228 0030                  		move.w	brick_origY(a0),d1
00010C48 9240                       		sub.w	d0,d1
00010C4A 3141 000C                  		move.w	d1,obY(a0)	; make the block wobble
00010C4E 4E75                       		rts	
00010C4E 4E75                       		rts	
00010C50                            Map_Brick:	include	"_maps\MZ Bricks.asm"
00010C50                            ; ---------------------------------------------------------------------------
00010C50                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
00010C50                            ; ---------------------------------------------------------------------------
00010C50                            Map_Brick_internal:
00010C50 0000                       		dc.w @brick-Map_Brick_internal
00010C52 01                         @brick:		dc.b 1
00010C53 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
00010C58                            		even
00010C58                            		even
00010C58                            
00010C58                            		include	"_incObj\12 Light.asm"
00010C58                            ; ---------------------------------------------------------------------------
00010C58                            ; Object 12 - lamp (SYZ)
00010C58                            ; ---------------------------------------------------------------------------
00010C58                            
00010C58                            SpinningLight:
00010C58 7000                       		moveq	#0,d0
00010C5A 1028 0024                  		move.b	obRoutine(a0),d0
00010C5E 323B 0000                  		move.w	Light_Index(pc,d0.w),d1
00010C62 4EFB 1000                  		jmp	Light_Index(pc,d1.w)
00010C66                            ; ===========================================================================
00010C66 0000                       Light_Index:	dc.w Light_Main-Light_Index
00010C68 0000                       		dc.w Light_Animate-Light_Index
00010C6A                            ; ===========================================================================
00010C6A                            
00010C6A                            Light_Main:	; Routine 0
00010C6A 5428 0024                  		addq.b	#2,obRoutine(a0)
00010C6E 217C 0000 0000 0004        		move.l	#Map_Light,obMap(a0)
00010C76 317C 0000 0002             		move.w	#0,obGfx(a0)
00010C7C 117C 0004 0001             		move.b	#4,obRender(a0)
00010C82 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010C88 317C 0300 0018             		move.w	#$300,obPriority(a0)
00010C8E                            
00010C8E                            Light_Animate:	; Routine 2
00010C8E 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00010C92 6A00                       		bpl.s	@chkdel
00010C94 117C 000C 001E             		move.b	#12,obTimeFrame(a0)
00010C9A 5228 001A                  		addq.b	#1,obFrame(a0)
00010C9E 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
00010CA4 6500                       		bcs.s	@chkdel
00010CA6 117C 0000 001A             		move.b	#0,obFrame(a0)
00010CAC                            
00010CAC                            	@chkdel:
00010CCA 6000 EB62                  		bra.w	DisplaySprite
00010CCA 6000 EB62                  		bra.w	DisplaySprite
00010CCE                            Map_Light	include	"_maps\Light.asm"
00010CCE                            ; --------------------------------------------------------------------------------
00010CCE                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010CCE                            ; --------------------------------------------------------------------------------
00010CCE                            
00010CCE                            SME_FBl1X:	
00010CCE 0000 0000                  		dc.w SME_FBl1X_8-SME_FBl1X, SME_FBl1X_22-SME_FBl1X	
00010CD2 0000 0000                  		dc.w SME_FBl1X_3C-SME_FBl1X, SME_FBl1X_5B-SME_FBl1X	
00010CD6 05                         SME_FBl1X_8:	dc.b 5	
00010CD7 E004 006D 00               		dc.b $E0, 4, 0, $6D, 0	
00010CDC E80C 006F F8               		dc.b $E8, $C, 0, $6F, $F8	
00010CE1 F00C 0073 F8               		dc.b $F0, $C, 0, $73, $F8	
00010CE6 F800 0090 00               		dc.b $F8, 0, 0, $90, 0	
00010CEB F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010CF0 05                         SME_FBl1X_22:	dc.b 5	
00010CF1 E004 0077 00               		dc.b $E0, 4, 0, $77, 0	
00010CF6 E804 0079 00               		dc.b $E8, 4, 0, $79, 0	
00010CFB E800 007B 10               		dc.b $E8, 0, 0, $7B, $10	
00010D00 F008 007C F8               		dc.b $F0, 8, 0, $7C, $F8	
00010D05 F804 0091 00               		dc.b $F8, 4, 0, $91, 0	
00010D0A 06                         SME_FBl1X_3C:	dc.b 6	
00010D0B E000 007F 00               		dc.b $E0, 0, 0, $7F, 0	
00010D10 E000 0078 08               		dc.b $E0, 0, 0, $78, 8	
00010D15 E80C 0080 F8               		dc.b $E8, $C, 0, $80, $F8	
00010D1A F00C 0084 F8               		dc.b $F0, $C, 0, $84, $F8	
00010D1F F800 0093 08               		dc.b $F8, 0, 0, $93, 8	
00010D24 F800 0091 00               		dc.b $F8, 0, 0, $91, 0	
00010D29 05                         SME_FBl1X_5B:	dc.b 5	
00010D2A E004 0088 00               		dc.b $E0, 4, 0, $88, 0	
00010D2F E808 008A F8               		dc.b $E8, 8, 0, $8A, $F8	
00010D34 F008 008D 00               		dc.b $F0, 8, 0, $8D, 0	
00010D39 F800 0094 00               		dc.b $F8, 0, 0, $94, 0	
00010D3E F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010D44 00                         		even
00010D44 00                         		even
00010D44                            		include	"_incObj\47 Bumper.asm"
00010D44                            ; ---------------------------------------------------------------------------
00010D44                            ; Object 47 - pinball bumper (SYZ)
00010D44                            ; ---------------------------------------------------------------------------
00010D44                            
00010D44                            Bumper:
00010D44 7000                       		moveq	#0,d0
00010D46 1028 0024                  		move.b	obRoutine(a0),d0
00010D4A 323B 0000                  		move.w	Bump_Index(pc,d0.w),d1
00010D4E 4EFB 1000                  		jmp	Bump_Index(pc,d1.w)
00010D52                            ; ===========================================================================
00010D52 0000                       Bump_Index:	dc.w Bump_Main-Bump_Index
00010D54 0000                       		dc.w Bump_Hit-Bump_Index
00010D56                            ; ===========================================================================
00010D56                            
00010D56                            Bump_Main:	; Routine 0
00010D56 5428 0024                  		addq.b	#2,obRoutine(a0)
00010D5A 217C 0000 0000 0004        		move.l	#Map_Bump,obMap(a0)
00010D62 317C 0380 0002             		move.w	#$380,obGfx(a0)
00010D68 117C 0004 0001             		move.b	#4,obRender(a0)
00010D6E 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010D74 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010D7A 117C 00D7 0020             		move.b	#$D7,obColType(a0)
00010D80                            
00010D80                            Bump_Hit:	; Routine 2
00010D80 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	bumper?
00010D84 6700 0000                  		beq.w	@display	; if not, branch
00010D88 4228 0021                  		clr.b	obColProp(a0)
00010D8C 43F8 D000                  		lea	(v_player).w,a1
00010D90 3228 0008                  		move.w	obX(a0),d1
00010D94 3428 000C                  		move.w	obY(a0),d2
00010D98 9269 0008                  		sub.w	obX(a1),d1
00010D9C 9469 000C                  		sub.w	obY(a1),d2
00010DA0 4EB9 0000 3FBA             		jsr	(CalcAngle).l
00010DA6 4EB9 0000 3D28             		jsr	(CalcSine).l
00010DAC C3FC F900                  		muls.w	#-$700,d1
00010DB0 E081                       		asr.l	#8,d1
00010DB2 3341 0010                  		move.w	d1,obVelX(a1)	; bounce Sonic away
00010DB6 C1FC F900                  		muls.w	#-$700,d0
00010DBA E080                       		asr.l	#8,d0
00010DBC 3340 0012                  		move.w	d0,obVelY(a1)	; bounce Sonic away
00010DC0 08E9 0001 0022             		bset	#1,obStatus(a1)
00010DC6 08A9 0004 0022             		bclr	#4,obStatus(a1)
00010DCC 08A9 0005 0022             		bclr	#5,obStatus(a1)
00010DD2 4229 003C                  		clr.b	$3C(a1)
00010DD6 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "hit" animation
00010DE6 45F8 FC00                  		lea	(v_objstate).w,a2
00010DEA 7000                       		moveq	#0,d0
00010DEC 1028 0023                  		move.b	obRespawnNo(a0),d0
00010DF0 6700                       		beq.s	@addscore
00010DF2 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit 10 times?
00010DF8 6400                       		bcc.s	@display	; if yes, Sonic	gets no	points
00010DFA 5232 0002                  		addq.b	#1,2(a2,d0.w)
00010DFE                            
00010DFE                            	@addscore:
00010DFE 7001                       		moveq	#1,d0
00010E00 4EB9 0000 0000             		jsr	(AddPoints).l	; add 10 to score
00010E06 6100 EFC0                  		bsr.w	FindFreeObj
00010E0A 6600                       		bne.s	@display
00010E0C 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00010E10 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010E16 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010E1C 137C 0004 001A             		move.b	#4,obFrame(a1)
00010E22                            
00010E22                            	@display:
00010E22 43F9 0000 0000             		lea	(Ani_Bump).l,a1
00010E28 6100 BABA                  		bsr.w	AnimateSprite
00010E48 6000 E9E4                  		bra.w	DisplaySprite
00010E4C                            ; ===========================================================================
00010E4C                            
00010E4C                            @resetcount:
00010E4C 45F8 FC00                  		lea	(v_objstate).w,a2
00010E50 7000                       		moveq	#0,d0
00010E52 1028 0023                  		move.b	obRespawnNo(a0),d0
00010E56 6700                       		beq.s	@delete
00010E58 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010E5E                            
00010E5E                            	@delete:
00010E5E 6000 EA0E                  		bra.w	DeleteObject
00010E5E 6000 EA0E                  		bra.w	DeleteObject
00010E62                            		include	"_anim\Bumper.asm"
00010E62                            ; ---------------------------------------------------------------------------
00010E62                            ; Animation script - flamethrower (SBZ)
00010E62                            ; ---------------------------------------------------------------------------
00010E62 0000                       Ani_Bump:	dc.w byte_EAF4-Ani_Bump
00010E64 0000                       		dc.w byte_EAF8-Ani_Bump
00010E66 0F00 FF                    byte_EAF4:	dc.b $F, 0, afEnd
00010E6A 00                         		even
00010E6A 0301 0201 02FD 00          byte_EAF8:	dc.b 3,	1, 2, 1, 2, afChange, 0
00010E72 00                         		even
00010E72 00                         		even
00010E72                            Map_Bump:	include	"_maps\Bumper.asm"
00010E72                            ; ---------------------------------------------------------------------------
00010E72                            ; Sprite mappings - pinball bumper (SYZ)
00010E72                            ; ---------------------------------------------------------------------------
00010E72                            Map_Bump_internal:
00010E72 0000                       		dc.w @normal-Map_Bump_internal
00010E74 0000                       		dc.w @bumped1-Map_Bump_internal
00010E76 0000                       		dc.w @bumped2-Map_Bump_internal
00010E78 02                         @normal:	dc.b 2
00010E79 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
00010E7E F007 0800 00               		dc.b $F0, 7, 8,	0, 0
00010E83 02                         @bumped1:	dc.b 2
00010E84 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
00010E89 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
00010E8E 02                         @bumped2:	dc.b 2
00010E8F F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
00010E94 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
00010E9A 00                         		even
00010E9A 00                         		even
00010E9A                            
00010E9A                            		include	"_incObj\0D Signpost.asm" ; includes "GotThroughAct" subroutine
00010E9A                            ; ---------------------------------------------------------------------------
00010E9A                            ; Object 0D - signpost at the end of a level
00010E9A                            ; ---------------------------------------------------------------------------
00010E9A                            
00010E9A                            Signpost:
00010E9A 7000                       		moveq	#0,d0
00010E9C 1028 0024                  		move.b	obRoutine(a0),d0
00010EA0 323B 0000                  		move.w	Sign_Index(pc,d0.w),d1
00010EA4 4EBB 1000                  		jsr	Sign_Index(pc,d1.w)
00010EA8 43F9 0000 0000             		lea	(Ani_Sign).l,a1
00010EAE 6100 BA34                  		bsr.w	AnimateSprite
00010EB2 6100 E97A                  		bsr.w	DisplaySprite
00010ED4 4E75                       		rts	
00010ED6                            ; ===========================================================================
00010ED6 0000                       Sign_Index:	dc.w Sign_Main-Sign_Index
00010ED8 0000                       		dc.w Sign_Touch-Sign_Index
00010EDA 0000                       		dc.w Sign_Spin-Sign_Index
00010EDC 0000                       		dc.w Sign_SonicRun-Sign_Index
00010EDE 0000                       		dc.w Sign_Exit-Sign_Index
00010EE0                            
00010EE0 =00000030                  spintime:	equ $30		; time for signpost to spin
00010EE0 =00000032                  sparkletime:	equ $32		; time between sparkles
00010EE0 =00000034                  sparkle_id:	equ $34		; counter to keep track of sparkles
00010EE0                            ; ===========================================================================
00010EE0                            
00010EE0                            Sign_Main:	; Routine 0
00010EE0 5428 0024                  		addq.b	#2,obRoutine(a0)
00010EE4 217C 0000 0000 0004        		move.l	#Map_Sign,obMap(a0)
00010EEC 317C 0680 0002             		move.w	#$680,obGfx(a0)
00010EF2 117C 0004 0001             		move.b	#4,obRender(a0)
00010EF8 117C 0018 0014             		move.b	#$18,obActWid(a0)
00010EFE 317C 0200 0018             		move.w	#$200,obPriority(a0)
00010F04                            
00010F04                            Sign_Touch:	; Routine 2
00010F04 3038 D008                  		move.w	(v_player+obX).w,d0
00010F08 9068 0008                  		sub.w	obX(a0),d0
00010F0C 6500                       		bcs.s	@notouch
00010F0E 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00010F12 6400                       		bcc.s	@notouch	; if not, branch
00010F14 11FC 0001 F7AA             		move.b  #1,($FFFFF7AA).w ; Lock the screen
00010F24 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010F28 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w ; lock screen position
00010F2E 5428 0024                  		addq.b	#2,obRoutine(a0)
00010F32                            		;cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is level MZ3?
00010F32                            		;beq.s	@normal
00010F32                            		;move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010F32                            
00010F32                            	@normal:
00010F32 4A38 F5C3                  		tst.b	(f_emeraldm).w
00010F36 6700                       		beq.s	@notouch
00010F38 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
00010F46                            
00010F46                            	@notouch:
00010F46 4E75                       		rts	
00010F48                            	
00010F48                            ; ===========================================================================
00010F48                            
00010F48                            Sign_Spin:	; Routine 4
00010F48 4238 FE19                  		clr.b (Super_Sonic_Flag).w ; Revert Sonic to Normal
00010F4C 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w
00010F52 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w
00010F58 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w
00010F5E 5368 0030                  		subq.w	#1,spintime(a0)	; subtract 1 from spin time
00010F62 6A00                       		bpl.s	@chksparkle	; if time remains, branch
00010F64 317C 003C 0030             		move.w	#60,spintime(a0) ; set spin cycle time to 1 second
00010F6A 5228 001C                  		addq.b	#1,obAnim(a0)	; next spin cycle
00010F6E 0C28 0003 001C             		cmpi.b	#3,obAnim(a0)	; have 3 spin cycles completed?
00010F74 6600                       		bne.s	@chksparkle	; if not, branch
00010F76 5428 0024                  		addq.b	#2,obRoutine(a0)
00010F7A                            
00010F7A                            	@chksparkle:
00010F7A 5368 0032                  		subq.w	#1,sparkletime(a0) ; subtract 1 from time delay
00010F7E 6A00                       		bpl.s	@fail		; if time remains, branch
00010F80 317C 000B 0032             		move.w	#$B,sparkletime(a0) ; set time between sparkles to $B frames
00010F86 7000                       		moveq	#0,d0
00010F88 1028 0034                  		move.b	sparkle_id(a0),d0 ; get sparkle id
00010F8C 5428 0034                  		addq.b	#2,sparkle_id(a0) ; increment sparkle counter
00010F90 0228 000E 0034             		andi.b	#$E,sparkle_id(a0)
00010F96 45FB 0000                  		lea	Sign_SparkPos(pc,d0.w),a2 ; load sparkle position data
00010F9A 6100 EE2C                  		bsr.w	FindFreeObj
00010F9E 6600                       		bne.s	@fail
00010FA0 12BC 0025                  		move.b	#id_Rings,0(a1)	; load rings object
00010FA4 137C 0006 0024             		move.b	#id_Ring_Sparkle,obRoutine(a1) ; jump to ring sparkle subroutine
00010FAA 101A                       		move.b	(a2)+,d0
00010FAC 4880                       		ext.w	d0
00010FAE D068 0008                  		add.w	obX(a0),d0
00010FB2 3340 0008                  		move.w	d0,obX(a1)
00010FB6 101A                       		move.b	(a2)+,d0
00010FB8 4880                       		ext.w	d0
00010FBA D068 000C                  		add.w	obY(a0),d0
00010FBE 3340 000C                  		move.w	d0,obY(a1)
00010FC2 237C 0000 BE36 0004        		move.l	#Map_Ring,obMap(a1)
00010FCA 337C 2798 0002             		move.w	#$2798,obGfx(a1)
00010FD0 137C 0004 0001             		move.b	#4,obRender(a1)
00010FD6 337C 0100 0018             		move.w	#$100,obPriority(a1)
00010FDC 137C 0008 0014             		move.b	#8,obActWid(a1)
00010FE2                            
00010FE2                            	@fail:
00010FE2 4E75                       		rts	
00010FE4                            ; ===========================================================================
00010FE4 E8F0                       Sign_SparkPos:	dc.b -$18,-$10		; x-position, y-position
00010FE6 0808                       		dc.b	8,   8
00010FE8 F000                       		dc.b -$10,   0
00010FEA 18F8                       		dc.b  $18,  -8
00010FEC 00F8                       		dc.b	0,  -8
00010FEE 1000                       		dc.b  $10,   0
00010FF0 E808                       		dc.b -$18,   8
00010FF2 1810                       		dc.b  $18, $10
00010FF4                            ; ===========================================================================
00010FF4                            
00010FF4                            Sign_SonicRun:	; Routine 6
00010FF4 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00010FF8 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
00010FFC                            		;move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010FFC                            		
00010FFC                            
00010FFC                            	loc_EC86:
00010FFC 5428 0024                  		addq.b	#2,obRoutine(a0)
00011000                            
00011000                            ; ---------------------------------------------------------------------------
00011000                            ; Subroutine to	set up bonuses at the end of an	act
00011000                            ; ---------------------------------------------------------------------------
00011000                            
00011000                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011000                            
00011000                            
00011000                            GotThroughAct:
00011000 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
00011004 6600                       		bne.s	locret_ECEE
00011006 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
0001100C 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
00011010 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
00011014 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00011018 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
0001101E 7000                       		moveq	#plcid_TitleCard,d0
00011020 4EB9 0000 17CA             		jsr	(NewPLC).l	; load title card patterns
00011026 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
0001102C 7000                       		moveq	#0,d0
0001102E 1038 FE23                  		move.b	(v_timemin).w,d0
00011032 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00011036 7200                       		moveq	#0,d1
00011038 1238 FE24                  		move.b	(v_timesec).w,d1
0001103C D041                       		add.w	d1,d0		; add up your time
0001103E 80FC 000F                  		divu.w	#15,d0		; divide by 15
00011042 7214                       		moveq	#$14,d1
00011044 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00011046 6500                       		bcs.s	hastimebonus	; if not, branch
00011048 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0001104A                            
0001104A                            	hastimebonus:
0001104A D040                       		add.w	d0,d0
0001104C 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),(v_timebonus).w ; set time bonus
00011052 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00011056 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0001105A 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00011068 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
0001106E                            
0001106E                            locret_ECEE:
0001106E 4E75                       		rts	
00011070                            
00011070                            ; End of function GotThroughAct
00011070                            
00011070                            ; ===========================================================================
00011070 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00011084 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0001109A                            ; ===========================================================================
0001109A                            
0001109A                            Sign_Exit:	; Routine 8
0001109A 4E75                       		rts	
0001109C                            
0001109C                            ; ---------------------------------------------------------------------------
0001109C                            ; Subroutine to	set up bonuses at the end of an	zone
0001109C                            ; ---------------------------------------------------------------------------
0001109C                            
0001109C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001109C                            
0001109C                            
0001109C                            GotThroughAct1:
0001109C 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
000110A0 6600                       		bne.s	locret_ECEE1
000110A2 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
000110A8 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
000110AC 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
000110B0 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
000110B4 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
000110BA 7000                       		moveq	#plcid_TitleCard,d0
000110BC 4EB9 0000 17CA             		jsr	(NewPLC).l	; load title card patterns
000110C2 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
000110C8 7000                       		moveq	#0,d0
000110CA 1038 FE23                  		move.b	(v_timemin).w,d0
000110CE C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
000110D2 7200                       		moveq	#0,d1
000110D4 1238 FE24                  		move.b	(v_timesec).w,d1
000110D8 D041                       		add.w	d1,d0		; add up your time
000110DA 80FC 000F                  		divu.w	#15,d0		; divide by 15
000110DE 7214                       		moveq	#$14,d1
000110E0 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
000110E2 6500 0000                  		bcs.w	hastimebonus2	; if not, branch
000110E6 3001                       		move.w	d1,d0		; use minimum time bonus (0)
000110E8                            
000110E8                            	hastimebonus2:
000110E8 D040                       		add.w	d0,d0
000110EA 31FB 0000 F7D2             		move.w	TimeBonuses1(pc,d0.w),(v_timebonus).w ; set time bonus
000110F0 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
000110F4 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
000110F8 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00011106 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
0001110C                            
0001110C                            locret_ECEE1:
0001110C 4E75                       		rts	
0001110E                            
0001110E                            ; End of function GotThroughAct		
0001110E                            
0001110E 1388 1388 03E8 01F4 0190+  TimeBonuses1:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00011122 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00011122 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00011138                            		include	"_anim\Signpost.asm"
00011138                            ; ---------------------------------------------------------------------------
00011138                            ; Animation script - signpost
00011138                            ; ---------------------------------------------------------------------------
00011138 0000                       Ani_Sign:	dc.w @eggman-Ani_Sign
0001113A 0000                       		dc.w @spin1-Ani_Sign
0001113C 0000                       		dc.w @spin2-Ani_Sign
0001113E 0000                       		dc.w @sonic-Ani_Sign
00011140 0F00 FF                    @eggman:	dc.b $F, 0, afEnd
00011144 00                         		even
00011144 0100 0102 03FF             @spin1:		dc.b 1,	0, 1, 2, 3, afEnd
0001114A 0104 0102 03FF             @spin2:		dc.b 1,	4, 1, 2, 3, afEnd
00011150 0F04 FF                    @sonic:		dc.b $F, 4, afEnd
00011154 00                         		even
00011154 00                         		even
00011154                            Map_Sign:	include	"_maps\Signpost.asm"
00011154                            ; --------------------------------------------------------------------------------
00011154                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011154                            ; --------------------------------------------------------------------------------
00011154                            
00011154                            SME_KvSue:	
00011154 0000 0000                  		dc.w SME_KvSue_A-SME_KvSue, SME_KvSue_1F-SME_KvSue	
00011158 0000 0000                  		dc.w SME_KvSue_2F-SME_KvSue, SME_KvSue_3F-SME_KvSue	
0001115C 0000                       		dc.w SME_KvSue_4F-SME_KvSue	
0001115E 04                         SME_KvSue_A:	dc.b 4	
0001115F F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8	
00011164 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0	
00011169 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
0001116E 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00011173 03                         SME_KvSue_1F:	dc.b 3	
00011174 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0	
00011179 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
0001117E 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00011183 03                         SME_KvSue_2F:	dc.b 3	
00011184 F003 001C FC               		dc.b $F0, 3, 0, $1C, $FC	
00011189 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
0001118E 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00011193 03                         SME_KvSue_3F:	dc.b 3	
00011194 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0	
00011199 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
0001119E 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
000111A3 04                         SME_KvSue_4F:	dc.b 4	
000111A4 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8	
000111A9 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0	
000111AE 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
000111B3 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
000111B8                            		even
000111B8                            		even
000111B8                            
000111B8                            		include	"_incObj\4C & 4D Lava Geyser Maker.asm"
000111B8                            ; ---------------------------------------------------------------------------
000111B8                            ; Object 4C - lava geyser / lavafall producer (MZ)
000111B8                            ; ---------------------------------------------------------------------------
000111B8                            
000111B8                            GeyserMaker:
000111B8 7000                       		moveq	#0,d0
000111BA 1028 0024                  		move.b	obRoutine(a0),d0
000111BE 323B 0000                  		move.w	GMake_Index(pc,d0.w),d1
000111C2 4EBB 1000                  		jsr	GMake_Index(pc,d1.w)
000111C6 6000 0000                  		bra.w	Geyser_ChkDel
000111CA                            ; ===========================================================================
000111CA 0000                       GMake_Index:	dc.w GMake_Main-GMake_Index
000111CC 0000                       		dc.w GMake_Wait-GMake_Index
000111CE 0000                       		dc.w GMake_ChkType-GMake_Index
000111D0 0000                       		dc.w GMake_MakeLava-GMake_Index
000111D2 0000                       		dc.w GMake_Display-GMake_Index
000111D4 0000                       		dc.w GMake_Delete-GMake_Index
000111D6                            
000111D6 =00000034                  gmake_time:	equ $34		; time delay (2 bytes)
000111D6 =00000032                  gmake_timer:	equ $32		; current time remaining (2 bytes)
000111D6 =0000003C                  gmake_parent:	equ $3C		; address of parent object
000111D6                            ; ===========================================================================
000111D6                            
000111D6                            GMake_Main:	; Routine 0
000111D6 5428 0024                  		addq.b	#2,obRoutine(a0)
000111DA 217C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a0)
000111E2 317C E3A8 0002             		move.w	#$E3A8,obGfx(a0)
000111E8 117C 0004 0001             		move.b	#4,obRender(a0)
000111EE 317C 0080 0018             		move.w	#$80,obPriority(a0)
000111F4 117C 0038 0014             		move.b	#$38,obActWid(a0)
000111FA 317C 0078 0034             		move.w	#120,gmake_time(a0) ; set time delay to 2 seconds
00011200                            
00011200                            GMake_Wait:	; Routine 2
00011200 5368 0032                  		subq.w	#1,gmake_timer(a0) ; decrement timer
00011204 6A00                       		bpl.s	@cancel		; if time remains, branch
00011206                            
00011206 3168 0034 0032             		move.w	gmake_time(a0),gmake_timer(a0) ; reset timer
0001120C 3038 D00C                  		move.w	(v_player+obY).w,d0
00011210 3228 000C                  		move.w	obY(a0),d1
00011214 B041                       		cmp.w	d1,d0
00011216 6400                       		bcc.s	@cancel
00011218 0441 0170                  		subi.w	#$170,d1
0001121C B041                       		cmp.w	d1,d0
0001121E 6500                       		bcs.s	@cancel
00011220 5428 0024                  		addq.b	#2,obRoutine(a0) ; if Sonic is within range, goto GMake_ChkType
00011224                            
00011224                            	@cancel:
00011224 4E75                       		rts	
00011226                            ; ===========================================================================
00011226                            
00011226                            GMake_MakeLava:	; Routine 6
00011226 5428 0024                  		addq.b	#2,obRoutine(a0)
0001122A 6100 EBB2                  		bsr.w	FindNextFreeObj
0001122E 6600                       		bne.s	@fail
00011230 12BC 004D                  		move.b	#id_LavaGeyser,0(a1) ; load lavafall object
00011234 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001123A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00011240 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00011246 2348 003C                  		move.l	a0,gmake_parent(a1)
0001124A                            
0001124A                            	@fail:
0001124A 117C 0001 001C             		move.b	#1,obAnim(a0)
00011250 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 0 (geyser) ?
00011254 6700                       		beq.s	@isgeyser	; if yes, branch
00011256 117C 0004 001C             		move.b	#4,obAnim(a0)
0001125C 6000                       		bra.s	GMake_Display
0001125E                            ; ===========================================================================
0001125E                            
0001125E                            	@isgeyser:
0001125E 2268 003C                  		movea.l	gmake_parent(a0),a1 ; get parent object address
00011262 08E9 0001 0022             		bset	#1,obStatus(a1)
00011268 337C FA80 0012             		move.w	#-$580,obVelY(a1)
0001126E 6000                       		bra.s	GMake_Display
00011270                            ; ===========================================================================
00011270                            
00011270                            GMake_ChkType:	; Routine 4
00011270 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 (geyser) ?
00011274 6700                       		beq.s	GMake_Display	; if yes, branch
00011276 5428 0024                  		addq.b	#2,obRoutine(a0)
0001127A 4E75                       		rts	
0001127C                            ; ===========================================================================
0001127C                            
0001127C                            GMake_Display:	; Routine 8
0001127C 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
00011282 6100 B660                  		bsr.w	AnimateSprite
00011286 6100 E5A6                  		bsr.w	DisplaySprite
0001128A 4E75                       		rts	
0001128C                            ; ===========================================================================
0001128C                            
0001128C                            GMake_Delete:	; Routine $A
0001128C 117C 0000 001C             		move.b	#0,obAnim(a0)
00011292 117C 0002 0024             		move.b	#2,obRoutine(a0)
00011298 4A28 0028                  		tst.b	obSubtype(a0)
0001129C 6700 E5D0                  		beq.w	DeleteObject
000112A0 4E75                       		rts	
000112A2                            
000112A2                            
000112A2                            ; ---------------------------------------------------------------------------
000112A2                            ; Object 4D - lava geyser / lavafall (MZ)
000112A2                            ; ---------------------------------------------------------------------------
000112A2                            
000112A2                            LavaGeyser:
000112A2 7000                       		moveq	#0,d0
000112A4 1028 0024                  		move.b	obRoutine(a0),d0
000112A8 323B 0000                  		move.w	Geyser_Index(pc,d0.w),d1
000112AC 4EBB 1000                  		jsr	Geyser_Index(pc,d1.w)
000112B0 6000 E57C                  		bra.w	DisplaySprite
000112B4                            ; ===========================================================================
000112B4 0000                       Geyser_Index:	dc.w Geyser_Main-Geyser_Index
000112B6 0000                       		dc.w Geyser_Action-Geyser_Index
000112B8 0000                       		dc.w loc_EFFC-Geyser_Index
000112BA 0000                       		dc.w Geyser_Delete-Geyser_Index
000112BC                            
000112BC FB00 0000                  Geyser_Speeds:	dc.w $FB00, 0
000112C0                            ; ===========================================================================
000112C0                            
000112C0                            Geyser_Main:	; Routine 0
000112C0 5428 0024                  		addq.b	#2,obRoutine(a0)
000112C4 3168 000C 0030             		move.w	obY(a0),$30(a0)
000112CA 4A28 0028                  		tst.b	obSubtype(a0)
000112CE 6700                       		beq.s	@isgeyser
000112D0 0468 0250 000C             		subi.w	#$250,obY(a0)
000112D6                            
000112D6                            	@isgeyser:
000112D6 7000                       		moveq	#0,d0
000112D8 1028 0028                  		move.b	obSubtype(a0),d0
000112DC D040                       		add.w	d0,d0
000112DE 317B 00DC 0012             		move.w	Geyser_Speeds(pc,d0.w),obVelY(a0)
000112E4 2248                       		movea.l	a0,a1
000112E6 7201                       		moveq	#1,d1
000112E8 6100                       		bsr.s	@makelava
000112EA 6000                       		bra.s	@activate
000112EC                            ; ===========================================================================
000112EC                            
000112EC                            	@loop:
000112EC 6100 EAF0                  		bsr.w	FindNextFreeObj
000112F0 6600                       		bne.s	@fail
000112F2                            
000112F2                            @makelava:
000112F2 12BC 004D                  		move.b	#id_LavaGeyser,0(a1)
000112F6 237C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a1)
000112FE 337C 63A8 0002             		move.w	#$63A8,obGfx(a1)
00011304 137C 0004 0001             		move.b	#4,obRender(a1)
0001130A 137C 0020 0014             		move.b	#$20,obActWid(a1)
00011310 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011316 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001131C 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00011322 337C 0080 0018             		move.w	#$80,obPriority(a1)
00011328 137C 0005 001C             		move.b	#5,obAnim(a1)
0001132E 4A28 0028                  		tst.b	obSubtype(a0)
00011332 6700                       		beq.s	@fail
00011334 137C 0002 001C             		move.b	#2,obAnim(a1)
0001133A                            
0001133A                            	@fail:
0001133A 51C9 FFB0                  		dbf	d1,@loop
0001133E 4E75                       		rts	
00011340                            ; ===========================================================================
00011340                            
00011340                            @activate:
00011340 0669 0060 000C             		addi.w	#$60,obY(a1)
00011346 3368 0030 0030             		move.w	$30(a0),$30(a1)
0001134C 0669 0060 0030             		addi.w	#$60,$30(a1)
00011352 137C 0093 0020             		move.b	#$93,obColType(a1)
00011358 137C 0080 0016             		move.b	#$80,obHeight(a1)
0001135E 08E9 0004 0001             		bset	#4,obRender(a1)
00011364 5829 0024                  		addq.b	#4,obRoutine(a1)
00011368 2348 003C                  		move.l	a0,$3C(a1)
0001136C 4A28 0028                  		tst.b	obSubtype(a0)
00011370 6700                       		beq.s	@sound
00011372 7200                       		moveq	#0,d1
00011374 6100 FF76                  		bsr.w	@loop
00011378 5429 0024                  		addq.b	#2,obRoutine(a1)
0001137C 08E9 0004 0002             		bset	#4,obGfx(a1)
00011382 0669 0100 000C             		addi.w	#$100,obY(a1)
00011388 337C 0000 0018             		move.w	#0,obPriority(a1)
0001138E 3368 0030 0030             		move.w	$30(a0),$30(a1)
00011394 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0001139A 117C 0000 0028             		move.b	#0,obSubtype(a0)
000113A0                            
000113A0                            	@sound:
000113AA                            
000113AA                            Geyser_Action:	; Routine 2
000113AA 7000                       		moveq	#0,d0
000113AC 1028 0028                  		move.b	obSubtype(a0),d0
000113B0 D040                       		add.w	d0,d0
000113B2 323B 0000                  		move.w	Geyser_Types(pc,d0.w),d1
000113B6 4EBB 1000                  		jsr	Geyser_Types(pc,d1.w)
000113BA 6100 E45E                  		bsr.w	SpeedToPos
000113BE 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
000113C4 6100 B51E                  		bsr.w	AnimateSprite
000113C8                            
000113C8                            Geyser_ChkDel:
000113E6 4E75                       		rts	
000113E8                            ; ===========================================================================
000113E8 0000                       Geyser_Types:	dc.w Geyser_Type00-Geyser_Types
000113EA 0000                       		dc.w Geyser_Type01-Geyser_Types
000113EC                            ; ===========================================================================
000113EC                            
000113EC                            Geyser_Type00:
000113EC 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
000113F2 3028 0030                  		move.w	$30(a0),d0
000113F6 B068 000C                  		cmp.w	obY(a0),d0
000113FA 6400                       		bcc.s	locret_EFDA
000113FC 5828 0024                  		addq.b	#4,obRoutine(a0)
00011400 2268 003C                  		movea.l	$3C(a0),a1
00011404 137C 0003 001C             		move.b	#3,obAnim(a1)
0001140A                            
0001140A                            locret_EFDA:
0001140A 4E75                       		rts	
0001140C                            ; ===========================================================================
0001140C                            
0001140C                            Geyser_Type01:
0001140C 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
00011412 3028 0030                  		move.w	$30(a0),d0
00011416 B068 000C                  		cmp.w	obY(a0),d0
0001141A 6400                       		bcc.s	locret_EFFA
0001141C 5828 0024                  		addq.b	#4,obRoutine(a0)
00011420 2268 003C                  		movea.l	$3C(a0),a1
00011424 137C 0001 001C             		move.b	#1,obAnim(a1)
0001142A                            
0001142A                            locret_EFFA:
0001142A 4E75                       		rts	
0001142C                            ; ===========================================================================
0001142C                            
0001142C                            loc_EFFC:	; Routine 4
0001142C 2268 003C                  		movea.l	$3C(a0),a1
00011430 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
00011436 6700 0000                  		beq.w	Geyser_Delete
0001143A 3029 000C                  		move.w	obY(a1),d0
0001143E 0640 0060                  		addi.w	#$60,d0
00011442 3140 000C                  		move.w	d0,obY(a0)
00011446 9068 0030                  		sub.w	$30(a0),d0
0001144A 4440                       		neg.w	d0
0001144C 7208                       		moveq	#8,d1
0001144E 0C40 0040                  		cmpi.w	#$40,d0
00011452 6C00                       		bge.s	loc_F026
00011454 720B                       		moveq	#$B,d1
00011456                            
00011456                            loc_F026:
00011456 0C40 0080                  		cmpi.w	#$80,d0
0001145A 6F00                       		ble.s	loc_F02E
0001145C 720E                       		moveq	#$E,d1
0001145E                            
0001145E                            loc_F02E:
0001145E 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00011462 6A00                       		bpl.s	loc_F04C
00011464 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0001146A 5228 001B                  		addq.b	#1,obAniFrame(a0)
0001146E 0C28 0002 001B             		cmpi.b	#2,obAniFrame(a0)
00011474 6500                       		bcs.s	loc_F04C
00011476 117C 0000 001B             		move.b	#0,obAniFrame(a0)
0001147C                            
0001147C                            loc_F04C:
0001147C 1028 001B                  		move.b	obAniFrame(a0),d0
00011480 D001                       		add.b	d1,d0
00011482 1140 001A                  		move.b	d0,obFrame(a0)
00011486 6000 FF40                  		bra.w	Geyser_ChkDel
0001148A                            ; ===========================================================================
0001148A                            
0001148A                            Geyser_Delete:	; Routine 6
0001148A 6000 E3E2                  		bra.w	DeleteObject
0001148A 6000 E3E2                  		bra.w	DeleteObject
0001148E                            		include	"_incObj\54 Lava Tag.asm"
0001148E                            ; ---------------------------------------------------------------------------
0001148E                            ; Object 54 - invisible	lava tag (MZ)
0001148E                            ; ---------------------------------------------------------------------------
0001148E                            
0001148E                            LavaTag:
0001148E 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)	;TIS
00011494 6E00 0000                  		bgt	WaterTag	;TIS
00011498 7000                       		moveq	#0,d0
0001149A 1028 0024                  		move.b	obRoutine(a0),d0
0001149E 323B 0000                  		move.w	LTag_Index(pc,d0.w),d1
000114A2 4EFB 1000                  		jmp	LTag_Index(pc,d1.w)
000114A6                            ; ===========================================================================
000114A6 0000                       LTag_Index:	dc.w LTag_Main-LTag_Index
000114A8 0000                       		dc.w LTag_ChkDel-LTag_Index
000114AA                            
000114AA 9694 95                    LTag_ColTypes:	dc.b $96, $94, $95
000114AE 00                         		even
000114AE                            ; ===========================================================================
000114AE                            
000114AE                            LTag_Main:	; Routine 0
000114AE 5428 0024                  		addq.b	#2,obRoutine(a0)
000114B2 7000                       		moveq	#0,d0
000114B4 1028 0028                  		move.b	obSubtype(a0),d0
000114B8 117B 00F0 0020             		move.b	LTag_ColTypes(pc,d0.w),obColType(a0)
000114BE 217C 0000 0000 0004        		move.l	#Map_LTag,obMap(a0)
000114C6 117C 0084 0001             		move.b	#$84,obRender(a0)
000114CC                            
000114CC                            LTag_ChkDel:	; Routine 2
000114CC 3028 0008                  		move.w	obX(a0),d0
000114D0 0240 FF80                  		andi.w	#$FF80,d0
000114D4 3238 F700                  		move.w	(v_screenposx).w,d1
000114D8 0441 0080                  		subi.w	#$80,d1
000114DC 0241 FF80                  		andi.w	#$FF80,d1
000114E0 9041                       		sub.w	d1,d0
000114E2 6B00 E38A                  		bmi.w	DeleteObject
000114E6 0C40 0280                  		cmpi.w	#$280,d0
000114EA 6200 E382                  		bhi.w	DeleteObject
000114EE 4E75                       		rts
000114F0                            
000114F0                            
000114F0                            ; ---------------------------------------------------------------------------
000114F0                            ; Object 54a - invisible	water tag (MZ) - TIS
000114F0                            ; ---------------------------------------------------------------------------
000114F0                            
000114F0                            WaterTag:	
000114F0 7000                       		moveq	#0,d0
000114F2 1028 0024                  		move.b	obRoutine(a0),d0
000114F6 323B 0000                  		move.w	WTag_Index(pc,d0.w),d1
000114FA 4EFB 1000                  		jmp	WTag_Index(pc,d1.w)
000114FE                            ; ===========================================================================
000114FE 0000                       WTag_Index:	dc.w WTag_Main-WTag_Index
00011500 0000                       		dc.w WTag_ChkDel-WTag_Index
00011502                            
00011502 9694 95                    WTag_ColTypes:	dc.b $96, $94, $95
00011506 00                         		even
00011506                            ; ===========================================================================
00011506                            
00011506                            
00011506                            WTag_Main:	; Routine 0
00011506 5428 0024                  		addq.b	#2,obRoutine(a0)
0001150A 7000                       		moveq	#0,d0
0001150C                            		;move.b	obSubtype(a0),d0
0001150C                            		;move.b	WTag_ColTypes(pc,d0.w),obColType(a0)
0001150C 0400 00F0                  		sub.b	#$F0,d0
00011510 1178 0096 0020             		move.b	$96,obColType(a0)							
00011516                            		;move.l	#Map_LTag,obMap(a0)
00011516                            		;move.b	#$84,obRender(a0)
00011516                            
00011516                            WTag_ChkDel:	; Routine 2
00011516 3028 0008                  		move.w	obX(a0),d0
0001151A 0240 FF80                  		andi.w	#$FF80,d0
0001151E 3238 F700                  		move.w	(v_screenposx).w,d1
00011522 0441 0080                  		subi.w	#$80,d1
00011526 0241 FF80                  		andi.w	#$FF80,d1
0001152A 9041                       		sub.w	d1,d0
0001152C 6B00 E340                  		bmi.w	DeleteObject
00011530 0C40 0280                  		cmpi.w	#$280,d0
00011534 6200 E338                  		bhi.w	DeleteObject
00011538 4E75                       		rts
0001153A                            
0001153A                            
0001153A                            Map_LTag:	include	"_maps\Lava Tag.asm"
0001153A                            ; ---------------------------------------------------------------------------
0001153A                            ; Sprite mappings - invisible lava tag (MZ)
0001153A                            ; ---------------------------------------------------------------------------
0001153A                            Map_LTag_internal:
0001153A 0000                       		dc.w @0-Map_LTag_internal
0001153C 00                         @0:		dc.b 0		; no sprite, because the tag is invisible!
0001153E 00                         		even
0001153E 00                         		even
0001153E                            		include	"_anim\Lava Geyser.asm"
0001153E                            ; ---------------------------------------------------------------------------
0001153E                            ; Animation script - geyser of lava (MZ)
0001153E                            ; ---------------------------------------------------------------------------
0001153E 0000                       Ani_Geyser:	dc.w @bubble1-Ani_Geyser
00011540 0000                       		dc.w @bubble2-Ani_Geyser
00011542 0000                       		dc.w @end-Ani_Geyser
00011544 0000                       		dc.w @bubble3-Ani_Geyser
00011546 0000                       		dc.w @blank-Ani_Geyser
00011548 0000                       		dc.w @bubble4-Ani_Geyser
0001154A 0200 0100 0104 0504 05FC   @bubble1:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	afRoutine
00011554 0202 03FF                  @bubble2:	dc.b 2,	2, 3, afEnd
00011558 0206 07FF                  @end:		dc.b 2,	6, 7, afEnd
0001155C 0202 0300 0100 01FC        @bubble3:	dc.b 2,	2, 3, 0, 1, 0, 1, afRoutine
00011564 0F13 FF                    @blank:		dc.b $F, $13, afEnd
00011568 00                         		even
00011568 0211 12FF                  @bubble4:	dc.b 2,	$11, $12, afEnd
0001156C                            		even
0001156C                            		even
0001156C                            Map_Geyser:	include	"_maps\Lava Geyser.asm"
0001156C                            ; ---------------------------------------------------------------------------
0001156C                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0001156C                            ; ---------------------------------------------------------------------------
0001156C                            Map_Geyser_internal:
0001156C 0000                       		dc.w @bubble1-Map_Geyser_internal
0001156E 0000                       		dc.w @bubble2-Map_Geyser_internal
00011570 0000                       		dc.w @bubble3-Map_Geyser_internal
00011572 0000                       		dc.w @bubble4-Map_Geyser_internal
00011574 0000                       		dc.w @bubble5-Map_Geyser_internal
00011576 0000                       		dc.w @bubble6-Map_Geyser_internal
00011578 0000                       		dc.w @end1-Map_Geyser_internal
0001157A 0000                       		dc.w @end2-Map_Geyser_internal
0001157C 0000                       		dc.w @medcolumn1-Map_Geyser_internal
0001157E 0000                       		dc.w @medcolumn2-Map_Geyser_internal
00011580 0000                       		dc.w @medcolumn3-Map_Geyser_internal
00011582 0000                       		dc.w @shortcolumn1-Map_Geyser_internal
00011584 0000                       		dc.w @shortcolumn2-Map_Geyser_internal
00011586 0000                       		dc.w @shortcolumn3-Map_Geyser_internal
00011588 0000                       		dc.w @longcolumn1-Map_Geyser_internal
0001158A 0000                       		dc.w @longcolumn2-Map_Geyser_internal
0001158C 0000                       		dc.w @longcolumn3-Map_Geyser_internal
0001158E 0000                       		dc.w @bubble7-Map_Geyser_internal
00011590 0000                       		dc.w @bubble8-Map_Geyser_internal
00011592 0000                       		dc.w @blank-Map_Geyser_internal
00011594 02                         @bubble1:	dc.b 2
00011595 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0001159A EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0001159F 02                         @bubble2:	dc.b 2
000115A0 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
000115A5 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
000115AA 04                         @bubble3:	dc.b 4
000115AB EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
000115B0 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
000115B5 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
000115BA EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
000115BF 04                         @bubble4:	dc.b 4
000115C0 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
000115C5 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
000115CA F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
000115CF EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
000115D4 06                         @bubble5:	dc.b 6
000115D5 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
000115DA F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
000115DF F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
000115E4 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
000115E9 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
000115EE E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
000115F3 06                         @bubble6:	dc.b 6
000115F4 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
000115F9 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
000115FE F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00011603 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00011608 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0001160D E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
00011612 02                         @end1:		dc.b 2
00011613 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
00011618 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0001161D 02                         @end2:		dc.b 2
0001161E E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
00011623 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
00011628 0A                         @medcolumn1:	dc.b $A
00011629 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0001162E 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00011633 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00011638 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0001163D D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00011642 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00011647 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0001164C F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00011651 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00011656 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0001165B 0A                         @medcolumn2:	dc.b $A
0001165C 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00011661 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00011666 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0001166B B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00011670 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011675 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001167A F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0001167F F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00011684 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00011689 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0001168E 0A                         @medcolumn3:	dc.b $A
0001168F 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00011694 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00011699 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001169E B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000116A3 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000116A8 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000116AD F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
000116B2 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
000116B7 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
000116BC 100F 0860 00               		dc.b $10, $F, 8, $60, 0
000116C1 06                         @shortcolumn1:	dc.b 6
000116C2 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000116C7 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000116CC B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000116D1 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000116D6 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000116DB D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000116E0 06                         @shortcolumn2:	dc.b 6
000116E1 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
000116E6 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000116EB B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
000116F0 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
000116F5 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
000116FA D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
000116FF 06                         @shortcolumn3:	dc.b 6
00011700 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00011705 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0001170A B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001170F B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00011714 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00011719 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001171E 10                         @longcolumn1:	dc.b $10
0001171F 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00011724 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00011729 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0001172E B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00011733 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00011738 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0001173D F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00011742 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00011747 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0001174C 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00011751 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
00011756 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0001175B 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
00011760 500F 0840 00               		dc.b $50, $F, 8, $40, 0
00011765 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0001176A 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0001176F 10                         @longcolumn2:	dc.b $10
00011770 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00011775 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0001177A B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0001177F B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00011784 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011789 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001178E F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00011793 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00011798 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0001179D 100F 0850 00               		dc.b $10, $F, 8, $50, 0
000117A2 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
000117A7 300F 0850 00               		dc.b $30, $F, 8, $50, 0
000117AC 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
000117B1 500F 0850 00               		dc.b $50, $F, 8, $50, 0
000117B6 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
000117BB 700F 0850 00               		dc.b $70, $F, 8, $50, 0
000117C0 10                         @longcolumn3:	dc.b $10
000117C1 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000117C6 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000117CB B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000117D0 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000117D5 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000117DA D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000117DF F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
000117E4 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
000117E9 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
000117EE 100F 0860 00               		dc.b $10, $F, 8, $60, 0
000117F3 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
000117F8 300F 0860 00               		dc.b $30, $F, 8, $60, 0
000117FD 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
00011802 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00011807 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0001180C 700F 0860 00               		dc.b $70, $F, 8, $60, 0
00011811 06                         @bubble7:	dc.b 6
00011812 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00011817 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0001181C E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
00011821 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
00011826 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0001182B D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
00011830 06                         @bubble8:	dc.b 6
00011831 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
00011836 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0001183B E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
00011840 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
00011845 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0001184A D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0001184F 00                         @blank:	dc.b 0
00011850                            		even
00011850                            		even
00011850                            
00011850                            		include	"_incObj\40 Moto Bug.asm" ; includes "_incObj\sub RememberState.asm"
00011850                            ; ---------------------------------------------------------------------------
00011850                            ; Object 40 - Moto Bug enemy (GHZ)
00011850                            ; ---------------------------------------------------------------------------
00011850                            
00011850                            MotoBug:
00011850 7000                       		moveq	#0,d0
00011852 1028 0024                  		move.b	obRoutine(a0),d0
00011856 323B 0000                  		move.w	Moto_Index(pc,d0.w),d1
0001185A 4EFB 1000                  		jmp	Moto_Index(pc,d1.w)
0001185E                            ; ===========================================================================
0001185E 0000                       Moto_Index:	dc.w Moto_Main-Moto_Index
00011860 0000                       		dc.w Moto_Action-Moto_Index
00011862 0000                       		dc.w Moto_Animate-Moto_Index
00011864 0000                       		dc.w Moto_Delete-Moto_Index
00011866                            ; ===========================================================================
00011866                            
00011866                            Moto_Main:	; Routine 0
00011866 217C 0000 0000 0004        		move.l	#Map_Moto,obMap(a0)
0001186E 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
00011874 117C 0004 0001             		move.b	#4,obRender(a0)
0001187A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011880 117C 0014 0014             		move.b	#$14,obActWid(a0)
00011886 4A28 001C                  		tst.b	obAnim(a0)	; is object a smoke trail?
0001188A 6600                       		bne.s	@smoke		; if yes, branch
0001188C 117C 000E 0016             		move.b	#$E,obHeight(a0)
00011892 117C 0008 0017             		move.b	#8,obWidth(a0)
00011898 117C 000C 0020             		move.b	#$C,obColType(a0)
0001189E 6100 DF42                  		bsr.w	ObjectFall
000118A2 4EB9 0000 0000             		jsr	(ObjFloorDist).l
000118A8 4A41                       		tst.w	d1
000118AA 6A00                       		bpl.s	@notonfloor
000118AC D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
000118B0 317C 0000 0012             		move.w	#0,obVelY(a0)
000118B6 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Moto_Action next
000118BA 0868 0000 0022             		bchg	#0,obStatus(a0)
000118C0                            
000118C0                            	@notonfloor:
000118C0 4E75                       		rts	
000118C2                            ; ===========================================================================
000118C2                            
000118C2                            @smoke:
000118C2 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Moto_Animate next
000118C6 6000 0000                  		bra.w	Moto_Animate
000118CA                            ; ===========================================================================
000118CA                            
000118CA                            Moto_Action:	; Routine 2
000118CA 7000                       		moveq	#0,d0
000118CC 1028 0025                  		move.b	ob2ndRout(a0),d0
000118D0 323B 0000                  		move.w	Moto_ActIndex(pc,d0.w),d1
000118D4 4EBB 1000                  		jsr	Moto_ActIndex(pc,d1.w)
000118D8 43F9 0000 0000             		lea	(Ani_Moto).l,a1
000118DE 6100 B004                  		bsr.w	AnimateSprite
000118E2                            
000118E2                            		include	"_incObj\sub RememberState.asm" ; Moto_Action terminates in this file
000118E2                            ; ---------------------------------------------------------------------------
000118E2                            ; Subroutine to remember whether an object is destroyed/collected
000118E2                            ; ---------------------------------------------------------------------------
000118E2                            
000118E2                            RememberState:
00011900 6000 DF2C                  		bra.w	DisplaySprite
00011904                            
00011904                            	@offscreen:
00011904 45F8 FC00                  		lea	(v_objstate).w,a2
00011908 7000                       		moveq	#0,d0
0001190A 1028 0023                  		move.b	obRespawnNo(a0),d0
0001190E 6700                       		beq.s	@delete
00011910 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00011916                            
00011916                            	@delete:
00011916 6000 DF56                  		bra.w	DeleteObject
00011916 6000 DF56                  		bra.w	DeleteObject
0001191A                            
0001191A                            ; ===========================================================================
0001191A 0000                       Moto_ActIndex:	dc.w @move-Moto_ActIndex
0001191C 0000                       		dc.w @findfloor-Moto_ActIndex
0001191E                            
0001191E =00000030                  @time:		equ $30
0001191E =00000033                  @smokedelay:	equ $33
0001191E                            ; ===========================================================================
0001191E                            
0001191E                            @move:
0001191E 5368 0030                  		subq.w	#1,@time(a0)	; subtract 1 from pause	time
00011922 6A00                       		bpl.s	@wait		; if time remains, branch
00011924 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00011928 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object to the left
0001192E 117C 0001 001C             		move.b	#1,obAnim(a0)
00011934 0868 0000 0022             		bchg	#0,obStatus(a0)
0001193A 6600                       		bne.s	@wait
0001193C 4468 0010                  		neg.w	obVelX(a0)	; change direction
00011940                            
00011940                            	@wait:
00011940 4E75                       		rts	
00011942                            ; ===========================================================================
00011942                            
00011942                            @findfloor:
00011942 6100 DED6                  		bsr.w	SpeedToPos
00011946 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0001194C 0C41 FFF8                  		cmpi.w	#-8,d1
00011950 6D00                       		blt.s	@pause
00011952 0C41 000C                  		cmpi.w	#$C,d1
00011956 6C00                       		bge.s	@pause
00011958 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
0001195C 5328 0033                  		subq.b	#1,@smokedelay(a0)
00011960 6A00                       		bpl.s	@nosmoke
00011962 117C 000F 0033             		move.b	#$F,@smokedelay(a0)
00011968 6100 E45E                  		bsr.w	FindFreeObj
0001196C 6600                       		bne.s	@nosmoke
0001196E 12BC 0040                  		move.b	#id_MotoBug,0(a1) ; load exhaust smoke object
00011972 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011978 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001197E 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00011984 137C 0002 001C             		move.b	#2,obAnim(a1)
0001198A                            
0001198A                            	@nosmoke:
0001198A 4E75                       		rts	
0001198C                            
0001198C                            @pause:
0001198C 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00011990 317C 003B 0030             		move.w	#59,@time(a0)	; set pause time to 1 second
00011996 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop the object moving
0001199C 117C 0000 001C             		move.b	#0,obAnim(a0)
000119A2 4E75                       		rts	
000119A4                            ; ===========================================================================
000119A4                            
000119A4                            Moto_Animate:	; Routine 4
000119A4 43F9 0000 0000             		lea	(Ani_Moto).l,a1
000119AA 6100 AF38                  		bsr.w	AnimateSprite
000119AE 6000 DE7E                  		bra.w	DisplaySprite
000119B2                            ; ===========================================================================
000119B2                            
000119B2                            Moto_Delete:	; Routine 6
000119B2 6000 DEBA                  		bra.w	DeleteObject
000119B2 6000 DEBA                  		bra.w	DeleteObject
000119B6                            		include	"_anim\Moto Bug.asm"
000119B6                            ; ---------------------------------------------------------------------------
000119B6                            ; Animation script - Motobug enemy
000119B6                            ; ---------------------------------------------------------------------------
000119B6 0000                       Ani_Moto:	dc.w @stand-Ani_Moto
000119B8 0000                       		dc.w @walk-Ani_Moto
000119BA 0000                       		dc.w @smoke-Ani_Moto
000119BC                            
000119BC 0F02 FF                    @stand:		dc.b $F, 2, afEnd
000119C0 00                         		even
000119C0 0700 0100 02FF             @walk:		dc.b 7,	0, 1, 0, 2, afEnd
000119C6 0103 0603 0604 0604 0604+  @smoke:		dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, afRoutine
000119D4 00                         		even
000119D4 00                         		even
000119D4                            Map_Moto:	include	"_maps\Moto Bug.asm"
000119D4                            ; --------------------------------------------------------------------------------
000119D4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000119D4                            ; --------------------------------------------------------------------------------
000119D4                            
000119D4                            SME_TTY9T:	
000119D4 0000 0000                  		dc.w SME_TTY9T_E-SME_TTY9T, SME_TTY9T_23-SME_TTY9T	
000119D8 0000 0000                  		dc.w SME_TTY9T_38-SME_TTY9T, SME_TTY9T_52-SME_TTY9T	
000119DC 0000 0000                  		dc.w SME_TTY9T_58-SME_TTY9T, SME_TTY9T_5E-SME_TTY9T	
000119E0 0000                       		dc.w SME_TTY9T_64-SME_TTY9T	
000119E2 04                         SME_TTY9T_E:	dc.b 4	
000119E3 F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
000119E8 000C 2008 EC               		dc.b 0, $C, $20, 8, $EC	
000119ED F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
000119F2 0808 200E F4               		dc.b 8, 8, $20, $E, $F4	
000119F7 04                         SME_TTY9T_23:	dc.b 4	
000119F8 F10D 2000 EC               		dc.b $F1, $D, $20, 0, $EC	
000119FD 010C 2008 EC               		dc.b 1, $C, $20, 8, $EC	
00011A02 F901 200C 0C               		dc.b $F9, 1, $20, $C, $C	
00011A07 0908 2011 F4               		dc.b 9, 8, $20, $11, $F4	
00011A0C 05                         SME_TTY9T_38:	dc.b 5	
00011A0D F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
00011A12 000C 2014 EC               		dc.b 0, $C, $20, $14, $EC	
00011A17 F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
00011A1C 0804 2018 EC               		dc.b 8, 4, $20, $18, $EC	
00011A21 0804 2012 FC               		dc.b 8, 4, $20, $12, $FC	
00011A26 01                         SME_TTY9T_52:	dc.b 1	
00011A27 FA00 001A 10               		dc.b $FA, 0, 0, $1A, $10	
00011A2C 01                         SME_TTY9T_58:	dc.b 1	
00011A2D FA00 001B 10               		dc.b $FA, 0, 0, $1B, $10	
00011A32 01                         SME_TTY9T_5E:	dc.b 1	
00011A33 FA00 001C 10               		dc.b $FA, 0, 0, $1C, $10	
00011A38 00                         SME_TTY9T_64:	dc.b 0	
00011A3A 00                         		even
00011A3A 00                         		even
00011A3A                            		include	"_incObj\4F.asm"
00011A3A                            ; ---------------------------------------------------------------------------
00011A3A                            ; Object 4F - Splats
00011A3A                            ; ---------------------------------------------------------------------------
00011A3A                            
00011A3A                            Obj4F:
00011A3A 7000                                       moveq   #0,d0
00011A3C 1028 0024                                  move.b  $24(a0),d0
00011A40 323B 0000                                  move.w  ObjSplats_Index(pc,d0.w),d1
00011A44 4EFB 1000                                  jmp     ObjSplats_Index(pc,d1.w)
00011A48                            ; ---------------------------------------------------------------------------
00011A48 0000                       ObjSplats_Index:dc.w ObjSplats_Init-*
00011A4A 0000                                       dc.w loc_D246-ObjSplats_Index
00011A4C 0000                                       dc.w ObjSplats_Bounce-ObjSplats_Index
00011A4E 0000                                       dc.w loc_D2C8-ObjSplats_Index
00011A50                            ; ---------------------------------------------------------------------------
00011A50                            
00011A50                            ObjSplats_Init:
00011A50 5428 0024                                  addq.b  #2,$24(a0)
00011A54 217C 0000 0000 0004                        move.l  #Map_Splats,4(a0)
00011A5C 317C 24E4 0002                             move.w  #$24E4,2(a0)
00011A62 117C 0004 0001                             move.b  #4,1(a0)
00011A68 117C 0004 0014                             move.b  #4,obActWid(a0)
00011A6E 317C 0200 0018             				move.w	#$200,obPriority(a0)
00011A74 117C 0014 0016                             move.b  #$14,$16(a0)
00011A7A 117C 0002 0020                             move.b  #2,$20(a0)
00011A80 4A28 0028                                  tst.b   $28(a0)
00011A84 6700                                       beq.s   loc_D246
00011A86 343C 0300                                  move.w  #$300,d2
00011A8A 6000                                       bra.s   ObjSplats_FaceRight
00011A8C                            ; ---------------------------------------------------------------------------
00011A8C                            
00011A8C                            loc_D246:
00011A8C 343C 00E0                                  move.w  #$E0,d2
00011A90                            
00011A90                            ObjSplats_FaceRight:
00011A90 323C 0100                                  move.w  #$100,d1
00011A94 08E8 0000 0001                             bset    #0,1(a0)
00011A9A 3038 D008                                  move.w  ($FFFFD008).w,d0
00011A9E 9068 0008                                  sub.w   8(a0),d0
00011AA2 6400                                       bcc.s   ObjSplats_Move
00011AA4 4440                                       neg.w   d0
00011AA6 4441                                       neg.w   d1
00011AA8 08A8 0000 0001                             bclr    #0,1(a0)
00011AAE                            
00011AAE                            ObjSplats_Move:
00011AAE B042                                       cmp.w   d2,d0
00011AB0 6400                                       bcc.s   ObjSplats_Bounce
00011AB2 3141 0010                                  move.w  d1,$10(a0)
00011AB6 5428 0024                                  addq.b  #2,$24(a0)
00011ABA                            
00011ABA                            ObjSplats_Bounce:
00011ABA 6100 DD26                                  bsr.w   ObjectFall
00011ABE 117C 0001 001A                             move.b  #1,$1A(a0)
00011AC4 4A68 0012                                  tst.w   $12(a0)
00011AC8 6B00                                       bmi.s   ObjSplats_Turn
00011ACA 117C 0000 001A                             move.b  #0,$1A(a0)
00011AD0 6100 0000                                  bsr.w   ObjFloorDist
00011AD4 4A41                                       tst.w   d1
00011AD6 6A00                                       bpl.s   ObjSplats_Turn
00011AD8 3011                                       move.w  (a1),d0
00011ADA 0240 03FF                                  andi.w  #$3FF,d0
00011ADE 0C40 02D2                                  cmpi.w  #$2D2,d0
00011AE2 6500                                       bcs.s   ObjSplats_Fall
00011AE4 5428 0024                                  addq.b  #2,$24(a0)
00011AE8 6000                                       bra.s   ObjSplats_Turn
00011AEA                            ; ---------------------------------------------------------------------------
00011AEA                            
00011AEA                            ObjSplats_Fall:
00011AEA D368 000C                                  add.w   d1,$C(a0)
00011AEE 317C FC00 0012                             move.w  #$FC00,$12(a0)
00011AF4                            
00011AF4                            ObjSplats_Turn:
00011AF4 6100 0000                                  bsr.w   Yad_ChkWall
00011AF8 6700                                       beq.s   loc_D2C4
00011AFA 4468 0010                                  neg.w   $10(a0)
00011AFE 0868 0000 0001                             bchg    #0,1(a0)
00011B04 0868 0000 0022                             bchg    #0,$22(a0)
00011B0A                            
00011B0A                            loc_D2C4:
00011B0A 6000 FDD6                                  bra.w   RememberState
00011B0E                            ; ---------------------------------------------------------------------------
00011B0E                            
00011B0E                            loc_D2C8:
00011B0E 6100 DCD2                                  bsr.w   ObjectFall
00011B12 6100 DD1A                                  bsr.w   DisplaySprite
00011B16 4A28 0001                                  tst.b   1(a0)
00011B1A 6A00 DD52                                  bpl.w   DeleteObject
00011B1E 4E75                                       rts
00011B1E 4E75                                       rts
00011B20                            Map_Splats:	include	"_maps\Splats.asm"
00011B20 0000                       Map_Splats_internal:     dc.w unk_D310-*
00011B22 0000                                       dc.w unk_D31B-Map_Splats_internal
00011B24 02                         unk_D310:       dc.b   2
00011B25 EC0B 0000 F40C 0800 0CF4                   dc.b $EC, $B, 0, 0, $F4, $C, 8, 0, $C, $F4
00011B2F 02                         unk_D31B:       dc.b   2
00011B30 EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
00011B30 EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
00011B3A                            
00011B3A                            		include	"_incObj\50 Yadrin.asm"
00011B3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011B3A                            
00011B3A                            
00011B3A                            Yad_ChkWall:
00011B3A 3038 FE04                  		move.w	(v_framecount).w,d0
00011B3E D047                       		add.w	d7,d0
00011B40 0240 0003                  		andi.w	#3,d0
00011B44 6600                       		bne.s	loc_F836
00011B46 7600                       		moveq	#0,d3
00011B48 1628 0014                  		move.b	obActWid(a0),d3
00011B4C 4A68 0010                  		tst.w	obVelX(a0)
00011B50 6B00                       		bmi.s	loc_F82C
00011B52 6100 0000                  		bsr.w	ObjHitWallRight
00011B56 4A41                       		tst.w	d1
00011B58 6A00                       		bpl.s	loc_F836
00011B5A                            
00011B5A                            loc_F828:
00011B5A 7001                       		moveq	#1,d0
00011B5C 4E75                       		rts	
00011B5E                            ; ===========================================================================
00011B5E                            
00011B5E                            loc_F82C:
00011B5E 4643                       		not.w	d3
00011B60 6100 0000                  		bsr.w	ObjHitWallLeft
00011B64 4A41                       		tst.w	d1
00011B66 6BF2                       		bmi.s	loc_F828
00011B68                            
00011B68                            loc_F836:
00011B68 7000                       		moveq	#0,d0
00011B6A 4E75                       		rts	
00011B6C                            ; End of function Yad_ChkWall
00011B6C                            
00011B6C                            ; ===========================================================================
00011B6C                            ; ---------------------------------------------------------------------------
00011B6C                            ; Object 50 - Yadrin enemy (SYZ)
00011B6C                            ; ---------------------------------------------------------------------------
00011B6C                            
00011B6C                            Yadrin:
00011B6C 7000                       		moveq	#0,d0
00011B6E 1028 0024                  		move.b	obRoutine(a0),d0
00011B72 323B 0000                  		move.w	Yad_Index(pc,d0.w),d1
00011B76 4EFB 1000                  		jmp	Yad_Index(pc,d1.w)
00011B7A                            ; ===========================================================================
00011B7A 0000                       Yad_Index:	dc.w Yad_Main-Yad_Index
00011B7C 0000                       		dc.w Yad_Action-Yad_Index
00011B7E                            
00011B7E =00000030                  yad_timedelay:	equ $30
00011B7E                            ; ===========================================================================
00011B7E                            
00011B7E                            Yad_Main:	; Routine 0
00011B7E 217C 0000 0000 0004        		move.l	#Map_Yad,obMap(a0)
00011B86 317C 247B 0002             		move.w	#$247B,obGfx(a0)
00011B8C 117C 0004 0001             		move.b	#4,obRender(a0)
00011B92 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011B98 117C 0014 0014             		move.b	#$14,obActWid(a0)
00011B9E 117C 0011 0016             		move.b	#$11,obHeight(a0)
00011BA4 117C 0008 0017             		move.b	#8,obWidth(a0)
00011BAA 117C 00CC 0020             		move.b	#$CC,obColType(a0)
00011BB0 6100 DC30                  		bsr.w	ObjectFall
00011BB4 6100 0000                  		bsr.w	ObjFloorDist
00011BB8 4A41                       		tst.w	d1
00011BBA 6A00                       		bpl.s	locret_F89E
00011BBC D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
00011BC0 317C 0000 0012             		move.w	#0,obVelY(a0)
00011BC6 5428 0024                  		addq.b	#2,obRoutine(a0)
00011BCA 0868 0000 0022             		bchg	#0,obStatus(a0)
00011BD0                            
00011BD0                            	locret_F89E:
00011BD0 4E75                       		rts	
00011BD2                            ; ===========================================================================
00011BD2                            
00011BD2                            Yad_Action:	; Routine 2
00011BD2 7000                       		moveq	#0,d0
00011BD4 1028 0025                  		move.b	ob2ndRout(a0),d0
00011BD8 323B 0000                  		move.w	Yad_Index2(pc,d0.w),d1
00011BDC 4EBB 1000                  		jsr	Yad_Index2(pc,d1.w)
00011BE0 43F9 0000 0000             		lea	(Ani_Yad).l,a1
00011BE6 6100 ACFC                  		bsr.w	AnimateSprite
00011BEA 6000 FCF6                  		bra.w	RememberState
00011BEE                            ; ===========================================================================
00011BEE 0000                       Yad_Index2:	dc.w Yad_Move-Yad_Index2
00011BF0 0000                       		dc.w Yad_FixToFloor-Yad_Index2
00011BF2                            ; ===========================================================================
00011BF2                            
00011BF2                            Yad_Move:
00011BF2 5368 0030                  		subq.w	#1,yad_timedelay(a0) ; subtract 1 from pause time
00011BF6 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00011BF8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00011BFC 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object
00011C02 117C 0001 001C             		move.b	#1,obAnim(a0)
00011C08 0868 0000 0022             		bchg	#0,obStatus(a0)
00011C0E 6600                       		bne.s	locret_F8E2
00011C10 4468 0010                  		neg.w	obVelX(a0)	; change direction
00011C14                            
00011C14                            	locret_F8E2:
00011C14 4E75                       		rts	
00011C16                            ; ===========================================================================
00011C16                            
00011C16                            Yad_FixToFloor:
00011C16 6100 DC02                  		bsr.w	SpeedToPos
00011C1A 6100 0000                  		bsr.w	ObjFloorDist
00011C1E 0C41 FFF8                  		cmpi.w	#-8,d1
00011C22 6D00                       		blt.s	Yad_Pause
00011C24 0C41 000C                  		cmpi.w	#$C,d1
00011C28 6C00                       		bge.s	Yad_Pause
00011C2A D368 000C                  		add.w	d1,obY(a0)	; match	object's position to the floor
00011C2E 6100 FF0A                  		bsr.w	Yad_ChkWall
00011C32 6600                       		bne.s	Yad_Pause
00011C34 4E75                       		rts	
00011C36                            ; ===========================================================================
00011C36                            
00011C36                            Yad_Pause:
00011C36 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00011C3A 317C 003B 0030             		move.w	#59,yad_timedelay(a0) ; set pause time to 1 second
00011C40 317C 0000 0010             		move.w	#0,obVelX(a0)
00011C46 117C 0000 001C             		move.b	#0,obAnim(a0)
00011C4C 4E75                       		rts	
00011C4C 4E75                       		rts	
00011C4E                            		include	"_anim\Yadrin.asm"
00011C4E                            ; ---------------------------------------------------------------------------
00011C4E                            ; Animation script - Yadrin enemy
00011C4E                            ; ---------------------------------------------------------------------------
00011C4E 0000                       Ani_Yad:	dc.w @stand-Ani_Yad
00011C50 0000                       		dc.w @walk-Ani_Yad
00011C52                            
00011C52 0800 FF                    @stand:		dc.b 8,	0, afEnd
00011C56 00                         		even
00011C56 0800 0002 0000 0101 0103+  @walk:		dc.b 8, 0, 0, 2, 0, 0, 1, 1, 1, 3, 1, 1, 1, afEnd
00011C64                            		even
00011C64                            		even
00011C64                            Map_Yad:	include	"_maps\Yadrin.asm"
00011C64                            ; --------------------------------------------------------------------------------
00011C64                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011C64                            ; --------------------------------------------------------------------------------
00011C64                            
00011C64                            SME_4WhIu:	
00011C64 0000 0000                  		dc.w SME_4WhIu_C-SME_4WhIu, SME_4WhIu_3A-SME_4WhIu	
00011C68 0000 0000                  		dc.w SME_4WhIu_68-SME_4WhIu, SME_4WhIu_A5-SME_4WhIu	
00011C6C 0000 0000                  		dc.w SME_4WhIu_E2-SME_4WhIu, SME_4WhIu_FC-SME_4WhIu	
00011C70 09                         SME_4WhIu_C:	dc.b 9	
00011C71 F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011C76 EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011C7B 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011C80 FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011C85 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011C8A FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011C8F FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011C94 F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011C99 EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011C9E 09                         SME_4WhIu_3A:	dc.b 9	
00011C9F F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011CA4 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011CA9 FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011CAE FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011CB3 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011CB8 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011CBD F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011CC2 EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011CC7 EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011CCC 0C                         SME_4WhIu_68:	dc.b $C	
00011CCD EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011CD2 FB00 601D FC               		dc.b $FB, 0, $60, $1D, $FC	
00011CD7 FB00 6020 04               		dc.b $FB, 0, $60, $20, 4	
00011CDC 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011CE1 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011CE6 F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011CEB EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011CF0 FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011CF5 FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011CFA F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011CFF 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011D04 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011D09 0C                         SME_4WhIu_A5:	dc.b $C	
00011D0A F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011D0F FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011D14 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011D19 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011D1E 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011D23 F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011D28 EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011D2D EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011D32 FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011D37 FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011D3C 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011D41 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011D46 05                         SME_4WhIu_E2:	dc.b 5	
00011D47 F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011D4C 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011D51 EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011D56 F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011D5B 0409 0031 FC               		dc.b 4, 9, 0, $31, $FC	
00011D60 05                         SME_4WhIu_FC:	dc.b 5	
00011D61 F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011D66 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011D6B EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011D70 F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011D75 0409 0037 FC               		dc.b 4, 9, 0, $37, $FC	
00011D7A                            		even
00011D7A                            		even
00011D7A                            
00011D7A                            		include	"_incObj\sub SolidObject.asm"
00011D7A                            ; ---------------------------------------------------------------------------
00011D7A                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00011D7A                            ;
00011D7A                            ; input:
00011D7A                            ;	d1 = width
00011D7A                            ;	d2 = height / 2 (when jumping)
00011D7A                            ;	d3 = height / 2 (when walking)
00011D7A                            ;	d4 = x-axis position
00011D7A                            ; ---------------------------------------------------------------------------
00011D7A                            
00011D7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011D7A                            
00011D7A                            
00011D7A                            SolidObject:
00011D7A 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic standing on the object?
00011D7E 6700 0000                  		beq.w	Solid_ChkEnter	; if not, branch
00011D82 3401                       		move.w	d1,d2
00011D84 D442                       		add.w	d2,d2
00011D86 43F8 D000                  		lea	(v_player).w,a1
00011D8A 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011D90 6600                       		bne.s	@leave		; if yes, branch
00011D92 3029 0008                  		move.w	obX(a1),d0
00011D96 9068 0008                  		sub.w	obX(a0),d0
00011D9A D041                       		add.w	d1,d0
00011D9C 6B00                       		bmi.s	@leave		; if Sonic moves off the left, branch
00011D9E B042                       		cmp.w	d2,d0		; has Sonic moved off the right?
00011DA0 6500                       		bcs.s	@stand		; if not, branch
00011DA2                            
00011DA2                            	@leave:
00011DA2 08A9 0003 0022             		bclr	#3,obStatus(a1)	; clear Sonic's standing flag
00011DA8 08A8 0003 0022             		bclr	#3,obStatus(a0)	; clear object's standing flag
00011DAE 4228 0025                  		clr.b	obSolid(a0)
00011DB2 7800                       		moveq	#0,d4
00011DB4 4E75                       		rts	
00011DB6                            
00011DB6                            	@stand:
00011DB6 3404                       		move.w	d4,d2
00011DB8 4EB9 0000 935A             		jsr	MvSonicOnPtfm
00011DBE 7800                       		moveq	#0,d4
00011DC0 4E75                       		rts	
00011DC2                            ; ===========================================================================
00011DC2                            
00011DC2                            SolidObject71:
00011DC2 4A28 0025                  		tst.b	obSolid(a0)
00011DC6 6700 0000                  		beq.w	loc_FAD0
00011DCA 3401                       		move.w	d1,d2
00011DCC D442                       		add.w	d2,d2
00011DCE 43F8 D000                  		lea	(v_player).w,a1
00011DD2 0829 0001 0022             		btst	#1,obStatus(a1)
00011DD8 6600                       		bne.s	@leave
00011DDA 3029 0008                  		move.w	obX(a1),d0
00011DDE 9068 0008                  		sub.w	obX(a0),d0
00011DE2 D041                       		add.w	d1,d0
00011DE4 6B00                       		bmi.s	@leave
00011DE6 B042                       		cmp.w	d2,d0
00011DE8 6500                       		bcs.s	@stand
00011DEA                            
00011DEA                            	@leave:
00011DEA 08A9 0003 0022             		bclr	#3,obStatus(a1)
00011DF0 08A8 0003 0022             		bclr	#3,obStatus(a0)
00011DF6 4228 0025                  		clr.b	obSolid(a0)
00011DFA 7800                       		moveq	#0,d4
00011DFC 4E75                       		rts	
00011DFE                            
00011DFE                            	@stand:
00011DFE 3404                       		move.w	d4,d2
00011E00 4EB9 0000 935A             		jsr	MvSonicOnPtfm
00011E06 7800                       		moveq	#0,d4
00011E08 4E75                       		rts	
00011E0A                            ; ===========================================================================
00011E0A                            
00011E0A                            SolidObject2F:
00011E0A 43F8 D000                  		lea	(v_player).w,a1
00011E0E 4A28 0001                  		tst.b	obRender(a0)
00011E12 6A00 0000                  		bpl.w	Solid_Ignore
00011E16 3029 0008                  		move.w	obX(a1),d0
00011E1A 9068 0008                  		sub.w	obX(a0),d0
00011E1E D041                       		add.w	d1,d0
00011E20 6B00 0000                  		bmi.w	Solid_Ignore
00011E24 3601                       		move.w	d1,d3
00011E26 D643                       		add.w	d3,d3
00011E28 B043                       		cmp.w	d3,d0
00011E2A 6200 0000                  		bhi.w	Solid_Ignore
00011E2E 3A00                       		move.w	d0,d5
00011E30 0828 0000 0001             		btst	#0,obRender(a0)	; is object horizontally flipped?
00011E36 6700                       		beq.s	@notflipped	; if not, branch
00011E38 4645                       		not.w	d5
00011E3A DA43                       		add.w	d3,d5
00011E3C                            
00011E3C                            	@notflipped:
00011E3C E24D                       		lsr.w	#1,d5
00011E3E 7600                       		moveq	#0,d3
00011E40 1632 5000                  		move.b	(a2,d5.w),d3
00011E44 9612                       		sub.b	(a2),d3
00011E46 3A28 000C                  		move.w	obY(a0),d5
00011E4A 9A43                       		sub.w	d3,d5
00011E4C 1629 0016                  		move.b	obHeight(a1),d3
00011E50 4883                       		ext.w	d3
00011E52 D443                       		add.w	d3,d2
00011E54 3629 000C                  		move.w	obY(a1),d3
00011E58 9645                       		sub.w	d5,d3
00011E5A 5843                       		addq.w	#4,d3
00011E5C D642                       		add.w	d2,d3
00011E5E 6B00 0000                  		bmi.w	Solid_Ignore
00011E62 3802                       		move.w	d2,d4
00011E64 D844                       		add.w	d4,d4
00011E66 B644                       		cmp.w	d4,d3
00011E68 6400 0000                  		bcc.w	Solid_Ignore
00011E6C 6000 0000                  		bra.w	loc_FB0E
00011E70                            ; ===========================================================================
00011E70                            
00011E70                            Solid_ChkEnter:
00011E70 4A28 0001                  		tst.b	obRender(a0)
00011E74 6A00 0000                  		bpl.w	Solid_Ignore
00011E78                            
00011E78                            loc_FAD0:
00011E78 43F8 D000                  		lea	(v_player).w,a1
00011E7C 3029 0008                  		move.w	obX(a1),d0
00011E80 9068 0008                  		sub.w	obX(a0),d0
00011E84 D041                       		add.w	d1,d0
00011E86 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves off the left, branch
00011E8A 3601                       		move.w	d1,d3
00011E8C D643                       		add.w	d3,d3
00011E8E B043                       		cmp.w	d3,d0		; has Sonic moved off the right?
00011E90 6200 0000                  		bhi.w	Solid_Ignore	; if yes, branch
00011E94 1629 0016                  		move.b	obHeight(a1),d3
00011E98 4883                       		ext.w	d3
00011E9A D443                       		add.w	d3,d2
00011E9C 3629 000C                  		move.w	obY(a1),d3
00011EA0 9668 000C                  		sub.w	obY(a0),d3
00011EA4 5843                       		addq.w	#4,d3
00011EA6 D642                       		add.w	d2,d3
00011EA8 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves above, branch
00011EAC 3802                       		move.w	d2,d4
00011EAE D844                       		add.w	d4,d4
00011EB0 B644                       		cmp.w	d4,d3		; has Sonic moved below?
00011EB2 6400 0000                  		bcc.w	Solid_Ignore	; if yes, branch
00011EB6                            
00011EB6                            loc_FB0E:
00011EB6 4A38 F7C8                  		tst.b	(f_lockmulti).w	; are controls locked?
00011EBA 6B00 0000                  		bmi.w	Solid_Ignore	; if yes, branch
00011EBE 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic dying?
00011EC4 6400 0000                  			bcc.w	Solid_Debug
00011EC8 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00011ECC 6600 0000                  		bne.w	Solid_Debug	; if yes, branch
00011ED0 3A00                       		move.w	d0,d5
00011ED2 B240                       		cmp.w	d0,d1		; is Sonic right of centre of object?
00011ED4 6400                       		bcc.s	@isright	; if yes, branch
00011ED6 D241                       		add.w	d1,d1
00011ED8 9041                       		sub.w	d1,d0
00011EDA 3A00                       		move.w	d0,d5
00011EDC 4445                       		neg.w	d5
00011EDE                            
00011EDE                            	@isright:
00011EDE 3203                       		move.w	d3,d1
00011EE0 B443                       		cmp.w	d3,d2		; is Sonic below centre of object?
00011EE2 6400                       		bcc.s	@isbelow	; if yes, branch
00011EE4                            
00011EE4 5943                       		subq.w	#4,d3
00011EE6 9644                       		sub.w	d4,d3
00011EE8 3203                       		move.w	d3,d1
00011EEA 4441                       		neg.w	d1
00011EEC                            
00011EEC                            	@isbelow:
00011EEC BA41                       		cmp.w	d1,d5
00011EEE 6200 0000                  		bhi.w	Solid_TopBottom	; if Sonic hits top or bottom, branch
00011EF2 0C41 0004                  		cmpi.w	#4,d1
00011EF6 6300                       		bls.s	Solid_SideAir
00011EF8 4A40                       		tst.w	d0		; where is Sonic?
00011EFA 6700                       		beq.s	Solid_Centre	; if inside the object, branch
00011EFC 6B00                       		bmi.s	Solid_Right	; if right of the object, branch
00011EFE 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving left?
00011F02 6B00                       		bmi.s	Solid_Centre	; if yes, branch
00011F04 6000                       		bra.s	Solid_Left
00011F06                            ; ===========================================================================
00011F06                            
00011F06                            Solid_Right:
00011F06 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving right?
00011F0A 6A00                       		bpl.s	Solid_Centre	; if yes, branch
00011F0C                            
00011F0C                            Solid_Left:
00011F0C 337C 0000 0020             		move.w	#0,obInertia(a1)
00011F12 337C 0000 0010             		move.w	#0,obVelX(a1)	; stop Sonic moving
00011F18                            
00011F18                            Solid_Centre:
00011F18 9169 0008                  		sub.w	d0,obX(a1)	; correct Sonic's position
00011F1C 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011F22 6600                       		bne.s	Solid_SideAir	; if yes, branch
00011F24 08E9 0005 0022             		bset	#5,obStatus(a1)	; make Sonic push object
00011F2A 08E8 0005 0022             		bset	#5,obStatus(a0)	; make object be pushed
00011F30 7801                       		moveq	#1,d4		; return side collision
00011F32 4E75                       		rts	
00011F34                            ; ===========================================================================
00011F34                            
00011F34                            Solid_SideAir:
00011F34 6100                       		bsr.s	Solid_NotPushing
00011F36 7801                       		moveq	#1,d4		; return side collision
00011F38 4E75                       		rts	
00011F3A                            ; ===========================================================================
00011F3A                            
00011F3A                            Solid_Ignore:
00011F3A 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing?
00011F40 6700                       		beq.s	Solid_Debug	; if not, branch
00011F42 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
00011F48 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011F4A 0C29 0000 001C             		cmpi.b	#id_Drown,obAnim(a1)	; is Sonic in his drowning animation?
00011F50 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011F52 0C29 0000 001C             		cmpi.b	#id_Hurt,obAnim(a1)	; is Sonic in his hurt animation?
00011F58 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011F5A 337C 0000 001C             		move.w	#id_Run,obAnim(a1) ; use running animation
00011F60                            
00011F60                            
00011F60                            Solid_NotPushing:
00011F60 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag
00011F66 08A9 0005 0022             		bclr	#5,obStatus(a1)	; clear Sonic's pushing flag
00011F6C                            
00011F6C                            Solid_Debug:
00011F6C 7800                       		moveq	#0,d4		; return no collision
00011F6E 4E75                       		rts	
00011F70                            ; ===========================================================================
00011F70                            
00011F70                            Solid_TopBottom:
00011F70 4A43                       		tst.w	d3		; is Sonic below the object?
00011F72 6B00                       		bmi.s	Solid_Below	; if yes, branch
00011F74 0C43 0010                  		cmpi.w	#$10,d3		; has Sonic landed on the object?
00011F78 6500                       		bcs.s	Solid_Landed	; if yes, branch
00011F7A 60BE                       		bra.s	Solid_Ignore
00011F7C                            ; ===========================================================================
00011F7C                            
00011F7C                            Solid_Below:
00011F7C 4A69 0012                  		tst.w	obVelY(a1) ; is Sonic moving vertically?
00011F80 6700                       		beq.s	Solid_Squash ; if not, branch
00011F82 6A00                       		bpl.s 	Solid_TopBtmAir ; if moving downwards, branch
00011F84 4A43                       		tst.w	d3 ; is Sonic above the object?
00011F86 6A00                       		bpl.s	Solid_TopBtmAir ; if yes, branch
00011F88 337C 0000 0012             		move.w	#0,obVelY(a1) ; stop Sonic moving
00011F8E                            
00011F8E                            Solid_TopBtmAir:
00011F8E 9769 000C                  		sub.w	d3,obY(a1) ; correct Sonic's position
00011F92 78FF                       		moveq	#-1,d4
00011F94 4E75                       		rts	
00011F96                            ; ===========================================================================
00011F96                            
00011F96                            Solid_Squash:
00011F96 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011F9C 66F0                       		bne.s	Solid_TopBtmAir	; if yes, branch
00011F9E 2F08                       		move.l	a0,-(sp)
00011FA0 2049                       		movea.l	a1,a0
00011FA2 4EB9 0000 0000             		jsr	(KillSonic).l	; kill Sonic
00011FA8 205F                       		movea.l	(sp)+,a0
00011FAA 78FF                       		moveq	#-1,d4
00011FAC 4E75                       		rts	
00011FAE                            ; ===========================================================================
00011FAE                            
00011FAE                            Solid_Landed:
00011FAE 5943                       		subq.w	#4,d3
00011FB0 7200                       		moveq	#0,d1
00011FB2 1228 0014                  		move.b	obActWid(a0),d1
00011FB6 3401                       		move.w	d1,d2
00011FB8 D442                       		add.w	d2,d2
00011FBA D269 0008                  		add.w	obX(a1),d1
00011FBE 9268 0008                  		sub.w	obX(a0),d1
00011FC2 6B00                       		bmi.s	Solid_Miss	; if Sonic is right of object, branch
00011FC4 B242                       		cmp.w	d2,d1		; is Sonic left of object?
00011FC6 6400                       		bcc.s	Solid_Miss	; if yes, branch
00011FC8 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving upwards?
00011FCC 6B00                       		bmi.s	Solid_Miss	; if yes, branch
00011FCE 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011FD2 5369 000C                  		subq.w	#1,obY(a1)
00011FD6 6100                       		bsr.s	Solid_ResetFloor
00011FD8 117C 0002 0025             		move.b	#2,obSolid(a0) ; set standing flags
00011FDE 08E8 0003 0022             		bset	#3,obStatus(a0)
00011FE4 78FF                       		moveq	#-1,d4		; return top/bottom collision
00011FE6 4E75                       		rts	
00011FE8                            ; ===========================================================================
00011FE8                            
00011FE8                            Solid_Miss:
00011FE8 7800                       		moveq	#0,d4
00011FEA 4E75                       		rts	
00011FEC                            ; End of function SolidObject
00011FEC                            
00011FEC                            
00011FEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011FEC                            
00011FEC                            
00011FEC                            Solid_ResetFloor:
00011FEC 0829 0003 0022             		btst	#3,obStatus(a1)	; is Sonic standing on something?
00011FF2 6700                       		beq.s	@notonobj	; if not, branch
00011FF4                            
00011FF4 7000                       		moveq	#0,d0
00011FF6 1029 003D                  		move.b	$3D(a1),d0	; get object being stood on
00011FFA ED48                       		lsl.w	#6,d0
00011FFC 0680 00FF D000             		addi.l	#(v_objspace&$FFFFFF),d0
00012002 2440                       		movea.l	d0,a2
00012004 08AA 0003 0022             		bclr	#3,obStatus(a2)	; clear object's standing flags
0001200A 422A 0025                  		clr.b	obSolid(a2)
0001200E                            
0001200E                            	@notonobj:
0001200E 3008                       		move.w	a0,d0
00012010 0440 D000                  		subi.w	#$D000,d0
00012014 EC48                       		lsr.w	#6,d0
00012016 0240 007F                  		andi.w	#$7F,d0
0001201A 1340 003D                  		move.b	d0,$3D(a1)	; set object being stood on
0001201E 137C 0000 0026             		move.b	#0,obAngle(a1)	; clear Sonic's angle
00012024 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic
0001202A 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
00012030 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00012036 6700                       		beq.s	@notinair	; if not, branch
00012038 2F08                       		move.l	a0,-(sp)
0001203A 2049                       		movea.l	a1,a0
0001203C 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l ; reset Sonic as if on floor
00012042 205F                       		movea.l	(sp)+,a0
00012044                            
00012044                            	@notinair:
00012044 08E9 0003 0022             		bset	#3,obStatus(a1)	; set object standing flag
0001204A 08E8 0003 0022             		bset	#3,obStatus(a0)	; set Sonic standing on object flag
00012050 4E75                       		rts	
00012052                            ; End of function Solid_ResetFloor
00012052                            ; End of function Solid_ResetFloor
00012052                            
00012052                            		include	"_incObj\51 Smashable Green Block.asm"
00012052                            ; ---------------------------------------------------------------------------
00012052                            ; Object 51 - smashable	green block (MZ)
00012052                            ; ---------------------------------------------------------------------------
00012052                            
00012052                            SmashBlock:
00012052 7000                       		moveq	#0,d0
00012054 1028 0024                  		move.b	obRoutine(a0),d0
00012058 323B 0000                  		move.w	Smab_Index(pc,d0.w),d1
0001205C 4EBB 1000                  		jsr	Smab_Index(pc,d1.w)
00012060 6000 F880                  		bra.w	RememberState
00012064                            ; ===========================================================================
00012064 0000                       Smab_Index:	dc.w Smab_Main-Smab_Index
00012066 0000                       		dc.w Smab_Solid-Smab_Index
00012068 0000                       		dc.w Smab_Points-Smab_Index
0001206A                            ; ===========================================================================
0001206A                            
0001206A                            Smab_Main:	; Routine 0
0001206A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001206E 217C 0000 0000 0004        		move.l	#Map_Smab,obMap(a0)
00012076 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
0001207C 117C 0004 0001             		move.b	#4,obRender(a0)
00012082 117C 0010 0014             		move.b	#$10,obActWid(a0)
00012088 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001208E 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
00012094                            
00012094                            Smab_Solid:	; Routine 2
00012094                            
00012094 =00000032                  sonicAniFrame:	equ $32		; Sonic's current animation number
00012094 =00000034                  @count:		equ $34		; number of blocks hit + previous stuff
00012094                            
00012094 3178 F7D0 0034             		move.w	(v_itembonus).w,$34(a0)
0001209A 1178 D01C 0032             		move.b	(v_player+obAnim).w,sonicAniFrame(a0) ; load Sonic's animation number
000120A0 323C 001B                  		move.w	#$1B,d1
000120A4 343C 0010                  		move.w	#$10,d2
000120A8 363C 0011                  		move.w	#$11,d3
000120AC 3828 0008                  		move.w	obX(a0),d4
000120B0 6100 FCC8                  		bsr.w	SolidObject
000120B4 0828 0003 0022             		btst	#3,obStatus(a0)	; has Sonic landed on the block?
000120BA 6600                       		bne.s	@smash		; if yes, branch
000120BC                            
000120BC                            	@notspinning:
000120BC 4E75                       		rts	
000120BE                            ; ===========================================================================
000120BE                            
000120BE                            @smash:
000120BE 0C28 0000 0032             		cmpi.b	#id_Roll,sonicAniFrame(a0) ; is Sonic rolling/jumping?
000120C4 66F6                       		bne.s	@notspinning	; if not, branch
000120C6 31E8 0034 F7D0             		move.w	@count(a0),(v_itembonus).w
000120CC 08E9 0002 0022             		bset	#2,obStatus(a1)
000120D2 137C 000E 0016             		move.b	#$E,obHeight(a1)
000120D8 137C 0007 0017             		move.b	#7,obWidth(a1)
000120DE 137C 0000 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic roll
000120E4 337C FD00 0012             		move.w	#-$300,obVelY(a1) ; rebound Sonic
000120EA 08E9 0001 0022             		bset	#1,obStatus(a1)
000120F0 08A9 0003 0022             		bclr	#3,obStatus(a1)
000120F6 137C 0002 0024             		move.b	#2,obRoutine(a1)
000120FC 08A8 0003 0022             		bclr	#3,obStatus(a0)
00012102 4228 0025                  		clr.b	obSolid(a0)
00012106 117C 0001 001A             		move.b	#1,obFrame(a0)
0001210C 49F9 0000 0000             		lea	(Smab_Speeds).l,a4 ; load broken fragment speed data
00012112 7203                       		moveq	#3,d1		; set number of	fragments to 4
00012114 343C 0038                  		move.w	#$38,d2
00012118 6100 D2C4                  		bsr.w	SmashObject
0001211C 6100 DCAA                  		bsr.w	FindFreeObj
00012120 6600                       		bne.s	Smab_Points
00012122 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00012126 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001212C 3368 000C 000C             		move.w	obY(a0),obY(a1)
00012132 3438 F7D0                  		move.w	(v_itembonus).w,d2
00012136 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; increment bonus counter
0001213A 0C42 0006                  		cmpi.w	#6,d2		; have fewer than 3 blocks broken?
0001213E 6500                       		bcs.s	@bonus		; if yes, branch
00012140 7406                       		moveq	#6,d2		; set cap for points
00012142                            
00012142                            	@bonus:
00012142 7000                       		moveq	#0,d0
00012144 303B 2000                  		move.w	Smab_Scores(pc,d2.w),d0
00012148 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 blocks been smashed?
0001214E 6500                       		bcs.s	@givepoints	; if not, branch
00012150 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00012154 740A                       		moveq	#10,d2
00012156                            
00012156                            	@givepoints:
00012156 4EB9 0000 0000             		jsr	(AddPoints).l
0001215C E24A                       		lsr.w	#1,d2
0001215E 1342 001A                  		move.b	d2,obFrame(a1)
00012162                            
00012162                            Smab_Points:	; Routine 4
00012162 6100 D6B6                  		bsr.w	SpeedToPos
00012166 0668 0038 0012             		addi.w	#$38,obVelY(a0)
0001216C 6100 D6C0                  		bsr.w	DisplaySprite
00012170 4A28 0001                  		tst.b	obRender(a0)
00012174 6A00 D6F8                  		bpl.w	DeleteObject
00012178 4E75                       		rts	
0001217A                            ; ===========================================================================
0001217A FE00 FE00                  Smab_Speeds:	dc.w -$200, -$200	; x-speed, y-speed
0001217E FF00 FF00                  		dc.w -$100, -$100
00012182 0200 FE00                  		dc.w $200, -$200
00012186 0100 FF00                  		dc.w $100, -$100
0001218A                            
0001218A 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
0001218A 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
00012192                            Map_Smab:	include	"_maps\Smashable Green Block.asm"
00012192                            ; --------------------------------------------------------------------------------
00012192                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00012192                            ; --------------------------------------------------------------------------------
00012192                            
00012192                            SME_wdHTM:	
00012192 0000 0000                  		dc.w SME_wdHTM_6-SME_wdHTM, SME_wdHTM_1B-SME_wdHTM	
00012196 0000                       		dc.w SME_wdHTM_30-SME_wdHTM	
00012198 04                         SME_wdHTM_6:	dc.b 4	
00012199 F005 0000 00               		dc.b $F0, 5, 0, 0, 0	
0001219E 0005 0000 00               		dc.b 0, 5, 0, 0, 0	
000121A3 0005 0000 F0               		dc.b 0, 5, 0, 0, $F0	
000121A8 F005 0000 F0               		dc.b $F0, 5, 0, 0, $F0	
000121AD 04                         SME_wdHTM_1B:	dc.b 4	
000121AE F005 0000 00               		dc.b $F0, 5, 0, 0, 0	
000121B3 0005 0000 00               		dc.b 0, 5, 0, 0, 0	
000121B8 0005 0000 F0               		dc.b 0, 5, 0, 0, $F0	
000121BD F005 0000 F0               		dc.b $F0, 5, 0, 0, $F0	
000121C2 00                         SME_wdHTM_30:	dc.b 0	
000121C4 00                         		even
000121C4 00                         		even
000121C4                            
000121C4                            		include	"_incObj\52 Moving Blocks.asm"
000121C4                            ; ---------------------------------------------------------------------------
000121C4                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
000121C4                            ; ---------------------------------------------------------------------------
000121C4                            
000121C4                            MovingBlock:
000121C4 7000                       		moveq	#0,d0
000121C6 1028 0024                  		move.b	obRoutine(a0),d0
000121CA 323B 0000                  		move.w	MBlock_Index(pc,d0.w),d1
000121CE 4EFB 1000                  		jmp	MBlock_Index(pc,d1.w)
000121D2                            ; ===========================================================================
000121D2 0000                       MBlock_Index:	dc.w MBlock_Main-MBlock_Index
000121D4 0000                       		dc.w MBlock_Platform-MBlock_Index
000121D6 0000                       		dc.w MBlock_StandOn-MBlock_Index
000121D8                            
000121D8 =00000030                  mblock_origX:	equ $30
000121D8 =00000032                  mblock_origY:	equ $32
000121D8                            
000121D8 1000                       MBlock_Var:	dc.b $10, 0		; object width,	frame number
000121DA 2001                       		dc.b $20, 1
000121DC 2002                       		dc.b $20, 2
000121DE 4003                       		dc.b $40, 3
000121E0 3004                       		dc.b $30, 4
000121E2                            ; ===========================================================================
000121E2                            
000121E2                            MBlock_Main:	; Routine 0
000121E2 5428 0024                  		addq.b	#2,obRoutine(a0)
000121E6 217C 0000 0000 0004        		move.l	#Map_MBlock,obMap(a0)
000121EE 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
000121F4 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
000121FA 6600                       		bne.s	loc_FE44
000121FC 217C 0000 0000 0004        		move.l	#Map_MBlockLZ,obMap(a0) ; LZ specific code
00012204 317C 43BC 0002             		move.w	#$43BC,obGfx(a0)
0001220A 117C 0007 0016             		move.b	#7,obHeight(a0)
00012210                            
00012210                            loc_FE44:
00012210 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00012216 6600                       		bne.s	loc_FE60
00012218 317C 22C0 0002             		move.w	#$22C0,obGfx(a0) ; SBZ specific code (object 5228)
0001221E 0C28 0028 0028             		cmpi.b	#$28,obSubtype(a0) ; is object 5228 ?
00012224 6700                       		beq.s	loc_FE60	; if yes, branch
00012226 317C 4460 0002             		move.w	#$4460,obGfx(a0) ; SBZ specific code (object 523x)
0001222C                            
0001222C                            loc_FE60:
0001222C 117C 0004 0001             		move.b	#4,obRender(a0)
00012232 7000                       		moveq	#0,d0
00012234 1028 0028                  		move.b	obSubtype(a0),d0
00012238 E648                       		lsr.w	#3,d0
0001223A 0240 001E                  		andi.w	#$1E,d0
0001223E 45FB 0098                  		lea	MBlock_Var(pc,d0.w),a2
00012242 115A 0014                  		move.b	(a2)+,obActWid(a0)
00012246 115A 001A                  		move.b	(a2)+,obFrame(a0)
0001224A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012250 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00012256 3168 000C 0032             		move.w	obY(a0),mblock_origY(a0)
0001225C 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
00012262                            
00012262                            MBlock_Platform: ; Routine 2
00012262 6100 0000                  		bsr.w	MBlock_Move
00012266 7200                       		moveq	#0,d1
00012268 1228 0014                  		move.b	obActWid(a0),d1
0001226C 4EB9 0000 8C88             		jsr	(PlatformObject).l
00012272 6000                       		bra.s	MBlock_ChkDel
00012274                            ; ===========================================================================
00012274                            
00012274                            MBlock_StandOn:	; Routine 4
00012274 7200                       		moveq	#0,d1
00012276 1228 0014                  		move.b	obActWid(a0),d1
0001227A 4EB9 0000 8DFC             		jsr	(ExitPlatform).l
00012280 3F28 0008                  		move.w	obX(a0),-(sp)
00012284 6100 0000                  		bsr.w	MBlock_Move
00012288 341F                       		move.w	(sp)+,d2
0001228A 4EB9 0000 9366             		jsr	(MvSonicOnPtfm2).l
00012290                            
00012290                            MBlock_ChkDel:
000122AE 6000 D57E                  		bra.w	DisplaySprite
000122B2                            ; ===========================================================================
000122B2                            
000122B2                            MBlock_Move:
000122B2 7000                       		moveq	#0,d0
000122B4 1028 0028                  		move.b	obSubtype(a0),d0
000122B8 0240 000F                  		andi.w	#$F,d0
000122BC D040                       		add.w	d0,d0
000122BE 323B 0000                  		move.w	MBlock_TypeIndex(pc,d0.w),d1
000122C2 4EFB 1000                  		jmp	MBlock_TypeIndex(pc,d1.w)
000122C6                            ; ===========================================================================
000122C6 0000 0000                  MBlock_TypeIndex:dc.w MBlock_Type00-MBlock_TypeIndex, MBlock_Type01-MBlock_TypeIndex
000122CA 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type03-MBlock_TypeIndex
000122CE 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type05-MBlock_TypeIndex
000122D2 0000 0000                  		dc.w MBlock_Type06-MBlock_TypeIndex, MBlock_Type07-MBlock_TypeIndex
000122D6 0000 0000                  		dc.w MBlock_Type08-MBlock_TypeIndex, MBlock_Type02-MBlock_TypeIndex
000122DA 0000                       		dc.w MBlock_Type0A-MBlock_TypeIndex
000122DC                            ; ===========================================================================
000122DC                            
000122DC                            MBlock_Type00:
000122DC 4E75                       		rts	
000122DE                            ; ===========================================================================
000122DE                            
000122DE                            MBlock_Type01:
000122DE 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
000122E2 323C 0060                  		move.w	#$60,d1
000122E6 0828 0000 0022             		btst	#0,obStatus(a0)
000122EC 6700                       		beq.s	loc_FF26
000122EE 4440                       		neg.w	d0
000122F0 D041                       		add.w	d1,d0
000122F2                            
000122F2                            loc_FF26:
000122F2 3228 0030                  		move.w	mblock_origX(a0),d1
000122F6 9240                       		sub.w	d0,d1
000122F8 3141 0008                  		move.w	d1,obX(a0)
000122FC 4E75                       		rts	
000122FE                            ; ===========================================================================
000122FE                            
000122FE                            MBlock_Type02:
000122FE 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; is Sonic standing on the platform?
00012304 6600                       		bne.s	MBlock_02_Wait
00012306 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
0001230A                            
0001230A                            MBlock_02_Wait:
0001230A 4E75                       		rts	
0001230C                            ; ===========================================================================
0001230C                            
0001230C                            MBlock_Type03:
0001230C 7600                       		moveq	#0,d3
0001230E 1628 0014                  		move.b	obActWid(a0),d3
00012312 6100 0000                  		bsr.w	ObjHitWallRight
00012316 4A41                       		tst.w	d1		; has the platform hit a wall?
00012318 6B00                       		bmi.s	MBlock_03_End	; if yes, branch
0001231A 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
0001231E 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00012324 4E75                       		rts	
00012326                            ; ===========================================================================
00012326                            
00012326                            MBlock_03_End:
00012326 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving	type)
0001232A 4E75                       		rts	
0001232C                            ; ===========================================================================
0001232C                            
0001232C                            MBlock_Type05:
0001232C 7600                       		moveq	#0,d3
0001232E 1628 0014                  		move.b	obActWid(a0),d3
00012332 6100 0000                  		bsr.w	ObjHitWallRight
00012336 4A41                       		tst.w	d1		; has the platform hit a wall?
00012338 6B00                       		bmi.s	MBlock_05_End	; if yes, branch
0001233A 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
0001233E 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00012344 4E75                       		rts	
00012346                            ; ===========================================================================
00012346                            
00012346                            MBlock_05_End:
00012346 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 06 (falling)
0001234A 4E75                       		rts	
0001234C                            ; ===========================================================================
0001234C                            
0001234C                            MBlock_Type06:
0001234C 6100 D4CC                  		bsr.w	SpeedToPos
00012350 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make the platform fall
00012356 6100 0000                  		bsr.w	ObjFloorDist
0001235A 4A41                       		tst.w	d1		; has platform hit the floor?
0001235C 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00012360 D368 000C                  		add.w	d1,obY(a0)
00012364 4268 0012                  		clr.w	obVelY(a0)	; stop platform	falling
00012368 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving)
0001236C                            
0001236C                            locret_FFA0:
0001236C 4E75                       		rts	
0001236E                            ; ===========================================================================
0001236E                            
0001236E                            MBlock_Type07:
0001236E 4A38 F7E2                  		tst.b	(f_switch+2).w	; has switch number 02 been pressed?
00012372 6700                       		beq.s	MBlock_07_ChkDel
00012374 5728 0028                  		subq.b	#3,obSubtype(a0) ; if yes, change object type to 04
00012378                            
00012378                            MBlock_07_ChkDel:
00012378 588F                       		addq.l	#4,sp
00012398 4E75                       		rts	
0001239A                            ; ===========================================================================
0001239A                            
0001239A                            MBlock_Type08:
0001239A 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
0001239E 323C 0080                  		move.w	#$80,d1
000123A2 0828 0000 0022             		btst	#0,obStatus(a0)
000123A8 6700                       		beq.s	loc_FFE2
000123AA 4440                       		neg.w	d0
000123AC D041                       		add.w	d1,d0
000123AE                            
000123AE                            loc_FFE2:
000123AE 3228 0032                  		move.w	mblock_origY(a0),d1
000123B2 9240                       		sub.w	d0,d1
000123B4 3141 000C                  		move.w	d1,obY(a0)
000123B8 4E75                       		rts	
000123BA                            ; ===========================================================================
000123BA                            
000123BA                            MBlock_Type0A:
000123BA 7600                       		moveq	#0,d3
000123BC 1628 0014                  		move.b	obActWid(a0),d3
000123C0 D643                       		add.w	d3,d3
000123C2 7208                       		moveq	#8,d1
000123C4 0828 0000 0022             		btst	#0,obStatus(a0)
000123CA 6700                       		beq.s	loc_10004
000123CC 4441                       		neg.w	d1
000123CE 4443                       		neg.w	d3
000123D0                            
000123D0                            loc_10004:
000123D0 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000123D4 6600                       		bne.s	MBlock_0A_Back	; if yes, branch
000123D6 3028 0008                  		move.w	obX(a0),d0
000123DA 9068 0030                  		sub.w	mblock_origX(a0),d0
000123DE B043                       		cmp.w	d3,d0
000123E0 6700                       		beq.s	MBlock_0A_Wait
000123E2 D368 0008                  		add.w	d1,obX(a0)	; move platform
000123E6 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
000123EC 4E75                       		rts	
000123EE                            ; ===========================================================================
000123EE                            
000123EE                            MBlock_0A_Wait:
000123EE 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
000123F2 6600                       		bne.s	locret_1002E	; if time remains, branch
000123F4 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
000123FA                            
000123FA                            locret_1002E:
000123FA 4E75                       		rts	
000123FC                            ; ===========================================================================
000123FC                            
000123FC                            MBlock_0A_Back:
000123FC 3028 0008                  		move.w	obX(a0),d0
00012400 9068 0030                  		sub.w	mblock_origX(a0),d0
00012404 6700                       		beq.s	MBlock_0A_Reset
00012406 9368 0008                  		sub.w	d1,obX(a0)	; return platform to its original position
0001240A 4E75                       		rts	
0001240C                            ; ===========================================================================
0001240C                            
0001240C                            MBlock_0A_Reset:
0001240C 4268 0036                  		clr.w	$36(a0)
00012410 5328 0028                  		subq.b	#1,obSubtype(a0)
00012414 4E75                       		rts	
00012414 4E75                       		rts	
00012416                            Map_MBlock:	include	"_maps\Moving Blocks (MZ and SBZ).asm"
00012416                            ; ---------------------------------------------------------------------------
00012416                            ; Sprite mappings - moving blocks (MZ, SBZ)
00012416                            ; ---------------------------------------------------------------------------
00012416                            Map_MBlock_internal:
00012416 0000                       		dc.w @mz1-Map_MBlock_internal
00012418 0000                       		dc.w @mz2-Map_MBlock_internal
0001241A 0000                       		dc.w @sbz-Map_MBlock_internal
0001241C 0000                       		dc.w @sbzwide-Map_MBlock_internal
0001241E 0000                       		dc.w @mz3-Map_MBlock_internal
00012420 01                         @mz1:		dc.b 1
00012421 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00012426 02                         @mz2:		dc.b 2
00012427 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
0001242C F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00012431 04                         @sbz:		dc.b 4
00012432 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00012437 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
0001243C F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00012441 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00012446 04                         @sbzwide:	dc.b 4
00012447 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
0001244C F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00012451 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00012456 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
0001245B 03                         @mz3:		dc.b 3
0001245C F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00012461 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00012466 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
0001246C 00                         		even
0001246C 00                         		even
0001246C                            Map_MBlockLZ:	include	"_maps\Moving Blocks (LZ).asm"
0001246C                            ; ---------------------------------------------------------------------------
0001246C                            ; Sprite mappings - moving block (LZ)
0001246C                            ; ---------------------------------------------------------------------------
0001246C                            Map_MBlockLZ_internal:
0001246C 0000                       		dc.w @0-Map_MBlockLZ_internal
0001246E 01                         @0:		dc.b 1
0001246F F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00012474                            		even
00012474                            		even
00012474                            
00012474                            		include	"_incObj\55 Basaran.asm"
00012474                            ; ---------------------------------------------------------------------------
00012474                            ; Object 55 - Basaran enemy (MZ)
00012474                            ; ---------------------------------------------------------------------------
00012474                            
00012474                            Basaran:
00012474 7000                       		moveq	#0,d0
00012476 1028 0024                  		move.b	obRoutine(a0),d0
0001247A 323B 0000                  		move.w	Bas_Index(pc,d0.w),d1
0001247E 4EFB 1000                  		jmp	Bas_Index(pc,d1.w)
00012482                            ; ===========================================================================
00012482 0000                       Bas_Index:	dc.w Bas_Main-Bas_Index
00012484 0000                       		dc.w Bas_Action-Bas_Index
00012486                            ; ===========================================================================
00012486                            
00012486                            Bas_Main:	; Routine 0
00012486 5428 0024                  		addq.b	#2,obRoutine(a0)
0001248A 217C 0000 0000 0004        		move.l	#Map_Bas,obMap(a0)
00012492 317C 84B8 0002             		move.w	#$84B8,obGfx(a0)
00012498 117C 0004 0001             		move.b	#4,obRender(a0)
0001249E 117C 000C 0016             		move.b	#$C,obHeight(a0)
000124A4 317C 0100 0018             		move.w	#$100,obPriority(a0)
000124AA 117C 000B 0020             		move.b	#$B,obColType(a0)
000124B0 117C 0010 0014             		move.b	#$10,obActWid(a0)
000124B6                            
000124B6                            Bas_Action:	; Routine 2
000124B6 7000                       		moveq	#0,d0
000124B8 1028 0025                  		move.b	ob2ndRout(a0),d0
000124BC 323B 0000                  		move.w	@index(pc,d0.w),d1
000124C0 4EBB 1000                  		jsr	@index(pc,d1.w)
000124C4 43F9 0000 0000             		lea	(Ani_Bas).l,a1
000124CA 6100 A418                  		bsr.w	AnimateSprite
000124CE 6000 F412                  		bra.w	RememberState
000124D2                            ; ===========================================================================
000124D2 0000                       @index:		dc.w @dropcheck-@index
000124D4 0000                       		dc.w @dropfly-@index
000124D6 0000                       		dc.w @flapsound-@index
000124D8 0000                       		dc.w @flyup-@index
000124DA                            ; ===========================================================================
000124DA                            
000124DA                            @dropcheck:
000124DA 343C 0080                  		move.w	#$80,d2
000124DE 6100 0000                  		bsr.w	@chkdistance	; is Sonic < $80 pixels from basaran?
000124E2 6400                       		bcc.s	@nodrop		; if not, branch
000124E4 3038 D00C                  		move.w	(v_player+obY).w,d0
000124E8 3140 0036                  		move.w	d0,$36(a0)
000124EC 9068 000C                  		sub.w	obY(a0),d0
000124F0 6500                       		bcs.s	@nodrop
000124F2 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic < $80 pixels from basaran?
000124F6 6400                       		bcc.s	@nodrop		; if not, branch
000124F8 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
000124FC 6600                       		bne.s	@nodrop		; if yes, branch
000124FE                            
000124FE 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012502 D007                       		add.b	d7,d0
00012504 0200 0007                  		andi.b	#7,d0
00012508 6600                       		bne.s	@nodrop
0001250A 117C 0001 001C             		move.b	#1,obAnim(a0)
00012510 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00012514                            
00012514                            	@nodrop:
00012514 4E75                       		rts	
00012516                            ; ===========================================================================
00012516                            
00012516                            @dropfly:
00012516 6100 D302                  		bsr.w	SpeedToPos
0001251A 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make basaran fall
00012520 343C 0080                  		move.w	#$80,d2
00012524 6100 0000                  		bsr.w	@chkdistance
00012528 3028 0036                  		move.w	$36(a0),d0
0001252C 9068 000C                  		sub.w	obY(a0),d0
00012530 6500                       		bcs.s	@chkdel
00012532 0C40 0010                  		cmpi.w	#$10,d0		; is basaran close to Sonic vertically?
00012536 6400                       		bcc.s	@dropmore	; if not, branch
00012538 3141 0010                  		move.w	d1,obVelX(a0)	; make basaran fly horizontally
0001253C 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop basaran falling
00012542 117C 0002 001C             		move.b	#2,obAnim(a0)
00012548 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001254C                            
0001254C                            	@dropmore:
0001254C 4E75                       		rts	
0001254E                            
0001254E                            	@chkdel:
0001254E 4A28 0001                  		tst.b	obRender(a0)
00012552 6A00 D31A                  		bpl.w	DeleteObject
00012556 4E75                       		rts	
00012558                            ; ===========================================================================
00012558                            
00012558                            @flapsound:
00012558 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001255C 0200 000F                  		andi.b	#$F,d0
00012560 6600                       		bne.s	@nosound
0001256C                            
0001256C                            	@nosound:
0001256C 6100 D2AC                  		bsr.w	SpeedToPos
00012570 3038 D008                  		move.w	(v_player+obX).w,d0
00012574 9068 0008                  		sub.w	obX(a0),d0
00012578 6400                       		bcc.s	@isright	; if Sonic is right of basaran, branch
0001257A 4440                       		neg.w	d0
0001257C                            
0001257C                            	@isright:
0001257C 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of basaran?
00012580 6500                       		bcs.s	@dontflyup	; if yes, branch
00012582 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012586 D007                       		add.b	d7,d0
00012588 0200 0007                  		andi.b	#7,d0
0001258C 6600                       		bne.s	@dontflyup
0001258E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00012592                            
00012592                            @dontflyup:
00012592 4E75                       		rts	
00012594                            ; ===========================================================================
00012594                            
00012594                            @flyup:
00012594 6100 D284                  		bsr.w	SpeedToPos
00012598 0468 0018 0012             		subi.w	#$18,obVelY(a0)	; make basaran fly upwards
0001259E 6100 0000                  		bsr.w	ObjHitCeiling
000125A2 4A41                       		tst.w	d1		; has basaran hit the ceiling?
000125A4 6A00                       		bpl.s	@noceiling	; if not, branch
000125A6 9368 000C                  		sub.w	d1,obY(a0)
000125AA 0268 FFF8 0008             		andi.w	#$FFF8,obX(a0)
000125B0 4268 0010                  		clr.w	obVelX(a0)	; stop basaran moving
000125B4 4268 0012                  		clr.w	obVelY(a0)
000125B8 4228 001C                  		clr.b	obAnim(a0)
000125BC 4228 0025                  		clr.b	ob2ndRout(a0)
000125C0                            
000125C0                            	@noceiling:
000125C0 4E75                       		rts	
000125C2                            ; ===========================================================================
000125C2                            
000125C2                            ; Subroutine to check Sonic's distance from the basaran
000125C2                            
000125C2                            ; input:
000125C2                            ;	d2 = distance to compare
000125C2                            
000125C2                            ; output:
000125C2                            ;	d0 = distance between Sonic and basaran
000125C2                            ;	d1 = speed/direction for basaran to fly
000125C2                            
000125C2                            @chkdistance:
000125C2 323C 0100                  		move.w	#$100,d1
000125C6 08E8 0000 0022             		bset	#0,obStatus(a0)
000125CC 3038 D008                  		move.w	(v_player+obX).w,d0
000125D0 9068 0008                  		sub.w	obX(a0),d0
000125D4 6400                       		bcc.s	@right		; if Sonic is right of basaran, branch
000125D6 4440                       		neg.w	d0
000125D8 4441                       		neg.w	d1
000125DA 08A8 0000 0022             		bclr	#0,obStatus(a0)
000125E0                            
000125E0                            	@right:
000125E0 B042                       		cmp.w	d2,d0
000125E2 4E75                       		rts	
000125E4                            ; ===========================================================================
000125E4                            ; unused crap
000125E4 6100 D234                  		bsr.w	SpeedToPos
000125E8 6100 D244                  		bsr.w	DisplaySprite
000125EC 4A28 0001                  		tst.b	obRender(a0)
000125F0 6A00 D27C                  		bpl.w	DeleteObject
000125F4 4E75                       		rts	
000125F4 4E75                       		rts	
000125F6                            		include	"_anim\Basaran.asm"
000125F6                            ; ---------------------------------------------------------------------------
000125F6                            ; Animation script - Basaran enemy
000125F6                            ; ---------------------------------------------------------------------------
000125F6 0000                       Ani_Bas:	dc.w @still-Ani_Bas
000125F8 0000                       		dc.w @fall-Ani_Bas
000125FA 0000                       		dc.w @fly-Ani_Bas
000125FC 0F00 FF                    @still:		dc.b $F, 0, afEnd
00012600 00                         		even
00012600 0F01 FF                    @fall:		dc.b $F, 1, afEnd
00012604 00                         		even
00012604 0301 0203 02FF             @fly:		dc.b 3,	1, 2, 3, 2, afEnd
0001260A                            		even
0001260A                            		even
0001260A                            Map_Bas:	include	"_maps\Basaran.asm"
0001260A                            ; --------------------------------------------------------------------------------
0001260A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001260A                            ; --------------------------------------------------------------------------------
0001260A                            
0001260A                            SME_RhYYA:	
0001260A 0000 0000                  		dc.w SME_RhYYA_8-SME_RhYYA, SME_RhYYA_E-SME_RhYYA	
0001260E 0000 0000                  		dc.w SME_RhYYA_1E-SME_RhYYA, SME_RhYYA_33-SME_RhYYA	
00012612 01                         SME_RhYYA_8:	dc.b 1	
00012613 F406 2000 F8               		dc.b $F4, 6, $20, 0, $F8	
00012618 03                         SME_RhYYA_E:	dc.b 3	
00012619 F20E 2006 F4               		dc.b $F2, $E, $20, 6, $F4	
0001261E 0A04 2012 FC               		dc.b $A, 4, $20, $12, $FC	
00012623 0200 2027 0C               		dc.b 2, 0, $20, $27, $C	
00012628 04                         SME_RhYYA_1E:	dc.b 4	
00012629 F804 2014 F8               		dc.b $F8, 4, $20, $14, $F8	
0001262E 000C 2016 F0               		dc.b 0, $C, $20, $16, $F0	
00012633 0804 201A 00               		dc.b 8, 4, $20, $1A, 0	
00012638 0000 2028 0C               		dc.b 0, 0, $20, $28, $C	
0001263D 04                         SME_RhYYA_33:	dc.b 4	
0001263E F609 201C F5               		dc.b $F6, 9, $20, $1C, $F5	
00012643 0608 2022 F4               		dc.b 6, 8, $20, $22, $F4	
00012648 0E04 2025 F4               		dc.b $E, 4, $20, $25, $F4	
0001264D FE00 2027 0C               		dc.b $FE, 0, $20, $27, $C	
00012652                            		even
00012652                            		even
00012652                            
00012652                            		include	"_incObj\56 Floating Blocks and Doors.asm"
00012652                            ; ---------------------------------------------------------------------------
00012652                            ; Object 56 - floating blocks (SYZ/SLZ), large doors (LZ)
00012652                            ; ---------------------------------------------------------------------------
00012652                            
00012652                            FloatingBlock:
00012652 7000                       		moveq	#0,d0
00012654 1028 0024                  		move.b	obRoutine(a0),d0
00012658 323B 0000                  		move.w	FBlock_Index(pc,d0.w),d1
0001265C 4EFB 1000                  		jmp	FBlock_Index(pc,d1.w)
00012660                            ; ===========================================================================
00012660 0000                       FBlock_Index:	dc.w FBlock_Main-FBlock_Index
00012662 0000                       		dc.w FBlock_Action-FBlock_Index
00012664                            
00012664 =00000034                  fb_origX:	equ $34		; original x-axis position
00012664 =00000030                  fb_origY:	equ $30		; original y-axis position
00012664 =0000003A                  fb_height:	equ $3A		; total object height
00012664 =0000003C                  fb_type:		equ $3C		; subtype (2nd digit only)
00012664                            
00012664                            FBlock_Var:	; width/2, height/2
00012664 1010                       		dc.b  $10, $10	; subtype 0x/8x
00012666 2020                       		dc.b  $20, $20	; subtype 1x/9x
00012668 1020                       		dc.b  $10, $20	; subtype 2x/Ax
0001266A 201A                       		dc.b  $20, $1A	; subtype 3x/Bx
0001266C 1027                       		dc.b  $10, $27	; subtype 4x/Cx
0001266E 1010                       		dc.b  $10, $10	; subtype 5x/Dx
00012670 0820                       		dc.b	8, $20	; subtype 6x/Ex
00012672 4010                       		dc.b  $40, $10	; subtype 7x/Fx
00012674                            ; ===========================================================================
00012674                            
00012674                            FBlock_Main:	; Routine 0
00012674 5428 0024                  		addq.b	#2,obRoutine(a0)
00012678 217C 0000 0000 0004        		move.l	#Map_FBlock,obMap(a0)
00012680 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012686 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
0001268C 6600                       		bne.s	@notLZ
0001268E 317C 43C4 0002             		move.w	#$43C4,obGfx(a0) ; LZ specific code
00012694                            
00012694                            	@notLZ:
00012694 117C 0004 0001             		move.b	#4,obRender(a0)
0001269A 317C 0180 0018             		move.w	#$180,obPriority(a0)
000126A0 7000                       		moveq	#0,d0
000126A2 1028 0028                  		move.b	obSubtype(a0),d0 ; get subtype
000126A6 E648                       		lsr.w	#3,d0
000126A8 0240 000E                  		andi.w	#$E,d0		; read only the 1st digit
000126AC 45FB 00B6                  		lea	FBlock_Var(pc,d0.w),a2 ; get size data
000126B0 115A 0014                  		move.b	(a2)+,obActWid(a0)
000126B4 1152 0016                  		move.b	(a2),obHeight(a0)
000126B8 E248                       		lsr.w	#1,d0
000126BA 1140 001A                  		move.b	d0,obFrame(a0)
000126BE 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
000126C4 3168 000C 0030             		move.w	obY(a0),fb_origY(a0)
000126CA 7000                       		moveq	#0,d0
000126CC 1012                       		move.b	(a2),d0
000126CE D040                       		add.w	d0,d0
000126D0 3140 003A                  		move.w	d0,fb_height(a0)
000126D4 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
000126DA 6600                       			bne.s	@dontdelete
000126DC 0C68 1BB8 0008             			cmpi.w	#$1BB8,obX(a0)
000126E2 6600                       			bne.s	@notatpos
000126E4 4A38 F7CE                  			tst.b	($FFFFF7CE).w
000126E8 6700                       			beq.s	@dontdelete
000126EA 4EF9 0000 F86E             			jmp	(DeleteObject).l
000126F0                            	@notatpos:
000126F0 4228 0028                  			clr.b	obSubtype(a0)
000126F4 4A38 F7CE                  			tst.b	($FFFFF7CE).w
000126F8 6600                       			bne.s	@dontdelete
000126FA 4EF9 0000 F86E             			jmp	(DeleteObject).l
00012700                            	@dontdelete:
00012700 7000                       		moveq	#0,d0
00012702 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012708 6700                       		beq.s	@stillnotLZ
0001270A 1028 0028                  		move.b	obSubtype(a0),d0 ; SYZ/SLZ specific code
0001270E 0240 000F                  		andi.w	#$F,d0
00012712 5140                       		subq.w	#8,d0
00012714 6500                       		bcs.s	@stillnotLZ
00012716 E548                       		lsl.w	#2,d0
00012718 45F8 FE8A                  		lea	(v_oscillate+$2C).w,a2
0001271C 45F2 0000                  		lea	(a2,d0.w),a2
00012720 4A52                       		tst.w	(a2)
00012722 6A00                       		bpl.s	@stillnotLZ
00012724 0868 0000 0022             		bchg	#0,obStatus(a0)
0001272A                            
0001272A                            	@stillnotLZ:
0001272A 1028 0028                  		move.b	obSubtype(a0),d0
0001272E 6A00                       		bpl.s	FBlock_Action
00012730 0200 000F                  		andi.b	#$F,d0
00012734 1140 003C                  		move.b	d0,fb_type(a0)
00012738 117C 0005 0028             		move.b	#5,obSubtype(a0)
0001273E 0C28 0007 001A             		cmpi.b	#7,obFrame(a0)
00012744 6600                       		bne.s	@chkstate
00012746 117C 000C 0028             		move.b	#$C,obSubtype(a0)
0001274C 317C 0080 003A             		move.w	#$80,fb_height(a0)
00012752                            
00012752                            @chkstate:
00012752 45F8 FC00                  		lea	(v_objstate).w,a2
00012756 7000                       		moveq	#0,d0
00012758 1028 0023                  		move.b	obRespawnNo(a0),d0
0001275C 6700                       		beq.s	FBlock_Action
0001275E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012764 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001276A 6700                       		beq.s	FBlock_Action
0001276C 5228 0028                  		addq.b	#1,obSubtype(a0)
00012770 4268 003A                  		clr.w	fb_height(a0)
00012774                            
00012774                            FBlock_Action:	; Routine 2
00012774 3F28 0008                  		move.w	obX(a0),-(sp)
00012778 7000                       		moveq	#0,d0
0001277A 1028 0028                  		move.b	obSubtype(a0),d0 ; get object subtype
0001277E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012782 D040                       		add.w	d0,d0
00012784 323B 0000                  		move.w	@index(pc,d0.w),d1
00012788 4EBB 1000                  		jsr	@index(pc,d1.w)	; move block subroutines
0001278C 381F                       		move.w	(sp)+,d4
0001278E 4A28 0001                  		tst.b	obRender(a0)
00012792 6A00                       		bpl.s	@chkdel
00012794 7200                       		moveq	#0,d1
00012796 1228 0014                  		move.b	obActWid(a0),d1
0001279A 0641 000B                  		addi.w	#$B,d1
0001279E 7400                       		moveq	#0,d2
000127A0 1428 0016                  		move.b	obHeight(a0),d2
000127A4 3602                       		move.w	d2,d3
000127A6 5243                       		addq.w	#1,d3
000127A8 6100 F5D0                  		bsr.w	SolidObject
000127AC                            
000127AC                            	@chkdel:
000127C8                            		@display:
000127C8 6000 D064                  			bra.w	DisplaySprite
000127CC                            		@chkdel2:
000127CC 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
000127D2 6600                       			bne.s	@delete
000127D4 4A28 0038                  			tst.b	$38(a0)
000127D8 66EE                       			bne.s	@display
000127DA                            		@delete:
000127DA 4EF9 0000 F86E             			jmp	(DeleteObject).l
000127E0                            ; ===========================================================================
000127E0 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
000127E4 0000 0000                  		dc.w @type02-@index, @type03-@index
000127E8 0000 0000                  		dc.w @type04-@index, @type05-@index
000127EC 0000 0000                  		dc.w @type06-@index, @type07-@index
000127F0 0000 0000                  		dc.w @type08-@index, @type09-@index
000127F4 0000 0000                  		dc.w @type0A-@index, @type0B-@index
000127F8 0000 0000                  		dc.w @type0C-@index, @type0D-@index
000127FC                            ; ===========================================================================
000127FC                            
000127FC                            @type00:
000127FC                            ; doesn't move
000127FC 4E75                       		rts	
000127FE                            ; ===========================================================================
000127FE                            
000127FE                            @type01:
000127FE                            ; moves side-to-side
000127FE 323C 0040                  		move.w	#$40,d1		; set move distance
00012802 7000                       		moveq	#0,d0
00012804 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
00012808 6000                       		bra.s	@moveLR
0001280A                            ; ===========================================================================
0001280A                            
0001280A                            @type02:
0001280A                            ; moves side-to-side
0001280A 323C 0080                  		move.w	#$80,d1		; set move distance
0001280E 7000                       		moveq	#0,d0
00012810 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
00012814                            
00012814                            	@moveLR:
00012814 0828 0000 0022             		btst	#0,obStatus(a0)
0001281A 6700                       		beq.s	@noflip
0001281C 4440                       		neg.w	d0
0001281E D041                       		add.w	d1,d0
00012820                            
00012820                            	@noflip:
00012820 3228 0034                  		move.w	fb_origX(a0),d1
00012824 9240                       		sub.w	d0,d1
00012826 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
0001282A 4E75                       		rts	
0001282C                            ; ===========================================================================
0001282C                            
0001282C                            @type03:
0001282C                            ; moves up/down
0001282C 323C 0040                  		move.w	#$40,d1		; set move distance
00012830 7000                       		moveq	#0,d0
00012832 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
00012836 6000                       		bra.s	@moveUD
00012838                            ; ===========================================================================
00012838                            
00012838                            @type04:
00012838                            ; moves up/down
00012838 323C 0080                  		move.w	#$80,d1		; set move distance
0001283C 7000                       		moveq	#0,d0
0001283E 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
00012842                            
00012842                            	@moveUD:
00012842 0828 0000 0022             		btst	#0,obStatus(a0)
00012848 6700                       		beq.s	@noflip04
0001284A 4440                       		neg.w	d0
0001284C D041                       		add.w	d1,d0
0001284E                            
0001284E                            	@noflip04:
0001284E 3228 0030                  		move.w	fb_origY(a0),d1
00012852 9240                       		sub.w	d0,d1
00012854 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
00012858 4E75                       		rts	
0001285A                            ; ===========================================================================
0001285A                            
0001285A                            @type05:
0001285A                            ; moves up when a switch is pressed
0001285A 4A28 0038                  		tst.b	$38(a0)
0001285E 6600                       		bne.s	@loc_104A4
00012860 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
00012866 6600                       		bne.s	@aaa		; if not, branch
00012868 0C28 0003 003C             		cmpi.b	#3,fb_type(a0)
0001286E 6600                       		bne.s	@aaa
00012870 4238 F7C9                  		clr.b	(f_wtunnelallow).w
00012874 3038 D008                  		move.w	(v_player+obX).w,d0
00012878 B068 0008                  		cmp.w	obX(a0),d0
0001287C 6400                       		bcc.s	@aaa
0001287E 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w
00012884                            
00012884                            	@aaa:
00012884 45F8 F7E0                  		lea	(f_switch).w,a2
00012888 7000                       		moveq	#0,d0
0001288A 1028 003C                  		move.b	fb_type(a0),d0
0001288E 0832 0000 0000             		btst	#0,(a2,d0.w)
00012894 6700                       		beq.s	@loc_104AE
00012896 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
0001289C 6600                       		bne.s	@loc_1049E	; if not, branch
0001289E 0C00 0003                  		cmpi.b	#3,d0
000128A2 6600                       		bne.s	@loc_1049E
000128A4 4238 F7C9                  		clr.b	(f_wtunnelallow).w
000128A8                            
000128A8                            @loc_1049E:
000128A8 117C 0001 0038             		move.b	#1,$38(a0)
000128AE                            
000128AE                            @loc_104A4:
000128AE 4A68 003A                  		tst.w	fb_height(a0)
000128B2 6700                       		beq.s	@loc_104C8
000128B4 5568 003A                  		subq.w	#2,fb_height(a0)
000128B8                            
000128B8                            @loc_104AE:
000128B8 3028 003A                  		move.w	fb_height(a0),d0
000128BC 0828 0000 0022             		btst	#0,$22(a0)
000128C2 6700                       		beq.s	@loc_104BC
000128C4 4440                       		neg.w	d0
000128C6                            
000128C6                            @loc_104BC:
000128C6 3228 0030                  		move.w	fb_origY(a0),d1
000128CA D240                       		add.w	d0,d1
000128CC 3141 000C                  		move.w	d1,obY(a0)
000128D0 4E75                       		rts	
000128D2                            ; ===========================================================================
000128D2                            
000128D2                            @loc_104C8:
000128D2 5228 0028                  		addq.b	#1,$28(a0)
000128D6 4228 0038                  		clr.b	$38(a0)
000128DA 45F8 FC00                  		lea	(v_objstate).w,a2
000128DE 7000                       		moveq	#0,d0
000128E0 1028 0023                  		move.b	obRespawnNo(a0),d0
000128E4 67D2                       		beq.s	@loc_104AE
000128E6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000128EC 60CA                       		bra.s	@loc_104AE
000128EE                            ; ===========================================================================
000128EE                            
000128EE                            @type06:
000128EE 4A28 0038                  		tst.b	$38(a0)
000128F2 6600                       		bne.s	@loc_10500
000128F4 45F8 F7E0                  		lea	(f_switch).w,a2
000128F8 7000                       		moveq	#0,d0
000128FA 1028 003C                  		move.b	fb_type(a0),d0
000128FE 4A32 0000                  		tst.b	(a2,d0.w)
00012902 6A00                       		bpl.s	@loc_10512
00012904 117C 0001 0038             		move.b	#1,$38(a0)
0001290A                            
0001290A                            @loc_10500:
0001290A 7000                       		moveq	#0,d0
0001290C 1028 0016                  		move.b	obHeight(a0),d0
00012910 D040                       		add.w	d0,d0
00012912 B068 003A                  		cmp.w	fb_height(a0),d0
00012916 6700                       		beq.s	@loc_1052C
00012918 5468 003A                  		addq.w	#2,fb_height(a0)
0001291C                            
0001291C                            @loc_10512:
0001291C 3028 003A                  		move.w	fb_height(a0),d0
00012920 0828 0000 0022             		btst	#0,obStatus(a0)
00012926 6700                       		beq.s	@loc_10520
00012928 4440                       		neg.w	d0
0001292A                            
0001292A                            @loc_10520:
0001292A 3228 0030                  		move.w	fb_origY(a0),d1
0001292E D240                       		add.w	d0,d1
00012930 3141 000C                  		move.w	d1,obY(a0)
00012934 4E75                       		rts	
00012936                            ; ===========================================================================
00012936                            
00012936                            @loc_1052C:
00012936 5328 0028                  		subq.b	#1,obSubtype(a0)
0001293A 4228 0038                  		clr.b	$38(a0)
0001293E 45F8 FC00                  		lea	(v_objstate).w,a2
00012942 7000                       		moveq	#0,d0
00012944 1028 0023                  		move.b	obRespawnNo(a0),d0
00012948 67D2                       		beq.s	@loc_10512
0001294A 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00012950 60CA                       		bra.s	@loc_10512
00012952                            ; ===========================================================================
00012952                            
00012952                            @type07:
00012952 4A28 0038                  		tst.b	$38(a0)
00012956 6600                       		bne.s	@loc_1055E
00012958 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch number $F been pressed?
0001295C 6700                       		beq.s	@locret_10578
0001295E 117C 0001 0038             		move.b	#1,$38(a0)
00012964 4268 003A                  		clr.w	fb_height(a0)
00012968                            
00012968                            @loc_1055E:
00012968 5268 0008                  		addq.w	#1,obX(a0)
0001296C 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
00012972 5268 003A                  		addq.w	#1,fb_height(a0)
00012976 0C68 0380 003A             		cmpi.w	#$380,fb_height(a0)
0001297C 6600                       		bne.s	@locret_10578
0001297E 11FC 0001 F7CE             			move.b	#1,($FFFFF7CE).w
00012984 4228 0038                  			clr.b	$38(a0)
00012988 4228 0028                  		clr.b	obSubtype(a0)
0001298C                            
0001298C                            @locret_10578:
0001298C 4E75                       		rts	
0001298E                            ; ===========================================================================
0001298E                            
0001298E                            @type0C:
0001298E 4A28 0038                  		tst.b	$38(a0)
00012992 6600                       		bne.s	@loc_10598
00012994 45F8 F7E0                  		lea	(f_switch).w,a2
00012998 7000                       		moveq	#0,d0
0001299A 1028 003C                  		move.b	fb_type(a0),d0
0001299E 0832 0000 0000             		btst	#0,(a2,d0.w)
000129A4 6700                       		beq.s	@loc_105A2
000129A6 117C 0001 0038             		move.b	#1,$38(a0)
000129AC                            
000129AC                            @loc_10598:
000129AC 4A68 003A                  		tst.w	fb_height(a0)
000129B0 6700                       		beq.s	@loc_105C0
000129B2 5568 003A                  		subq.w	#2,fb_height(a0)
000129B6                            
000129B6                            @loc_105A2:
000129B6 3028 003A                  		move.w	fb_height(a0),d0
000129BA 0828 0000 0022             		btst	#0,obStatus(a0)
000129C0 6700                       		beq.s	@loc_105B4
000129C2 4440                       		neg.w	d0
000129C4 0640 0080                  		addi.w	#$80,d0
000129C8                            
000129C8                            @loc_105B4:
000129C8 3228 0034                  		move.w	fb_origX(a0),d1
000129CC D240                       		add.w	d0,d1
000129CE 3141 0008                  		move.w	d1,obX(a0)
000129D2 4E75                       		rts	
000129D4                            ; ===========================================================================
000129D4                            
000129D4                            @loc_105C0:
000129D4 5228 0028                  		addq.b	#1,obSubtype(a0)
000129D8 4228 0038                  		clr.b	$38(a0)
000129DC 45F8 FC00                  		lea	(v_objstate).w,a2
000129E0 7000                       		moveq	#0,d0
000129E2 1028 0023                  		move.b	obRespawnNo(a0),d0
000129E6 67CE                       		beq.s	@loc_105A2
000129E8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000129EE 60C6                       		bra.s	@loc_105A2
000129F0                            ; ===========================================================================
000129F0                            
000129F0                            @type0D:
000129F0 4A28 0038                  		tst.b	$38(a0)
000129F4 6600                       		bne.s	@loc_105F8
000129F6 45F8 F7E0                  		lea	(f_switch).w,a2
000129FA 7000                       		moveq	#0,d0
000129FC 1028 003C                  		move.b	fb_type(a0),d0
00012A00 4A32 0000                  		tst.b	(a2,d0.w)
00012A04 6A00                       		bpl.s	@wtf
00012A06 117C 0001 0038             		move.b	#1,$38(a0)
00012A0C                            
00012A0C                            @loc_105F8:
00012A0C 303C 0080                  		move.w	#$80,d0
00012A10 B068 003A                  		cmp.w	fb_height(a0),d0
00012A14 6700                       		beq.s	@loc_10624
00012A16 5468 003A                  		addq.w	#2,fb_height(a0)
00012A1A                            
00012A1A                            @wtf:
00012A1A 3028 003A                  		move.w	fb_height(a0),d0
00012A1E 0828 0000 0022             		btst	#0,obStatus(a0)
00012A24 6700                       		beq.s	@loc_10618
00012A26 4440                       		neg.w	d0
00012A28 0640 0080                  		addi.w	#$80,d0
00012A2C                            
00012A2C                            @loc_10618:
00012A2C 3228 0034                  		move.w	fb_origX(a0),d1
00012A30 D240                       		add.w	d0,d1
00012A32 3141 0008                  		move.w	d1,obX(a0)
00012A36 4E75                       		rts	
00012A38                            ; ===========================================================================
00012A38                            
00012A38                            @loc_10624:
00012A38 5328 0028                  		subq.b	#1,obSubtype(a0)
00012A3C 4228 0038                  		clr.b	$38(a0)
00012A40 45F8 FC00                  		lea	(v_objstate).w,a2
00012A44 7000                       		moveq	#0,d0
00012A46 1028 0023                  		move.b	obRespawnNo(a0),d0
00012A4A 67CE                       		beq.s	@wtf
00012A4C 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00012A52 60C6                       		bra.s	@wtf
00012A54                            ; ===========================================================================
00012A54                            
00012A54                            @type08:
00012A54 323C 0010                  		move.w	#$10,d1
00012A58 7000                       		moveq	#0,d0
00012A5A 1038 FE88                  		move.b	(v_oscillate+$2A).w,d0
00012A5E E248                       		lsr.w	#1,d0
00012A60 3638 FE8A                  		move.w	(v_oscillate+$2C).w,d3
00012A64 6000                       		bra.s	@square
00012A66                            ; ===========================================================================
00012A66                            
00012A66                            @type09:
00012A66 323C 0030                  		move.w	#$30,d1
00012A6A 7000                       		moveq	#0,d0
00012A6C 1038 FE8C                  		move.b	(v_oscillate+$2E).w,d0
00012A70 3638 FE8E                  		move.w	(v_oscillate+$30).w,d3
00012A74 6000                       		bra.s	@square
00012A76                            ; ===========================================================================
00012A76                            
00012A76                            @type0A:
00012A76 323C 0050                  		move.w	#$50,d1
00012A7A 7000                       		moveq	#0,d0
00012A7C 1038 FE90                  		move.b	(v_oscillate+$32).w,d0
00012A80 3638 FE92                  		move.w	(v_oscillate+$34).w,d3
00012A84 6000                       		bra.s	@square
00012A86                            ; ===========================================================================
00012A86                            
00012A86                            @type0B:
00012A86 323C 0070                  		move.w	#$70,d1
00012A8A 7000                       		moveq	#0,d0
00012A8C 1038 FE94                  		move.b	(v_oscillate+$36).w,d0
00012A90 3638 FE96                  		move.w	(v_oscillate+$38).w,d3
00012A94                            
00012A94                            @square:
00012A94 4A43                       		tst.w	d3
00012A96 6600                       		bne.s	@loc_1068E
00012A98 5228 0022                  		addq.b	#1,obStatus(a0)
00012A9C 0228 0003 0022             		andi.b	#3,obStatus(a0)
00012AA2                            
00012AA2                            @loc_1068E:
00012AA2 1428 0022                  		move.b	obStatus(a0),d2
00012AA6 0202 0003                  		andi.b	#3,d2
00012AAA 6600                       		bne.s	@loc_106AE
00012AAC 9041                       		sub.w	d1,d0
00012AAE D068 0034                  		add.w	fb_origX(a0),d0
00012AB2 3140 0008                  		move.w	d0,obX(a0)
00012AB6 4441                       		neg.w	d1
00012AB8 D268 0030                  		add.w	fb_origY(a0),d1
00012ABC 3141 000C                  		move.w	d1,obY(a0)
00012AC0 4E75                       		rts	
00012AC2                            ; ===========================================================================
00012AC2                            
00012AC2                            @loc_106AE:
00012AC2 5302                       		subq.b	#1,d2
00012AC4 6600                       		bne.s	@loc_106CC
00012AC6 5341                       		subq.w	#1,d1
00012AC8 9041                       		sub.w	d1,d0
00012ACA 4440                       		neg.w	d0
00012ACC D068 0030                  		add.w	fb_origY(a0),d0
00012AD0 3140 000C                  		move.w	d0,obY(a0)
00012AD4 5241                       		addq.w	#1,d1
00012AD6 D268 0034                  		add.w	fb_origX(a0),d1
00012ADA 3141 0008                  		move.w	d1,obX(a0)
00012ADE 4E75                       		rts	
00012AE0                            ; ===========================================================================
00012AE0                            
00012AE0                            @loc_106CC:
00012AE0 5302                       		subq.b	#1,d2
00012AE2 6600                       		bne.s	@loc_106EA
00012AE4 5341                       		subq.w	#1,d1
00012AE6 9041                       		sub.w	d1,d0
00012AE8 4440                       		neg.w	d0
00012AEA D068 0034                  		add.w	fb_origX(a0),d0
00012AEE 3140 0008                  		move.w	d0,obX(a0)
00012AF2 5241                       		addq.w	#1,d1
00012AF4 D268 0030                  		add.w	fb_origY(a0),d1
00012AF8 3141 000C                  		move.w	d1,obY(a0)
00012AFC 4E75                       		rts	
00012AFE                            ; ===========================================================================
00012AFE                            
00012AFE                            @loc_106EA:
00012AFE 9041                       		sub.w	d1,d0
00012B00 D068 0030                  		add.w	fb_origY(a0),d0
00012B04 3140 000C                  		move.w	d0,obY(a0)
00012B08 4441                       		neg.w	d1
00012B0A D268 0034                  		add.w	fb_origX(a0),d1
00012B0E 3141 0008                  		move.w	d1,obX(a0)
00012B12 4E75                       		rts	
00012B12 4E75                       		rts	
00012B14                            Map_FBlock:	include	"_maps\Floating Blocks and Doors.asm"
00012B14                            ; ---------------------------------------------------------------------------
00012B14                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00012B14                            ; ---------------------------------------------------------------------------
00012B14                            Map_FBlock_internal:
00012B14 0000                       		dc.w @syz1x1-Map_FBlock_internal
00012B16 0000                       		dc.w @syz2x2-Map_FBlock_internal
00012B18 0000                       		dc.w @syz1x2-Map_FBlock_internal
00012B1A 0000                       		dc.w @syzrect2x2-Map_FBlock_internal
00012B1C 0000                       		dc.w @syzrect1x3-Map_FBlock_internal
00012B1E 0000                       		dc.w @slz-Map_FBlock_internal
00012B20 0000                       		dc.w @lzvert-Map_FBlock_internal
00012B22 0000                       		dc.w @lzhoriz-Map_FBlock_internal
00012B24 01                         @syz1x1:	dc.b 1
00012B25 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0 ; SYZ - 1x1 square block
00012B2A 04                         @syz2x2:	dc.b 4
00012B2B E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0 ; SYZ - 2x2 square blocks
00012B30 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00012B35 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00012B3A 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00012B3F 02                         @syz1x2:	dc.b 2
00012B40 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0 ; SYZ - 1x2 square blocks
00012B45 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00012B4A 04                         @syzrect2x2:	dc.b 4
00012B4B E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0 ; SYZ - 2x2 rectangular blocks
00012B50 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00012B55 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00012B5A 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00012B5F 03                         @syzrect1x3:	dc.b 3
00012B60 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0 ; SYZ - 1x3 rectangular blocks
00012B65 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00012B6A 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00012B6F 01                         @slz:		dc.b 1
00012B70 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0 ; SLZ - 1x1 square block
00012B75 02                         @lzvert:	dc.b 2
00012B76 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8	; LZ - small vertical door
00012B7B 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012B80 04                         @lzhoriz:	dc.b 4
00012B81 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0 ; LZ - large horizontal door
00012B86 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00012B8B F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00012B90 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00012B96 00                         		even
00012B96 00                         		even
00012B96                            
00012B96                            		include	"_incObj\57 Spiked Ball and Chain.asm"
00012B96                            ; ---------------------------------------------------------------------------
00012B96                            ; Object 57 - spiked balls (SYZ, LZ)
00012B96                            ; ---------------------------------------------------------------------------
00012B96                            
00012B96                            SpikeBall:
00012B96 7000                       		moveq	#0,d0
00012B98 1028 0024                  		move.b	obRoutine(a0),d0
00012B9C 323B 0000                  		move.w	SBall_Index(pc,d0.w),d1
00012BA0 4EFB 1000                  		jmp	SBall_Index(pc,d1.w)
00012BA4                            ; ===========================================================================
00012BA4 0000                       SBall_Index:	dc.w SBall_Main-SBall_Index
00012BA6 0000                       		dc.w SBall_Move-SBall_Index
00012BA8 0000                       		dc.w SBall_Display-SBall_Index
00012BAA                            
00012BAA =00000029                  sball_childs:	equ $29		; number of child objects (1 byte)
00012BAA                            		; $30-$37	; object RAM numbers of childs (1 byte each)
00012BAA =0000003A                  sball_origX:	equ $3A		; centre x-axis position (2 bytes)
00012BAA =00000038                  sball_origY:	equ $38		; centre y-axis position (2 bytes)
00012BAA =0000003C                  sball_radius:	equ $3C		; radius (1 byte)
00012BAA =0000003E                  sball_speed:	equ $3E		; rate of spin (2 bytes)
00012BAA                            ; ===========================================================================
00012BAA                            
00012BAA                            SBall_Main:	; Routine 0
00012BAA 5428 0024                  		addq.b	#2,obRoutine(a0)
00012BAE 217C 0000 0000 0004        		move.l	#Map_SBall,obMap(a0)
00012BB6 317C 03BA 0002             		move.w	#$3BA,obGfx(a0)
00012BBC 117C 0004 0001             		move.b	#4,obRender(a0)
00012BC2 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012BC8 117C 0008 0014             		move.b	#8,obActWid(a0)
00012BCE 3168 0008 003A             		move.w	obX(a0),sball_origX(a0)
00012BD4 3168 000C 0038             		move.w	obY(a0),sball_origY(a0)
00012BDA 117C 0098 0020             		move.b	#$98,obColType(a0) ; SYZ specific code (chain hurts Sonic)
00012BE0 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012BE6 6600                       		bne.s	@notlz
00012BE8                            
00012BE8 117C 0000 0020             		move.b	#0,obColType(a0) ; LZ specific code (chain doesn't hurt)
00012BEE 317C 0310 0002             		move.w	#$310,obGfx(a0)
00012BF4 217C 0000 0000 0004        		move.l	#Map_SBall2,obMap(a0)
00012BFC                            
00012BFC                            	@notlz:
00012BFC 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012C00 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012C04 4881                       		ext.w	d1
00012C06 E741                       		asl.w	#3,d1		; multiply by 8
00012C08 3141 003E                  		move.w	d1,sball_speed(a0) ; set object twirl speed
00012C0C 1028 0022                  		move.b	obStatus(a0),d0
00012C10 E418                       		ror.b	#2,d0
00012C12 0200 00C0                  		andi.b	#$C0,d0
00012C16 1140 0026                  		move.b	d0,obAngle(a0)
00012C1A 45E8 0029                  		lea	sball_childs(a0),a2
00012C1E 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012C22 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00012C26 14FC 0000                  		move.b	#0,(a2)+
00012C2A 3601                       		move.w	d1,d3
00012C2C E94B                       		lsl.w	#4,d3
00012C2E 1143 003C                  		move.b	d3,sball_radius(a0)
00012C32 5341                       		subq.w	#1,d1		; set chain length (type-1)
00012C34 6500                       		bcs.s	@fail
00012C36 0828 0003 0028             		btst	#3,obSubtype(a0)
00012C3C 6700                       		beq.s	@makechain
00012C3E 5341                       		subq.w	#1,d1
00012C40 6500                       		bcs.s	@fail
00012C42                            
00012C42                            @makechain:
00012C42 6100 D184                  		bsr.w	FindFreeObj
00012C46 6600                       		bne.s	@fail
00012C48 5228 0029                  		addq.b	#1,sball_childs(a0) ; increment child object counter
00012C4C 3A09                       		move.w	a1,d5		; get child object RAM address
00012C4E 0445 D000                  		subi.w	#$D000,d5	; subtract $D000
00012C52 EC4D                       		lsr.w	#6,d5		; divide by $40
00012C54 0245 007F                  		andi.w	#$7F,d5
00012C58 14C5                       		move.b	d5,(a2)+	; copy child RAM number
00012C5A 137C 0004 0024             		move.b	#4,obRoutine(a1)
00012C60 1290                       		move.b	0(a0),0(a1)
00012C62 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00012C68 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00012C6E 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00012C74 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00012C7A 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00012C80 1368 0020 0020             		move.b	obColType(a0),obColType(a1)
00012C86 0403 0010                  		subi.b	#$10,d3
00012C8A 1343 003C                  		move.b	d3,sball_radius(a1)
00012C8E 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012C94 6600                       		bne.s	@notlzagain
00012C96                            
00012C96 4A03                       		tst.b	d3
00012C98 6600                       		bne.s	@notlzagain
00012C9A 137C 0002 001A             		move.b	#2,obFrame(a1)	; use different frame for LZ chain
00012CA0                            
00012CA0                            	@notlzagain:
00012CA0 51C9 FFA0                  		dbf	d1,@makechain ; repeat for length of chain
00012CA4                            
00012CA4                            	@fail:
00012CA4 3A08                       		move.w	a0,d5
00012CA6 0445 D000                  		subi.w	#$D000,d5
00012CAA EC4D                       		lsr.w	#6,d5
00012CAC 0245 007F                  		andi.w	#$7F,d5
00012CB0 14C5                       		move.b	d5,(a2)+
00012CB2 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012CB8 6600                       		bne.s	SBall_Move
00012CBA                            
00012CBA 117C 008B 0020             		move.b	#$8B,obColType(a0) ; if yes, make last spikeball larger
00012CC0 117C 0001 001A             		move.b	#1,obFrame(a0)	; use different	frame
00012CC6                            
00012CC6                            SBall_Move:	; Routine 2
00012CC6 6100 0000                  		bsr.w	@movesub
00012CCA 6000 0000                  		bra.w	@chkdel
00012CCE                            ; ===========================================================================
00012CCE                            
00012CCE                            @movesub:
00012CCE 3028 003E                  		move.w	sball_speed(a0),d0
00012CD2 D168 0026                  		add.w	d0,obAngle(a0)
00012CD6 1028 0026                  		move.b	obAngle(a0),d0
00012CDA 4EB9 0000 3D28             		jsr	(CalcSine).l
00012CE0 3428 0038                  		move.w	sball_origY(a0),d2
00012CE4 3628 003A                  		move.w	sball_origX(a0),d3
00012CE8 45E8 0029                  		lea	sball_childs(a0),a2
00012CEC 7C00                       		moveq	#0,d6
00012CEE 1C1A                       		move.b	(a2)+,d6
00012CF0                            
00012CF0                            	@loop:
00012CF0 7800                       		moveq	#0,d4
00012CF2 181A                       		move.b	(a2)+,d4
00012CF4 ED4C                       		lsl.w	#6,d4
00012CF6 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
00012CFC 2244                       		movea.l	d4,a1
00012CFE 7800                       		moveq	#0,d4
00012D00 1829 003C                  		move.b	sball_radius(a1),d4
00012D04 2A04                       		move.l	d4,d5
00012D06 C9C0                       		muls.w	d0,d4
00012D08 E084                       		asr.l	#8,d4
00012D0A CBC1                       		muls.w	d1,d5
00012D0C E085                       		asr.l	#8,d5
00012D0E D842                       		add.w	d2,d4
00012D10 DA43                       		add.w	d3,d5
00012D12 3344 000C                  		move.w	d4,obY(a1)
00012D16 3345 0008                  		move.w	d5,obX(a1)
00012D1A 51CE FFD4                  		dbf	d6,@loop
00012D1E 4E75                       		rts	
00012D20                            ; ===========================================================================
00012D20                            
00012D20                            @chkdel:
00012D3E 6000 CAEE                  		bra.w	DisplaySprite
00012D42                            ; ===========================================================================
00012D42                            
00012D42                            @delete:
00012D42 7400                       		moveq	#0,d2
00012D44 45E8 0029                  		lea	sball_childs(a0),a2
00012D48 141A                       		move.b	(a2)+,d2
00012D4A                            
00012D4A                            	@deleteloop:
00012D4A 7000                       		moveq	#0,d0
00012D4C 101A                       		move.b	(a2)+,d0
00012D4E ED48                       		lsl.w	#6,d0
00012D50 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00012D56 2240                       		movea.l	d0,a1
00012D58 6100 CB16                  		bsr.w	DeleteChild
00012D5C 51CA FFEC                  		dbf	d2,@deleteloop ; delete all pieces of	chain
00012D60                            
00012D60 4E75                       		rts	
00012D62                            ; ===========================================================================
00012D62                            
00012D62                            SBall_Display:	; Routine 4
00012D62 6000 CACA                  		bra.w	DisplaySprite
00012D62 6000 CACA                  		bra.w	DisplaySprite
00012D66                            Map_SBall:	include	"_maps\Spiked Ball and Chain (SYZ).asm"
00012D66                            ; ---------------------------------------------------------------------------
00012D66                            ; Sprite mappings - chain of spiked balls (SYZ)
00012D66                            ; ---------------------------------------------------------------------------
00012D66                            Map_SBall_internal:
00012D66 0000                       		dc.w @0-Map_SBall_internal
00012D68 01                         @0:		dc.b 1
00012D69 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00012D6E                            		even
00012D6E                            		even
00012D6E                            Map_SBall2:	include	"_maps\Spiked Ball and Chain (LZ).asm"
00012D6E                            ; ---------------------------------------------------------------------------
00012D6E                            ; Sprite mappings - spiked ball	on a chain (LZ)
00012D6E                            ; ---------------------------------------------------------------------------
00012D6E                            Map_SBall2_internal:
00012D6E 0000                       		dc.w @chain-Map_SBall2_internal
00012D70 0000                       		dc.w @spikeball-Map_SBall2_internal
00012D72 0000                       		dc.w @base-Map_SBall2_internal
00012D74 01                         @chain:		dc.b 1
00012D75 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; chain link
00012D7A 01                         @spikeball:	dc.b 1
00012D7B F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0	; spikeball
00012D80 01                         @base:		dc.b 1
00012D81 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8 ; wall attachment
00012D86                            		even
00012D86                            		even
00012D86                            		include	"_incObj\58 Big Spiked Ball.asm"
00012D86                            ; ---------------------------------------------------------------------------
00012D86                            ; Object 58 - giant spiked balls (SYZ)
00012D86                            ; ---------------------------------------------------------------------------
00012D86                            
00012D86                            BigSpikeBall:
00012D86 7000                       		moveq	#0,d0
00012D88 1028 0024                  		move.b	obRoutine(a0),d0
00012D8C 323B 0000                  		move.w	BBall_Index(pc,d0.w),d1
00012D90 4EFB 1000                  		jmp	BBall_Index(pc,d1.w)
00012D94                            ; ===========================================================================
00012D94 0000                       BBall_Index:	dc.w BBall_Main-BBall_Index
00012D96 0000                       		dc.w BBall_Move-BBall_Index
00012D98                            
00012D98 =0000003A                  bball_origX:	equ $3A		; original x-axis position
00012D98 =00000038                  bball_origY:	equ $38		; original y-axis position
00012D98 =0000003C                  bball_radius:	equ $3C		; radius of circle
00012D98 =0000003E                  bball_speed:	equ $3E		; speed
00012D98                            ; ===========================================================================
00012D98                            
00012D98                            BBall_Main:	; Routine 0
00012D98 5428 0024                  		addq.b	#2,obRoutine(a0)
00012D9C 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0)
00012DA4 317C 0396 0002             		move.w	#$396,obGfx(a0)
00012DAA 117C 0004 0001             		move.b	#4,obRender(a0)
00012DB0 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012DB6 117C 0018 0014             		move.b	#$18,obActWid(a0)
00012DBC 3168 0008 003A             		move.w	obX(a0),bball_origX(a0)
00012DC2 3168 000C 0038             		move.w	obY(a0),bball_origY(a0)
00012DC8 117C 0086 0020             		move.b	#$86,obColType(a0)
00012DCE 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012DD2 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012DD6 4881                       		ext.w	d1
00012DD8 E741                       		asl.w	#3,d1		; multiply by 8
00012DDA 3141 003E                  		move.w	d1,bball_speed(a0) ; set object speed
00012DDE 1028 0022                  		move.b	obStatus(a0),d0
00012DE2 E418                       		ror.b	#2,d0
00012DE4 0200 00C0                  		andi.b	#$C0,d0
00012DE8 1140 0026                  		move.b	d0,obAngle(a0)
00012DEC 117C 0050 003C             		move.b	#$50,bball_radius(a0) ; set radius of circle motion
00012DF2                            
00012DF2                            BBall_Move:	; Routine 2
00012DF2 7000                       		moveq	#0,d0
00012DF4 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00012DF8 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00012DFC D040                       		add.w	d0,d0
00012DFE 323B 0000                  		move.w	@index(pc,d0.w),d1
00012E02 4EBB 1000                  		jsr	@index(pc,d1.w)
00012E24 6000 CA08                  		bra.w	DisplaySprite
00012E28                            ; ===========================================================================
00012E28 0000                       @index:		dc.w @type00-@index
00012E2A 0000                       		dc.w @type01-@index
00012E2C 0000                       		dc.w @type02-@index
00012E2E 0000                       		dc.w @type03-@index
00012E30                            ; ===========================================================================
00012E30                            
00012E30                            @type00:
00012E30 4E75                       		rts	
00012E32                            ; ===========================================================================
00012E32                            
00012E32                            @type01:
00012E32 323C 0060                  		move.w	#$60,d1
00012E36 7000                       		moveq	#0,d0
00012E38 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012E3C 0828 0000 0022             		btst	#0,obStatus(a0)
00012E42 6700                       		beq.s	@noflip1
00012E44 4440                       		neg.w	d0
00012E46 D041                       		add.w	d1,d0
00012E48                            
00012E48                            	@noflip1:
00012E48 3228 003A                  		move.w	bball_origX(a0),d1
00012E4C 9240                       		sub.w	d0,d1
00012E4E 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
00012E52 4E75                       		rts	
00012E54                            ; ===========================================================================
00012E54                            
00012E54                            @type02:
00012E54 323C 0060                  		move.w	#$60,d1
00012E58 7000                       		moveq	#0,d0
00012E5A 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012E5E 0828 0000 0022             		btst	#0,obStatus(a0)
00012E64 6700                       		beq.s	@noflip2
00012E66 4440                       		neg.w	d0
00012E68 0640 0080                  		addi.w	#$80,d0
00012E6C                            
00012E6C                            	@noflip2:
00012E6C 3228 0038                  		move.w	bball_origY(a0),d1
00012E70 9240                       		sub.w	d0,d1
00012E72 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
00012E76 4E75                       		rts	
00012E78                            ; ===========================================================================
00012E78                            
00012E78                            @type03:
00012E78 3028 003E                  		move.w	bball_speed(a0),d0
00012E7C D168 0026                  		add.w	d0,obAngle(a0)
00012E80 1028 0026                  		move.b	obAngle(a0),d0
00012E84 4EB9 0000 3D28             		jsr	(CalcSine).l
00012E8A 3428 0038                  		move.w	bball_origY(a0),d2
00012E8E 3628 003A                  		move.w	bball_origX(a0),d3
00012E92 7800                       		moveq	#0,d4
00012E94 1828 003C                  		move.b	bball_radius(a0),d4
00012E98 2A04                       		move.l	d4,d5
00012E9A C9C0                       		muls.w	d0,d4
00012E9C E084                       		asr.l	#8,d4
00012E9E CBC1                       		muls.w	d1,d5
00012EA0 E085                       		asr.l	#8,d5
00012EA2 D842                       		add.w	d2,d4
00012EA4 DA43                       		add.w	d3,d5
00012EA6 3144 000C                  		move.w	d4,obY(a0)	; move object circularly
00012EAA 3145 0008                  		move.w	d5,obX(a0)
00012EAE 4E75                       		rts	
00012EAE 4E75                       		rts	
00012EB0                            Map_BBall:	include	"_maps\Big Spiked Ball.asm"
00012EB0                            ; --------------------------------------------------------------------------------
00012EB0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00012EB0                            ; --------------------------------------------------------------------------------
00012EB0                            
00012EB0                            SME_u_DKx:	
00012EB0 0000 0000                  		dc.w SME_u_DKx_6-SME_u_DKx, SME_u_DKx_20-SME_u_DKx	
00012EB4 0000                       		dc.w SME_u_DKx_26-SME_u_DKx	
00012EB6 05                         SME_u_DKx_6:	dc.b 5	
00012EB7 E804 0000 F8               		dc.b $E8, 4, 0, 0, $F8	
00012EBC F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0	
00012EC1 F801 0012 E8               		dc.b $F8, 1, 0, $12, $E8	
00012EC6 F801 0014 10               		dc.b $F8, 1, 0, $14, $10	
00012ECB 1004 0016 F8               		dc.b $10, 4, 0, $16, $F8	
00012ED0 01                         SME_u_DKx_20:	dc.b 1	
00012ED1 F805 0020 F8               		dc.b $F8, 5, 0, $20, $F8	
00012ED6 02                         SME_u_DKx_26:	dc.b 2	
00012ED7 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0	
00012EDC E80D 1018 F0               		dc.b $E8, $D, $10, $18, $F0	
00012EE2 00                         		even
00012EE2 00                         		even
00012EE2                            		include	"_incObj\59 SLZ Elevators.asm"
00012EE2                            ; ---------------------------------------------------------------------------
00012EE2                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00012EE2                            ; ---------------------------------------------------------------------------
00012EE2                            
00012EE2                            Elevator:
00012EE2 7000                       		moveq	#0,d0
00012EE4 1028 0024                  		move.b	obRoutine(a0),d0
00012EE8 323B 0000                  		move.w	Elev_Index(pc,d0.w),d1
00012EEC 4EBB 1000                  		jsr	Elev_Index(pc,d1.w)
00012F0E 6000 C91E                  		bra.w	DisplaySprite
00012F12                            ; ===========================================================================
00012F12 0000                       Elev_Index:	dc.w Elev_Main-Elev_Index
00012F14 0000                       		dc.w Elev_Platform-Elev_Index
00012F16 0000                       		dc.w Elev_Action-Elev_Index
00012F18 0000                       		dc.w Elev_MakeMulti-Elev_Index
00012F1A                            
00012F1A =00000032                  elev_origX:	equ $32		; original x-axis position
00012F1A =00000030                  elev_origY:	equ $30		; original y-axis position
00012F1A =0000003C                  elev_dist:	equ $3C		; distance to move (2 bytes)
00012F1A                            
00012F1A 2800                       Elev_Var1:	dc.b $28, 0		; width, frame number
00012F1C                            
00012F1C 1001                       Elev_Var2:	dc.b $10, 1		; distance to move, action type
00012F1E 2001                       		dc.b $20, 1
00012F20 3401                       		dc.b $34, 1
00012F22 1003                       		dc.b $10, 3
00012F24 2003                       		dc.b $20, 3
00012F26 3403                       		dc.b $34, 3
00012F28 1401                       		dc.b $14, 1
00012F2A 2401                       		dc.b $24, 1
00012F2C 2C01                       		dc.b $2C, 1
00012F2E 1403                       		dc.b $14, 3
00012F30 2403                       		dc.b $24, 3
00012F32 2C03                       		dc.b $2C, 3
00012F34 2005                       		dc.b $20, 5
00012F36 2007                       		dc.b $20, 7
00012F38 3009                       		dc.b $30, 9
00012F3A                            ; ===========================================================================
00012F3A                            
00012F3A                            Elev_Main:	; Routine 0
00012F3A 5428 0024                  		addq.b	#2,obRoutine(a0)
00012F3E 7000                       		moveq	#0,d0
00012F40 1028 0028                  		move.b	obSubtype(a0),d0
00012F44 6A00                       		bpl.s	@normal		; branch for types 00-7F
00012F46 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Elev_MakeMulti next
00012F4A 0240 007F                  		andi.w	#$7F,d0
00012F4E C0FC 0006                  		mulu.w	#6,d0
00012F52 3140 003C                  		move.w	d0,elev_dist(a0)
00012F56 3140 003E                  		move.w	d0,$3E(a0)
00012F5A 588F                       		addq.l	#4,sp
00012F5C 4E75                       		rts	
00012F5E                            ; ===========================================================================
00012F5E                            
00012F5E                            	@normal:
00012F5E E648                       		lsr.w	#3,d0
00012F60 0240 001E                  		andi.w	#$1E,d0
00012F64 45FB 00B4                  		lea	Elev_Var1(pc,d0.w),a2
00012F68 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
00012F6C 115A 001A                  		move.b	(a2)+,obFrame(a0) ; set frame
00012F70 7000                       		moveq	#0,d0
00012F72 1028 0028                  		move.b	obSubtype(a0),d0
00012F76 D040                       		add.w	d0,d0
00012F78 0240 001E                  		andi.w	#$1E,d0
00012F7C 45FB 009E                  		lea	Elev_Var2(pc,d0.w),a2
00012F80 101A                       		move.b	(a2)+,d0
00012F82 E548                       		lsl.w	#2,d0
00012F84 3140 003C                  		move.w	d0,elev_dist(a0)	; set distance to move
00012F88 115A 0028                  		move.b	(a2)+,obSubtype(a0)	; set type
00012F8C 217C 0000 0000 0004        		move.l	#Map_Elev,obMap(a0)
00012F94 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012F9A 117C 0004 0001             		move.b	#4,obRender(a0)
00012FA0 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012FA6 3168 0008 0032             		move.w	obX(a0),elev_origX(a0)
00012FAC 3168 000C 0030             		move.w	obY(a0),elev_origY(a0)
00012FB2                            
00012FB2                            Elev_Platform:	; Routine 2
00012FB2 7200                       		moveq	#0,d1
00012FB4 1228 0014                  		move.b	obActWid(a0),d1
00012FB8 4EB9 0000 8C88             		jsr	(PlatformObject).l
00012FBE 6000 0000                  		bra.w	Elev_Types
00012FC2                            ; ===========================================================================
00012FC2                            
00012FC2                            Elev_Action:	; Routine 4
00012FC2 7200                       		moveq	#0,d1
00012FC4 1228 0014                  		move.b	obActWid(a0),d1
00012FC8 4EB9 0000 8DFC             		jsr	(ExitPlatform).l
00012FCE 3F28 0008                  		move.w	obX(a0),-(sp)
00012FD2 6100 0000                  		bsr.w	Elev_Types
00012FD6 341F                       		move.w	(sp)+,d2
00012FD8 4A10                       		tst.b	0(a0)
00012FDA 6700                       		beq.s	@deleted
00012FDC 4EF9 0000 9366             		jmp	(MvSonicOnPtfm2).l
00012FE2                            
00012FE2                            	@deleted:
00012FE2 4E75                       		rts	
00012FE4                            ; ===========================================================================
00012FE4                            
00012FE4                            Elev_Types:
00012FE4 7000                       		moveq	#0,d0
00012FE6 1028 0028                  		move.b	obSubtype(a0),d0
00012FEA 0240 000F                  		andi.w	#$F,d0
00012FEE D040                       		add.w	d0,d0
00012FF0 323B 0000                  		move.w	@index(pc,d0.w),d1
00012FF4 4EFB 1000                  		jmp	@index(pc,d1.w)
00012FF8                            ; ===========================================================================
00012FF8 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00012FFC 0000 0000                  		dc.w @type02-@index, @type01-@index
00013000 0000 0000                  		dc.w @type04-@index, @type01-@index
00013004 0000 0000                  		dc.w @type06-@index, @type01-@index
00013008 0000 0000                  		dc.w @type08-@index, @type09-@index
0001300C                            ; ===========================================================================
0001300C                            
0001300C                            @type00:
0001300C 4E75                       		rts	
0001300E                            ; ===========================================================================
0001300E                            
0001300E                            @type01:
0001300E 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; check if Sonic is standing on the object
00013014 6600                       		bne.s	@notstanding
00013016 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
0001301A                            
0001301A                            	@notstanding:
0001301A 4E75                       		rts	
0001301C                            ; ===========================================================================
0001301C                            
0001301C                            @type02:
0001301C 6100 0000                  		bsr.w	Elev_Move
00013020 3028 0034                  		move.w	$34(a0),d0
00013024 4440                       		neg.w	d0
00013026 D068 0030                  		add.w	elev_origY(a0),d0
0001302A 3140 000C                  		move.w	d0,obY(a0)
0001302E 4E75                       		rts	
00013030                            ; ===========================================================================
00013030                            
00013030                            @type04:
00013030 6100 0000                  		bsr.w	Elev_Move
00013034 3028 0034                  		move.w	$34(a0),d0
00013038 D068 0030                  		add.w	elev_origY(a0),d0
0001303C 3140 000C                  		move.w	d0,obY(a0)
00013040 4E75                       		rts	
00013042                            ; ===========================================================================
00013042                            
00013042                            @type06:
00013042 6100 0000                  		bsr.w	Elev_Move
00013046 3028 0034                  		move.w	$34(a0),d0
0001304A E240                       		asr.w	#1,d0
0001304C 4440                       		neg.w	d0
0001304E D068 0030                  		add.w	elev_origY(a0),d0
00013052 3140 000C                  		move.w	d0,obY(a0)
00013056 3028 0034                  		move.w	$34(a0),d0
0001305A D068 0032                  		add.w	elev_origX(a0),d0
0001305E 3140 0008                  		move.w	d0,obX(a0)
00013062 4E75                       		rts	
00013064                            ; ===========================================================================
00013064                            
00013064                            @type08:
00013064 6100 0000                  		bsr.w	Elev_Move
00013068 3028 0034                  		move.w	$34(a0),d0
0001306C E240                       		asr.w	#1,d0
0001306E D068 0030                  		add.w	elev_origY(a0),d0
00013072 3140 000C                  		move.w	d0,obY(a0)
00013076 3028 0034                  		move.w	$34(a0),d0
0001307A 4440                       		neg.w	d0
0001307C D068 0032                  		add.w	elev_origX(a0),d0
00013080 3140 0008                  		move.w	d0,obX(a0)
00013084 4E75                       		rts	
00013086                            ; ===========================================================================
00013086                            
00013086                            @type09:
00013086 6100 0000                  		bsr.w	Elev_Move
0001308A 3028 0034                  		move.w	$34(a0),d0
0001308E 4440                       		neg.w	d0
00013090 D068 0030                  		add.w	elev_origY(a0),d0
00013094 3140 000C                  		move.w	d0,obY(a0)
00013098 4A28 0028                  		tst.b	obSubtype(a0)
0001309C 6700 0000                  		beq.w	@typereset
000130A0 4E75                       		rts	
000130A2                            ; ===========================================================================
000130A2                            
000130A2                            	@typereset:
000130A2 0828 0003 0022             		btst	#3,obStatus(a0)
000130A8 6700                       		beq.s	@delete
000130AA 08E9 0001 0022             		bset	#1,obStatus(a1)
000130B0 08A9 0003 0022             		bclr	#3,obStatus(a1)
000130B6 137C 0002 0024             		move.b	#2,obRoutine(a1)
000130BC                            
000130BC                            	@delete:
000130BC 6000 C7B0                  		bra.w	DeleteObject
000130C0                            
000130C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000130C0                            
000130C0                            
000130C0                            Elev_Move:
000130C0 3028 0038                  		move.w	$38(a0),d0
000130C4 4A28 003A                  		tst.b	$3A(a0)
000130C8 6600                       		bne.s	loc_10CC8
000130CA 0C40 0800                  		cmpi.w	#$800,d0
000130CE 6400                       		bcc.s	loc_10CD0
000130D0 0640 0010                  		addi.w	#$10,d0
000130D4 6000                       		bra.s	loc_10CD0
000130D6                            ; ===========================================================================
000130D6                            
000130D6                            loc_10CC8:
000130D6 4A40                       		tst.w	d0
000130D8 6700                       		beq.s	loc_10CD0
000130DA 0440 0010                  		subi.w	#$10,d0
000130DE                            
000130DE                            loc_10CD0:
000130DE 3140 0038                  		move.w	d0,$38(a0)
000130E2 48C0                       		ext.l	d0
000130E4 E180                       		asl.l	#8,d0
000130E6 D0A8 0034                  		add.l	$34(a0),d0
000130EA 2140 0034                  		move.l	d0,$34(a0)
000130EE 4840                       		swap	d0
000130F0 3428 003C                  		move.w	elev_dist(a0),d2
000130F4 B042                       		cmp.w	d2,d0
000130F6 6300                       		bls.s	loc_10CF0
000130F8 117C 0001 003A             		move.b	#1,$3A(a0)
000130FE                            
000130FE                            loc_10CF0:
000130FE D442                       		add.w	d2,d2
00013100 B042                       		cmp.w	d2,d0
00013102 6600                       		bne.s	locret_10CFA
00013104 4228 0028                  		clr.b	obSubtype(a0)
00013108                            
00013108                            locret_10CFA:
00013108 4E75                       		rts	
0001310A                            ; End of function Elev_Move
0001310A                            
0001310A                            ; ===========================================================================
0001310A                            
0001310A                            Elev_MakeMulti:	; Routine 6
0001310A 5368 003C                  		subq.w	#1,elev_dist(a0)
0001310E 6600                       		bne.s	@chkdel
00013110 3168 003E 003C             		move.w	$3E(a0),elev_dist(a0)
00013116 6100 CCB0                  		bsr.w	FindFreeObj
0001311A 6600                       		bne.s	@chkdel
0001311C 12BC 0059                  		move.b	#id_Elevator,0(a1) ; duplicate the object
00013120 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013126 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001312C 137C 000E 0028             		move.b	#$E,obSubtype(a1)
00013132                            
00013132                            @chkdel:
00013132 588F                       		addq.l	#4,sp
00013152 4E75                       		rts	
00013152 4E75                       		rts	
00013154                            Map_Elev:	include	"_maps\SLZ Elevators.asm"
00013154                            ; ---------------------------------------------------------------------------
00013154                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00013154                            ; ---------------------------------------------------------------------------
00013154                            Map_Elev_internal:
00013154 0000                       		dc.w @elevator-Map_Elev_internal
00013156 03                         @elevator:	dc.b 3
00013157 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
0001315C F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00013161 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00013166                            		even
00013166                            		even
00013166                            		include	"_incObj\5A SLZ Circling Platform.asm"
00013166                            ; ---------------------------------------------------------------------------
00013166                            ; Object 5A - platforms	moving in circles (SLZ)
00013166                            ; ---------------------------------------------------------------------------
00013166                            
00013166                            CirclingPlatform:
00013166 7000                       		moveq	#0,d0
00013168 1028 0024                  		move.b	obRoutine(a0),d0
0001316C 323B 0000                  		move.w	Circ_Index(pc,d0.w),d1
00013170 4EBB 1000                  		jsr	Circ_Index(pc,d1.w)
00013192 6000 C69A                  		bra.w	DisplaySprite
00013196                            ; ===========================================================================
00013196 0000                       Circ_Index:	dc.w Circ_Main-Circ_Index
00013198 0000                       		dc.w Circ_Platform-Circ_Index
0001319A 0000                       		dc.w Circ_Action-Circ_Index
0001319C                            
0001319C =00000032                  circ_origX:	equ $32		; original x-axis position
0001319C =00000030                  circ_origY:	equ $30		; original y-axis position
0001319C                            ; ===========================================================================
0001319C                            
0001319C                            Circ_Main:	; Routine 0
0001319C 5428 0024                  		addq.b	#2,obRoutine(a0)
000131A0 217C 0000 0000 0004        		move.l	#Map_Circ,obMap(a0)
000131A8 317C 4000 0002             		move.w	#$4000,obGfx(a0)
000131AE 117C 0004 0001             		move.b	#4,obRender(a0)
000131B4 317C 0200 0018             		move.w	#$200,obPriority(a0)
000131BA 117C 0018 0014             		move.b	#$18,obActWid(a0)
000131C0 3168 0008 0032             		move.w	obX(a0),circ_origX(a0)
000131C6 3168 000C 0030             		move.w	obY(a0),circ_origY(a0)
000131CC                            
000131CC                            Circ_Platform:	; Routine 2
000131CC 7200                       		moveq	#0,d1
000131CE 1228 0014                  		move.b	obActWid(a0),d1
000131D2 4EB9 0000 8C88             		jsr	(PlatformObject).l
000131D8 6000 0000                  		bra.w	Circ_Types
000131DC                            ; ===========================================================================
000131DC                            
000131DC                            Circ_Action:	; Routine 4
000131DC 7200                       		moveq	#0,d1
000131DE 1228 0014                  		move.b	obActWid(a0),d1
000131E2 4EB9 0000 8DFC             		jsr	(ExitPlatform).l
000131E8 3F28 0008                  		move.w	obX(a0),-(sp)
000131EC 6100 0000                  		bsr.w	Circ_Types
000131F0 341F                       		move.w	(sp)+,d2
000131F2 4EF9 0000 9366             		jmp	(MvSonicOnPtfm2).l
000131F8                            ; ===========================================================================
000131F8                            
000131F8                            Circ_Types:
000131F8 7000                       		moveq	#0,d0
000131FA 1028 0028                  		move.b	obSubtype(a0),d0
000131FE 0240 000C                  		andi.w	#$C,d0
00013202 E248                       		lsr.w	#1,d0
00013204 323B 0000                  		move.w	@index(pc,d0.w),d1
00013208 4EFB 1000                  		jmp	@index(pc,d1.w)
0001320C                            ; ===========================================================================
0001320C 0000                       @index:		dc.w @type00-@index
0001320E 0000                       		dc.w @type04-@index
00013210                            ; ===========================================================================
00013210                            
00013210                            @type00:
00013210 1238 FE80                  		move.b	(v_oscillate+$22).w,d1 ; get rotating value
00013214 0401 0050                  		subi.b	#$50,d1		; set radius of circle
00013218 4881                       		ext.w	d1
0001321A 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
0001321E 0402 0050                  		subi.b	#$50,d2
00013222 4882                       		ext.w	d2
00013224 0828 0000 0028             		btst	#0,obSubtype(a0)
0001322A 6700                       		beq.s	@noshift00a
0001322C 4441                       		neg.w	d1
0001322E 4442                       		neg.w	d2
00013230                            
00013230                            	@noshift00a:
00013230 0828 0001 0028             		btst	#1,obSubtype(a0)
00013236 6700                       		beq.s	@noshift00b
00013238 4441                       		neg.w	d1
0001323A C342                       		exg	d1,d2
0001323C                            
0001323C                            	@noshift00b:
0001323C D268 0032                  		add.w	circ_origX(a0),d1
00013240 3141 0008                  		move.w	d1,obX(a0)
00013244 D468 0030                  		add.w	circ_origY(a0),d2
00013248 3142 000C                  		move.w	d2,obY(a0)
0001324C 4E75                       		rts	
0001324E                            ; ===========================================================================
0001324E                            
0001324E                            @type04:
0001324E 1238 FE80                  		move.b	(v_oscillate+$22).w,d1
00013252 0401 0050                  		subi.b	#$50,d1
00013256 4881                       		ext.w	d1
00013258 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
0001325C 0402 0050                  		subi.b	#$50,d2
00013260 4882                       		ext.w	d2
00013262 0828 0000 0028             		btst	#0,obSubtype(a0)
00013268 6700                       		beq.s	@noshift04a
0001326A 4441                       		neg.w	d1
0001326C 4442                       		neg.w	d2
0001326E                            
0001326E                            	@noshift04a:
0001326E 0828 0001 0028             		btst	#1,obSubtype(a0)
00013274 6700                       		beq.s	@noshift04b
00013276 4441                       		neg.w	d1
00013278 C342                       		exg	d1,d2
0001327A                            
0001327A                            	@noshift04b:
0001327A 4441                       		neg.w	d1
0001327C D268 0032                  		add.w	circ_origX(a0),d1
00013280 3141 0008                  		move.w	d1,obX(a0)
00013284 D468 0030                  		add.w	circ_origY(a0),d2
00013288 3142 000C                  		move.w	d2,obY(a0)
0001328C 4E75                       		rts	
0001328C 4E75                       		rts	
0001328E                            Map_Circ:	include	"_maps\SLZ Circling Platform.asm"
0001328E                            ; ---------------------------------------------------------------------------
0001328E                            ; Sprite mappings - platforms that move	in circles (SLZ)
0001328E                            ; ---------------------------------------------------------------------------
0001328E                            Map_Circ_internal:
0001328E 0000                       		dc.w @platform-Map_Circ_internal
00013290 02                         @platform:	dc.b 2
00013291 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00013296 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
0001329C 00                         		even
0001329C 00                         		even
0001329C                            		include	"_incObj\5B Staircase.asm"
0001329C                            ; ---------------------------------------------------------------------------
0001329C                            ; Object 5B - blocks that form a staircase (SLZ)
0001329C                            ; ---------------------------------------------------------------------------
0001329C                            
0001329C                            Staircase:
0001329C 7000                       		moveq	#0,d0
0001329E 1028 0024                  		move.b	obRoutine(a0),d0
000132A2 323B 0000                  		move.w	Stair_Index(pc,d0.w),d1
000132A6 4EBB 1000                  		jsr	Stair_Index(pc,d1.w)
000132C8 6000 C564                  		bra.w	DisplaySprite
000132CC                            ; ===========================================================================
000132CC 0000                       Stair_Index:	dc.w Stair_Main-Stair_Index
000132CE 0000                       		dc.w Stair_Move-Stair_Index
000132D0 0000                       		dc.w Stair_Solid-Stair_Index
000132D2                            
000132D2 =00000030                  stair_origX:	equ $30		; original x-axis position
000132D2 =00000032                  stair_origY:	equ $32		; original y-axis position
000132D2                            
000132D2 =0000003C                  stair_parent:	equ $3C		; address of parent object (4 bytes)
000132D2                            ; ===========================================================================
000132D2                            
000132D2                            Stair_Main:	; Routine 0
000132D2 5428 0024                  		addq.b	#2,obRoutine(a0)
000132D6 7638                       		moveq	#$38,d3
000132D8 7801                       		moveq	#1,d4
000132DA 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
000132E0 6700                       		beq.s	@notflipped	; if not, branch
000132E2 763B                       		moveq	#$3B,d3
000132E4 78FF                       		moveq	#-1,d4
000132E6                            
000132E6                            	@notflipped:
000132E6 3428 0008                  		move.w	obX(a0),d2
000132EA 2248                       		movea.l	a0,a1
000132EC 7203                       		moveq	#3,d1
000132EE 6000                       		bra.s	@makeblocks
000132F0                            ; ===========================================================================
000132F0                            
000132F0                            @loop:
000132F0 6100 CAEC                  		bsr.w	FindNextFreeObj
000132F4 6600 0000                  		bne.w	@fail
000132F8 137C 0004 0024             		move.b	#4,obRoutine(a1)
000132FE                            
000132FE                            @makeblocks:
000132FE 12BC 005B                  		move.b	#id_Staircase,0(a1) ; load another block object
00013302 237C 0000 0000 0004        		move.l	#Map_Stair,obMap(a1)
0001330A 337C 4000 0002             		move.w	#$4000,obGfx(a1)
00013310 137C 0004 0001             		move.b	#4,obRender(a1)
00013316 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001331C 137C 0010 0014             		move.b	#$10,obActWid(a1)
00013322 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00013328 3342 0008                  		move.w	d2,obX(a1)
0001332C 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013332 3368 0008 0030             		move.w	obX(a0),stair_origX(a1)
00013338 3369 000C 0032             		move.w	obY(a1),stair_origY(a1)
0001333E 0642 0020                  		addi.w	#$20,d2
00013342 1343 0037                  		move.b	d3,$37(a1)
00013346 2348 003C                  		move.l	a0,stair_parent(a1)
0001334A D604                       		add.b	d4,d3
0001334C 51C9 FFA2                  		dbf	d1,@loop	; repeat sequence 3 times
00013350                            
00013350                            	@fail:
00013350                            
00013350                            Stair_Move:	; Routine 2
00013350 7000                       		moveq	#0,d0
00013352 1028 0028                  		move.b	obSubtype(a0),d0
00013356 0240 0007                  		andi.w	#7,d0
0001335A D040                       		add.w	d0,d0
0001335C 323B 0000                  		move.w	Stair_TypeIndex(pc,d0.w),d1
00013360 4EBB 1000                  		jsr	Stair_TypeIndex(pc,d1.w)
00013364                            
00013364                            Stair_Solid:	; Routine 4
00013364 2468 003C                  		movea.l	stair_parent(a0),a2
00013368 7000                       		moveq	#0,d0
0001336A 1028 0037                  		move.b	$37(a0),d0
0001336E 1032 0000                  		move.b	(a2,d0.w),d0
00013372 D068 0032                  		add.w	stair_origY(a0),d0
00013376 3140 000C                  		move.w	d0,obY(a0)
0001337A 7200                       		moveq	#0,d1
0001337C 1228 0014                  		move.b	obActWid(a0),d1
00013380 0641 000B                  		addi.w	#$B,d1
00013384 343C 0010                  		move.w	#$10,d2
00013388 363C 0011                  		move.w	#$11,d3
0001338C 3828 0008                  		move.w	obX(a0),d4
00013390 6100 E9E8                  		bsr.w	SolidObject
00013394 4A04                       		tst.b	d4
00013396 6A00                       		bpl.s	loc_10F92
00013398 1544 0036                  		move.b	d4,$36(a2)
0001339C                            
0001339C                            loc_10F92:
0001339C 0828 0003 0022             		btst	#3,obStatus(a0)
000133A2 6700                       		beq.s	locret_10FA0
000133A4 157C 0001 0036             		move.b	#1,$36(a2)
000133AA                            
000133AA                            locret_10FA0:
000133AA 4E75                       		rts	
000133AC                            ; ===========================================================================
000133AC 0000                       Stair_TypeIndex:dc.w Stair_Type00-Stair_TypeIndex
000133AE 0000                       		dc.w Stair_Type01-Stair_TypeIndex
000133B0 0000                       		dc.w Stair_Type02-Stair_TypeIndex
000133B2 0000                       		dc.w Stair_Type01-Stair_TypeIndex
000133B4                            ; ===========================================================================
000133B4                            
000133B4                            Stair_Type00:
000133B4 4A68 0034                  		tst.w	$34(a0)
000133B8 6600                       		bne.s	loc_10FC0
000133BA 0C28 0001 0036             		cmpi.b	#1,$36(a0)
000133C0 6600                       		bne.s	locret_10FBE
000133C2 317C 001E 0034             		move.w	#$1E,$34(a0)
000133C8                            
000133C8                            locret_10FBE:
000133C8 4E75                       		rts	
000133CA                            ; ===========================================================================
000133CA                            
000133CA                            loc_10FC0:
000133CA 5368 0034                  		subq.w	#1,$34(a0)
000133CE 66F8                       		bne.s	locret_10FBE
000133D0 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
000133D4 4E75                       		rts	
000133D6                            ; ===========================================================================
000133D6                            
000133D6                            Stair_Type02:
000133D6 4A68 0034                  		tst.w	$34(a0)
000133DA 6600                       		bne.s	loc_10FE0
000133DC 4A28 0036                  		tst.b	$36(a0)
000133E0 6A00                       		bpl.s	locret_10FDE
000133E2 317C 003C 0034             		move.w	#$3C,$34(a0)
000133E8                            
000133E8                            locret_10FDE:
000133E8 4E75                       		rts	
000133EA                            ; ===========================================================================
000133EA                            
000133EA                            loc_10FE0:
000133EA 5368 0034                  		subq.w	#1,$34(a0)
000133EE 6600                       		bne.s	loc_10FEC
000133F0 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
000133F4 4E75                       		rts	
000133F6                            ; ===========================================================================
000133F6                            
000133F6                            loc_10FEC:
000133F6 43E8 0038                  		lea	$38(a0),a1
000133FA 3028 0034                  		move.w	$34(a0),d0
000133FE E408                       		lsr.b	#2,d0
00013400 0200 0001                  		andi.b	#1,d0
00013404 12C0                       		move.b	d0,(a1)+
00013406 0A00 0001                  		eori.b	#1,d0
0001340A 12C0                       		move.b	d0,(a1)+
0001340C 0A00 0001                  		eori.b	#1,d0
00013410 12C0                       		move.b	d0,(a1)+
00013412 0A00 0001                  		eori.b	#1,d0
00013416 12C0                       		move.b	d0,(a1)+
00013418 4E75                       		rts	
0001341A                            ; ===========================================================================
0001341A                            
0001341A                            Stair_Type01:
0001341A 43E8 0038                  		lea	$38(a0),a1
0001341E 0C11 0080                  		cmpi.b	#$80,(a1)
00013422 6700                       		beq.s	locret_11038
00013424 5211                       		addq.b	#1,(a1)
00013426 7200                       		moveq	#0,d1
00013428 1219                       		move.b	(a1)+,d1
0001342A 4841                       		swap	d1
0001342C E289                       		lsr.l	#1,d1
0001342E 2401                       		move.l	d1,d2
00013430 E289                       		lsr.l	#1,d1
00013432 2601                       		move.l	d1,d3
00013434 D682                       		add.l	d2,d3
00013436 4841                       		swap	d1
00013438 4842                       		swap	d2
0001343A 4843                       		swap	d3
0001343C 12C3                       		move.b	d3,(a1)+
0001343E 12C2                       		move.b	d2,(a1)+
00013440 12C1                       		move.b	d1,(a1)+
00013442                            
00013442                            locret_11038:
00013442 4E75                       		rts	
00013444 4E75                       		rts	
00013444 4E75                       		rts	
00013446                            Map_Stair:	include	"_maps\Staircase.asm"
00013446                            ; ---------------------------------------------------------------------------
00013446                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00013446                            ; ---------------------------------------------------------------------------
00013446                            Map_Stair_internal:
00013446 0000                       		dc.w @block-Map_Stair_internal
00013448 01                         @block:		dc.b 1
00013449 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
0001344E                            		even
0001344E                            		even
0001344E                            		include	"_incObj\5C Pylon.asm"
0001344E                            ; ---------------------------------------------------------------------------
0001344E                            ; Object 5C - metal pylons in foreground (SLZ)
0001344E                            ; ---------------------------------------------------------------------------
0001344E                            
0001344E                            Pylon:
0001344E 7000                       		moveq	#0,d0
00013450 1028 0024                  		move.b	obRoutine(a0),d0
00013454 323B 0000                  		move.w	Pyl_Index(pc,d0.w),d1
00013458 4EFB 1000                  		jmp	Pyl_Index(pc,d1.w)
0001345C                            ; ===========================================================================
0001345C 0000                       Pyl_Index:	dc.w Pyl_Main-Pyl_Index
0001345E 0000                       		dc.w Pyl_Display-Pyl_Index
00013460                            ; ===========================================================================
00013460                            
00013460                            Pyl_Main:	; Routine 0
00013460 5428 0024                  		addq.b	#2,obRoutine(a0)
00013464 217C 0000 0000 0004        		move.l	#Map_Pylon,obMap(a0)
0001346C 317C 83CC 0002             		move.w	#$83CC,obGfx(a0)
00013472 117C 0010 0014             		move.b	#$10,obActWid(a0)
00013478                            
00013478                            Pyl_Display:	; Routine 2
00013478 2238 F700                  		move.l	(v_screenposx).w,d1
0001347C D281                       		add.l	d1,d1
0001347E 4841                       		swap	d1
00013480 4441                       		neg.w	d1
00013482 3141 0008                  		move.w	d1,obX(a0)
00013486 2238 F704                  		move.l	(v_screenposy).w,d1
0001348A D281                       		add.l	d1,d1
0001348C 4841                       		swap	d1
0001348E 0241 003F                  		andi.w	#$3F,d1
00013492 4441                       		neg.w	d1
00013494 0641 0100                  		addi.w	#$100,d1
00013498 3141 000A                  		move.w	d1,obScreenY(a0)
0001349C 6000 C390                  		bra.w	DisplaySprite
0001349C 6000 C390                  		bra.w	DisplaySprite
000134A0                            Map_Pylon:	include	"_maps\Pylon.asm"
000134A0                            ; ---------------------------------------------------------------------------
000134A0                            ; Sprite mappings - metal pylons in foreground (SLZ)
000134A0                            ; ---------------------------------------------------------------------------
000134A0                            Map_Pylon_internal:
000134A0 0000                       		dc.w @pylon-Map_Pylon_internal
000134A2 09                         @pylon:		dc.b 9
000134A3 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
000134A8 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
000134AD C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
000134B2 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
000134B7 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
000134BC 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
000134C1 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
000134C6 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
000134CB 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
000134D0                            		even
000134D0                            		even
000134D0                            
000134D0                            		include	"_incObj\1B Water Surface.asm"
000134D0                            ; ---------------------------------------------------------------------------
000134D0                            ; Object 1B - water surface (LZ)
000134D0                            ; ---------------------------------------------------------------------------
000134D0                            
000134D0                            WaterSurface:
000134D0 7000                       		moveq	#0,d0
000134D2 1028 0024                  		move.b	obRoutine(a0),d0
000134D6 323B 0000                  		move.w	Surf_Index(pc,d0.w),d1
000134DA 4EFB 1000                  		jmp	Surf_Index(pc,d1.w)
000134DE                            ; ===========================================================================
000134DE 0000                       Surf_Index:	dc.w Surf_Main-Surf_Index
000134E0 0000                       		dc.w Surf_Action-Surf_Index
000134E2                            
000134E2 =00000030                  surf_origX:	equ $30		; original x-axis position
000134E2 =00000032                  surf_freeze:	equ $32		; flag to freeze animation
000134E2                            ; ===========================================================================
000134E2                            
000134E2                            Surf_Main:	; Routine 0
000134E2 5428 0024                  		addq.b	#2,obRoutine(a0)
000134E6 217C 0000 0000 0004        		move.l	#Map_Surf,obMap(a0)
000134EE 317C C300 0002             		move.w	#$C300,obGfx(a0)
000134F4 117C 0004 0001             		move.b	#4,obRender(a0)
000134FA 117C 0080 0014             		move.b	#$80,obActWid(a0)
00013500 3168 0008 0030             		move.w	obX(a0),surf_origX(a0)
00013506                            
00013506                            Surf_Action:	; Routine 2
00013506 3238 F700                  		move.w	(v_screenposx).w,d1
0001350A 0241 FFE0                  		andi.w	#$FFE0,d1
0001350E D268 0030                  		add.w	surf_origX(a0),d1
00013512 0838 0000 FE05             		btst	#0,(v_framebyte).w
00013518 6700                       		beq.s	@even		; branch on even frames
0001351A 0641 0020                  		addi.w	#$20,d1
0001351E                            
0001351E                            	@even:
0001351E 3141 0008                  		move.w	d1,obX(a0)	; match	obj x-position to screen position
00013522 3238 F646                  		move.w	(v_waterpos1).w,d1
00013526 3141 000C                  		move.w	d1,obY(a0)	; match	obj y-position to water	height
0001352A 4A28 0032                  		tst.b	surf_freeze(a0)
0001352E 6600                       		bne.s	@stopped
00013530 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00013536 6700                       		beq.s	@animate	; if not, branch
00013538 5628 001A                  		addq.b	#3,obFrame(a0)	; use different	frames
0001353C 117C 0001 0032             		move.b	#1,surf_freeze(a0) ; stop animation
00013542 6000                       		bra.s	@display
00013544                            ; ===========================================================================
00013544                            
00013544                            @stopped:
00013544 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
00013548 6600                       		bne.s	@display	; if yes, branch
0001354A 117C 0000 0032             		move.b	#0,surf_freeze(a0) ; resume animation
00013550 5728 001A                  		subq.b	#3,obFrame(a0)	; use normal frames
00013554                            
00013554                            @animate:
00013554 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00013558 6A00                       		bpl.s	@display
0001355A 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00013560 5228 001A                  		addq.b	#1,obFrame(a0)
00013564 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)
0001356A 6500                       		bcs.s	@display
0001356C 117C 0000 001A             		move.b	#0,obFrame(a0)
00013572                            
00013572                            @display:
00013572 6000 C2BA                  		bra.w	DisplaySprite
00013572 6000 C2BA                  		bra.w	DisplaySprite
00013576                            Map_Surf:	include	"_maps\Water Surface.asm"
00013576                            ; --------------------------------------------------------------------------------
00013576                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00013576                            ; --------------------------------------------------------------------------------
00013576                            
00013576                            SME_LGSi8:	
00013576 0000 0000                  		dc.w SME_LGSi8_C-SME_LGSi8, SME_LGSi8_1C-SME_LGSi8	
0001357A 0000 0000                  		dc.w SME_LGSi8_2C-SME_LGSi8, SME_LGSi8_3C-SME_LGSi8	
0001357E 0000 0000                  		dc.w SME_LGSi8_5B-SME_LGSi8, SME_LGSi8_7A-SME_LGSi8	
00013582 03                         SME_LGSi8_C:	dc.b 3	
00013583 F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
00013588 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
0001358D F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
00013592 03                         SME_LGSi8_1C:	dc.b 3	
00013593 F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
00013598 F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
0001359D F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
000135A2 03                         SME_LGSi8_2C:	dc.b 3	
000135A3 F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
000135A8 F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
000135AD F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
000135B2 06                         SME_LGSi8_3C:	dc.b 6	
000135B3 F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
000135B8 F80D 0000 C0               		dc.b $F8, $D, 0, 0, $C0	
000135BD F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
000135C2 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0	
000135C7 F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
000135CC F80D 0000 40               		dc.b $F8, $D, 0, 0, $40	
000135D1 06                         SME_LGSi8_5B:	dc.b 6	
000135D2 F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
000135D7 F80D 0008 C0               		dc.b $F8, $D, 0, 8, $C0	
000135DC F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
000135E1 F80D 0008 00               		dc.b $F8, $D, 0, 8, 0	
000135E6 F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
000135EB F80D 0008 40               		dc.b $F8, $D, 0, 8, $40	
000135F0 06                         SME_LGSi8_7A:	dc.b 6	
000135F1 F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
000135F6 F80D 0800 C0               		dc.b $F8, $D, 8, 0, $C0	
000135FB F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
00013600 F80D 0800 00               		dc.b $F8, $D, 8, 0, 0	
00013605 F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
0001360A F80D 0800 40               		dc.b $F8, $D, 8, 0, $40	
00013610 00                         		even
00013610 00                         		even
00013610                            		include	"_incObj\0B Pole that Breaks.asm"
00013610                            ; ---------------------------------------------------------------------------
00013610                            ; Object 0B - pole that	breaks (LZ)
00013610                            ; ---------------------------------------------------------------------------
00013610                            
00013610                            Pole:
00013610 7000                       		moveq	#0,d0
00013612 1028 0024                  		move.b	obRoutine(a0),d0
00013616 323B 0000                  		move.w	Pole_Index(pc,d0.w),d1
0001361A 4EFB 1000                  		jmp	Pole_Index(pc,d1.w)
0001361E                            ; ===========================================================================
0001361E 0000                       Pole_Index:	dc.w Pole_Main-Pole_Index
00013620 0000                       		dc.w Pole_Action-Pole_Index
00013622 0000                       		dc.w Pole_Display-Pole_Index
00013624                            
00013624 =00000030                  pole_time:	equ $30		; time between grabbing the pole & breaking
00013624 =00000032                  pole_grabbed:	equ $32		; flag set when Sonic grabs the pole
00013624                            ; ===========================================================================
00013624                            
00013624                            Pole_Main:	; Routine 0
00013624 5428 0024                  		addq.b	#2,obRoutine(a0)
00013628 217C 0000 0000 0004        		move.l	#Map_Pole,obMap(a0)
00013630 317C 43DE 0002             		move.w	#$43DE,obGfx(a0)
00013636 117C 0004 0001             		move.b	#4,obRender(a0)
0001363C 117C 0008 0014             		move.b	#8,obActWid(a0)
00013642 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013648 117C 00E1 0020             		move.b	#$E1,obColType(a0)
0001364E 7000                       		moveq	#0,d0
00013650 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013654 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00013658 3140 0030                  		move.w	d0,pole_time(a0) ; set breakage time
0001365C                            
0001365C                            Pole_Action:	; Routine 2
0001365C 4A28 0032                  		tst.b	pole_grabbed(a0) ; has pole already been grabbed?
00013660 6700                       		beq.s	@grab		; if not, branch
00013662 4A68 0030                  		tst.w	pole_time(a0)
00013666 6700                       		beq.s	@moveup
00013668 5368 0030                  		subq.w	#1,pole_time(a0) ; decrement time until break
0001366C 6600                       		bne.s	@moveup
0001366E 117C 0001 001A             		move.b	#1,obFrame(a0)	; break	the pole
00013674 6000                       		bra.s	@release
00013676                            ; ===========================================================================
00013676                            
00013676                            @moveup:
00013676 43F8 D000                  		lea	(v_player).w,a1
0001367A 3028 000C                  		move.w	obY(a0),d0
0001367E 0440 0018                  		subi.w	#$18,d0
00013682 0838 0000 F604             		btst	#bitUp,(v_jpadhold1).w ; is "up" pressed?
00013688 6700                       		beq.s	@movedown	; if not, branch
0001368A 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up
0001368E B069 000C                  		cmp.w	obY(a1),d0
00013692 6500                       		bcs.s	@movedown
00013694 3340 000C                  		move.w	d0,obY(a1)
00013698                            
00013698                            @movedown:
00013698 0640 0024                  		addi.w	#$24,d0
0001369C 0838 0001 F604             		btst	#bitDn,(v_jpadhold1).w ; is "down" pressed?
000136A2 6700                       		beq.s	@letgo		; if not, branch
000136A4 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down
000136A8 B069 000C                  		cmp.w	obY(a1),d0
000136AC 6400                       		bcc.s	@letgo
000136AE 3340 000C                  		move.w	d0,obY(a1)
000136B2                            
000136B2                            @letgo:
000136B2 1038 F603                  		move.b	(v_jpadpress2).w,d0
000136B6 0240 0070                  		andi.w	#btnABC,d0	; is A/B/C pressed?
000136BA 6700                       		beq.s	Pole_Display	; if not, branch
000136BC                            
000136BC                            @release:
000136BC 4228 0020                  		clr.b	obColType(a0)
000136C0 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Pole_Display next
000136C4 4238 F7C8                  		clr.b	(f_lockmulti).w
000136C8 4238 F7C9                  		clr.b	(f_wtunnelallow).w
000136CC 4228 0032                  		clr.b	pole_grabbed(a0)
000136D0 6000                       		bra.s	Pole_Display
000136D2                            ; ===========================================================================
000136D2                            
000136D2                            @grab:
000136D2 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	pole?
000136D6 6700                       		beq.s	Pole_Display	; if not, branch
000136D8 43F8 D000                  		lea	(v_player).w,a1
000136DC 3028 0008                  		move.w	obX(a0),d0
000136E0 0640 0014                  		addi.w	#$14,d0
000136E4 B069 0008                  		cmp.w	obX(a1),d0
000136E8 6400                       		bcc.s	Pole_Display
000136EA 4228 0021                  		clr.b	obColProp(a0)
000136EE 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1)
000136F4 6400                       		bcc.s	Pole_Display
000136F6 4269 0010                  		clr.w	obVelX(a1)	; stop Sonic moving
000136FA 4269 0012                  		clr.w	obVelY(a1)	; stop Sonic moving
000136FE 3028 0008                  		move.w	obX(a0),d0
00013702 0640 0014                  		addi.w	#$14,d0
00013706 3340 0008                  		move.w	d0,obX(a1)
0001370A 08A9 0000 0022             		bclr	#0,obStatus(a1)
00013710 137C 0000 001C             		move.b	#id_Hang,obAnim(a1) ; set Sonic's animation to "hanging" ($11)
00013716 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
0001371C 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
00013722 117C 0001 0032             		move.b	#1,pole_grabbed(a0) ; begin countdown to breakage
00013728                            
00013728                            Pole_Display:	; Routine 4
00013728 6000 E1B8                  		bra.w	RememberState
00013728 6000 E1B8                  		bra.w	RememberState
0001372C                            Map_Pole:	include	"_maps\Pole that Breaks.asm"
0001372C                            ; ---------------------------------------------------------------------------
0001372C                            ; Sprite mappings - pole that breaks (LZ)
0001372C                            ; ---------------------------------------------------------------------------
0001372C                            Map_Pole_internal:
0001372C 0000                       		dc.w @normal-Map_Pole_internal
0001372E 0000                       		dc.w @broken-Map_Pole_internal
00013730 02                         @normal:	dc.b 2			; normal pole
00013731 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00013736 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
0001373B 04                         @broken:	dc.b 4			; broken pole
0001373C E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00013741 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00013746 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
0001374B 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00013750                            		even
00013750                            		even
00013750                            		include	"_incObj\0C Flapping Door.asm"
00013750                            ; ---------------------------------------------------------------------------
00013750                            ; Object 0C - flapping door (LZ)
00013750                            ; ---------------------------------------------------------------------------
00013750                            
00013750                            FlapDoor:
00013750 7000                       		moveq	#0,d0
00013752 1028 0024                  		move.b	obRoutine(a0),d0
00013756 323B 0000                  		move.w	Flap_Index(pc,d0.w),d1
0001375A 4EFB 1000                  		jmp	Flap_Index(pc,d1.w)
0001375E                            ; ===========================================================================
0001375E 0000                       Flap_Index:	dc.w Flap_Main-Flap_Index
00013760 0000                       		dc.w Flap_OpenClose-Flap_Index
00013762                            
00013762 =00000032                  flap_time:	equ $32		; time between opening/closing
00013762 =00000030                  flap_wait:	equ $30		; time until change
00013762                            ; ===========================================================================
00013762                            
00013762                            Flap_Main:	; Routine 0
00013762 5428 0024                  		addq.b	#2,obRoutine(a0)
00013766 217C 0000 0000 0004        		move.l	#Map_Flap,obMap(a0)
0001376E 317C 4328 0002             		move.w	#$4328,obGfx(a0)
00013774 0028 0004 0001             		ori.b	#4,obRender(a0)
0001377A 117C 0028 0014             		move.b	#$28,obActWid(a0)
00013780 7000                       		moveq	#0,d0
00013782 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013786 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0001378A 3140 0032                  		move.w	d0,flap_time(a0) ; set flap delay time
0001378E                            
0001378E                            Flap_OpenClose:	; Routine 2
0001378E 5368 0030                  		subq.w	#1,flap_wait(a0) ; decrement time delay
00013792 6A00                       		bpl.s	@wait		; if time remains, branch
00013794 3168 0032 0030             		move.w	flap_time(a0),flap_wait(a0) ; reset time delay
0001379A 0868 0000 001C             		bchg	#0,obAnim(a0)	; open/close door
000137A0 4A28 0001                  		tst.b	obRender(a0)
000137A4 6A00                       		bpl.s	@nosound
000137B0                            
000137B0                            	@wait:
000137B0                            	@nosound:
000137B0 43F9 0000 0000             		lea	(Ani_Flap).l,a1
000137B6 6100 912C                  		bsr.w	AnimateSprite
000137BA 4238 F7C9                  		clr.b	(f_wtunnelallow).w ; enable wind tunnel
000137BE 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
000137C2 6600                       		bne.s	@display	; if yes, branch
000137C4 3038 D008                  		move.w	(v_player+obX).w,d0
000137C8 B068 0008                  		cmp.w	obX(a0),d0	; has Sonic passed through the door?
000137CC 6400                       		bcc.s	@display	; if yes, branch
000137CE 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
000137D4 323C 0013                  		move.w	#$13,d1
000137D8 343C 0020                  		move.w	#$20,d2
000137DC 3602                       		move.w	d2,d3
000137DE 5243                       		addq.w	#1,d3
000137E0 3828 0008                  		move.w	obX(a0),d4
000137E4 6100 E594                  		bsr.w	SolidObject	; make the door	solid
000137E8                            
000137E8                            	@display:
000137E8 6000 E0F8                  		bra.w	RememberState
000137E8 6000 E0F8                  		bra.w	RememberState
000137EC                            		include	"_anim\Flapping Door.asm"
000137EC                            ; ---------------------------------------------------------------------------
000137EC                            ; Animation script - flapping door (LZ)
000137EC                            ; ---------------------------------------------------------------------------
000137EC 0000                       Ani_Flap:	dc.w @opening-Ani_Flap
000137EE 0000                       		dc.w @closing-Ani_Flap
000137F0 0300 0102 FE01             @opening:	dc.b 3,	0, 1, 2, afBack, 1
000137F6 0302 0100 FE01             @closing:	dc.b 3,	2, 1, 0, afBack, 1
000137FC                            		even
000137FC                            		even
000137FC                            Map_Flap:	include	"_maps\Flapping Door.asm"
000137FC                            ; ---------------------------------------------------------------------------
000137FC                            ; Sprite mappings - flapping door (LZ)
000137FC                            ; ---------------------------------------------------------------------------
000137FC                            Map_Flap_internal:
000137FC 0000                       		dc.w @closed-Map_Flap_internal
000137FE 0000                       		dc.w @halfway-Map_Flap_internal
00013800 0000                       		dc.w @open-Map_Flap_internal
00013802 02                         @closed:	dc.b 2
00013803 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00013808 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
0001380D 02                         @halfway:	dc.b 2
0001380E DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00013813 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00013818 02                         @open:		dc.b 2
00013819 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
0001381E 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00013824 00                         		even
00013824 00                         		even
00013824                            
00013824                            		include	"_incObj\71 Invisible Barriers.asm"
00013824                            ; ---------------------------------------------------------------------------
00013824                            ; Object 71 - invisible	solid barriers
00013824                            ; ---------------------------------------------------------------------------
00013824                            
00013824                            Invisibarrier:
00013824 7000                       		moveq	#0,d0
00013826 1028 0024                  		move.b	obRoutine(a0),d0
0001382A 323B 0000                  		move.w	Invis_Index(pc,d0.w),d1
0001382E 4EFB 1000                  		jmp	Invis_Index(pc,d1.w)
00013832                            ; ===========================================================================
00013832 0000                       Invis_Index:	dc.w Invis_Main-Invis_Index
00013834 0000                       		dc.w Invis_Solid-Invis_Index
00013836                            
00013836 =00000016                  invis_height:	equ $16		; height in pixels
00013836                            ; ===========================================================================
00013836                            
00013836                            Invis_Main:	; Routine 0
00013836 5428 0024                  		addq.b	#2,obRoutine(a0)
0001383A 217C 0000 0000 0004        		move.l	#Map_Invis,obMap(a0)
00013842 317C 8680 0002             		move.w	#$8680,obGfx(a0)
00013848 0028 0004 0001             		ori.b	#4,obRender(a0)
0001384E 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013852 1200                       		move.b	d0,d1
00013854 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00013858 0640 0010                  		addi.w	#$10,d0
0001385C E248                       		lsr.w	#1,d0
0001385E 1140 0014                  		move.b	d0,obActWid(a0)	; set object width
00013862 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00013866 5241                       		addq.w	#1,d1
00013868 E749                       		lsl.w	#3,d1
0001386A 1141 0016                  		move.b	d1,invis_height(a0) ; set object height
0001386E                            
0001386E                            Invis_Solid:	; Routine 2
0001386E 6100 C34C                  		bsr.w	ChkObjectVisible
00013872 6600                       		bne.s	@chkdel
00013874 7200                       		moveq	#0,d1
00013876 1228 0014                  		move.b	obActWid(a0),d1
0001387A 0641 000B                  		addi.w	#$B,d1
0001387E 7400                       		moveq	#0,d2
00013880 1428 0016                  		move.b	invis_height(a0),d2
00013884 3602                       		move.w	d2,d3
00013886 5243                       		addq.w	#1,d3
00013888 3828 0008                  		move.w	obX(a0),d4
0001388C 6100 E534                  		bsr.w	SolidObject71
00013890                            
00013890                            @chkdel:
000138AC 4A78 FE08                  		tst.w	(v_debuguse).w	; are you using	debug mode?
000138B0 6700                       		beq.s	@nodisplay	; if not, branch
000138B2 4EF9 0000 F82E             		jmp	(DisplaySprite).l	; if yes, display the object
000138B8                            
000138B8                            	@nodisplay:
000138B8 4E75                       		rts	
000138BA                            
000138BA                            	@delete:
000138BA 4EF9 0000 F86E             		jmp	(DeleteObject).l
000138BA 4EF9 0000 F86E             		jmp	(DeleteObject).l
000138C0                            Map_Invis:	include	"_maps\Invisible Barriers.asm"
000138C0                            ; --------------------------------------------------------------------------------
000138C0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000138C0                            ; --------------------------------------------------------------------------------
000138C0                            
000138C0                            SME_t60cE:	
000138C0 0000 0000                  		dc.w SME_t60cE_6-SME_t60cE, SME_t60cE_1B-SME_t60cE	
000138C4 0000                       		dc.w SME_t60cE_30-SME_t60cE	
000138C6 04                         SME_t60cE_6:	dc.b 4	
000138C7 0005 0028 F0               		dc.b 0, 5, 0, $28, $F0	
000138CC 0005 0028 00               		dc.b 0, 5, 0, $28, 0	
000138D1 F005 0028 00               		dc.b $F0, 5, 0, $28, 0	
000138D6 F005 0028 F0               		dc.b $F0, 5, 0, $28, $F0	
000138DB 04                         SME_t60cE_1B:	dc.b 4	
000138DC E005 0028 C0               		dc.b $E0, 5, 0, $28, $C0	
000138E1 E005 0028 30               		dc.b $E0, 5, 0, $28, $30	
000138E6 1005 0028 30               		dc.b $10, 5, 0, $28, $30	
000138EB 1005 0028 C0               		dc.b $10, 5, 0, $28, $C0	
000138F0 04                         SME_t60cE_30:	dc.b 4	
000138F1 E005 0028 80               		dc.b $E0, 5, 0, $28, $80	
000138F6 E005 0028 70               		dc.b $E0, 5, 0, $28, $70	
000138FB 1005 0028 70               		dc.b $10, 5, 0, $28, $70	
00013900 1005 0028 80               		dc.b $10, 5, 0, $28, $80	
00013906 00                         		even
00013906 00                         		even
00013906                            
00013906                            		include	"_incObj\5D Fan.asm"
00013906                            ; ---------------------------------------------------------------------------
00013906                            ; Object 5D - fans (SLZ)
00013906                            ; ---------------------------------------------------------------------------
00013906                            
00013906                            Fan:
00013906 7000                       		moveq	#0,d0
00013908 1028 0024                  		move.b	obRoutine(a0),d0
0001390C 323B 0000                  		move.w	Fan_Index(pc,d0.w),d1
00013910 4EFB 1000                  		jmp	Fan_Index(pc,d1.w)
00013914                            ; ===========================================================================
00013914 0000                       Fan_Index:	dc.w Fan_Main-Fan_Index
00013916 0000                       		dc.w Fan_Delay-Fan_Index
00013918                            
00013918 =00000030                  fan_time:	equ $30		; time between switching on/off
00013918 =00000032                  fan_switch:	equ $32		; on/off switch
00013918                            ; ===========================================================================
00013918                            
00013918                            Fan_Main:	; Routine 0
00013918 5428 0024                  		addq.b	#2,obRoutine(a0)
0001391C 217C 0000 0000 0004        		move.l	#Map_Fan,obMap(a0)
00013924 317C 43A0 0002             		move.w	#$43A0,obGfx(a0)
0001392A 0028 0004 0001             		ori.b	#4,obRender(a0)
00013930 117C 0010 0014             		move.b	#$10,obActWid(a0)
00013936 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001393C                            
0001393C                            Fan_Delay:	; Routine 2
0001393C 0828 0001 0028             		btst	#1,obSubtype(a0) ; is object type 02/03 (always on)?
00013942 6600                       		bne.s	@blow		; if yes, branch
00013944 5368 0030                  		subq.w	#1,fan_time(a0)	; subtract 1 from time delay
00013948 6A00                       		bpl.s	@blow		; if time remains, branch
0001394A 317C 0078 0030             		move.w	#120,fan_time(a0) ; set delay to 2 seconds
00013950 0868 0000 0032             		bchg	#0,fan_switch(a0) ; switch fan on/off
00013956 6700                       		beq.s	@blow		; if fan is off, branch
00013958 317C 00B4 0030             		move.w	#180,fan_time(a0) ; set delay to 3 seconds
0001395E                            
0001395E                            @blow:
0001395E 4A28 0032                  		tst.b	fan_switch(a0)	; is fan switched on?
00013962 6600 0000                  		bne.w	@chkdel		; if not, branch
00013966 43F8 D000                  		lea	(v_player).w,a1
0001396A 3029 0008                  		move.w	obX(a1),d0
0001396E 9068 0008                  		sub.w	obX(a0),d0
00013972 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
00013978 6600                       		bne.s	@chksonic	; if yes, branch
0001397A 4440                       		neg.w	d0
0001397C                            
0001397C                            @chksonic:
0001397C 0640 0050                  		addi.w	#$50,d0
00013980 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00013984 6400                       		bcc.s	@animate	; if yes, branch
00013986 3229 000C                  		move.w	obY(a1),d1
0001398A 0641 0060                  		addi.w	#$60,d1
0001398E 9268 000C                  		sub.w	obY(a0),d1
00013992 6500                       		bcs.s	@animate	; branch if Sonic is too low
00013994 0C41 0070                  		cmpi.w	#$70,d1
00013998 6400                       		bcc.s	@animate	; branch if Sonic is too high
0001399A 0440 0050                  		subi.w	#$50,d0		; is Sonic more than $50 pixels from the fan?
0001399E 6400                       		bcc.s	@faraway	; if yes, branch
000139A0 4640                       		not.w	d0
000139A2 D040                       		add.w	d0,d0
000139A4                            
000139A4                            	@faraway:
000139A4 0640 0060                  		addi.w	#$60,d0
000139A8 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
000139AE 6600                       		bne.s	@right		; if yes, branch
000139B0 4440                       		neg.w	d0
000139B2                            
000139B2                            	@right:
000139B2 4400                       		neg.b	d0
000139B4 E840                       		asr.w	#4,d0
000139B6 0828 0000 0028             		btst	#0,obSubtype(a0)
000139BC 6700                       		beq.s	@movesonic
000139BE 4440                       		neg.w	d0
000139C0                            
000139C0                            	@movesonic:
000139C0 D169 0008                  		add.w	d0,obX(a1)	; push Sonic away from the fan
000139C4                            
000139C4                            @animate:
000139C4 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000139C8 6A00                       		bpl.s	@chkdel
000139CA 117C 0000 001E             		move.b	#0,obTimeFrame(a0)
000139D0 5228 001B                  		addq.b	#1,obAniFrame(a0)
000139D4 0C28 0003 001B             		cmpi.b	#3,obAniFrame(a0)
000139DA 6500                       		bcs.s	@noreset
000139DC 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset after 4 frames
000139E2                            
000139E2                            	@noreset:
000139E2 7000                       		moveq	#0,d0
000139E4 0828 0000 0028             		btst	#0,obSubtype(a0)
000139EA 6700                       		beq.s	@noflip
000139EC 7002                       		moveq	#2,d0
000139EE                            
000139EE                            	@noflip:
000139EE D028 001B                  		add.b	obAniFrame(a0),d0
000139F2 1140 001A                  		move.b	d0,obFrame(a0)
000139F6                            
000139F6                            @chkdel:
000139F6 6100 BE36                  		bsr.w	DisplaySprite
00013A18 4E75                       		rts	
00013A18 4E75                       		rts	
00013A1A                            Map_Fan:	include	"_maps\Fan.asm"
00013A1A                            ; ---------------------------------------------------------------------------
00013A1A                            ; Sprite mappings - fans (SLZ)
00013A1A                            ; ---------------------------------------------------------------------------
00013A1A                            Map_Fan_internal:
00013A1A 0000                       		dc.w @fan1-Map_Fan_internal
00013A1C 0000                       		dc.w @fan2-Map_Fan_internal
00013A1E 0000                       		dc.w @fan3-Map_Fan_internal
00013A20 0000                       		dc.w @fan2-Map_Fan_internal
00013A22 0000                       		dc.w @fan1-Map_Fan_internal
00013A24 02                         @fan1:		dc.b 2
00013A25 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00013A2A 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00013A2F 02                         @fan2:		dc.b 2
00013A30 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00013A35 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00013A3A 02                         @fan3:		dc.b 2
00013A3B F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00013A40 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00013A46 00                         		even
00013A46 00                         		even
00013A46                            		include	"_incObj\5E Seesaw.asm"
00013A46                            ; ---------------------------------------------------------------------------
00013A46                            ; Object 5E - seesaws (SLZ)
00013A46                            ; ---------------------------------------------------------------------------
00013A46                            
00013A46                            Seesaw:
00013A46 7000                       		moveq	#0,d0
00013A48 1028 0024                  		move.b	obRoutine(a0),d0
00013A4C 323B 0000                  		move.w	See_Index(pc,d0.w),d1
00013A50 4EBB 1000                  		jsr	See_Index(pc,d1.w)
00013A54 3028 0000                  		move.w	see_origX(a0),d0
00013A58 0240 FF80                  		andi.w	#$FF80,d0
00013A5C 3238 F700                  		move.w	(v_screenposx).w,d1
00013A60 0441 0080                  		subi.w	#$80,d1
00013A64 0241 FF80                  		andi.w	#$FF80,d1
00013A68 9041                       		sub.w	d1,d0
00013A6A 6B00 BE02                  		bmi.w	DeleteObject
00013A6E 0C40 0280                  		cmpi.w	#$280,d0
00013A72 6200 BDFA                  		bhi.w	DeleteObject
00013A76 6000 BDB6                  		bra.w	DisplaySprite
00013A7A                            ; ===========================================================================
00013A7A 0000                       See_Index:	dc.w See_Main-See_Index
00013A7C 0000                       		dc.w See_Slope-See_Index
00013A7E 0000                       		dc.w See_Slope2-See_Index
00013A80 0000                       		dc.w See_Spikeball-See_Index
00013A82 0000                       		dc.w See_MoveSpike-See_Index
00013A84 0000                       		dc.w See_SpikeFall-See_Index
00013A86                            
00013A86 =00000030                  see_origX:	equ $30		; original x-axis position
00013A86 =00000034                  see_origY:	equ $34		; original y-axis position
00013A86 =00000038                  see_speed:	equ $38		; speed of collision
00013A86 =0000003A                  see_frame:	equ $3A		; 
00013A86 =0000003C                  see_parent:	equ $3C		; RAM address of parent object
00013A86                            ; ===========================================================================
00013A86                            
00013A86                            See_Main:	; Routine 0
00013A86 5428 0024                  		addq.b	#2,obRoutine(a0)
00013A8A 217C 0000 0000 0004        		move.l	#Map_Seesaw,obMap(a0)
00013A92 317C 0374 0002             		move.w	#$374,obGfx(a0)
00013A98 0028 0004 0001             		ori.b	#4,obRender(a0)
00013A9E 117C 0004 0018             		move.b	#4,obPriority(a0)
00013AA4 117C 0030 0014             		move.b	#$30,obActWid(a0)
00013AAA 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
00013AB0 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 ?
00013AB4 6600                       		bne.s	@noball		; if not, branch
00013AB6                            
00013AB6 6100 C326                  		bsr.w	FindNextFreeObj
00013ABA 6600                       		bne.s	@noball
00013ABC 12BC 005E                  		move.b	#id_Seesaw,0(a1) ; load spikeball object
00013AC0 5C29 0024                  		addq.b	#6,obRoutine(a1) ; use See_Spikeball routine
00013AC4 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013ACA 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013AD0 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00013AD6 2348 003C                  		move.l	a0,see_parent(a1)
00013ADA                            
00013ADA                            	@noball:
00013ADA 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
00013AE0 6700                       		beq.s	@noflip		; if not, branch
00013AE2 117C 0002 001A             		move.b	#2,obFrame(a0)	; use different frame
00013AE8                            
00013AE8                            	@noflip:
00013AE8 1168 001A 003A             		move.b	obFrame(a0),see_frame(a0)
00013AEE                            
00013AEE                            See_Slope:	; Routine 2
00013AEE 1228 003A                  		move.b	see_frame(a0),d1
00013AF2 6100 0000                  		bsr.w	See_ChgFrame
00013AF6 45F9 0000 0000             		lea	(See_DataSlope).l,a2
00013AFC 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00013B02 6700                       		beq.s	@notflat	; if not, branch
00013B04 45F9 0000 0000             		lea	(See_DataFlat).l,a2
00013B0A                            
00013B0A                            	@notflat:
00013B0A 43F8 D000                  		lea	(v_player).w,a1
00013B0E 3169 0012 0038             		move.w	obVelY(a1),see_speed(a0)
00013B14 323C 0030                  		move.w	#$30,d1
00013B18 4EB9 0000 8D5C             		jsr	(SlopeObject).l
00013B1E 4E75                       		rts	
00013B20                            ; ===========================================================================
00013B20                            
00013B20                            See_Slope2:	; Routine 4
00013B20 6100 0000                  		bsr.w	See_ChkSide
00013B24 45F9 0000 0000             		lea	(See_DataSlope).l,a2
00013B2A 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00013B30 6700                       		beq.s	@notflat	; if not, branch
00013B32 45F9 0000 0000             		lea	(See_DataFlat).l,a2
00013B38                            
00013B38                            	@notflat:
00013B38 323C 0030                  		move.w	#$30,d1
00013B3C 4EB9 0000 8DFC             		jsr	(ExitPlatform).l
00013B42 323C 0030                  		move.w	#$30,d1
00013B46 3428 0008                  		move.w	obX(a0),d2
00013B4A 4EB9 0000 9D96             		jsr	(SlopeObject2).l
00013B50 4E75                       		rts	
00013B52                            ; ===========================================================================
00013B52                            
00013B52                            See_ChkSide:
00013B52 7202                       		moveq	#2,d1
00013B54 43F8 D000                  		lea	(v_player).w,a1
00013B58 3028 0008                  		move.w	obX(a0),d0
00013B5C 9069 0008                  		sub.w	obX(a1),d0	; is Sonic on the left side of the seesaw?
00013B60 6400                       		bcc.s	@leftside	; if yes, branch
00013B62 4440                       		neg.w	d0
00013B64 7200                       		moveq	#0,d1
00013B66                            
00013B66                            	@leftside:
00013B66 0C40 0008                  		cmpi.w	#8,d0
00013B6A 6400                       		bcc.s	See_ChgFrame
00013B6C 7201                       		moveq	#1,d1
00013B6E                            
00013B6E                            See_ChgFrame:
00013B6E 1028 001A                  		move.b	obFrame(a0),d0
00013B72 B001                       		cmp.b	d1,d0		; does frame need to change?
00013B74 6700                       		beq.s	@noflip		; if not, branch
00013B76 6400                       		bcc.s	@loc_11772
00013B78 5400                       		addq.b	#2,d0
00013B7A                            
00013B7A                            	@loc_11772:
00013B7A 5300                       		subq.b	#1,d0
00013B7C 1140 001A                  		move.b	d0,obFrame(a0)
00013B80 1141 003A                  		move.b	d1,see_frame(a0)
00013B84 08A8 0000 0001             		bclr	#0,obRender(a0)
00013B8A 0828 0001 001A             		btst	#1,obFrame(a0)
00013B90 6700                       		beq.s	@noflip
00013B92 08E8 0000 0001             		bset	#0,obRender(a0)
00013B98                            
00013B98                            	@noflip:
00013B98 4E75                       		rts	
00013B9A                            ; ===========================================================================
00013B9A                            
00013B9A                            See_Spikeball:	; Routine 6
00013B9A 5428 0024                  		addq.b	#2,obRoutine(a0)
00013B9E 217C 0000 0000 0004        		move.l	#Map_SSawBall,obMap(a0)
00013BA6 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
00013BAC 0028 0004 0001             		ori.b	#4,obRender(a0)
00013BB2 117C 0004 0018             		move.b	#4,obPriority(a0)
00013BB8 117C 008B 0020             		move.b	#$8B,obColType(a0)
00013BBE 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013BC4 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
00013BCA 0668 0028 0008             		addi.w	#$28,obX(a0)
00013BD0 3168 000C 0034             		move.w	obY(a0),see_origY(a0)
00013BD6 117C 0001 001A             		move.b	#1,obFrame(a0)
00013BDC 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
00013BE2 6700                       		beq.s	See_MoveSpike	; if not, branch
00013BE4 0468 0050 0008             		subi.w	#$50,obX(a0)	; move spikeball to the other side
00013BEA 117C 0002 003A             		move.b	#2,see_frame(a0)
00013BF0                            
00013BF0                            See_MoveSpike:	; Routine 8
00013BF0 2268 003C                  		movea.l	see_parent(a0),a1
00013BF4 7000                       		moveq	#0,d0
00013BF6 1028 003A                  		move.b	see_frame(a0),d0
00013BFA 9029 003A                  		sub.b	see_frame(a1),d0
00013BFE 6700                       		beq.s	loc_1183E
00013C00 6400                       		bcc.s	loc_117FC
00013C02 4400                       		neg.b	d0
00013C04                            
00013C04                            loc_117FC:
00013C04 323C F7E8                  		move.w	#-$818,d1
00013C08 343C FEEC                  		move.w	#-$114,d2
00013C0C 0C00 0001                  		cmpi.b	#1,d0
00013C10 6700                       		beq.s	loc_11822
00013C12 323C F510                  		move.w	#-$AF0,d1
00013C16 343C FF34                  		move.w	#-$CC,d2
00013C1A 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00013C20 6D00                       		blt.s	loc_11822
00013C22 323C F200                  		move.w	#-$E00,d1
00013C26 343C FF60                  		move.w	#-$A0,d2
00013C2A                            
00013C2A                            loc_11822:
00013C2A 3141 0012                  		move.w	d1,obVelY(a0)
00013C2E 3142 0010                  		move.w	d2,obVelX(a0)
00013C32 3028 0008                  		move.w	obX(a0),d0
00013C36 9068 0030                  		sub.w	see_origX(a0),d0
00013C3A 6400                       		bcc.s	loc_11838
00013C3C 4468 0010                  		neg.w	obVelX(a0)
00013C40                            
00013C40                            loc_11838:
00013C40 5428 0024                  		addq.b	#2,obRoutine(a0)
00013C44 6000                       		bra.s	See_SpikeFall
00013C46                            ; ===========================================================================
00013C46                            
00013C46                            loc_1183E:
00013C46 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013C4C 7000                       		moveq	#0,d0
00013C4E 1029 001A                  		move.b	obFrame(a1),d0
00013C52 343C 0028                  		move.w	#$28,d2
00013C56 3228 0008                  		move.w	obX(a0),d1
00013C5A 9268 0030                  		sub.w	see_origX(a0),d1
00013C5E 6400                       		bcc.s	loc_1185C
00013C60 4442                       		neg.w	d2
00013C62 5440                       		addq.w	#2,d0
00013C64                            
00013C64                            loc_1185C:
00013C64 D040                       		add.w	d0,d0
00013C66 3228 0034                  		move.w	see_origY(a0),d1
00013C6A D272 0000                  		add.w	(a2,d0.w),d1
00013C6E 3141 000C                  		move.w	d1,obY(a0)
00013C72 D468 0030                  		add.w	see_origX(a0),d2
00013C76 3142 0008                  		move.w	d2,obX(a0)
00013C7A 4268 000E                  		clr.w	obY+2(a0)
00013C7E 4268 000A                  		clr.w	obX+2(a0)
00013C82 4E75                       		rts	
00013C84                            ; ===========================================================================
00013C84                            
00013C84                            See_SpikeFall:	; Routine $A
00013C84 4A68 0012                  		tst.w	obVelY(a0)	; is spikeball falling down?
00013C88 6A00                       		bpl.s	loc_1189A	; if yes, branch
00013C8A 6100 BB56                  		bsr.w	ObjectFall
00013C8E 3028 0034                  		move.w	see_origY(a0),d0
00013C92 0440 002F                  		subi.w	#$2F,d0
00013C96 B068 000C                  		cmp.w	obY(a0),d0
00013C9A 6E00                       		bgt.s	locret_11898
00013C9C 6100 BB44                  		bsr.w	ObjectFall
00013CA0                            
00013CA0                            locret_11898:
00013CA0 4E75                       		rts	
00013CA2                            ; ===========================================================================
00013CA2                            
00013CA2                            loc_1189A:
00013CA2 6100 BB3E                  		bsr.w	ObjectFall
00013CA6 2268 003C                  		movea.l	see_parent(a0),a1
00013CAA 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013CB0 7000                       		moveq	#0,d0
00013CB2 1029 001A                  		move.b	obFrame(a1),d0
00013CB6 3228 0008                  		move.w	obX(a0),d1
00013CBA 9268 0030                  		sub.w	see_origX(a0),d1
00013CBE 6400                       		bcc.s	loc_118BA
00013CC0 5440                       		addq.w	#2,d0
00013CC2                            
00013CC2                            loc_118BA:
00013CC2 D040                       		add.w	d0,d0
00013CC4 3228 0034                  		move.w	see_origY(a0),d1
00013CC8 D272 0000                  		add.w	(a2,d0.w),d1
00013CCC B268 000C                  		cmp.w	obY(a0),d1
00013CD0 6E00                       		bgt.s	locret_11938
00013CD2 2268 003C                  		movea.l	see_parent(a0),a1
00013CD6 7202                       		moveq	#2,d1
00013CD8 4A68 0010                  		tst.w	obVelX(a0)
00013CDC 6B00                       		bmi.s	See_Spring
00013CDE 7200                       		moveq	#0,d1
00013CE0                            
00013CE0                            See_Spring:
00013CE0 1341 003A                  		move.b	d1,$3A(a1)
00013CE4 1141 003A                  		move.b	d1,see_frame(a0)
00013CE8 B229 001A                  		cmp.b	obFrame(a1),d1
00013CEC 6700                       		beq.s	loc_1192C
00013CEE 08A9 0003 0022             		bclr	#3,obStatus(a1)
00013CF4 6700                       		beq.s	loc_1192C
00013CF6 4229 0025                  		clr.b	ob2ndRout(a1)
00013CFA 137C 0002 0024             		move.b	#2,obRoutine(a1)
00013D00 45F8 D000                  		lea	(v_player).w,a2
00013D04 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
00013D0A 446A 0012                  		neg.w	obVelY(a2)
00013D0E 08EA 0001 0022             		bset	#1,obStatus(a2)
00013D14 08AA 0003 0022             		bclr	#3,obStatus(a2)
00013D1A 422A 003C                  		clr.b	$3C(a2)
00013D1E 157C 0000 001C             		move.b	#id_Spring,obAnim(a2) ; change Sonic's animation to "spring" ($10)
00013D24 157C 0002 0024             		move.b	#2,obRoutine(a2)
00013D34                            
00013D34                            loc_1192C:
00013D34 4268 0010                  		clr.w	obVelX(a0)
00013D38 4268 0012                  		clr.w	obVelY(a0)
00013D3C 5528 0024                  		subq.b	#2,obRoutine(a0)
00013D40                            
00013D40                            locret_11938:
00013D40 4E75                       		rts	
00013D42                            ; ===========================================================================
00013D42 FFF8 FFE4 FFD1 FFE4 FFF8   See_Speeds:	dc.w -8, -$1C, -$2F, -$1C, -8
00013D4C                            
00013D4C                            See_DataSlope:	incbin	"misc\slzssaw1.bin"
00013D7C                            		even
00013D7C                            See_DataFlat:	incbin	"misc\slzssaw2.bin"
00013DAC                            		even
00013DAC                            		even
00013DAC                            Map_Seesaw:	include	"_maps\Seesaw.asm"
00013DAC                            ; ---------------------------------------------------------------------------
00013DAC                            ; Sprite mappings - seesaws (SLZ)
00013DAC                            ; ---------------------------------------------------------------------------
00013DAC                            Map_Seesaw_internal:
00013DAC 0000                       		dc.w @sloping-Map_Seesaw_internal
00013DAE 0000                       		dc.w @flat-Map_Seesaw_internal
00013DB0 0000                       		dc.w @sloping-Map_Seesaw_internal
00013DB2 0000                       		dc.w @flat-Map_Seesaw_internal
00013DB4 07                         @sloping:	dc.b 7
00013DB5 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00013DBA DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00013DBF E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00013DC4 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00013DC9 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00013DCE F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00013DD3 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00013DD8 04                         @flat:		dc.b 4
00013DD9 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00013DDE E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00013DE3 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00013DE8 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00013DEE 00                         		even
00013DEE 00                         		even
00013DEE                            Map_SSawBall:	include	"_maps\Seesaw Ball.asm"
00013DEE                            ; ---------------------------------------------------------------------------
00013DEE                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00013DEE                            ; ---------------------------------------------------------------------------
00013DEE                            Map_SSawBall_internal:
00013DEE 0000                       		dc.w @red-Map_SSawBall_internal
00013DF0 0000                       		dc.w @silver-Map_SSawBall_internal
00013DF2 01                         @red:		dc.b 1
00013DF3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013DF8 01                         @silver:	dc.b 1
00013DF9 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00013DFE                            		even
00013DFE                            		even
00013DFE                            		include	"_incObj\5F Bomb Enemy.asm"
00013DFE                            ; ---------------------------------------------------------------------------
00013DFE                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00013DFE                            ; ---------------------------------------------------------------------------
00013DFE                            
00013DFE                            Bomb:
00013DFE 7000                       		moveq	#0,d0
00013E00 1028 0024                  		move.b	obRoutine(a0),d0
00013E04 323B 0000                  		move.w	Bom_Index(pc,d0.w),d1
00013E08 4EFB 1000                  		jmp	Bom_Index(pc,d1.w)
00013E0C                            ; ===========================================================================
00013E0C 0000                       Bom_Index:	dc.w Bom_Main-Bom_Index
00013E0E 0000                       		dc.w Bom_Action-Bom_Index
00013E10 0000                       		dc.w Bom_Display-Bom_Index
00013E12 0000                       		dc.w Bom_End-Bom_Index
00013E14                            
00013E14 =00000030                  bom_time:	equ $30		; time of fuse
00013E14 =00000034                  bom_origY:	equ $34		; original y-axis position
00013E14 =0000003C                  bom_parent:	equ $3C		; address of parent object
00013E14                            ; ===========================================================================
00013E14                            
00013E14                            Bom_Main:	; Routine 0
00013E14 5428 0024                  		addq.b	#2,obRoutine(a0)
00013E18 217C 0000 0000 0004        		move.l	#Map_Bomb,obMap(a0)
00013E20 317C 0400 0002             		move.w	#$400,obGfx(a0)
00013E26 0028 0004 0001             		ori.b	#4,obRender(a0)
00013E2C 317C 0180 0018             		move.w	#$180,obPriority(a0)
00013E32 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013E38 1028 0028                  		move.b	obSubtype(a0),d0
00013E3C 6700                       		beq.s	loc_11A3C
00013E3E 1140 0024                  		move.b	d0,obRoutine(a0)
00013E42 4E75                       		rts	
00013E44                            ; ===========================================================================
00013E44                            
00013E44                            loc_11A3C:
00013E44 117C 009A 0020             		move.b	#$9A,obColType(a0)
00013E4A 0868 0000 0022             		bchg	#0,obStatus(a0)
00013E50                            
00013E50                            Bom_Action:	; Routine 2
00013E50 7000                       		moveq	#0,d0
00013E52 1028 0025                  		move.b	ob2ndRout(a0),d0
00013E56 323B 0000                  		move.w	@index(pc,d0.w),d1
00013E5A 4EBB 1000                  		jsr	@index(pc,d1.w)
00013E5E 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013E64 6100 8A7E                  		bsr.w	AnimateSprite
00013E68 6000 DA78                  		bra.w	RememberState
00013E6C                            ; ===========================================================================
00013E6C 0000                       @index:		dc.w @walk-@index
00013E6E 0000                       		dc.w @wait-@index
00013E70 0000                       		dc.w @explode-@index
00013E72                            ; ===========================================================================
00013E72                            
00013E72                            @walk:
00013E72 6100 0000                  		bsr.w	@chksonic
00013E76 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013E7A 6A00                       		bpl.s	@noflip		; if time remains, branch
00013E7C 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @wait
00013E80 317C 05FF 0030             		move.w	#1535,bom_time(a0) ; set time delay to 25 seconds
00013E86 317C 0010 0010             		move.w	#$10,obVelX(a0)
00013E8C 117C 0001 001C             		move.b	#1,obAnim(a0)	; use walking animation
00013E92 0868 0000 0022             		bchg	#0,obStatus(a0)
00013E98 6700                       		beq.s	@noflip
00013E9A 4468 0010                  		neg.w	obVelX(a0)	; change direction
00013E9E                            
00013E9E                            	@noflip:
00013E9E 4E75                       		rts	
00013EA0                            ; ===========================================================================
00013EA0                            
00013EA0                            @wait:
00013EA0 6100 0000                  		bsr.w	@chksonic
00013EA4 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013EA8 6B00                       		bmi.s	@stopwalking	; if time expires, branch
00013EAA 6100 B96E                  		bsr.w	SpeedToPos
00013EAE 4E75                       		rts	
00013EB0                            ; ===========================================================================
00013EB0                            
00013EB0                            	@stopwalking:
00013EB0 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00013EB4 317C 00B3 0030             		move.w	#179,bom_time(a0) ; set time delay to 3 seconds
00013EBA 4268 0010                  		clr.w	obVelX(a0)	; stop walking
00013EBE 117C 0000 001C             		move.b	#0,obAnim(a0)	; use waiting animation
00013EC4 4E75                       		rts	
00013EC6                            ; ===========================================================================
00013EC6                            
00013EC6                            @explode:
00013EC6 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013ECA 6A00                       		bpl.s	@noexplode	; if time remains, branch
00013ECC 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0) ; change bomb into an explosion
00013ED0 117C 0000 0024             		move.b	#0,obRoutine(a0)
00013ED6                            
00013ED6                            	@noexplode:
00013ED6 4E75                       		rts	
00013ED8                            ; ===========================================================================
00013ED8                            
00013ED8                            @chksonic:
00013ED8 3038 D008                  		move.w	(v_player+obX).w,d0
00013EDC 9068 0008                  		sub.w	obX(a0),d0
00013EE0 6400                       		bcc.s	@isleft
00013EE2 4440                       		neg.w	d0
00013EE4                            
00013EE4                            	@isleft:
00013EE4 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels?
00013EE8 6400                       		bcc.s	@outofrange	; if not, branch
00013EEA 3038 D00C                  		move.w	(v_player+obY).w,d0
00013EEE 9068 000C                  		sub.w	obY(a0),d0
00013EF2 6400                       		bcc.s	@isabove
00013EF4 4440                       		neg.w	d0
00013EF6                            
00013EF6                            	@isabove:
00013EF6 0C40 0060                  		cmpi.w	#$60,d0
00013EFA 6400                       		bcc.s	@outofrange
00013EFC 4A78 FE08                  		tst.w	(v_debuguse).w
00013F00 6600                       		bne.s	@outofrange
00013F02                            
00013F02 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
00013F08 317C 008F 0030             		move.w	#143,bom_time(a0) ; set fuse time
00013F0E 4268 0010                  		clr.w	obVelX(a0)
00013F12 117C 0002 001C             		move.b	#2,obAnim(a0)	; use activated animation
00013F18 6100 BEC4                  		bsr.w	FindNextFreeObj
00013F1C 6600                       		bne.s	@outofrange
00013F1E 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load fuse object
00013F22 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013F28 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013F2E 3368 000C 0034             		move.w	obY(a0),bom_origY(a1)
00013F34 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00013F3A 137C 0004 0028             		move.b	#4,obSubtype(a1)
00013F40 137C 0003 001C             		move.b	#3,obAnim(a1)
00013F46 337C 0010 0012             		move.w	#$10,obVelY(a1)
00013F4C 0828 0001 0022             		btst	#1,obStatus(a0)	; is bomb upside-down?
00013F52 6700                       		beq.s	@normal		; if not, branch
00013F54 4469 0012                  		neg.w	obVelY(a1)	; reverse direction for fuse
00013F58                            
00013F58                            	@normal:
00013F58 337C 008F 0030             		move.w	#143,bom_time(a1) ; set fuse time
00013F5E 2348 003C                  		move.l	a0,bom_parent(a1)
00013F62                            
00013F62                            @outofrange:
00013F62 4E75                       		rts	
00013F64                            ; ===========================================================================
00013F64                            
00013F64                            Bom_Display:	; Routine 4
00013F64 6100                       		bsr.s	loc_11B70
00013F66 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013F6C 6100 8976                  		bsr.w	AnimateSprite
00013F70 6000 D970                  		bra.w	RememberState
00013F74                            ; ===========================================================================
00013F74                            
00013F74                            loc_11B70:
00013F74 5368 0030                  		subq.w	#1,bom_time(a0)
00013F78 6B00                       		bmi.s	loc_11B7C
00013F7A 6100 B89E                  		bsr.w	SpeedToPos
00013F7E 4E75                       		rts	
00013F80                            ; ===========================================================================
00013F80                            
00013F80                            loc_11B7C:
00013F80 4268 0030                  		clr.w	bom_time(a0)
00013F84 4228 0024                  		clr.b	obRoutine(a0)
00013F88 3168 0034 000C             		move.w	bom_origY(a0),obY(a0)
00013F8E 7203                       		moveq	#3,d1
00013F90 2248                       		movea.l	a0,a1
00013F92 45F9 0000 0000             		lea	(Bom_ShrSpeed).l,a2 ; load shrapnel speed data
00013F98 6000                       		bra.s	@makeshrapnel
00013F9A                            ; ===========================================================================
00013F9A                            
00013F9A                            	@loop:
00013F9A 6100 BE42                  		bsr.w	FindNextFreeObj
00013F9E 6600                       		bne.s	@fail
00013FA0                            
00013FA0                            @makeshrapnel:
00013FA0 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load shrapnel	object
00013FA4 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013FAA 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013FB0 137C 0006 0028             		move.b	#6,obSubtype(a1)
00013FB6 137C 0004 001C             		move.b	#4,obAnim(a1)
00013FBC 335A 0010                  		move.w	(a2)+,obVelX(a1)
00013FC0 335A 0012                  		move.w	(a2)+,obVelY(a1)
00013FC4 137C 0098 0020             		move.b	#$98,obColType(a1)
00013FCA 08E9 0007 0001             		bset	#7,obRender(a1)
00013FD0                            
00013FD0                            	@fail:
00013FD0 51C9 FFC8                  		dbf	d1,@loop	; repeat 3 more	times
00013FD4                            
00013FD4 117C 0006 0024             		move.b	#6,obRoutine(a0)
00013FDA                            
00013FDA                            Bom_End:	; Routine 6
00013FDA 6100 B83E                  		bsr.w	SpeedToPos
00013FDE 0668 0018 0012             		addi.w	#$18,obVelY(a0)
00013FE4 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013FEA 6100 88F8                  		bsr.w	AnimateSprite
00013FEE 4A28 0001                  		tst.b	obRender(a0)
00013FF2 6A00 B87A                  		bpl.w	DeleteObject
00013FF6 6000 B836                  		bra.w	DisplaySprite
00013FFA                            ; ===========================================================================
00013FFA FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00013FFA FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
0001400A                            		include	"_anim\Bomb Enemy.asm"
0001400A                            ; ---------------------------------------------------------------------------
0001400A                            ; Animation script - Bomb enemy
0001400A                            ; ---------------------------------------------------------------------------
0001400A 0000                       Ani_Bomb:	dc.w @stand-Ani_Bomb
0001400C 0000                       		dc.w @walk-Ani_Bomb
0001400E 0000                       		dc.w @activated-Ani_Bomb
00014010 0000                       		dc.w @fuse-Ani_Bomb
00014012 0000                       		dc.w @shrapnel-Ani_Bomb
00014014 1301 00FF                  @stand:		dc.b $13, 1, 0,	afEnd
00014018 1305 0403 02FF             @walk:		dc.b $13, 5, 4,	3, 2, afEnd
0001401E 1307 06FF                  @activated:	dc.b $13, 7, 6,	afEnd
00014022 0308 09FF                  @fuse:		dc.b 3,	8, 9, afEnd
00014026 030A 0BFF                  @shrapnel:	dc.b 3,	$A, $B,	afEnd
0001402A                            		even
0001402A                            		even
0001402A                            Map_Bomb:	include	"_maps\Bomb Enemy.asm"
0001402A                            ; ---------------------------------------------------------------------------
0001402A                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001402A                            ; ---------------------------------------------------------------------------
0001402A                            Map_Bomb_internal:
0001402A 0000                       		dc.w @stand1-Map_Bomb_internal
0001402C 0000                       		dc.w @stand2-Map_Bomb_internal
0001402E 0000                       		dc.w @walk1-Map_Bomb_internal
00014030 0000                       		dc.w @walk2-Map_Bomb_internal
00014032 0000                       		dc.w @walk3-Map_Bomb_internal
00014034 0000                       		dc.w @walk4-Map_Bomb_internal
00014036 0000                       		dc.w @activate1-Map_Bomb_internal
00014038 0000                       		dc.w @activate2-Map_Bomb_internal
0001403A 0000                       		dc.w @fuse1-Map_Bomb_internal
0001403C 0000                       		dc.w @fuse2-Map_Bomb_internal
0001403E 0000                       		dc.w @shrapnel1-Map_Bomb_internal
00014040 0000                       		dc.w @shrapnel2-Map_Bomb_internal
00014042 03                         @stand1:	dc.b 3
00014043 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb standing still
00014048 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001404D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00014052 03                         @stand2:	dc.b 3
00014053 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00014058 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001405D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00014062 03                         @walk1:		dc.b 3
00014063 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4	; bomb walking
00014068 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
0001406D E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00014072 03                         @walk2:		dc.b 3
00014073 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00014078 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
0001407D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00014082 03                         @walk3:		dc.b 3
00014083 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00014088 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
0001408D E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00014092 03                         @walk4:		dc.b 3
00014093 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00014098 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
0001409D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000140A2 02                         @activate1:	dc.b 2
000140A3 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb during detonation countdown
000140A8 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000140AD 02                         @activate2:	dc.b 2
000140AE F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000140B3 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000140B8 01                         @fuse1:		dc.b 1
000140B9 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC ; fuse	(just before it	explodes)
000140BE 01                         @fuse2:		dc.b 1
000140BF E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
000140C4 01                         @shrapnel1:	dc.b 1
000140C5 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC ; shrapnel (after it exploded)
000140CA 01                         @shrapnel2:	dc.b 1
000140CB FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000140D0                            		even
000140D0                            		even
000140D0                            
000140D0                            		include	"_incObj\60 Orbinaut.asm"
000140D0                            ; ---------------------------------------------------------------------------
000140D0                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
000140D0                            ; ---------------------------------------------------------------------------
000140D0                            
000140D0                            Orbinaut:
000140D0 7000                       		moveq	#0,d0
000140D2 1028 0024                  		move.b	obRoutine(a0),d0
000140D6 323B 0000                  		move.w	Orb_Index(pc,d0.w),d1
000140DA 4EFB 1000                  		jmp	Orb_Index(pc,d1.w)
000140DE                            ; ===========================================================================
000140DE 0000                       Orb_Index:	dc.w Orb_Main-Orb_Index
000140E0 0000                       		dc.w Orb_ChkSonic-Orb_Index
000140E2 0000                       		dc.w Orb_Display-Orb_Index
000140E4 0000                       		dc.w Orb_MoveOrb-Orb_Index
000140E6 0000                       		dc.w Orb_ChkDel2-Orb_Index
000140E8                            
000140E8 =0000003C                  orb_parent:	equ $3C		; address of parent object
000140E8                            ; ===========================================================================
000140E8                            
000140E8                            Orb_Main:	; Routine 0
000140E8 217C 0000 0000 0004        		move.l	#Map_Orb,obMap(a0)
000140F0 317C 0429 0002             		move.w	#$429,obGfx(a0)	; SBZ specific code
000140F6 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
000140FC 6700                       		beq.s	@isscrap
000140FE 317C 2429 0002             		move.w	#$2429,obGfx(a0) ; SLZ specific code
00014104                            
00014104                            	@isscrap:
00014104 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
0001410A 6600                       		bne.s	@notlabyrinth
0001410C 317C 0467 0002             		move.w	#$467,obGfx(a0)	; LZ specific code
00014112                            
00014112                            	@notlabyrinth:
00014112 0028 0004 0001             		ori.b	#4,obRender(a0)
00014118 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001411E 117C 000B 0020             		move.b	#$B,obColType(a0)
00014124 117C 000C 0014             		move.b	#$C,obActWid(a0)
0001412A 7400                       		moveq	#0,d2
0001412C 45E8 0037                  		lea	$37(a0),a2
00014130 264A                       		movea.l	a2,a3
00014132 524A                       		addq.w	#1,a2
00014134 7203                       		moveq	#3,d1
00014136                            
00014136                            @makesatellites:
00014136 6100 BCA6                  		bsr.w	FindNextFreeObj
0001413A 6600                       		bne.s	@fail
0001413C 5213                       		addq.b	#1,(a3)
0001413E 3A09                       		move.w	a1,d5
00014140 0445 D000                  		subi.w	#$D000,d5
00014144 EC4D                       		lsr.w	#6,d5
00014146 0245 007F                  		andi.w	#$7F,d5
0001414A 14C5                       		move.b	d5,(a2)+
0001414C 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
0001414E 137C 0006 0024             		move.b	#6,obRoutine(a1) ; use Orb_MoveOrb routine
00014154 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
0001415A 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00014160 0029 0004 0001             		ori.b	#4,obRender(a1)
00014166 337C 0200 0018             		move.w	#$200,obPriority(a1)
0001416C 137C 0008 0014             		move.b	#8,obActWid(a1)
00014172 137C 0003 001A             		move.b	#3,obFrame(a1)
00014178 137C 0098 0020             		move.b	#$98,obColType(a1)
0001417E 1342 0026                  		move.b	d2,obAngle(a1)
00014182 0602 0040                  		addi.b	#$40,d2
00014186 2348 003C                  		move.l	a0,orb_parent(a1)
0001418A 51C9 FFAA                  		dbf	d1,@makesatellites ; repeat sequence 3 more times
0001418E                            
0001418E                            	@fail:
0001418E 7001                       		moveq	#1,d0
00014190 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left?
00014196 6700                       		beq.s	@noflip		; if not, branch
00014198 4440                       		neg.w	d0
0001419A                            
0001419A                            	@noflip:
0001419A 1140 0036                  		move.b	d0,$36(a0)
0001419E 1168 0028 0024             		move.b	obSubtype(a0),obRoutine(a0) ; if type is 02, skip Orb_ChkSonic
000141A4 5428 0024                  		addq.b	#2,obRoutine(a0)
000141A8 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move orbinaut to the left
000141AE 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left??
000141B4 6700                       		beq.s	@noflip2	; if not, branch
000141B6 4468 0010                  		neg.w	obVelX(a0)	; move orbinaut	to the right
000141BA                            
000141BA                            	@noflip2:
000141BA 4E75                       		rts	
000141BC                            ; ===========================================================================
000141BC                            
000141BC                            Orb_ChkSonic:	; Routine 2
000141BC 3038 D008                  		move.w	(v_player+obX).w,d0
000141C0 9068 0008                  		sub.w	obX(a0),d0	; is Sonic to the right of the orbinaut?
000141C4 6400                       		bcc.s	@isright	; if yes, branch
000141C6 4440                       		neg.w	d0
000141C8                            
000141C8                            	@isright:
000141C8 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
000141CC 6400                       		bcc.s	@animate	; if not, branch
000141CE 3038 D00C                  		move.w	(v_player+obY).w,d0
000141D2 9068 000C                  		sub.w	obY(a0),d0	; is Sonic above the orbinaut?
000141D6 6400                       		bcc.s	@isabove	; if yes, branch
000141D8 4440                       		neg.w	d0
000141DA                            
000141DA                            	@isabove:
000141DA 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
000141DE 6400                       		bcc.s	@animate	; if not, branch
000141E0 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
000141E4 6600                       		bne.s	@animate	; if yes, branch
000141E6 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "angry" animation
000141EC                            
000141EC                            @animate:
000141EC 43F9 0000 0000             		lea	(Ani_Orb).l,a1
000141F2 6100 86F0                  		bsr.w	AnimateSprite
000141F6 6000 0000                  		bra.w	Orb_ChkDel
000141FA                            ; ===========================================================================
000141FA                            
000141FA                            Orb_Display:	; Routine 4
000141FA 6100 B61E                  		bsr.w	SpeedToPos
000141FE                            
000141FE                            Orb_ChkDel:
0001421C 6000 B610                  		bra.w	DisplaySprite
00014220                            
00014220                            @chkgone:
00014220 45F8 FC00                  		lea	(v_objstate).w,a2
00014224 7000                       		moveq	#0,d0
00014226 1028 0023                  		move.b	obRespawnNo(a0),d0
0001422A 6700                       		beq.s	loc_11E34
0001422C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00014232                            
00014232                            loc_11E34:
00014232 45E8 0037                  		lea	$37(a0),a2
00014236 7400                       		moveq	#0,d2
00014238 141A                       		move.b	(a2)+,d2
0001423A 5342                       		subq.w	#1,d2
0001423C 6500                       		bcs.s	Orb_Delete
0001423E                            
0001423E                            loc_11E40:
0001423E 7000                       		moveq	#0,d0
00014240 101A                       		move.b	(a2)+,d0
00014242 ED48                       		lsl.w	#6,d0
00014244 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
0001424A 2240                       		movea.l	d0,a1
0001424C 6100 B622                  		bsr.w	DeleteChild
00014250 51CA FFEC                  		dbf	d2,loc_11E40
00014254                            
00014254                            Orb_Delete:
00014254 6000 B618                  		bra.w	DeleteObject
00014258                            ; ===========================================================================
00014258                            
00014258                            Orb_MoveOrb:	; Routine 6
00014258 2268 003C                  		movea.l	orb_parent(a0),a1
0001425C 0C11 0060                  		cmpi.b	#id_Orbinaut,0(a1) ; does parent object still exist?
00014260 6600 B60C                  		bne.w	DeleteObject	; if not, delete
00014264 0C29 0002 001A             		cmpi.b	#2,obFrame(a1)	; is orbinaut angry?
0001426A 6600                       		bne.s	@circle		; if not, branch
0001426C 0C28 0040 0026             		cmpi.b	#$40,obAngle(a0) ; is spikeorb directly under the orbinaut?
00014272 6600                       		bne.s	@circle		; if not, branch
00014274 5428 0024                  		addq.b	#2,obRoutine(a0)
00014278 5329 0037                  		subq.b	#1,$37(a1)
0001427C 6600                       		bne.s	@fire
0001427E 5429 0024                  		addq.b	#2,obRoutine(a1)
00014282                            
00014282                            	@fire:
00014282 317C FE00 0010             		move.w	#-$200,obVelX(a0) ; move orb to the left (quickly)
00014288 0829 0000 0022             		btst	#0,obStatus(a1)
0001428E 6700                       		beq.s	@noflip
00014290 4468 0010                  		neg.w	obVelX(a0)
00014294                            
00014294                            	@noflip:
00014294 6000 B598                  		bra.w	DisplaySprite
00014298                            ; ===========================================================================
00014298                            
00014298                            @circle:
00014298 1028 0026                  		move.b	obAngle(a0),d0
0001429C 4EB9 0000 3D28             		jsr	(CalcSine).l
000142A2 E841                       		asr.w	#4,d1
000142A4 D269 0008                  		add.w	obX(a1),d1
000142A8 3141 0008                  		move.w	d1,obX(a0)
000142AC E840                       		asr.w	#4,d0
000142AE D069 000C                  		add.w	obY(a1),d0
000142B2 3140 000C                  		move.w	d0,obY(a0)
000142B6 1029 0036                  		move.b	$36(a1),d0
000142BA D128 0026                  		add.b	d0,obAngle(a0)
000142BE 6000 B56E                  		bra.w	DisplaySprite
000142C2                            ; ===========================================================================
000142C2                            
000142C2                            Orb_ChkDel2:	; Routine 8
000142C2 6100 B556                  		bsr.w	SpeedToPos
000142C6 4A28 0001                  		tst.b	obRender(a0)
000142CA 6A00 B5A2                  		bpl.w	DeleteObject
000142CE 6000 B55E                  		bra.w	DisplaySprite
000142CE 6000 B55E                  		bra.w	DisplaySprite
000142D2                            		include	"_anim\Orbinaut.asm"
000142D2                            ; ---------------------------------------------------------------------------
000142D2                            ; Animation script - Orbinaut enemy
000142D2                            ; ---------------------------------------------------------------------------
000142D2 0000                       Ani_Orb:	dc.w @normal-Ani_Orb
000142D4 0000                       		dc.w @angers-Ani_Orb
000142D6 0F00 FF                    @normal:	dc.b $F, 0, afEnd
000142DA 00                         		even
000142DA 0F01 02FE 01               @angers:	dc.b $F, 1, 2, afBack, 1
000142E0 00                         		even
000142E0 00                         		even
000142E0                            Map_Orb:	include	"_maps\Orbinaut.asm"
000142E0                            ; ---------------------------------------------------------------------------
000142E0                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000142E0                            ; ---------------------------------------------------------------------------
000142E0                            Map_Orb_internal:
000142E0 0000                       		dc.w @normal-Map_Orb_internal
000142E2 0000                       		dc.w @medium-Map_Orb_internal
000142E4 0000                       		dc.w @angry-Map_Orb_internal
000142E6 0000                       		dc.w @spikeball-Map_Orb_internal
000142E8 01                         @normal:	dc.b 1
000142E9 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000142EE 01                         @medium:	dc.b 1
000142EF F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
000142F4 01                         @angry:		dc.b 1
000142F5 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000142FA 01                         @spikeball:	dc.b 1
000142FB F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00014300                            		even
00014300                            		even
00014300                            
00014300                            		include	"_incObj\16 Harpoon.asm"
00014300                            ; ---------------------------------------------------------------------------
00014300                            ; Object 16 - harpoon (LZ)
00014300                            ; ---------------------------------------------------------------------------
00014300                            
00014300                            Harpoon:
00014300 7000                       		moveq	#0,d0
00014302 1028 0024                  		move.b	obRoutine(a0),d0
00014306 323B 0000                  		move.w	Harp_Index(pc,d0.w),d1
0001430A 4EFB 1000                  		jmp	Harp_Index(pc,d1.w)
0001430E                            ; ===========================================================================
0001430E 0000                       Harp_Index:	dc.w Harp_Main-Harp_Index
00014310 0000                       		dc.w Harp_Move-Harp_Index
00014312 0000                       		dc.w Harp_Wait-Harp_Index
00014314                            
00014314 =00000030                  harp_time:	equ $30		; time between stabbing/retracting
00014314                            ; ===========================================================================
00014314                            
00014314                            Harp_Main:	; Routine 0
00014314 5428 0024                  		addq.b	#2,obRoutine(a0)
00014318 217C 0000 0000 0004        		move.l	#Map_Harp,obMap(a0)
00014320 317C 03CC 0002             		move.w	#$3CC,obGfx(a0)
00014326 0028 0004 0001             		ori.b	#4,obRender(a0)
0001432C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00014332 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0) ; get type (vert/horiz)
00014338 117C 0014 0014             		move.b	#$14,obActWid(a0)
0001433E 317C 003C 0030             		move.w	#60,harp_time(a0) ; set time to 1 second
00014344                            
00014344                            Harp_Move:	; Routine 2
00014344 43F9 0000 0000             		lea	(Ani_Harp).l,a1
0001434A 6100 8598                  		bsr.w	AnimateSprite
0001434E 7000                       		moveq	#0,d0
00014350 1028 001A                  		move.b	obFrame(a0),d0	; get frame number
00014354 117B 0000 0020             		move.b	@types(pc,d0.w),obColType(a0) ; get collision type
0001435A 6000 D586                  		bra.w	RememberState
0001435E                            
0001435E                            	@types:
0001435E 9B9C 9D9E 9FA0             		dc.b $9B, $9C, $9D, $9E, $9F, $A0
00014364                            		even
00014364                            
00014364                            Harp_Wait:	; Routine 4
00014364 5368 0030                  		subq.w	#1,harp_time(a0) ; decrement timer
00014368 6A00                       		bpl.s	@chkdel		; branch if time remains
0001436A 317C 003C 0030             		move.w	#60,harp_time(a0) ; reset timer
00014370 5528 0024                  		subq.b	#2,obRoutine(a0) ; run "Harp_Move" subroutine
00014374 0868 0000 001C             		bchg	#0,obAnim(a0)	; reverse animation
0001437A                            
0001437A                            	@chkdel:
0001437A 6000 D566                  		bra.w	RememberState
0001437A 6000 D566                  		bra.w	RememberState
0001437E                            		include	"_anim\Harpoon.asm"
0001437E                            ; ---------------------------------------------------------------------------
0001437E                            ; Animation script - harpoon (LZ)
0001437E                            ; ---------------------------------------------------------------------------
0001437E 0000                       Ani_Harp:	dc.w @h_extending-Ani_Harp
00014380 0000                       		dc.w @h_retracting-Ani_Harp
00014382 0000                       		dc.w @v_extending-Ani_Harp
00014384 0000                       		dc.w @v_retracting-Ani_Harp
00014386 0301 02FC                  @h_extending:	dc.b 3,	1, 2, afRoutine
0001438A 0301 00FC                  @h_retracting:	dc.b 3,	1, 0, afRoutine
0001438E 0304 05FC                  @v_extending:	dc.b 3,	4, 5, afRoutine
00014392 0304 03FC                  @v_retracting:	dc.b 3,	4, 3, afRoutine
00014396                            		even
00014396                            		even
00014396                            Map_Harp:	include	"_maps\Harpoon.asm"
00014396                            ; --------------------------------------------------------------------------------
00014396                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00014396                            ; --------------------------------------------------------------------------------
00014396                            
00014396                            SME_JPFHb:	
00014396 0000 0000                  		dc.w SME_JPFHb_C-SME_JPFHb, SME_JPFHb_12-SME_JPFHb	
0001439A 0000 0000                  		dc.w SME_JPFHb_18-SME_JPFHb, SME_JPFHb_23-SME_JPFHb	
0001439E 0000 0000                  		dc.w SME_JPFHb_29-SME_JPFHb, SME_JPFHb_2F-SME_JPFHb	
000143A2 01                         SME_JPFHb_C:	dc.b 1	
000143A3 FC04 2000 F8               		dc.b $FC, 4, $20, 0, $F8	
000143A8 01                         SME_JPFHb_12:	dc.b 1	
000143A9 FC0C 2002 F8               		dc.b $FC, $C, $20, 2, $F8	
000143AE 02                         SME_JPFHb_18:	dc.b 2	
000143AF FC08 2006 F8               		dc.b $FC, 8, $20, 6, $F8	
000143B4 FC08 2003 10               		dc.b $FC, 8, $20, 3, $10	
000143B9 01                         SME_JPFHb_23:	dc.b 1	
000143BA F801 2009 FC               		dc.b $F8, 1, $20, 9, $FC	
000143BF 01                         SME_JPFHb_29:	dc.b 1	
000143C0 E803 200B FC               		dc.b $E8, 3, $20, $B, $FC	
000143C5 02                         SME_JPFHb_2F:	dc.b 2	
000143C6 D802 200B FC               		dc.b $D8, 2, $20, $B, $FC	
000143CB F002 200F FC               		dc.b $F0, 2, $20, $F, $FC	
000143D0                            		even
000143D0                            		even
000143D0                            		include	"_incObj\61 LZ Blocks.asm"
000143D0                            ; ---------------------------------------------------------------------------
000143D0                            ; Object 61 - blocks (LZ)
000143D0                            ; ---------------------------------------------------------------------------
000143D0                            
000143D0                            LabyrinthBlock:
000143D0 7000                       		moveq	#0,d0
000143D2 1028 0024                  		move.b	obRoutine(a0),d0
000143D6 323B 0000                  		move.w	LBlk_Index(pc,d0.w),d1
000143DA 4EFB 1000                  		jmp	LBlk_Index(pc,d1.w)
000143DE                            ; ===========================================================================
000143DE 0000                       LBlk_Index:	dc.w LBlk_Main-LBlk_Index
000143E0 0000                       		dc.w LBlk_Action-LBlk_Index
000143E2                            
000143E2 1010                       LBlk_Var:	dc.b $10, $10		; width, height
000143E4 200C                       		dc.b $20, $C
000143E6 1010                       		dc.b $10, $10
000143E8 1010                       		dc.b $10, $10
000143EA                            
000143EA =00000016                  lblk_height:	equ $16		; block height
000143EA =00000034                  lblk_origX:	equ $34		; original x-axis position
000143EA =00000030                  lblk_origY:	equ $30		; original y-axis position
000143EA =00000036                  lblk_time:	equ $36		; time delay for block movement
000143EA =00000038                  lblk_untouched:	equ $38		; flag block as untouched
000143EA                            ; ===========================================================================
000143EA                            
000143EA                            LBlk_Main:	; Routine 0
000143EA 5428 0024                  		addq.b	#2,obRoutine(a0)
000143EE 217C 0000 0000 0004        		move.l	#Map_LBlock,obMap(a0)
000143F6 317C 43E6 0002             		move.w	#$43E6,obGfx(a0)
000143FC 117C 0004 0001             		move.b	#4,obRender(a0)
00014402 317C 0180 0018             		move.w	#$180,obPriority(a0)
00014408 7000                       		moveq	#0,d0
0001440A 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
0001440E E648                       		lsr.w	#3,d0		; read only the 1st digit
00014410 0240 000E                  		andi.w	#$E,d0
00014414 45FB 00CC                  		lea	LBlk_Var(pc,d0.w),a2
00014418 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
0001441C 1152 0016                  		move.b	(a2),lblk_height(a0) ; set height
00014420 E248                       		lsr.w	#1,d0
00014422 1140 001A                  		move.b	d0,obFrame(a0)
00014426 3168 0008 0034             		move.w	obX(a0),lblk_origX(a0)
0001442C 3168 000C 0030             		move.w	obY(a0),lblk_origY(a0)
00014432 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
00014436 0200 000F                  		andi.b	#$F,d0		; read only the 2nd digit
0001443A 6700                       		beq.s	LBlk_Action	; branch if 0
0001443C 0C00 0007                  		cmpi.b	#7,d0
00014440 6700                       		beq.s	LBlk_Action	; branch if 7
00014442 117C 0001 0038             		move.b	#1,lblk_untouched(a0)
00014448                            
00014448                            LBlk_Action:	; Routine 2
00014448 3F28 0008                  		move.w	obX(a0),-(sp)
0001444C 7000                       		moveq	#0,d0
0001444E 1028 0028                  		move.b	obSubtype(a0),d0
00014452 0240 000F                  		andi.w	#$F,d0
00014456 D040                       		add.w	d0,d0
00014458 323B 0000                  		move.w	@index(pc,d0.w),d1
0001445C 4EBB 1000                  		jsr	@index(pc,d1.w)
00014460 381F                       		move.w	(sp)+,d4
00014462 4A28 0001                  		tst.b	obRender(a0)
00014466 6A00                       		bpl.s	@chkdel
00014468 7200                       		moveq	#0,d1
0001446A 1228 0014                  		move.b	obActWid(a0),d1
0001446E 0641 000B                  		addi.w	#$B,d1
00014472 7400                       		moveq	#0,d2
00014474 1428 0016                  		move.b	lblk_height(a0),d2
00014478 3602                       		move.w	d2,d3
0001447A 5243                       		addq.w	#1,d3
0001447C 6100 D8FC                  		bsr.w	SolidObject
00014480 1144 003F                  		move.b	d4,$3F(a0)
00014484 6100 0000                  		bsr.w	loc_12180
00014488                            
00014488                            @chkdel:
000144A6 6000 B386                  		bra.w	DisplaySprite
000144AA                            ; ===========================================================================
000144AA 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
000144AE 0000 0000                  		dc.w @type02-@index, @type03-@index
000144B2 0000 0000                  		dc.w @type04-@index, @type05-@index
000144B6 0000 0000                  		dc.w @type06-@index, @type07-@index
000144BA                            ; ===========================================================================
000144BA                            
000144BA                            @type00:
000144BA 4E75                       		rts	
000144BC                            ; ===========================================================================
000144BC                            
000144BC                            @type01:
000144BC                            @type03:
000144BC 4A68 0036                  		tst.w	lblk_time(a0)	; does time remain?
000144C0 6600                       		bne.s	@wait01		; if yes, branch
000144C2 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the object?
000144C8 6700                       		beq.s	@donothing01	; if not, branch
000144CA 317C 001E 0036             		move.w	#30,lblk_time(a0) ; wait for half second
000144D0                            
000144D0                            	@donothing01:
000144D0 4E75                       		rts	
000144D2                            ; ===========================================================================
000144D2                            
000144D2                            	@wait01:
000144D2 5368 0036                  		subq.w	#1,lblk_time(a0); decrement waiting time
000144D6 66F8                       		bne.s	@donothing01	; if time remains, branch
000144D8 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type02 or @type04
000144DC 4228 0038                  		clr.b	lblk_untouched(a0) ; flag block as touched
000144E0 4E75                       		rts	
000144E2                            ; ===========================================================================
000144E2                            
000144E2                            @type02:
000144E2                            @type06:
000144E2 6100 B336                  		bsr.w	SpeedToPos
000144E6 5068 0012                  		addq.w	#8,obVelY(a0)	; make block fall
000144EA 6100 0000                  		bsr.w	ObjFloorDist
000144EE 4A41                       		tst.w	d1		; has block hit the floor?
000144F0 6A00 0000                  		bpl.w	@nofloor02	; if not, branch
000144F4 5241                       		addq.w	#1,d1
000144F6 D368 000C                  		add.w	d1,obY(a0)
000144FA 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the floor
000144FE 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
00014502                            
00014502                            	@nofloor02:
00014502 4E75                       		rts	
00014504                            ; ===========================================================================
00014504                            
00014504                            @type04:
00014504 6100 B314                  		bsr.w	SpeedToPos
00014508 5168 0012                  		subq.w	#8,obVelY(a0)	; make block rise
0001450C 6100 0000                  		bsr.w	ObjHitCeiling
00014510 4A41                       		tst.w	d1		; has block hit the ceiling?
00014512 6A00 0000                  		bpl.w	@noceiling04	; if not, branch
00014516 9368 000C                  		sub.w	d1,obY(a0)
0001451A 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the ceiling
0001451E 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
00014522                            
00014522                            	@noceiling04:
00014522 4E75                       		rts	
00014524                            ; ===========================================================================
00014524                            
00014524                            @type05:
00014524 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	block?
0001452A 6600                       		bne.s	@notouch05	; if not, branch
0001452C 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type06
00014530 4228 0038                  		clr.b	lblk_untouched(a0)
00014534                            
00014534                            	@notouch05:
00014534 4E75                       		rts	
00014536                            ; ===========================================================================
00014536                            
00014536                            @type07:
00014536 3038 F646                  		move.w	(v_waterpos1).w,d0
0001453A 9068 000C                  		sub.w	obY(a0),d0	; is block level with water?
0001453E 6700                       		beq.s	@stop07		; if yes, branch
00014540 6400                       		bcc.s	@fall07		; branch if block is above water
00014542 0C40 FFFE                  		cmpi.w	#-2,d0
00014546 6C00                       		bge.s	@loc_1214E
00014548 70FE                       		moveq	#-2,d0
0001454A                            
0001454A                            	@loc_1214E:
0001454A D168 000C                  		add.w	d0,obY(a0)	; make the block rise with water level
0001454E 6100 0000                  		bsr.w	ObjHitCeiling
00014552 4A41                       		tst.w	d1		; has block hit the ceiling?
00014554 6A00 0000                  		bpl.w	@noceiling07	; if not, branch
00014558 9368 000C                  		sub.w	d1,obY(a0)	; stop block
0001455C                            
0001455C                            	@noceiling07:
0001455C 4E75                       		rts	
0001455E                            ; ===========================================================================
0001455E                            
0001455E                            @fall07:
0001455E 0C40 0002                  		cmpi.w	#2,d0
00014562 6F00                       		ble.s	@loc_1216A
00014564 7002                       		moveq	#2,d0
00014566                            
00014566                            	@loc_1216A:
00014566 D168 000C                  		add.w	d0,obY(a0)	; make the block sink with water level
0001456A 6100 0000                  		bsr.w	ObjFloorDist
0001456E 4A41                       		tst.w	d1
00014570 6A00 0000                  		bpl.w	@stop07
00014574 5241                       		addq.w	#1,d1
00014576 D368 000C                  		add.w	d1,obY(a0)
0001457A                            
0001457A                            	@stop07:
0001457A 4E75                       		rts	
0001457C                            ; ===========================================================================
0001457C                            
0001457C                            loc_12180:
0001457C 4A28 0038                  		tst.b	lblk_untouched(a0) ; has block been stood on or touched?
00014580 6700                       		beq.s	locret_121C0	; if yes, branch
00014582 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on it now?
00014588 6600                       		bne.s	loc_1219A	; if yes, branch
0001458A 4A28 003E                  		tst.b	$3E(a0)
0001458E 6700                       		beq.s	locret_121C0
00014590 5928 003E                  		subq.b	#4,$3E(a0)
00014594 6000                       		bra.s	loc_121A6
00014596                            ; ===========================================================================
00014596                            
00014596                            loc_1219A:
00014596 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
0001459C 6700                       		beq.s	locret_121C0
0001459E 5828 003E                  		addq.b	#4,$3E(a0)
000145A2                            
000145A2                            loc_121A6:
000145A2 1028 003E                  		move.b	$3E(a0),d0
000145A6 4EB9 0000 3D28             		jsr	(CalcSine).l
000145AC 323C 0400                  		move.w	#$400,d1
000145B0 C1C1                       		muls.w	d1,d0
000145B2 4840                       		swap	d0
000145B4 D068 0030                  		add.w	lblk_origY(a0),d0
000145B8 3140 000C                  		move.w	d0,obY(a0)
000145BC                            
000145BC                            locret_121C0:
000145BC 4E75                       		rts	
000145BC 4E75                       		rts	
000145BE                            Map_LBlock:	include	"_maps\LZ Blocks.asm"
000145BE                            Map_6865:
000145BE 0000                       Map_6865_0: 	dc.w Map_6865_8-Map_6865
000145C0 0000                       Map_6865_2: 	dc.w Map_6865_E-Map_6865
000145C2 0000                       Map_6865_4: 	dc.w Map_6865_19-Map_6865
000145C4 0000                       Map_6865_6: 	dc.w Map_6865_1F-Map_6865
000145C6 01                         Map_6865_8: 	dc.b $1
000145C7 F00F 2000 F0               	dc.b $F0, $F, $20, $0, $F0
000145CC 02                         Map_6865_E: 	dc.b $2
000145CD F40E 0069 E0               	dc.b $F4, $E, $0, $69, $E0
000145D2 F40E 0075 00               	dc.b $F4, $E, $0, $75, $0
000145D7 01                         Map_6865_19: 	dc.b $1
000145D8 F00F 011A F0               	dc.b $F0, $F, $1, $1A, $F0
000145DD 01                         Map_6865_1F: 	dc.b $1
000145DE F00F FDFA F0               	dc.b $F0, $F, $FD, $FA, $F0
000145E4 00                         	even
000145E4 00                         	even
000145E4                            		include	"_incObj\62 Gargoyle.asm"
000145E4                            ; ---------------------------------------------------------------------------
000145E4                            ; Object 62 - gargoyle head (LZ)
000145E4                            ; ---------------------------------------------------------------------------
000145E4                            
000145E4                            Gargoyle:
000145E4 7000                       		moveq	#0,d0
000145E6 1028 0024                  		move.b	obRoutine(a0),d0
000145EA 323B 0000                  		move.w	Gar_Index(pc,d0.w),d1
000145EE 4EBB 1000                  		jsr	Gar_Index(pc,d1.w)
000145F2 6000 D2EE                  		bra.w	RememberState
000145F6                            ; ===========================================================================
000145F6 0000                       Gar_Index:	dc.w Gar_Main-Gar_Index
000145F8 0000                       		dc.w Gar_MakeFire-Gar_Index
000145FA 0000                       		dc.w Gar_FireBall-Gar_Index
000145FC 0000                       		dc.w Gar_AniFire-Gar_Index
000145FE                            
000145FE 1E3C 5A78 96B4 D2F0        Gar_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00014606                            ; ===========================================================================
00014606                            
00014606                            Gar_Main:	; Routine 0
00014606 5428 0024                  		addq.b	#2,obRoutine(a0)
0001460A 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
00014612 317C 42E9 0002             		move.w	#$42E9,obGfx(a0)
00014618 0028 0004 0001             		ori.b	#4,obRender(a0)
0001461E 317C 0180 0018             		move.w	#$180,obPriority(a0)
00014624 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001462A 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0001462E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00014632 117B 00CA 001F             		move.b	Gar_SpitRate(pc,d0.w),obDelayAni(a0) ; set fireball spit rate
00014638 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001463E 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
00014644                            
00014644                            Gar_MakeFire:	; Routine 2
00014644 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement timer
00014648 6600                       		bne.s	@nofire		; if time remains, branch
0001464A                            
0001464A 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset timer
00014650 6100 B56A                  		bsr.w	ChkObjectVisible
00014654 6600                       		bne.s	@nofire
00014656 6100 B770                  		bsr.w	FindFreeObj
0001465A 6600                       		bne.s	@nofire
0001465C 12BC 0062                  		move.b	#id_Gargoyle,0(a1) ; load fireball object
00014660 5829 0024                  		addq.b	#4,obRoutine(a1) ; use Gar_FireBall routine
00014664 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001466A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00014670 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00014676 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0001467C                            
0001467C                            	@nofire:
0001467C 4E75                       		rts	
0001467E                            ; ===========================================================================
0001467E                            
0001467E                            Gar_FireBall:	; Routine 4
0001467E 5428 0024                  		addq.b	#2,obRoutine(a0)
00014682 117C 0008 0016             		move.b	#8,obHeight(a0)
00014688 117C 0008 0017             		move.b	#8,obWidth(a0)
0001468E 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
00014696 317C 02E9 0002             		move.w	#$2E9,obGfx(a0)
0001469C 0028 0004 0001             		ori.b	#4,obRender(a0)
000146A2 317C 0200 0018             		move.w	#$200,obPriority(a0)
000146A8 117C 0098 0020             		move.b	#$98,obColType(a0)
000146AE 117C 0008 0014             		move.b	#8,obActWid(a0)
000146B4 117C 0002 001A             		move.b	#2,obFrame(a0)
000146BA 5068 000C                  		addq.w	#8,obY(a0)
000146BE 317C 0200 0010             		move.w	#$200,obVelX(a0)
000146C4 0828 0000 0022             		btst	#0,obStatus(a0)	; is gargoyle facing left?
000146CA 6600                       		bne.s	@noflip		; if not, branch
000146CC 4468 0010                  		neg.w	obVelX(a0)
000146D0                            
000146D0                            	@noflip:
000146DA                            
000146DA                            Gar_AniFire:	; Routine 6
000146DA 1038 FE05                  		move.b	(v_framebyte).w,d0
000146DE 0200 0007                  		andi.b	#7,d0
000146E2 6600                       		bne.s	@nochg
000146E4 0868 0000 001A             		bchg	#0,obFrame(a0)	; change every 8 frames
000146EA                            
000146EA                            	@nochg:
000146EA 6100 B12E                  		bsr.w	SpeedToPos
000146EE 0828 0000 0022             		btst	#0,obStatus(a0) ; is fireball moving left?
000146F4 6600                       		bne.s	@isright	; if not, branch
000146F6 76F8                       		moveq	#-8,d3
000146F8 6100 0000                  		bsr.w	ObjHitWallLeft
000146FC 4A41                       		tst.w	d1
000146FE 6B00 B16E                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00014702 4E75                       		rts	
00014704                            
00014704                            	@isright:
00014704 7608                       		moveq	#8,d3
00014706 6100 0000                  		bsr.w	ObjHitWallRight
0001470A 4A41                       		tst.w	d1
0001470C 6B00 B160                  		bmi.w	DeleteObject
00014710 4E75                       		rts	
00014710 4E75                       		rts	
00014712                            Map_Gar:	include	"_maps\Gargoyle.asm"
00014712                            ; ---------------------------------------------------------------------------
00014712                            ; Sprite mappings - gargoyle head (LZ)
00014712                            ; ---------------------------------------------------------------------------
00014712                            Map_Gar_internal:
00014712 0000                       		dc.w @head-Map_Gar_internal
00014714 0000                       		dc.w @head-Map_Gar_internal
00014716 0000                       		dc.w @fireball1-Map_Gar_internal
00014718 0000                       		dc.w @fireball2-Map_Gar_internal
0001471A 03                         @head:		dc.b 3
0001471B F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00014720 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00014725 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
0001472A 01                         @fireball1:	dc.b 1
0001472B FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00014730 01                         @fireball2:	dc.b 1
00014731 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00014736                            		even
00014736                            		even
00014736                            		include	"_incObj\63 LZ Conveyor.asm"
00014736                            ; ---------------------------------------------------------------------------
00014736                            ; Object 63 - platforms	on a conveyor belt (LZ)
00014736                            ; ---------------------------------------------------------------------------
00014736                            
00014736                            LabyrinthConvey:
00014736 7000                       		moveq	#0,d0
00014738 1028 0024                  		move.b	obRoutine(a0),d0
0001473C 323B 0000                  		move.w	LCon_Index(pc,d0.w),d1
00014740 4EBB 1000                  		jsr	LCon_Index(pc,d1.w)
00014760                            
00014760                            LCon_Display:
00014760 6000 B0CC                  		bra.w	DisplaySprite
00014764                            ; ===========================================================================
00014764                            
00014764                            loc_1236A:
00014764 0C38 0002 FE11             		cmpi.b	#2,(v_act).w
0001476A 6600                       		bne.s	loc_12378
0001476C 0C40 FF80                  		cmpi.w	#-$80,d0
00014770 64EE                       		bcc.s	LCon_Display
00014772                            
00014772                            loc_12378:
00014772 1028 002F                  		move.b	$2F(a0),d0
00014776 6A00 B0F6                  		bpl.w	DeleteObject
0001477A 0240 007F                  		andi.w	#$7F,d0
0001477E 45F8 F7C1                  		lea	(v_obj63).w,a2
00014782 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00014788 6000 B0E4                  		bra.w	DeleteObject
0001478C                            ; ===========================================================================
0001478C 0000                       LCon_Index:	dc.w LCon_Main-LCon_Index
0001478E 0000                       		dc.w loc_124B2-LCon_Index
00014790 0000                       		dc.w loc_124C2-LCon_Index
00014792 0000                       		dc.w loc_124DE-LCon_Index
00014794                            ; ===========================================================================
00014794                            
00014794                            LCon_Main:	; Routine 0
00014794 1028 0028                  		move.b	obSubtype(a0),d0
00014798 6B00 0000                  		bmi.w	loc_12460
0001479C 5428 0024                  		addq.b	#2,obRoutine(a0)
000147A0 217C 0000 0000 0004        		move.l	#Map_LConv,obMap(a0)
000147A8 317C 43F6 0002             		move.w	#$43F6,obGfx(a0)
000147AE 0028 0004 0001             		ori.b	#4,obRender(a0)
000147B4 117C 0010 0014             		move.b	#$10,obActWid(a0)
000147BA 317C 0200 0018             		move.w	#$200,obPriority(a0)
000147C0 0C28 007F 0028             		cmpi.b	#$7F,obSubtype(a0)
000147C6 6600                       		bne.s	loc_123E2
000147C8 5828 0024                  		addq.b	#4,obRoutine(a0)
000147CC 317C 03F6 0002             		move.w	#$3F6,obGfx(a0)
000147D2 317C 0080 0018             		move.w	#$80,obPriority(a0)
000147D8 6000 0000                  		bra.w	loc_124DE
000147DC                            ; ===========================================================================
000147DC                            
000147DC                            loc_123E2:
000147DC 117C 0004 001A             		move.b	#4,obFrame(a0)
000147E2 7000                       		moveq	#0,d0
000147E4 1028 0028                  		move.b	obSubtype(a0),d0
000147E8 3200                       		move.w	d0,d1
000147EA E648                       		lsr.w	#3,d0
000147EC 0240 001E                  		andi.w	#$1E,d0
000147F0 45FA 0000                  		lea	LCon_Data(pc),a2
000147F4 D4F2 0000                  		adda.w	(a2,d0.w),a2
000147F8 315A 0038                  		move.w	(a2)+,$38(a0)
000147FC 315A 0030                  		move.w	(a2)+,$30(a0)
00014800 214A 003C                  		move.l	a2,$3C(a0)
00014804 0241 000F                  		andi.w	#$F,d1
00014808 E549                       		lsl.w	#2,d1
0001480A 1141 0038                  		move.b	d1,$38(a0)
0001480E 117C 0004 003A             		move.b	#4,$3A(a0)
00014814 4A38 F7C0                  		tst.b	(f_conveyrev).w
00014818 6700                       		beq.s	loc_1244C
0001481A 117C 0001 003B             		move.b	#1,$3B(a0)
00014820 4428 003A                  		neg.b	$3A(a0)
00014824 7200                       		moveq	#0,d1
00014826 1228 0038                  		move.b	$38(a0),d1
0001482A D228 003A                  		add.b	$3A(a0),d1
0001482E B228 0039                  		cmp.b	$39(a0),d1
00014832 6500                       		bcs.s	loc_12448
00014834 1001                       		move.b	d1,d0
00014836 7200                       		moveq	#0,d1
00014838 4A00                       		tst.b	d0
0001483A 6A00                       		bpl.s	loc_12448
0001483C 1228 0039                  		move.b	$39(a0),d1
00014840 5901                       		subq.b	#4,d1
00014842                            
00014842                            loc_12448:
00014842 1141 0038                  		move.b	d1,$38(a0)
00014846                            
00014846                            loc_1244C:
00014846 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001484C 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00014852 6100 0000                  		bsr.w	LCon_ChangeDir
00014856 6000 0000                  		bra.w	loc_124B2
0001485A                            ; ===========================================================================
0001485A                            
0001485A                            loc_12460:
0001485A 1140 002F                  		move.b	d0,$2F(a0)
0001485E 0240 007F                  		andi.w	#$7F,d0
00014862 45F8 F7C1                  		lea	(v_obj63).w,a2
00014866 08F2 0000 0000             		bset	#0,(a2,d0.w)
0001486C 6600 B000                  		bne.w	DeleteObject
00014870 D040                       		add.w	d0,d0
00014872 0240 001E                  		andi.w	#$1E,d0
00014876 0640 0000                  		addi.w	#ObjPosLZPlatform_Index-ObjPos_Index,d0
0001487A 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00014880 D4F2 0000                  		adda.w	(a2,d0.w),a2
00014884 321A                       		move.w	(a2)+,d1
00014886 2248                       		movea.l	a0,a1
00014888 6000                       		bra.s	LCon_MakePtfms
0001488A                            ; ===========================================================================
0001488A                            
0001488A                            LCon_Loop:
0001488A 6100 B53C                  		bsr.w	FindFreeObj
0001488E 6600                       		bne.s	loc_124AA
00014890                            
00014890                            LCon_MakePtfms:
00014890 12BC 0063                  		move.b	#id_LabyrinthConvey,0(a1)
00014894 335A 0008                  		move.w	(a2)+,obX(a1)
00014898 335A 000C                  		move.w	(a2)+,obY(a1)
0001489C 301A                       		move.w	(a2)+,d0
0001489E 1340 0028                  		move.b	d0,obSubtype(a1)
000148A2                            
000148A2                            loc_124AA:
000148A2 51C9 FFE6                  		dbf	d1,LCon_Loop
000148A6                            
000148A6 588F                       		addq.l	#4,sp
000148A8 4E75                       		rts	
000148AA                            ; ===========================================================================
000148AA                            
000148AA                            loc_124B2:	; Routine 2
000148AA 7200                       		moveq	#0,d1
000148AC 1228 0014                  		move.b	obActWid(a0),d1
000148B0 4EB9 0000 8C88             		jsr	(PlatformObject).l
000148B6 6000 0000                  		bra.w	sub_12502
000148BA                            ; ===========================================================================
000148BA                            
000148BA                            loc_124C2:	; Routine 4
000148BA 7200                       		moveq	#0,d1
000148BC 1228 0014                  		move.b	obActWid(a0),d1
000148C0 4EB9 0000 8DFC             		jsr	(ExitPlatform).l
000148C6 3F28 0008                  		move.w	obX(a0),-(sp)
000148CA 6100 0000                  		bsr.w	sub_12502
000148CE 341F                       		move.w	(sp)+,d2
000148D0 4EF9 0000 9366             		jmp	(MvSonicOnPtfm2).l
000148D6                            ; ===========================================================================
000148D6                            
000148D6                            loc_124DE:	; Routine 6
000148D6 3038 FE04                  		move.w	(v_framecount).w,d0
000148DA 0240 0003                  		andi.w	#3,d0
000148DE 6600                       		bne.s	loc_124FC
000148E0 7201                       		moveq	#1,d1
000148E2 4A38 F7C0                  		tst.b	(f_conveyrev).w
000148E6 6700                       		beq.s	loc_124F2
000148E8 4401                       		neg.b	d1
000148EA                            
000148EA                            loc_124F2:
000148EA D328 001A                  		add.b	d1,obFrame(a0)
000148EE 0228 0003 001A             		andi.b	#3,obFrame(a0)
000148F4                            
000148F4                            loc_124FC:
000148F4 588F                       		addq.l	#4,sp
000148F6 6000 CFEA                  		bra.w	RememberState
000148FA                            
000148FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000148FA                            
000148FA                            
000148FA                            sub_12502:
000148FA 4A38 F7EE                  		tst.b	(f_switch+$E).w
000148FE 6700                       		beq.s	loc_12520
00014900 4A28 003B                  		tst.b	$3B(a0)
00014904 6600                       		bne.s	loc_12520
00014906 117C 0001 003B             		move.b	#1,$3B(a0)
0001490C 11FC 0001 F7C0             		move.b	#1,(f_conveyrev).w
00014912 4428 003A                  		neg.b	$3A(a0)
00014916 6000                       		bra.s	loc_12534
00014918                            ; ===========================================================================
00014918                            
00014918                            loc_12520:
00014918 3028 0008                  		move.w	obX(a0),d0
0001491C B068 0034                  		cmp.w	$34(a0),d0
00014920 6600                       		bne.s	loc_1256A
00014922 3028 000C                  		move.w	obY(a0),d0
00014926 B068 0036                  		cmp.w	$36(a0),d0
0001492A 6600                       		bne.s	loc_1256A
0001492C                            
0001492C                            loc_12534:
0001492C 7200                       		moveq	#0,d1
0001492E 1228 0038                  		move.b	$38(a0),d1
00014932 D228 003A                  		add.b	$3A(a0),d1
00014936 B228 0039                  		cmp.b	$39(a0),d1
0001493A 6500                       		bcs.s	loc_12552
0001493C 1001                       		move.b	d1,d0
0001493E 7200                       		moveq	#0,d1
00014940 4A00                       		tst.b	d0
00014942 6A00                       		bpl.s	loc_12552
00014944 1228 0039                  		move.b	$39(a0),d1
00014948 5901                       		subq.b	#4,d1
0001494A                            
0001494A                            loc_12552:
0001494A 1141 0038                  		move.b	d1,$38(a0)
0001494E 2268 003C                  		movea.l	$3C(a0),a1
00014952 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00014958 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
0001495E 6100 0000                  		bsr.w	LCon_ChangeDir
00014962                            
00014962                            loc_1256A:
00014962 6100 AEB6                  		bsr.w	SpeedToPos
00014966 4E75                       		rts	
00014968                            ; End of function sub_12502
00014968                            
00014968                            
00014968                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014968                            
00014968                            
00014968                            LCon_ChangeDir:
00014968 7000                       		moveq	#0,d0
0001496A 343C FF00                  		move.w	#-$100,d2
0001496E 3028 0008                  		move.w	obX(a0),d0
00014972 9068 0034                  		sub.w	$34(a0),d0
00014976 6400                       		bcc.s	loc_12584
00014978 4440                       		neg.w	d0
0001497A 4442                       		neg.w	d2
0001497C                            
0001497C                            loc_12584:
0001497C 7200                       		moveq	#0,d1
0001497E 363C FF00                  		move.w	#-$100,d3
00014982 3228 000C                  		move.w	obY(a0),d1
00014986 9268 0036                  		sub.w	$36(a0),d1
0001498A 6400                       		bcc.s	loc_12598
0001498C 4441                       		neg.w	d1
0001498E 4443                       		neg.w	d3
00014990                            
00014990                            loc_12598:
00014990 B240                       		cmp.w	d0,d1
00014992 6500                       		bcs.s	loc_125C2
00014994 3028 0008                  		move.w	obX(a0),d0
00014998 9068 0034                  		sub.w	$34(a0),d0
0001499C 6700                       		beq.s	loc_125AE
0001499E 48C0                       		ext.l	d0
000149A0 E180                       		asl.l	#8,d0
000149A2 81C1                       		divs.w	d1,d0
000149A4 4440                       		neg.w	d0
000149A6                            
000149A6                            loc_125AE:
000149A6 3140 0010                  		move.w	d0,obVelX(a0)
000149AA 3143 0012                  		move.w	d3,obVelY(a0)
000149AE 4840                       		swap	d0
000149B0 3140 000A                  		move.w	d0,obX+2(a0)
000149B4 4268 000E                  		clr.w	obY+2(a0)
000149B8 4E75                       		rts	
000149BA                            ; ===========================================================================
000149BA                            
000149BA                            loc_125C2:
000149BA 3228 000C                  		move.w	obY(a0),d1
000149BE 9268 0036                  		sub.w	$36(a0),d1
000149C2 6700                       		beq.s	loc_125D4
000149C4 48C1                       		ext.l	d1
000149C6 E181                       		asl.l	#8,d1
000149C8 83C0                       		divs.w	d0,d1
000149CA 4441                       		neg.w	d1
000149CC                            
000149CC                            loc_125D4:
000149CC 3141 0012                  		move.w	d1,obVelY(a0)
000149D0 3142 0010                  		move.w	d2,obVelX(a0)
000149D4 4841                       		swap	d1
000149D6 3141 000E                  		move.w	d1,obY+2(a0)
000149DA 4268 000A                  		clr.w	obX+2(a0)
000149DE 4E75                       		rts	
000149E0                            ; End of function LCon_ChangeDir
000149E0                            
000149E0                            ; ===========================================================================
000149E0 0000                       LCon_Data:	dc.w word_125F4-LCon_Data
000149E2 0000                       		dc.w word_12610-LCon_Data
000149E4 0000                       		dc.w word_12628-LCon_Data
000149E6 0000                       		dc.w word_1263C-LCon_Data
000149E8 0000                       		dc.w word_12650-LCon_Data
000149EA 0000                       		dc.w word_12668-LCon_Data
000149EC 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
000149FC 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00014A08 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00014A18 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00014A20 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00014A34 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00014A48 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00014A60 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00014A60 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00014A74                            Map_LConv:	include	"_maps\LZ Conveyor.asm"
00014A74                            ; ---------------------------------------------------------------------------
00014A74                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00014A74                            ; ---------------------------------------------------------------------------
00014A74                            Map_LConv_internal:
00014A74 0000                       		dc.w @wheel1-Map_LConv_internal
00014A76 0000                       		dc.w @wheel2-Map_LConv_internal
00014A78 0000                       		dc.w @wheel3-Map_LConv_internal
00014A7A 0000                       		dc.w @wheel4-Map_LConv_internal
00014A7C 0000                       		dc.w @platform-Map_LConv_internal
00014A7E 01                         @wheel1:	dc.b 1
00014A7F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00014A84 01                         @wheel2:	dc.b 1
00014A85 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00014A8A 01                         @wheel3:	dc.b 1
00014A8B F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00014A90 01                         @wheel4:	dc.b 1
00014A91 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00014A96 01                         @platform:	dc.b 1
00014A97 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00014A9C                            		even
00014A9C                            		even
00014A9C                            		include	"_incObj\64 Bubbles.asm"
00014A9C                            ; ---------------------------------------------------------------------------
00014A9C                            ; Object 64 - bubbles (LZ)
00014A9C                            ; ---------------------------------------------------------------------------
00014A9C                            
00014A9C                            Bubble:
00014A9C 7000                       		moveq	#0,d0
00014A9E 1028 0024                  		move.b	obRoutine(a0),d0
00014AA2 323B 0000                  		move.w	Bub_Index(pc,d0.w),d1
00014AA6 4EFB 1000                  		jmp	Bub_Index(pc,d1.w)
00014AAA                            ; ===========================================================================
00014AAA 0000                       Bub_Index:	dc.w Bub_Main-Bub_Index
00014AAC 0000                       		dc.w Bub_Animate-Bub_Index
00014AAE 0000                       		dc.w Bub_ChkWater-Bub_Index
00014AB0 0000                       		dc.w Bub_Display-Bub_Index
00014AB2 0000                       		dc.w Bub_Delete-Bub_Index
00014AB4 0000                       		dc.w Bub_BblMaker-Bub_Index
00014AB6                            
00014AB6 =0000002E                  bub_inhalable:	equ $2E		; flag set when bubble is collectable
00014AB6 =00000030                  bub_origX:	equ $30		; original x-axis position
00014AB6 =00000032                  bub_time:	equ $32		; time until next bubble spawn
00014AB6 =00000033                  bub_freq:	equ $33		; frequency of bubble spawn
00014AB6                            ; ===========================================================================
00014AB6                            
00014AB6                            Bub_Main:	; Routine 0
00014AB6 5428 0024                  		addq.b	#2,obRoutine(a0)
00014ABA 217C 0000 0000 0004        		move.l	#Map_Bub,obMap(a0)
00014AC2 317C 8348 0002             		move.w	#$8348,obGfx(a0)
00014AC8 117C 0084 0001             		move.b	#$84,obRender(a0)
00014ACE 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014AD4 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014ADA 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
00014ADE 6A00                       		bpl.s	@bubble		; if type is $0-$7F, branch
00014AE0                            
00014AE0 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Bub_BblMaker next
00014AE4 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00014AE8 1140 0032                  		move.b	d0,bub_time(a0)
00014AEC 1140 0033                  		move.b	d0,bub_freq(a0)	; set bubble frequency
00014AF0 117C 0006 001C             		move.b	#6,obAnim(a0)
00014AF6 6000 0000                  		bra.w	Bub_BblMaker
00014AFA                            ; ===========================================================================
00014AFA                            
00014AFA                            @bubble:
00014AFA 1140 001C                  		move.b	d0,obAnim(a0)
00014AFE 3168 0008 0030             		move.w	obX(a0),bub_origX(a0)
00014B04 317C FF78 0012             		move.w	#-$88,obVelY(a0) ; float bubble upwards
00014B0A 4EB9 0000 3D02             		jsr	(RandomNumber).l
00014B10 1140 0026                  		move.b	d0,obAngle(a0)
00014B14                            
00014B14                            Bub_Animate:	; Routine 2
00014B14 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014B1A 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
00014B20 0C28 0006 001A             		cmpi.b	#6,obFrame(a0)	; is bubble full-size?
00014B26 6600                       		bne.s	Bub_ChkWater	; if not, branch
00014B28                            
00014B28 117C 0001 002E             		move.b	#1,bub_inhalable(a0) ; set "inhalable" flag
00014B2E                            
00014B2E                            Bub_ChkWater:	; Routine 4
00014B2E 3038 F646                  		move.w	(v_waterpos1).w,d0
00014B32 B068 000C                  		cmp.w	obY(a0),d0	; is bubble underwater?
00014B36 6500                       		bcs.s	@wobble		; if yes, branch
00014B38                            
00014B38                            @burst:
00014B38 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto Bub_Display next
00014B3E 5628 001C                  		addq.b	#3,obAnim(a0)	; run "bursting" animation
00014B42 6000 0000                  		bra.w	Bub_Display
00014B46                            ; ===========================================================================
00014B46                            
00014B46                            @wobble:
00014B46 1028 0026                  		move.b	obAngle(a0),d0
00014B4A 5228 0026                  		addq.b	#1,obAngle(a0)
00014B4E 0240 007F                  		andi.w	#$7F,d0
00014B52 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
00014B58 1031 0000                  		move.b	(a1,d0.w),d0
00014B5C 4880                       		ext.w	d0
00014B5E D068 0030                  		add.w	bub_origX(a0),d0
00014B62 3140 0008                  		move.w	d0,obX(a0)	; change bubble's x-axis position
00014B66 4A28 002E                  		tst.b	bub_inhalable(a0)
00014B6A 6700                       		beq.s	@display
00014B6C 6100 0000                  		bsr.w	Bub_ChkSonic	; has Sonic touched the	bubble?
00014B70 6700                       		beq.s	@display	; if not, branch
00014B72                            
00014B72 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00014B80 43F8 D000                  		lea	(v_player).w,a1
00014B84 4269 0010                  		clr.w	obVelX(a1)
00014B88 4269 0012                  		clr.w	obVelY(a1)
00014B8C 4269 0020                  		clr.w	obInertia(a1)	; stop Sonic
00014B90 137C 0000 001C             		move.b	#id_GetAir,obAnim(a1) ; use bubble-collecting animation
00014B96 337C 0023 003E             		move.w	#$23,$3E(a1)
00014B9C 137C 0000 003C             		move.b	#0,$3C(a1)
00014BA2 08A9 0005 0022             		bclr	#5,obStatus(a1)
00014BA8 08A9 0004 0022             		bclr	#4,obStatus(a1)
00014BAE 0829 0002 0022             		btst	#2,obStatus(a1)
00014BB4 6700 FF82                  		beq.w	@burst
00014BB8 08A9 0002 0022             		bclr	#2,obStatus(a1)
00014BBE 137C 0013 0016             		move.b	#$13,obHeight(a1)
00014BC4 137C 0009 0017             		move.b	#9,obWidth(a1)
00014BCA 5B69 000C                  		subq.w	#5,obY(a1)
00014BCE 6000 FF68                  		bra.w	@burst
00014BD2                            ; ===========================================================================
00014BD2                            
00014BD2                            @display:
00014BD2 6100 AC46                  		bsr.w	SpeedToPos
00014BD6 4A28 0001                  		tst.b	obRender(a0)
00014BDA 6A00                       		bpl.s	@delete
00014BDC 4EF9 0000 F82E             		jmp	(DisplaySprite).l
00014BE2                            
00014BE2                            	@delete:
00014BE2 4EF9 0000 F86E             		jmp	(DeleteObject).l
00014BE8                            ; ===========================================================================
00014BE8                            
00014BE8                            Bub_Display:	; Routine 6
00014BE8 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014BEE 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
00014BF4 4A28 0001                  		tst.b	obRender(a0)
00014BF8 6A00                       		bpl.s	@delete
00014BFA 4EF9 0000 F82E             		jmp	(DisplaySprite).l
00014C00                            
00014C00                            	@delete:
00014C00 4EF9 0000 F86E             		jmp	(DeleteObject).l
00014C06                            ; ===========================================================================
00014C06                            
00014C06                            Bub_Delete:	; Routine 8
00014C06 6000 AC66                  		bra.w	DeleteObject
00014C0A                            ; ===========================================================================
00014C0A                            
00014C0A                            Bub_BblMaker:	; Routine $A
00014C0A 4A68 0036                  		tst.w	$36(a0)
00014C0E 6600                       		bne.s	@loc_12874
00014C10 3038 F646                  		move.w	(v_waterpos1).w,d0
00014C14 B068 000C                  		cmp.w	obY(a0),d0	; is bubble maker underwater?
00014C18 6400 0000                  		bcc.w	@chkdel		; if not, branch
00014C1C 4A28 0001                  		tst.b	obRender(a0)
00014C20 6A00 0000                  		bpl.w	@chkdel
00014C24 5368 0038                  		subq.w	#1,$38(a0)
00014C28 6A00 0000                  		bpl.w	@loc_12914
00014C2C 317C 0001 0036             		move.w	#1,$36(a0)
00014C32                            
00014C32                            	@tryagain:
00014C32 4EB9 0000 3D02             		jsr	(RandomNumber).l
00014C38 3200                       		move.w	d0,d1
00014C3A 0240 0007                  		andi.w	#7,d0
00014C3E 0C40 0006                  		cmpi.w	#6,d0		; random number over 6?
00014C42 64EE                       		bcc.s	@tryagain	; if yes, branch
00014C44                            
00014C44 1140 0034                  		move.b	d0,$34(a0)
00014C48 0241 000C                  		andi.w	#$C,d1
00014C4C 43F9 0000 0000             		lea	(Bub_BblTypes).l,a1
00014C52 D2C1                       		adda.w	d1,a1
00014C54 2149 003C                  		move.l	a1,$3C(a0)
00014C58 5328 0032                  		subq.b	#1,bub_time(a0)
00014C5C 6A00                       		bpl.s	@loc_12872
00014C5E 1168 0033 0032             		move.b	bub_freq(a0),bub_time(a0)
00014C64 08E8 0007 0036             		bset	#7,$36(a0)
00014C6A                            
00014C6A                            @loc_12872:
00014C6A 6000                       		bra.s	@loc_1287C
00014C6C                            ; ===========================================================================
00014C6C                            
00014C6C                            @loc_12874:
00014C6C 5368 0038                  		subq.w	#1,$38(a0)
00014C70 6A00 0000                  		bpl.w	@loc_12914
00014C74                            
00014C74                            @loc_1287C:
00014C74 4EB9 0000 3D02             		jsr	(RandomNumber).l
00014C7A 0240 001F                  		andi.w	#$1F,d0
00014C7E 3140 0038                  		move.w	d0,$38(a0)
00014C82 6100 B144                  		bsr.w	FindFreeObj
00014C86 6600                       		bne.s	@fail
00014C88 12BC 0064                  		move.b	#id_Bubble,0(a1) ; load bubble object
00014C8C 3368 0008 0008             		move.w	obX(a0),obX(a1)
00014C92 4EB9 0000 3D02             		jsr	(RandomNumber).l
00014C98 0240 000F                  		andi.w	#$F,d0
00014C9C 5140                       		subq.w	#8,d0
00014C9E D169 0008                  		add.w	d0,obX(a1)
00014CA2 3368 000C 000C             		move.w	obY(a0),obY(a1)
00014CA8 7000                       		moveq	#0,d0
00014CAA 1028 0034                  		move.b	$34(a0),d0
00014CAE 2468 003C                  		movea.l	$3C(a0),a2
00014CB2 1372 0000 0028             		move.b	(a2,d0.w),obSubtype(a1)
00014CB8 0828 0007 0036             		btst	#7,$36(a0)
00014CBE 6700                       		beq.s	@fail
00014CC0 4EB9 0000 3D02             		jsr	(RandomNumber).l
00014CC6 0240 0003                  		andi.w	#3,d0
00014CCA 6600                       		bne.s	@loc_buh
00014CCC 08E8 0006 0036             		bset	#6,$36(a0)
00014CD2 6600                       		bne.s	@fail
00014CD4 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014CDA                            
00014CDA                            @loc_buh:
00014CDA 4A28 0034                  		tst.b	$34(a0)
00014CDE 6600                       		bne.s	@fail
00014CE0 08E8 0006 0036             		bset	#6,$36(a0)
00014CE6 6600                       		bne.s	@fail
00014CE8 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014CEE                            
00014CEE                            	@fail:
00014CEE 5328 0034                  		subq.b	#1,$34(a0)
00014CF2 6A00                       		bpl.s	@loc_12914
00014CF4 4EB9 0000 3D02             		jsr	(RandomNumber).l
00014CFA 0240 007F                  		andi.w	#$7F,d0
00014CFE 0640 0080                  		addi.w	#$80,d0
00014D02 D168 0038                  		add.w	d0,$38(a0)
00014D06 4268 0036                  		clr.w	$36(a0)
00014D0A                            
00014D0A                            @loc_12914:
00014D0A 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014D10 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
00014D16                            
00014D16                            @chkdel:
00014D34 3038 F646                  		move.w	(v_waterpos1).w,d0
00014D38 B068 000C                  		cmp.w	obY(a0),d0
00014D3C 6500 AAF0                  		bcs.w	DisplaySprite
00014D40 4E75                       		rts	
00014D42                            ; ===========================================================================
00014D42                            ; bubble production sequence
00014D42                            
00014D42                            ; 0 = small bubble, 1 =	large bubble
00014D42                            
00014D42 0001 0000 0000 0100 0000+  Bub_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00014D54                            
00014D54                            ; ===========================================================================
00014D54                            
00014D54                            Bub_ChkSonic:
00014D54 4A38 F7C8                  		tst.b	(f_lockmulti).w
00014D58 6B00                       		bmi.s	@loc_12998
00014D5A 43F8 D000                  		lea	(v_player).w,a1
00014D5E 3029 0008                  		move.w	obX(a1),d0
00014D62 3228 0008                  		move.w	obX(a0),d1
00014D66 0441 0010                  		subi.w	#$10,d1
00014D6A B240                       		cmp.w	d0,d1
00014D6C 6400                       		bcc.s	@loc_12998
00014D6E 0641 0020                  		addi.w	#$20,d1
00014D72 B240                       		cmp.w	d0,d1
00014D74 6500                       		bcs.s	@loc_12998
00014D76 3029 000C                  		move.w	obY(a1),d0
00014D7A 3228 000C                  		move.w	obY(a0),d1
00014D7E B240                       		cmp.w	d0,d1
00014D80 6400                       		bcc.s	@loc_12998
00014D82 0641 0010                  		addi.w	#$10,d1
00014D86 B240                       		cmp.w	d0,d1
00014D88 6500                       		bcs.s	@loc_12998
00014D8A 7001                       		moveq	#1,d0
00014D8C 4E75                       		rts	
00014D8E                            ; ===========================================================================
00014D8E                            
00014D8E                            @loc_12998:
00014D8E 7000                       		moveq	#0,d0
00014D90 4E75                       		rts	
00014D90 4E75                       		rts	
00014D92                            		include	"_anim\Bubbles.asm"
00014D92                            ; ---------------------------------------------------------------------------
00014D92                            ; Animation script - bubbles (LZ)
00014D92                            ; ---------------------------------------------------------------------------
00014D92 0000                       Ani_Bub:	dc.w @small-Ani_Bub
00014D94 0000                       		dc.w @medium-Ani_Bub
00014D96 0000                       		dc.w @large-Ani_Bub
00014D98 0000                       		dc.w @incroutine-Ani_Bub
00014D9A 0000                       		dc.w @incroutine-Ani_Bub
00014D9C 0000                       		dc.w @burst-Ani_Bub
00014D9E 0000                       		dc.w @bubmaker-Ani_Bub
00014DA0 0D00 0102 FC               @small:		dc.b $D, 0, 1, 2, afRoutine ; small bubble forming
00014DA6 00                         		even
00014DA6 0D01 0203 04FC             @medium:	dc.b $D, 1, 2, 3, 4, afRoutine ; medium bubble forming
00014DAC 0D02 0304 0506 FC          @large:		dc.b $D, 2, 3, 4, 5, 6,	afRoutine ; full size bubble forming
00014DB4 00                         		even
00014DB4 04FC                       @incroutine:	dc.b 4,	afRoutine	; increment routine counter (no animation)
00014DB6 0406 0708 FC               @burst:		dc.b 4,	6, 7, 8, afRoutine ; large bubble bursts
00014DBC 00                         		even
00014DBC 0E13 1415 FF               @bubmaker:	dc.b $E, $13, $14, $15,	afEnd ; bubble maker on the floor
00014DC2 00                         		even
00014DC2 00                         		even
00014DC2                            Map_Bub:	include	"_maps\Bubbles.asm"
00014DC2                            ; ---------------------------------------------------------------------------
00014DC2                            ; Sprite mappings - bubbles (LZ)
00014DC2                            ; ---------------------------------------------------------------------------
00014DC2                            Map_Bub_internal:
00014DC2 0000                       		dc.w @bubble1-Map_Bub_internal
00014DC4 0000                       		dc.w @bubble2-Map_Bub_internal
00014DC6 0000                       		dc.w @bubble3-Map_Bub_internal
00014DC8 0000                       		dc.w @bubble4-Map_Bub_internal
00014DCA 0000                       		dc.w @bubble5-Map_Bub_internal
00014DCC 0000                       		dc.w @bubble6-Map_Bub_internal
00014DCE 0000                       		dc.w @bubblefull-Map_Bub_internal
00014DD0 0000                       		dc.w @burst1-Map_Bub_internal
00014DD2 0000                       		dc.w @burst2-Map_Bub_internal
00014DD4 0000                       		dc.w @zero_sm-Map_Bub_internal
00014DD6 0000                       		dc.w @five_sm-Map_Bub_internal
00014DD8 0000                       		dc.w @three_sm-Map_Bub_internal
00014DDA 0000                       		dc.w @one_sm-Map_Bub_internal
00014DDC 0000                       		dc.w @zero-Map_Bub_internal
00014DDE 0000                       		dc.w @five-Map_Bub_internal
00014DE0 0000                       		dc.w @four-Map_Bub_internal
00014DE2 0000                       		dc.w @three-Map_Bub_internal
00014DE4 0000                       		dc.w @two-Map_Bub_internal
00014DE6 0000                       		dc.w @one-Map_Bub_internal
00014DE8 0000                       		dc.w @bubmaker1-Map_Bub_internal
00014DEA 0000                       		dc.w @bubmaker2-Map_Bub_internal
00014DEC 0000                       		dc.w @bubmaker3-Map_Bub_internal
00014DEE 0000                       		dc.w @blank-Map_Bub_internal
00014DF0 01                         @bubble1:	dc.b 1
00014DF1 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC	; bubbles, increasing in size
00014DF6 01                         @bubble2:	dc.b 1
00014DF7 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00014DFC 01                         @bubble3:	dc.b 1
00014DFD FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00014E02 01                         @bubble4:	dc.b 1
00014E03 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00014E08 01                         @bubble5:	dc.b 1
00014E09 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00014E0E 01                         @bubble6:	dc.b 1
00014E0F F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00014E14 01                         @bubblefull:	dc.b 1
00014E15 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00014E1A 04                         @burst1:	dc.b 4
00014E1B F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0 ; large bubble bursting
00014E20 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00014E25 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00014E2A 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00014E2F 04                         @burst2:	dc.b 4
00014E30 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00014E35 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00014E3A 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00014E3F 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00014E44 01                         @zero_sm:	dc.b 1
00014E45 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8 ; small, partially-formed countdown numbers
00014E4A 01                         @five_sm:	dc.b 1
00014E4B F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00014E50 01                         @three_sm:	dc.b 1
00014E51 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00014E56 01                         @one_sm:	dc.b 1
00014E57 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00014E5C 01                         @zero:		dc.b 1
00014E5D F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8 ; fully-formed countdown numbers
00014E62 01                         @five:		dc.b 1
00014E63 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00014E68 01                         @four:		dc.b 1
00014E69 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00014E6E 01                         @three:		dc.b 1
00014E6F F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00014E74 01                         @two:		dc.b 1
00014E75 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00014E7A 01                         @one:		dc.b 1
00014E7B F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00014E80 01                         @bubmaker1:	dc.b 1
00014E81 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00014E86 01                         @bubmaker2:	dc.b 1
00014E87 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00014E8C 01                         @bubmaker3:	dc.b 1
00014E8D F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00014E92 00                         @blank:		dc.b 0
00014E94 00                         		even
00014E94 00                         		even
00014E94                            		include	"_incObj\65 Waterfalls.asm"
00014E94                            ; ---------------------------------------------------------------------------
00014E94                            ; Object 65 - waterfalls (LZ)
00014E94                            ; ---------------------------------------------------------------------------
00014E94                            
00014E94                            Waterfall:
00014E94 7000                       		moveq	#0,d0
00014E96 1028 0024                  		move.b	obRoutine(a0),d0
00014E9A 323B 0000                  		move.w	WFall_Index(pc,d0.w),d1
00014E9E 4EFB 1000                  		jmp	WFall_Index(pc,d1.w)
00014EA2                            ; ===========================================================================
00014EA2 0000                       WFall_Index:	dc.w WFall_Main-WFall_Index
00014EA4 0000                       		dc.w WFall_Animate-WFall_Index
00014EA6 0000                       		dc.w WFall_ChkDel-WFall_Index
00014EA8 0000                       		dc.w WFall_OnWater-WFall_Index
00014EAA 0000                       		dc.w loc_12B36-WFall_Index
00014EAC                            ; ===========================================================================
00014EAC                            
00014EAC                            WFall_Main:	; Routine 0
00014EAC 5828 0024                  		addq.b	#4,obRoutine(a0)
00014EB0 217C 0000 0000 0004        		move.l	#Map_WFall,obMap(a0)
00014EB8 317C 4259 0002             		move.w	#$4259,obGfx(a0)
00014EBE 0028 0004 0001             		ori.b	#4,obRender(a0)
00014EC4 117C 0018 0014             		move.b	#$18,obActWid(a0)
00014ECA 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014ED0 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00014ED4 6A00                       		bpl.s	@under80	; branch if $00-$7F
00014ED6 08E8 0007 0002             		bset	#7,obGfx(a0)
00014EDC                            
00014EDC                            	@under80:
00014EDC 0200 000F                  		andi.b	#$F,d0		; read only the	2nd digit
00014EE0 1140 001A                  		move.b	d0,obFrame(a0)	; set frame number
00014EE4 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00014EE8 6600                       		bne.s	WFall_ChkDel	; if not, branch
00014EEA                            
00014EEA 4228 0018                  		clr.b	obPriority(a0)	; object is in front of Sonic
00014EEE 5528 0024                  		subq.b	#2,obRoutine(a0) ; goto WFall_Animate next
00014EF2 0828 0006 0028             		btst	#6,obSubtype(a0) ; is object type $49 ?
00014EF8 6700                       		beq.s	@not49		; if not, branch
00014EFA                            
00014EFA 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto WFall_OnWater next
00014F00                            
00014F00                            	@not49:
00014F00 0828 0005 0028             		btst	#5,obSubtype(a0) ; is object type $A9 ?
00014F06 6700                       		beq.s	WFall_Animate	; if not, branch
00014F08 117C 0008 0024             		move.b	#8,obRoutine(a0) ; goto loc_12B36 next
00014F0E                            
00014F0E                            WFall_Animate:	; Routine 2
00014F0E 43F9 0000 0000             		lea	(Ani_WFall).l,a1
00014F14 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
00014F1A                            
00014F1A                            WFall_ChkDel:	; Routine 4
00014F1A 6000 C9C6                  		bra.w	RememberState
00014F1E                            ; ===========================================================================
00014F1E                            
00014F1E                            WFall_OnWater:	; Routine 6
00014F1E 3038 F646                  		move.w	(v_waterpos1).w,d0
00014F22 0440 0010                  		subi.w	#$10,d0
00014F26 3140 000C                  		move.w	d0,obY(a0)	; match	object position	to water height
00014F2A 60E2                       		bra.s	WFall_Animate
00014F2C                            ; ===========================================================================
00014F2C                            
00014F2C                            loc_12B36:	; Routine 8
00014F2C 08A8 0007 0002             		bclr	#7,obGfx(a0)
00014F32 0C38 0007 A506             		cmpi.b	#7,(v_lvllayout+$106).w
00014F38 6600                       		bne.s	@animate
00014F3A 08E8 0007 0002             		bset	#7,obGfx(a0)
00014F40                            
00014F40                            	@animate:
00014F40 60CC                       		bra.s	WFall_Animate
00014F40 60CC                       		bra.s	WFall_Animate
00014F42                            		include	"_anim\Waterfalls.asm"
00014F42                            ; ---------------------------------------------------------------------------
00014F42                            ; Animation script - waterfall (LZ)
00014F42                            ; ---------------------------------------------------------------------------
00014F42 0000                       Ani_WFall:	dc.w @splash-Ani_WFall
00014F44 0509 0A0B FF               @splash:	dc.b 5,	9, $A, $B, afEnd
00014F4A 00                         		even
00014F4A 00                         		even
00014F4A                            Map_WFall	include	"_maps\Waterfalls.asm"
00014F4A                            ; ---------------------------------------------------------------------------
00014F4A                            ; Sprite mappings - waterfalls (LZ)
00014F4A                            ; ---------------------------------------------------------------------------
00014F4A                            Map_WFall_internal:
00014F4A 0000                       		dc.w @vertnarrow-Map_WFall_internal
00014F4C 0000                       		dc.w @cornerwide-Map_WFall_internal
00014F4E 0000                       		dc.w @cornermedium-Map_WFall_internal
00014F50 0000                       		dc.w @cornernarrow-Map_WFall_internal
00014F52 0000                       		dc.w @cornermedium2-Map_WFall_internal
00014F54 0000                       		dc.w @cornernarrow2-Map_WFall_internal
00014F56 0000                       		dc.w @cornernarrow3-Map_WFall_internal
00014F58 0000                       		dc.w @vertwide-Map_WFall_internal
00014F5A 0000                       		dc.w @diagonal-Map_WFall_internal
00014F5C 0000                       		dc.w @splash1-Map_WFall_internal
00014F5E 0000                       		dc.w @splash2-Map_WFall_internal
00014F60 0000                       		dc.w @splash3-Map_WFall_internal
00014F62 01                         @vertnarrow:	dc.b 1
00014F63 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00014F68 02                         @cornerwide:	dc.b 2
00014F69 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00014F6E 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00014F73 02                         @cornermedium:	dc.b 2
00014F74 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014F79 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014F7E 01                         @cornernarrow:	dc.b 1
00014F7F F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00014F84 02                         @cornermedium2:	dc.b 2
00014F85 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014F8A 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014F8F 01                         @cornernarrow2:	dc.b 1
00014F90 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00014F95 01                         @cornernarrow3:	dc.b 1
00014F96 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00014F9B 01                         @vertwide:	dc.b 1
00014F9C F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00014FA1 02                         @diagonal:	dc.b 2
00014FA2 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00014FA7 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00014FAC 02                         @splash1:	dc.b 2
00014FAD F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00014FB2 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00014FB7 02                         @splash2:	dc.b 2
00014FB8 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00014FBD F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00014FC2 02                         @splash3:	dc.b 2
00014FC3 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00014FC8 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00014FCE 00                         		even
00014FCE 00                         		even
00014FCE                            
00014FCE                            
00014FCE                            SpinDash_dust:				;TIS - Changed to allow for dynamic positioning
00014FCE                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
00014FCE 7000                       		moveq	#0,d0
00014FD0 1028 0024                  		move.b	$24(a0),d0
00014FD4 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
00014FD8 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
00014FDC                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014FDC 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
00014FDE 0000                       		dc loc_1DD90-off_1DD2E; 1
00014FE0 0000                       		dc loc_1DE46-off_1DD2E; 2
00014FE2 0000                       		dc loc_1DE4A-off_1DD2E; 3
00014FE4                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014FE4                            
00014FE4                            loc_1DD36:				; DATA XREF: h+6DBA?o
00014FE4 5428 0024                  		addq.b	#2,$24(a0)
00014FE8 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
00014FF0 0028 0004 0001             		or.b	#4,1(a0)
00014FF6 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014FFC 117C 0010 0014             		move.b	#$10,obActWid(a0)
00015002 317C 07AC 0002             		move	#$7AC,2(a0)
00015008 317C D000 003E             		move	#-$3000,$3E(a0)
0001500E 317C F580 003C             		move	#$F580,$3C(a0)
00015014 B0FC D1C0                  		cmp	#-$2E40,a0
00015018 6700                       		beq.s	loc_1DD8C
0001501A 117C 0001 0034             		move.b	#1,$34(a0)
00015020                            ;		cmp	#2,($FFFFFF70).w
00015020                            ;		beq.s	loc_1DD8C
00015020                            ;		move	#$48C,2(a0)
00015020                            ;		move	#-$4FC0,$3E(a0)
00015020                            ;		move	#-$6E80,$3C(a0)
00015020                            
00015020                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
00015020                            ;		bsr.w	sub_16D6E
00015020                            
00015020                            loc_1DD90:				; DATA XREF: h+6DBA?o
00015020 3468 003E                  		movea.w	$3E(a0),a2
00015024 7000                       		moveq	#0,d0
00015026 1028 001C                  		move.b	$1C(a0),d0
0001502A D040                       		add	d0,d0
0001502C 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
00015030 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
00015034                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015034 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
00015036 0000                       		dc loc_1DDAC-off_1DDA4; 1
00015038 0000                       		dc loc_1DDCC-off_1DDA4; 2
0001503A 0000                       		dc loc_1DE20-off_1DDA4; 3
0001503C                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001503C                            
0001503C                            loc_1DDAC:				; DATA XREF: h+6E30?o
0001503C 3178 F646 000C             		move	(v_waterpos1).w,$C(a0)	;TIS - Changed to variable name
00015042 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	;TIS is level LZ?
00015048 6700                       		beq.s	StandardWaterLevel	;TIS - if no, branch
0001504A 3178 FF92 000C             		move	(v_watersplashpos).w,$C(a0)	;TIS - Dynamic water position
00015050                            	StandardWaterLevel:
00015050 4A28 001D                  		tst.b	$1D(a0)
00015054 6600                       		bne.s	loc_1DE28
00015056 316A 0008 0008             		move	8(a2),8(a0)
0001505C 117C 0000 0022             		move.b	#0,$22(a0)
00015062 0268 7FFF 0002             		and	#$7FFF,2(a0)
00015068 6000                       		bra.s	loc_1DE28
0001506A                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001506A                            
0001506A                            loc_1DDCC:				; DATA XREF: h+6E30?o
0001506A                            ;		cmp.b	#$C,$28(a2)
0001506A                            ;		bcs.s	loc_1DE3E
0001506A 0C2A 0004 0024             		cmp.b	#4,$24(a2)
00015070 6400                       		bcc.s	loc_1DE3E
00015072 4A2A 0039                  		tst.b	$39(a2)
00015076 6700                       		beq.s	loc_1DE3E
00015078 316A 0008 0008             		move	8(a2),8(a0)
0001507E 316A 000C 000C             		move	$C(a2),$C(a0)
00015084 116A 0022 0022             		move.b	$22(a2),$22(a0)
0001508A 0228 0001 0022             		and.b	#1,$22(a0)
00015090 4A28 0034                  		tst.b	$34(a0)
00015094 6700                       		beq.s	loc_1DE06
00015096 5968 000C                  		sub	#4,$C(a0)
0001509A                            
0001509A                            loc_1DE06:				; CODE XREF: h+6E8A?j
0001509A 4A28 001D                  		tst.b	$1D(a0)
0001509E 6600                       		bne.s	loc_1DE28
000150A0 0268 7FFF 0002             		and	#$7FFF,2(a0)
000150A6 4A6A 0002                  		tst	2(a2)
000150AA 6A00                       		bpl.s	loc_1DE28
000150AC 0068 8000 0002             		or	#-$8000,2(a0)
000150B2                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000150B2                            
000150B2                            loc_1DE20:				; DATA XREF: h+6E30?o
000150B2                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
000150B2 43F9 0000 0000             		lea	(off_1DF38).l,a1
000150B8 4EB9 0000 C8E4             		jsr	AnimateSprite
000150BE 6100 0000                  		bsr.w	loc_1DEE4
000150C2 4EFA A76A                  		jmp	DisplaySprite
000150C6                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000150C6                            
000150C6                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
000150C6 117C 0000 001C             		move.b	#0,$1C(a0)
000150CC 4E75                       		rts	
000150CE                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000150CE                            
000150CE                            loc_1DE46:				; DATA XREF: h+6DBA?o
000150CE 6000 A79E                  		bra.w	DeleteObject
000150D2                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000150D2                            
000150D2                            
000150D2                            
000150D2                            loc_1DE4A:
000150D2 3468 003E                  	movea.w	$3E(a0),a2
000150D6 7210                       	moveq	#$10,d1
000150D8 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
000150DE 6700                       	beq.s	loc_1DE64
000150E0 7206                       	moveq	#$6,d1
000150E2 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
000150E8 6700                       	beq.s	loc_1DE64
000150EA 117C 0002 0024             	move.b	#2,$24(a0)
000150F0 117C 0000 0032             	move.b	#0,$32(a0)
000150F6 4E75                       	rts
000150F8                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000150F8                            
000150F8                            loc_1DE64:				; CODE XREF: h+6EE0?j
000150F8 5328 0032                  		subq.b	#1,$32(a0)
000150FC 6A00                       		bpl.s	loc_1DEE0
000150FE 117C 0003 0032             		move.b	#3,$32(a0)
00015104 4EBA ACC2                  		jsr	FindFreeObj
00015108 6600                       		bne.s	loc_1DEE0
0001510A 1290                       		move.b	0(a0),0(a1)
0001510C 336A 0008 0008             		move	8(a2),8(a1)
00015112 336A 000C 000C             		move	$C(a2),$C(a1)
00015118 4A28 0034                  		tst.b	$34(a0)
0001511C 6700                       		beq.s	loc_1DE9A
0001511E 5941                       		sub	#4,d1
00015120                            
00015120                            loc_1DE9A:				; CODE XREF: h+6F1E?j
00015120 D369 000C                  		add	d1,$C(a1)
00015124 137C 0000 0022             		move.b	#0,$22(a1)
0001512A 137C 0003 001C             		move.b	#3,$1C(a1)
00015130 5429 0024                  		addq.b	#2,$24(a1)
00015134 2368 0004 0004             		move.l	4(a0),4(a1)
0001513A 1368 0001 0001             		move.b	1(a0),1(a1)
00015140 337C 0080 0018             		move.w	#$80,obPriority(a1)
00015146 137C 0004 0014             		move.b	#4,obActWid(a1)
0001514C 3368 0002 0002             		move	2(a0),2(a1)
00015152 3368 003E 003E             		move	$3E(a0),$3E(a1)
00015158 0269 7FFF 0002             		and	#$7FFF,2(a1)
0001515E 4A6A 0002                  		tst	2(a2)
00015162 6A00                       		bpl.s	loc_1DEE0
00015164 0069 8000 0002             		or	#-$8000,2(a1)
0001516A                            
0001516A                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
0001516A 6100                       		bsr.s	loc_1DEE4
0001516C 4E75                       		rts	
0001516E                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001516E                            
0001516E                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
0001516E 7000                       		moveq	#0,d0
00015170 1028 001A                  		move.b	$1A(a0),d0
00015174 B028 0030                  		cmp.b	$30(a0),d0
00015178 6700 0000                  		beq.w	locret_1DF36
0001517C 1140 0030                  		move.b	d0,$30(a0)
00015180 45F9 0000 0000             		lea	(off_1E074).l,a2
00015186 D040                       		add	d0,d0
00015188 D4F2 0000                  		add	(a2,d0.w),a2
0001518C 3A1A                       		move	(a2)+,d5
0001518E 5345                       		subq	#1,d5
00015190 6B00 0000                  		bmi.w	locret_1DF36
00015194 3828 003C                  		move $3C(a0),d4
00015198                            
00015198                            loc_1DF0A:				; CODE XREF: h+6FBE?j
00015198 7200                       		moveq	#0,d1
0001519A 321A                       		move	(a2)+,d1
0001519C 3601                       		move	d1,d3
0001519E E04B                       		lsr.w	#8,d3
000151A0 0243 00F0                  		and	#$F0,d3	; 'ð'
000151A4 0643 0010                  		add	#$10,d3
000151A8 0241 0FFF                  		and	#$FFF,d1
000151AC EB89                       		lsl.l	#5,d1
000151AE 0681 0000 0000             		add.l	#Art_Dust,d1
000151B4 3404                       		move	d4,d2
000151B6 D843                       		add	d3,d4
000151B8 D843                       		add	d3,d4
000151BA 4EB9 0000 14D4             		jsr	(QueueDMATransfer).l
000151C0 51CD FFD6                  		dbf	d5,loc_1DF0A
000151C4 4E75                           rts
000151C6                            
000151C6                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
000151C6 4E75                       		rts	
000151C8                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000151C8 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
000151CA 0000                       		dc byte_1DF43-off_1DF38; 1
000151CC 0000                       		dc byte_1DF4F-off_1DF38; 2
000151CE 0000                       		dc byte_1DF58-off_1DF38; 3
000151D0 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
000151D3 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
000151DF 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
000151E8 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
000151EE                            ; -------------------------------------------------------------------------------
000151EE                            ; Unknown Sprite Mappings
000151EE                            ; -------------------------------------------------------------------------------
000151EE                            MapUnc_1DF5E:
000151EE 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
000151F0 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
000151F2 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
000151F4 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
000151F6 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
000151F8 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
000151FA 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
000151FC 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
000151FE 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
00015200 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
00015202 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
00015204 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
00015206 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
00015208 0000                       	dc word_1E004-MapUnc_1DF5E; 13
0001520A 0000                       	dc word_1E016-MapUnc_1DF5E; 14
0001520C 0000                       	dc word_1E028-MapUnc_1DF5E; 15
0001520E 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
00015210 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
00015212 0000                       	dc word_1E056-MapUnc_1DF5E; 18
00015214 0000                       	dc word_1E060-MapUnc_1DF5E; 19
00015216 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
00015218 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
0001521A 00                         word_1DF8A:	dc.b 0
0001521B 01                         word_1DF8C:	dc.b 1
0001521C F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00015221 01                         word_1DF96:	dc.b 1
00015222 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015227 01                         word_1DFA0:	dc.b 1
00015228 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001522D 01                         word_1DFAA:	dc.b 1
0001522E E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015233 01                         word_1DFB4:	dc.b 1
00015234 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015239 01                         word_1DFBE:	dc.b 1
0001523A E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001523F 01                         word_1DFC8:	dc.b 1
00015240 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00015245 01                         word_1DFD2:	dc.b 1
00015246 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
0001524B 01                         word_1DFDC:	dc.b 1
0001524C F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00015251 01                         word_1DFE6:	dc.b 1
00015252 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00015257 01                         word_1DFF0:	dc.b 1
00015258 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
0001525D 01                         word_1DFFA:	dc.b 1
0001525E 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00015263 02                         word_1E004:	dc.b 2
00015264 F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
00015269 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
0001526E 02                         word_1E016:	dc.b 2
0001526F F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
00015274 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
00015279 02                         word_1E028:	dc.b 2
0001527A F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
0001527F 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00015284 02                         word_1E03A:	dc.b 2
00015285 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
0001528A 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
0001528F 01                         word_1E04C:	dc.b 1
00015290 F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
00015295 01                         word_1E056:	dc.b 1
00015296 F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
0001529B 01                         word_1E060:	dc.b 1
0001529C F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
000152A1 01                         word_1E06A:	dc.b 1
000152A2 F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
000152A7 00                         	dc.b 0
000152A8 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
000152AA 0000                       	dc word_1E0A2-off_1E074; 1
000152AC 0000                       	dc word_1E0A6-off_1E074; 2
000152AE 0000                       	dc word_1E0AA-off_1E074; 3
000152B0 0000                       	dc word_1E0AE-off_1E074; 4
000152B2 0000                       	dc word_1E0B2-off_1E074; 5
000152B4 0000                       	dc word_1E0B6-off_1E074; 6
000152B6 0000                       	dc word_1E0BA-off_1E074; 7
000152B8 0000                       	dc word_1E0BE-off_1E074; 8
000152BA 0000                       	dc word_1E0C2-off_1E074; 9
000152BC 0000                       	dc word_1E0C6-off_1E074; 10
000152BE 0000                       	dc word_1E0CA-off_1E074; 11
000152C0 0000                       	dc word_1E0CE-off_1E074; 12
000152C2 0000                       	dc word_1E0D2-off_1E074; 13
000152C4 0000                       	dc word_1E0D8-off_1E074; 14
000152C6 0000                       	dc word_1E0DE-off_1E074; 15
000152C8 0000                       	dc word_1E0E4-off_1E074; 16
000152CA 0000                       	dc word_1E0EA-off_1E074; 17
000152CC 0000                       	dc word_1E0EA-off_1E074; 18
000152CE 0000                       	dc word_1E0EA-off_1E074; 19
000152D0 0000                       	dc word_1E0EA-off_1E074; 20
000152D2 0000                       	dc word_1E0EC-off_1E074; 21
000152D4 0000                       word_1E0A0:	dc 0
000152D6 0001                       word_1E0A2:	dc 1
000152D8 7000                       	dc $7000
000152DA 0001                       word_1E0A6:	dc 1
000152DC F008                       	dc $F008
000152DE 0001                       word_1E0AA:	dc 1
000152E0 F018                       	dc $F018
000152E2 0001                       word_1E0AE:	dc 1
000152E4 F028                       	dc $F028
000152E6 0001                       word_1E0B2:	dc 1
000152E8 F038                       	dc $F038
000152EA 0001                       word_1E0B6:	dc 1
000152EC F048                       	dc $F048
000152EE 0001                       word_1E0BA:	dc 1
000152F0 7058                       	dc $7058
000152F2 0001                       word_1E0BE:	dc 1
000152F4 7060                       	dc $7060
000152F6 0001                       word_1E0C2:	dc 1
000152F8 7068                       	dc $7068
000152FA 0001                       word_1E0C6:	dc 1
000152FC 7070                       	dc $7070
000152FE 0001                       word_1E0CA:	dc 1
00015300 7078                       	dc $7078
00015302 0001                       word_1E0CE:	dc 1
00015304 7080                       	dc $7080
00015306 0002                       word_1E0D2:	dc 2
00015308 1088                       	dc $1088
0001530A 708A                       	dc $708A
0001530C 0002                       word_1E0D8:	dc 2
0001530E 3092                       	dc $3092
00015310 7096                       	dc $7096
00015312 0002                       word_1E0DE:	dc 2
00015314 509E                       	dc $509E
00015316 70A4                       	dc $70A4
00015318 0002                       word_1E0E4:	dc 2
0001531A 50AC                       	dc $50AC
0001531C 70B2                       	dc $70B2
0001531E 0000                       word_1E0EA:	dc 0
00015320 0001                       word_1E0EC:	dc 1
00015322 F0BA                       	dc $F0BA
00015324                            	even
00015324                            
00015324                            ; ===========================================================================
00015324                            
00015324                            LoadPlayerPal:
00015324 7000                       		moveq	#0,d0
00015326 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
0001532A 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
0001532E 4E75                       		rts
00015330                            
00015330                            	@palLUT:
00015330 0316 1718 19               		dc.b	palid_Sonic, palid_Sonic2, palid_Sonic3, palid_Sonic4, palid_Sonic5
00015335 1A1B 1C1D 1E1F             		dc.b	palid_Sonic6, palid_Sonic7, palid_Sonic8, palid_Sonic9, palid_Sonic10, palid_Sonic11
0001533C 00                         		even
0001533C                            
0001533C                            LoadPlayerWaterPal:
0001533C 7000                       		moveq	#0,d0
0001533E 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
00015342 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
00015346 4E75                       		rts
00015348                            
00015348                            	@palLUT:
00015348 1020 2122 23               		dc.b	palid_SBZ3SonWat, palid_SonWater2, palid_SonWater3, palid_SonWater4, palid_SonWater5
0001534D 2425 2627 2829             		dc.b	palid_SonWater6, palid_SonWater7, palid_SonWater8, palid_SonWater9, palid_SonWater10, palid_SonWater11
00015354 00                         		even
00015354                            
00015354                            LoadLifeIcon:
00015354 7000                       		moveq	#0,d0
00015356 3038 FE10                  		move.w	(v_zone).w,d0	
0001535A E418                       		ror.b	#2,d0
0001535C EC48                               lsr.w 	#6,d0		
0001535E 103B 0000                  		move.b	LoadLifeIcon_Table(pc,d0.w),d0	
00015362 4EB8 1798                  		jsr		AddPLC	
00015366 4E75                       		rts
00015368                            
00015368                            LoadLifeIcon_Table:
00015368                            		; GHZ
00015368 00                         		dc.b	plcid_LifeIcon
00015369 00                         		dc.b	plcid_LifeIcon
0001536A 00                         		dc.b	plcid_LifeIcon	
0001536B 00                         		dc.b	plcid_LifeIcon	
0001536C                            		; LZ
0001536C 00                         		dc.b	plcid_LifeIcon
0001536D 00                         		dc.b	plcid_LifeIcon
0001536E 00                         		dc.b	plcid_LifeIcon	
0001536F 00                         		dc.b	plcid_LifeIconF	
00015370                            		; MZ
00015370 00                         		dc.b	plcid_LifeIconF
00015371 00                         		dc.b	plcid_LifeIconF
00015372 00                         		dc.b	plcid_LifeIconF
00015373 00                         		dc.b	plcid_LifeIconF
00015374                            		; SLZ
00015374 00                         		dc.b	plcid_LifeIcon
00015375 00                         		dc.b	plcid_LifeIcon
00015376 00                         		dc.b	plcid_LifeIcon	
00015377 00                         		dc.b	plcid_LifeIcon	
00015378                            		; SYZ
00015378 00                         		dc.b	plcid_LifeIconF
00015379 00                         		dc.b	plcid_LifeIconF
0001537A 00                         		dc.b	plcid_LifeIconF
0001537B 00                         		dc.b	plcid_LifeIconF	
0001537C                            		; SBZ
0001537C 00                         		dc.b	plcid_LifeIconF
0001537D 00                         		dc.b	plcid_LifeIconF
0001537E 00                         		dc.b	plcid_LifeIconF
0001537F 00                         		dc.b	plcid_LifeIconF	
00015380                            		even
00015380                            
00015380                            LoadSRAMConfig:
00015380 13FC 0001 00A1 30F1                move.b  #1,($A130F1).l
00015388 41F9 0020 0001                     lea 	($200001).l,a0
0001538E 11E8 0001 FFBF             		move.b 	$1(a0), ($FFFFFFBF).w
00015394 11E8 0003 FF8B             		move.b 	$3(a0), ($FFFFFF8B).w
0001539A 13FC 0000 00A1 30F1                move.b  #0,($A130F1).l
000153A2 4E75                       		rts
000153A4                            
000153A4                            ; ---------------------------------------------------------------------------
000153A4                            ; Object 01 - Sonic
000153A4                            ; ---------------------------------------------------------------------------
000153A4                            
000153A4                            SonicPlayer:
000153A4 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
000153A8 6700                       		beq.s	Sonic_Normal	; if not, branch
000153AA 4EF9 0000 0000             		jmp	(DebugMode).l
000153B0                            ; ===========================================================================
000153B0                            
000153B0                            Sonic_Normal:
000153B0 7000                       		moveq	#0,d0
000153B2 1028 0024                  		move.b	obRoutine(a0),d0
000153B6 323B 0000                  		move.w	Sonic_Index(pc,d0.w),d1
000153BA 4EFB 1000                  		jmp	Sonic_Index(pc,d1.w)
000153BE                            ; ===========================================================================
000153BE 0000                       Sonic_Index:	dc.w Sonic_Main-Sonic_Index
000153C0 0000                       		dc.w Sonic_Control-Sonic_Index
000153C2 0000                       		dc.w Sonic_Hurt-Sonic_Index
000153C4 0000                       		dc.w Sonic_Death-Sonic_Index
000153C6 0000                       		dc.w Sonic_ResetLevel-Sonic_Index
000153C8                            ; ===========================================================================
000153C8                            
000153C8                            Sonic_Main:	; Routine 0
000153C8 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
000153CE 5428 0024                  		addq.b	#2,obRoutine(a0)
000153D2 117C 0013 0016             		move.b	#$13,obHeight(a0)
000153D8 117C 0009 0017             		move.b	#9,obWidth(a0)
000153DE 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
000153E6 317C 0780 0002             		move.w	#$780,obGfx(a0)
000153EC 317C 0100 0018             		move.w	#$100,obPriority(a0)
000153F2 117C 0018 0014             		move.b	#$18,obActWid(a0)
000153F8 117C 0004 0001             		move.b	#4,obRender(a0)
000153FE 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; Sonic's top speed
00015404 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; Sonic's acceleration
0001540A 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; Sonic's deceleration
00015410 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
00015416 11FC 0000 FE19             		move.b	#0,(Super_Sonic_flag).w
0001541C                            		
0001541C                            Sonic_Control:    ; Routine 2
0001541C 4A38 FF8B                   		tst.b	($FFFFFF8B).w
00015420 6700 0000                  		beq.w	@cont    
00015424 6100                       		bsr.s    Sonic_PanCamera    ; ++add this++
00015426                             
00015426                            	@cont: 
00015426 4A78 FFFA                  		tst.w    (f_debugmode).w    ; is debug cheat enabled?
0001542A 6700                       		beq.s    loc_12C58    ; if not, branch
0001542C 0838 0004 F605             		btst    #bitB,(v_jpadpress1).w ; is button B pressed?
00015432 6700                       		beq.s    loc_12C58    ; if not, branch
00015434 31FC 0001 FE08             		move.w    #1,(v_debuguse).w ; change Sonic into a ring/item
0001543A 4238 F7CC                  		clr.b    (f_lockctrl).w
0001543E 4E75                       		rts
00015440                            		
00015440                            		include    "_incObj\Sonic PanCamera.asm"    ; ++add this++
00015440                            ; ---------------------------------------------------------------------------
00015440                            ; Subroutine to    horizontally pan the camera view ahead of the player
00015440                            ; (Ported from the US version of Sonic CD's "R11A__.MMD" by Nat The Porcupine)
00015440                            ; ---------------------------------------------------------------------------
00015440                            
00015440                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00015440                            
00015440                            
00015440                            Sonic_PanCamera:
00015440 3238 F7A0                          move.w    (v_camera_pan).w,d1        ; get the current camera pan value
00015444 3028 0020                          move.w    obInertia(a0),d0        ; get sonic's inertia
00015448 6A00                               bpl.s    @abs_inertia            ; if sonic's inertia is positive, branch ahead
0001544A 4440                               neg.w    d0                        ; otherwise, we negate it to get the absolute value
0001544C                            
0001544C                                @abs_inertia:
0001544C                            
0001544C                            ; These lines were intended to prevent the Camera from panning while
0001544C                            ; going up the very first giant ramp in Palmtree Panic Zone Act 1.
0001544C                            ; However, given that no such object exists in Sonic 1, I just went
0001544C                            ; ahead and commented these out.
0001544C                                    ;tst.b	($FFFFF5C2).w               ; is sonic going up a giant ramp in PPZ?
0001544C                                   ; bne.s	@reset_pan                   ; if not, branch
0001544C                                    ;cmpi.w 	#$1B00,obX(a0)            ; is sonic's x position lower than $1B00?
0001544C                                    ;bcs.s    @reset_pan                ; if so, branch
0001544C                            
0001544C                            ; These lines aren't part of the original routine; I added them myself.
0001544C                            ; If you've ported the Spin Dash, uncomment the following lines of code
0001544C                            ; to allow the camera to pan ahead while charging the Spin Dash:
0001544C 4A28 0039                          tst.b    $39(a0)                    ; is sonic charging up a spin dash?
00015450 6700                               beq.s    @skip                    ; if not, branch
00015452 0828 0000 0022                     btst    #0,obStatus(a0)            ; check the direction that sonic is facing
00015458 6600                               bne.s    @pan_right                ; if he's facing right, pan the camera to the right
0001545A 6000                               bra.s    @pan_left                ; otherwise, pan the camera to the left
0001545C                            
0001545C                                @skip:
0001545C 0C40 0600                          cmpi.w    #$600,d0                ; is sonic's inertia greater than $600
00015460 6500                               bcs.s    @reset_pan                ; if not, recenter the screen (if needed)
00015462 4A68 0020                          tst.w    obInertia(a0)            ; otherwise, check the direction of inertia (by subtracting it from 0)
00015466 6A00                               bpl.s    @pan_left                ; if the result was positive, then inertia was negative, so we pan the screen left
00015468                            
00015468                                @pan_right:
00015468 5441                               addq.w    #2,d1                    ; add 2 to the pan value
0001546A 0C41 00E0                          cmpi.w    #224,d1                    ; is the pan value greater than 224 pixels?
0001546E 6500                               bcs.s    @update_pan                ; if not, branch
00015470 323C 00E0                          move.w    #224,d1                    ; otherwise, cap the value at the maximum of 224 pixels
00015474 6000                               bra.s    @update_pan                ; branch
00015476                            ; ---------------------------------------------------------------------------
00015476                            
00015476                                @pan_left:
00015476 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
00015478 0C41 0060                          cmpi.w    #96,d1                    ; is the pan value less than 96 pixels?
0001547C 6400                               bcc.s    @update_pan                ; if not, branch
0001547E 323C 0060                          move.w    #96,d1                    ; otherwise, cap the value at the minimum of 96 pixels
00015482 6000                               bra.s    @update_pan                ; branch
00015484                            ; ---------------------------------------------------------------------------
00015484                            
00015484                                @reset_pan:
00015484 0C41 00A0                          cmpi.w    #160,d1                    ; is the pan value 160 pixels?
00015488 6700                               beq.s    @update_pan                ; if so, branch
0001548A 6400                               bcc.s    @reset_left                ; otherwise, branch if it greater than 160
0001548C                                 
0001548C                                @reset_right:
0001548C 5441                               addq.w    #2,d1                    ; add 2 to the pan value
0001548E 6000                               bra.s    @update_pan                ; branch
00015490                            ; ---------------------------------------------------------------------------
00015490                            
00015490                                @reset_left:
00015490 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
00015492                            
00015492                                @update_pan:
00015492 31C1 F7A0                          move.w    d1,(v_camera_pan).w        ; update the camera pan value
00015496 4E75                               rts                                ; return
00015498                                 
00015498                            ; End of function Sonic_PanCamera
00015498                            
00015498                            
00015498                            ; ===========================================================================
00015498                            
00015498                            loc_12C58:
00015498 4A38 F7CC                  		tst.b	(f_lockctrl).w	; are controls locked?
0001549C 6600                       		bne.s	loc_12C64	; if yes, branch
0001549E 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w ; enable joypad control
000154A4                            
000154A4                            loc_12C64:
000154A4 0838 0000 F7C8             		btst	#0,(f_lockmulti).w ; are controls locked?
000154AA 6600                       		bne.s	loc_12C7E	; if yes, branch
000154AC 7000                       		moveq	#0,d0
000154AE 1028 0022                  		move.b	obStatus(a0),d0
000154B2 0240 0006                  		andi.w	#6,d0
000154B6 323B 0000                  		move.w	Sonic_Modes(pc,d0.w),d1
000154BA 4EBB 1000                  		jsr	Sonic_Modes(pc,d1.w)
000154BE                            
000154BE                            loc_12C7E:
000154BE 6100                       		bsr.s	Sonic_Display
000154C0 6100 0000                  		bsr.w	Sonic_Super
000154C4 6100 0000                  		bsr.w	Sonic_RecordPosition
000154C8 6100 0000                  		bsr.w	Sonic_Water
000154CC 1178 F768 0036             		move.b	(v_anglebuffer).w,$36(a0)
000154D2 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
000154D8 4A38 F7C7                  		tst.b	(f_wtunnelmode).w
000154DC 6700                       		beq.s	loc_12CA6
000154DE 4A28 001C                  		tst.b	obAnim(a0)
000154E2 6600                       		bne.s	loc_12CA6
000154E4 1168 001D 001C             		move.b	obNextAni(a0),obAnim(a0)
000154EA                            
000154EA                            loc_12CA6:
000154EA 6100 0000                  		bsr.w	Sonic_Animate
000154EE 4A38 F7C8                  		tst.b	(f_lockmulti).w
000154F2 6B00                       		bmi.s	loc_12CB6
000154F4 4EB9 0000 0000             		jsr	(ReactToItem).l
000154FA                            
000154FA                            loc_12CB6:
000154FA 6100 0000                  		bsr.w	Sonic_Loops
000154FE 6100 0000                  		bsr.w	Sonic_LoadGfx
00015502 4E75                       		rts	
00015504                            ; ===========================================================================
00015504 0000                       Sonic_Modes:	dc.w Sonic_MdNormal-Sonic_Modes
00015506 0000                       		dc.w Sonic_MdJump-Sonic_Modes
00015508 0000                       		dc.w Sonic_MdRoll-Sonic_Modes
0001550A 0000                       		dc.w Sonic_MdJump2-Sonic_Modes
0001550C                            ; ---------------------------------------------------------------------------
0001550C                            ; Music	to play	after invincibility wears off
0001550C                            ; ---------------------------------------------------------------------------
0001550C                            MusicList2:
0001550C 00                         		dc.b bgm_GHZ
0001550D 00                         		dc.b bgm_LZ
0001550E 00                         		dc.b bgm_MZ
0001550F 00                         		dc.b bgm_SLZ
00015510 00                         		dc.b bgm_SYZ
00015511 00                         		dc.b bgm_SBZ
00015512                            		; The ending doesn't get an entry
00015512                            		even
00015512                            
00015512                            		include	"_incObj\Sonic Display.asm"
00015512                            ; ---------------------------------------------------------------------------
00015512                            ; Subroutine to display Sonic and set music
00015512                            ; ---------------------------------------------------------------------------
00015512                            
00015512                            Sonic_Display:
00015512 3028 0030                  		move.w    flashtime(a0),d0
00015516 6700                       		beq.s    @showAfterImage
00015518 5368 0030                  		subq.w    #1,flashtime(a0)
0001551C E648                               	lsr.w    #3,d0
0001551E 6400                               	bcc.s    @chkinvincible
00015520                            
00015520                            	@showAfterImage:
00015520 3028 0020                          	move.w    obInertia(a0),d0            ; get inertia
00015524 4A40                       		tst.w    d0                    ; is inertia greater than 0?
00015526 6C00                       		bge.s    @AfterImage_Start    ; if yes, don't negate it
00015528 4440                       		neg        d0                    ; if not, negate it
0001552A                            
0001552A                            	@AfterImage_Start:        
0001552A 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
0001552E 6700                       		beq.s	@display	; if not, don't show the After Image
00015530                            		;cmpi.w    #$900,d0	; is the sonic inertia greater than A00?
00015530                            		;blt.s    @display	; if not, don't show the After Image
00015530                            	
00015530                            	@AfterImage_Start2:    
00015530 6100 A896                          	bsr.w    FindFreeObj    ; search a free space in object RAM
00015534 6600                               	bne.s    @display    ; if not have, don't load the After Image
00015536 12BC 0010                          	move.b  #$10,0(a1)        ; load after-image object
0001553A 2368 0004 0004                     	move.l    obMap(a0),obMap(a1)        ; copy Sonic mappings to after-image mappings
00015540 3368 0008 0008                     	move.w    obX(a0),obX(a1)        ; copy Sonic x-pos to after-image x-pos
00015546 3368 000C 000C                     	move.w    obY(a0),obY(a1)    ; copy Sonic y-pos to after-image y-pos
0001554C                            
0001554C                                	@display:
0001554C 4EB9 0000 F82E                     	jsr    (DisplaySprite).l
00015552                            
00015552                            	@chkinvincible:
00015552 4A38 FE2D                  		tst.b	(v_invinc).w	; does Sonic have invincibility?
00015556 6700                       		beq.s	@chkshoes	; if not, branch
00015558 0C38 0001 FE19             		cmpi.b	 #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
0001555E 6700 0000                          beq		 @exit		
00015562 4A68 0032                  		tst.w	invtime(a0)	; check	time remaining for invinciblity
00015566 6700                       		beq.s	@chkshoes	; if no	time remains, branch
00015568 5368 0032                  		subq.w	#1,invtime(a0)	; subtract 1 from time
0001556C 6600                       		bne.s	@chkshoes
0001556E 4A38 F7AA                  		tst.b	(f_lockscreen).w
00015572 6600                       		bne.s	@removeinvincible
00015574 0C78 000C FE14             		cmpi.w	#$C,(v_air).w
0001557A 6500                       		bcs.s	@removeinvincible	
0001557C 0C38 0001 F7AA             		cmpi.b	#$1,(f_lockscreen).w	
00015582 6700                       		beq.s	@removeinvincible	
00015584 0C38 0001 FE2E             		cmpi.b	#$1,(v_shoes).w	; does Sonic have speed shoes?
0001558A 6600                       		bne.s	@haveshoes	; if no, branch, and load regular stage music
0001558C 103C 008B                  		move.b	#$8B,d0		; if yes, load regular speed shoes music
00015590 6000                       		bra.s	@playtune
00015592                            		
00015592                            @haveshoes:		
00015592 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
00015596                            
00015596                            @playtune: 
00015596 4EB9 0000 12F8             		jsr	(PlaySound).l    ; play normal music
0001559C                            
0001559C                            	@removeinvincible:
0001559C 11FC 0000 FE2D             		move.b	#0,(v_invinc).w ; cancel invincibility
000155A2                            
000155A2                            	@chkshoes:
000155A2 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
000155A6 6700                       		beq.s	@exit		; if not, branch
000155A8 0C38 0001 FE19             		cmpi.b	 #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
000155AE 6700 0000                          beq		 @exit			
000155B2 4A68 0034                  		tst.w	shoetime(a0)	; check	time remaining
000155B6 6700                       		beq.s	@exit
000155B8 5368 0034                  		subq.w	#1,shoetime(a0)	; subtract 1 from time
000155BC 6600                       		bne.s	@exit
000155BE 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
000155C4 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
000155CA 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
000155D0 11FC 0000 FE2E             		move.b	#0,(v_shoes).w	; cancel speed shoes
000155D6 0C38 0001 F7AA             		cmpi.b	#$1,(f_lockscreen).w	
000155DC 6700                       		beq.s	@exit
000155DE 0C38 0001 FE2D             		cmpi.b	#$1,($FFFFFE2D).w	; does Sonic have invincibility?
000155E4 6600                       		bne.s	@isinvincible	; if no, branch, and load regular stage music
000155E6 103C 0087                  		move.b	#$87,d0		; if yes, load regular invincibility music
000155EA 6000                       		bra.b	@playtune2
000155EC                            @isinvincible:		
000155EC 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
000155F0                            @playtune2:
000155F0 4EB9 0000 12F8             		jsr	(PlaySound).l    ; play normal music
000155F6                            		
000155F6                            	@exit:
000155F6 4E75                       		rts	
000155F6 4E75                       		rts	
000155F8                            		include	"_incObj\Sonic RecordPosition.asm"
000155F8                            ; ---------------------------------------------------------------------------
000155F8                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000155F8                            ; ---------------------------------------------------------------------------
000155F8                            
000155F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155F8                            
000155F8                            
000155F8                            Sonic_RecordPosition:
000155F8 3038 F7A8                  		move.w	(v_trackpos).w,d0
000155FC 43F8 CB00                  		lea	(v_tracksonic).w,a1
00015600 43F1 0000                  		lea	(a1,d0.w),a1
00015604 32E8 0008                  		move.w	obX(a0),(a1)+
00015608 32E8 000C                  		move.w	obY(a0),(a1)+
0001560C 5838 F7A9                  		addq.b	#4,(v_trackbyte).w
00015610 4E75                       		rts	
00015612                            ; End of function Sonic_RecordPosition
00015612                            ; End of function Sonic_RecordPosition
00015612                            		include	"_incObj\Sonic Water.asm"
00015612                            ; ---------------------------------------------------------------------------
00015612                            ; Subroutine for Sonic when he's underwater
00015612                            ; ---------------------------------------------------------------------------
00015612                            
00015612                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015612                            
00015612                            
00015612                            Sonic_Water:
00015612 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	;TIS is level LZ?
00015618 6600                       		bne.s	WaterTagforMZ	; if no, branch
0001561A 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level LZ?
00015620 6700                       		beq.s	Sonic_Water_LZ	; if yes, branch
00015622                            
00015622                            	Sonic_Water_Exit:
00015622 4E75                       		rts
00015624                            ; ===========================================================================
00015624                            LoadGFXLUTWat:	;TIS Water Palette List
00015624 0000 3016 0000 3A76 0000+          dc.l	Pal_LZWater,Pal_SonWater2,Pal_SonWater3,Pal_SonWater4,Pal_SonWater5,Pal_SonWater6,Pal_SonWater7,Pal_SonWater8,Pal_SonWater9,Pal_SonWater10,Pal_SonWater11	
00015650                            
00015650                            ; ===========================================================================
00015650                            
00015650                            	Sonic_Water_LZ:
00015650 3038 F646                  		move.w	(v_waterpos1).w,d0
00015654 B068 000C                  		cmp.w	obY(a0),d0	; is Sonic above the water?
00015658 6C00 0000                  		bge.w	Abovewater	; if yes, branch
0001565C 6000 0000                  		bra	WaterStatus
00015660                            	WaterTagforMZ:
00015660 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS
00015666 6700 0000                  		beq.w	Abovewater	; if yes, branch
0001566A                            		
0001566A 7000                       		moveq	#0,d0
0001566C 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
00015670 D040                               add.w    d0,d0
00015672 D040                               add.w    d0,d0
00015674 227B 00AE                  		movea.l    loadGFXLUTWat(pc,d0.w),a1  ;Load a separate list for water palettes
00015678 303C 0007                  		move.w #$7,d0             ;TIS Length ($F = full line)
0001567C                            		;lea    (Pal_LZSonWatr2),a1  ;Palette location
0001567C 45F8 FB00                      	lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
00015680 4EB8 26D6                  		jsr	Palload_Loop
00015684                            	WaterStatus:
00015684 08E8 0006 0022             		bset	#6,obStatus(a0)
0001568A 6600 FF96                  		bne.w	Sonic_Water_Exit
0001568E 6100 0000                  		bsr.w	ResumeMusic
00015692 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
00015698 11FC 000A D340             		move.b	#id_DrownCount,(v_objspace+$340).w ; load bubbles object from Sonic's mouth
0001569E 11FC 0081 D368             		move.b	#$81,(v_objspace+$340+obSubtype).w
000156A4 31FC 0300 F760             		move.w	#$300,(v_sonspeedmax).w ; change Sonic's top speed
000156AA 31FC 0006 F762             		move.w	#6,(v_sonspeedacc).w ; change Sonic's acceleration
000156B0 31FC 0040 F764             		move.w	#$40,(v_sonspeeddec).w ; change Sonic's deceleration
000156B6 4A38 FE19                  		tst.b	(Super_Sonic_flag).w	; Is Sonic Super?
000156BA 6700                       		beq.s	@Skip			; If not branch
000156BC 31FC 0500 F760             		move.w	#$500,(v_sonspeedmax).w
000156C2 31FC 0018 F762             		move.w	#$18,(v_sonspeedacc).w
000156C8 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w
000156CE                            @Skip		
000156CE E0E8 0010                  		asr	obVelX(a0)
000156D2 E0E8 0012                  		asr	obVelY(a0)
000156D6 E0E8 0012                  		asr	obVelY(a0)	; slow Sonic
000156DA 6700 FF46                  		beq.w	Sonic_Water_Exit		; branch if Sonic stops moving
000156DE                            		;move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
000156DE 31FC 0100 D1DC                     	move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
000156EE 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS 
000156F4 6600 0000                  		bne.w	@return
000156F8                            		
000156F8                            		
000156F8                            	@return:
000156F8 4E75                       		rts
000156FA                            
000156FA                            ; ===========================================================================
000156FA                            
000156FA                            LoadGFXLUT:	;TIS Dry Palette List
000156FA 0000 2DB6 0000 3936 0000+          dc.l   Pal_Sonic,Pal_Sonic2,Pal_Sonic3,Pal_Sonic4,Pal_Sonic5,Pal_Sonic6,Pal_Sonic7,Pal_Sonic8,Pal_Sonic8,Pal_Sonic9,Pal_Sonic10,Pal_Sonic11
0001572A                            
0001572A                            ; ===========================================================================
0001572A                            
0001572A                            Abovewater:
0001572A 7000                       		moveq	#0,d0
0001572C 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
00015730 D040                       		add.w    d0,d0
00015732 D040                               add.w    d0,d0
00015734 227B 00C4                  		movea.l    loadGFXLUT(pc,d0.w),a1  ;Load a separate list for palettes
00015738                            
00015738 303C 0007                  		move.w #$7,d0             ;TIS Length ($F = full line)
0001573C                            		;lea    (Pal_Sonic),a1  ;Palette location
0001573C 45F8 FB00                  		lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
00015740 4EB8 26D6                  		jsr	Palload_Loop
00015744 08A8 0006 0022             		bclr	#6,obStatus(a0)
0001574A 6700 FED6                  		beq.w	Sonic_Water_Exit
0001574E 6100 0000                  		bsr.w	ResumeMusic
00015752 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
00015758                            
00015758 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
0001575E 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
00015764 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
0001576A 4A38 FE19                  		tst.b	(Super_Sonic_flag).w	; Is Sonic Super?
0001576E 6700                       		beq.s	@Skip			; If not branch
00015770 31FC 0A00 F760             		move.w	#$A00,(v_sonspeedmax).w
00015776 31FC 0030 F762             		move.w	#$30,(v_sonspeedacc).w
0001577C 31FC 0100 F764             		move.w	#$100,(v_sonspeeddec).w
00015782                            @Skip		
00015782 E1E8 0012                  		asl	obVelY(a0)
00015786 6700 FE9A                  		beq.w	Sonic_Water_Exit
0001578A 31FC 0100 D1DC                     move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
00015790 0C68 F000 0012             		cmpi.w	#-$1000,obVelY(a0)
00015796 6E00                       		bgt.s	@belowmaxspeed
00015798 317C F000 0012             		move.w	#-$1000,obVelY(a0) ; set maximum speed on leaving water
0001579E                            
0001579E                            	@belowmaxspeed:
000157A8                            ; End of function Sonic_Water
000157A8                            
000157A8                            
000157A8                            		include "_incObj\03 Hangable Sprite.asm"
000157A8                            ; ===========================================================================
000157A8                            ; ----------------------------------------------------------------------------
000157A8                            ; Object 03 - Invisible sprite that you can hang on to
000157A8                            ; ----------------------------------------------------------------------------
000157A8                            ; Sprite_2C92C:
000157A8                            Obj03:
000157A8 7000                       	moveq    #0,d0
000157AA 1028 0024                      move.b    obRoutine(a0),d0            ;just use s1 version of this variable
000157AE 323B 0000                      move.w    Obj03_Index(pc,d0.w),d1
000157B2 4EFB 1000                      jmp    Obj03_Index(pc,d1.w)
000157B6                            ; ===========================================================================
000157B6                            ; off_2C93A:
000157B6                            Obj03_Index:
000157B6 0000                           dc.w Obj03_Main-Obj03_Index
000157B8 0000                               dc.w Obj03_Init-Obj03_Index
000157BA                            ; ===========================================================================
000157BA                            ; loc_2C93E:
000157BA                            Obj03_Init:
000157BA 5428 0024                      addq.b    #2,obRoutine(a0)        ;just use s1 version of this variable
000157BE 117C 0004 0001                 move.b    #4,obRender(a0)    ;just use s1 version of this variable
000157C4 117C 0018 0014                 move.b    #$18,obActWid(a0)    ;just use s1 version of this variable
000157CA 317C 0200 0018                 move.w    #$200,obPriority(a0)            ;just use s1 version of this variable
000157D0                            ; loc_2C954:
000157D0                            Obj03_Main:
000157D0 45E8 0030                      lea    $30(a0),a2
000157D4 43F8 D000                      lea    (v_player).w,a1 ; a1=character
000157D8 3038 F604                      move.w    (v_jpadhold1).w,d0 			;S1 has same ram address for controller as S2 just different variable name like on the line above
000157DC 6100                           bsr.s    Obj03_Check
000157DE                            ;    lea    (Sidekick).w,a1 ; a1=character  ;disabled
000157DE                            ;    addq.w    #1,a2                          ;disabled
000157DE                            ;    move.w    (Ctrl_2).w,d0                    ;disabled
000157DE                            ;    bsr.s    Obj03_Check         	;disabled
000157DE 4EF9 0000 0000             	jmp		bonu_chkdel
000157E4                            ; ===========================================================================
000157E4                            ; loc_2C972:
000157E4                            Obj03_Check:
000157E4 4A12                       		tst.b	(a2)
000157E6 6700                       		beq.s	loc_2C9A0
000157E8 0200 0070                  		andi.b	#btnABC,d0
000157EC 6700 0000                  		beq.w	Obj03_Check_End
000157F0 4238 F7C8                  		clr.b	f_lockmulti.w
000157F4 4212                       		clr.b	(a2)
000157F6 157C 0012 0002             		move.b	#$12,2(a2)
000157FC 0240 0F00                  		andi.w	#$F00,d0
00015800 6700                       		beq.s	loc_2C954
00015802 157C 003C 0002             		move.b	#$3C,2(a2)
00015808                            	
00015808                            loc_2C954:
00015808 337C FD00 0012             		move.w	#-$300,y_vel(a1)
0001580E 6000 0000                  		bra.w	Obj03_Check_End
00015812                            ; ===========================================================================
00015812                            
00015812                            loc_2C9A0:
00015812 4A2A 0002                  		tst.b	2(a2)
00015816 6700                       		beq.s	loc_2C972
00015818 532A 0002                  		subq.b	#1,2(a2)
0001581C 6600 0000                  		bne.w	Obj03_Check_End
00015820                            
00015820                            loc_2C972:
00015820 3029 0008                  		move.w	obX(a1),d0
00015824 9068 0008                  		sub.w	obX(a0),d0
00015828 0640 0018                  		addi.w	#$18,d0
0001582C 0C40 0030                  		cmpi.w	#$30,d0
00015830 6400 0000                  		bhs.w	Obj03_Check_End
00015834 3229 000C                  		move.w	obY(a1),d1
00015838 9268 000C                  		sub.w	obY(a0),d1
0001583C 0C41 0010                  		cmpi.w	#$10,d1
00015840 6400 0000                  		bhs.w	Obj03_Check_End
00015844 4A38 F7C8                  		tst.b	f_lockmulti.w
00015848 6B00                       		bmi.s	Obj03_Check_End
0001584A 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
00015850 6400                       		bhs.s	Obj03_Check_End
00015852 4A78 FFFA                  		tst.w	(f_debugmode).w
00015856 6600                       		bne.s	Obj03_Check_End
00015858 4269 0010                  		clr.w	x_vel(a1)
0001585C 4269 0012                  		clr.w	y_vel(a1)
00015860 4269 0020                  		clr.w	obInertia(a1)
00015864 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001586A 137C 0000 001C             		move.b	#id_Hang2,obAnim(a1)
00015870 11FC 0001 F7C8             		move.b	#1,f_lockmulti.w
00015876 14BC 0001                  		move.b	#1,(a2)
0001587A                            
0001587A                            ; return_2CA08:
0001587A                            Obj03_Check_End:
0001587A 4E75                       		rts
0001587A 4E75                       		rts
0001587C                            
0001587C                            ; ===========================================================================
0001587C                            ; ---------------------------------------------------------------------------
0001587C                            ; Modes	for controlling	Sonic
0001587C                            ; ---------------------------------------------------------------------------
0001587C                            
0001587C                            Sonic_MdNormal:
0001587C                            		;bsr.w	Sonic_Peelout
0001587C                            		;bsr.w	Sonic_SpinDash
0001587C 6100 0000                  		bsr.w	Sonic_Jump
00015880 6100 0000                  		bsr.w	Sonic_SlopeResist
00015884 6100 0000                  		bsr.w	Sonic_Move
00015888 6100 0000                  		bsr.w	Sonic_Roll
0001588C 6100 0000                  		bsr.w	Sonic_LevelBound
00015890 4EB9 0000 F81A             		jsr	(SpeedToPos).l
00015896 6100 0000                  		bsr.w	Sonic_AnglePos
0001589A 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001589E 4E75                       		rts	
000158A0                            
000158A0                            ; ===========================================================================
000158A0                            
000158A0                            Sonic_MdJump:
000158A0 6100 0000                  		bsr.w   Sonic_AirRoll
000158A4 6100 0000                  		bsr.w	Sonic_JumpHeight
000158A8 6100 0000                  		bsr.w	Sonic_JumpDirection
000158AC 6100 0000                  		bsr.w	Sonic_LevelBound
000158B0 4EB9 0000 F7E2             		jsr	(ObjectFall).l
000158B6 0828 0006 0022             		btst	#6,obStatus(a0)
000158BC 6700                       		beq.s	loc_12E5C
000158BE 0468 0028 0012             		subi.w	#$28,obVelY(a0)
000158C4                            
000158C4                            loc_12E5C:
000158C4 6100 0000                  		bsr.w	Sonic_JumpAngle
000158C8 6100 0000                  		bsr.w	Sonic_Floor
000158CC 4E75                       		rts	
000158CE                            ; ===========================================================================
000158CE                            
000158CE                            Sonic_MdRoll:
000158CE 6100 0000                  		bsr.w	Sonic_Jump
000158D2 6100 0000                  		bsr.w	Sonic_RollRepel
000158D6 6100 0000                  		bsr.w	Sonic_RollSpeed
000158DA 6100 0000                  		bsr.w	Sonic_LevelBound
000158DE 4EB9 0000 F81A             		jsr	(SpeedToPos).l
000158E4 6100 0000                  		bsr.w	Sonic_AnglePos
000158E8 6100 0000                  		bsr.w	Sonic_SlopeRepel
000158EC 4E75                       		rts	
000158EE                            ; ===========================================================================
000158EE                            
000158EE                            Sonic_MdJump2:
000158EE 6100 0000                  		bsr.w	Sonic_HomingAttack
000158F2 6100 0000                  		bsr.w	Sonic_JumpHeight
000158F6 6100 0000                  		bsr.w	Sonic_JumpDirection
000158FA 6100 0000                  		bsr.w	Sonic_LevelBound
000158FE 4EB9 0000 F7E2             		jsr	(ObjectFall).l
00015904 0828 0006 0022             		btst	#6,obStatus(a0)
0001590A 6700                       		beq.s	loc_12EA6
0001590C 0468 0028 0012             		subi.w	#$28,obVelY(a0)
00015912                            
00015912                            loc_12EA6:
00015912 6100 0000                  		bsr.w	Sonic_JumpAngle
00015916 6100 0000                  		bsr.w	Sonic_Floor
0001591A 4E75                       		rts	
0001591C                            
0001591C                            		include	"_incObj\Sonic Move.asm"
0001591C                            ; ---------------------------------------------------------------------------
0001591C                            ; Subroutine to	make Sonic walk/run
0001591C                            ; ---------------------------------------------------------------------------
0001591C                            
0001591C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001591C                            
0001591C                            
0001591C                            Sonic_Move:
0001591C 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
00015920 3A38 F762                  		move.w	(v_sonspeedacc).w,d5
00015924 3838 F764                  		move.w	(v_sonspeeddec).w,d4
00015928 4A38 F7CA                  		tst.b	(f_jumponly).w
0001592C 6600 0000                  		bne.w	loc_12FEE
00015930 4A68 003E                  		tst.w	$3E(a0)
00015934 6600 0000                  		bne.w	Sonic_ResetScr
00015938 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
0001593E 6700                       		beq.s	@notleft	; if not, branch
00015940 6100 0000                  		bsr.w	Sonic_MoveLeft
00015944                            
00015944                            	@notleft:
00015944 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
0001594A 6700                       		beq.s	@notright	; if not, branch
0001594C 6100 0000                  		bsr.w	Sonic_MoveRight
00015950                            
00015950                            	@notright:
00015950 1028 0026                  		move.b	obAngle(a0),d0
00015954 0600 0020                  		addi.b	#$20,d0
00015958 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
0001595C 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
00015960 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
00015964 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
00015968 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001596E 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
00015974 0828 0003 0022             		btst	#3,obStatus(a0)
0001597A 6700                       		beq.s	Sonic_Balance
0001597C 7000                       		moveq	#0,d0
0001597E 1028 003D                  		move.b	$3D(a0),d0
00015982 ED48                       		lsl.w	#6,d0
00015984 43F8 D000                  		lea	(v_objspace).w,a1
00015988 43F1 0000                  		lea	(a1,d0.w),a1
0001598C 4A29 0022                  		tst.b	obStatus(a1)
00015990 6B00                       		bmi.s	Sonic_LookUp
00015992 7200                       		moveq	#0,d1
00015994 1229 0014                  		move.b	obActWid(a1),d1
00015998 3401                       		move.w	d1,d2
0001599A D442                       		add.w	d2,d2
0001599C 5942                       		subq.w	#4,d2
0001599E D268 0008                  		add.w	obX(a0),d1
000159A2 9269 0008                  		sub.w	obX(a1),d1
000159A6 0C41 0004                  		cmpi.w	#4,d1
000159AA 6D00                       		blt.s	loc_12F6A
000159AC B242                       		cmp.w	d2,d1
000159AE 6C00                       		bge.s	loc_12F5A
000159B0 6000                       		bra.s	Sonic_LookUp
000159B2                            ; ===========================================================================
000159B2                            
000159B2                            Sonic_Balance:
000159B2 4EB9 0000 0000             		jsr	(ObjFloorDist).l
000159B8 0C41 000C                  		cmpi.w	#$C,d1
000159BC 6D00                       		blt.s	Sonic_LookUp
000159BE 0C28 0003 0036             		cmpi.b	#3,$36(a0)
000159C4 6600                       		bne.s	loc_12F62
000159C6                            
000159C6                            loc_12F5A:
000159C6 08A8 0000 0022             		bclr	#0,obStatus(a0)
000159CC 6000                       		bra.s	loc_12F70
000159CE                            ; ===========================================================================
000159CE                            
000159CE                            loc_12F62:
000159CE 0C28 0003 0037             		cmpi.b	#3,$37(a0)
000159D4 6600                       		bne.s	Sonic_LookUp
000159D6                            
000159D6                            loc_12F6A:
000159D6 08E8 0000 0022             		bset	#0,obStatus(a0)
000159DC                            
000159DC                            loc_12F70:
000159DC 117C 0000 001C             		move.b	#id_Balance,obAnim(a0) ; use "balancing" animation
000159E2 6000 0000                  		bra.w	Sonic_ResetScr
000159E6                            ; ===========================================================================
000159E6                            
000159E6                            Sonic_LookUp:
000159E6 0838 0000 F602             		btst	#bitUp,(v_jpadhold2).w ; is up being pressed?
000159EC 6700                       		beq.s	Sonic_Duck	; if not, branch
000159EE 117C 0000 001C             		move.b	#id_LookUp,obAnim(a0) ; use "looking up" animation
000159F4 0C78 00C8 F73E             		cmpi.w	#$C8,(v_lookshift).w
000159FA 6700                       		beq.s	loc_12FC2
000159FC 5478 F73E                  		addq.w	#2,(v_lookshift).w
00015A00 6000                       		bra.s	loc_12FC2
00015A02                            ; ===========================================================================
00015A02                            
00015A02                            Sonic_Duck:
00015A02 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
00015A08 6700                       		beq.s	Sonic_ResetScr	; if not, branch
00015A0A 117C 0000 001C             		move.b	#id_Duck,obAnim(a0) ; use "ducking" animation
00015A10 0C78 0008 F73E             		cmpi.w	#8,(v_lookshift).w
00015A16 6700                       		beq.s	loc_12FC2
00015A18 5578 F73E                  		subq.w	#2,(v_lookshift).w
00015A1C 6000                       		bra.s	loc_12FC2
00015A1E                            ; =============================================
00015A1E                            ; ===========================================================================
00015A1E                            
00015A1E                            Sonic_ResetScr:
00015A1E 11FC 0000 C903             		move.b	#0,($FFFFC903).w
00015A24                            		
00015A24                            Sonic_ResetScr_Part2:
00015A24 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00015A2A 6700                       		beq.s	loc_12FC2	; if yes, branch
00015A2C 6400                       		bcc.s	loc_12FBE
00015A2E 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00015A32                            
00015A32                            loc_12FBE:
00015A32 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00015A36                            
00015A36                            loc_12FC2:
00015A36 1038 F602                  		move.b	(v_jpadhold2).w,d0
00015A3A 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	pressed?
00015A3E 6600                       		bne.s	loc_12FEE	; if yes, branch
00015A40 3028 0020                  		move.w	obInertia(a0),d0
00015A44 6700                       		beq.s	loc_12FEE
00015A46 6B00                       		bmi.s	loc_12FE2
00015A48 9045                       		sub.w	d5,d0
00015A4A 6400                       		bcc.s	loc_12FDC
00015A4C 303C 0000                  		move.w	#0,d0
00015A50                            
00015A50                            loc_12FDC:
00015A50 3140 0020                  		move.w	d0,obInertia(a0)
00015A54 6000                       		bra.s	loc_12FEE
00015A56                            ; ===========================================================================
00015A56                            
00015A56                            loc_12FE2:
00015A56 D045                       		add.w	d5,d0
00015A58 6400                       		bcc.s	loc_12FEA
00015A5A 303C 0000                  		move.w	#0,d0
00015A5E                            
00015A5E                            loc_12FEA:
00015A5E 3140 0020                  		move.w	d0,obInertia(a0)
00015A62                            
00015A62                            loc_12FEE:
00015A62 4A28 0039                  		tst.b	$39(a0) 	;Peelout
00015A66 6600                       		bne.s	loc_1300C 	;Peelout
00015A68 1028 0026                  		move.b	obAngle(a0),d0
00015A6C 4EB9 0000 3D28             		jsr	(CalcSine).l
00015A72 C3E8 0020                  		muls.w	obInertia(a0),d1
00015A76 E081                       		asr.l	#8,d1
00015A78 3141 0010                  		move.w	d1,obVelX(a0)
00015A7C C1E8 0020                  		muls.w	obInertia(a0),d0
00015A80 E080                       		asr.l	#8,d0
00015A82 3140 0012                  		move.w	d0,obVelY(a0)
00015A86                            
00015A86                            loc_1300C:
00015A86 1028 0026                  		move.b	obAngle(a0),d0
00015A8A 0600 0040                  		addi.b	#$40,d0
00015A8E 6B00                       		bmi.s	locret_1307C
00015A90 123C 0040                  		move.b	#$40,d1
00015A94 4A68 0020                  		tst.w	obInertia(a0)
00015A98 6700                       		beq.s	locret_1307C
00015A9A 6B00                       		bmi.s	loc_13024
00015A9C 4441                       		neg.w	d1
00015A9E                            
00015A9E                            loc_13024:
00015A9E 1028 0026                  		move.b	obAngle(a0),d0
00015AA2 D001                       		add.b	d1,d0
00015AA4 3F00                       		move.w	d0,-(sp)
00015AA6 6100 0000                  		bsr.w	Sonic_WalkSpeed
00015AAA 301F                       		move.w	(sp)+,d0
00015AAC 4A41                       		tst.w	d1
00015AAE 6A00                       		bpl.s	locret_1307C
00015AB0 E141                       		asl.w	#8,d1
00015AB2 0600 0020                  		addi.b	#$20,d0
00015AB6 0200 00C0                  		andi.b	#$C0,d0
00015ABA 6700                       		beq.s	loc_13078
00015ABC 0C00 0040                  		cmpi.b	#$40,d0
00015AC0 6700                       		beq.s	loc_13066
00015AC2 0C00 0080                  		cmpi.b	#$80,d0
00015AC6 6700                       		beq.s	loc_13060
00015AC8 D368 0010                  		add.w	d1,obVelX(a0)
00015ACC 08E8 0005 0022             		bset	#5,obStatus(a0)
00015AD2 317C 0000 0020             		move.w	#0,obInertia(a0)
00015AD8 4E75                       		rts	
00015ADA                            ; ===========================================================================
00015ADA                            
00015ADA                            loc_13060:
00015ADA 9368 0012                  		sub.w	d1,obVelY(a0)
00015ADE 4E75                       		rts	
00015AE0                            ; ===========================================================================
00015AE0                            
00015AE0                            loc_13066:
00015AE0 9368 0010                  		sub.w	d1,obVelX(a0)
00015AE4 08E8 0005 0022             		bset	#5,obStatus(a0)
00015AEA 317C 0000 0020             		move.w	#0,obInertia(a0)
00015AF0 4E75                       		rts	
00015AF2                            ; ===========================================================================
00015AF2                            
00015AF2                            loc_13078:
00015AF2 D368 0012                  		add.w	d1,obVelY(a0)
00015AF6                            
00015AF6                            locret_1307C:
00015AF6 4E75                       		rts	
00015AF8                            ; End of function Sonic_Move
00015AF8                            
00015AF8                            
00015AF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015AF8                            
00015AF8                            
00015AF8                            Sonic_MoveLeft:
00015AF8 3028 0020                  		move.w	obInertia(a0),d0
00015AFC 6700                       		beq.s	loc_13086
00015AFE 6A00                       		bpl.s	loc_130B2
00015B00                            
00015B00                            loc_13086:
00015B00 08E8 0000 0022             		bset	#0,$22(a0)
00015B06 6600                       		bne.s	loc_1309A
00015B08 08A8 0005 0022             		bclr	#5,$22(a0)
00015B0E 117C 0001 001D             		move.b	#1,$1D(a0)
00015B14                            
00015B14                            loc_1309A:
00015B14 9045                       		sub.w	d5,d0
00015B16 3206                       		move.w	d6,d1
00015B18 4441                       		neg.w	d1
00015B1A B041                       		cmp.w	d1,d0
00015B1C 6E00                       		bgt.s	loc_130A6
00015B1E D045                       		add.w	d5,d0
00015B20 B041                       		cmp.w	d1,d0
00015B22 6F00                       		ble.s	loc_130A6
00015B24 3001                       		move.w	d1,d0
00015B26                            
00015B26                            loc_130A6:
00015B26 3140 0020                  		move.w	d0,obInertia(a0)
00015B2A 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00015B30 4E75                       		rts
00015B32                            ; ===========================================================================
00015B32                            
00015B32                            loc_130B2:
00015B32 9044                       		sub.w	d4,d0
00015B34 6400                       		bcc.s	loc_130BA
00015B36 303C FF80                  		move.w	#-$80,d0
00015B3A                            
00015B3A                            loc_130BA:
00015B3A 3140 0020                  		move.w	d0,obInertia(a0)
00015B3E 1228 0026                  		move.b	obAngle(a0),d1
00015B42 0601 0020                  		addi.b	#$20,d1
00015B46 0201 00C0                  		andi.b	#$C0,d1
00015B4A 6600                       		bne.s	locret_130E8
00015B4C 0C40 0400                  		cmpi.w	#$400,d0
00015B50 6D00                       		blt.s	locret_130E8
00015B52 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00015B58 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015B68 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
00015B6E 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
00015B74                            		
00015B74                            locret_130E8:
00015B74 4E75                       		rts	
00015B76                            ; End of function Sonic_MoveLeft
00015B76                            
00015B76                            
00015B76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B76                            
00015B76                            
00015B76                            Sonic_MoveRight:
00015B76 3028 0020                  		move.w	obInertia(a0),d0
00015B7A 6B00                       		bmi.s	loc_13118
00015B7C 08A8 0000 0022             		bclr	#0,$22(a0)
00015B82 6700                       		beq.s	loc_13104
00015B84 08A8 0005 0022             		bclr	#5,$22(a0)
00015B8A 117C 0001 001D             		move.b	#1,$1D(a0)
00015B90                            
00015B90                            loc_13104:
00015B90 D045                       		add.w	d5,d0
00015B92 B046                       		cmp.w	d6,d0
00015B94 6D00                       		blt.s	loc_1310C
00015B96 9045                       		sub.w	d5,d0
00015B98 B046                       		cmp.w	d6,d0
00015B9A 6C00                       		bge.s	loc_1310C
00015B9C 3006                       		move.w	d6,d0
00015B9E                            
00015B9E                            loc_1310C:
00015B9E 3140 0020                  		move.w	d0,obInertia(a0)
00015BA2 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00015BA8 4E75                       		rts
00015BAA                            ; ===========================================================================
00015BAA                            
00015BAA                            loc_13118:
00015BAA D044                       		add.w	d4,d0
00015BAC 6400                       		bcc.s	loc_13120
00015BAE 303C 0080                  		move.w	#$80,d0
00015BB2                            
00015BB2                            loc_13120:
00015BB2 3140 0020                  		move.w	d0,obInertia(a0)
00015BB6 1228 0026                  		move.b	obAngle(a0),d1
00015BBA 0601 0020                  		addi.b	#$20,d1
00015BBE 0201 00C0                  		andi.b	#$C0,d1
00015BC2 6600                       		bne.s	locret_1314E
00015BC4 0C40 FC00                  		cmpi.w	#-$400,d0
00015BC8 6E00                       		bgt.s	locret_1314E
00015BCA 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00015BD0 08E8 0000 0022             		bset	#0,obStatus(a0)
00015BE0 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
00015BE6 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
00015BEC                            		
00015BEC                            locret_1314E:
00015BEC 4E75                       		rts	
00015BEE                            ; End of function Sonic_MoveRight
00015BEE                            ; End of function Sonic_MoveRight
00015BEE                            		include	"_incObj\Sonic RollSpeed.asm"
00015BEE                            ; ---------------------------------------------------------------------------
00015BEE                            ; Subroutine to	change Sonic's speed as he rolls
00015BEE                            ; ---------------------------------------------------------------------------
00015BEE                            
00015BEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015BEE                            
00015BEE                            
00015BEE                            Sonic_RollSpeed:
00015BEE 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
00015BF2 E346                       		asl.w	#1,d6
00015BF4 7A06                       		moveq	#6,d5	; natural roll deceleration = 1/2 normal acceleration
00015BF6 3838 F764                  		move.w	(v_sonspeeddec).w,d4
00015BFA E444                       		asr.w	#2,d4
00015BFC 4A38 F7CA                  		tst.b	(f_jumponly).w
00015C00 6600 0000                  		bne.w	loc_131CC
00015C04 4A68 003E                  		tst.w	$3E(a0)
00015C08 6600                       		bne.s	@notright
00015C0A 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
00015C10 6700                       		beq.s	@notleft	; if not, branch
00015C12 6100 0000                  		bsr.w	Sonic_RollLeft
00015C16                            
00015C16                            	@notleft:
00015C16 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
00015C1C 6700                       		beq.s	@notright	; if not, branch
00015C1E 6100 0000                  		bsr.w	Sonic_RollRight
00015C22                            
00015C22                            	@notright:
00015C22 3028 0020                  		move.w	obInertia(a0),d0
00015C26 6700                       		beq.s	loc_131AA
00015C28 6B00                       		bmi.s	loc_1319E
00015C2A 9045                       		sub.w	d5,d0
00015C2C 6400                       		bcc.s	loc_13198
00015C2E 303C 0000                  		move.w	#0,d0
00015C32                            
00015C32                            loc_13198:
00015C32 3140 0020                  		move.w	d0,obInertia(a0)
00015C36 6000                       		bra.s	loc_131AA
00015C38                            ; ===========================================================================
00015C38                            
00015C38                            loc_1319E:
00015C38 D045                       		add.w	d5,d0
00015C3A 6400                       		bcc.s	loc_131A6
00015C3C 303C 0000                  		move.w	#0,d0
00015C40                            
00015C40                            loc_131A6:
00015C40 3140 0020                  		move.w	d0,obInertia(a0)
00015C44                            
00015C44                            loc_131AA:
00015C44 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
00015C48 6600                       		bne.s	loc_131CC	; if yes, branch
00015C4A 08A8 0002 0022             		bclr	#2,obStatus(a0)
00015C50 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015C56 117C 0009 0017             		move.b	#9,obWidth(a0)
00015C5C 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
00015C62 5B68 000C                  		subq.w	#5,obY(a0)
00015C66                            
00015C66                            loc_131CC:
00015C66 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
00015C6C 6700                       		beq.s	@cont2
00015C6E 6400                       		bcc.s	@cont1
00015C70 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015C74                            		
00015C74                            @cont1:
00015C74 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015C78                            		
00015C78                            @cont2:
00015C78 1028 0026                  		move.b	obAngle(a0),d0
00015C7C 4EB9 0000 3D28             		jsr	(CalcSine).l
00015C82 C1E8 0020                  		muls.w	obInertia(a0),d0
00015C86 E080                       		asr.l	#8,d0
00015C88 3140 0012                  		move.w	d0,obVelY(a0)
00015C8C C3E8 0020                  		muls.w	obInertia(a0),d1
00015C90 E081                       		asr.l	#8,d1
00015C92 0C41 1000                  		cmpi.w	#$1000,d1
00015C96 6F00                       		ble.s	loc_131F0
00015C98 323C 1000                  		move.w	#$1000,d1
00015C9C                            
00015C9C                            loc_131F0:
00015C9C 0C41 F000                  		cmpi.w	#-$1000,d1
00015CA0 6C00                       		bge.s	loc_131FA
00015CA2 323C F000                  		move.w	#-$1000,d1
00015CA6                            
00015CA6                            loc_131FA:
00015CA6 3141 0010                  		move.w	d1,obVelX(a0)
00015CAA 6000 FDDA                  		bra.w	loc_1300C
00015CAE                            ; End of function Sonic_RollSpeed
00015CAE                            
00015CAE                            
00015CAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015CAE                            
00015CAE                            
00015CAE                            Sonic_RollLeft:
00015CAE 3028 0020                  		move.w	obInertia(a0),d0
00015CB2 6700                       		beq.s	loc_1320A
00015CB4 6A00                       		bpl.s	loc_13218
00015CB6                            
00015CB6                            loc_1320A:
00015CB6 08E8 0000 0022             		bset	#0,obStatus(a0)
00015CBC 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015CC2 4E75                       		rts	
00015CC4                            ; ===========================================================================
00015CC4                            
00015CC4                            loc_13218:
00015CC4 9044                       		sub.w	d4,d0
00015CC6 6400                       		bcc.s	loc_13220
00015CC8 303C FF80                  		move.w	#-$80,d0
00015CCC                            
00015CCC                            loc_13220:
00015CCC 3140 0020                  		move.w	d0,obInertia(a0)
00015CD0 4E75                       		rts	
00015CD2                            ; End of function Sonic_RollLeft
00015CD2                            
00015CD2                            
00015CD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015CD2                            
00015CD2                            
00015CD2                            Sonic_RollRight:
00015CD2 3028 0020                  		move.w	obInertia(a0),d0
00015CD6 6B00                       		bmi.s	loc_1323A
00015CD8 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015CDE 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015CE4 4E75                       		rts	
00015CE6                            ; ===========================================================================
00015CE6                            
00015CE6                            loc_1323A:
00015CE6 D044                       		add.w	d4,d0
00015CE8 6400                       		bcc.s	loc_13242
00015CEA 303C 0080                  		move.w	#$80,d0
00015CEE                            
00015CEE                            loc_13242:
00015CEE 3140 0020                  		move.w	d0,obInertia(a0)
00015CF2 4E75                       		rts	
00015CF4                            ; End of function Sonic_RollRight
00015CF4                            ; End of function Sonic_RollRight
00015CF4                            		include	"_incObj\Sonic JumpDirection.asm"
00015CF4                            ; ---------------------------------------------------------------------------
00015CF4                            ; Subroutine to	change Sonic's direction while jumping
00015CF4                            ; ---------------------------------------------------------------------------
00015CF4                            
00015CF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015CF4                            
00015CF4                            
00015CF4                            Sonic_JumpDirection:
00015CF4 3C38 F760                  		move.w	($FFFFF760).w,d6
00015CF8 3A38 F762                  		move.w	($FFFFF762).w,d5
00015CFC E345                       		asl.w	#1,d5
00015CFE 3028 0010                  		move.w	$10(a0),d0	
00015D02 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
00015D08 6700                       		beq.s	loc_13278; if not, branch	
00015D0A 08E8 0000 0022             		bset	#0,$22(a0)	
00015D10 9045                       		sub.w	d5,d0	
00015D12 3206                       		move.w	d6,d1	
00015D14 4441                       		neg.w	d1	
00015D16 B041                       		cmp.w	d1,d0	
00015D18 6E00                       		bgt.s	loc_13278	
00015D1A D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
00015D1C B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
00015D1E 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
00015D20 3001                       		move.w	d1,d0
00015D22                            
00015D22                            loc_13278:
00015D22 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
00015D28 6700                       		beq.s	Obj01_JumpMove; if not, branch	
00015D2A 08A8 0000 0022             		bclr	#0,$22(a0)	
00015D30 D045                       		add.w	d5,d0	
00015D32 B046                       		cmp.w	d6,d0	
00015D34 6D00                       		blt.s	Obj01_JumpMove
00015D36 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
00015D38 B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
00015D3A 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
00015D3C 3006                       		move.w	d6,d0
00015D3E                            
00015D3E                            Obj01_JumpMove:
00015D3E 3140 0010                  		move.w	d0,obVelX(a0)	; change Sonic's horizontal speed
00015D42                            
00015D42                            Obj01_ResetScr2:
00015D42 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w ; is the screen in its default position?
00015D48 6700                       		beq.s	loc_132A4	; if yes, branch
00015D4A 6400                       		bcc.s	loc_132A0
00015D4C 5878 F73E                  		addq.w	#4,(v_lookshift).w
00015D50                            
00015D50                            loc_132A0:
00015D50 5578 F73E                  		subq.w	#2,(v_lookshift).w
00015D54                            
00015D54                            loc_132A4:
00015D54 0C68 FC00 0012             		cmpi.w	#-$400,obVelY(a0) ; is Sonic moving faster than -$400 upwards?
00015D5A 6500                       		bcs.s	locret_132D2	; if yes, branch
00015D5C 3028 0010                  		move.w	obVelX(a0),d0
00015D60 3200                       		move.w	d0,d1
00015D62 EA41                       		asr.w	#5,d1
00015D64 6700                       		beq.s	locret_132D2
00015D66 6B00                       		bmi.s	loc_132C6
00015D68 9041                       		sub.w	d1,d0
00015D6A 6400                       		bcc.s	loc_132C0
00015D6C 303C 0000                  		move.w	#0,d0
00015D70                            
00015D70                            loc_132C0:
00015D70 3140 0010                  		move.w	d0,obVelX(a0)
00015D74 4E75                       		rts	
00015D76                            ; ===========================================================================
00015D76                            
00015D76                            loc_132C6:
00015D76 9041                       		sub.w	d1,d0
00015D78 6500                       		bcs.s	loc_132CE
00015D7A 303C 0000                  		move.w	#0,d0
00015D7E                            
00015D7E                            loc_132CE:
00015D7E 3140 0010                  		move.w	d0,obVelX(a0)
00015D82                            
00015D82                            locret_132D2:
00015D82 4E75                       		rts	
00015D84                            ; End of function Sonic_JumpDirection
00015D84                            ; End of function Sonic_JumpDirection
00015D84                            		include "_incObj\Sonic Peelout.asm"
00015D84                            ; ---------------------------------------------------------------------------
00015D84                            ; Subroutine to make Sonic perform a peelout
00015D84                            ; ---------------------------------------------------------------------------
00015D84                            ; If you use this makes sure to search for ;Peelout in Sonic1.asm
00015D84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D84                            
00015D84                            Sonic_Peelout:
00015D84 0828 0001 0039             		btst	#1,$39(a0)
00015D8A 6600                       		bne.s	SCDPeelout_Launch
00015D8C 0C28 0007 001C             		cmpi.b	#7,$1C(a0) ;check to see if your looking up
00015D92 6600                       		bne.s	@return
00015D94 1038 F603                  		move.b	($FFFFF603).w,d0
00015D98 0200 0070                  		andi.b	#%01110000,d0
00015D9C 6700 0000                  		beq.w	@return
00015DA0 117C 0001 001C             		move.b	#1,$1C(a0)
00015DA6 317C 0000 003A             		move.w	#0,$3A(a0)
00015DAC 303C 00D2                  		move.w	#$D2,d0
00015DB0 4EB9 0000 12FE             		jsr	(PlaySound_Special).l 		; Play peelout charge sound
00015DB6                            	;	sfx 	sfx_PeeloutCharge 		; These are if you use AMPS
00015DB6 588F                       		addq.l	#4,sp
00015DB8 08E8 0001 0039             		bset	#1,$39(a0)
00015DBE                            		
00015DBE 4268 0020                  		clr.w	obInertia(a0)
00015DC2                             
00015DC2 6100 0000                  		bsr.w	Sonic_LevelBound
00015DC6 6100 0000                  		bsr.w	Sonic_AnglePos
00015DCA                             
00015DCA                            	@return:
00015DCA 4E75                       		rts	
00015DCC                            ; ---------------------------------------------------------------------------
00015DCC                             
00015DCC                            SCDPeelout_Launch:
00015DCC 0828 0001 0039             		btst	#1,$39(a0)
00015DD2 1038 F602                  		move.b	($FFFFF602).w,d0
00015DD6 0800 0000                  		btst	#0,d0
00015DDA 6600 0000                  		bne.w	SCDPeelout_Charge
00015DDE 08A8 0001 0039             		bclr	#1,$39(a0)	; stop Dashing
00015DE4 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)	; have we been charging long enough?
00015DEA 6600 0000                  		bne.w	SCDPeelout_Stop_Sound
00015DEE 117C 0000 001C             		move.b	#0,$1C(a0)	; launches here (peelout sprites)
00015DF4 317C 0001 0010             		move.w	#1,$10(a0)	; force X speed to nonzero for camera lag's benefit
00015DFA 3028 0020                  		move.w	obInertia(a0),d0
00015DFE 0440 0800                  		subi.w	#$800,d0
00015E02 D040                       		add.w	d0,d0
00015E04 0240 1F00                  		andi.w	#$1F00,d0
00015E08 4440                       		neg.w	d0
00015E0A 0640 2000                  		addi.w	#$2000,d0
00015E0E 31C0 C904                  		move.w	d0,($FFFFC904).w
00015E12 0828 0000 0022             		btst	#0,$22(a0)
00015E18 6700                       		beq.s	@dontflip
00015E1A 4468 0020                  		neg.w	obInertia(a0)
00015E1E                             
00015E1E                            @dontflip:
00015E1E 08A8 0007 0022             		bclr	#7,$22(a0)
00015E24 303C 00D3                  		move.w	#$D3,d0
00015E28 4EB9 0000 12FE             		jsr	(PlaySound_Special).l
00015E2E                            	;	sfx 	sfx_PeeloutRelease
00015E2E 1028 0026                  		move.b	obAngle(a0),d0
00015E32 4EB9 0000 3D28             		jsr	(CalcSine).l
00015E38 C3E8 0020                  		muls.w	obInertia(a0),d1
00015E3C E081                       		asr.l	#8,d1
00015E3E 3141 0010                  		move.w	d1,obVelX(a0)
00015E42 C1E8 0020                  		muls.w	obInertia(a0),d0
00015E46 E080                       		asr.l	#8,d0
00015E48 3140 0012                  		move.w	d0,obVelY(a0)	
00015E4C 6000 0000                  		bra.w	SCDPeelout_ResetScr
00015E50                            ; ---------------------------------------------------------------------------
00015E50                             
00015E50                            SCDPeelout_Charge:				; If still charging the dash...
00015E50 3238 F760                  		move.w	($FFFFF760).w,d1	; get top peelout speed
00015E54 3401                       		move.w	d1,d2
00015E56 D241                       		add.w	d1,d1
00015E58 4A38 FE2E                  		tst.b   ($FFFFFE2E).w 		; test for speed shoes
00015E5C 6700                       		beq.s	@noshoes
00015E5E E242                       		asr.w	#1,d2
00015E60 9242                       		sub.w	d2,d1
00015E62                            
00015E62                            @noshoes:
00015E62 0668 0064 0020             		addi.w	#$64,obInertia(a0)		; increment speed
00015E68 B268 0020                  		cmp.w	obInertia(a0),d1
00015E6C 6E00                       		bgt.s	@inctimer
00015E6E 3141 0020                  		move.w	d1,obInertia(a0)
00015E72                            
00015E72                            @inctimer:
00015E72 5228 003A                  		addq.b	#1,$3A(a0)		; increment timer
00015E76 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)
00015E7C 6500                       		bcs.s	SCDPeelout_ResetScr
00015E7E 117C 001E 003A             		move.b	#$1E,$3A(a0)
00015E84 4EF9 0000 0000             		jmp 	SCDPeelout_ResetScr
00015E8A                            		
00015E8A                            SCDPeelout_Stop_Sound:
00015E8A 303C 00D4                  		move.w	#$D4,d0
00015E8E 4EB9 0000 12FE             		jsr		(PlaySound_Special).l
00015E94                            	;	sfx 	sfx_PeeloutStop
00015E94 4268 0020                  		clr.w	obInertia(a0)
00015E98                            
00015E98                            SCDPeelout_ResetScr:
00015E98 588F                       		addq.l	#4,sp			; increase stack ptr ; was 4
00015E9A 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00015EA0 6700                       		beq.s	@finish
00015EA2 6400                       		bcc.s	@skip
00015EA4 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015EA8                             
00015EA8                            	@skip:
00015EA8 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015EAC                             
00015EAC                            	@finish:
00015EAC 6100 0000                  		bsr.w	Sonic_LevelBound
00015EB0 6100 0000                  		bsr.w	Sonic_AnglePos
00015EB4 4E75                       		rts
00015EB6                            		
00015EB6                            		
00015EB6                            		include "_incObj\Sonic Spindash.asm"
00015EB6                            ; ---------------------------------------------------------------------------
00015EB6                            ; Subroutine to make Sonic perform a spindash
00015EB6                            ; ---------------------------------------------------------------------------
00015EB6                             
00015EB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015EB6                             
00015EB6                             
00015EB6                            Sonic_SpinDash:
00015EB6 4A28 0039                  		tst.b	f_spindash(a0)			; already Spin Dashing?
00015EBA 6600                       		bne.s	loc2_1AC8E		; if set, branch
00015EBC 0C28 0000 001C             		cmpi.b	#id_duck,obAnim(a0)		; is anim duck
00015EC2 6600                       		bne.s	locret2_1AC8C		; if not, return
00015EC4 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015EC8 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C ?
00015ECC 6700 0000                  		beq.w	locret2_1AC8C		; if not, return
00015ED0 117C 0000 001C             		move.b	#id_spindash,obAnim(a0)		; set Spin Dash anim (9 in s2)
00015ED6 303C 00D5                  		move.w	#$D5,d0			; spin sound ($E0 in s2)
00015EDA 4EB9 0000 12FE             		jsr	(PlaySound_Special).l	; play spin sound
00015EE0 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015EE2 117C 0001 0039             		move.b	#1,f_spindash(a0)		; set Spin Dash flag
00015EE8 317C 0000 003A             		move.w	#0,$3A(a0)		; set charge count to 0
00015EEE                            		;cmpi.b	#$C,$28(a0)		; ??? oxygen remaining?
00015EEE                            		;bcs.s	loc2_1AC84		; ??? branch if carry
00015EEE 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; Set the Spin Dash dust animation to $2.
00015EF4                            						; the smoke/dust object
00015EF4                            loc2_1AC84:
00015EF4 6100 0000                  		bsr.w	Sonic_LevelBound
00015EF8 6100 0000                  		bsr.w	Sonic_AnglePos
00015EFC                            
00015EFC                            locret2_1AC8C:
00015EFC 4E75                       		rts	
00015EFE                            ; ---------------------------------------------------------------------------
00015EFE                            
00015EFE                            loc2_1AC8E:	
00015EFE 117C 001F 001C             		move.b	#$1F,$1C(a0)
00015F04 1038 F602                  		move.b	(v_jpadhold2).w,d0	; read controller
00015F08 0800 0001                  		btst	#1,d0			; check down button
00015F0C 6600 0000                  		bne.w	loc2_1AD30		; if set, branch
00015F10 117C 000E 0016             		move.b	#$E,$16(a0)		; $16(a0) is height/2
00015F16 117C 0007 0017             		move.b	#7,$17(a0)		; $17(a0) is width/2
00015F1C 117C 0000 001C             		move.b	#id_roll,obAnim(a0)		; set animation to roll
00015F22 5A68 000C                  		addq.w	#5,$C(a0)		; $C(a0) is Y coordinate
00015F26 117C 0000 0039             		move.b	#0,f_spindash(a0)		; clear Spin Dash flag
00015F2C 7000                       		moveq	#0,d0
00015F2E 1028 003A                  		move.b	$3A(a0),d0		; copy charge count
00015F32 D040                       		add.w	d0,d0			; double it
00015F34 317B 0000 0020             		move.w	Dash_Speeds(pc,d0.w),obInertia(a0) ; get normal speed
00015F3A 3028 0020                  		move.w	obInertia(a0),d0		; get inertia
00015F3E 0440 0800                  		subi.w	#$800,d0		; subtract $800
00015F42 D040                       		add.w	d0,d0			; double it
00015F44 0240 1F00                  		andi.w	#$1F00,d0		; mask it against $1F00
00015F48 4440                       		neg.w	d0			; negate it
00015F4A 0640 2000                  		addi.w	#$2000,d0		; add $2000
00015F4E 31C0 C904                  		move.w	d0,($FFFFC904).w	; move to $EED0
00015F52 0828 0000 0022             		btst	#0,$22(a0)		; is sonic facing right?
00015F58 6700                       		beq.s	loc2_1ACF4		; if not, branch
00015F5A 4468 0020                  		neg.w	obInertia(a0)			; negate inertia
00015F5E                            
00015F5E                            loc2_1ACF4:
00015F5E 08E8 0002 0022             		bset	#2,$22(a0)		; set unused (in s1) flag
00015F64 11FC 0000 D1DC             		move.b	#0,($FFFFD1DC).w	; clear Spin Dash dust animation.
00015F6A 303C 00BC                  		move.w	#$BC,d0			; spin release sound
00015F6E 4EB9 0000 12FE             		jsr	(PlaySound_Special).l	; play it!
00015F74 1028 0026                  		move.b	obAngle(a0),d0
00015F78 4EB9 0000 3D28             		jsr	(CalcSine).l
00015F7E C3E8 0020                  		muls.w	obInertia(a0),d1
00015F82 E081                       		asr.l	#8,d1
00015F84 3141 0010                  		move.w	d1,obVelX(a0)
00015F88 C1E8 0020                  		muls.w	obInertia(a0),d0
00015F8C E080                       		asr.l	#8,d0
00015F8E 3140 0012                  		move.w	d0,obVelY(a0)
00015F92                            	
00015F92 6000                       		bra.s	loc2_1AD78
00015F94                            ; ===========================================================================
00015F94                            Dash_Speeds:
00015F94 0700                       		dc.w  $700		; 0
00015F96 0780                       		dc.w  $780		; 1
00015F98 0800                       		dc.w  $800		; 2
00015F9A 0880                       		dc.w  $880		; 3
00015F9C 0900                       		dc.w  $900		; 4
00015F9E 0980                       		dc.w  $980		; 5
00015FA0 0A00                       		dc.w  $A00		; 6
00015FA2 0A80                       		dc.w  $A80		; 7
00015FA4 0B00                       		dc.w  $B00		; 8
00015FA6                            ; ===========================================================================
00015FA6                            
00015FA6                            loc2_1AD30:				; If still charging the dash...
00015FA6 4A68 003A                  		tst.w	$3A(a0)		; check charge count
00015FAA 6700                       		beq.s	loc2_1AD48	; if zero, branch
00015FAC 3028 003A                  		move.w	$3A(a0),d0	; otherwise put it in d0
00015FB0 EA48                       		lsr.w	#5,d0		; shift right 5 (divide it by 32)
00015FB2 9168 003A                  		sub.w	d0,$3A(a0)	; subtract from charge count
00015FB6 6400                       		bcc.s	loc2_1AD48	; ??? branch if carry clear
00015FB8 317C 0000 003A             		move.w	#0,$3A(a0)	; set charge count to 0
00015FBE                            
00015FBE                            loc2_1AD48:
00015FBE 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015FC2 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C?
00015FC6 6700 0000                  		beq.w	loc2_1AD78		; if not, branch
00015FCA 317C 1F00 001C             		move.w	#$1F00,obAnim(a0)	; reset spdsh animation
00015FD0 303C 00D5                  		move.w	#$D5,d0			; was $E0 in sonic 2
00015FD4 11FC 0002 D1DC             		move.b	#2,$FFFFD1DC.w		; Set the Spin Dash dust animation to $2.
00015FDA 4EB9 0000 12FE             		jsr	(PlaySound_Special).l	; play charge sound
00015FE0 0668 0200 003A             		addi.w	#$200,$3A(a0)		; increase charge count
00015FE6 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)		; check if it's maxed
00015FEC 6500                       		bcs.s	loc2_1AD78		; if not, then branch
00015FEE 317C 0800 003A             		move.w	#$800,$3A(a0)		; reset it to max
00015FF4                            
00015FF4                            loc2_1AD78:
00015FF4 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015FF6 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w	; $EED8 only ever seems
00015FFC 6700                       		beq.s	loc2_1AD8C		; to be used in Spin Dash
00015FFE 6400                       		bcc.s	loc2_1AD88
00016000 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00016004                            
00016004                            loc2_1AD88:
00016004 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00016008                            
00016008                            loc2_1AD8C:
00016008 6100 0000                  		bsr.w	Sonic_LevelBound
0001600C 6100 0000                  		bsr.w	Sonic_AnglePos
00016010                            		;move.w	#$60,(v_lookshift).w	; reset looking up/down
00016010 4E75                       		rts
00016012                            ; End of subroutine Sonic_SpinDash
00016012                            ; End of subroutine Sonic_SpinDash
00016012                            		include	"_incObj\Sonic HomingAttack.asm"
00016012                            ; ===========================================================================
00016012                            ; ---------------------------------------------------------------------------
00016012                            ; Subroutine to perform Homing Attack
00016012                            ; ---------------------------------------------------------------------------
00016012                            
00016012                            ;HomingAttackType = 1 ; 0 is Sonic Winter Adventures, 1 is Sonic and the Mystic Gems
00016012                            
00016012                            Sonic_HomingAttack:     
00016012 4A38 F5C9                  		tst.b	(v_gshield)
00016016 6700                       		beq.s	@Return2
00016018 0C38 0002 F5CD             		cmpi.b	#2,(v_homingattack).w	; already Homing?
0001601E 6700                       		beq.s	@Homing_Process		; if yes, branch
00016020 0238 0070 F603             		andi.b	#btnABC,(v_jpadpress2).w	; is A, B or C pressed?
00016026 6600                       		bne.s	@Homing_Perform
00016028 4E75                       		rts
0001602A                            	@Return2:
0001602A 4E75                       		rts
0001602C                            ; ---------------------------------------------------------------------------
0001602C                            @Homing_Process:
0001602C 5328 001E                  		subq.b	#1,obTimeFrame(a0)		; is timer over?
00016030 6600                       		bne.s	@SetSpeeds		; if not, branch
00016032 4238 F5CD                  		clr.b	(v_homingattack).w
00016036 4E75                       		rts
00016038                            
00016038                            	@SetSpeeds:
00016038 3268 003A                  		movea.w	$3A(a0),a1		; load object to follow
0001603C                            
0001603C                            			
0001603C                            
0001603C 3229 000C                  		move.w	obY(a1),d1
00016040 9268 000C                  		sub.w	obY(a0),d1		; d1 -> Ydist
00016044 3429 0008                  		move.w	obX(a1),d2
00016048 9468 0008                  		sub.w	obX(a0),d2		; d2 -> Xdist
0001604C 4EB9 0000 3FBA                             jsr     (CalcAngle).l		; Calcuate Angle
00016052 4EB9 0000 3D28                             jsr     (CalcSine).l		; Get Sine
00016058 363C 0000                                  move.w	#$0,d3		; d3 -> Homing Attack Speed
0001605C 363C 0A00                                  move.w	#$A00,d3		; d3 -> Homing Attack Speed
00016060 C1C3                       		muls.w	d3,d0
00016062 C3C3                       		muls.w	d3,d1
00016064 E080                       		asr.l	#8,d0
00016066 E081                       		asr.l	#8,d1
00016068 3141 0012                                  move.w  d1,obVelY(a0)		; set speed
0001606C 3140 0010                                  move.w  d0,obVelX(a0)		; set speed
00016070 3140 0020                  		move.w	d0,obInertia(a0)
00016074 4E75                       		rts
00016076                            
00016076                            ; ---------------------------------------------------------------------------
00016076                            @Homing_Perform:
00016076 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
0001607C 76FF                       		moveq	#-1,d3			; d3 will contain the direct distance for current d4,d5 (Piphagor yay)
0001607E 78FF                       		moveq	#-1,d4			; d4 will contain the shortest X-dist
00016080 7AFF                       		moveq	#-1,d5			; d5 will contain the shortest Y-dist
00016082 3C3C 005F                  		move.w	#$5F,d6
00016086 43F8 D800                  		lea	(v_lvlobjspace).w,a1	; Load in-level objects RAM
0001608A 3C3C 005F                  		move.w	#$5F,d6			; do $60 objects
0001608E                            		
0001608E                            	@ObjectsLoop:                  
0001608E 4A29 0001                  		tst.b	1(a1)			; is object on-screen?
00016092 6A00                       		bpl.s	@NextObject		; if yes, branch
00016094 4A29 0020                  		tst.b	obColType(a1)			; load touch response
00016098 6600                       		bne.s	@Homing_TestObject	; if touch response is not zero, branch
0001609A                            
0001609A                            	@NextObject:
0001609A 43E9 0040                  		lea	$40(a1),a1		; load next object slot
0001609E 51CE FFEE                  		dbf	d6,@ObjectsLoop		; repeat for all objects in RAM
000160A2                            		
000160A2 0C83 0000 6400             		cmpi.l	#$A0*$A0,d3		; if Distance ^ 2 > $A0 ^ 2, quit
000160A8 6200 0000                  		bhi.w	Sonic_JumpDash
000160AC                            
000160AC                            
000160AC                            
000160AC 117C 003C 001E             		move.b	#60,obTimeFrame(a0)		; follow object for 60 frames
000160B2 11FC 0002 F5CD             		move.b  #2,(v_homingattack).w	; set flag as #2 (Homing Attack)
000160B8 303C 00BC                  		move.w	#$BC,d0			; play JD sound
000160BC 4EF9 0000 12FE             		jmp	(PlaySound_Special).l   ;
000160C2                            
000160C2                            
000160C2                            ; ---------------------------------------------------------------------------
000160C2                            @Homing_TestObject:
000160C2 45FA 0000                  		lea	@Homing_ObjectList(pc),a2
000160C6 1011                       		move.b	(a1),d0
000160C8                            		
000160C8                            	@CheckID:
000160C8 B01A                       		cmp.b	(a2)+,d0		; compare current obj ID to one in list
000160CA 6700                       		beq.s	@CalcXDist		; if object is in list, branch
000160CC 62FA                       		bhi.s	@CheckID		; if current obj ID is higer, go on looking
000160CE 60CA                       		bra.s	@NextObject		; the object is not in list, quit
000160D0                            		
000160D0                            	@CalcXDist:
000160D0 3229 0008                  		move.w	obX(a1),d1		; d1 -> ObjX
000160D4 9268 0008                  		sub.w	obX(a0),d1		; d1 -> ObjX - SonX
000160D8 6A00                       		bpl.s	@ObjAhead
000160DA                            
000160DA                            	; Object is behind Sonic
000160DA 0828 0000 0022             		btst	#0,obStatus(a0)		; is Sonic faced left?
000160E0 67B8                       		beq.s	@NextObject		; if not, we can't home at object
000160E2 6000                       		bra.s	@CalcYDist
000160E4                            
000160E4                            	@ObjAhead:
000160E4 0828 0000 0022             		btst	#0,obStatus(a0)		; is Sonic faced right?
000160EA 66AE                       		bne.s	@NextObject		; if not, we can't home at object
000160EC                            
000160EC                            	@CalcYDist:
000160EC 3429 000C                  		move.w	obY(a1),d2		; d2 -> ObjY
000160F0 9468 000C                  		sub.w	obY(a0),d2		; d2 -> ObjY - SonY
000160F4                            		
000160F4                            	; Calculate absolute distance ( d1 * d1 + d2 * d2 )
000160F4 3002                       		move.w	d2,d0			; d0 -> d2
000160F6 4840                       		swap	d0
000160F8 3001                       		move.w	d1,d0			; d0 -> d2 d1
000160FA C3C1                       		muls.w	d1,d1			; d1 -> d1 * d1
000160FC C5C2                       		muls.w	d2,d2			; d2 -> d2 * d2
000160FE D481                       		add.l	d1,d2			; d2 -> d1 * d1 + d2 * d2
00016100 B483                       		cmp.l	d3,d2			; is new distance shorter after all?
00016102 6400 FF96                  		bcc.w	@NextObject		; if not, branch
00016106                            
00016106 2602                       		move.l	d2,d3			; set new distance
00016108 3800                       		move.w	d0,d4			; set new Xdist
0001610A 4840                       		swap	d0
0001610C 3A00                       		move.w	d0,d5			; set new Ydist
0001610E 3149 003A                  		move.w	a1,$3A(a0)		; save obj ID
00016112 6000 FF86                  		bra.w	@NextObject
00016116                            
00016116                            
00016116                            ; ---------------------------------------------------------------------------
00016116                            ; Object ids that are available for homming
00016116                            ; NOTE: They should go in increasing order (1,2,3..)
00016116                            ; ---------------------------------------------------------------------------
00016116                            
00016116                            @Homing_ObjectList:
00016116 1E1F 2226 2B2C 2D40 4243   		dc.b	$1E, $1F, $22, $26, $2B, $2C, $2D, $40, $42, $43
00016120 5055 6078                  		dc.b	$50, $55, $60, $78
00016124 FF                         		dc.b	-1	; mark end of list
00016126 00                         		even
00016126                            
00016126                            
00016126                            ; ===========================================================================
00016126                            ; ---------------------------------------------------------------------------
00016126                            ; Subroutine to perform Jump Dash
00016126                            ; ---------------------------------------------------------------------------
00016126                            
00016126                            Sonic_JumpDash:
00016126 4A38 F5CD                  		tst.b	(v_homingattack).w		; already Jump Dashing?
0001612A 6600                       		bne.s	@Return			; if yes, branch
0001612C 11FC 0001 F5CD             		move.b	#1,(v_homingattack).w
00016132 303C 0800                  		move.w	#$800,d0		; set Jump Dash speed
00016136 0828 0006 0022             		btst	#6,obStatus(a0)		; is Sonic underwater
0001613C 6700                       		beq.s	@ChkShoes
0001613E 303C 0600                  		move.w	#$600,d0		; set JD speed for underwater
00016142                            	
00016142                            	@ChkShoes:
00016142 4A38 FE2E                  		tst.b	(v_shoes).w		; does Sonic have speed	shoes?
00016146 6700                       		beq.s	@SetSpeeds		; if not, branch
00016148 0640 0200                  		addi.w	#$200,d0
0001614C                            
0001614C                            	;@ChkOrientation:
0001614C                            		;btst	#0,obStatus(a0)
0001614C                            		;beq.s	@SetSpeeds
0001614C                            		;neg.w	d0
0001614C                            
0001614C                            	@SetSpeeds:
0001614C 3140 0012                  		move.w	d0,obVelY(a0)
00016150 3140 0020                  		move.w	d0,obInertia(a0)
00016154                            		;move.w	#0,obVelY(a0)
00016154 303C 00BC                  		move.w	#$BC,d0			; play JD sound
00016158 4EF9 0000 12FE             		jmp	(PlaySound_Special).l   ;
0001615E                            
0001615E                            	@Return:
0001615E 4E75                       		rts
00016160                            
00016160                            ; -------------------------------------------------------------------------
00016160                            ; Subroutine to stop Sonic, bounce him up and to give him the ability to
00016160                            ; Jumpdash again when he has performed a Jumpdash
00016160                            ; -------------------------------------------------------------------------
00016160                            
00016160                            BounceJD:
00016160 0C38 0002 F5CD             		cmp.b	#2,(v_homingattack).w; was HA flag set?
00016166 6600                       		bne.s	BounceJD_End	; if not, branch
00016168 4238 F5CD                  		clr.b	(v_homingattack).w	; if yes, clear HA flag (allow Sonic to HA again)
0001616C 4268 0010                  		clr.w	obVelX(a0)		; clear X-velocity (stop sonic)
00016170 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00016176 303C FF10                  		move.w	#-$F0,d0
0001617A 0828 0000 0022             		btst	#0,obStatus(a0)		; is Sonic faced left?
00016180 6600                       		bne.s	@MoveAhead		; if not, we can't move right
00016182 4440                       		neg.w	d0
00016184                            
00016184                            	@MoveAhead:
00016184 3140 0010                  		move.w	d0,obVelX(a0)
00016188                            	@Cont:
00016188 317C F810 0012             		move.w	#-$7F0,obVelY(a0)	; move sonic upwards
0001618E 0828 0006 0022             		btst	#6,obStatus(a0)	; is sonic underwater?
00016194 6700                       		beq.s	BounceJD_Shoes	; if not, branch
00016196 317C FAE0 0012             		move.w	#-$520,obVelY(a0)
0001619C                            		
0001619C                            BounceJD_Shoes:
0001619C 4A38 FE2E                  		tst.b	(v_shoes).w	; does sonic has speed shoes?
000161A0 6700                       		beq.s	BounceJD_End	; if not, branch
000161A2 317C F7E0 0012             		move.w	#-$820,obVelY(a0)	; use -$620 for Y-velocity (move sonic upwards)
000161A8                            		
000161A8                            BounceJD_End:
000161A8 4E75                       		rts			; return
000161AA                            ; End of function BounceJD
000161AA                            ; End of function BounceJD
000161AA                            
000161AA                            Sonic_AirRoll:
000161AA 0C28 0000 001C             	cmpi.b  #id_spring,$1C(a0)      ; is sonic in the spring animation?
000161B0 6600                               bne.s   AirRoll_Return   ; if not, return
000161B2                            
000161B2                            AirRoll_CheckBtn:
000161B2 1038 F603                          move.b	($FFFFF603).w,d0 ; Move $FFFFF603 to d0
000161B6 0200 0070                          andi.b	#btnABC,d0 ; Has A/B/C been pressed?
000161BA 6700                               beq.s	AirRoll_Return
000161BC 117C 0000 001C             	move.b	#id_roll,$1C(a0) ; Set Sonic's animation to rolling.
000161C2                                   ; move.w	#$BC,d0
000161C2                                   ; jsr	(PlaySound_Special).l ;    play Sonic rolling sound
000161C2                            
000161C2                            AirRoll_Return:
000161C2 4E75                               rts
000161C4                            ; ===========================================================================
000161C4                            ; ---------------------------------------------------------------------------
000161C4                            ; Unused subroutine to squash Sonic
000161C4                            ; ---------------------------------------------------------------------------
000161C4 1028 0026                  		move.b	obAngle(a0),d0
000161C8 0600 0020                  		addi.b	#$20,d0
000161CC 0200 00C0                  		andi.b	#$C0,d0
000161D0 6600                       		bne.s	locret_13302
000161D2 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000161D6 4A41                       		tst.w	d1
000161D8 6A00                       		bpl.s	locret_13302
000161DA 317C 0000 0020             		move.w	#0,obInertia(a0) ; stop Sonic moving
000161E0 317C 0000 0010             		move.w	#0,obVelX(a0)
000161E6 317C 0000 0012             		move.w	#0,obVelY(a0)
000161EC 117C 0000 001C             		move.b	#id_Warp3,obAnim(a0) ; use "warping" animation
000161F2                            
000161F2                            locret_13302:
000161F2 4E75                       		rts		
000161F4                            		include	"_incObj\Sonic LevelBound.asm"
000161F4                            ; ---------------------------------------------------------------------------
000161F4                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
000161F4                            ; ---------------------------------------------------------------------------
000161F4                            
000161F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000161F4                            
000161F4                            
000161F4                            Sonic_LevelBound:
000161F4 2228 0008                  		move.l	obX(a0),d1
000161F8 3028 0010                  		move.w	obVelX(a0),d0
000161FC 48C0                       		ext.l	d0
000161FE E180                       		asl.l	#8,d0
00016200 D280                       		add.l	d0,d1
00016202 4841                       		swap	d1
00016204 3038 F728                  		move.w	(v_limitleft2).w,d0
00016208 0640 0010                  		addi.w	#$10,d0
0001620C B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
0001620E 6200                       		bhi.s	@sides		; if yes, branch
00016210 3038 F72A                  		move.w	(v_limitright2).w,d0
00016214 0640 0128                  		addi.w	#$128,d0
00016218 4A38 F7AA                  		tst.b	(f_lockscreen).w
0001621C 6600                       		bne.s	@screenlocked
0001621E 0640 0040                  		addi.w	#$40,d0
00016222                            
00016222                            	@screenlocked:
00016222 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00016224 6300                       		bls.s	@sides		; if yes, branch
00016226                            
00016226                            	@chkbottom:
00016226 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0001622A 0640 00E0                  		addi.w	#$E0,d0
0001622E B068 000C                  		cmp.w	obY(a0),d0	; has Sonic touched the	bottom boundary?
00016232 6D00                       		blt.s	@bottom		; if yes, branch
00016234 4E75                       		rts	
00016236                            ; ===========================================================================
00016236                            
00016236                            @bottom:
00016236 3038 F726                  		move.w (v_limitbtm1).w,d0 
0001623A 3238 F72E                  		move.w (v_limitbtm2).w,d1 
0001623E B240                       		cmp.w d0,d1 ; screen still scrolling down? 
00016240 6D00                       		blt.s @dontkill; if so, don't kill Sonic 
00016242 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is level SBZ2 ?
00016248 6600 0000                  		bne.w	Kill_transport	; if not, kill Sonic
0001624C 0C78 1B00 D008             		cmpi.w	#$1B00,(v_player+obX).w
00016252 6500 0000                  		bcs.w	Kill_transport
00016256 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
0001625A 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
00016260 31FC 0103 FE10             		move.w	#(id_LZ<<8)+3,(v_zone).w ; set level to SBZ3 (LZ4)
00016266 4E75                       		rts	
00016268                            @dontkill: 
00016268 4E75                       		rts
0001626A                            ; ===========================================================================
0001626A                            
0001626A                            @sides:
0001626A 3140 0008                  		move.w	d0,obX(a0)
0001626E 317C 0000 000A             		move.w	#0,obX+2(a0)
00016274 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Sonic moving
0001627A 317C 0000 0020             		move.w	#0,obInertia(a0)
00016280 60A4                       		bra.s	@chkbottom
00016282                            
00016282                            Kill_transport: 
00016282 4EF9 0000 0000                     	jmp        (KillSonic).l
00016288                            
00016288                            ; End of function Sonic_LevelBound
00016288                            ; End of function Sonic_LevelBound
00016288                            		include	"_incObj\Sonic Roll.asm"
00016288                            ; ---------------------------------------------------------------------------
00016288                            ; Subroutine allowing Sonic to roll when he's moving
00016288                            ; ---------------------------------------------------------------------------
00016288                            
00016288                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016288                            
00016288                            
00016288                            Sonic_Roll:
00016288 4A38 F7CA                  		tst.b	(f_jumponly).w
0001628C 6600                       		bne.s	@noroll
0001628E 3028 0020                  		move.w	obInertia(a0),d0
00016292 6A00                       		bpl.s	@ispositive
00016294 4440                       		neg.w	d0
00016296                            
00016296                            	@ispositive:
00016296 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
0001629A 6500                       		bcs.s	@noroll		; if not, branch
0001629C 1038 F602                  		move.b	(v_jpadhold2).w,d0
000162A0 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	being pressed?
000162A4 6600                       		bne.s	@noroll		; if yes, branch
000162A6 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
000162AC 6600                       		bne.s	Sonic_ChkRoll	; if yes, branch
000162AE                            
000162AE                            	@noroll:
000162AE 4E75                       		rts	
000162B0                            ; ===========================================================================
000162B0                            
000162B0                            Sonic_ChkRoll:
000162B0 0828 0002 0022             		btst	#2,obStatus(a0)	; is Sonic already rolling?
000162B6 6700                       		beq.s	@roll		; if not, branch
000162B8 4E75                       		rts	
000162BA                            ; ===========================================================================
000162BA                            
000162BA                            @roll:
000162BA 08E8 0002 0022             		bset	#2,obStatus(a0)
000162C0 117C 000E 0016             		move.b	#$E,obHeight(a0)
000162C6 117C 0007 0017             		move.b	#7,obWidth(a0)
000162CC 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
000162D2 5A68 000C                  		addq.w	#5,obY(a0)
000162E0 4A68 0020                  		tst.w	obInertia(a0)
000162E4 6600                       		bne.s	@ismoving
000162E6 317C 0200 0020             		move.w	#$200,obInertia(a0) ; set inertia if 0
000162EC                            
000162EC                            	@ismoving:
000162EC 4E75                       		rts	
000162EE                            ; End of function Sonic_Roll
000162EE                            ; End of function Sonic_Roll
000162EE                            		include	"_incObj\Sonic Jump.asm"
000162EE                            ; ---------------------------------------------------------------------------
000162EE                            ; Subroutine allowing Sonic to jump
000162EE                            ; ---------------------------------------------------------------------------
000162EE                            
000162EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000162EE                            
000162EE                            
000162EE                            Sonic_Jump:
000162EE 1038 F603                  		move.b	(v_jpadpress2).w,d0
000162F2 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
000162F6 6700 0000                  		beq.w	locret_1348E	; if not, branch
000162FA 7000                       		moveq	#0,d0
000162FC 1028 0026                  		move.b	obAngle(a0),d0
00016300 0600 0080                  		addi.b	#$80,d0
00016304 6100 0000                  		bsr.w	sub_14D48
00016308 0C41 0006                  		cmpi.w	#6,d1
0001630C 6D00 0000                  		blt.w	locret_1348E
00016310 343C 0680                  		move.w	#$680,d2
00016314 0828 0006 0022             		btst	#6,obStatus(a0)
0001631A 6700                       		beq.s	loc_1341C
0001631C 343C 0380                  		move.w	#$380,d2
00016320                            
00016320                            loc_1341C:
00016320 7000                       		moveq	#0,d0
00016322 1028 0026                  		move.b	obAngle(a0),d0
00016326 0400 0040                  		subi.b	#$40,d0
0001632A 4EB9 0000 3D28             		jsr	(CalcSine).l
00016330 C3C2                       		muls.w	d2,d1
00016332 E081                       		asr.l	#8,d1
00016334 D368 0010                  		add.w	d1,obVelX(a0)	; make Sonic jump
00016338 C1C2                       		muls.w	d2,d0
0001633A E080                       		asr.l	#8,d0
0001633C D168 0012                  		add.w	d0,obVelY(a0)	; make Sonic jump
00016340 08E8 0001 0022             		bset	#1,obStatus(a0)
00016346 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001634C 588F                       		addq.l	#4,sp
0001634E 117C 0001 003C             		move.b	#1,$3C(a0)
00016354 4228 0038                  		clr.b	$38(a0)
00016362 117C 0013 0016             		move.b	#$13,obHeight(a0)
00016368 117C 0009 0017             		move.b	#9,obWidth(a0)
0001636E 117C 000E 0016             		move.b	#$E,obHeight(a0)
00016374 117C 0007 0017             		move.b	#7,obWidth(a0)
0001637A                            Result_Check:
0001637A 4A38 F5C2                  		tst.b   ($FFFFF5C2).w ; Has the victory animation flag been set?
0001637E 6700                       		beq.s   NormalJump ; If not, branch
00016380 117C 0000 001C             		move.b  #id_Leap2,$1C(a0) ; Play the victory animation
00016386 6000                       		bra.s   cont ; Continue
00016388                            NormalJump:
00016388 117C 0002 001C             		move.b  #2,$1C(a0)    ; use "jumping"    animation
0001638E                            cont:
0001638E 08E8 0002 0022             		bset	#2,obStatus(a0)
00016394 5A68 000C                  		addq.w	#5,obY(a0)
00016398                            
00016398                            locret_1348E:
00016398 4E75                       		rts	
0001639A                            ; ===========================================================================
0001639A                            
0001639A                            ; End of function Sonic_Jump
0001639A                            ; End of function Sonic_Jump
0001639A                            		include	"_incObj\Sonic JumpHeight.asm"
0001639A                            ; ---------------------------------------------------------------------------
0001639A                            ; Subroutine controlling Sonic's jump height/duration
0001639A                            ; ---------------------------------------------------------------------------
0001639A                            
0001639A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001639A                            
0001639A                            
0001639A                            Sonic_JumpHeight:
0001639A 4A28 003C                  		tst.b	$3C(a0)
0001639E 6700                       		beq.s	loc_134C4
000163A0 323C FC00                  		move.w	#-$400,d1
000163A4 0828 0006 0022             		btst	#6,obStatus(a0)
000163AA 6700                       		beq.s	loc_134AE
000163AC 323C FE00                  		move.w	#-$200,d1
000163B0                            
000163B0                            loc_134AE:
000163B0 B268 0012                  		cmp.w	obVelY(a0),d1
000163B4 6F00                       		ble.s	locret_134C2
000163B6 1038 F602                  		move.b	(v_jpadhold2).w,d0
000163BA 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
000163BE 6600                       		bne.s	locret_134C2	; if yes, branch
000163C0 3141 0012                  		move.w	d1,obVelY(a0)
000163C4                            
000163C4                            locret_134C2:
000163C4 4A38 F7C8                          tst.b   (f_lockmulti).w      ; Are Controls locked?
000163C8 66FA                               bne.s   locret_134C2            ; If so, branch, and do not bother with Super code
000163CA 1038 F603                          move.b  (v_jpadpress2).w,d0
000163CE 0200 0010                          andi.b  #btnB,d0 ; is a jump button pressed?
000163D2 6600 0000                  		bne.w	Sonic_CheckGoSuper
000163D6 4E75                       		rts	
000163D8                            ; ===========================================================================
000163D8                            
000163D8                            loc_134C4:
000163D8 0C68 F040 0012             		cmpi.w	#-$FC0,obVelY(a0)
000163DE 6C00                       		bge.s	locret_134D2
000163E0 317C F040 0012             		move.w	#-$FC0,obVelY(a0)
000163E6                            
000163E6                            locret_134D2:		
000163E6 4E75                       		rts	
000163E8                            ; End of function Sonic_JumpHeight
000163E8                            
000163E8                            
000163E8                            ; ---------------------------------------------------------------------------
000163E8                            ; Subroutine called at the peak of a jump that transforms Sonic into Super Sonic
000163E8                            ; if he has enough rings and emeralds
000163E8                            ; ---------------------------------------------------------------------------
000163E8                            
000163E8                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000163E8                            
000163E8                            Sonic_CheckGoSuper:
000163E8 4A38 FE19                  		tst.b	(Super_Sonic_flag).w	; is Sonic already Super?
000163EC 6600 0000                  		bne.w	Sonic_RevertToNormal			; if yes, branch	
000163F0 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; does Sonic have at least 50 rings?
000163F6 6500                       		bcs.s	return_1ABA4		; if not, branch	
000163F8 11FC 0001 F5D8             		move.b	#1,(Super_Sonic_palette).w
000163FE 11FC 000F F5DE             		move.b	#$F,(Palette_timer).w
00016404 11FC 0001 FE19             		move.b	#1,(Super_Sonic_flag).w
0001640A 4238 FE2E                  		clr.b	(v_shoes).w ; clear speed shoes
0001640E 11FC 0001 F7C8             		move.b    #$1,(f_lockmulti).w
00016414 117C 0000 001C             		move.b    #id_Transform,obAnim(a0)   
0001641A 4EB9 0000 0000             		jsr		Super_and_Invincibility_Stars				
00016420 11FC 008D D200             		move.b	#id_SuperStars,($FFFFD200).w				
00016426 31FC 0A00 F760             		move.w	#$A00,(v_sonspeedmax).w
0001642C 31FC 0030 F762             		move.w	#$30,(v_sonspeedacc).w
00016432 31FC 0100 F764             		move.w	#$100,(v_sonspeeddec).w
00016438 317C 0000 0032             		move.w	#0,invtime(a0)
0001643E 11FC 0001 FE2D             		move.b #1,(v_invinc).w ; make Sonic invincible	
00016444 303C 00D6                  		move.w	#$D6,d0         ; 
00016448 4EB9 0000 12FE             		jsr	(PlaySound_Special).l	; Play transformation sound effect.
0001644E 303C 0087                  		move.w	#$87,d0         
00016452 4EF9 0000 12F8             		jmp	(PlaySound).l	; load the invincibility song and return also playmusic doesn't exist
00016458                            
00016458                            ; ---------------------------------------------------------------------------
00016458                            return_1ABA4:
00016458 4E75                       		rts
0001645A                            		
0001645A                            ; End of subroutine Sonic_CheckGoSuper		
0001645A                            ; ---------------------------------------------------------------------------
0001645A                            ; Subroutine doing the extra logic for Super Sonic
0001645A                            ; ---------------------------------------------------------------------------
0001645A                            
0001645A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0001645A                            
0001645A                            ; loc_1ABA6:
0001645A                            Sonic_Super:
0001645A 4A38 FE19                  		tst.b	(Super_Sonic_flag).w	; Ignore all this code if not Super Sonic
0001645E 6700 0000                  		beq.w	return_1AC3C
00016462 4A38 FE1E                  		tst.b	(f_timecount).w
00016466 6700                       		beq.s	Sonic_RevertToNormal ; ?
00016468 5378 F670                  		subq.w	#1,(v_pal_buffer+$20).w
0001646C 6A00 0000                  		bpl.w	return_1AC3C
00016470 31FC 003C F670             		move.w	#60,(v_pal_buffer+$20).w	; Reset frame counter to 60
00016476 4A78 FE20                  		tst.w	(v_rings).w
0001647A 6700                       		beq.s	Sonic_RevertToNormal
0001647C 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w
00016482 0C78 0001 FE20             		cmpi.w	#1,(v_rings).w
00016488 6700                       		beq.s	@update
0001648A 0C78 000A FE20             		cmpi.w	#10,(v_rings).w
00016490 6700                       		beq.s	@update
00016492 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w
00016498 6600                       		bne.s	@update2
0001649A                            @update
0001649A 0038 0080 FE1D             		ori.b	#$80,(f_ringcount).w
000164A0                            @update2
000164A0 5378 FE20                  		subq.w	#1,(v_rings).w
000164A4 6600                       		bne.s	return_1AC3C
000164A6                            ; loc_1ABF2:
000164A6                            Sonic_RevertToNormal:
000164A6 4238 F7C8                  		clr.b   (f_lockmulti).w
000164AA 11FC 0002 F5D8             		move.b	#2,(Super_Sonic_palette).w	; Remove rotating palette
000164B0 31FC 0028 F5CC             		move.w	#$28,($FFFFF5CC).w	; Unknown
000164B6 11FC 0000 FE19             		move.b	#0,(Super_Sonic_flag).w
000164BC 11FC 0000 F7C8             		move.b    #0,(f_lockmulti).w	
000164C2 317C 0001 0032             		move.w	#1,invtime(a0)				
000164C8 117C 0001 001D             		move.b	#1,next_anim(a0)	; Change animation back to normal ?
000164CE 4238 D200                  		clr.b	($FFFFD200).w	; clear Obj7E (super sonic stars object) at $FFFFD200		
000164D2 4238 FE2D                  		clr.b 	(v_invinc).w
000164D6 4238 FE2E                  		clr.b 	(v_shoes).w 
000164DA 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
000164DE 4EB9 0000 12F8             		jsr		(PlaySound).l    ; play normal music		
000164E4 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w
000164EA 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w
000164F0 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w
000164F6 0828 0006 0022             		btst	#6,obStatus(a0)	; Check if underwater, return if not
000164FC 6700                       		beq.s	return_1AC3C
000164FE 31FC 0300 F760             		move.w	#$300,(v_sonspeedmax).w
00016504 31FC 0006 F762             		move.w	#6,(v_sonspeedacc).w
0001650A 31FC 0040 F764             		move.w	#$40,(v_sonspeeddec).w
00016510                            		
00016510                            return_1AC3C:
00016510 4E75                       		rts
00016512                            ; End of subroutine Sonic_Super	
00016512                            
00016512                            
00016512                            ; ---------------------------------------------------------------------------
00016512                            ; Subroutine to	delete the Super Stars and the Invincibility Stars
00016512                            ; ---------------------------------------------------------------------------
00016512                            
00016512                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016512                            
00016512                            
00016512                            Super_and_Invincibility_Stars:
00016512 4278 D032                  		clr.w	($FFFFD032).w		; clear time limit of the invincibility
00016516 2F08                       		move.l	a0,-(sp)
00016518 41F8 D200                  		lea		($FFFFD200).w,a0	; stars object ($3801 and $8F)
0001651C 4EBA 9350                  		jsr		DeleteObject		; delete stars
00016520 41F8 D240                  		lea		($FFFFD240).w,a0	; stars object ($3802)
00016524 4EBA 9348                  		jsr		DeleteObject		; delete stars
00016528 41F8 D280                  		lea		($FFFFD280).w,a0	; stars object ($3803)
0001652C 4EBA 9340                  		jsr		DeleteObject		; delete stars
00016530 41F8 D2C0                  		lea		($FFFFD2C0).w,a0	; stars object ($3804)
00016534 4EBA 9338                  		jsr		DeleteObject		; delete stars
00016538 205F                       		move.l	(sp)+,a0
0001653A 4E75                       		rts
0001653C                            ; End of function Super_and_Invincibility_Stars
0001653C                            ; End of function Super_and_Invincibility_Stars
0001653C                            		include	"_incObj\Sonic SlopeResist.asm"
0001653C                            ; ---------------------------------------------------------------------------
0001653C                            ; Subroutine to	slow Sonic walking up a	slope
0001653C                            ; ---------------------------------------------------------------------------
0001653C                            
0001653C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001653C                            
0001653C                            
0001653C                            Sonic_SlopeResist:
0001653C 1028 0026                  		move.b	obAngle(a0),d0
00016540 0600 0060                  		addi.b	#$60,d0
00016544 0C00 00C0                  		cmpi.b	#$C0,d0
00016548 6400                       		bcc.s	locret_13508
0001654A 1028 0026                  		move.b	obAngle(a0),d0
0001654E 4EB9 0000 3D28             		jsr	(CalcSine).l
00016554 C1FC 0020                  		muls.w	#$20,d0
00016558 E080                       		asr.l	#8,d0
0001655A 4A68 0020                  		tst.w	obInertia(a0)
0001655E 6700                       		beq.s	locret_13508
00016560 6B00                       		bmi.s	loc_13504
00016562 4A40                       		tst.w	d0
00016564 6700                       		beq.s	locret_13502
00016566 D168 0020                  		add.w	d0,obInertia(a0) ; change Sonic's inertia
0001656A                            
0001656A                            locret_13502:
0001656A 4E75                       		rts	
0001656C                            ; ===========================================================================
0001656C                            
0001656C                            loc_13504:
0001656C D168 0020                  		add.w	d0,obInertia(a0)
00016570                            
00016570                            locret_13508:
00016570 4E75                       		rts	
00016572                            ; End of function Sonic_SlopeResist
00016572                            ; End of function Sonic_SlopeResist
00016572                            		include	"_incObj\Sonic RollRepel.asm"
00016572                            ; ---------------------------------------------------------------------------
00016572                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00016572                            ; ---------------------------------------------------------------------------
00016572                            
00016572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016572                            
00016572                            
00016572                            Sonic_RollRepel:
00016572 1028 0026                  		move.b	obAngle(a0),d0
00016576 0600 0060                  		addi.b	#$60,d0
0001657A 0C00 00C0                  		cmpi.b	#-$40,d0
0001657E 6400                       		bcc.s	locret_13544
00016580 1028 0026                  		move.b	obAngle(a0),d0
00016584 4EB9 0000 3D28             		jsr	(CalcSine).l
0001658A C1FC 0050                  		muls.w	#$50,d0
0001658E E080                       		asr.l	#8,d0
00016590 4A68 0020                  		tst.w	obInertia(a0)
00016594 6B00                       		bmi.s	loc_1353A
00016596 4A40                       		tst.w	d0
00016598 6A00                       		bpl.s	loc_13534
0001659A E480                       		asr.l	#2,d0
0001659C                            
0001659C                            loc_13534:
0001659C D168 0020                  		add.w	d0,obInertia(a0)
000165A0 4E75                       		rts	
000165A2                            ; ===========================================================================
000165A2                            
000165A2                            loc_1353A:
000165A2 4A40                       		tst.w	d0
000165A4 6B00                       		bmi.s	loc_13540
000165A6 E480                       		asr.l	#2,d0
000165A8                            
000165A8                            loc_13540:
000165A8 D168 0020                  		add.w	d0,obInertia(a0)
000165AC                            
000165AC                            locret_13544:
000165AC 4E75                       		rts	
000165AE                            ; End of function Sonic_RollRepel
000165AE                            ; End of function Sonic_RollRepel
000165AE                            		include	"_incObj\Sonic SlopeRepel.asm"
000165AE                            ; ---------------------------------------------------------------------------
000165AE                            ; Subroutine to	push Sonic down	a slope
000165AE                            ; ---------------------------------------------------------------------------
000165AE                            
000165AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000165AE                            
000165AE                            
000165AE                            Sonic_SlopeRepel:
000165AE 4E71                       		nop	
000165B0 4A28 0038                  		tst.b	$38(a0)
000165B4 6600                       		bne.s	locret_13580
000165B6 4A68 003E                  		tst.w	$3E(a0)
000165BA 6600                       		bne.s	loc_13582
000165BC 1028 0026                  		move.b	obAngle(a0),d0
000165C0 0600 0020                  		addi.b	#$20,d0
000165C4 0200 00C0                  		andi.b	#$C0,d0
000165C8 6700                       		beq.s	locret_13580
000165CA 3028 0020                  		move.w	obInertia(a0),d0
000165CE 6A00                       		bpl.s	loc_1356A
000165D0 4440                       		neg.w	d0
000165D2                            
000165D2                            loc_1356A:
000165D2 0C40 0280                  		cmpi.w	#$280,d0
000165D6 6400                       		bcc.s	locret_13580
000165D8 4268 0020                  		clr.w	obInertia(a0)
000165DC 08E8 0001 0022             		bset	#1,obStatus(a0)
000165E2 317C 001E 003E             		move.w	#$1E,$3E(a0)
000165E8                            
000165E8                            locret_13580:
000165E8 4E75                       		rts	
000165EA                            ; ===========================================================================
000165EA                            
000165EA                            loc_13582:
000165EA 5368 003E                  		subq.w	#1,$3E(a0)
000165EE 4E75                       		rts	
000165F0                            ; End of function Sonic_SlopeRepel
000165F0                            ; End of function Sonic_SlopeRepel
000165F0                            		include	"_incObj\Sonic JumpAngle.asm"
000165F0                            ; ---------------------------------------------------------------------------
000165F0                            ; Subroutine to	return Sonic's angle to 0 as he jumps
000165F0                            ; ---------------------------------------------------------------------------
000165F0                            
000165F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000165F0                            
000165F0                            
000165F0                            Sonic_JumpAngle:
000165F0 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
000165F4 6700                       		beq.s	locret_135A2	; if already 0,	branch
000165F6 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
000165F8                            
000165F8 5400                       		addq.b	#2,d0		; increase angle
000165FA 6400                       		bcc.s	loc_13596
000165FC 7000                       		moveq	#0,d0
000165FE                            
000165FE                            loc_13596:
000165FE 6000                       		bra.s	loc_1359E
00016600                            ; ===========================================================================
00016600                            
00016600                            loc_13598:
00016600 5500                       		subq.b	#2,d0		; decrease angle
00016602 6400                       		bcc.s	loc_1359E
00016604 7000                       		moveq	#0,d0
00016606                            
00016606                            loc_1359E:
00016606 1140 0026                  		move.b	d0,obAngle(a0)
0001660A                            
0001660A                            locret_135A2:
0001660A 4E75                       		rts	
0001660C                            ; End of function Sonic_JumpAngle
0001660C                            ; End of function Sonic_JumpAngle
0001660C                            		include	"_incObj\Sonic Floor.asm"
0001660C                            ; ---------------------------------------------------------------------------
0001660C                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
0001660C                            ; ---------------------------------------------------------------------------
0001660C                            
0001660C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001660C                            
0001660C                            
0001660C                            Sonic_Floor:
0001660C 3228 0010                  		move.w	obVelX(a0),d1
00016610 3428 0012                  		move.w	obVelY(a0),d2
00016614 4EB9 0000 3FBA             		jsr	(CalcAngle).l
0001661A 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
0001661E 0400 0020                  		subi.b	#$20,d0
00016622 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00016626 0200 00C0                  		andi.b	#$C0,d0
0001662A 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
0001662E 0C00 0040                  		cmpi.b	#$40,d0
00016632 6700 0000                  		beq.w	loc_13680
00016636 0C00 0080                  		cmpi.b	#$80,d0
0001663A 6700 0000                  		beq.w	loc_136E2
0001663E 0C00 00C0                  		cmpi.b	#$C0,d0
00016642 6700 0000                  		beq.w	loc_1373E
00016646 6100 0000                  		bsr.w	Sonic_HitWall
0001664A 4A41                       		tst.w	d1
0001664C 6A00                       		bpl.s	loc_135F0
0001664E 9368 0008                  		sub.w	d1,obX(a0)
00016652 317C 0000 0010             		move.w	#0,obVelX(a0)
00016658                            
00016658                            loc_135F0:
00016658 6100 0000                  		bsr.w	sub_14EB4
0001665C 4A41                       		tst.w	d1
0001665E 6A00                       		bpl.s	loc_13602
00016660 D368 0008                  		add.w	d1,obX(a0)
00016664 317C 0000 0010             		move.w	#0,obVelX(a0)
0001666A                            
0001666A                            loc_13602:
0001666A 6100 0000                  		bsr.w	Sonic_HitFloor
0001666E 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00016672 4A41                       		tst.w	d1
00016674 6A00                       		bpl.s	locret_1367E
00016676 1428 0012                  		move.b	obVelY(a0),d2
0001667A 5002                       		addq.b	#8,d2
0001667C 4402                       		neg.b	d2
0001667E B202                       		cmp.b	d2,d1
00016680 6C00                       		bge.s	loc_1361E
00016682 B002                       		cmp.b	d2,d0
00016684 6D00                       		blt.s	locret_1367E
00016686                            
00016686                            loc_1361E:
00016686 D368 000C                  		add.w	d1,obY(a0)
0001668A 1143 0026                  		move.b	d3,obAngle(a0)
0001668E 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016692 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00016698 1003                       		move.b	d3,d0
0001669A 0600 0020                  		addi.b	#$20,d0
0001669E 0200 0040                  		andi.b	#$40,d0
000166A2 6600                       		bne.s	loc_1365C
000166A4 1003                       		move.b	d3,d0
000166A6 0600 0010                  		addi.b	#$10,d0
000166AA 0200 0020                  		andi.b	#$20,d0
000166AE 6700                       		beq.s	loc_1364E
000166B0 E0E8 0012                  		asr	obVelY(a0)
000166B4 6000                       		bra.s	loc_13670
000166B6                            ; ===========================================================================
000166B6                            
000166B6                            loc_1364E:
000166B6 317C 0000 0012             		move.w	#0,obVelY(a0)
000166BC 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
000166C2 4E75                       		rts	
000166C4                            ; ===========================================================================
000166C4                            
000166C4                            loc_1365C:
000166C4 317C 0000 0010             		move.w	#0,obVelX(a0)
000166CA 0C68 0FC0 0012             		cmpi.w	#$FC0,obVelY(a0)
000166D0 6F00                       		ble.s	loc_13670
000166D2 317C 0FC0 0012             		move.w	#$FC0,obVelY(a0)
000166D8                            
000166D8                            loc_13670:
000166D8 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
000166DE 4A03                       		tst.b	d3
000166E0 6A00                       		bpl.s	locret_1367E
000166E2 4468 0020                  		neg.w	obInertia(a0)
000166E6                            
000166E6                            locret_1367E:
000166E6 4E75                       		rts	
000166E8                            ; ===========================================================================
000166E8                            
000166E8                            loc_13680:
000166E8 6100 0000                  		bsr.w	Sonic_HitWall
000166EC 4A41                       		tst.w	d1
000166EE 6A00                       		bpl.s	loc_1369A
000166F0 9368 0008                  		sub.w	d1,obX(a0)
000166F4 317C 0000 0010             		move.w	#0,obVelX(a0)
000166FA 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00016700 4E75                       		rts	
00016702                            ; ===========================================================================
00016702                            
00016702                            loc_1369A:
00016702 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00016706 4A41                       		tst.w	d1
00016708 6A00                       		bpl.s	loc_136B4
0001670A 9368 000C                  		sub.w	d1,obY(a0)
0001670E 4A68 0012                  		tst.w	obVelY(a0)
00016712 6A00                       		bpl.s	locret_136B2
00016714 317C 0000 0012             		move.w	#0,obVelY(a0)
0001671A                            
0001671A                            locret_136B2:
0001671A 4E75                       		rts	
0001671C                            ; ===========================================================================
0001671C                            
0001671C                            loc_136B4:
0001671C 4A68 0012                  		tst.w	obVelY(a0)
00016720 6B00                       		bmi.s	locret_136E0
00016722 6100 0000                  		bsr.w	Sonic_HitFloor
00016726 4A41                       		tst.w	d1
00016728 6A00                       		bpl.s	locret_136E0
0001672A D368 000C                  		add.w	d1,obY(a0)
0001672E 1143 0026                  		move.b	d3,obAngle(a0)
00016732 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016736 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
0001673C 317C 0000 0012             		move.w	#0,obVelY(a0)
00016742 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
00016748                            
00016748                            locret_136E0:
00016748 4E75                       		rts	
0001674A                            ; ===========================================================================
0001674A                            
0001674A                            loc_136E2:
0001674A 6100 0000                  		bsr.w	Sonic_HitWall
0001674E 4A41                       		tst.w	d1
00016750 6A00                       		bpl.s	loc_136F4
00016752 9368 0008                  		sub.w	d1,obX(a0)
00016756 317C 0000 0010             		move.w	#0,obVelX(a0)
0001675C                            
0001675C                            loc_136F4:
0001675C 6100 0000                  		bsr.w	sub_14EB4
00016760 4A41                       		tst.w	d1
00016762 6A00                       		bpl.s	loc_13706
00016764 D368 0008                  		add.w	d1,obX(a0)
00016768 317C 0000 0010             		move.w	#0,obVelX(a0)
0001676E                            
0001676E                            loc_13706:
0001676E 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00016772 4A41                       		tst.w	d1
00016774 6A00                       		bpl.s	locret_1373C
00016776 9368 000C                  		sub.w	d1,obY(a0)
0001677A 1003                       		move.b	d3,d0
0001677C 0600 0020                  		addi.b	#$20,d0
00016780 0200 0040                  		andi.b	#$40,d0
00016784 6600                       		bne.s	loc_13726
00016786 317C 0000 0012             		move.w	#0,obVelY(a0)
0001678C 4E75                       		rts	
0001678E                            ; ===========================================================================
0001678E                            
0001678E                            loc_13726:
0001678E 1143 0026                  		move.b	d3,obAngle(a0)
00016792 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016796 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
0001679C 4A03                       		tst.b	d3
0001679E 6A00                       		bpl.s	locret_1373C
000167A0 4468 0020                  		neg.w	obInertia(a0)
000167A4                            
000167A4                            locret_1373C:
000167A4 4E75                       		rts	
000167A6                            ; ===========================================================================
000167A6                            
000167A6                            loc_1373E:
000167A6 6100 0000                  		bsr.w	sub_14EB4
000167AA 4A41                       		tst.w	d1
000167AC 6A00                       		bpl.s	loc_13758
000167AE D368 0008                  		add.w	d1,obX(a0)
000167B2 317C 0000 0010             		move.w	#0,obVelX(a0)
000167B8 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
000167BE 4E75                       		rts	
000167C0                            ; ===========================================================================
000167C0                            
000167C0                            loc_13758:
000167C0 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000167C4 4A41                       		tst.w	d1
000167C6 6A00                       		bpl.s	loc_13772
000167C8 9368 000C                  		sub.w	d1,obY(a0)
000167CC 4A68 0012                  		tst.w	obVelY(a0)
000167D0 6A00                       		bpl.s	locret_13770
000167D2 317C 0000 0012             		move.w	#0,obVelY(a0)
000167D8                            
000167D8                            locret_13770:
000167D8 4E75                       		rts	
000167DA                            ; ===========================================================================
000167DA                            
000167DA                            loc_13772:
000167DA 4A68 0012                  		tst.w	obVelY(a0)
000167DE 6B00                       		bmi.s	locret_1379E
000167E0 6100 0000                  		bsr.w	Sonic_HitFloor
000167E4 4A41                       		tst.w	d1
000167E6 6A00                       		bpl.s	locret_1379E
000167E8 D368 000C                  		add.w	d1,obY(a0)
000167EC 1143 0026                  		move.b	d3,obAngle(a0)
000167F0 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000167F4 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000167FA 317C 0000 0012             		move.w	#0,obVelY(a0)
00016800 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
00016806                            
00016806                            locret_1379E:
00016806 4E75                       		rts	
00016808                            ; End of function Sonic_Floor
00016808                            ; End of function Sonic_Floor
00016808                            		include	"_incObj\Sonic ResetOnFloor.asm"
00016808                            ; ---------------------------------------------------------------------------
00016808                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00016808                            ; ---------------------------------------------------------------------------
00016808                            
00016808                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016808                            
00016808                            
00016808                            Sonic_ResetOnFloor:            ; XREF: PlatformObject; et al
00016808 4238 F5CD                  		clr.b	(v_homingattack).w
0001680C 08A8 0005 0022                     	bclr    #5,$22(a0)
00016812 08A8 0001 0022                     	bclr    #1,$22(a0)
00016818 0828 0002 0022                     	btst    #2,$22(a0)
0001681E 6700                               	beq.s    loc_137E4
00016820 08A8 0002 0022             		bclr	#2,obStatus(a0)
00016826 117C 0013 0016             		move.b	#$13,obHeight(a0)
0001682C 117C 0009 0017             		move.b	#9,obWidth(a0)
00016832 117C 0000 001C             		move.b	#id_Walk,obAnim(a0) ; use running/walking animation
00016838 5B68 000C                  		subq.w	#5,obY(a0)
0001683C                            
0001683C                            loc_137E4:
0001683C 117C 0000 003C             		move.b	#0,$3C(a0)
00016842 31FC 0000 F7D0             		move.w	#0,(v_itembonus).w
00016848 4E75                       		rts	
0001684A                            ; End of function Sonic_ResetOnFloor
0001684A                            ; End of function Sonic_ResetOnFloor
0001684A                            		include	"_incObj\Sonic (part 2).asm"
0001684A                            ; ---------------------------------------------------------------------------
0001684A                            ; Sonic	when he	gets hurt
0001684A                            ; ---------------------------------------------------------------------------
0001684A                            
0001684A                            Sonic_Hurt:	; Routine 4
0001684A 4EB9 0000 F81A             		jsr	(SpeedToPos).l
00016850 0668 0030 0012             		addi.w	#$30,obVelY(a0)
00016856 0828 0006 0022             		btst	#6,obStatus(a0)
0001685C 6700                       		beq.s	loc_1380C
0001685E 0468 0020 0012             		subi.w	#$20,obVelY(a0)
00016864                            
00016864                            loc_1380C:
00016864 6100 0000                  		bsr.w	Sonic_HurtStop
00016868 6100 F98A                  		bsr.w	Sonic_LevelBound
0001686C 6100 ED8A                  		bsr.w	Sonic_RecordPosition
00016870 6100 0000                  		bsr.w	Sonic_Animate
00016874 6100 0000                  		bsr.w	Sonic_LoadGfx
00016878 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001687E                            
0001687E                            ; ---------------------------------------------------------------------------
0001687E                            ; Subroutine to	stop Sonic falling after he's been hurt
0001687E                            ; ---------------------------------------------------------------------------
0001687E                            
0001687E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001687E                            
0001687E                            
0001687E                            Sonic_HurtStop:
0001687E 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00016882 0640 00E0                  		addi.w	#$E0,d0
00016886                            		;cmp.w	obY(a0),d0
00016886                            		;bcs.w	KillSonic
00016886 6100 FD84                  		bsr.w	Sonic_Floor
0001688A 0828 0001 0022             		btst	#1,obStatus(a0)
00016890 6600                       		bne.s	locret_13860
00016892 7000                       		moveq	#0,d0
00016894 3140 0012                  		move.w	d0,obVelY(a0)
00016898 3140 0010                  		move.w	d0,obVelX(a0)
0001689C 3140 0020                  		move.w	d0,obInertia(a0)
000168A0 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000168A6 5528 0024                  		subq.b	#2,obRoutine(a0)
000168AA 317C 0078 0030             		move.w	#$78,$30(a0)
000168B0                            
000168B0                            locret_13860:
000168B0 4E75                       		rts	
000168B2                            ; End of function Sonic_HurtStop
000168B2                            
000168B2                            ; ---------------------------------------------------------------------------
000168B2                            ; Sonic	when he	dies
000168B2                            ; ---------------------------------------------------------------------------
000168B2                            
000168B2                            Sonic_Death:	; Routine 6
000168B2 6100 0000                  		bsr.w	GameOver
000168B6 4EB9 0000 F7E2             		jsr	(ObjectFall).l
000168BC 6100 ED3A                  		bsr.w	Sonic_RecordPosition
000168C0 6100 0000                  		bsr.w	Sonic_Animate
000168C4 6100 0000                  		bsr.w	Sonic_LoadGfx
000168C8 4EF9 0000 F82E             		jmp	(DisplaySprite).l
000168CE                            
000168CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000168CE                            
000168CE                            GameOver:
000168CE 3038 F72E                  		move.w	(v_limitbtm2).w,d0
000168D2 0640 0100                  		addi.w	#$100,d0
000168D6 B068 000C                  		cmp.w	obY(a0),d0
000168DA 6400 0000                  		bcc.w	locret_13900
000168DE 317C FFC8 0012             		move.w	#-$38,obVelY(a0)
000168E4 5428 0024                  		addq.b	#2,obRoutine(a0)
000168E8 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
000168EC 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update lives counter
000168F0 5338 FE12                  		subq.b	#1,(v_lives).w	; subtract 1 from number of lives
000168F4 6600                       		bne.s	loc_138D4
000168F6 317C 0000 003A             		move.w	#0,$3A(a0)
000168FC 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load GAME object
00016902 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
00016908 11FC 0001 D0DA             		move.b	#1,(v_objspace+$C0+obFrame).w ; set OVER object to correct frame
0001690E 4238 FE1A                  		clr.b	(f_timeover).w
00016912                            
00016912                            loc_138C2:
00016912                            		;music	bgm_TimeOver,0,0,0	; play time over music
0001691C 7003                       		moveq	#3,d0
0001691E 4EF9 0000 1798             		jmp	(AddPLC).l	; load game over patterns
00016924                            		
00016924                            ; ===========================================================================
00016924                            
00016924                            loc_138D4:
00016924 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0001692A 4A38 FE1A                  		tst.b	(f_timeover).w	; is TIME OVER tag set?
0001692E 6700                       		beq.s	locret_13900	; if not, branch
00016930 317C 0000 003A             		move.w	#0,$3A(a0)
00016936 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load TIME object
0001693C 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
00016942 11FC 0002 D09A             		move.b	#2,(v_objspace+$80+obFrame).w
00016948 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
0001694E 60C2                       		bra.s	loc_138C2
00016950                            		
00016950                            
00016950                            ; ===========================================================================
00016950                            
00016950                            locret_13900:
00016950 4E75                       		rts	
00016952                            ; End of function GameOver
00016952                            
00016952                            ; ---------------------------------------------------------------------------
00016952                            ; Sonic	when the level is restarted
00016952                            ; ---------------------------------------------------------------------------
00016952                            
00016952                            Sonic_ResetLevel:; Routine 8
00016952 4A68 003A                  		tst.w	$3A(a0)
00016956 6700                       		beq.s	locret_13914
00016958 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0001695C 6600                       		bne.s	locret_13914
0001695E 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
00016964                            
00016964                            	locret_13914:
00016964 4E75                       		rts	
00016964 4E75                       		rts	
00016966                            		include	"_incObj\Sonic Loops.asm"
00016966                            ; ---------------------------------------------------------------------------
00016966                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00016966                            ; ---------------------------------------------------------------------------
00016966                            
00016966                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016966                            
00016966                            
00016966                            Sonic_Loops:
00016966 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; is level SLZ ?
0001696C 6700                       		beq.s	@isstarlight	; if yes, branch
0001696E 4A38 FE10                  		tst.b	(v_zone).w	; is level GHZ ?
00016972 6600 0000                  		bne.w	@noloops	; if not, branch
00016976                            
00016976                            	@isstarlight:
00016976 3028 000C                  		move.w	obY(a0),d0
0001697A E248                       		lsr.w	#1,d0
0001697C 0240 0380                  		andi.w	#$380,d0
00016980 1228 0008                  		move.b	obX(a0),d1
00016984 0241 007F                  		andi.w	#$7F,d1
00016988 D041                       		add.w	d1,d0
0001698A 43F8 A400                  		lea	(v_lvllayout).w,a1
0001698E 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00016992                            
00016992 B238 F7AE                  		cmp.b	(v_256roll1).w,d1 ; is Sonic on a "roll tunnel" tile?
00016996 6700 F918                  		beq.w	Sonic_ChkRoll	; if yes, branch
0001699A B238 F7AF                  		cmp.b	(v_256roll2).w,d1
0001699E 6700 F910                  		beq.w	Sonic_ChkRoll
000169A2                            
000169A2 B238 F7AC                  		cmp.b	(v_256loop1).w,d1 ; is Sonic on a loop tile?
000169A6 6700                       		beq.s	@chkifleft	; if yes, branch
000169A8 B238 F7AD                  		cmp.b	(v_256loop2).w,d1
000169AC 6700                       		beq.s	@chkifinair
000169AE 08A8 0006 0001             		bclr	#6,obRender(a0) ; return Sonic to high plane
000169B4 4E75                       		rts	
000169B6                            ; ===========================================================================
000169B6                            
000169B6                            @chkifinair:
000169B6 0828 0001 0022             		btst	#1,obStatus(a0)	; is Sonic in the air?
000169BC 6700                       		beq.s	@chkifleft	; if not, branch
000169BE                            
000169BE 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
000169C4 4E75                       		rts	
000169C6                            ; ===========================================================================
000169C6                            
000169C6                            @chkifleft:
000169C6 3428 0008                  		move.w	obX(a0),d2
000169CA 0C02 002C                  		cmpi.b	#$2C,d2
000169CE 6400                       		bcc.s	@chkifright
000169D0                            
000169D0 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
000169D6 4E75                       		rts	
000169D8                            ; ===========================================================================
000169D8                            
000169D8                            @chkifright:
000169D8 0C02 00E0                  		cmpi.b	#$E0,d2
000169DC 6500                       		bcs.s	@chkangle1
000169DE                            
000169DE 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
000169E4 4E75                       		rts	
000169E6                            ; ===========================================================================
000169E6                            
000169E6                            @chkangle1:
000169E6 0828 0006 0001             		btst	#6,obRender(a0) ; is Sonic on low plane?
000169EC 6600                       		bne.s	@chkangle2	; if yes, branch
000169EE                            
000169EE 1228 0026                  		move.b	obAngle(a0),d1
000169F2 6700                       		beq.s	@done
000169F4 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upside-down?
000169F8 6200                       		bhi.s	@done		; if yes, branch
000169FA 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
00016A00 4E75                       		rts	
00016A02                            ; ===========================================================================
00016A02                            
00016A02                            @chkangle2:
00016A02 1228 0026                  		move.b	obAngle(a0),d1
00016A06 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upright?
00016A0A 6300                       		bls.s	@done		; if yes, branch
00016A0C 08A8 0006 0001             		bclr	#6,obRender(a0)	; send Sonic to	high plane
00016A12                            
00016A12                            @noloops:
00016A12                            @done:
00016A12 4E75                       		rts	
00016A14                            ; End of function Sonic_Loops
00016A14                            ; End of function Sonic_Loops
00016A14                            		include	"_incObj\Sonic Animate.asm"
00016A14                            ; ---------------------------------------------------------------------------
00016A14                            ; Subroutine to	animate	Sonic's sprites
00016A14                            ; ---------------------------------------------------------------------------
00016A14                            
00016A14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016A14                            
00016A14                            
00016A14                            Sonic_Animate:				; XREF: Obj01_Control; et al
00016A14 43F9 0000 0000             		lea	(Ani_Sonic).l,a1
00016A1A 4A38 FE19                          tst.b	(Super_Sonic_flag).w	    ; is sonic super?
00016A1E 6700                       		beq.s	 Sonic_Animatecont	    ; if not, branch
00016A20 43F9 0000 0000             		lea	(Ani_SuperSonic).l,a1	
00016A26                            
00016A26                            Sonic_Animatecont:	
00016A26 7000                       		moveq	#0,d0
00016A28 1028 001C                  		move.b	obAnim(a0),d0
00016A2C B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
00016A30 6700                       		beq.s	@do		; if not, branch
00016A32 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
00016A36 4228 001B                  		clr.b	obAniFrame(a0) ; reset animation
00016A3A 4228 001E                  		clr.b	obTimeFrame(a0) ; reset frame duration
00016A3E                            		
00016A3E 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag	;Mercury Pushing While Walking Fix	;Mercury Constants
00016A44                            
00016A44                            	@do:
00016A44 D040                       		add.w	d0,d0
00016A46 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00016A4A 1011                       		move.b	(a1),d0
00016A4C 6B00                       		bmi.s	@walkrunroll	; if animation is walk/run/roll/jump, branch
00016A4E 1228 0022                  		move.b	obStatus(a0),d1
00016A52 0201 0001                  		andi.b	#1,d1
00016A56 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016A5C 8328 0001                  		or.b	d1,obRender(a0)
00016A60 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
00016A64 6A00                       		bpl.s	@delay		; if time remains, branch
00016A66 1140 001E                  		move.b	d0,obTimeFrame(a0) ; load frame duration
00016A6A                            
00016A6A                            @loadframe:
00016A6A 7200                       		moveq	#0,d1
00016A6C 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
00016A70 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00016A74 0C00 00FD                  		cmp.b	#$FD,d0				; MJ: is it a flag from FD to FF?
00016A78 6400 0000                  		bhs		@end_FF				; MJ: if so, branch to flag routines
00016A7C                            
00016A7C                            	@next:
00016A7C 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
00016A80 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
00016A84                            
00016A84                            	@delay:
00016A84 4E75                       		rts	
00016A86                            ; ===========================================================================
00016A86                            
00016A86                            @end_FF:
00016A86 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00016A88 6600                       		bne.s	@end_FE		; if not, branch
00016A8A 4228 001B                  		clr.b	obAniFrame(a0) ; restart the animation
00016A8E 1029 0001                  		move.b	1(a1),d0	; read sprite number
00016A92 60E8                       		bra.s	@next
00016A94                            ; ===========================================================================
00016A94                            
00016A94                            @end_FE:
00016A94 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00016A96 6600                       		bne.s	@end_FD		; if not, branch
00016A98 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00016A9C 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
00016AA0 9200                       		sub.b	d0,d1
00016AA2 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00016AA6 60D4                       		bra.s	@next
00016AA8                            ; ===========================================================================
00016AA8                            
00016AA8                            @end_FD:
00016AA8 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00016AAA 6600                       		bne.s	@end		; if not, branch
00016AAC 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
00016AB2                            
00016AB2                            	@end:
00016AB2 4E75                       		rts	
00016AB4                            ; ===========================================================================
00016AB4                            
00016AB4                            @walkrunroll:
00016AB4 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
00016AB8 6ACA                       		bpl.s	@delay		; if time remains, branch
00016ABA 5200                       		addq.b	#1,d0		; is animation walking/running?
00016ABC 6600 0000                  		bne.w	@rolljump	; if not, branch
00016AC0 7200                       		moveq	#0,d1
00016AC2 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
00016AC6 6B00                       		bmi.s	@ble 			; better handling of angles
00016AC8 6700                       		beq.s	@ble
00016ACA 5300                       		subq.b	#1,d0
00016ACC                            
00016ACC                            	@ble:																
00016ACC 1428 0022                  		move.b	obStatus(a0),d2
00016AD0 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00016AD4 6600                       		bne.s	@flip		; if yes, branch
00016AD6 4600                       		not.b	d0		; reverse angle
00016AD8                            
00016AD8                            	@flip:
00016AD8 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00016ADC 6A00                       		bpl.s	@noinvert	; if angle is $0-$7F, branch
00016ADE 7203                       		moveq	#3,d1
00016AE0                            
00016AE0                            	@noinvert:
00016AE0 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016AE6 B302                       		eor.b	d1,d2
00016AE8 8528 0001                  		or.b	d2,obRender(a0)
00016AEC 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing something?	;Mercury Constants
00016AF2 6600 0000                  		bne.w	@push		; if yes, branch
00016AF6                            
00016AF6 E808                       		lsr.b	#4,d0		; divide angle by $10
00016AF8 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00016AFC 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
00016B00 6A00                       		bpl.s	@nomodspeed
00016B02 4442                       		neg.w	d2		; modulus speed
00016B04                            
00016B04                            	@nomodspeed:
00016B04 4A38 FE19                  		tst.b	(Super_Sonic_flag).w		; is sonic super?
00016B08 6700                       		beq.s	@cont		; if not, branch
00016B0A 43F9 0000 0000             		lea	(SuperSonAni_Run).l,a1 ; use	running	animation
00016B10 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00016B14 6400                       		bcc.s	@running	; if yes, branch
00016B16 43F9 0000 0000             		lea	(SuperSonAni_Walk).l,a1 ; use walking animation
00016B1C                            	
00016B1C                            	@cont:	
00016B1C 43F9 0000 0000             		lea	(SonAni_MaxRun).l,a1 ; use Dashing animation
00016B22 0C42 0A00                  		cmpi.w	#$A00,d2	; is Sonic at Dashing speed?
00016B26 6400                       		bcc.s	@maxrunning	; if yes, branch
00016B28                            
00016B28 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00016B2E 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00016B32 6400                       		bcc.s	@running	; if yes, branch
00016B34                            
00016B34 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00016B3A                            
00016B3A                            	@running:
00016B3A D000                       		add.b	d0,d0
00016B3C D000                       		add.b	d0,d0
00016B3E 1600                       		move.b	d0,d3
00016B40 4442                       		neg.w	d2
00016B42 0642 0780                  		addi.w	#$780,d2
00016B46 6A00                       		bpl.s	@belowmax
00016B48 7400                       		moveq	#0,d2		; max animation speed
00016B4A 6000                       		bra.s	@belowmax
00016B4C                            
00016B4C                            	@maxrunning:
00016B4C D000                       		add.b d0,d0
00016B4E 1600                       		move.b d0,d3
00016B50 4442                       		neg.w d2
00016B52 0642 0800                  		addi.w #$800, d2
00016B56 6A00                       		bpl.s @belowmax
00016B58 7400                       		moveq #0, d2 
00016B5A                            
00016B5A                            	@belowmax:
00016B5A E04A                       		lsr.w	#8,d2
00016B5C 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
00016B60 6100 FF08                  		bsr.w	@loadframe
00016B64 D728 001A                  		add.b	d3,obFrame(a0)	; modify frame number
00016B68 4E75                       		rts	
00016B6A                            ; ===========================================================================
00016B6A                            
00016B6A                            @rolljump:
00016B6A 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00016B6C 6600                       		bne.s	@push		; if not, branch
00016B6E 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
00016B72 6A00                       		bpl.s	@nomodspeed2
00016B74 4442                       		neg.w	d2
00016B76                            
00016B76                            	@nomodspeed2:
00016B76 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00016B7C 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00016B80 6400                       		bcc.s	@rollfast	; if yes, branch
00016B82 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00016B88                            
00016B88                            	@rollfast:
00016B88 4442                       		neg.w	d2
00016B8A 0642 0400                  		addi.w	#$400,d2
00016B8E 6A00                       		bpl.s	@belowmax2
00016B90 7400                       		moveq	#0,d2
00016B92                            
00016B92                            	@belowmax2:
00016B92 E04A                       		lsr.w	#8,d2
00016B94 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
00016B98 1228 0022                  		move.b	obStatus(a0),d1
00016B9C 0201 0001                  		andi.b	#1,d1
00016BA0 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016BA6 8328 0001                  		or.b	d1,obRender(a0)
00016BAA 6000 FEBE                  		bra.w	@loadframe
00016BAE                            ; ===========================================================================
00016BAE                            
00016BAE                            @push:
00016BAE 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
00016BB2 6B00                       		bmi.s	@negspeed
00016BB4 4442                       		neg.w	d2
00016BB6                            
00016BB6                            	@negspeed:
00016BB6 0642 0800                  		addi.w	#$800,d2
00016BBA 6A00                       		bpl.s	@belowmax3	
00016BBC 7400                       		moveq	#0,d2
00016BBE                            
00016BBE                            	@belowmax3:
00016BBE EC4A                       		lsr.w	#6,d2
00016BC0 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
00016BC4 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00016BCA 1228 0022                  		move.b	obStatus(a0),d1
00016BCE 0201 0001                  		andi.b	#1,d1
00016BD2 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016BD8 8328 0001                  		or.b	d1,obRender(a0)
00016BDC 6000 FE8C                  		bra.w	@loadframe
00016BE0                            
00016BE0                            ; End of function Sonic_Animate
00016BE0                            ; End of function Sonic_Animate
00016BE0                            		include	"_anim\Sonic.asm"
00016BE0                            ; ---------------------------------------------------------------------------
00016BE0                            ; Animation script - Sonic
00016BE0                            ; ---------------------------------------------------------------------------
00016BE0                            Ani_Sonic:
00016BE0                            
00016BE0 0000                       ptr_Walk:	dc.w SonAni_Walk-Ani_Sonic
00016BE2 0000                       ptr_Run:	dc.w SonAni_Run-Ani_Sonic
00016BE4 0000                       ptr_Roll:	dc.w SonAni_Roll-Ani_Sonic
00016BE6 0000                       ptr_Roll2:	dc.w SonAni_Roll2-Ani_Sonic
00016BE8 0000                       ptr_Push:	dc.w SonAni_Push-Ani_Sonic
00016BEA 0000                       ptr_Wait:	dc.w SonAni_Wait-Ani_Sonic
00016BEC 0000                       ptr_Balance:	dc.w SonAni_Balance-Ani_Sonic
00016BEE 0000                       ptr_LookUp:	dc.w SonAni_LookUp-Ani_Sonic
00016BF0 0000                       ptr_Duck:	dc.w SonAni_Duck-Ani_Sonic
00016BF2 0000                       ptr_Warp1:	dc.w SonAni_Warp1-Ani_Sonic
00016BF4 0000                       ptr_Warp2:	dc.w SonAni_Warp2-Ani_Sonic
00016BF6 0000                       ptr_Warp3:	dc.w SonAni_Warp3-Ani_Sonic
00016BF8 0000                       ptr_Warp4:	dc.w SonAni_Warp4-Ani_Sonic
00016BFA 0000                       ptr_Stop:	dc.w SonAni_Stop-Ani_Sonic
00016BFC 0000                       ptr_Float1:	dc.w SonAni_Float1-Ani_Sonic
00016BFE 0000                       ptr_Float2:	dc.w SonAni_Float2-Ani_Sonic
00016C00 0000                       ptr_Spring:	dc.w SonAni_Spring-Ani_Sonic
00016C02 0000                       ptr_Hang:	dc.w SonAni_Hang-Ani_Sonic
00016C04 0000                       ptr_Leap1:	dc.w SonAni_Leap1-Ani_Sonic
00016C06 0000                       ptr_Leap2:	dc.w SonAni_Leap2-Ani_Sonic
00016C08 0000                       ptr_Surf:	dc.w SonAni_Surf-Ani_Sonic
00016C0A 0000                       ptr_GetAir:	dc.w SonAni_GetAir-Ani_Sonic
00016C0C 0000                       ptr_Burnt:	dc.w SonAni_Burnt-Ani_Sonic
00016C0E 0000                       ptr_Drown:	dc.w SonAni_Drown-Ani_Sonic
00016C10 0000                       ptr_Death:	dc.w SonAni_Death-Ani_Sonic
00016C12 0000                       ptr_Hurt:	dc.w SonAni_Hurt-Ani_Sonic
00016C14 0000                       ptr_WaterSlide:	dc.w SonAni_WaterSlide-Ani_Sonic
00016C16 0000                       ptr_Null:	dc.w SonAni_Null-Ani_Sonic
00016C18 0000                       ptr_Float3:	dc.w SonAni_Float3-Ani_Sonic
00016C1A 0000                       ptr_Float4:	dc.w SonAni_Float4-Ani_Sonic
00016C1C 0000                       ptr_MaxRun:	dc.w SonAni_MaxRun-Ani_Sonic
00016C1E 0000                       ptr_Spindash:	dc.w SonAni_SpinDash-Ani_Sonic ;1F
00016C20 0000                       ptr_Hurt2:	dc.w SonAni_Hurt2-Ani_Sonic
00016C22 0000                       ptr_GetUp:	dc.w SonAni_GetUp-Ani_Sonic
00016C24 0000                       ptr_Blink:	dc.w SonAni_Blink-Ani_Sonic
00016C26 0000                       ptr_Sit:	dc.w SonAni_Sit-Ani_Sonic
00016C28 0000                       ptr_Peelout:	dc.w SonAni_Peelout-Ani_Sonic
00016C2A 0000                       ptr_Hang2:	dc.w SonAni_Hang2-Ani_Sonic
00016C2C 0000                       ptr_GetAir2:	dc.w SonAni_GetAir2-Ani_Sonic
00016C2E 0000                       ptr_Transform:	dc.w SonAni_Transform-Ani_Sonic
00016C30                            
00016C30 FF10 1112 1314 150E 0FFF+  SonAni_Walk:	dc.b $FF, fr_walk13, fr_walk14,	fr_walk15, fr_walk16, fr_walk17, fr_walk18, fr_walk11, fr_walk12, afEnd, afEnd, afEnd, afEnd
00016C3E 00                         		even
00016C3E FF2E 2F30 3132 3334 35FF+  SonAni_Run:	dc.b $FF, fr_run11,  fr_run12,  fr_run13,  fr_run14, fr_run15,  fr_run16,  fr_run17,  fr_run18, afEnd, afEnd, afEnd, afEnd
00016C4C 00                         		even
00016C4C FE5E 5F60 6162 66          SonAni_Roll:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016C53 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
00016C5A 00                         		even
00016C5A FE5E 5F60 6162 66          SonAni_Roll2:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016C61 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
00016C68 00                         		even
00016C68 0D89 8A8B 8C8D 8E8F 90FF+  SonAni_Push:	dc.b $D,  fr_push1,  fr_push2,  fr_push3,  fr_push4, fr_push5,  fr_push6,  fr_push7,  fr_push8, afEnd, afEnd, afEnd, afEnd
00016C76 00                         		even
00016C76                            SonAni_Wait:	
00016C76 0501 0101 0101 0101 0102+  		dc.b   5,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016C85 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016C94 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016CA3 0203 0303 0404 0505 0506+  		dc.b   2,  3,  3,  3,  4,  4,  5,  5,  5,  6,  6,  6,  7,  7,  7
00016CB2 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
00016CC1 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
00016CD0 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
00016CDF 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
00016CEE 0808 0909 0A0A FE04        		dc.b   8,  8,  9,  9,  $A, $A, $FE, 4
00016CF6                            		even
00016CF6 0F72 7374 75FF             SonAni_Balance:	dc.b $F, fr_balance1, fr_balance2, fr_balance3, fr_balance4, afEnd
00016CFC                            		even
00016CFC 030C 0DFE 01               SonAni_LookUp:	dc.b $3, fr_lookup1, fr_lookup2, afBack, 1
00016D02 00                         		even
00016D02 0270 71FE 01               SonAni_Duck:	dc.b $2, fr_duck2, fr_duck, afBack, 1
00016D08 00                         		even
00016D08 3F67 FF                    SonAni_Warp1:	dc.b $3F, fr_warp1, afEnd
00016D0C 00                         		even
00016D0C 3F68 FF                    SonAni_Warp2:	dc.b $3F, fr_warp2, afEnd
00016D10 00                         		even
00016D10 3F69 FF                    SonAni_Warp3:	dc.b $3F, fr_warp3, afEnd
00016D14 00                         		even
00016D14 3F6A FF                    SonAni_Warp4:	dc.b $3F, fr_warp4, afEnd
00016D18 00                         		even
00016D18 026B 6C6C 6D6D 6E6E FD00   SonAni_Stop:	dc.b 2,	fr_stop1, fr_stop2, fr_stop2, fr_stop3, fr_stop3, fr_stop4, fr_stop4, $FD,  0
00016D22                            		even
00016D22 077C 82FE 02               SonAni_Float1:	dc.b 7,	fr_float1, fr_float4, afBack, 2
00016D28 00                         		even
00016D28 037C 7D7E 7F80 817B FF     SonAni_Float2:	dc.b 3,	fr_float1, fr_float7, fr_float2, fr_float8, fr_float5, fr_float3, fr_float6, afEnd
00016D32 00                         		even
00016D32 0783 8483 8483 84FD 00     SonAni_Spring:	dc.b 7, fr_spring, fr_spring2, fr_spring, fr_spring2, fr_spring, fr_spring2, afChange, id_Walk
00016D3C 00                         		even
00016D3C 0485 86FF                  SonAni_Hang:	dc.b 4,	fr_hang1, fr_hang2, afEnd
00016D40                            		even
00016D40 036F 8888 8888 8888 6F87+  SonAni_Leap1:	dc.b $3, fr_leap3, fr_leap2, fr_leap2, fr_leap2, fr_leap2, fr_leap2, fr_leap2, fr_leap3, fr_leap1, afBack, 1
00016D4C                            		even
00016D4C 0D87 FD00                  SonAni_Leap2:	dc.b $D, fr_leap1, afChange, id_Leap1
00016D50                            		even
00016D50 3F91 FF                    SonAni_Surf:	dc.b $3F, fr_surf, afEnd
00016D54 00                         		even
00016D54 0B95 FD00                  SonAni_GetAir:	dc.b $B, fr_getair, afChange, id_GetAir2
00016D58                            		even
00016D58 2092 FF                    SonAni_Burnt:	dc.b $20, fr_burnt, afEnd
00016D5C 00                         		even
00016D5C 2F93 FF                    SonAni_Drown:	dc.b $2F, fr_drown, afEnd
00016D60 00                         		even
00016D60 0394 FF                    SonAni_Death:	dc.b 3,	fr_death, afEnd
00016D64 00                         		even
00016D64 0396 FF                    SonAni_Hurt:	dc.b 3,	fr_injury, afEnd
00016D68 00                         		even
00016D68                            SonAni_WaterSlide:
00016D68 0796 97FF                  		dc.b 7, fr_injury, fr_waterslide, afEnd
00016D6C                            		even
00016D6C 7700 FD00                  SonAni_Null:	dc.b $77, fr_null, afChange, id_Walk
00016D70                            		even
00016D70 037C 7E80 817B FF          SonAni_Float3:	dc.b 3,	fr_float1, fr_float2, fr_float5, fr_float3, fr_float6, afEnd
00016D78 00                         		even
00016D78 037C FD00                  SonAni_Float4:	dc.b 3,	fr_float1, afChange, id_Walk
00016D7C                            		even
00016D7C FF4E 4F50 51FF FFFF FFFF+  SonAni_MaxRun:  dc.b $FF, fr_peelout11, fr_peelout12, fr_peelout13, fr_peelout14, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd
00016D8A 00                         		even
00016D8A 009B 9C9B 9D9B 9E9B 9F9B+  SonAni_SpinDash: dc.b 0, fr_Spindash1, fr_spindash2, fr_spindash1, fr_spindash3, fr_spindash1, fr_spindash4, fr_spindash1, fr_spindash5, fr_spindash1, fr_spindash6, afEnd
00016D96                            		even
00016D96 0298 9699 FF               SonAni_Hurt2:	dc.b 2, fr_skele1, fr_injury, fr_skele2, afEnd	
00016D9C 00                         		even
00016D9C 030B FD00                  SonAni_GetUp:	dc.b 3, $B,$FD,  0
00016DA0                            		even
00016DA0 0102 FD00                  SonAni_Blink:	dc.b   1,  2,$FD,  0
00016DA4                            		even
00016DA4 0808 0909 0A0A 09FE 05     SonAni_Sit:	dc.b   8, 8, 9, 9, $A, $A,  9, $FE, 5
00016DAE 00                         		even
00016DAE 000E 0E0E 0E0E 0E0F 0F     SonAni_Peelout: dc.b 	0, $E, $E, $E, $E, $E, $E, $F, $F
00016DB7 0F0F 1010 1111 1213        		dc.b	$F, $F, $10, $10, $11, $11, $12, $13
00016DBF 1415 2E2F 3031 32          		dc.b	$14, $15, $2E, $2F, $30, $31, $32
00016DC6 3334 35                    		dc.b	$33, $34, $35
00016DC9 4E4F 5051 FE04 FE          		dc.b	$4E, $4F, $50,  $51, -2, 4, $FE
00016DD0                            		even
00016DD0 1977 78FF                  SonAni_Hang2:	dc.b $19, fr_vhang1, fr_vhang2, $FF	
00016DD4                            		even
00016DD4 0576 FD00                  SonAni_GetAir2: dc.b $5, fr_getair2, afChange, id_Roll
00016DD8                            		even
00016DD8                            SonAni_Transform:
00016DD8 02A1 A1A2 A3A3 A4A4 A4A5   				dc.b 2, $A1,$A1,$A2,$A3,$A3,$A4,$A4,$A4,$A5
00016DE2 A6A5 A7A7 A9A8 A9A8 A9A8+  		dc.b	$A6,$A5,$A7,$A7,$A9,$A8,$A9,$A8,$A9,$A8, afchange, id_Walk
00016DEE                            		even
00016DEE                            
00016DEE =00000000                  id_Walk:	equ (ptr_Walk-Ani_Sonic)/2	; 0
00016DEE =00000001                  id_Run:		equ (ptr_Run-Ani_Sonic)/2	; 1
00016DEE =00000002                  id_Roll:	equ (ptr_Roll-Ani_Sonic)/2	; 2
00016DEE =00000003                  id_Roll2:	equ (ptr_Roll2-Ani_Sonic)/2	; 3
00016DEE =00000004                  id_Push:	equ (ptr_Push-Ani_Sonic)/2	; 4
00016DEE =00000005                  id_Wait:	equ (ptr_Wait-Ani_Sonic)/2	; 5
00016DEE =00000006                  id_Balance:	equ (ptr_Balance-Ani_Sonic)/2	; 6
00016DEE =00000007                  id_LookUp:	equ (ptr_LookUp-Ani_Sonic)/2	; 7
00016DEE =00000008                  id_Duck:	equ (ptr_Duck-Ani_Sonic)/2	; 8
00016DEE =00000009                  id_Warp1:	equ (ptr_Warp1-Ani_Sonic)/2	; 9
00016DEE =0000000A                  id_Warp2:	equ (ptr_Warp2-Ani_Sonic)/2	; $A
00016DEE =0000000B                  id_Warp3:	equ (ptr_Warp3-Ani_Sonic)/2	; $B
00016DEE =0000000C                  id_Warp4:	equ (ptr_Warp4-Ani_Sonic)/2	; $C
00016DEE =0000000D                  id_Stop:	equ (ptr_Stop-Ani_Sonic)/2	; $D
00016DEE =0000000E                  id_Float1:	equ (ptr_Float1-Ani_Sonic)/2	; $E
00016DEE =0000000F                  id_Float2:	equ (ptr_Float2-Ani_Sonic)/2	; $F
00016DEE =00000010                  id_Spring:	equ (ptr_Spring-Ani_Sonic)/2	; $10
00016DEE =00000011                  id_Hang:	equ (ptr_Hang-Ani_Sonic)/2	; $11
00016DEE =00000012                  id_Leap1:	equ (ptr_Leap1-Ani_Sonic)/2	; $12
00016DEE =00000013                  id_Leap2:	equ (ptr_Leap2-Ani_Sonic)/2	; $13
00016DEE =00000014                  id_Surf:	equ (ptr_Surf-Ani_Sonic)/2	; $14
00016DEE =00000015                  id_GetAir:	equ (ptr_GetAir-Ani_Sonic)/2	; $15
00016DEE =00000016                  id_Burnt:	equ (ptr_Burnt-Ani_Sonic)/2	; $16
00016DEE =00000017                  id_Drown:	equ (ptr_Drown-Ani_Sonic)/2	; $17
00016DEE =00000018                  id_Death:	equ (ptr_Death-Ani_Sonic)/2	; $18
00016DEE =00000019                  id_Hurt:	equ (ptr_Hurt-Ani_Sonic)/2	; $19
00016DEE =0000001A                  id_WaterSlide:	equ (ptr_WaterSlide-Ani_Sonic)/2 ; $1A
00016DEE =0000001B                  id_Null:	equ (ptr_Null-Ani_Sonic)/2	; $1B
00016DEE =0000001C                  id_Float3:	equ (ptr_Float3-Ani_Sonic)/2	; $1C
00016DEE =0000001D                  id_Float4:	equ (ptr_Float4-Ani_Sonic)/2	; $1D
00016DEE =0000001E                  id_MaxRun:	equ (ptr_MaxRun-Ani_Sonic)/2	; $1E
00016DEE =0000001F                  id_Spindash:	equ (ptr_Spindash-Ani_Sonic)/2	; $1F
00016DEE =00000020                  id_Hurt2:	equ (ptr_Hurt2-Ani_Sonic)/2	; $21
00016DEE =00000021                  id_GetUp:	equ (ptr_GetUp-Ani_Sonic)/2	; $22
00016DEE =00000022                  id_Blink:	equ (ptr_Blink-Ani_Sonic)/2	; $23
00016DEE =00000023                  id_Sit:		equ (ptr_Sit-Ani_Sonic)/2	; $24
00016DEE =00000024                  id_Peelout:	equ (ptr_Peelout-Ani_Sonic)/2	; $25
00016DEE =00000025                  id_Hang2:		equ	(ptr_Hang2-Ani_Sonic)/2
00016DEE =00000026                  id_GetAir2:	equ (ptr_GetAir2-Ani_Sonic)/2
00016DEE =00000027                  id_Transform:		equ	(ptr_Transform-Ani_Sonic)/2
00016DEE =00000027                  id_Transform:		equ	(ptr_Transform-Ani_Sonic)/2
00016DEE                            		include	"_anim\Super Sonic.asm"		
00016DEE                            ; ---------------------------------------------------------------------------
00016DEE                            ; Animation script - Super Sonic
00016DEE                            ; ---------------------------------------------------------------------------
00016DEE                            Ani_SuperSonic:
00016DEE                            
00016DEE 0000                       ptr_SuperWalk:	dc.w SuperSonAni_Walk-Ani_SuperSonic
00016DF0 0000                       ptr_SuperRun:	dc.w SuperSonAni_Run-Ani_SuperSonic
00016DF2 0000                       ptr_SuperRoll:	dc.w SuperSonAni_Roll-Ani_SuperSonic
00016DF4 0000                       ptr_SuperRoll2:	dc.w SuperSonAni_Roll2-Ani_SuperSonic
00016DF6 0000                       ptr_SuperPush:	dc.w SuperSonAni_Push-Ani_SuperSonic
00016DF8 0000                       ptr_SuperWait:	dc.w SuperSonAni_Wait-Ani_SuperSonic
00016DFA 0000                       ptr_SuperBalance:	dc.w SuperSonAni_Balance-Ani_SuperSonic
00016DFC 0000                       ptr_SuperLookUp:	dc.w SuperSonAni_LookUp-Ani_SuperSonic
00016DFE 0000                       ptr_SuperDuck:	dc.w SuperSonAni_Duck-Ani_SuperSonic
00016E00 0000                       ptr_SuperWarp1:	dc.w SuperSonAni_Warp1-Ani_Sonic
00016E02 0000                       ptr_SuperWarp2:	dc.w SuperSonAni_Warp2-Ani_Sonic
00016E04 0000                       ptr_SuperWarp3:	dc.w SuperSonAni_Warp3-Ani_Sonic
00016E06 0000                       ptr_SuperWarp4:	dc.w SuperSonAni_Warp4-Ani_Sonic
00016E08 0000                       ptr_SuperStop:	dc.w SuperSonAni_Stop-Ani_SuperSonic
00016E0A 0000                       ptr_SuperFloat1:	dc.w SuperSonAni_Float1-Ani_SuperSonic
00016E0C 0000                       ptr_SuperFloat2:	dc.w SuperSonAni_Float2-Ani_SuperSonic
00016E0E 0000                       ptr_SuperSpring:	dc.w SuperSonAni_Spring-Ani_SuperSonic
00016E10 0000                       ptr_SuperHang:	dc.w SuperSonAni_Hang-Ani_SuperSonic
00016E12 0000                       ptr_SuperLeap1:	dc.w SuperSonAni_Leap1-Ani_SuperSonic
00016E14 0000                       ptr_SuperLeap2:	dc.w SuperSonAni_Leap2-Ani_SuperSonic
00016E16 0000                       ptr_SuperSurf:	dc.w SuperSonAni_Surf-Ani_SuperSonic
00016E18 0000                       ptr_SuperGetAir:	dc.w SuperSonAni_GetAir-Ani_SuperSonic
00016E1A 0000                       ptr_SuperBurnt:	dc.w SuperSonAni_Burnt-Ani_SuperSonic
00016E1C 0000                       ptr_SuperDrown:	dc.w SuperSonAni_Drown-Ani_SuperSonic
00016E1E 0000                       ptr_SuperDeath:	dc.w SuperSonAni_Death-Ani_SuperSonic
00016E20 0000                       ptr_SuperHurt:	dc.w SuperSonAni_Hurt-Ani_SuperSonic
00016E22 0000                       ptr_SuperWaterSlide:	dc.w SuperSonAni_WaterSlide-Ani_Sonic
00016E24 0000                       ptr_SuperNull:	dc.w SuperSonAni_Null-Ani_Sonic
00016E26 0000                       ptr_SuperFloat3:	dc.w SuperSonAni_Float3-Ani_SuperSonic
00016E28 0000                       ptr_SuperFloat4:	dc.w SuperSonAni_Float4-Ani_SuperSonic
00016E2A 0000                       ptr_SuperMaxRun:	dc.w SuperSonAni_MaxRun-Ani_SuperSonic
00016E2C 0000                       ptr_SuperSpindash:	dc.w SuperSonAni_SpinDash-Ani_Sonic ;1F
00016E2E 0000                       ptr_SuperHurt2:	dc.w SuperSonAni_Hurt2-Ani_Sonic
00016E30 0000                       ptr_SuperGetUp:	dc.w SuperSonAni_GetUp-Ani_Sonic
00016E32 0000                       ptr_SuperBlink:	dc.w SuperSonAni_Blink-Ani_SuperSonic
00016E34 0000                       ptr_SuperSit:	dc.w SuperSonAni_Sit-Ani_Sonic
00016E36 0000                       ptr_SuperPeelout:	dc.w SuperSonAni_Peelout-Ani_SuperSonic
00016E38 0000                       ptr_SuperHang2:	dc.w SuperSonAni_Hang2-Ani_SuperSonic
00016E3A                            
00016E3A                            
00016E3A FF10 1112 1314 150E 0FFF+  SuperSonAni_Walk:	dc.b $FF, fr_walk13, fr_walk14,	fr_walk15, fr_walk16, fr_walk17, fr_walk18, fr_walk11, fr_walk12, afEnd, afEnd, afEnd, afEnd
00016E48 00                         		even
00016E48 FFCD CECF D0CD CECF D0FF+  SuperSonAni_Run:	dc.b $FF, $CD,  $CE,  $CF,  $D0,  $CD,  $CE,  $CF,  $D0, afEnd, afEnd, afEnd, afEnd
00016E56 00                         		even
00016E56 FE5E 5F60 6162 66          SuperSonAni_Roll:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016E5D 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
00016E64 00                         		even
00016E64 FE5E 5F60 6162 66          SuperSonAni_Roll2:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016E6B 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
00016E72 00                         		even
00016E72 FD89 8A8B 8C8D 8E8F 90FF+  SuperSonAni_Push:	dc.b $FD,  fr_push1,  fr_push2,  fr_push3,  fr_push4, fr_push5,  fr_push6,  fr_push7,  fr_push8, afEnd, afEnd, afEnd, afEnd
00016E80 00                         		even
00016E80                            SuperSonAni_Wait:	
00016E80 05AA AAAB ABAC ACFE 06     		dc.b   5,  $AA, $AA, $AB, $AB, $AC, $AC, $FE, 6
00016E8A 00                         		even
00016E8A 0F72 7374 75FF             SuperSonAni_Balance:	dc.b $F, fr_balance1, fr_balance2, fr_balance3, fr_balance4, afEnd
00016E90                            		even
00016E90 030C 0DFE 01               SuperSonAni_LookUp:	dc.b $3, fr_lookup1, fr_lookup2, afBack, 1
00016E96 00                         		even
00016E96 0270 71FE 01               SuperSonAni_Duck:	dc.b $2, fr_duck2, fr_duck, afBack, 1
00016E9C 00                         		even
00016E9C 3F67 FF                    SuperSonAni_Warp1:	dc.b $3F, fr_warp1, afEnd
00016EA0 00                         		even
00016EA0 3F68 FF                    SuperSonAni_Warp2:	dc.b $3F, fr_warp2, afEnd
00016EA4 00                         		even
00016EA4 3F69 FF                    SuperSonAni_Warp3:	dc.b $3F, fr_warp3, afEnd
00016EA8 00                         		even
00016EA8 3F6A FF                    SuperSonAni_Warp4:	dc.b $3F, fr_warp4, afEnd
00016EAC 00                         		even
00016EAC 026B 6C6C 6D6D 6E6E FD00   SuperSonAni_Stop:	dc.b 2,	fr_stop1, fr_stop2, fr_stop2, fr_stop3, fr_stop3, fr_stop4, fr_stop4, $FD,  0
00016EB6                            		even
00016EB6 077C 82FE 02               SuperSonAni_Float1:	dc.b 7,	fr_float1, fr_float4, afBack, 2
00016EBC 00                         		even
00016EBC 037C 7D7E 7F80 817B FF     SuperSonAni_Float2:	dc.b 3,	fr_float1, fr_float7, fr_float2, fr_float8, fr_float5, fr_float3, fr_float6, afEnd
00016EC6 00                         		even
00016EC6 0783 8483 8483 84FD 00     SuperSonAni_Spring:	dc.b 7, fr_spring, fr_spring2, fr_spring, fr_spring2, fr_spring, fr_spring2, afChange, id_Walk
00016ED0 00                         		even
00016ED0 0485 86FF                  SuperSonAni_Hang:	dc.b 4,	fr_hang1, fr_hang2, afEnd
00016ED4                            		even
00016ED4 0F87 8787 FE01             SuperSonAni_Leap1:	dc.b $F, fr_leap1, fr_leap1, fr_leap1,	afBack, 1
00016EDA                            		even
00016EDA 0F87 88FE 01               SuperSonAni_Leap2:	dc.b $F, fr_leap1, fr_leap2, afBack, 1
00016EE0 00                         		even
00016EE0 3F91 FF                    SuperSonAni_Surf:	dc.b $3F, fr_surf, afEnd
00016EE4 00                         		even
00016EE4 0B95 9512 13FD 00          SuperSonAni_GetAir:	dc.b $B, fr_getair, fr_getair, fr_walk15, fr_walk16, afChange, id_Walk
00016EEC 00                         		even
00016EEC 2092 FF                    SuperSonAni_Burnt:	dc.b $20, fr_burnt, afEnd
00016EF0 00                         		even
00016EF0 2F93 FF                    SuperSonAni_Drown:	dc.b $2F, fr_drown, afEnd
00016EF4 00                         		even
00016EF4 0394 FF                    SuperSonAni_Death:	dc.b 3,	fr_death, afEnd
00016EF8 00                         		even
00016EF8 0396 FF                    SuperSonAni_Hurt:	dc.b 3,	fr_injury, afEnd
00016EFC 00                         		even
00016EFC                            SuperSonAni_WaterSlide:
00016EFC 0796 97FF                  		dc.b 7, fr_injury, fr_waterslide, afEnd
00016F00                            		even
00016F00 7700 FD00                  SuperSonAni_Null:	dc.b $77, fr_null, afChange, id_Walk
00016F04                            		even
00016F04 037C 7E80 817B FF          SuperSonAni_Float3:	dc.b 3,	fr_float1, fr_float2, fr_float5, fr_float3, fr_float6, afEnd
00016F0C 00                         		even
00016F0C 037C FD00                  SuperSonAni_Float4:	dc.b 3,	fr_float1, afChange, id_Walk
00016F10                            		even
00016F10 FFDD DEDD DEFF FFFF FFFF+  SuperSonAni_MaxRun:  dc.b $FF, $DD, $DE, $DD, $DE, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd
00016F1E 00                         		even
00016F1E 009B 9C9B 9D9B 9E9B 9F9B+  SuperSonAni_SpinDash: dc.b 0, fr_Spindash1, fr_spindash2, fr_spindash1, fr_spindash3, fr_spindash1, fr_spindash4, fr_spindash1, fr_spindash5, fr_spindash1, fr_spindash6, afEnd
00016F2A                            		even
00016F2A 0298 9699 FF               SuperSonAni_Hurt2:	dc.b 2, fr_skele1, fr_injury, fr_skele2, afEnd	
00016F30 00                         		even
00016F30 030B FD00                  SuperSonAni_GetUp:	dc.b 3, $B,$FD,  0
00016F34                            		even
00016F34 0102 FD00                  SuperSonAni_Blink:	dc.b   1,  2,$FD,  0
00016F38                            		even
00016F38 0808 0909 0A0A 09FE 05     SuperSonAni_Sit:	dc.b   8, 8, 9, 9, $A, $A,  9, $FE, 5
00016F42 00                         		even
00016F42 000E 0E0E 0E0E 0E0F 0F     SuperSonAni_Peelout: dc.b 	0, $E, $E, $E, $E, $E, $E, $F, $F
00016F4B 0F0F 1010 1111 1213        		dc.b	$F, $F, $10, $10, $11, $11, $12, $13
00016F53 1415 2E2F 3031 32          		dc.b	$14, $15, $2E, $2F, $30, $31, $32
00016F5A 3334 35                    		dc.b	$33, $34, $35
00016F5D 4E4F 5051 FE04 FE          		dc.b	$4E, $4F, $50,  $51, -2, 4, $FE
00016F64                            		even
00016F64 1077 78FF                  SuperSonAni_Hang2:	dc.b $10, fr_vhang1, fr_vhang2, $FF	
00016F68                            		even
00016F68                            		
00016F68 =FFFFFEF9                  id_SuperWalk:	equ (ptr_Walk-Ani_SuperSonic)/2	; 0
00016F68 =FFFFFEFA                  id_SuperRun:		equ (ptr_Run-Ani_SuperSonic)/2	; 1
00016F68 =FFFFFEFB                  id_SuperRoll:	equ (ptr_Roll-Ani_SuperSonic)/2	; 2
00016F68 =FFFFFEFC                  id_SuperRoll2:	equ (ptr_Roll2-Ani_SuperSonic)/2	; 3
00016F68 =FFFFFEFD                  id_SuperPush:	equ (ptr_Push-Ani_SuperSonic)/2	; 4
00016F68 =FFFFFEFE                  id_SuperWait:	equ (ptr_Wait-Ani_SuperSonic)/2	; 5
00016F68 =FFFFFEFF                  id_SuperBalance:	equ (ptr_Balance-Ani_SuperSonic)/2	; 6
00016F68 =FFFFFF00                  id_SuperLookUp:	equ (ptr_LookUp-Ani_SuperSonic)/2	; 7
00016F68 =FFFFFF01                  id_SuperDuck:	equ (ptr_Duck-Ani_SuperSonic)/2	; 8
00016F68 =FFFFFF06                  id_SuperStop:	equ (ptr_Stop-Ani_SuperSonic)/2	; $D
00016F68 =FFFFFF09                  id_SuperSpring:	equ (ptr_Spring-Ani_SuperSonic)/2	; $10
00016F68 =FFFFFF0A                  id_SuperHang:	equ (ptr_Hang-Ani_SuperSonic)/2	; $11
00016F68 =FFFFFF17                  id_SuperMaxRun:	equ (ptr_MaxRun-Ani_SuperSonic)/2	; $1E
00016F68 =FFFFFF18                  id_SuperSpindash:	equ (ptr_Spindash-Ani_SuperSonic)/2	; $1F
00016F68 =FFFFFF1D                  id_SuperPeelout:	equ (ptr_Peelout-Ani_SuperSonic)/2	; $25
00016F68 =FFFFFF1E                  id_SuperHang2:		equ	(ptr_Hang2-Ani_SuperSonic)/2
00016F68 =FFFFFF1E                  id_SuperHang2:		equ	(ptr_Hang2-Ani_SuperSonic)/2
00016F68                            		include	"_incObj\Sonic LoadGfx.asm"
00016F68                            ; ---------------------------------------------------------------------------
00016F68                            ; Sonic	graphics loading subroutine
00016F68                            ; ---------------------------------------------------------------------------
00016F68                            
00016F68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016F68                            
00016F68                            
00016F68                            Sonic_LoadGfx:			; XREF: Obj01_Control; et al
00016F68 7000                       		moveq	#0,d0
00016F6A 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00016F6E B038 F766                  		cmp.b	($FFFFF766).w,d0
00016F72 6700                       		beq.s	locret_13C96
00016F74 11C0 F766                  		move.b	d0,($FFFFF766).w
00016F78 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
00016F7E D040                       		add.w	d0,d0
00016F80 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016F84 7A00                       		moveq	#0,d5
00016F86 1A1A                       		move.b	(a2)+,d5
00016F88 5345                       		subq.w	#1,d5
00016F8A 6B00                       		bmi.s	locret_13C96
00016F8C 383C F000                  		move.w	#$F000,d4
00016F90 2C3C 0000 0000             		move.l	#Art_Sonic,d6
00016F96                            
00016F96                            SPLC_ReadEntry:
00016F96 7200                       		moveq	#0,d1
00016F98 121A                       		move.b	(a2)+,d1
00016F9A E149                       		lsl.w	#8,d1
00016F9C 121A                       		move.b	(a2)+,d1
00016F9E 3601                       		move.w	d1,d3
00016FA0 E04B                       		lsr.w	#8,d3
00016FA2 0243 00F0                  		andi.w	#$F0,d3
00016FA6 0643 0010                  		addi.w	#$10,d3
00016FAA 0241 0FFF                  		andi.w	#$FFF,d1
00016FAE EB89                       		lsl.l	#5,d1
00016FB0 D286                       		add.l	d6,d1
00016FB2 3404                       		move.w	d4,d2
00016FB4 D843                       		add.w	d3,d4
00016FB6 D843                       		add.w	d3,d4
00016FB8 4EB9 0000 14D4             		jsr	(QueueDMATransfer).l
00016FBE 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
00016FC2                            
00016FC2                            locret_13C96:
00016FC2 4E75                       		rts	
00016FC4                            ; End of function Sonic_LoadGfx
00016FC4                            ; End of function Sonic_LoadGfx
00016FC4                            
00016FC4                            		include	"_incObj\0A Drowning Countdown.asm"
00016FC4                            ; ---------------------------------------------------------------------------
00016FC4                            ; Object 0A - drowning countdown numbers and small bubbles that float out of
00016FC4                            ; Sonic's mouth (LZ)
00016FC4                            ; ---------------------------------------------------------------------------
00016FC4                            
00016FC4                            DrownCount:
00016FC4 7000                       		moveq	#0,d0
00016FC6 1028 0024                  		move.b	obRoutine(a0),d0
00016FCA 323B 0000                  		move.w	Drown_Index(pc,d0.w),d1
00016FCE 4EFB 1000                  		jmp	Drown_Index(pc,d1.w)
00016FD2                            ; ===========================================================================
00016FD2                            Drown_Index:
00016FD2 0000                       ptr_Drown_Main:		dc.w Drown_Main-Drown_Index
00016FD4 0000                       ptr_Drown_Animate:	dc.w Drown_Animate-Drown_Index
00016FD6 0000                       ptr_Drown_ChkWater:	dc.w Drown_ChkWater-Drown_Index
00016FD8 0000                       ptr_Drown_Display:	dc.w Drown_Display-Drown_Index
00016FDA 0000                       ptr_Drown_Delete:	dc.w Drown_Delete-Drown_Index
00016FDC 0000                       ptr_Drown_Countdown:	dc.w Drown_Countdown-Drown_Index
00016FDE 0000                       ptr_Drown_AirLeft:	dc.w Drown_AirLeft-Drown_Index
00016FE0 0000                       			dc.w Drown_Display-Drown_Index
00016FE2 0000                       			dc.w Drown_Delete-Drown_Index
00016FE4                            
00016FE4 =00000030                  drown_origX:		equ $30		; original x-axis position
00016FE4 =00000038                  drown_time:		equ $38		; time between each number changes
00016FE4                            
00016FE4 =00000000                  id_Drown_Main:		equ ptr_Drown_Main-Drown_Index		; 0
00016FE4 =00000002                  id_Drown_Animate:	equ ptr_Drown_Animate-Drown_Index		; 2
00016FE4 =00000004                  id_Drown_ChkWater:	equ ptr_Drown_ChkWater-Drown_Index	; 4
00016FE4 =00000006                  id_Drown_Display:	equ ptr_Drown_Display-Drown_Index		; 6
00016FE4 =00000008                  id_Drown_Delete:		equ ptr_Drown_Delete-Drown_Index		; 8
00016FE4 =0000000A                  id_Drown_Countdown:	equ ptr_Drown_Countdown-Drown_Index	; $A
00016FE4 =0000000C                  id_Drown_AirLeft:	equ ptr_Drown_AirLeft-Drown_Index		; $C
00016FE4                            ; ===========================================================================
00016FE4                            
00016FE4                            Drown_Main:	; Routine 0
00016FE4 5428 0024                  		addq.b	#2,obRoutine(a0)
00016FE8 217C 0001 4DC2 0004        		move.l	#Map_Bub,obMap(a0)
00016FF0 317C 83F5 0002             		move.w	#$83F5,obGfx(a0)
00016FF6 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; is level Spring Yard Zone?
00016FFC 6700                       		beq.s	Drown_IsSYZ	; if yes, branch
00016FFE 317C 8348 0002             		move.w	#$8348,obGfx(a0)	; LZ
00017004                            
00017004                            	Drown_IsSYZ:	
00017004 117C 0084 0001             		move.b	#$84,obRender(a0)
0001700A 117C 0010 0014             		move.b	#$10,obActWid(a0)
00017010 317C 0080 0018             		move.w	#$80,obPriority(a0)
00017016 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
0001701A 6A00                       		bpl.s	@smallbubble	; branch if $00-$7F
0001701C                            
0001701C 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Drown_Countdown next
00017020 217C 0000 0000 0004        		move.l	#Map_Drown,obMap(a0)
00017028 317C 0440 0002             		move.w	#$440,obGfx(a0)
0001702E 0240 007F                  		andi.w	#$7F,d0
00017032 1140 0033                  		move.b	d0,$33(a0)
00017036 6000 0000                  		bra.w	Drown_Countdown
0001703A                            ; ===========================================================================
0001703A                            
0001703A                            @smallbubble:
0001703A 1140 001C                  		move.b	d0,obAnim(a0)
0001703E 3168 0008 0030             		move.w	obX(a0),drown_origX(a0)
00017044 317C FF78 0012             		move.w	#-$88,obVelY(a0)
0001704A                            
0001704A                            Drown_Animate:	; Routine 2
0001704A 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00017050 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
00017056                            
00017056                            Drown_ChkWater:	; Routine 4
00017056 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; is level Spring Yard Zone? TIS
0001705C 6600                       		bne.s	Normal_Water_Level	; if not, branch TIS
0001705E 3038 FF92                  		move.w	(v_watersplashpos).w,d0	;TIS
00017062 0640 0010                  		add.w	#$10,d0	;Lower it a little - TIS
00017066 B068 000C                  		cmp.w	obY(a0),d0	; has bubble reached the water tag surface? - TIS
0001706A 6200                       		bhi.s	Display_Next		; if so, branch TIS
0001706C                            		
0001706C                            
0001706C                            Normal_Water_Level:
0001706C 3038 F646                  		move.w	(v_waterpos1).w,d0
00017070 B068 000C                  		cmp.w	obY(a0),d0	; has bubble reached the water surface?
00017074 6500                       		bcs.s	Wobble		; if not, branch
00017076                            Display_Next:	;TIS		
00017076 117C 0006 0024             		move.b	#id_Drown_Display,obRoutine(a0) ; goto Drown_Display next
0001707C 5E28 001C                  		addq.b	#7,obAnim(a0)
00017080 0C28 000D 001C             		cmpi.b	#$D,obAnim(a0)
00017086 6700                       		beq.s	Drown_Display
00017088 6000                       		bra.s	Drown_Display
0001708A                            ; ===========================================================================
0001708A                            
0001708A                            Wobble:
0001708A 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic in a water tunnel?
0001708E 6700                       		beq.s	@notunnel	; if not, branch
00017090 5868 0030                  		addq.w	#4,drown_origX(a0)
00017094                            
00017094                            	@notunnel:
00017094 1028 0026                  		move.b	obAngle(a0),d0
00017098 5228 0026                  		addq.b	#1,obAngle(a0)
0001709C 0240 007F                  		andi.w	#$7F,d0
000170A0 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
000170A6 1031 0000                  		move.b	(a1,d0.w),d0
000170AA 4880                       		ext.w	d0
000170AC D068 0030                  		add.w	drown_origX(a0),d0
000170B0 3140 0008                  		move.w	d0,obX(a0)
000170B4 6100                       		bsr.s	Drown_ShowNumber
000170B6 4EB9 0000 F81A             		jsr	(SpeedToPos).l
000170BC 4A28 0001                  		tst.b	obRender(a0)
000170C0 6A00                       		bpl.s	@delete
000170C2 4EF9 0000 F82E             		jmp	(DisplaySprite).l
000170C8                            
000170C8                            	@delete:
000170C8 4EF9 0000 F86E             		jmp	(DeleteObject).l
000170CE                            ; ===========================================================================
000170CE                            
000170CE                            Drown_Display:	; Routine 6, Routine $E
000170CE 6100                       		bsr.s	Drown_ShowNumber
000170D0 43F9 0000 0000             		lea	(Ani_Drown).l,a1
000170D6 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
000170DC 4EF9 0000 F82E             		jmp	(DisplaySprite).l
000170E2                            ; ===========================================================================
000170E2                            
000170E2                            Drown_Delete:	; Routine 8, Routine $10
000170E2 4EF9 0000 F86E             		jmp	(DeleteObject).l
000170E8                            ; ===========================================================================
000170E8                            
000170E8                            Drown_AirLeft:	; Routine $C
000170E8 0C78 000C FE14             		cmpi.w	#$C,(v_air).w	; check air remaining
000170EE 6200                       		bhi.s	Drown_AirLeft_Delete		; if higher than $C, branch
000170F0 5368 0038                  		subq.w	#1,drown_time(a0)
000170F4 6600                       		bne.s	@display
000170F6 117C 000E 0024             		move.b	#id_Drown_Display+8,obRoutine(a0) ; goto Drown_Display next
000170FC 5E28 001C                  		addq.b	#7,obAnim(a0)
00017100 60CC                       		bra.s	Drown_Display
00017102                            ; ===========================================================================
00017102                            
00017102                            	@display:
00017102 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00017108 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
0001710E 4A28 0001                  		tst.b	obRender(a0)
00017112 6A00                       		bpl.s	Drown_AirLeft_Delete
00017114 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001711A                            
0001711A                            Drown_AirLeft_Delete:	
0001711A 4EF9 0000 F86E             		jmp	(DeleteObject).l
00017120                            ; ===========================================================================
00017120                            
00017120                            Drown_ShowNumber:
00017120 4A68 0038                  		tst.w	drown_time(a0)
00017124 6700                       		beq.s	@nonumber
00017126 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
0001712A 6600                       		bne.s	@nonumber	; if time remains, branch
0001712C 0C28 0007 001C             		cmpi.b	#7,obAnim(a0)
00017132 6400                       		bcc.s	@nonumber
00017134                            
00017134 317C 000F 0038             		move.w	#15,drown_time(a0)
0001713A 4268 0012                  		clr.w	obVelY(a0)
0001713E 117C 0080 0001             		move.b	#$80,obRender(a0)
00017144 3028 0008                  		move.w	obX(a0),d0
00017148 9078 F700                  		sub.w	(v_screenposx).w,d0
0001714C 0640 0080                  		addi.w	#$80,d0
00017150 3140 0008                  		move.w	d0,obX(a0)
00017154 3028 000C                  		move.w	obY(a0),d0
00017158 9078 F704                  		sub.w	(v_screenposy).w,d0
0001715C 0640 0080                  		addi.w	#$80,d0
00017160 3140 000A                  		move.w	d0,obScreenY(a0)
00017164 117C 000C 0024             		move.b	#id_Drown_AirLeft,obRoutine(a0) ; goto Drown_AirLeft next
0001716A                            
0001716A                            	@nonumber:
0001716A 4E75                       		rts	
0001716C                            ; ===========================================================================
0001716C                            Drown_WobbleData:
0001716C 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
0001717C 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
0001718C 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
0001719C 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
000171AC 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
000171BC FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000171CC FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
000171DC FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
000171EC 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
000171FC 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
0001720C 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
0001721C 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
0001722C 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
0001723C FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001724C FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
0001725C FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
0001726C                            ; ===========================================================================
0001726C                            
0001726C                            Drown_Countdown:; Routine $A
0001726C 4A68 002C                  		tst.w	$2C(a0)
00017270 6600 0000                  		bne.w	@loc_13F86
00017274 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0001727A 6400 0000                  		bcc.w	@nocountdown
0001727E 0838 0006 D022             		btst	#6,(v_player+obStatus).w ; is Sonic underwater?
00017284 6700 0000                  		beq.w	@nocountdown	; if not, branch
00017288                            
00017288 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
0001728C 6A00 0000                  		bpl.w	@nochange	; branch if time remains
00017290 317C 003B 0038             		move.w	#59,drown_time(a0)
00017296 317C 0001 0036             		move.w	#1,$36(a0)
0001729C 4EB9 0000 3D02             		jsr	(RandomNumber).l
000172A2 0240 0001                  		andi.w	#1,d0
000172A6 1140 0034                  		move.b	d0,$34(a0)
000172AA 3038 FE14                  		move.w	(v_air).w,d0	; check air remaining
000172AE 0C40 0019                  		cmpi.w	#25,d0
000172B2 6700                       		beq.s	@warnsound	; play sound if	air is 25
000172B4 0C40 0014                  		cmpi.w	#20,d0
000172B8 6700                       		beq.s	@warnsound
000172BA 0C40 000F                  		cmpi.w	#15,d0
000172BE 6700                       		beq.s	@warnsound
000172C0 0C40 000C                  		cmpi.w	#12,d0
000172C4 6200                       		bhi.s	@reduceair	; if air is above 12, branch
000172C6                            
000172C6                            	@skipmusic:
000172D0 5328 0032                  		subq.b	#1,$32(a0)
000172D4 6A00                       		bpl.s	@reduceair
000172D6 1168 0033 0032             		move.b	$33(a0),$32(a0)
000172DC 08E8 0007 0036             		bset	#7,$36(a0)
000172E2 6000                       		bra.s	@reduceair
000172E4                            ; ===========================================================================
000172E4                            
000172E4                            @warnsound:
000172EE                            
000172EE                            @reduceair:
000172EE 5378 FE14                  		subq.w	#1,(v_air).w	; subtract 1 from air remaining
000172F2 6400 0000                  		bcc.w	@gotomakenum	; if air is above 0, branch
000172F6                            
000172F6                            		; Sonic drowns here
000172F6 6100 0000                  		bsr.w	ResumeMusic
000172FA 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
0001730A 31FC 0000 FF92             		move.w	#0,(v_watersplashpos).w	;max it out for now - TIS
00017310 117C 000A 0034             		move.b	#$A,$34(a0)
00017316 317C 0001 0036             		move.w	#1,$36(a0)
0001731C 317C 0078 002C             		move.w	#$78,$2C(a0)
00017322 2F08                       		move.l	a0,-(sp)
00017324 41F8 D000                  		lea	(v_player).w,a0
00017328 6100 F4DE                  		bsr.w	Sonic_ResetOnFloor
0001732C 117C 0017 001C             		move.b	#id_Drown,obAnim(a0)	; use Sonic's drowning animation
00017332 08E8 0001 0022             		bset	#1,obStatus(a0)
00017338 08E8 0007 0002             		bset	#7,obGfx(a0)
0001733E 317C 0000 0012             		move.w	#0,obVelY(a0)
00017344 317C 0000 0010             		move.w	#0,obVelX(a0)
0001734A 317C 0000 0020             		move.w	#0,obInertia(a0)
00017350 11FC 0001 F744             		move.b	#1,(f_nobgscroll).w
00017356 205F                       		movea.l	(sp)+,a0
00017358 4E75                       		rts	
0001735A                            ; ===========================================================================
0001735A                            
0001735A                            @loc_13F86:
0001735A 5368 002C                  		subq.w	#1,$2C(a0)
0001735E 6600                       		bne.s	@loc_13F94
00017360 11FC 0006 D024             		move.b	#6,(v_player+obRoutine).w
00017366 4E75                       		rts	
00017368                            ; ===========================================================================
00017368                            
00017368                            	@loc_13F94:
00017368 2F08                       		move.l	a0,-(sp)
0001736A 41F8 D000                  		lea	(v_player).w,a0
0001736E 4EB9 0000 F81A             		jsr	(SpeedToPos).l
00017374 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001737A 205F                       		movea.l	(sp)+,a0
0001737C 6000                       		bra.s	@nochange
0001737E                            ; ===========================================================================
0001737E                            
0001737E                            @gotomakenum:
0001737E 6000                       		bra.s	@makenum
00017380                            ; ===========================================================================
00017380                            
00017380                            @nochange:
00017380 4A68 0036                  		tst.w	$36(a0)
00017384 6700 0000                  		beq.w	@nocountdown
00017388 5368 003A                  		subq.w	#1,$3A(a0)
0001738C 6A00 0000                  		bpl.w	@nocountdown
00017390                            
00017390                            @makenum:
00017390 4EB9 0000 3D02             		jsr	(RandomNumber).l
00017396 0240 000F                  		andi.w	#$F,d0
0001739A 3140 003A                  		move.w	d0,$3A(a0)
0001739E 4EB9 0000 FDC8             		jsr	(FindFreeObj).l
000173A4 6600 0000                  		bne.w	@nocountdown
000173A8 12BC 000A                  		move.b	#id_DrownCount,0(a1) ; load object
000173AC 3378 D008 0008             		move.w	(v_player+obX).w,obX(a1) ; match X position to Sonic
000173B2 7006                       		moveq	#6,d0
000173B4 0838 0000 D022             		btst	#0,(v_player+obStatus).w
000173BA 6700                       		beq.s	@noflip
000173BC 4440                       		neg.w	d0
000173BE 137C 0040 0026             		move.b	#$40,obAngle(a1)
000173C4                            
000173C4                            	@noflip:
000173C4 D169 0008                  		add.w	d0,obX(a1)
000173C8 3378 D00C 000C             		move.w	(v_player+obY).w,obY(a1)
000173CE 137C 0006 0028             		move.b	#6,obSubtype(a1)
000173D4 4A68 002C                  		tst.w	$2C(a0)
000173D8 6700 0000                  		beq.w	@loc_1403E
000173DC 0268 0007 003A             		andi.w	#7,$3A(a0)
000173E2 0668 0000 003A             		addi.w	#0,$3A(a0)
000173E8 3038 D00C                  		move.w	(v_player+obY).w,d0
000173EC 0440 000C                  		subi.w	#$C,d0
000173F0 3340 000C                  		move.w	d0,obY(a1)
000173F4 4EB9 0000 3D02             		jsr	(RandomNumber).l
000173FA 1340 0026                  		move.b	d0,obAngle(a1)
000173FE 3038 FE04                  		move.w	(v_framecount).w,d0
00017402 0200 0003                  		andi.b	#3,d0
00017406 6600                       		bne.s	@loc_14082
00017408 137C 000E 0028             		move.b	#$E,obSubtype(a1)
0001740E 6000                       		bra.s	@loc_14082
00017410                            ; ===========================================================================
00017410                            
00017410                            @loc_1403E:
00017410 0828 0007 0036             		btst	#7,$36(a0)
00017416 6700                       		beq.s	@loc_14082
00017418 3438 FE14                  		move.w	(v_air).w,d2
0001741C E24A                       		lsr.w	#1,d2
0001741E 4EB9 0000 3D02             		jsr	(RandomNumber).l
00017424 0240 0003                  		andi.w	#3,d0
00017428 6600                       		bne.s	@loc_1406A
0001742A 08E8 0006 0036             		bset	#6,$36(a0)
00017430 6600                       		bne.s	@loc_14082
00017432 1342 0028                  		move.b	d2,obSubtype(a1)
00017436 337C 001C 0038             		move.w	#$1C,drown_time(a1)
0001743C                            
0001743C                            	@loc_1406A:
0001743C 4A28 0034                  		tst.b	$34(a0)
00017440 6600                       		bne.s	@loc_14082
00017442 08E8 0006 0036             		bset	#6,$36(a0)
00017448 6600                       		bne.s	@loc_14082
0001744A 1342 0028                  		move.b	d2,obSubtype(a1)
0001744E 337C 001C 0038             		move.w	#$1C,drown_time(a1)
00017454                            
00017454                            @loc_14082:
00017454 5328 0034                  		subq.b	#1,$34(a0)
00017458 6A00                       		bpl.s	@nocountdown
0001745A 4268 0036                  		clr.w	$36(a0)
0001745E                            
0001745E                            @nocountdown:
0001745E 4E75                       		rts	
0001745E 4E75                       		rts	
00017460                            
00017460                            
00017460                            ; ---------------------------------------------------------------------------
00017460                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00017460                            ; ---------------------------------------------------------------------------
00017460                            
00017460                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017460                            
00017460                            
00017460                            ResumeMusic:
00017460                            		;cmpi.w	#12,(v_air).w	; more than 12 seconds of air left?
00017460                            		;bhi.s	@over12		; if yes, branch
00017460                            		;move.b	(v_Saved_music),d0
00017460                            		;tst.b	(v_invinc).w ; is Sonic invincible?
00017460                            		;beq.s	@notinvinc ; if not, branch
00017460                            		;move.w	#bgm_Invincible,d0
00017460                            		;tst.b	(v_shoes).w ; is Sonic speed shoes?
00017460                            		;beq.s	@notinvinc	; if not, branch
00017460                            		;move.w	#bgm_Ending,d0
00017460                            
00017460                            	;@notinvinc:
00017460                            		;tst.b	(f_lockscreen).w ; is Sonic at a boss?
00017460                            		;beq.s	@playselected ; if not, branch
00017460                            		;move.w	#bgm_Boss,d0
00017460                            
00017460                            	;@playselected:
00017460                            		;jsr	(PlaySound).l
00017460                            
00017460                            	;@over12:
00017460 31FC 001E FE14             		move.w	#30,(v_air).w	; reset air to 30 seconds
00017466 4238 D372                  		clr.b	(v_objspace+$340+$32).w
0001746A 4E75                       		rts	
0001746C                            
0001746C                            ;End of function ResumeMusic
0001746C                            
0001746C                            ; ===========================================================================
0001746C                            
0001746C                            		include	"_anim\Drowning Countdown.asm"
0001746C                            ; ---------------------------------------------------------------------------
0001746C                            ; Animation script - countdown numbers and bubbles (LZ)
0001746C                            ; ---------------------------------------------------------------------------
0001746C 0000                       Ani_Drown:	dc.w @zeroappear-Ani_Drown
0001746E 0000                       		dc.w @oneappear-Ani_Drown
00017470 0000                       		dc.w @twoappear-Ani_Drown
00017472 0000                       		dc.w @threeappear-Ani_Drown
00017474 0000                       		dc.w @fourappear-Ani_Drown
00017476 0000                       		dc.w @fiveappear-Ani_Drown
00017478 0000                       		dc.w @smallbubble-Ani_Drown
0001747A 0000                       		dc.w @zeroflash-Ani_Drown
0001747C 0000                       		dc.w @oneflash-Ani_Drown
0001747E 0000                       		dc.w @twoflash-Ani_Drown
00017480 0000                       		dc.w @threeflash-Ani_Drown
00017482 0000                       		dc.w @fourflash-Ani_Drown
00017484 0000                       		dc.w @fiveflash-Ani_Drown
00017486 0000                       		dc.w @blank-Ani_Drown
00017488 0000                       		dc.w @mediumbubble-Ani_Drown
0001748A 0500 0102 0304 090D FC     @zeroappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, afRoutine
00017494 00                         		even
00017494 0500 0102 0304 0C12 FC     @oneappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	afRoutine
0001749E 00                         		even
0001749E 0500 0102 0304 0C11 FC     @twoappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	afRoutine
000174A8 00                         		even
000174A8 0500 0102 0304 0B10 FC     @threeappear:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	afRoutine
000174B2 00                         		even
000174B2 0500 0102 0304 090F FC     @fourappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, afRoutine
000174BC 00                         		even
000174BC 0500 0102 0304 0A0E FC     @fiveappear:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, afRoutine
000174C6 00                         		even
000174C6 0E00 0102 FC               @smallbubble:	dc.b $E, 0, 1, 2, afRoutine
000174CC 00                         		even
000174CC 0716 0D16 0D16 0DFC        @zeroflash:	dc.b 7,	$16, $D, $16, $D, $16, $D, afRoutine
000174D4 0716 1216 1216 12FC        @oneflash:	dc.b 7,	$16, $12, $16, $12, $16, $12, afRoutine
000174DC 0716 1116 1116 11FC        @twoflash:	dc.b 7,	$16, $11, $16, $11, $16, $11, afRoutine
000174E4 0716 1016 1016 10FC        @threeflash:	dc.b 7,	$16, $10, $16, $10, $16, $10, afRoutine
000174EC 0716 0F16 0F16 0FFC        @fourflash:	dc.b 7,	$16, $F, $16, $F, $16, $F, afRoutine
000174F4 0716 0E16 0E16 0EFC        @fiveflash:	dc.b 7,	$16, $E, $16, $E, $16, $E, afRoutine
000174FC 0EFC                       @blank:		dc.b $E, afRoutine
000174FE 0E01 0203 04FC             @mediumbubble:	dc.b $E, 1, 2, 3, 4, afRoutine
00017504                            		even
00017504                            		even
00017504                            Map_Drown:	include	"_maps\Drowning Countdown.asm"
00017504                            ; ---------------------------------------------------------------------------
00017504                            ; Sprite mappings - drowning countdown numbers (LZ)
00017504                            ; ---------------------------------------------------------------------------
00017504                            Map_Drown_internal:
00017504 0000                       		dc.w @num-Map_Drown_internal
00017506 01                         @num:		dc.b 1
00017507 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
0001750C                            		even
0001750C                            		even
0001750C                            
0001750C                            ; --------------------------------------------------
0001750C                            ; Subroutine to load the shield's art over DMA
0001750C                            ; --------------------------------------------------
0001750C                            
0001750C                            PLCLoad_Shields:
0001750C 7000                       		moveq	#0,d0
0001750E 1028 001A                  		move.b	obFrame(a0),d0	; load frame number
00017512 B028 0033                  		cmp.b	shield_LastLoadedDPLC(a0),d0
00017516 6700                       		beq.s	locret2_13C96
00017518 1140 0033                  		move.b	d0,shield_LastLoadedDPLC(a0)
0001751C 2468 003C                  		move.l  shield_DPLC_Address(A0),a2
00017520 D040                       		add.w   d0,d0
00017522 D4F2 0000                  		adda.w  (a2,D0),a2
00017526 3A1A                       		move.w  (a2)+,d5
00017528 5345                       		subq.w  #1,d5
0001752A 6B00                       		bmi.s	locret2_13C96
0001752C 3828 0036                  		move.w  shield_vram_art(A0),d4
00017530                            
00017530                            loc_199BE:
00017530 7200                       		moveq	#0,d1
00017532 121A                       		move.b	(a2)+,d1
00017534 E149                       		lsl.w	#8,d1
00017536 121A                       		move.b	(a2)+,d1
00017538 3601                       		move.w	d1,d3
0001753A E04B                       		lsr.w	#8,d3
0001753C 0243 00F0                  		andi.w	#$F0,d3
00017540 0643 0010                  		addi.w	#$10,d3
00017544 0241 0FFF                  		andi.w	#$FFF,d1
00017548 EB89                       		lsl.l	#5,d1
0001754A D2A8 0038                  		add.l   shield_Art_Address(a0),d1
0001754E 3404                       		move.w  d4,d2
00017550 D843                       		add.w   d3,d4
00017552 D843                       		add.w   d3,d4
00017554 4EB9 0000 14D4             		jsr     (QueueDMATransfer).l
0001755A 51CD FFD4                  		dbf     d5,loc_199BE	; repeat for number of entries
0001755E                            
0001755E                            locret2_13C96:
0001755E 4E75                       		rts	
00017560                            ; End of function PLCLoad_Shields
00017560                            
00017560                            		include	"_incObj\4E Silver Shield.asm"
00017560                            ; ---------------------------------------------------------------------------
00017560                            ; Object 4E - Silver Shield
00017560                            ; ---------------------------------------------------------------------------
00017560                            SPShieldItem: ; XREF: Obj_Index
00017560 7000                       		moveq	#0,d0
00017562 1028 0024                  		move.b	obRoutine(a0),d0
00017566 323B 0000                  		move.w	SPShieldItem_Index(pc,d0.w),d1
0001756A 4EFB 1000                  		jmp	SPShieldItem_Index(pc,d1.w)
0001756E                            ; ===========================================================================
0001756E                            ; off_1D900:
0001756E                            SPShieldItem_Index:
0001756E 0000                       		dc.w SPShieldItem_Init-SPShieldItem_Index	; 0
00017570 0000                       		dc.w SPShieldItem_Main-SPShieldItem_Index	; 2
00017572                            ; ===========================================================================
00017572                            ; loc_1D904:
00017572                            SPShieldItem_Init:
00017572 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
0001757A 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
00017582 217C 0000 0000 0038        		move.l	#Art_SpShield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
0001758A 117C 0004 0001             		move.b	#4,obRender(a0)
00017590 317C 0080 0018             		move.w	#$80,obPriority(a0)
00017596 117C 0018 0014             		move.b	#$18,obActWid(a0)
0001759C 317C 0541 0002             		move.w	#$541,obGfx(a0)
000175A2 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
000175A8 0838 0007 D002             		btst	#7,(v_player+obGfx).w
000175AE 6700                       		beq.s	@animclear
000175B0 08E8 0007 0002             		bset	#7,obGfx(a0)
000175B6                            
000175B6                            @animclear:
000175B6 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
000175BC 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
000175C2 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
000175C6                            ; loc_1D92C:
000175C6                            SPShieldItem_Main:
000175C6 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
000175CA 4A38 FE2D                  		tst.b	(v_invinc).w
000175CE 6600                       		bne.s	@return
000175D0                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
000175D0                            		;beq.s	@return	; If so, do not display and do not update variables
000175D0 4A38 F5CA                  		tst.b	(v_SpShield).w
000175D4 6700 0000                  		beq.w	SPShieldItem_Destroy	; If not, change to Insta-Shield
000175D8 316A 0008 0008             		move.w	obX(a2),obX(a0)
000175DE 316A 000C 000C             		move.w	obY(a2),obY(a0)
000175E4 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
000175EA 4A6A 0002                  		tst.w	obGFX(a2)
000175EE 6A00                       		bpl.s	@nothighpriority
000175F0 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
000175F6                            
000175F6                            		@nothighpriority:
000175F6 43F9 0000 0000             		lea	(Ani_Shield).l,a1
000175FC 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
00017602 4EB9 0001 750C             		jsr	(PLCLoad_Shields).l
00017608 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001760E                            ; ---------------------------------------------------------------------------
0001760E                            ; ===========================================================================
0001760E                            
0001760E                            @return:
0001760E 4E75                       		rts
00017610                            
00017610                            SPShieldItem_Destroy:
00017610 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
00017614 4E75                       		rts
00017616                            ; ===========================================================================
00017616                            ; ===========================================================================
00017616                            		include	"_incObj\04 Gold Shield.asm"
00017616                            ; ---------------------------------------------------------------------------
00017616                            ; Object 04 - Gold Shield
00017616                            ; ---------------------------------------------------------------------------
00017616                            GShieldItem: ; XREF: Obj_Index
00017616 7000                       		moveq	#0,d0
00017618 1028 0024                  		move.b	obRoutine(a0),d0
0001761C 323B 0000                  		move.w	GShieldItem_Index(pc,d0.w),d1
00017620 4EFB 1000                  		jmp	GShieldItem_Index(pc,d1.w)
00017624                            ; ===========================================================================
00017624                            ; off_1D900:
00017624                            GShieldItem_Index:
00017624 0000                       		dc.w GShieldItem_Init-GShieldItem_Index	; 0
00017626 0000                       		dc.w GShieldItem_Main-GShieldItem_Index	; 2
00017628                            ; ===========================================================================
00017628                            ; loc_1D904:
00017628                            GShieldItem_Init:
00017628 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
00017630 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
00017638 217C 0000 0000 0038        		move.l	#Art_GShield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
00017640 117C 0004 0001             		move.b	#4,obRender(a0)
00017646 317C 0080 0018             		move.w	#$80,obPriority(a0)
0001764C 117C 0018 0014             		move.b	#$18,obActWid(a0)
00017652 317C 0541 0002             		move.w	#$541,obGfx(a0)
00017658 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
0001765E 0838 0007 D002             		btst	#7,(v_player+obGfx).w
00017664 6700                       		beq.s	@animclear
00017666 08E8 0007 0002             		bset	#7,obGfx(a0)
0001766C                            
0001766C                            @animclear:
0001766C 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
00017672 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
00017678 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
0001767C                            ; loc_1D92C:
0001767C                            GShieldItem_Main:
0001767C 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
00017680 4A38 FE2D                  		tst.b	(v_invinc).w
00017684 6600                       		bne.s	@return
00017686                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
00017686                            		;beq.s	@return	; If so, do not display and do not update variables
00017686 4A38 F5C9                  		tst.b	(v_GShield).w
0001768A 6700 0000                  		beq.w	GShieldItem_Destroy	; If not, change to Insta-Shield
0001768E 316A 0008 0008             		move.w	obX(a2),obX(a0)
00017694 316A 000C 000C             		move.w	obY(a2),obY(a0)
0001769A 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
000176A0 4A6A 0002                  		tst.w	obGFX(a2)
000176A4 6A00                       		bpl.s	@nothighpriority
000176A6 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
000176AC                            
000176AC                            		@nothighpriority:
000176AC 43F9 0000 0000             		lea	(Ani_Shield).l,a1
000176B2 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
000176B8 4EB9 0001 750C             		jsr	(PLCLoad_Shields).l
000176BE 4EF9 0000 F82E             		jmp	(DisplaySprite).l
000176C4                            ; ---------------------------------------------------------------------------
000176C4                            ; ===========================================================================
000176C4                            
000176C4                            @return:
000176C4 4E75                       		rts
000176C6                            
000176C6                            GShieldItem_Destroy:
000176C6 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
000176CA 4E75                       		rts
000176CC                            ; ===========================================================================
000176CC                            ; ===========================================================================
000176CC                            		include	"_incObj\07 Red Shield.asm"
000176CC                            ; ---------------------------------------------------------------------------
000176CC                            ; Object 07 - Red Shield
000176CC                            ; ---------------------------------------------------------------------------
000176CC                            RShieldItem: ; XREF: Obj_Index
000176CC 7000                       		moveq	#0,d0
000176CE 1028 0024                  		move.b	obRoutine(a0),d0
000176D2 323B 0000                  		move.w	RShieldItem_Index(pc,d0.w),d1
000176D6 4EFB 1000                  		jmp	RShieldItem_Index(pc,d1.w)
000176DA                            ; ===========================================================================
000176DA                            ; off_1D900:
000176DA                            RShieldItem_Index:
000176DA 0000                       		dc.w RShieldItem_Init-RShieldItem_Index	; 0
000176DC 0000                       		dc.w RShieldItem_Main-RShieldItem_Index	; 2
000176DE                            ; ===========================================================================
000176DE                            ; loc_1D904:
000176DE                            RShieldItem_Init:
000176DE 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
000176E6 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
000176EE 217C 0000 0000 0038        		move.l	#Art_RedShield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
000176F6 117C 0004 0001             		move.b	#4,obRender(a0)
000176FC 317C 0080 0018             		move.w	#$80,obPriority(a0)
00017702 117C 0018 0014             		move.b	#$18,obActWid(a0)
00017708 317C 0541 0002             		move.w	#$541,obGfx(a0)
0001770E 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
00017714 0838 0007 D002             		btst	#7,(v_player+obGfx).w
0001771A 6700                       		beq.s	@animclear
0001771C 08E8 0007 0002             		bset	#7,obGfx(a0)
00017722                            
00017722                            @animclear:
00017722 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
00017728 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
0001772E 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
00017732                            ; loc_1D92C:
00017732                            RShieldItem_Main:
00017732 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
00017736 4A38 FE2D                  		tst.b	(v_invinc).w
0001773A 6600                       		bne.s	@return
0001773C                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
0001773C                            		;beq.s	@return	; If so, do not display and do not update variables
0001773C 4A38 F5C8                  		tst.b	(v_RShield).w
00017740 6700 0000                  		beq.w	RShieldItem_Destroy	; If not, change to Insta-Shield
00017744 316A 0008 0008             		move.w	obX(a2),obX(a0)
0001774A 316A 000C 000C             		move.w	obY(a2),obY(a0)
00017750 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
00017756 4A6A 0002                  		tst.w	obGFX(a2)
0001775A 6A00                       		bpl.s	@nothighpriority
0001775C 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
00017762                            
00017762                            		@nothighpriority:
00017762 43F9 0000 0000             		lea	(Ani_Shield).l,a1
00017768 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
0001776E 4EB9 0001 750C             		jsr	(PLCLoad_Shields).l
00017774 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001777A                            ; ---------------------------------------------------------------------------
0001777A                            ; ===========================================================================
0001777A                            
0001777A                            @return:
0001777A 4E75                       		rts
0001777C                            
0001777C                            RShieldItem_Destroy:
0001777C 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
00017780 4E75                       		rts
00017782                            ; ===========================================================================
00017782                            ; ===========================================================================
00017782                            		include	"_incObj\38 Shield.asm"
00017782                            ; ---------------------------------------------------------------------------
00017782                            ; Object 38 - Shield
00017782                            ; ---------------------------------------------------------------------------
00017782                            ShieldItem: ; XREF: Obj_Index
00017782 7000                       		moveq	#0,d0
00017784 1028 0024                  		move.b	obRoutine(a0),d0
00017788 323B 0000                  		move.w	ShieldItem_Index(pc,d0.w),d1
0001778C 4EFB 1000                  		jmp	ShieldItem_Index(pc,d1.w)
00017790                            ; ===========================================================================
00017790                            ; off_1D900:
00017790                            ShieldItem_Index:
00017790 0000                       		dc.w ShieldItem_Init-ShieldItem_Index	; 0
00017792 0000                       		dc.w ShieldItem_Main-ShieldItem_Index	; 2
00017794                            ; ===========================================================================
00017794                            ; loc_1D904:
00017794                            ShieldItem_Init:
00017794 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
0001779C 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
000177A4 217C 0000 0000 0038        		move.l	#Art_Shield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
000177AC 117C 0004 0001             		move.b	#4,obRender(a0)
000177B2 317C 0080 0018             		move.w	#$80,obPriority(a0)
000177B8 117C 0018 0014             		move.b	#$18,obActWid(a0)
000177BE 317C 0541 0002             		move.w	#$541,obGfx(a0)
000177C4 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
000177CA 0838 0007 D002             		btst	#7,(v_player+obGfx).w
000177D0 6700                       		beq.s	loc_195F0S
000177D2 08E8 0007 0002             		bset	#7,obGfx(a0)
000177D8                            
000177D8                            loc_195F0S:
000177D8 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
000177DE 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
000177E4 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
000177E8                            ; loc_1D92C:
000177E8                            ShieldItem_Main:
000177E8 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
000177EC 4A38 FE2D                  		tst.b	(v_invinc).w
000177F0 6600                       		bne.s	return_1D976
000177F2                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
000177F2                            		;beq.s	return_1D976	; If so, do not display and do not update variables
000177F2 4A38 FE2C                  		tst.b	(v_shield).w
000177F6 6700 0000                  		beq.w	ShieldItem_Destroy	; If not, change to Insta-Shield
000177FA 316A 0008 0008             		move.w	obX(a2),obX(a0)
00017800 316A 000C 000C             		move.w	obY(a2),obY(a0)
00017806 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
0001780C 4A6A 0002                  		tst.w	obGFX(a2)
00017810 6A00                       		bpl.s	@nothighpriority
00017812 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
00017818                            
00017818                            		@nothighpriority:
00017818 43F9 0000 0000             		lea	(Ani_Shield).l,a1
0001781E 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
00017824 4EB9 0001 750C             		jsr	(PLCLoad_Shields).l
0001782A 4EF9 0000 F82E             		jmp	(DisplaySprite).l
00017830                            ; ---------------------------------------------------------------------------
00017830                            ; ===========================================================================
00017830                            
00017830                            return_1D976:
00017830 4E75                       		rts
00017832                            
00017832                            ShieldItem_Destroy:
00017832 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
00017836 4E75                       		rts
00017838                            ; ===========================================================================
00017838                            ; ===========================================================================
00017838                            		include	"_incObj\19 Invincibility Stars.asm"	
00017838                            ; ---------------------------------------------------------------------------
00017838                            ; Object 10 - invincibility stars
00017838                            ; ---------------------------------------------------------------------------
00017838 =00000024                  invstars_obroutine: equ obRoutine ; the same as routine in other objects
00017838 =00000030                  InvStars_AniScript: equ $30 ; animation script used by sub-objects(in main object it's clear and unused) (4 bytes)
00017838 =00000034                  InvStars_SpeedIndex: equ $34  ; (2 bytes)
00017838 =00000036                  InvStars_PrevPosIndex: equ $36 ; clear and unused in main object
00017838                            
00017838                            InvStarsObj: 
00017838 7000                       		moveq	#0,d0
0001783A 1028 0024                  		move.b	InvStars_obRoutine(a0),d0
0001783E 323B 0000                  		move.w	InvStars_Index(pc,d0.w),d1
00017842 4EFB 1000                  		jmp	InvStars_Index(pc,d1.w)
00017846                            ; ===========================================================================
00017846 0000                       InvStars_Index:	dc.w @InitObjects-InvStars_Index
00017848 0000                       		dc.w @MainObject-InvStars_Index
0001784A 0000                       		dc.w @SubObject-InvStars_Index
0001784C                            ; ===========================================================================
0001784C                            
0001784C                            	@SubObjectsData:
0001784C 0000 0000                  		dc.l Ani_InvStars2 ; animation script
00017850 0B00                       		dc.w $0B00 ; speed index,sub3 anim
00017852 0000 0000                  		dc.l Ani_InvStars3
00017856 160D                       		dc.w $160D
00017858 0000 0000                  		dc.l Ani_InvStars4
0001785C 2C0D                       		dc.w $2C0D
0001785E                            ; ===========================================================================
0001785E                            
0001785E                            	@InitObjects:
0001785E 223C 0000 0000             		move.l	#Unc_Stars,d1
00017864 343C ABC0                  		move.w	#$ABC0,d2
00017868 363C 0220                  		move.w	#$220,d3
0001786C 4EB9 0000 14D4             		jsr	(QueueDMATransfer).l
00017872 7400                       		moveq	#0,d2
00017874 45FA FFD0                  		lea	@SubObjectsData-6(pc),a2
00017878 43D0                       		lea	(a0),a1
0001787A 7203                       		moveq	#3,d1
0001787C                            		
0001787C                            	@initStars:
0001787C 1290                       		move.b	(a0),(a1) ; load obj35
0001787E 137C 0004 0024             		move.b	#4,InvStars_obRoutine(a1)		; => @SubObject
00017884 237C 0000 0000 0004        		move.l	#Map_InvStars,obMap(a1)
0001788C 337C 055E 0002             		move.w	#$55E,obGfx(a1)
00017892 137C 0044 0001             		move.b  #%001000100,obRender(a1)
00017898 137C 0010 000E             		move.b	#$10,mainspr_width(a1)
0001789E 137C 0002 000F             		move.b	#2,mainspr_childsprites(a1)							 
000178A4 1342 0036                  		move.b	d2,InvStars_PrevPosIndex(a1)
000178A8 5242                       		addq.w	#1,d2
000178AA 235A 0030                  		move.l	(a2)+,InvStars_AniScript(a1)
000178AE 335A 0034                  		move.w	(a2)+,InvStars_SpeedIndex(a1)
000178B2 43E9 0040                  		lea	$40(a1),a1 ; a1=object
000178B6 51C9 FFC4                  		dbf	d1,@initStars
000178BA                            
000178BA 117C 0002 0024             		move.b	#2,InvStars_obRoutine(a0)		; => @MainObject
000178C0 117C 0004 0034             		move.b	#4,InvStars_SpeedIndex(a0)
000178C6                            
000178C6                            	@MainObject:
000178C6 43F8 D000                  		lea (v_player).w,a1 ; a1=character
000178CA 4A38 FE2D                  		tst.b   (v_invinc).w
000178CE 6700 0000                  		beq.w	JmpTo_DeleteObject
000178D2 3029 0008                  		move.w	obX(a1),d0
000178D6 3140 0008                  		move.w	d0,obX(a0)
000178DA 3229 000C                  		move.w	obY(a1),d1
000178DE 3141 000C                  		move.w	d1,obY(a0)
000178E2 45E8 0010                  		lea	sub2_x_pos(a0),a2
000178E6 47F9 0000 0000             		lea	Ani_InvStars1,a3
000178EC 7A00                       		moveq	#0,d5
000178EE                            
000178EE                            	@getFrame_main:
000178EE 3428 0038                  		move.w	$38(a0),d2
000178F2 1A33 2000                  		move.b	(a3,d2.w),d5
000178F6 6A00                       		bpl.s	@setFrameAndPosition_main
000178F8 4268 0038                  		clr.w	$38(a0)
000178FC 60F0                       		bra.s	@getFrame_main
000178FE                            ; ===========================================================================
000178FE                            
000178FE                            	@setFrameAndPosition_main:
000178FE 5268 0038                  		addq.w	#1,$38(a0)
00017902 4DF9 0000 0000             		lea	InvStars_Speeds,a6
00017908 1C28 0034                  		move.b	InvStars_SpeedIndex(a0),d6
0001790C 6100 0000                  		bsr.w	InvStars_get_speed
00017910 34C2                       		move.w	d2,(a2)+	; sub2_x_pos
00017912 34C3                       		move.w	d3,(a2)+	; sub2_y_pos
00017914 34C5                       		move.w	d5,(a2)+	; sub2_mapframe
00017916 0646 0020                  		addi.w	#$20,d6
0001791A 6100 0000                  		bsr.w	InvStars_get_speed
0001791E 34C2                       		move.w	d2,(a2)+	; sub3_x_pos
00017920 34C3                       		move.w	d3,(a2)+	; sub3_y_pos
00017922 34C5                       		move.w	d5,(a2)+	; sub3_mapframe
00017924 7012                       		moveq	#$12,d0
00017926 0829 0000 0022             		btst	#0,obStatus(a1)
0001792C 6700                       		beq.s	@display_main
0001792E 4440                       		neg.w	d0
00017930                            
00017930                            	@display_main:
00017930 D128 0034                  		add.b	d0,InvStars_SpeedIndex(a0)
00017934 303C 0080                  		move.w	#(1*$80),d0
00017938 4EF9 0000 F85A             		jmp	DisplaySprite2
0001793E                            ; ===========================================================================
0001793E                            
0001793E                            	@SubObject:
0001793E 43F8 D000                  		lea 	(v_player).w,a1 ; a1=character
00017942 4A38 FE2D                  		tst.b   (v_invinc).w
00017946 6700 0000                  		beq.w	JmpTo_DeleteObject
0001794A 4BF8 F7A8                  		lea		(v_trackpos).w,a5
0001794E 4DF8 CB00                  		lea		(v_tracksonic).w,a6
00017952                            
00017952                            	@getPosition_sub:
00017952 1228 0036                  		move.b	InvStars_PrevPosIndex(a0),d1
00017956 E509                       		lsl.b	#2,d1
00017958 3401                       		move.w	d1,d2
0001795A D241                       		add.w	d1,d1
0001795C D242                       		add.w	d2,d1
0001795E 3015                       		move.w	(a5),d0
00017960 9001                       		sub.b	d1,d0
00017962 45F6 0000                  		lea	(a6,d0.w),a2
00017966 301A                       		move.w	(a2)+,d0
00017968 321A                       		move.w	(a2)+,d1
0001796A 3140 0008                  		move.w	d0,obX(a0)
0001796E 3141 000C                  		move.w	d1,obY(a0)
00017972 45E8 0010                  		lea	sub2_x_pos(a0),a2
00017976 2668 0030                  		movea.l	InvStars_AniScript(a0),a3
0001797A                            
0001797A                            	@getFrame_sub:
0001797A 3428 0038                  		move.w	$38(a0),d2
0001797E 1A33 2000                  		move.b	(a3,d2.w),d5
00017982 6A00                       		bpl.s	@setFrameAndPosition_sub
00017984 4268 0038                  		clr.w	$38(a0)
00017988 60F0                       		bra.s	@getFrame_sub
0001798A                            ; ===========================================================================
0001798A                            
0001798A                            	@setFrameAndPosition_sub:
0001798A 4845                       		swap	d5
0001798C D428 0035                  		add.b	$35(a0),d2
00017990 1A33 2000                  		move.b	(a3,d2.w),d5
00017994 5268 0038                  		addq.w	#1,$38(a0)
00017998 4DFA 0000                  		lea	InvStars_Speeds(pc),a6
0001799C 1C28 0034                  		move.b	InvStars_SpeedIndex(a0),d6
000179A0 6100                       		bsr.s	InvStars_get_speed
000179A2 34C2                       		move.w	d2,(a2)+	; sub2_x_pos
000179A4 34C3                       		move.w	d3,(a2)+	; sub2_y_pos
000179A6 34C5                       		move.w	d5,(a2)+	; sub2_mapframe
000179A8 0646 0020                  		addi.w	#$20,d6
000179AC 4845                       		swap	d5
000179AE 6100                       		bsr.s	InvStars_get_speed
000179B0 34C2                       		move.w	d2,(a2)+	; sub3_x_pos
000179B2 34C3                       		move.w	d3,(a2)+	; sub3_y_pos
000179B4 34C5                       		move.w	d5,(a2)+	; sub3_mapframe
000179B6 7002                       		moveq	#2,d0
000179B8 0829 0000 0022             		btst	#0,obStatus(a1)
000179BE 6700                       		beq.s	loc_1DB20
000179C0 4440                       		neg.w	d0
000179C2                            
000179C2                            loc_1DB20:
000179C2 D128 0034                  		add.b    d0,InvStars_SpeedIndex(a0)
000179C6 303C 0080                  		move.w    #(1*$80),d0
000179CA 4EF9 0000 F85A             		jmp    DisplaySprite2
000179D0                            ; ===========================================================================
000179D0                            
000179D0                            InvStars_get_speed:
000179D0 0246 003E                  		andi.w	#$3E,d6 ; limit to 6 bits and clear first bit
000179D4 1436 6000                  		move.b	(a6,d6.w),d2 ; move x-move speed to d2
000179D8 1636 6001                  		move.b	1(a6,d6.w),d3 ; move y-move speed to d3
000179DC 4882                       		ext.w	d2
000179DE 4883                       		ext.w	d3
000179E0 D440                       		add.w	d0,d2 ; add object x position to x-move speed
000179E2 D641                       		add.w	d1,d3 ; add object y position to y-move speed
000179E4 4E75                       		rts
000179E6                            
000179E6                            InvStars_Speeds: ; x-move speed,	y-move speed	
000179E6 0F00 0F03 0E06 0D08 0B0B+  		dc.w   $F00,  $F03,  $E06,  $D08,  $B0B,  $80D,  $60E,  $30F
000179F6 0010 FC0F F90E F70D F40B+  		dc.w    $10, -$3F1, -$6F2, -$8F3, -$BF5, -$DF8, -$EFA, -$FFD
00017A06 F000 F0FC F1F9 F2F7 F4F4+  		dc.w  $F000, -$F04, -$E07, -$D09, -$B0C, -$80E, -$60F, -$310
00017A16 FFF0 03F0 06F1 08F2 0BF4+  		dc.w   -$10,  $3F0,  $6F1,  $8F2,  $BF4,  $DF7,  $EF9,  $FFC
00017A26                            
00017A26                            ; ---------------------------------------------------------------------------
00017A26                            ; Animation script - invincibility stars
00017A26                            ; ---------------------------------------------------------------------------
00017A26                            
00017A26                            ; The animation script differs from the animate_sprite subroutine
00017A26                            ; Every positive byte - mapping
00017A26                            ; Every negative byte - loop flag 
00017A26                            
00017A26 0805 0706 0607 0508 0607+  Ani_InvStars1:	dc.b   8,  5,  7,  6,  6,  7,  5,  8,  6,  7,  7,  6,$FF
00017A34 00                         		even
00017A34 0807 0605 0403 0405 0607+  Ani_InvStars2:	dc.b   8,  7,  6,  5,  4,  3,  4,  5,  6,  7,$FF
00017A3F 0304 0506 0708 0706 0504   		dc.b   3,  4,  5,  6,  7,  8,  7,  6,  5,  4
00017A4A 00                         		even
00017A4A 0807 0605 0403 0203 0405+  Ani_InvStars3:	dc.b   8,  7,  6,  5,  4,  3,  2,  3,  4,  5,  6,  7,$FF
00017A57 0203 0405 0607 0807 0605+  		dc.b   2,  3,  4,  5,  6,  7,  8,  7,  6,  5,  4,  3
00017A64 00                         		even
00017A64 0706 0504 0302 0102 0304+  Ani_InvStars4:	dc.b   7,  6,  5,  4,  3,  2,  1,  2,  3,  4,  5,  6,$FF
00017A71 0102 0304 0506 0706 0504+  		dc.b   1,  2,  3,  4,  5,  6,  7,  6,  5,  4,  3,  2
00017A7E 00                         		even			
00017A7E                            ; ---------------------------------------------------------------------------
00017A7E                            JmpTo_DeleteObject:
00017A7E 4EF9 0000 F86E             		jmp		(DeleteObject).l
00017A7E 4EF9 0000 F86E             		jmp		(DeleteObject).l
00017A84                            		include	"_incObj\8D Super Stars.asm"			
00017A84                            ; ---------------------------------------------------------------------------
00017A84                            ; Object 91 - Super Sonic Stars
00017A84                            ; ---------------------------------------------------------------------------
00017A84                            
00017A84                            SuperStars:					; XREF: Obj_Index					  ; ...
00017A84 223C 0000 0000             		move.l	#Unc_SuperSonic_stars,d1			        ; Call for Regular Shield Art
00017A8A 343C ABC0                  		move.w	#$ABC0,d2			        ; Load Art from this location (VRAM location*20)
00017A8E                            								; In this case, VRAM = $541*20
00017A8E 363C 0100                  		move.w	#$100,d3
00017A92 4EB9 0000 14D4             		jsr	(QueueDMATransfer).l
00017A98 7000                       		moveq	#0,d0
00017A9A 1028 0024                  		move.b	obRoutine(a0),d0
00017A9E 323B 0000                  		move.w	SuperStars_States(pc,d0.w),d1
00017AA2 4EFB 1000                  		jmp	SuperStars_States(pc,d1.w)
00017AA6                            ; ---------------------------------------------------------------------------
00017AA6 0000 0000                  SuperStars_States:	dc.w SuperStars_Init-SuperStars_States,SuperStars_Main-SuperStars_States; 0	; ...
00017AAA                            ; ---------------------------------------------------------------------------
00017AAA                            
00017AAA                            SuperStars_Init:					  ; ...
00017AAA 5428 0024                  		addq.b	#2,obRoutine(a0)
00017AAE 217C 0000 0000 0004        		move.l	#SuperStars_MapUnc_1E1BE,4(a0)
00017AB6 117C 0004 0001             		move.b	#4,obRender(a0)
00017ABC 317C 0080 0018             		move.w	#$80,obPriority(a0)
00017AC2 117C 0018 0014             		move.b	#$18,obActWid(a0)
00017AC8 317C 055E 0002             		move.w	#$55E,art_tile(a0)
00017ACE 0838 0007 D002             		btst	#7,(v_player+art_tile).w
00017AD4 6700                       		beq.s	SuperStars_Main
00017AD6 08E8 0007 0002             		bset	#7,art_tile(a0)
00017ADC                            ; loc_1E138:
00017ADC                            SuperStars_Main:
00017ADC 4A38 FE19                  		tst.b	(Super_Sonic_flag).w
00017AE0 6700                       		beq.s	JmpTo8_DeleteObject
00017AE2 4A28 0030                  		tst.b	$30(a0)
00017AE6 6700                       		beq.s	loc_1E188
00017AE8 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
00017AEC 6A00                       		bpl.s	loc_1E170
00017AEE 117C 0001 001E             		move.b	#1,anim_frame_duration(a0)
00017AF4 5228 001A                  		addq.b	#1,mapping_frame(a0)
00017AF8 0C28 0006 001A             		cmpi.b	#6,mapping_frame(a0)
00017AFE 6500                       		bcs.s	loc_1E170
00017B00 117C 0000 001A             		move.b	#0,mapping_frame(a0)
00017B06 117C 0000 0030             		move.b	#0,$30(a0)
00017B0C 117C 0001 0031             		move.b	#1,$31(a0)
00017B12 4E75                       		rts
00017B14                            ; ===========================================================================
00017B14                            
00017B14                            loc_1E170:
00017B14 4A28 0031                  		tst.b	$31(a0)
00017B18 6600                       		bne.s	JmpTo6_DisplaySprite
00017B1A                            
00017B1A                            loc_1E176:
00017B1A 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0)
00017B20 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0)
00017B26                            
00017B26                            JmpTo6_DisplaySprite:
00017B26 4EF9 0000 F82E             		jmp	DisplaySprite
00017B2C                            ; ===========================================================================
00017B2C                            
00017B2C                            loc_1E188:
00017B2C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00017B30 6600                       		bne.s	loc_1E1AA
00017B32 3038 D020                  		move.w	(v_player+obInertia).w,d0
00017B36 6A00                       		bpl.s	loc_1E196
00017B38 4440                       		neg.w	d0
00017B3A                            
00017B3A                            loc_1E196:
00017B3A 0C40 0800                  		cmpi.w	#$800,d0
00017B3E 6500                       		bcs.s	loc_1E1AA
00017B40 117C 0000 001A             		move.b	#0,mapping_frame(a0)
00017B46 117C 0001 0030             		move.b	#1,$30(a0)
00017B4C 60CC                       		bra.s	loc_1E176
00017B4E                            ; ===========================================================================
00017B4E                            
00017B4E                            loc_1E1AA:
00017B4E 117C 0000 0030             		move.b	#0,$30(a0)
00017B54 117C 0000 0031             		move.b	#0,$31(a0)
00017B5A 4E75                       		rts
00017B5C                            ; ===========================================================================
00017B5C                            
00017B5C                            JmpTo8_DeleteObject:
00017B5C 4EF9 0000 F86E             		jmp	DeleteObject
00017B62                            ; ===========================================================================
00017B62                            
00017B62                            ; -------------------------------------------------------------------------------
00017B62                            ; sprite mappings
00017B62                            ; -------------------------------------------------------------------------------
00017B62                            ;Obj8F_MapUnc_1E1BE:
00017B62                            SuperStars_MapUnc_1E1BE:	include "_maps/Super Stars.asm"	
00017B62                            ; --------------------------------------------------------------------------------
00017B62                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00017B62                            ; --------------------------------------------------------------------------------
00017B62                            
00017B62                            SME_fq6vL:	
00017B62 0000 0000                  		dc.w SME_fq6vL_C-SME_fq6vL, SME_fq6vL_21-SME_fq6vL	
00017B66 0000 0000                  		dc.w SME_fq6vL_36-SME_fq6vL, SME_fq6vL_4B-SME_fq6vL	
00017B6A 0000 0000                  		dc.w SME_fq6vL_60-SME_fq6vL, SME_fq6vL_75-SME_fq6vL	
00017B6E 04                         SME_fq6vL_C:	dc.b 4	
00017B6F F800 0000 F8               		dc.b $F8, 0, 0, 0, $F8	
00017B74 F800 0800 00               		dc.b $F8, 0, 8, 0, 0	
00017B79 0000 1000 F8               		dc.b 0, 0, $10, 0, $F8	
00017B7E 0000 1800 00               		dc.b 0, 0, $18, 0, 0	
00017B83 04                         SME_fq6vL_21:	dc.b 4	
00017B84 F005 0001 F0               		dc.b $F0, 5, 0, 1, $F0	
00017B89 F005 0801 00               		dc.b $F0, 5, 8, 1, 0	
00017B8E 0005 1001 F0               		dc.b 0, 5, $10, 1, $F0	
00017B93 0005 1801 00               		dc.b 0, 5, $18, 1, 0	
00017B98 04                         SME_fq6vL_36:	dc.b 4	
00017B99 E80A 0005 E8               		dc.b $E8, $A, 0, 5, $E8	
00017B9E E80A 0805 00               		dc.b $E8, $A, 8, 5, 0	
00017BA3 000A 1005 E8               		dc.b 0, $A, $10, 5, $E8	
00017BA8 000A 1805 00               		dc.b 0, $A, $18, 5, 0	
00017BAD 04                         SME_fq6vL_4B:	dc.b 4	
00017BAE F005 0001 F0               		dc.b $F0, 5, 0, 1, $F0	
00017BB3 F005 0801 00               		dc.b $F0, 5, 8, 1, 0	
00017BB8 0005 1001 F0               		dc.b 0, 5, $10, 1, $F0	
00017BBD 0005 1801 00               		dc.b 0, 5, $18, 1, 0	
00017BC2 04                         SME_fq6vL_60:	dc.b 4	
00017BC3 F800 0000 F8               		dc.b $F8, 0, 0, 0, $F8	
00017BC8 F800 0800 00               		dc.b $F8, 0, 8, 0, 0	
00017BCD 0000 1000 F8               		dc.b 0, 0, $10, 0, $F8	
00017BD2 0000 1800 00               		dc.b 0, 0, $18, 0, 0	
00017BD7 00                         SME_fq6vL_75:	dc.b 0	
00017BD8                            		even
00017BD8                            		even
00017BD8                            
00017BD8                            Unc_SuperSonic_stars:	incbin "artunc/Super Stars.bin"
00017D98                            			even
00017D98                            			even
00017D98                            		include	"_incObj\4A Special Stage Entry (Unused).asm"
00017D98                            ; ---------------------------------------------------------------------------
00017D98                            ; Object 4A - special stage entry from beta
00017D98                            ; ---------------------------------------------------------------------------
00017D98                            
00017D98                            VanishSonic:
00017D98 7000                       		moveq	#0,d0
00017D9A 1028 0024                  		move.b	obRoutine(a0),d0
00017D9E 323B 0000                  		move.w	Van_Index(pc,d0.w),d1
00017DA2 4EFB 1000                  		jmp	Van_Index(pc,d1.w)
00017DA6                            ; ===========================================================================
00017DA6 0000                       Van_Index:	dc.w Van_Main-Van_Index
00017DA8 0000                       		dc.w Van_RmvSonic-Van_Index
00017DAA 0000                       		dc.w Van_LoadSonic-Van_Index
00017DAC                            
00017DAC =00000030                  van_time:	equ $30		; time for Sonic to disappear
00017DAC                            ; ===========================================================================
00017DAC                            
00017DAC                            Van_Main:	; Routine 0
00017DAC 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are pattern load cues empty?
00017DB0 6700                       		beq.s	@isempty	; if yes, branch
00017DB2 4E75                       		rts	
00017DB4                            
00017DB4                            	@isempty:
00017DB4 5428 0024                  		addq.b	#2,obRoutine(a0)
00017DB8 217C 0000 0000 0004        		move.l	#Map_Vanish,obMap(a0)
00017DC0 117C 0004 0001             		move.b	#4,obRender(a0)
00017DC6 317C 0080 0018             		move.w	#$80,obPriority(a0)
00017DCC 117C 0038 0014             		move.b	#$38,obActWid(a0)
00017DD2 317C 0541 0002             		move.w	#$541,obGfx(a0)
00017DD8 317C 0078 0030             		move.w	#120,van_time(a0) ; set time for Sonic's disappearance to 2 seconds
00017DDE                            
00017DDE                            Van_RmvSonic:	; Routine 2
00017DDE 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0)
00017DE4 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0)
00017DEA 1178 D022 0022             		move.b	(v_player+obStatus).w,obStatus(a0)
00017DF0 43F9 0000 0000             		lea	(Ani_Vanish).l,a1
00017DF6 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
00017DFC 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
00017E02 6600                       		bne.s	@display
00017E04 4A38 D000                  		tst.b	(v_player).w
00017E08 6700                       		beq.s	@display
00017E0A 11FC 0000 D000             		move.b	#0,(v_player).w	; remove Sonic
00017E1A                            
00017E1A                            	@display:
00017E1A 4EF9 0000 F82E             		jmp	(DisplaySprite).l
00017E20                            ; ===========================================================================
00017E20                            
00017E20                            Van_LoadSonic:	; Routine 4
00017E20 5368 0030                  		subq.w	#1,van_time(a0)	; subtract 1 from time
00017E24 6600                       		bne.s	@wait		; if time remains, branch
00017E26 11FC 0001 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00017E2C 4EF9 0000 F86E             		jmp	(DeleteObject).l
00017E32                            
00017E32                            	@wait:
00017E32 4E75                       		rts	
00017E32 4E75                       		rts	
00017E34                            		include	"_incObj\08 Water Splash.asm"
00017E34                            ; ---------------------------------------------------------------------------
00017E34                            ; Object 08 - water splash (LZ)
00017E34                            ; ---------------------------------------------------------------------------
00017E34                            
00017E34                            Splash:
00017E34 7000                       		moveq	#0,d0
00017E36 1028 0024                  		move.b	obRoutine(a0),d0
00017E3A 323B 0000                  		move.w	Spla_Index(pc,d0.w),d1
00017E3E 4EFB 1000                  		jmp	Spla_Index(pc,d1.w)
00017E42                            ; ===========================================================================
00017E42 0000                       Spla_Index:	dc.w Spla_Main-Spla_Index
00017E44 0000                       		dc.w Spla_Display-Spla_Index
00017E46 0000                       		dc.w Spla_Delete-Spla_Index
00017E48                            ; ===========================================================================
00017E48                            
00017E48                            Spla_Main:    ; Routine 0
00017E48 5428 0024                          addq.b    #2,obRoutine(a0)
00017E4C 217C 0000 0000 0004                move.l    #Map_Splash,obMap(a0)
00017E54 0028 0004 0001                     ori.b    #4,obRender(a0)
00017E5A 117C 0001 0018                     move.b    #1,obPriority(a0)
00017E60 117C 0010 0014                     move.b    #$10,obActWid(a0)
00017E66 317C 4259 0002                     move.w    #$4259,obGfx(a0)
00017E6C 3178 D008 0008                     move.w    (v_player+obX).w,obX(a0) ; copy x-position from Sonic
00017E72                            
00017E72                            Spla_Display:    ; Routine 2
00017E72                                    ;move.w    (v_waterpos1).w,obY(a0) ; copy y-position from water height
00017E72 3178 FF92 000C                     move.w    (v_watersplashpos).w,obY(a0) ;TIS copy y-position from player
00017E78 43F9 0000 0000                     lea    (Ani_Splash).l,a1
00017E7E 4EB9 0000 C8E4                     jsr    (AnimateSprite).l
00017E84 4EF9 0000 F82E                     jmp    (DisplaySprite).l
00017E8A                            ; ===========================================================================
00017E8A                            
00017E8A                            Spla_Delete:	; Routine 4
00017E8A 4EF9 0000 F86E             		jmp	(DeleteObject).l	; delete when animation	is complete
00017E8A 4EF9 0000 F86E             		jmp	(DeleteObject).l	; delete when animation	is complete
00017E90                            		include	"_anim\Shield and Invincibility.asm"
00017E90                            ; ---------------------------------------------------------------------------
00017E90                            ; Animation script - shield and invincibility stars
00017E90                            ; ---------------------------------------------------------------------------
00017E90 0000                       Ani_Shield:	dc.w @shield-Ani_Shield
00017E92 0101 0002 0003 0004 0005+  @shield:	dc.b 1,	1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, $A, 0, $B, 0, $C, 0, afEnd
00017E92 0101 0002 0003 0004 0005+  @shield:	dc.b 1,	1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, $A, 0, $B, 0, $C, 0, afEnd
00017EAC                            Map_Shield:	include	"_maps\Shield.asm"
00017EAC                            ; --------------------------------------------------------------------------------
00017EAC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00017EAC                            ; --------------------------------------------------------------------------------
00017EAC                            
00017EAC                            SME_ocN6K:	
00017EAC 0000 0000                  		dc.w SME_ocN6K_1A-SME_ocN6K, SME_ocN6K_1B-SME_ocN6K	
00017EB0 0000 0000                  		dc.w SME_ocN6K_30-SME_ocN6K, SME_ocN6K_45-SME_ocN6K	
00017EB4 0000 0000                  		dc.w SME_ocN6K_5A-SME_ocN6K, SME_ocN6K_6F-SME_ocN6K	
00017EB8 0000 0000                  		dc.w SME_ocN6K_7A-SME_ocN6K, SME_ocN6K_85-SME_ocN6K	
00017EBC 0000 0000                  		dc.w SME_ocN6K_90-SME_ocN6K, SME_ocN6K_9B-SME_ocN6K	
00017EC0 0000 0000                  		dc.w SME_ocN6K_A6-SME_ocN6K, SME_ocN6K_BB-SME_ocN6K	
00017EC4 0000                       		dc.w SME_ocN6K_D0-SME_ocN6K	
00017EC6 00                         SME_ocN6K_1A:	dc.b 0	
00017EC7 04                         SME_ocN6K_1B:	dc.b 4	
00017EC8 E80E 2000 E3               		dc.b $E8, $E, $20, 0, $E3	
00017ECD E80A 200C 03               		dc.b $E8, $A, $20, $C, 3	
00017ED2 000A 3015 03               		dc.b 0, $A, $30, $15, 3	
00017ED7 000E 301E E3               		dc.b 0, $E, $30, $1E, $E3	
00017EDC 04                         SME_ocN6K_30:	dc.b 4	
00017EDD E80E 2000 E3               		dc.b $E8, $E, $20, 0, $E3	
00017EE2 E80A 200C 03               		dc.b $E8, $A, $20, $C, 3	
00017EE7 000A 3015 03               		dc.b 0, $A, $30, $15, 3	
00017EEC 000E 301E E3               		dc.b 0, $E, $30, $1E, $E3	
00017EF1 04                         SME_ocN6K_45:	dc.b 4	
00017EF2 E80E 2000 E3               		dc.b $E8, $E, $20, 0, $E3	
00017EF7 E80A 200C 03               		dc.b $E8, $A, $20, $C, 3	
00017EFC 000A 3015 03               		dc.b 0, $A, $30, $15, 3	
00017F01 000E 301E E3               		dc.b 0, $E, $30, $1E, $E3	
00017F06 04                         SME_ocN6K_5A:	dc.b 4	
00017F07 E80E 2000 EB               		dc.b $E8, $E, $20, 0, $EB	
00017F0C E802 200C 0B               		dc.b $E8, 2, $20, $C, $B	
00017F11 000E 300F EB               		dc.b 0, $E, $30, $F, $EB	
00017F16 0002 301B 0B               		dc.b 0, 2, $30, $1B, $B	
00017F1B 02                         SME_ocN6K_6F:	dc.b 2	
00017F1C E80E 2000 EC               		dc.b $E8, $E, $20, 0, $EC	
00017F21 000E 300C EC               		dc.b 0, $E, $30, $C, $EC	
00017F26 02                         SME_ocN6K_7A:	dc.b 2	
00017F27 E80A 2000 F1               		dc.b $E8, $A, $20, 0, $F1	
00017F2C 000A 3009 F1               		dc.b 0, $A, $30, 9, $F1	
00017F31 02                         SME_ocN6K_85:	dc.b 2	
00017F32 E802 2000 F9               		dc.b $E8, 2, $20, 0, $F9	
00017F37 0002 3003 F9               		dc.b 0, 2, $30, 3, $F9	
00017F3C 02                         SME_ocN6K_90:	dc.b 2	
00017F3D E80A 2800 F1               		dc.b $E8, $A, $28, 0, $F1	
00017F42 000A 3809 F1               		dc.b 0, $A, $38, 9, $F1	
00017F47 02                         SME_ocN6K_9B:	dc.b 2	
00017F48 E80E 2800 EC               		dc.b $E8, $E, $28, 0, $EC	
00017F4D 000E 380C EC               		dc.b 0, $E, $38, $C, $EC	
00017F52 04                         SME_ocN6K_A6:	dc.b 4	
00017F53 E80E 2800 F3               		dc.b $E8, $E, $28, 0, $F3	
00017F58 E802 280C EB               		dc.b $E8, 2, $28, $C, $EB	
00017F5D 000E 380F F3               		dc.b 0, $E, $38, $F, $F3	
00017F62 0002 381B EB               		dc.b 0, 2, $38, $1B, $EB	
00017F67 04                         SME_ocN6K_BB:	dc.b 4	
00017F68 E80E 2800 FB               		dc.b $E8, $E, $28, 0, $FB	
00017F6D E80A 280C E3               		dc.b $E8, $A, $28, $C, $E3	
00017F72 000A 3815 E3               		dc.b 0, $A, $38, $15, $E3	
00017F77 000E 381E FB               		dc.b 0, $E, $38, $1E, $FB	
00017F7C 04                         SME_ocN6K_D0:	dc.b 4	
00017F7D E80E 2800 FB               		dc.b $E8, $E, $28, 0, $FB	
00017F82 E80A 280C E3               		dc.b $E8, $A, $28, $C, $E3	
00017F87 000A 3815 E3               		dc.b 0, $A, $38, $15, $E3	
00017F8C 000E 381E FB               		dc.b 0, $E, $38, $1E, $FB	
00017F92 00                         		even
00017F92 00                         		even
00017F92                            DPLC_Shield:	include	"_maps\Shield - Dynamic Gfx Script.asm"
00017F92                            ; --------------------------------------------------------------------------------
00017F92                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 3 & Knuckles format; --------------------------------------------------------------------------------
00017F92                            
00017F92                            SME_yRIsY:	
00017F92 0000 0000                  		dc.w SME_yRIsY_1A-SME_yRIsY, SME_yRIsY_1C-SME_yRIsY	
00017F96 0000 0000                  		dc.w SME_yRIsY_26-SME_yRIsY, SME_yRIsY_30-SME_yRIsY	
00017F9A 0000 0000                  		dc.w SME_yRIsY_3A-SME_yRIsY, SME_yRIsY_44-SME_yRIsY	
00017F9E 0000 0000                  		dc.w SME_yRIsY_4A-SME_yRIsY, SME_yRIsY_50-SME_yRIsY	
00017FA2 0000 0000                  		dc.w SME_yRIsY_56-SME_yRIsY, SME_yRIsY_5C-SME_yRIsY	
00017FA6 0000 0000                  		dc.w SME_yRIsY_62-SME_yRIsY, SME_yRIsY_6C-SME_yRIsY	
00017FAA 0000                       		dc.w SME_yRIsY_76-SME_yRIsY	
00017FAC 0000                       SME_yRIsY_1A:	dc.b 0, 0	
00017FAE 0004 B000 800C 800C B000   SME_yRIsY_1C:	dc.b 0, 4, $B0, 0, $80, $C, $80, $C, $B0, 0	
00017FB8 0004 B015 8021 8021 B015   SME_yRIsY_26:	dc.b 0, 4, $B0, $15, $80, $21, $80, $21, $B0, $15	
00017FC2 0004 B02A 8036 8036 B02A   SME_yRIsY_30:	dc.b 0, 4, $B0, $2A, $80, $36, $80, $36, $B0, $2A	
00017FCC 0004 B03F 204B B03F 204B   SME_yRIsY_3A:	dc.b 0, 4, $B0, $3F, $20, $4B, $B0, $3F, $20, $4B	
00017FD6 0002 B04E B04E             SME_yRIsY_44:	dc.b 0, 2, $B0, $4E, $B0, $4E	
00017FDC 0002 805A 805A             SME_yRIsY_4A:	dc.b 0, 2, $80, $5A, $80, $5A	
00017FE2 0002 2063 2063             SME_yRIsY_50:	dc.b 0, 2, $20, $63, $20, $63	
00017FE8 0002 805A 805A             SME_yRIsY_56:	dc.b 0, 2, $80, $5A, $80, $5A	
00017FEE 0002 B04E B04E             SME_yRIsY_5C:	dc.b 0, 2, $B0, $4E, $B0, $4E	
00017FF4 0004 B03F 204B B03F 204B   SME_yRIsY_62:	dc.b 0, 4, $B0, $3F, $20, $4B, $B0, $3F, $20, $4B	
00017FFE 0004 B02A 8036 8036 B02A   SME_yRIsY_6C:	dc.b 0, 4, $B0, $2A, $80, $36, $80, $36, $B0, $2A	
00018008 0004 B015 8021 8021 B015   SME_yRIsY_76:	dc.b 0, 4, $B0, $15, $80, $21, $80, $21, $B0, $15	
00018012                            		even
00018012                            		even
00018012                            Map_InvStars:	include	"_maps\Invincibility Stars.asm"
00018012                            ; ================================================================================
00018012                            ; Sprite Mappings - generated by Flex 2 Thu Apr 23 2020 12:30:36 GMT+0300 (RTZ 2 (зима))
00018012                            ; ================================================================================
00018012                            
00018012                            InvStarMap:
00018012 0000 0000                  	dc.w $0, InvStarMap_1-InvStarMap
00018016 0000 0000                  	dc.w InvStarMap_2-InvStarMap, InvStarMap_3-InvStarMap
0001801A 0000 0000                  	dc.w InvStarMap_4-InvStarMap, InvStarMap_5-InvStarMap
0001801E 0000 0000                  	dc.w InvStarMap_6-InvStarMap, InvStarMap_7-InvStarMap
00018022 0000                       	dc.w InvStarMap_8-InvStarMap
00018024 01                         InvStarMap_1: dc.b $1
00018025 F800 0000 FC               	dc.b $F8, $0, $0, $0, $FC
0001802A 01                         InvStarMap_2: dc.b $1
0001802B F800 0001 FC               	dc.b $F8, $0, $0, $1, $FC
00018030 01                         InvStarMap_3: dc.b $1
00018031 F801 0002 FC               	dc.b $F8, $1, $0, $2, $FC
00018036 01                         InvStarMap_4: dc.b $1
00018037 F801 0004 FC               	dc.b $F8, $1, $0, $4, $FC
0001803C 01                         InvStarMap_5: dc.b $1
0001803D F801 0006 FC               	dc.b $F8, $1, $0, $6, $FC
00018042 01                         InvStarMap_6: dc.b $1
00018043 F805 0008 F8               	dc.b $F8, $5, $0, $8, $F8
00018048 01                         InvStarMap_7: dc.b $1
00018049 F805 000C F8               	dc.b $F8, $5, $0, $C, $F8
0001804E 01                         InvStarMap_8: dc.b $1
0001804F F00F 0010 F0               	dc.b $F0, $F, $0, $10, $F0
00018054                            	even
00018054                            	even
00018054                            		include	"_anim\Special Stage Entry (Unused).asm"
00018054                            ; ---------------------------------------------------------------------------
00018054                            ; Animation script - special stage entry effect from beta
00018054                            ; ---------------------------------------------------------------------------
00018054 0000                       Ani_Vanish:	dc.w @vanish-Ani_Vanish
00018056 0500 0100 0100 0701 0702+  @vanish:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, afRoutine
0001806A                            		even
0001806A                            		even
0001806A                            Map_Vanish:	include	"_maps\Special Stage Entry (Unused).asm"
0001806A                            ; ---------------------------------------------------------------------------
0001806A                            ; Sprite mappings - special stage entry	from beta
0001806A                            ; ---------------------------------------------------------------------------
0001806A                            Map_Vanish_internal:
0001806A 0000                       		dc.w @flash1-Map_Vanish_internal
0001806C 0000                       		dc.w @flash2-Map_Vanish_internal
0001806E 0000                       		dc.w @flash3-Map_Vanish_internal
00018070 0000                       		dc.w @sparkle1-Map_Vanish_internal
00018072 0000                       		dc.w @sparkle2-Map_Vanish_internal
00018074 0000                       		dc.w @sparkle3-Map_Vanish_internal
00018076 0000                       		dc.w @sparkle4-Map_Vanish_internal
00018078 0000                       		dc.w @blank-Map_Vanish_internal
0001807A 03                         @flash1:	dc.b 3
0001807B F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00018080 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00018085 0800 1000 08               		dc.b 8,	0, $10,	0, 8
0001808A 03                         @flash2:	dc.b 3
0001808B F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00018090 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00018095 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
0001809A 05                         @flash3:	dc.b 5
0001809B E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
000180A0 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
000180A5 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
000180AA 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
000180AF 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
000180B4 09                         @sparkle1:	dc.b 9
000180B5 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
000180BA F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
000180BF 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
000180C4 0005 0034 10               		dc.b 0,	5, 0, $34, $10
000180C9 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
000180CE F000 1836 18               		dc.b $F0, 0, $18, $36, $18
000180D3 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000180D8 0000 0825 28               		dc.b 0,	0, 8, $25, $28
000180DD F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
000180E2 12                         @sparkle2:	dc.b $12
000180E3 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
000180E8 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
000180ED F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
000180F2 0000 0025 00               		dc.b 0,	0, 0, $25, 0
000180F7 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
000180FC 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00018101 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00018106 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
0001810B 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00018110 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00018115 0800 0826 18               		dc.b 8,	0, 8, $26, $18
0001811A 0800 0029 20               		dc.b 8,	0, 0, $29, $20
0001811F F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00018124 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00018129 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
0001812E F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00018133 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00018138 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
0001813D 11                         @sparkle3:	dc.b $11
0001813E F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00018143 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00018148 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
0001814D 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00018152 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00018157 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
0001815C 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00018161 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00018166 0000 0025 30               		dc.b 0,	0, 0, $25, $30
0001816B 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00018170 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00018175 0800 0029 38               		dc.b 8,	0, 0, $29, $38
0001817A F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
0001817F 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00018184 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00018189 0000 0025 48               		dc.b 0,	0, 0, $25, $48
0001818E 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00018193 09                         @sparkle4:	dc.b 9
00018194 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00018199 0400 0825 28               		dc.b 4,	0, 8, $25, $28
0001819E 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
000181A3 0400 0826 40               		dc.b 4,	0, 8, $26, $40
000181A8 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
000181AD FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
000181B2 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
000181B7 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
000181BC 04                         		dc.b 4
000181BD 0008 2758 00               @blank:		dc.b 0,	8, $27,	$58, 0
000181C2                            		even
000181C2                            		even
000181C2                            		include	"_anim\Water Splash.asm"
000181C2                            ; ---------------------------------------------------------------------------
000181C2                            ; Animation script - water splash (LZ)
000181C2                            ; ---------------------------------------------------------------------------
000181C2 0000                       Ani_Splash:	dc.w @splash-Ani_Splash
000181C4 0400 0102 FC               @splash:	dc.b 4,	0, 1, 2, afRoutine
000181CA 00                         		even
000181CA 00                         		even
000181CA                            Map_Splash:	include	"_maps\Water Splash.asm"
000181CA                            ; ---------------------------------------------------------------------------
000181CA                            ; Sprite mappings - water splash (LZ)
000181CA                            ; ---------------------------------------------------------------------------
000181CA                            Map_Splash_internal:
000181CA 0000                       		dc.w @splash1-Map_Splash_internal
000181CC 0000                       		dc.w @splash2-Map_Splash_internal
000181CE 0000                       		dc.w @splash3-Map_Splash_internal
000181D0 02                         @splash1:	dc.b 2
000181D1 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
000181D6 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
000181DB 02                         @splash2:	dc.b 2
000181DC E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
000181E1 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
000181E6 01                         @splash3:	dc.b 1
000181E7 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
000181EC                            		even
000181EC                            		even
000181EC                            
000181EC                            		include	"_incObj\Sonic AnglePos.asm"
000181EC                            ; ---------------------------------------------------------------------------
000181EC                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
000181EC                            ; ---------------------------------------------------------------------------
000181EC                            
000181EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000181EC                            
000181EC                            
000181EC                            Sonic_AnglePos:
000181EC 0828 0003 0022             		btst	#3,obStatus(a0)
000181F2 6700                       		beq.s	loc_14602
000181F4 7000                       		moveq	#0,d0
000181F6 11C0 F768                  		move.b	d0,($FFFFF768).w
000181FA 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000181FE 4E75                       		rts	
00018200                            ; ===========================================================================
00018200                            
00018200                            loc_14602:
00018200 7003                       		moveq	#3,d0
00018202 11C0 F768                  		move.b	d0,($FFFFF768).w
00018206 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001820A 1028 0026                  		move.b	obAngle(a0),d0
0001820E 0600 0020                  		addi.b	#$20,d0
00018212 6A00                       		bpl.s	loc_14624
00018214 1028 0026                  		move.b	obAngle(a0),d0
00018218 6A00                       		bpl.s	loc_1461E
0001821A 5300                       		subq.b	#1,d0
0001821C                            
0001821C                            loc_1461E:
0001821C 0600 0020                  		addi.b	#$20,d0
00018220 6000                       		bra.s	loc_14630
00018222                            ; ===========================================================================
00018222                            
00018222                            loc_14624:
00018222 1028 0026                  		move.b	obAngle(a0),d0
00018226 6A00                       		bpl.s	loc_1462C
00018228 5200                       		addq.b	#1,d0
0001822A                            
0001822A                            loc_1462C:
0001822A 0600 001F                  		addi.b	#$1F,d0
0001822E                            
0001822E                            loc_14630:
0001822E 0200 00C0                  		andi.b	#$C0,d0
00018232 0C00 0040                  		cmpi.b	#$40,d0
00018236 6700 0000                  		beq.w	Sonic_WalkVertL
0001823A 0C00 0080                  		cmpi.b	#$80,d0
0001823E 6700 0000                  		beq.w	Sonic_WalkCeiling
00018242 0C00 00C0                  		cmpi.b	#$C0,d0
00018246 6700 0000                  		beq.w	Sonic_WalkVertR
0001824A 3428 000C                  		move.w	obY(a0),d2
0001824E 3628 0008                  		move.w	obX(a0),d3
00018252 7000                       		moveq	#0,d0
00018254 1028 0016                  		move.b	obHeight(a0),d0
00018258 4880                       		ext.w	d0
0001825A D440                       		add.w	d0,d2
0001825C 1028 0017                  		move.b	obWidth(a0),d0
00018260 4880                       		ext.w	d0
00018262 D640                       		add.w	d0,d3
00018264 49F8 F768                  		lea	($FFFFF768).w,a4
00018268 367C 0010                  		movea.w	#$10,a3
0001826C 3C3C 0000                  		move.w	#0,d6
00018270 7A0D                       		moveq	#$D,d5
00018272 6100 0000                  		bsr.w	FindFloor
00018276 3F01                       		move.w	d1,-(sp)
00018278 3428 000C                  		move.w	obY(a0),d2
0001827C 3628 0008                  		move.w	obX(a0),d3
00018280 7000                       		moveq	#0,d0
00018282 1028 0016                  		move.b	obHeight(a0),d0
00018286 4880                       		ext.w	d0
00018288 D440                       		add.w	d0,d2
0001828A 1028 0017                  		move.b	obWidth(a0),d0
0001828E 4880                       		ext.w	d0
00018290 4440                       		neg.w	d0
00018292 D640                       		add.w	d0,d3
00018294 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018298 367C 0010                  		movea.w	#$10,a3
0001829C 3C3C 0000                  		move.w	#0,d6
000182A0 7A0D                       		moveq	#$D,d5
000182A2 6100 0000                  		bsr.w	FindFloor
000182A6 301F                       		move.w	(sp)+,d0
000182A8 6100 0000                  		bsr.w	Sonic_Angle
000182AC 4A41                       		tst.w	d1
000182AE 6700                       		beq.s	locret_146BE
000182B0 6A00                       		bpl.s	loc_146C0
000182B2 0C41 FFF2                  		cmpi.w	#-$E,d1
000182B6 6D00                       		blt.s	locret_146E6
000182B8 D368 000C                  		add.w	d1,obY(a0)
000182BC                            
000182BC                            locret_146BE:
000182BC 4E75                       		rts	
000182BE                            ; ===========================================================================
000182BE                            
000182BE                            loc_146C0:
000182BE 0C41 000E                  		cmpi.w	#$E,d1
000182C2 6E00                       		bgt.s	loc_146CC
000182C4                            
000182C4                            loc_146C6:
000182C4 D368 000C                  		add.w	d1,obY(a0)
000182C8 4E75                       		rts	
000182CA                            ; ===========================================================================
000182CA                            
000182CA                            loc_146CC:
000182CA 4A28 0038                  		tst.b	$38(a0)
000182CE 66F4                       		bne.s	loc_146C6
000182D0 08E8 0001 0022             		bset	#1,obStatus(a0)
000182D6 08A8 0005 0022             		bclr	#5,obStatus(a0)
000182DC 117C 0001 001D             		move.b	#1,obNextAni(a0)
000182E2 4E75                       		rts	
000182E4                            ; ===========================================================================
000182E4                            
000182E4                            locret_146E6:
000182E4 4E75                       		rts	
000182E6                            ; End of function Sonic_AnglePos
000182E6                            
000182E6                            ; ===========================================================================
000182E6 2428 0008                  		move.l	obX(a0),d2
000182EA 3028 0010                  		move.w	obVelX(a0),d0
000182EE 48C0                       		ext.l	d0
000182F0 E180                       		asl.l	#8,d0
000182F2 9480                       		sub.l	d0,d2
000182F4 2142 0008                  		move.l	d2,obX(a0)
000182F8 303C 0038                  		move.w	#$38,d0
000182FC 48C0                       		ext.l	d0
000182FE E180                       		asl.l	#8,d0
00018300 9680                       		sub.l	d0,d3
00018302 2143 000C                  		move.l	d3,obY(a0)
00018306 4E75                       		rts	
00018308                            ; ===========================================================================
00018308                            
00018308                            locret_1470A:
00018308 4E75                       		rts	
0001830A                            ; ===========================================================================
0001830A 2628 000C                  		move.l	obY(a0),d3
0001830E 3028 0012                  		move.w	obVelY(a0),d0
00018312 0440 0038                  		subi.w	#$38,d0
00018316 3140 0012                  		move.w	d0,obVelY(a0)
0001831A 48C0                       		ext.l	d0
0001831C E180                       		asl.l	#8,d0
0001831E 9680                       		sub.l	d0,d3
00018320 2143 000C                  		move.l	d3,obY(a0)
00018324 4E75                       		rts	
00018326 4E75                       		rts	
00018328                            ; ===========================================================================
00018328 2428 0008                  		move.l	obX(a0),d2
0001832C 2628 000C                  		move.l	obY(a0),d3
00018330 3028 0010                  		move.w	obVelX(a0),d0
00018334 48C0                       		ext.l	d0
00018336 E180                       		asl.l	#8,d0
00018338 9480                       		sub.l	d0,d2
0001833A 3028 0012                  		move.w	obVelY(a0),d0
0001833E 48C0                       		ext.l	d0
00018340 E180                       		asl.l	#8,d0
00018342 9680                       		sub.l	d0,d3
00018344 2142 0008                  		move.l	d2,obX(a0)
00018348 2143 000C                  		move.l	d3,obY(a0)
0001834C 4E75                       		rts	
0001834E                            
0001834E                            ; ---------------------------------------------------------------------------
0001834E                            ; Subroutine to	change Sonic's angle as he walks along the floor
0001834E                            ; ---------------------------------------------------------------------------
0001834E                            
0001834E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001834E                            
0001834E                            
0001834E                            Sonic_Angle:
0001834E 1438 F76A                  		move.b	($FFFFF76A).w,d2
00018352 B240                       		cmp.w	d0,d1
00018354 6F00                       		ble.s	loc_1475E
00018356 1438 F768                  		move.b	($FFFFF768).w,d2
0001835A 3200                       		move.w	d0,d1
0001835C                            
0001835C                            loc_1475E:
0001835C 0802 0000                  		btst	#0,d2
00018360 6600                       		bne.s	loc_1476A
00018362 1142 0026                  		move.b	d2,obAngle(a0)
00018366 4E75                       		rts	
00018368                            ; ===========================================================================
00018368                            
00018368                            loc_1476A:
00018368 1428 0026                  		move.b	obAngle(a0),d2
0001836C 0602 0020                  		addi.b	#$20,d2
00018370 0202 00C0                  		andi.b	#$C0,d2
00018374 1142 0026                  		move.b	d2,obAngle(a0)
00018378 4E75                       		rts	
0001837A                            ; End of function Sonic_Angle
0001837A                            
0001837A                            ; ---------------------------------------------------------------------------
0001837A                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
0001837A                            ; ---------------------------------------------------------------------------
0001837A                            
0001837A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001837A                            
0001837A                            
0001837A                            Sonic_WalkVertR:
0001837A 3428 000C                  		move.w	obY(a0),d2
0001837E 3628 0008                  		move.w	obX(a0),d3
00018382 7000                       		moveq	#0,d0
00018384 1028 0017                  		move.b	obWidth(a0),d0
00018388 4880                       		ext.w	d0
0001838A 4440                       		neg.w	d0
0001838C D440                       		add.w	d0,d2
0001838E 1028 0016                  		move.b	obHeight(a0),d0
00018392 4880                       		ext.w	d0
00018394 D640                       		add.w	d0,d3
00018396 49F8 F768                  		lea	($FFFFF768).w,a4
0001839A 367C 0010                  		movea.w	#$10,a3
0001839E 3C3C 0000                  		move.w	#0,d6
000183A2 7A0D                       		moveq	#$D,d5
000183A4 6100 0000                  		bsr.w	FindWall
000183A8 3F01                       		move.w	d1,-(sp)
000183AA 3428 000C                  		move.w	obY(a0),d2
000183AE 3628 0008                  		move.w	obX(a0),d3
000183B2 7000                       		moveq	#0,d0
000183B4 1028 0017                  		move.b	obWidth(a0),d0
000183B8 4880                       		ext.w	d0
000183BA D440                       		add.w	d0,d2
000183BC 1028 0016                  		move.b	obHeight(a0),d0
000183C0 4880                       		ext.w	d0
000183C2 D640                       		add.w	d0,d3
000183C4 49F8 F76A                  		lea	($FFFFF76A).w,a4
000183C8 367C 0010                  		movea.w	#$10,a3
000183CC 3C3C 0000                  		move.w	#0,d6
000183D0 7A0D                       		moveq	#$D,d5
000183D2 6100 0000                  		bsr.w	FindWall
000183D6 301F                       		move.w	(sp)+,d0
000183D8 6100 FF74                  		bsr.w	Sonic_Angle
000183DC 4A41                       		tst.w	d1
000183DE 6700                       		beq.s	locret_147F0
000183E0 6A00                       		bpl.s	loc_147F2
000183E2 0C41 FFF2                  		cmpi.w	#-$E,d1
000183E6 6D00 FF20                  		blt.w	locret_1470A
000183EA D368 0008                  		add.w	d1,obX(a0)
000183EE                            
000183EE                            locret_147F0:
000183EE 4E75                       		rts	
000183F0                            ; ===========================================================================
000183F0                            
000183F0                            loc_147F2:
000183F0 0C41 000E                  		cmpi.w	#$E,d1
000183F4 6E00                       		bgt.s	loc_147FE
000183F6                            
000183F6                            loc_147F8:
000183F6 D368 0008                  		add.w	d1,obX(a0)
000183FA 4E75                       		rts	
000183FC                            ; ===========================================================================
000183FC                            
000183FC                            loc_147FE:
000183FC 4A28 0038                  		tst.b	$38(a0)
00018400 66F4                       		bne.s	loc_147F8
00018402 08E8 0001 0022             		bset	#1,obStatus(a0)
00018408 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001840E 117C 0001 001D             		move.b	#1,obNextAni(a0)
00018414 4E75                       		rts	
00018416                            ; End of function Sonic_WalkVertR
00018416                            
00018416                            ; ---------------------------------------------------------------------------
00018416                            ; Subroutine allowing Sonic to walk upside-down
00018416                            ; ---------------------------------------------------------------------------
00018416                            
00018416                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018416                            
00018416                            
00018416                            Sonic_WalkCeiling:
00018416 3428 000C                  		move.w	obY(a0),d2
0001841A 3628 0008                  		move.w	obX(a0),d3
0001841E 7000                       		moveq	#0,d0
00018420 1028 0016                  		move.b	obHeight(a0),d0
00018424 4880                       		ext.w	d0
00018426 9440                       		sub.w	d0,d2
00018428 0A42 000F                  		eori.w	#$F,d2
0001842C 1028 0017                  		move.b	obWidth(a0),d0
00018430 4880                       		ext.w	d0
00018432 D640                       		add.w	d0,d3
00018434 49F8 F768                  		lea	($FFFFF768).w,a4
00018438 367C FFF0                  		movea.w	#-$10,a3
0001843C 3C3C 1000                  		move.w	#$1000,d6
00018440 7A0D                       		moveq	#$D,d5
00018442 6100 0000                  		bsr.w	FindFloor
00018446 3F01                       		move.w	d1,-(sp)
00018448 3428 000C                  		move.w	obY(a0),d2
0001844C 3628 0008                  		move.w	obX(a0),d3
00018450 7000                       		moveq	#0,d0
00018452 1028 0016                  		move.b	obHeight(a0),d0
00018456 4880                       		ext.w	d0
00018458 9440                       		sub.w	d0,d2
0001845A 0A42 000F                  		eori.w	#$F,d2
0001845E 1028 0017                  		move.b	obWidth(a0),d0
00018462 4880                       		ext.w	d0
00018464 9640                       		sub.w	d0,d3
00018466 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001846A 367C FFF0                  		movea.w	#-$10,a3
0001846E 3C3C 1000                  		move.w	#$1000,d6
00018472 7A0D                       		moveq	#$D,d5
00018474 6100 0000                  		bsr.w	FindFloor
00018478 301F                       		move.w	(sp)+,d0
0001847A 6100 FED2                  		bsr.w	Sonic_Angle
0001847E 4A41                       		tst.w	d1
00018480 6700                       		beq.s	locret_14892
00018482 6A00                       		bpl.s	loc_14894
00018484 0C41 FFF2                  		cmpi.w	#-$E,d1
00018488 6D00 FE5A                  		blt.w	locret_146E6
0001848C 9368 000C                  		sub.w	d1,obY(a0)
00018490                            
00018490                            locret_14892:
00018490 4E75                       		rts	
00018492                            ; ===========================================================================
00018492                            
00018492                            loc_14894:
00018492 0C41 000E                  		cmpi.w	#$E,d1
00018496 6E00                       		bgt.s	loc_148A0
00018498                            
00018498                            loc_1489A:
00018498 9368 000C                  		sub.w	d1,obY(a0)
0001849C 4E75                       		rts	
0001849E                            ; ===========================================================================
0001849E                            
0001849E                            loc_148A0:
0001849E 4A28 0038                  		tst.b	$38(a0)
000184A2 66F4                       		bne.s	loc_1489A
000184A4 08E8 0001 0022             		bset	#1,obStatus(a0)
000184AA 08A8 0005 0022             		bclr	#5,obStatus(a0)
000184B0 117C 0001 001D             		move.b	#1,obNextAni(a0)
000184B6 4E75                       		rts	
000184B8                            ; End of function Sonic_WalkCeiling
000184B8                            
000184B8                            ; ---------------------------------------------------------------------------
000184B8                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
000184B8                            ; ---------------------------------------------------------------------------
000184B8                            
000184B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000184B8                            
000184B8                            
000184B8                            Sonic_WalkVertL:
000184B8 3428 000C                  		move.w	obY(a0),d2
000184BC 3628 0008                  		move.w	obX(a0),d3
000184C0 7000                       		moveq	#0,d0
000184C2 1028 0017                  		move.b	obWidth(a0),d0
000184C6 4880                       		ext.w	d0
000184C8 9440                       		sub.w	d0,d2
000184CA 1028 0016                  		move.b	obHeight(a0),d0
000184CE 4880                       		ext.w	d0
000184D0 9640                       		sub.w	d0,d3
000184D2 0A43 000F                  		eori.w	#$F,d3
000184D6 49F8 F768                  		lea	($FFFFF768).w,a4
000184DA 367C FFF0                  		movea.w	#-$10,a3
000184DE 3C3C 0800                  		move.w	#$800,d6
000184E2 7A0D                       		moveq	#$D,d5
000184E4 6100 0000                  		bsr.w	FindWall
000184E8 3F01                       		move.w	d1,-(sp)
000184EA 3428 000C                  		move.w	obY(a0),d2
000184EE 3628 0008                  		move.w	obX(a0),d3
000184F2 7000                       		moveq	#0,d0
000184F4 1028 0017                  		move.b	obWidth(a0),d0
000184F8 4880                       		ext.w	d0
000184FA D440                       		add.w	d0,d2
000184FC 1028 0016                  		move.b	obHeight(a0),d0
00018500 4880                       		ext.w	d0
00018502 9640                       		sub.w	d0,d3
00018504 0A43 000F                  		eori.w	#$F,d3
00018508 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001850C 367C FFF0                  		movea.w	#-$10,a3
00018510 3C3C 0800                  		move.w	#$800,d6
00018514 7A0D                       		moveq	#$D,d5
00018516 6100 0000                  		bsr.w	FindWall
0001851A 301F                       		move.w	(sp)+,d0
0001851C 6100 FE30                  		bsr.w	Sonic_Angle
00018520 4A41                       		tst.w	d1
00018522 6700                       		beq.s	locret_14934
00018524 6A00                       		bpl.s	loc_14936
00018526 0C41 FFF2                  		cmpi.w	#-$E,d1
0001852A 6D00 FDDC                  		blt.w	locret_1470A
0001852E 9368 0008                  		sub.w	d1,obX(a0)
00018532                            
00018532                            locret_14934:
00018532 4E75                       		rts	
00018534                            ; ===========================================================================
00018534                            
00018534                            loc_14936:
00018534 0C41 000E                  		cmpi.w	#$E,d1
00018538 6E00                       		bgt.s	loc_14942
0001853A                            
0001853A                            loc_1493C:
0001853A 9368 0008                  		sub.w	d1,obX(a0)
0001853E 4E75                       		rts	
00018540                            ; ===========================================================================
00018540                            
00018540                            loc_14942:
00018540 4A28 0038                  		tst.b	$38(a0)
00018544 66F4                       		bne.s	loc_1493C
00018546 08E8 0001 0022             		bset	#1,obStatus(a0)
0001854C 08A8 0005 0022             		bclr	#5,obStatus(a0)
00018552 117C 0001 001D             		move.b	#1,obNextAni(a0)
00018558 4E75                       		rts	
0001855A                            ; End of function Sonic_WalkVertL
0001855A                            ; End of function Sonic_WalkVertL
0001855A                            
0001855A                            		include	"_incObj\sub FindNearestTile.asm"
0001855A                            ; ---------------------------------------------------------------------------
0001855A                            ; Subroutine to	find which tile	the object is standing on
0001855A                            
0001855A                            ; input:
0001855A                            ;	d2 = y-position of object's bottom edge
0001855A                            ;	d3 = x-position of object
0001855A                            
0001855A                            ; output:
0001855A                            ;	a1 = address within 256x256 mappings where object is standing
0001855A                            ;	     (refers to a 16x16 tile number)
0001855A                            ; ---------------------------------------------------------------------------
0001855A                            
0001855A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001855A                            
0001855A                            
0001855A                            FindNearestTile:
0001855A 3002                       		move.w	d2,d0		; get y-pos. of bottom edge of object
0001855C E248                       		lsr.w	#1,d0
0001855E 0240 0380                  		andi.w	#$380,d0
00018562 3203                       		move.w	d3,d1		; get x-pos. of object
00018564 E049                       		lsr.w	#8,d1
00018566 0241 007F                  		andi.w	#$7F,d1
0001856A D041                       		add.w	d1,d0		; combine
0001856C 72FF                       		moveq	#-1,d1
0001856E 43F8 A400                  		lea	(v_lvllayout).w,a1
00018572 1231 0000                  		move.b	(a1,d0.w),d1	; get 256x256 tile number
00018576 6700                       		beq.s	@blanktile	; branch if 0
00018578 6B00                       		bmi.s	@specialtile	; branch if >$7F
0001857A 5301                       		subq.b	#1,d1
0001857C 4881                       		ext.w	d1
0001857E EE59                       		ror.w	#7,d1
00018580 3002                       		move.w	d2,d0
00018582 D040                       		add.w	d0,d0
00018584 0240 01E0                  		andi.w	#$1E0,d0
00018588 D240                       		add.w	d0,d1
0001858A 3003                       		move.w	d3,d0
0001858C E648                       		lsr.w	#3,d0
0001858E 0240 001E                  		andi.w	#$1E,d0
00018592 D240                       		add.w	d0,d1
00018594                            
00018594                            @blanktile:
00018594 2241                       		movea.l	d1,a1
00018596 4E75                       		rts	
00018598                            ; ===========================================================================
00018598                            
00018598                            @specialtile:
00018598 0241 007F                  		andi.w	#$7F,d1
0001859C 0828 0006 0001             		btst	#6,obRender(a0) ; is object "behind a loop"?
000185A2 6700                       		beq.s	@treatasnormal	; if not, branch
000185A4 5241                       		addq.w	#1,d1
000185A6 0C41 0029                  		cmpi.w	#$29,d1
000185AA 6600                       		bne.s	@treatasnormal
000185AC 323C 0051                  		move.w	#$51,d1
000185B0                            
000185B0                            	@treatasnormal:
000185B0 5301                       		subq.b	#1,d1
000185B2 EE59                       		ror.w	#7,d1
000185B4 3002                       		move.w	d2,d0
000185B6 D040                       		add.w	d0,d0
000185B8 0240 01E0                  		andi.w	#$1E0,d0
000185BC D240                       		add.w	d0,d1
000185BE 3003                       		move.w	d3,d0
000185C0 E648                       		lsr.w	#3,d0
000185C2 0240 001E                  		andi.w	#$1E,d0
000185C6 D240                       		add.w	d0,d1
000185C8 2241                       		movea.l	d1,a1
000185CA 4E75                       		rts	
000185CC                            ; End of function FindNearestTile
000185CC                            ; End of function FindNearestTile
000185CC                            		include	"_incObj\sub FindFloor.asm"
000185CC                            ; ---------------------------------------------------------------------------
000185CC                            ; Subroutine to	find the floor
000185CC                            
000185CC                            ; input:
000185CC                            ;	d2 = y-position of object's bottom edge
000185CC                            ;	d3 = x-position of object
000185CC                            ;	d5 = bit to test for solidness
000185CC                            
000185CC                            ; output:
000185CC                            ;	d1 = distance to the floor
000185CC                            ;	a1 = address within 256x256 mappings where object is standing
000185CC                            ;	     (refers to a 16x16 tile number)
000185CC                            ;	(a4) = floor angle
000185CC                            ; ---------------------------------------------------------------------------
000185CC                            
000185CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000185CC                            
000185CC                            
000185CC                            FindFloor:
000185CC 618C                       		bsr.s	FindNearestTile
000185CE 3011                       		move.w	(a1),d0		; get value for solidness, orientation and 16x16 tile number
000185D0 3800                       		move.w	d0,d4
000185D2 0240 07FF                  		andi.w	#$7FF,d0
000185D6 6700                       		beq.s	@isblank	; branch if tile is blank
000185D8 0B04                       		btst	d5,d4		; is the tile solid?
000185DA 6600                       		bne.s	@issolid	; if yes, branch
000185DC                            
000185DC                            @isblank:
000185DC D44B                       		add.w	a3,d2
000185DE 6100 0000                  		bsr.w	FindFloor2	; try tile below the nearest
000185E2 944B                       		sub.w	a3,d2
000185E4 0641 0010                  		addi.w	#$10,d1		; return distance to floor
000185E8 4E75                       		rts	
000185EA                            ; ===========================================================================
000185EA                            
000185EA                            @issolid:
000185EA 2478 F796                  		movea.l	(v_collindex).w,a2
000185EE 1032 0000                  		move.b	(a2,d0.w),d0	; get collision block number
000185F2 0240 00FF                  		andi.w	#$FF,d0
000185F6 67E4                       		beq.s	@isblank	; branch if 0
000185F8 45F9 0000 0000             		lea	(AngleMap).l,a2
000185FE 18B2 0000                  		move.b	(a2,d0.w),(a4)	; get collision angle value
00018602 E948                       		lsl.w	#4,d0
00018604 3203                       		move.w	d3,d1		; get x-pos. of object
00018606 0804 000B                  		btst	#$B,d4		; is block flipped horizontally?
0001860A 6700                       		beq.s	@noflip		; if not, branch
0001860C 4641                       		not.w	d1
0001860E 4414                       		neg.b	(a4)
00018610                            
00018610                            	@noflip:
00018610 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
00018614 6700                       		beq.s	@noflip2	; if not, branch
00018616 0614 0040                  		addi.b	#$40,(a4)
0001861A 4414                       		neg.b	(a4)
0001861C 0414 0040                  		subi.b	#$40,(a4)
00018620                            
00018620                            	@noflip2:
00018620 0241 000F                  		andi.w	#$F,d1
00018624 D240                       		add.w	d0,d1		; (block num. * $10) + x-pos. = place in array
00018626 45F9 0000 0000             		lea	(CollArray1).l,a2
0001862C 1032 1000                  		move.b	(a2,d1.w),d0	; get collision height
00018630 4880                       		ext.w	d0
00018632 BD44                       		eor.w	d6,d4
00018634 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
00018638 6700                       		beq.s	@noflip3	; if not, branch
0001863A 4440                       		neg.w	d0
0001863C                            
0001863C                            	@noflip3:
0001863C 4A40                       		tst.w	d0
0001863E 679C                       		beq.s	@isblank	; branch if height is 0
00018640 6B00                       		bmi.s	@negfloor	; branch if height is negative
00018642 0C00 0010                  		cmpi.b	#$10,d0
00018646 6700                       		beq.s	@maxfloor	; branch if height is $10 (max)
00018648 3202                       		move.w	d2,d1		; get y-pos. of object
0001864A 0241 000F                  		andi.w	#$F,d1
0001864E D041                       		add.w	d1,d0
00018650 323C 000F                  		move.w	#$F,d1
00018654 9240                       		sub.w	d0,d1		; return distance to floor
00018656 4E75                       		rts	
00018658                            ; ===========================================================================
00018658                            
00018658                            @negfloor:
00018658 3202                       		move.w	d2,d1
0001865A 0241 000F                  		andi.w	#$F,d1
0001865E D041                       		add.w	d1,d0
00018660 6A00 FF7A                  		bpl.w	@isblank
00018664                            
00018664                            @maxfloor:
00018664 944B                       		sub.w	a3,d2
00018666 6100 0000                  		bsr.w	FindFloor2	; try tile above the nearest
0001866A D44B                       		add.w	a3,d2
0001866C 0441 0010                  		subi.w	#$10,d1		; return distance to floor
00018670 4E75                       		rts	
00018672                            ; End of function FindFloor
00018672                            
00018672                            
00018672                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018672                            
00018672                            
00018672                            FindFloor2:
00018672 6100 FEE6                  		bsr.w	FindNearestTile
00018676 3011                       		move.w	(a1),d0
00018678 3800                       		move.w	d0,d4
0001867A 0240 07FF                  		andi.w	#$7FF,d0
0001867E 6700                       		beq.s	@isblank2
00018680 0B04                       		btst	d5,d4
00018682 6600                       		bne.s	@issolid
00018684                            
00018684                            @isblank2:
00018684 323C 000F                  		move.w	#$F,d1
00018688 3002                       		move.w	d2,d0
0001868A 0240 000F                  		andi.w	#$F,d0
0001868E 9240                       		sub.w	d0,d1
00018690 4E75                       		rts	
00018692                            ; ===========================================================================
00018692                            
00018692                            @issolid:
00018692 2478 F796                  		movea.l	(v_collindex).w,a2
00018696 1032 0000                  		move.b	(a2,d0.w),d0
0001869A 0240 00FF                  		andi.w	#$FF,d0
0001869E 67E4                       		beq.s	@isblank2
000186A0 45F9 0000 0000             		lea	(AngleMap).l,a2
000186A6 18B2 0000                  		move.b	(a2,d0.w),(a4)
000186AA E948                       		lsl.w	#4,d0
000186AC 3203                       		move.w	d3,d1
000186AE 0804 000B                  		btst	#$B,d4
000186B2 6700                       		beq.s	@noflip
000186B4 4641                       		not.w	d1
000186B6 4414                       		neg.b	(a4)
000186B8                            
000186B8                            	@noflip:
000186B8 0804 000C                  		btst	#$C,d4
000186BC 6700                       		beq.s	@noflip2
000186BE 0614 0040                  		addi.b	#$40,(a4)
000186C2 4414                       		neg.b	(a4)
000186C4 0414 0040                  		subi.b	#$40,(a4)
000186C8                            
000186C8                            	@noflip2:
000186C8 0241 000F                  		andi.w	#$F,d1
000186CC D240                       		add.w	d0,d1
000186CE 45F9 0000 0000             		lea	(CollArray1).l,a2
000186D4 1032 1000                  		move.b	(a2,d1.w),d0
000186D8 4880                       		ext.w	d0
000186DA BD44                       		eor.w	d6,d4
000186DC 0804 000C                  		btst	#$C,d4
000186E0 6700                       		beq.s	@noflip3
000186E2 4440                       		neg.w	d0
000186E4                            
000186E4                            	@noflip3:
000186E4 4A40                       		tst.w	d0
000186E6 679C                       		beq.s	@isblank2
000186E8 6B00                       		bmi.s	@negfloor
000186EA 3202                       		move.w	d2,d1
000186EC 0241 000F                  		andi.w	#$F,d1
000186F0 D041                       		add.w	d1,d0
000186F2 323C 000F                  		move.w	#$F,d1
000186F6 9240                       		sub.w	d0,d1
000186F8 4E75                       		rts	
000186FA                            ; ===========================================================================
000186FA                            
000186FA                            @negfloor:
000186FA 3202                       		move.w	d2,d1
000186FC 0241 000F                  		andi.w	#$F,d1
00018700 D041                       		add.w	d1,d0
00018702 6A00 FF80                  		bpl.w	@isblank2
00018706 4641                       		not.w	d1
00018708 4E75                       		rts	
0001870A                            ; End of function FindFloor2
0001870A                            ; End of function FindFloor2
0001870A                            		include	"_incObj\sub FindWall.asm"
0001870A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001870A                            
0001870A                            
0001870A                            FindWall:
0001870A 6100 FE4E                  		bsr.w	FindNearestTile
0001870E 3011                       		move.w	(a1),d0
00018710 3800                       		move.w	d0,d4
00018712 0240 07FF                  		andi.w	#$7FF,d0
00018716 6700                       		beq.s	loc_14B1E
00018718 0B04                       		btst	d5,d4
0001871A 6600                       		bne.s	loc_14B2C
0001871C                            
0001871C                            loc_14B1E:
0001871C D64B                       		add.w	a3,d3
0001871E 6100 0000                  		bsr.w	FindWall2
00018722 964B                       		sub.w	a3,d3
00018724 0641 0010                  		addi.w	#$10,d1
00018728 4E75                       		rts	
0001872A                            ; ===========================================================================
0001872A                            
0001872A                            loc_14B2C:
0001872A 2478 F796                  		movea.l	(v_collindex).w,a2
0001872E 1032 0000                  		move.b	(a2,d0.w),d0
00018732 0240 00FF                  		andi.w	#$FF,d0
00018736 67E4                       		beq.s	loc_14B1E
00018738 45F9 0000 0000             		lea	(AngleMap).l,a2
0001873E 18B2 0000                  		move.b	(a2,d0.w),(a4)
00018742 E948                       		lsl.w	#4,d0
00018744 3202                       		move.w	d2,d1
00018746 0804 000C                  		btst	#$C,d4
0001874A 6700                       		beq.s	loc_14B5A
0001874C 4641                       		not.w	d1
0001874E 0614 0040                  		addi.b	#$40,(a4)
00018752 4414                       		neg.b	(a4)
00018754 0414 0040                  		subi.b	#$40,(a4)
00018758                            
00018758                            loc_14B5A:
00018758 0804 000B                  		btst	#$B,d4
0001875C 6700                       		beq.s	loc_14B62
0001875E 4414                       		neg.b	(a4)
00018760                            
00018760                            loc_14B62:
00018760 0241 000F                  		andi.w	#$F,d1
00018764 D240                       		add.w	d0,d1
00018766 45F9 0000 0000             		lea	(CollArray2).l,a2
0001876C 1032 1000                  		move.b	(a2,d1.w),d0
00018770 4880                       		ext.w	d0
00018772 BD44                       		eor.w	d6,d4
00018774 0804 000B                  		btst	#$B,d4
00018778 6700                       		beq.s	loc_14B7E
0001877A 4440                       		neg.w	d0
0001877C                            
0001877C                            loc_14B7E:
0001877C 4A40                       		tst.w	d0
0001877E 679C                       		beq.s	loc_14B1E
00018780 6B00                       		bmi.s	loc_14B9A
00018782 0C00 0010                  		cmpi.b	#$10,d0
00018786 6700                       		beq.s	loc_14BA6
00018788 3203                       		move.w	d3,d1
0001878A 0241 000F                  		andi.w	#$F,d1
0001878E D041                       		add.w	d1,d0
00018790 323C 000F                  		move.w	#$F,d1
00018794 9240                       		sub.w	d0,d1
00018796 4E75                       		rts	
00018798                            ; ===========================================================================
00018798                            
00018798                            loc_14B9A:
00018798 3203                       		move.w	d3,d1
0001879A 0241 000F                  		andi.w	#$F,d1
0001879E D041                       		add.w	d1,d0
000187A0 6A00 FF7A                  		bpl.w	loc_14B1E
000187A4                            
000187A4                            loc_14BA6:
000187A4 964B                       		sub.w	a3,d3
000187A6 6100 0000                  		bsr.w	FindWall2
000187AA D64B                       		add.w	a3,d3
000187AC 0441 0010                  		subi.w	#$10,d1
000187B0 4E75                       		rts	
000187B2                            ; End of function FindWall
000187B2                            
000187B2                            
000187B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000187B2                            
000187B2                            
000187B2                            FindWall2:
000187B2 6100 FDA6                  		bsr.w	FindNearestTile
000187B6 3011                       		move.w	(a1),d0
000187B8 3800                       		move.w	d0,d4
000187BA 0240 07FF                  		andi.w	#$7FF,d0
000187BE 6700                       		beq.s	loc_14BC6
000187C0 0B04                       		btst	d5,d4
000187C2 6600                       		bne.s	loc_14BD4
000187C4                            
000187C4                            loc_14BC6:
000187C4 323C 000F                  		move.w	#$F,d1
000187C8 3003                       		move.w	d3,d0
000187CA 0240 000F                  		andi.w	#$F,d0
000187CE 9240                       		sub.w	d0,d1
000187D0 4E75                       		rts	
000187D2                            ; ===========================================================================
000187D2                            
000187D2                            loc_14BD4:
000187D2 2478 F796                  		movea.l	(v_collindex).w,a2
000187D6 1032 0000                  		move.b	(a2,d0.w),d0
000187DA 0240 00FF                  		andi.w	#$FF,d0
000187DE 67E4                       		beq.s	loc_14BC6
000187E0 45F9 0000 0000             		lea	(AngleMap).l,a2
000187E6 18B2 0000                  		move.b	(a2,d0.w),(a4)
000187EA E948                       		lsl.w	#4,d0
000187EC 3202                       		move.w	d2,d1
000187EE 0804 000C                  		btst	#$C,d4
000187F2 6700                       		beq.s	loc_14C02
000187F4 4641                       		not.w	d1
000187F6 0614 0040                  		addi.b	#$40,(a4)
000187FA 4414                       		neg.b	(a4)
000187FC 0414 0040                  		subi.b	#$40,(a4)
00018800                            
00018800                            loc_14C02:
00018800 0804 000B                  		btst	#$B,d4
00018804 6700                       		beq.s	loc_14C0A
00018806 4414                       		neg.b	(a4)
00018808                            
00018808                            loc_14C0A:
00018808 0241 000F                  		andi.w	#$F,d1
0001880C D240                       		add.w	d0,d1
0001880E 45F9 0000 0000             		lea	(CollArray2).l,a2
00018814 1032 1000                  		move.b	(a2,d1.w),d0
00018818 4880                       		ext.w	d0
0001881A BD44                       		eor.w	d6,d4
0001881C 0804 000B                  		btst	#$B,d4
00018820 6700                       		beq.s	loc_14C26
00018822 4440                       		neg.w	d0
00018824                            
00018824                            loc_14C26:
00018824 4A40                       		tst.w	d0
00018826 679C                       		beq.s	loc_14BC6
00018828 6B00                       		bmi.s	loc_14C3C
0001882A 3203                       		move.w	d3,d1
0001882C 0241 000F                  		andi.w	#$F,d1
00018830 D041                       		add.w	d1,d0
00018832 323C 000F                  		move.w	#$F,d1
00018836 9240                       		sub.w	d0,d1
00018838 4E75                       		rts	
0001883A                            ; ===========================================================================
0001883A                            
0001883A                            loc_14C3C:
0001883A 3203                       		move.w	d3,d1
0001883C 0241 000F                  		andi.w	#$F,d1
00018840 D041                       		add.w	d1,d0
00018842 6A00 FF80                  		bpl.w	loc_14BC6
00018846 4641                       		not.w	d1
00018848 4E75                       		rts	
0001884A                            ; End of function FindWall2
0001884A                            ; End of function FindWall2
0001884A                            
0001884A                            ; ---------------------------------------------------------------------------
0001884A                            ; Unused floor/wall subroutine - logs something	to do with collision
0001884A                            ; ---------------------------------------------------------------------------
0001884A                            
0001884A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001884A                            
0001884A                            
0001884A                            FloorLog_Unk:
0001884A 4E75                       		rts	
0001884C                            
0001884C 43F9 0000 0000             		lea	(CollArray1).l,a1
00018852 45F9 0000 0000             		lea	(CollArray1).l,a2
00018858 363C 00FF                  		move.w	#$FF,d3
0001885C                            
0001885C                            loc_14C5E:
0001885C 7A10                       		moveq	#$10,d5
0001885E 343C 000F                  		move.w	#$F,d2
00018862                            
00018862                            loc_14C64:
00018862 7800                       		moveq	#0,d4
00018864 323C 000F                  		move.w	#$F,d1
00018868                            
00018868                            loc_14C6A:
00018868 3019                       		move.w	(a1)+,d0
0001886A EAA8                       		lsr.l	d5,d0
0001886C D944                       		addx.w	d4,d4
0001886E 51C9 FFF8                  		dbf	d1,loc_14C6A
00018872                            
00018872 34C4                       		move.w	d4,(a2)+
00018874 92FC 0020                  		suba.w	#$20,a1
00018878 5345                       		subq.w	#1,d5
0001887A 51CA FFE6                  		dbf	d2,loc_14C64
0001887E                            
0001887E D2FC 0020                  		adda.w	#$20,a1
00018882 51CB FFD8                  		dbf	d3,loc_14C5E
00018886                            
00018886 43F9 0000 0000             		lea	(CollArray1).l,a1
0001888C 45F9 0000 0000             		lea	(CollArray2).l,a2
00018892 6100                       		bsr.s	FloorLog_Unk2
00018894 43F9 0000 0000             		lea	(CollArray1).l,a1
0001889A 45F9 0000 0000             		lea	(CollArray1).l,a2
000188A0                            
000188A0                            ; End of function FloorLog_Unk
000188A0                            
000188A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000188A0                            
000188A0                            
000188A0                            FloorLog_Unk2:
000188A0 363C 0FFF                  		move.w	#$FFF,d3
000188A4                            
000188A4                            loc_14CA6:
000188A4 7400                       		moveq	#0,d2
000188A6 323C 000F                  		move.w	#$F,d1
000188AA 3019                       		move.w	(a1)+,d0
000188AC 6700                       		beq.s	loc_14CD4
000188AE 6B00                       		bmi.s	loc_14CBE
000188B0                            
000188B0                            loc_14CB2:
000188B0 E248                       		lsr.w	#1,d0
000188B2 6400                       		bhs.s	loc_14CB8
000188B4 5202                       		addq.b	#1,d2
000188B6                            
000188B6                            loc_14CB8:
000188B6 51C9 FFF8                  		dbf	d1,loc_14CB2
000188BA                            
000188BA 6000                       		bra.s	loc_14CD6
000188BC                            ; ===========================================================================
000188BC                            
000188BC                            loc_14CBE:
000188BC 0C40 FFFF                  		cmpi.w	#-1,d0
000188C0 6700                       		beq.s	loc_14CD0
000188C2                            
000188C2                            loc_14CC4:
000188C2 E348                       		lsl.w	#1,d0
000188C4 6400                       		bhs.s	loc_14CCA
000188C6 5302                       		subq.b	#1,d2
000188C8                            
000188C8                            loc_14CCA:
000188C8 51C9 FFF8                  		dbf	d1,loc_14CC4
000188CC                            
000188CC 6000                       		bra.s	loc_14CD6
000188CE                            ; ===========================================================================
000188CE                            
000188CE                            loc_14CD0:
000188CE 303C 0010                  		move.w	#$10,d0
000188D2                            
000188D2                            loc_14CD4:
000188D2 3400                       		move.w	d0,d2
000188D4                            
000188D4                            loc_14CD6:
000188D4 14C2                       		move.b	d2,(a2)+
000188D6 51CB FFCC                  		dbf	d3,loc_14CA6
000188DA                            
000188DA 4E75                       		rts	
000188DC                            
000188DC                            ; End of function FloorLog_Unk2
000188DC                            
000188DC                            
000188DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000188DC                            
000188DC                            
000188DC                            Sonic_WalkSpeed:
000188DC 2628 0008                  		move.l	obX(a0),d3
000188E0 2428 000C                  		move.l	obY(a0),d2
000188E4 3228 0010                  		move.w	obVelX(a0),d1
000188E8 48C1                       		ext.l	d1
000188EA E181                       		asl.l	#8,d1
000188EC D681                       		add.l	d1,d3
000188EE 3228 0012                  		move.w	obVelY(a0),d1
000188F2 48C1                       		ext.l	d1
000188F4 E181                       		asl.l	#8,d1
000188F6 D481                       		add.l	d1,d2
000188F8 4842                       		swap	d2
000188FA 4843                       		swap	d3
000188FC 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00018900 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00018904 1200                       		move.b	d0,d1
00018906 0600 0020                  		addi.b	#$20,d0
0001890A 6A00                       		bpl.s	loc_14D1A
0001890C 1001                       		move.b	d1,d0
0001890E 6A00                       		bpl.s	loc_14D14
00018910 5300                       		subq.b	#1,d0
00018912                            
00018912                            loc_14D14:
00018912 0600 0020                  		addi.b	#$20,d0
00018916 6000                       		bra.s	loc_14D24
00018918                            ; ===========================================================================
00018918                            
00018918                            loc_14D1A:
00018918 1001                       		move.b	d1,d0
0001891A 6A00                       		bpl.s	loc_14D20
0001891C 5200                       		addq.b	#1,d0
0001891E                            
0001891E                            loc_14D20:
0001891E 0600 001F                  		addi.b	#$1F,d0
00018922                            
00018922                            loc_14D24:
00018922 0200 00C0                  		andi.b	#$C0,d0
00018926 6700 0000                  		beq.w	loc_14DF0
0001892A 0C00 0080                  		cmpi.b	#$80,d0
0001892E 6700 0000                  		beq.w	loc_14F7C
00018932 0201 0038                  		andi.b	#$38,d1
00018936 6600                       		bne.s	loc_14D3C
00018938 5042                       		addq.w	#8,d2
0001893A                            
0001893A                            loc_14D3C:
0001893A 0C00 0040                  		cmpi.b	#$40,d0
0001893E 6700 0000                  		beq.w	loc_1504A
00018942 6000 0000                  		bra.w	loc_14EBC
00018946                            
00018946                            ; End of function Sonic_WalkSpeed
00018946                            
00018946                            
00018946                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018946                            
00018946                            
00018946                            sub_14D48:
00018946 11C0 F768                  		move.b	d0,(v_anglebuffer).w
0001894A 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001894E 0600 0020                  		addi.b	#$20,d0
00018952 0200 00C0                  		andi.b	#$C0,d0
00018956 0C00 0040                  		cmpi.b	#$40,d0
0001895A 6700 0000                  		beq.w	loc_14FD6
0001895E 0C00 0080                  		cmpi.b	#$80,d0
00018962 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00018966 0C00 00C0                  		cmpi.b	#$C0,d0
0001896A 6700 0000                  		beq.w	sub_14E50
0001896E                            
0001896E                            ; End of function sub_14D48
0001896E                            
0001896E                            ; ---------------------------------------------------------------------------
0001896E                            ; Subroutine to	make Sonic land	on the floor after jumping
0001896E                            ; ---------------------------------------------------------------------------
0001896E                            
0001896E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001896E                            
0001896E                            
0001896E                            Sonic_HitFloor:
0001896E 3428 000C                  		move.w	obY(a0),d2
00018972 3628 0008                  		move.w	obX(a0),d3
00018976 7000                       		moveq	#0,d0
00018978 1028 0016                  		move.b	obHeight(a0),d0
0001897C 4880                       		ext.w	d0
0001897E D440                       		add.w	d0,d2
00018980 1028 0017                  		move.b	obWidth(a0),d0
00018984 4880                       		ext.w	d0
00018986 D640                       		add.w	d0,d3
00018988 49F8 F768                  		lea	(v_anglebuffer).w,a4
0001898C 367C 0010                  		movea.w	#$10,a3
00018990 3C3C 0000                  		move.w	#0,d6
00018994 7A0D                       		moveq	#$D,d5
00018996 6100 FC34                  		bsr.w	FindFloor
0001899A 3F01                       		move.w	d1,-(sp)
0001899C 3428 000C                  		move.w	obY(a0),d2
000189A0 3628 0008                  		move.w	obX(a0),d3
000189A4 7000                       		moveq	#0,d0
000189A6 1028 0016                  		move.b	obHeight(a0),d0
000189AA 4880                       		ext.w	d0
000189AC D440                       		add.w	d0,d2
000189AE 1028 0017                  		move.b	obWidth(a0),d0
000189B2 4880                       		ext.w	d0
000189B4 9640                       		sub.w	d0,d3
000189B6 49F8 F76A                  		lea	($FFFFF76A).w,a4
000189BA 367C 0010                  		movea.w	#$10,a3
000189BE 3C3C 0000                  		move.w	#0,d6
000189C2 7A0D                       		moveq	#$D,d5
000189C4 6100 FC06                  		bsr.w	FindFloor
000189C8 301F                       		move.w	(sp)+,d0
000189CA 143C 0000                  		move.b	#0,d2
000189CE                            
000189CE                            loc_14DD0:
000189CE 1638 F76A                  		move.b	($FFFFF76A).w,d3
000189D2 B240                       		cmp.w	d0,d1
000189D4 6F00                       		ble.s	loc_14DDE
000189D6 1638 F768                  		move.b	(v_anglebuffer).w,d3
000189DA C141                       		exg	d0,d1
000189DC                            
000189DC                            loc_14DDE:
000189DC 0803 0000                  		btst	#0,d3
000189E0 6700                       		beq.s	locret_14DE6
000189E2 1602                       		move.b	d2,d3
000189E4                            
000189E4                            locret_14DE6:
000189E4 4E75                       		rts	
000189E6                            
000189E6                            ; End of function Sonic_HitFloor
000189E6                            
000189E6                            ; ===========================================================================
000189E6 3428 000C                  		move.w	obY(a0),d2
000189EA 3628 0008                  		move.w	obX(a0),d3
000189EE                            
000189EE                            loc_14DF0:
000189EE 0642 000A                  		addi.w	#$A,d2
000189F2 49F8 F768                  		lea	(v_anglebuffer).w,a4
000189F6 367C 0010                  		movea.w	#$10,a3
000189FA 3C3C 0000                  		move.w	#0,d6
000189FE 7A0E                       		moveq	#$E,d5
00018A00 6100 FBCA                  		bsr.w	FindFloor
00018A04 143C 0000                  		move.b	#0,d2
00018A08                            
00018A08                            loc_14E0A:
00018A08 1638 F768                  		move.b	(v_anglebuffer).w,d3
00018A0C 0803 0000                  		btst	#0,d3
00018A10 6700                       		beq.s	locret_14E16
00018A12 1602                       		move.b	d2,d3
00018A14                            
00018A14                            locret_14E16:
00018A14 4E75                       		rts	
00018A16                            
00018A16                            		include	"_incObj\sub ObjFloorDist.asm"
00018A16                            ; ---------------------------------------------------------------------------
00018A16                            ; Subroutine to find the distance of an object to the floor
00018A16                            
00018A16                            ; input:
00018A16                            ;	d3 = x-pos. of object (ObjFloorDist2 only)
00018A16                            
00018A16                            ; output:
00018A16                            ;	d1 = distance to the floor
00018A16                            ;	d3 = floor angle
00018A16                            ;	a1 = address within 256x256 mappings where object is standing
00018A16                            ;	     (refers to a 16x16 tile number)
00018A16                            ;	(a4) = floor angle
00018A16                            ; ---------------------------------------------------------------------------
00018A16                            
00018A16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018A16                            
00018A16                            
00018A16                            ObjFloorDist:
00018A16 3628 0008                  		move.w	obX(a0),d3
00018A1A                            
00018A1A                            
00018A1A                            ObjFloorDist2:
00018A1A 3428 000C                  		move.w	obY(a0),d2
00018A1E 7000                       		moveq	#0,d0
00018A20 1028 0016                  		move.b	obHeight(a0),d0
00018A24 4880                       		ext.w	d0
00018A26 D440                       		add.w	d0,d2
00018A28 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018A2C 18BC 0000                  		move.b	#0,(a4)
00018A30 367C 0010                  		movea.w	#$10,a3		; height of a 16x16 tile
00018A34 3C3C 0000                  		move.w	#0,d6
00018A38 7A0D                       		moveq	#$D,d5		; bit to test for solidness
00018A3A 6100 FB90                  		bsr.w	FindFloor
00018A3E 1638 F768                  		move.b	(v_anglebuffer).w,d3
00018A42 0803 0000                  		btst	#0,d3
00018A46 6700                       		beq.s	locret_14E4E
00018A48 163C 0000                  		move.b	#0,d3
00018A4C                            
00018A4C                            	locret_14E4E:
00018A4C 4E75                       		rts	
00018A4E                            
00018A4E                            ; End of function ObjFloorDist2
00018A4E                            ; End of function ObjFloorDist2
00018A4E                            
00018A4E                            
00018A4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018A4E                            
00018A4E                            
00018A4E                            sub_14E50:
00018A4E 3428 000C                  		move.w	obY(a0),d2
00018A52 3628 0008                  		move.w	obX(a0),d3
00018A56 7000                       		moveq	#0,d0
00018A58 1028 0017                  		move.b	obWidth(a0),d0
00018A5C 4880                       		ext.w	d0
00018A5E 9440                       		sub.w	d0,d2
00018A60 1028 0016                  		move.b	obHeight(a0),d0
00018A64 4880                       		ext.w	d0
00018A66 D640                       		add.w	d0,d3
00018A68 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018A6C 367C 0010                  		movea.w	#$10,a3
00018A70 3C3C 0000                  		move.w	#0,d6
00018A74 7A0E                       		moveq	#$E,d5
00018A76 6100 FC92                  		bsr.w	FindWall
00018A7A 3F01                       		move.w	d1,-(sp)
00018A7C 3428 000C                  		move.w	obY(a0),d2
00018A80 3628 0008                  		move.w	obX(a0),d3
00018A84 7000                       		moveq	#0,d0
00018A86 1028 0017                  		move.b	obWidth(a0),d0
00018A8A 4880                       		ext.w	d0
00018A8C D440                       		add.w	d0,d2
00018A8E 1028 0016                  		move.b	obHeight(a0),d0
00018A92 4880                       		ext.w	d0
00018A94 D640                       		add.w	d0,d3
00018A96 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018A9A 367C 0010                  		movea.w	#$10,a3
00018A9E 3C3C 0000                  		move.w	#0,d6
00018AA2 7A0E                       		moveq	#$E,d5
00018AA4 6100 FC64                  		bsr.w	FindWall
00018AA8 301F                       		move.w	(sp)+,d0
00018AAA 143C 00C0                  		move.b	#-$40,d2
00018AAE 6000 FF1E                  		bra.w	loc_14DD0
00018AB2                            
00018AB2                            ; End of function sub_14E50
00018AB2                            
00018AB2                            
00018AB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018AB2                            
00018AB2                            
00018AB2                            sub_14EB4:
00018AB2 3428 000C                  		move.w	obY(a0),d2
00018AB6 3628 0008                  		move.w	obX(a0),d3
00018ABA                            
00018ABA                            loc_14EBC:
00018ABA 0643 000A                  		addi.w	#$A,d3
00018ABE 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018AC2 367C 0010                  		movea.w	#$10,a3
00018AC6 3C3C 0000                  		move.w	#0,d6
00018ACA 7A0E                       		moveq	#$E,d5
00018ACC 6100 FC3C                  		bsr.w	FindWall
00018AD0 143C 00C0                  		move.b	#-$40,d2
00018AD4 6000 FF32                  		bra.w	loc_14E0A
00018AD8                            
00018AD8                            ; End of function sub_14EB4
00018AD8                            
00018AD8                            ; ---------------------------------------------------------------------------
00018AD8                            ; Subroutine to	detect when an object hits a wall to its right
00018AD8                            ; ---------------------------------------------------------------------------
00018AD8                            
00018AD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018AD8                            
00018AD8                            
00018AD8                            ObjHitWallRight:
00018AD8 D668 0008                  		add.w	obX(a0),d3
00018ADC 3428 000C                  		move.w	obY(a0),d2
00018AE0 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018AE4 18BC 0000                  		move.b	#0,(a4)
00018AE8 367C 0010                  		movea.w	#$10,a3
00018AEC 3C3C 0000                  		move.w	#0,d6
00018AF0 7A0E                       		moveq	#$E,d5
00018AF2 6100 FC16                  		bsr.w	FindWall
00018AF6 1638 F768                  		move.b	(v_anglebuffer).w,d3
00018AFA 0803 0000                  		btst	#0,d3
00018AFE 6700                       		beq.s	locret_14F06
00018B00 163C 00C0                  		move.b	#-$40,d3
00018B04                            
00018B04                            locret_14F06:
00018B04 4E75                       		rts	
00018B06                            
00018B06                            ; End of function ObjHitWallRight
00018B06                            
00018B06                            ; ---------------------------------------------------------------------------
00018B06                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00018B06                            ; touches them
00018B06                            ; ---------------------------------------------------------------------------
00018B06                            
00018B06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018B06                            
00018B06                            
00018B06                            Sonic_DontRunOnWalls:
00018B06 3428 000C                  		move.w	obY(a0),d2
00018B0A 3628 0008                  		move.w	obX(a0),d3
00018B0E 7000                       		moveq	#0,d0
00018B10 1028 0016                  		move.b	obHeight(a0),d0
00018B14 4880                       		ext.w	d0
00018B16 9440                       		sub.w	d0,d2
00018B18 0A42 000F                  		eori.w	#$F,d2
00018B1C 1028 0017                  		move.b	obWidth(a0),d0
00018B20 4880                       		ext.w	d0
00018B22 D640                       		add.w	d0,d3
00018B24 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018B28 367C FFF0                  		movea.w	#-$10,a3
00018B2C 3C3C 1000                  		move.w	#$1000,d6
00018B30 7A0E                       		moveq	#$E,d5
00018B32 6100 FA98                  		bsr.w	FindFloor
00018B36 3F01                       		move.w	d1,-(sp)
00018B38 3428 000C                  		move.w	obY(a0),d2
00018B3C 3628 0008                  		move.w	obX(a0),d3
00018B40 7000                       		moveq	#0,d0
00018B42 1028 0016                  		move.b	obHeight(a0),d0
00018B46 4880                       		ext.w	d0
00018B48 9440                       		sub.w	d0,d2
00018B4A 0A42 000F                  		eori.w	#$F,d2
00018B4E 1028 0017                  		move.b	obWidth(a0),d0
00018B52 4880                       		ext.w	d0
00018B54 9640                       		sub.w	d0,d3
00018B56 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018B5A 367C FFF0                  		movea.w	#-$10,a3
00018B5E 3C3C 1000                  		move.w	#$1000,d6
00018B62 7A0E                       		moveq	#$E,d5
00018B64 6100 FA66                  		bsr.w	FindFloor
00018B68 301F                       		move.w	(sp)+,d0
00018B6A 143C 0080                  		move.b	#-$80,d2
00018B6E 6000 FE5E                  		bra.w	loc_14DD0
00018B72                            ; End of function Sonic_DontRunOnWalls
00018B72                            
00018B72                            ; ===========================================================================
00018B72 3428 000C                  		move.w	obY(a0),d2
00018B76 3628 0008                  		move.w	obX(a0),d3
00018B7A                            
00018B7A                            loc_14F7C:
00018B7A 0442 000A                  		subi.w	#$A,d2
00018B7E 0A42 000F                  		eori.w	#$F,d2
00018B82 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018B86 367C FFF0                  		movea.w	#-$10,a3
00018B8A 3C3C 1000                  		move.w	#$1000,d6
00018B8E 7A0E                       		moveq	#$E,d5
00018B90 6100 FA3A                  		bsr.w	FindFloor
00018B94 143C 0080                  		move.b	#-$80,d2
00018B98 6000 FE6E                  		bra.w	loc_14E0A
00018B9C                            
00018B9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018B9C                            
00018B9C                            
00018B9C                            ObjHitCeiling:
00018B9C 3428 000C                  		move.w	obY(a0),d2
00018BA0 3628 0008                  		move.w	obX(a0),d3
00018BA4 7000                       		moveq	#0,d0
00018BA6 1028 0016                  		move.b	obHeight(a0),d0
00018BAA 4880                       		ext.w	d0
00018BAC 9440                       		sub.w	d0,d2
00018BAE 0A42 000F                  		eori.w	#$F,d2
00018BB2 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018BB6 367C FFF0                  		movea.w	#-$10,a3
00018BBA 3C3C 1000                  		move.w	#$1000,d6
00018BBE 7A0E                       		moveq	#$E,d5
00018BC0 6100 FA0A                  		bsr.w	FindFloor
00018BC4 1638 F768                  		move.b	(v_anglebuffer).w,d3
00018BC8 0803 0000                  		btst	#0,d3
00018BCC 6700                       		beq.s	locret_14FD4
00018BCE 163C 0080                  		move.b	#-$80,d3
00018BD2                            
00018BD2                            locret_14FD4:
00018BD2 4E75                       		rts	
00018BD4                            ; End of function ObjHitCeiling
00018BD4                            
00018BD4                            ; ===========================================================================
00018BD4                            
00018BD4                            loc_14FD6:
00018BD4 3428 000C                  		move.w	obY(a0),d2
00018BD8 3628 0008                  		move.w	obX(a0),d3
00018BDC 7000                       		moveq	#0,d0
00018BDE 1028 0017                  		move.b	obWidth(a0),d0
00018BE2 4880                       		ext.w	d0
00018BE4 9440                       		sub.w	d0,d2
00018BE6 1028 0016                  		move.b	obHeight(a0),d0
00018BEA 4880                       		ext.w	d0
00018BEC 9640                       		sub.w	d0,d3
00018BEE 0A43 000F                  		eori.w	#$F,d3
00018BF2 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018BF6 367C FFF0                  		movea.w	#-$10,a3
00018BFA 3C3C 0800                  		move.w	#$800,d6
00018BFE 7A0E                       		moveq	#$E,d5
00018C00 6100 FB08                  		bsr.w	FindWall
00018C04 3F01                       		move.w	d1,-(sp)
00018C06 3428 000C                  		move.w	obY(a0),d2
00018C0A 3628 0008                  		move.w	obX(a0),d3
00018C0E 7000                       		moveq	#0,d0
00018C10 1028 0017                  		move.b	obWidth(a0),d0
00018C14 4880                       		ext.w	d0
00018C16 D440                       		add.w	d0,d2
00018C18 1028 0016                  		move.b	obHeight(a0),d0
00018C1C 4880                       		ext.w	d0
00018C1E 9640                       		sub.w	d0,d3
00018C20 0A43 000F                  		eori.w	#$F,d3
00018C24 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018C28 367C FFF0                  		movea.w	#-$10,a3
00018C2C 3C3C 0800                  		move.w	#$800,d6
00018C30 7A0E                       		moveq	#$E,d5
00018C32 6100 FAD6                  		bsr.w	FindWall
00018C36 301F                       		move.w	(sp)+,d0
00018C38 143C 0040                  		move.b	#$40,d2
00018C3C 6000 FD90                  		bra.w	loc_14DD0
00018C40                            
00018C40                            ; ---------------------------------------------------------------------------
00018C40                            ; Subroutine to	stop Sonic when	he jumps at a wall
00018C40                            ; ---------------------------------------------------------------------------
00018C40                            
00018C40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018C40                            
00018C40                            
00018C40                            Sonic_HitWall:
00018C40 3428 000C                  		move.w	obY(a0),d2
00018C44 3628 0008                  		move.w	obX(a0),d3
00018C48                            
00018C48                            loc_1504A:
00018C48 0443 000A                  		subi.w	#$A,d3
00018C4C 0A43 000F                  		eori.w	#$F,d3
00018C50 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018C54 367C FFF0                  		movea.w	#-$10,a3
00018C58 3C3C 0800                  		move.w	#$800,d6
00018C5C 7A0E                       		moveq	#$E,d5
00018C5E 6100 FAAA                  		bsr.w	FindWall
00018C62 143C 0040                  		move.b	#$40,d2
00018C66 6000 FDA0                  		bra.w	loc_14E0A
00018C6A                            ; End of function Sonic_HitWall
00018C6A                            
00018C6A                            ; ---------------------------------------------------------------------------
00018C6A                            ; Subroutine to	detect when an object hits a wall to its left
00018C6A                            ; ---------------------------------------------------------------------------
00018C6A                            
00018C6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018C6A                            
00018C6A                            
00018C6A                            ObjHitWallLeft:
00018C6A D668 0008                  		add.w	obX(a0),d3
00018C6E 3428 000C                  		move.w	obY(a0),d2
00018C72                            		; Engine bug: colliding with left walls is erratic with this function.
00018C72                            		; The cause is this: a missing instruction to flip collision on the found
00018C72                            		; 16x16 block; this one:
00018C72                            		;eori.w	#$F,d3
00018C72 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018C76 18BC 0000                  		move.b	#0,(a4)
00018C7A 367C FFF0                  		movea.w	#-$10,a3
00018C7E 3C3C 0800                  		move.w	#$800,d6
00018C82 7A0E                       		moveq	#$E,d5
00018C84 6100 FA84                  		bsr.w	FindWall
00018C88 1638 F768                  		move.b	(v_anglebuffer).w,d3
00018C8C 0803 0000                  		btst	#0,d3
00018C90 6700                       		beq.s	locret_15098
00018C92 163C 0040                  		move.b	#$40,d3
00018C96                            
00018C96                            locret_15098:
00018C96 4E75                       		rts	
00018C98                            ; End of function ObjHitWallLeft
00018C98                            
00018C98                            ; ===========================================================================
00018C98                            
00018C98                            		include	"_incObj\66 Rotating Junction.asm"
00018C98                            ; ---------------------------------------------------------------------------
00018C98                            ; Object 66 - rotating disc junction that grabs Sonic (SBZ)
00018C98                            ; ---------------------------------------------------------------------------
00018C98                            
00018C98                            Junction:
00018C98 7000                       		moveq	#0,d0
00018C9A 1028 0024                  		move.b	obRoutine(a0),d0
00018C9E 323B 0000                  		move.w	Jun_Index(pc,d0.w),d1
00018CA2 4EFB 1000                  		jmp	Jun_Index(pc,d1.w)
00018CA6                            ; ===========================================================================
00018CA6 0000                       Jun_Index:	dc.w Jun_Main-Jun_Index
00018CA8 0000                       		dc.w Jun_Action-Jun_Index
00018CAA 0000                       		dc.w Jun_Display-Jun_Index
00018CAC 0000                       		dc.w Jun_Release-Jun_Index
00018CAE                            
00018CAE =00000034                  jun_frame:	equ $34		; current frame
00018CAE =00000036                  jun_reverse:	equ $36		; flag set when switch is pressed
00018CAE =00000038                  jun_switch:	equ $38		; which switch will reverse the disc
00018CAE                            ; ===========================================================================
00018CAE                            
00018CAE                            Jun_Main:	; Routine 0
00018CAE 5428 0024                  		addq.b	#2,obRoutine(a0)
00018CB2 323C 0001                  		move.w	#1,d1
00018CB6 2248                       		movea.l	a0,a1
00018CB8 6000                       		bra.s	@makeitem
00018CBA                            ; ===========================================================================
00018CBA                            
00018CBA                            	@repeat:
00018CBA 4EB9 0000 FDC8             		jsr	FindFreeObj
00018CC0 6600                       		bne.s	@fail
00018CC2 12BC 0066                  		move.b	#id_Junction,0(a1)
00018CC6 5829 0024                  		addq.b	#4,obRoutine(a1) ; goto Jun_Display next
00018CCA 3368 0008 0008             		move.w	obX(a0),obX(a1)
00018CD0 3368 000C 000C             		move.w	obY(a0),obY(a1)
00018CD6 337C 0180 0018             		move.w	#$180,obPriority(a1)
00018CDC 137C 0010 001A             		move.b	#$10,obFrame(a1) ; use large circular sprite
00018CE2                            
00018CE2                            @makeitem:
00018CE2 237C 0000 0000 0004        		move.l	#Map_Jun,obMap(a1)
00018CEA 337C 4348 0002             		move.w	#$4348,obGfx(a1)
00018CF0 0029 0004 0001             		ori.b	#4,obRender(a1)
00018CF6 137C 0038 0014             		move.b	#$38,obActWid(a1)
00018CFC                            
00018CFC                            	@fail:
00018CFC 51C9 FFBC                  		dbf	d1,@repeat
00018D00                            
00018D00 117C 0030 0014             		move.b	#$30,obActWid(a0)
00018D06 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018D0C 317C 003C 0030             		move.w	#$3C,$30(a0)
00018D12 117C 0001 0034             		move.b	#1,jun_frame(a0)
00018D18 1168 0028 0038             		move.b	obSubtype(a0),jun_switch(a0)
00018D1E                            
00018D1E                            Jun_Action:	; Routine 2
00018D1E 6100 0000                  		bsr.w	Jun_ChkSwitch
00018D22 4A28 0001                  		tst.b	obRender(a0)
00018D26 6A00 0000                  		bpl.w	Jun_Display
00018D2A 323C 0030                  		move.w	#$30,d1
00018D2E 3401                       		move.w	d1,d2
00018D30 3602                       		move.w	d2,d3
00018D32 5243                       		addq.w	#1,d3
00018D34 3828 0008                  		move.w	obX(a0),d4
00018D38 6100 9040                  		bsr.w	SolidObject
00018D3C 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing the disc?
00018D42 6700 0000                  		beq.w	Jun_Display	; if not, branch
00018D46                            
00018D46 43F8 D000                  		lea	(v_player).w,a1
00018D4A 720E                       		moveq	#$E,d1
00018D4C 3029 0008                  		move.w	obX(a1),d0
00018D50 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic to the left of the disc?
00018D54 6500                       		bcs.s	@isleft		; if yes, branch
00018D56 7207                       		moveq	#7,d1		
00018D58                            
00018D58                            	@isleft:
00018D58 B228 001A                  		cmp.b	obFrame(a0),d1	; is the gap next to Sonic?
00018D5C 6600                       		bne.s	Jun_Display	; if not, branch
00018D5E                            
00018D5E 1141 0032                  		move.b	d1,$32(a0)
00018D62 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Jun_Release next
00018D66 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
00018D6C 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic use "rolling" animation
00018D72 337C 0800 0020             		move.w	#$800,obInertia(a1)
00018D78 337C 0000 0010             		move.w	#0,obVelX(a1)
00018D7E 337C 0000 0012             		move.w	#0,obVelY(a1)
00018D84 08A8 0005 0022             		bclr	#5,obStatus(a0)
00018D8A 08A9 0005 0022             		bclr	#5,obStatus(a1)
00018D90 08E9 0001 0022             		bset	#1,obStatus(a1)
00018D96 3429 0008                  		move.w	obX(a1),d2
00018D9A 3629 000C                  		move.w	obY(a1),d3
00018D9E 6100 0000                  		bsr.w	Jun_ChgPos
00018DA2 D569 0008                  		add.w	d2,obX(a1)
00018DA6 D769 000C                  		add.w	d3,obY(a1)
00018DAA E0E9 0008                  		asr	obX(a1)
00018DAE E0E9 000C                  		asr	obY(a1)
00018DB2                            
00018DB2                            Jun_Display:	; Routine 4
00018DB2 6000 8B2E                  		bra.w	RememberState
00018DB6                            ; ===========================================================================
00018DB6                            
00018DB6                            Jun_Release:	; Routine 6
00018DB6 1028 001A                  		move.b	obFrame(a0),d0
00018DBA 0C00 0004                  		cmpi.b	#4,d0		; is gap pointing down?
00018DBE 6700                       		beq.s	@release	; if yes, branch
00018DC0 0C00 0007                  		cmpi.b	#7,d0		; is gap pointing right?
00018DC4 6600                       		bne.s	@dontrelease	; if not, branch
00018DC6                            
00018DC6                            	@release:
00018DC6 B028 0032                  		cmp.b	$32(a0),d0
00018DCA 6700                       		beq.s	@dontrelease
00018DCC 43F8 D000                  		lea	(v_player).w,a1
00018DD0 337C 0000 0010             		move.w	#0,obVelX(a1)
00018DD6 337C 0800 0012             		move.w	#$800,obVelY(a1)
00018DDC 0C00 0004                  		cmpi.b	#4,d0
00018DE0 6700                       		beq.s	@isdown
00018DE2 337C 0800 0010             		move.w	#$800,obVelX(a1)
00018DE8 337C 0800 0012             		move.w	#$800,obVelY(a1)
00018DEE                            
00018DEE                            	@isdown:
00018DEE 4238 F7C8                  		clr.b	(f_lockmulti).w	; unlock controls
00018DF2 5928 0024                  		subq.b	#4,obRoutine(a0)
00018DF6                            
00018DF6                            	@dontrelease:
00018DF6 6100                       		bsr.s	Jun_ChkSwitch
00018DF8 6100                       		bsr.s	Jun_ChgPos
00018DFA 6000 8AE6                  		bra.w	RememberState
00018DFE                            
00018DFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018DFE                            
00018DFE                            
00018DFE                            Jun_ChkSwitch:
00018DFE 45F8 F7E0                  		lea	(f_switch).w,a2
00018E02 7000                       		moveq	#0,d0
00018E04 1028 0038                  		move.b	jun_switch(a0),d0
00018E08 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00018E0E 6700                       		beq.s	@unpressed	; if not, branch
00018E10                            
00018E10 4A28 0036                  		tst.b	jun_reverse(a0)	; has switch previously	been pressed?
00018E14 6600                       		bne.s	@animate	; if yes, branch
00018E16 4428 0034                  		neg.b	jun_frame(a0)
00018E1A 117C 0001 0036             		move.b	#1,jun_reverse(a0) ; set to "previously pressed"
00018E20 6000                       		bra.s	@animate
00018E22                            ; ===========================================================================
00018E22                            
00018E22                            @unpressed:
00018E22 4228 0036                  		clr.b	jun_reverse(a0)	; set to "not yet pressed"
00018E26                            
00018E26                            @animate:
00018E26 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement frame timer
00018E2A 6A00                       		bpl.s	@nochange	; if time remains, branch
00018E2C 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00018E32 1228 0034                  		move.b	jun_frame(a0),d1
00018E36 1028 001A                  		move.b	obFrame(a0),d0
00018E3A D001                       		add.b	d1,d0
00018E3C 0200 000F                  		andi.b	#$F,d0
00018E40 1140 001A                  		move.b	d0,obFrame(a0)	; update frame
00018E44                            
00018E44                            	@nochange:
00018E44 4E75                       		rts	
00018E46                            ; End of function Jun_ChkSwitch
00018E46                            
00018E46                            
00018E46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018E46                            
00018E46                            
00018E46                            Jun_ChgPos:
00018E46 43F8 D000                  		lea	(v_player).w,a1
00018E4A 7000                       		moveq	#0,d0
00018E4C 1028 001A                  		move.b	obFrame(a0),d0
00018E50 D040                       		add.w	d0,d0
00018E52 45FB 0000                  		lea	@data(pc,d0.w),a2
00018E56 101A                       		move.b	(a2)+,d0
00018E58 4880                       		ext.w	d0
00018E5A D068 0008                  		add.w	obX(a0),d0
00018E5E 3340 0008                  		move.w	d0,obX(a1)
00018E62 101A                       		move.b	(a2)+,d0
00018E64 4880                       		ext.w	d0
00018E66 D068 000C                  		add.w	obY(a0),d0
00018E6A 3340 000C                  		move.w	d0,obY(a1)
00018E6E 4E75                       		rts	
00018E70                            
00018E70                            
00018E70 E000 E20E                  @data:		dc.b -$20,    0, -$1E,   $E ; disc x-pos, Sonic x-pos, disc y-pos, Sonic y-pos
00018E74 E818 F21E                  		dc.b -$18,  $18,  -$E,  $1E
00018E78 0020 0E1E                  		dc.b    0,  $20,   $E,  $1E
00018E7C 1818 1E0E                  		dc.b  $18,  $18,  $1E,   $E
00018E80 2000 1EF2                  		dc.b  $20,    0,  $1E,  -$E
00018E84 18E8 0EE2                  		dc.b  $18, -$18,   $E, -$1E
00018E88 00E0 F2E2                  		dc.b    0, -$20,  -$E, -$1E
00018E8C E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
00018E8C E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
00018E90                            Map_Jun:	include	"_maps\Rotating Junction.asm"
00018E90                            ; ---------------------------------------------------------------------------
00018E90                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00018E90                            ; ---------------------------------------------------------------------------
00018E90                            Map_Jun_internal:
00018E90 0000                       		dc.w @gap0-Map_Jun_internal
00018E92 0000                       		dc.w @gap1-Map_Jun_internal
00018E94 0000                       		dc.w @gap2-Map_Jun_internal
00018E96 0000                       		dc.w @gap3-Map_Jun_internal
00018E98 0000                       		dc.w @gap4-Map_Jun_internal
00018E9A 0000                       		dc.w @gap5-Map_Jun_internal
00018E9C 0000                       		dc.w @gap6-Map_Jun_internal
00018E9E 0000                       		dc.w @gap7-Map_Jun_internal
00018EA0 0000                       		dc.w @gap8-Map_Jun_internal
00018EA2 0000                       		dc.w @gap9-Map_Jun_internal
00018EA4 0000                       		dc.w @gapA-Map_Jun_internal
00018EA6 0000                       		dc.w @gapB-Map_Jun_internal
00018EA8 0000                       		dc.w @gapC-Map_Jun_internal
00018EAA 0000                       		dc.w @gapD-Map_Jun_internal
00018EAC 0000                       		dc.w @gapE-Map_Jun_internal
00018EAE 0000                       		dc.w @gapF-Map_Jun_internal
00018EB0 0000                       		dc.w @circle-Map_Jun_internal
00018EB2 06                         @gap0:		dc.b 6
00018EB3 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00018EB8 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00018EBD E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00018EC2 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00018EC7 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00018ECC 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00018ED1 06                         @gap1:		dc.b 6
00018ED2 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00018ED7 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00018EDC F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00018EE1 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00018EE6 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00018EEB 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00018EF0 06                         @gap2:		dc.b 6
00018EF1 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00018EF6 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00018EFB 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00018F00 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00018F05 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00018F0A 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00018F0F 06                         @gap3:		dc.b 6
00018F10 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00018F15 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00018F1A 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00018F1F 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00018F24 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00018F29 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00018F2E 06                         @gap4:		dc.b 6
00018F2F 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00018F34 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00018F39 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00018F3E 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00018F43 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00018F48 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00018F4D 06                         @gap5:		dc.b 6
00018F4E 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00018F53 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00018F58 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00018F5D 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00018F62 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00018F67 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00018F6C 06                         @gap6:		dc.b 6
00018F6D 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00018F72 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00018F77 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00018F7C 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00018F81 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00018F86 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00018F8B 06                         @gap7:		dc.b 6
00018F8C 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00018F91 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00018F96 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00018F9B F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00018FA0 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00018FA5 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00018FAA 06                         @gap8:		dc.b 6
00018FAB E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00018FB0 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00018FB5 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00018FBA E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00018FBF 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00018FC4 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00018FC9 06                         @gap9:		dc.b 6
00018FCA D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00018FCF E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00018FD4 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00018FD9 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00018FDE F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00018FE3 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00018FE8 06                         @gapA:		dc.b 6
00018FE9 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00018FEE E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00018FF3 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00018FF8 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00018FFD E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00019002 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00019007 06                         @gapB:		dc.b 6
00019008 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
0001900D D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00019012 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00019017 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
0001901C E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00019021 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00019026 06                         @gapC:		dc.b 6
00019027 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
0001902C D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00019031 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00019036 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
0001903B E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00019040 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00019045 06                         @gapD:		dc.b 6
00019046 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
0001904B D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00019050 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00019055 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
0001905A E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
0001905F E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00019064 06                         @gapE:		dc.b 6
00019065 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
0001906A D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
0001906F D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00019074 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00019079 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
0001907E E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00019083 06                         @gapF:		dc.b 6
00019084 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00019089 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
0001908E DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00019093 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00019098 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
0001909D F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
000190A2 0C                         @circle:	dc.b $C
000190A3 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
000190A8 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
000190AD E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
000190B2 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
000190B7 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
000190BC E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
000190C1 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
000190C6 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
000190CB 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
000190D0 280D 1809 00               		dc.b $28, $D, $18, 9, 0
000190D5 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
000190DA 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
000190E0 00                         		even
000190E0 00                         		even
000190E0                            		include	"_incObj\67 Running Disc.asm"
000190E0                            ; ---------------------------------------------------------------------------
000190E0                            ; Object 67 - disc that	you run	around (SBZ)
000190E0                            ; ---------------------------------------------------------------------------
000190E0                            
000190E0                            RunningDisc:
000190E0 7000                       		moveq	#0,d0
000190E2 1028 0024                  		move.b	obRoutine(a0),d0
000190E6 323B 0000                  		move.w	Disc_Index(pc,d0.w),d1
000190EA 4EFB 1000                  		jmp	Disc_Index(pc,d1.w)
000190EE                            ; ===========================================================================
000190EE 0000                       Disc_Index:	dc.w Disc_Main-Disc_Index
000190F0 0000                       		dc.w Disc_Action-Disc_Index
000190F2                            
000190F2 =00000032                  disc_origX:	equ $32		; original x-axis position
000190F2 =00000030                  disc_origY:	equ $30		; original y-axis position
000190F2                            ; ===========================================================================
000190F2                            
000190F2                            Disc_Main:	; Routine 0
000190F2 5428 0024                  		addq.b	#2,obRoutine(a0)
000190F6 217C 0000 0000 0004        		move.l	#Map_Disc,obMap(a0)
000190FE 317C C344 0002             		move.w	#$C344,obGfx(a0)
00019104 117C 0004 0001             		move.b	#4,obRender(a0)
0001910A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019110 117C 0008 0014             		move.b	#8,obActWid(a0)
00019116 3168 0008 0032             		move.w	obX(a0),disc_origX(a0)
0001911C 3168 000C 0030             		move.w	obY(a0),disc_origY(a0)
00019122 117C 0018 0034             		move.b	#$18,$34(a0)
00019128 117C 0048 0038             		move.b	#$48,$38(a0)
0001912E 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00019132 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00019136 6700                       		beq.s	@typeis0	; branch if 0
00019138 117C 0010 0034             		move.b	#$10,$34(a0)
0001913E 117C 0038 0038             		move.b	#$38,$38(a0)
00019144                            
00019144                            	@typeis0:
00019144 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00019148 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001914C 4881                       		ext.w	d1
0001914E E741                       		asl.w	#3,d1
00019150 3141 0036                  		move.w	d1,$36(a0)
00019154 1028 0022                  		move.b	obStatus(a0),d0
00019158 E418                       		ror.b	#2,d0
0001915A 0200 00C0                  		andi.b	#$C0,d0
0001915E 1140 0026                  		move.b	d0,obAngle(a0)
00019162                            
00019162                            Disc_Action:	; Routine 2
00019162 6100 0000                  		bsr.w	Disc_MoveSonic
00019166 6100 0000                  		bsr.w	Disc_MoveSpot
0001916A 6000 0000                  		bra.w	Disc_ChkDel
0001916E                            ; ===========================================================================
0001916E                            
0001916E                            Disc_MoveSonic:
0001916E 7400                       		moveq	#0,d2
00019170 1428 0038                  		move.b	$38(a0),d2
00019174 3602                       		move.w	d2,d3
00019176 D643                       		add.w	d3,d3
00019178 43F8 D000                  		lea	(v_player).w,a1
0001917C 3029 0008                  		move.w	obX(a1),d0
00019180 9068 0032                  		sub.w	disc_origX(a0),d0
00019184 D042                       		add.w	d2,d0
00019186 B043                       		cmp.w	d3,d0
00019188 6400                       		bcc.s	loc_155A8
0001918A 3229 000C                  		move.w	obY(a1),d1
0001918E 9268 0030                  		sub.w	disc_origY(a0),d1
00019192 D242                       		add.w	d2,d1
00019194 B243                       		cmp.w	d3,d1
00019196 6400                       		bcc.s	loc_155A8
00019198 0829 0001 0022             		btst	#1,obStatus(a1)
0001919E 6700                       		beq.s	loc_155B8
000191A0 4228 003A                  		clr.b	$3A(a0)
000191A4 4E75                       		rts	
000191A6                            ; ===========================================================================
000191A6                            
000191A6                            loc_155A8:
000191A6 4A28 003A                  		tst.b	$3A(a0)
000191AA 6700                       		beq.s	locret_155B6
000191AC 4229 0038                  		clr.b	$38(a1)
000191B0 4228 003A                  		clr.b	$3A(a0)
000191B4                            
000191B4                            locret_155B6:
000191B4 4E75                       		rts	
000191B6                            ; ===========================================================================
000191B6                            
000191B6                            loc_155B8:
000191B6 4A28 003A                  		tst.b	$3A(a0)
000191BA 6600                       		bne.s	loc_155E2
000191BC 117C 0001 003A             		move.b	#1,$3A(a0)
000191C2 0829 0002 0022             		btst	#2,obStatus(a1)
000191C8 6600                       		bne.s	loc_155D0
000191CA 4229 001C                  		clr.b	obAnim(a1)
000191CE                            
000191CE                            loc_155D0:
000191CE 08A9 0005 0022             		bclr	#5,obStatus(a1)
000191D4 137C 0001 001D             		move.b	#1,obNextAni(a1)
000191DA 137C 0001 0038             		move.b	#1,$38(a1)
000191E0                            
000191E0                            loc_155E2:
000191E0 3029 0020                  		move.w	obInertia(a1),d0
000191E4 4A68 0036                  		tst.w	$36(a0)
000191E8 6A00                       		bpl.s	loc_15608
000191EA 0C40 FC00                  		cmpi.w	#-$400,d0
000191EE 6F00                       		ble.s	loc_155FA
000191F0 337C FC00 0020             		move.w	#-$400,obInertia(a1)
000191F6 4E75                       		rts	
000191F8                            ; ===========================================================================
000191F8                            
000191F8                            loc_155FA:
000191F8 0C40 F100                  		cmpi.w	#-$F00,d0
000191FC 6C00                       		bge.s	locret_15606
000191FE 337C F100 0020             		move.w	#-$F00,obInertia(a1)
00019204                            
00019204                            locret_15606:
00019204 4E75                       		rts	
00019206                            ; ===========================================================================
00019206                            
00019206                            loc_15608:
00019206 0C40 0400                  		cmpi.w	#$400,d0
0001920A 6C00                       		bge.s	loc_15616
0001920C 337C 0400 0020             		move.w	#$400,obInertia(a1)
00019212 4E75                       		rts	
00019214                            ; ===========================================================================
00019214                            
00019214                            loc_15616:
00019214 0C40 0F00                  		cmpi.w	#$F00,d0
00019218 6F00                       		ble.s	locret_15622
0001921A 337C 0F00 0020             		move.w	#$F00,obInertia(a1)
00019220                            
00019220                            locret_15622:
00019220 4E75                       		rts	
00019222                            ; ===========================================================================
00019222                            
00019222                            Disc_MoveSpot:
00019222 3028 0036                  		move.w	$36(a0),d0
00019226 D168 0026                  		add.w	d0,obAngle(a0)
0001922A 1028 0026                  		move.b	obAngle(a0),d0
0001922E 4EB9 0000 3D28             		jsr	(CalcSine).l
00019234 3428 0030                  		move.w	disc_origY(a0),d2
00019238 3628 0032                  		move.w	disc_origX(a0),d3
0001923C 7800                       		moveq	#0,d4
0001923E 1828 0034                  		move.b	$34(a0),d4
00019242 E14C                       		lsl.w	#8,d4
00019244 2A04                       		move.l	d4,d5
00019246 C9C0                       		muls.w	d0,d4
00019248 4844                       		swap	d4
0001924A CBC1                       		muls.w	d1,d5
0001924C 4845                       		swap	d5
0001924E D842                       		add.w	d2,d4
00019250 DA43                       		add.w	d3,d5
00019252 3144 000C                  		move.w	d4,obY(a0)
00019256 3145 0008                  		move.w	d5,obX(a0)
0001925A 4E75                       		rts	
0001925C                            ; ===========================================================================
0001925C                            
0001925C                            Disc_ChkDel:
00019278 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001927E                            
0001927E                            	@delete:
0001927E 4EF9 0000 F86E             		jmp	(DeleteObject).l
0001927E 4EF9 0000 F86E             		jmp	(DeleteObject).l
00019284                            Map_Disc:	include	"_maps\Running Disc.asm"
00019284                            ; ---------------------------------------------------------------------------
00019284                            ; Sprite mappings - disc that you run around (SBZ)
00019284                            ; (It's just a small blob that moves around in a circle. The disc itself is
00019284                            ; part of the level tiles.)
00019284                            ; ---------------------------------------------------------------------------
00019284                            Map_Disc_internal:
00019284 0000                       		dc.w @spot-Map_Disc_internal
00019286 01                         @spot:		dc.b 1
00019287 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001928C                            		even
0001928C                            		even
0001928C                            		include	"_incObj\68 Conveyor Belt.asm"
0001928C                            ; ---------------------------------------------------------------------------
0001928C                            ; Object 68 - conveyor belts (SBZ)
0001928C                            ; ---------------------------------------------------------------------------
0001928C                            
0001928C                            Conveyor:
0001928C 7000                       		moveq	#0,d0
0001928E 1028 0024                  		move.b	obRoutine(a0),d0
00019292 323B 0000                  		move.w	Conv_Index(pc,d0.w),d1
00019296 4EFB 1000                  		jmp	Conv_Index(pc,d1.w)
0001929A                            ; ===========================================================================
0001929A 0000                       Conv_Index:	dc.w Conv_Main-Conv_Index
0001929C 0000                       		dc.w Conv_Action-Conv_Index
0001929E                            
0001929E =00000036                  conv_speed:	equ $36
0001929E =00000038                  conv_width:	equ $38
0001929E                            ; ===========================================================================
0001929E                            
0001929E                            Conv_Main:	; Routine 0
0001929E 5428 0024                  		addq.b	#2,obRoutine(a0)
000192A2 117C 0080 0038             		move.b	#128,conv_width(a0) ; set width to 128 pixels
000192A8 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000192AC 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000192B0 6700                       		beq.s	@typeis0	; if zero, branch
000192B2 117C 0038 0038             		move.b	#56,conv_width(a0) ; set width to 56 pixels
000192B8                            
000192B8                            	@typeis0:
000192B8 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000192BC 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000192C0 4881                       		ext.w	d1
000192C2 E841                       		asr.w	#4,d1
000192C4 3141 0036                  		move.w	d1,conv_speed(a0) ; set belt speed
000192C8                            
000192C8                            Conv_Action:	; Routine 2
000192C8 6100                       		bsr.s	@movesonic
000192E6 4E75                       		rts	
000192E8                            
000192E8                            	@delete:
000192E8 4EF9 0000 F86E             		jmp	(DeleteObject).l
000192EE                            ; ===========================================================================
000192EE                            
000192EE                            @movesonic:
000192EE 7400                       		moveq	#0,d2
000192F0 1428 0038                  		move.b	conv_width(a0),d2
000192F4 3602                       		move.w	d2,d3
000192F6 D643                       		add.w	d3,d3
000192F8 43F8 D000                  		lea	(v_player).w,a1
000192FC 3029 0008                  		move.w	obX(a1),d0
00019300 9068 0008                  		sub.w	obX(a0),d0
00019304 D042                       		add.w	d2,d0
00019306 B043                       		cmp.w	d3,d0
00019308 6400                       		bcc.s	@notonconveyor
0001930A 3229 000C                  		move.w	obY(a1),d1
0001930E 9268 000C                  		sub.w	obY(a0),d1
00019312 0641 0030                  		addi.w	#$30,d1
00019316 0C41 0030                  		cmpi.w	#$30,d1
0001931A 6400                       		bcc.s	@notonconveyor
0001931C 0829 0001 0022             		btst	#1,obStatus(a1)
00019322 6600                       		bne.s	@notonconveyor
00019324 3028 0036                  		move.w	conv_speed(a0),d0
00019328 D169 0008                  		add.w	d0,obX(a1)
0001932C                            
0001932C                            	@notonconveyor:
0001932C 4E75                       		rts	
0001932C 4E75                       		rts	
0001932E                            		include	"_incObj\69 SBZ Spinning Platforms.asm"
0001932E                            ; ---------------------------------------------------------------------------
0001932E                            ; Object 69 - spinning platforms and trapdoors (SBZ)
0001932E                            ; ---------------------------------------------------------------------------
0001932E                            
0001932E                            SpinPlatform:
0001932E 7000                       		moveq	#0,d0
00019330 1028 0024                  		move.b	obRoutine(a0),d0
00019334 323B 0000                  		move.w	Spin_Index(pc,d0.w),d1
00019338 4EFB 1000                  		jmp	Spin_Index(pc,d1.w)
0001933C                            ; ===========================================================================
0001933C 0000                       Spin_Index:	dc.w Spin_Main-Spin_Index
0001933E 0000                       		dc.w Spin_Trapdoor-Spin_Index
00019340 0000                       		dc.w Spin_Spinner-Spin_Index
00019342                            
00019342 =00000030                  spin_timer:	equ $30		; time counter until change
00019342 =00000032                  spin_timelen:	equ $32		; time between changes (general)
00019342                            ; ===========================================================================
00019342                            
00019342                            Spin_Main:	; Routine 0
00019342 5428 0024                  		addq.b	#2,obRoutine(a0)
00019346 217C 0000 0000 0004        		move.l	#Map_Trap,obMap(a0)
0001934E 317C 4492 0002             		move.w	#$4492,obGfx(a0)
00019354 0028 0004 0001             		ori.b	#4,obRender(a0)
0001935A 117C 0080 0014             		move.b	#$80,obActWid(a0)
00019360 7000                       		moveq	#0,d0
00019362 1028 0028                  		move.b	obSubtype(a0),d0
00019366 0240 000F                  		andi.w	#$F,d0
0001936A C0FC 003C                  		mulu.w	#$3C,d0
0001936E 3140 0032                  		move.w	d0,spin_timelen(a0)
00019372 4A28 0028                  		tst.b	obSubtype(a0)	; is subtype $8x?
00019376 6A00                       		bpl.s	Spin_Trapdoor	; if not, branch
00019378                            
00019378 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Spin_Spinner next
0001937C 217C 0000 0000 0004        		move.l	#Map_Spin,obMap(a0)
00019384 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
0001938A 117C 0010 0014             		move.b	#$10,obActWid(a0)
00019390 117C 0002 001C             		move.b	#2,obAnim(a0)
00019396 7000                       		moveq	#0,d0
00019398 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0001939C 3200                       		move.w	d0,d1
0001939E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000193A2 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
000193A6 3140 0030                  		move.w	d0,spin_timer(a0)
000193AA 3140 0032                  		move.w	d0,spin_timelen(a0) ; set time delay
000193AE 0241 0070                  		andi.w	#$70,d1
000193B2 0641 0010                  		addi.w	#$10,d1
000193B6 E549                       		lsl.w	#2,d1
000193B8 5341                       		subq.w	#1,d1
000193BA 3141 0036                  		move.w	d1,$36(a0)
000193BE 6000                       		bra.s	Spin_Spinner
000193C0                            ; ===========================================================================
000193C0                            
000193C0                            Spin_Trapdoor:	; Routine 2
000193C0 5368 0030                  		subq.w	#1,spin_timer(a0) ; decrement timer
000193C4 6A00                       		bpl.s	@animate	; if time remains, branch
000193C6                            
000193C6 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
000193CC 0868 0000 001C             		bchg	#0,obAnim(a0)
000193D2 4A28 0001                  		tst.b	obRender(a0)
000193D6 6A00                       		bpl.s	@animate
000193E2                            
000193E2                            	@animate:
000193E2 43F9 0000 0000             		lea	(Ani_Spin).l,a1
000193E8 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
000193EE 4A28 001A                  		tst.b	obFrame(a0)	; is frame number 0 displayed?
000193F2 6600                       		bne.s	@notsolid	; if not, branch
000193F4 323C 004B                  		move.w	#$4B,d1
000193F8 343C 000C                  		move.w	#$C,d2
000193FC 3602                       		move.w	d2,d3
000193FE 5243                       		addq.w	#1,d3
00019400 3828 0008                  		move.w	obX(a0),d4
00019404 6100 8974                  		bsr.w	SolidObject
00019408 6000 84D8                  		bra.w	RememberState
0001940C                            ; ===========================================================================
0001940C                            
0001940C                            @notsolid:
0001940C 0828 0003 0022             		btst	#3,obStatus(a0) ; is Sonic standing on the trapdoor?
00019412 6700                       		beq.s	@display	; if not, branch
00019414 43F8 D000                  		lea	(v_player).w,a1
00019418 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001941E 08A8 0003 0022             		bclr	#3,obStatus(a0)
00019424 4228 0025                  		clr.b	obSolid(a0)
00019428                            
00019428                            	@display:
00019428 6000 84B8                  		bra.w	RememberState
0001942C                            ; ===========================================================================
0001942C                            
0001942C                            Spin_Spinner:	; Routine 4
0001942C 3038 FE04                  		move.w	(v_framecount).w,d0
00019430 C068 0036                  		and.w	$36(a0),d0
00019434 6600                       		bne.s	@delay
00019436 117C 0001 0034             		move.b	#1,$34(a0)
0001943C                            
0001943C                            	@delay:
0001943C 4A28 0034                  		tst.b	$34(a0)
00019440 6700                       		beq.s	@animate
00019442 5368 0030                  		subq.w	#1,spin_timer(a0)
00019446 6A00                       		bpl.s	@animate
00019448 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
0001944E 4228 0034                  		clr.b	$34(a0)
00019452 0868 0000 001C             		bchg	#0,obAnim(a0)
00019458                            
00019458                            	@animate:
00019458 43F9 0000 0000             		lea	(Ani_Spin).l,a1
0001945E 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
00019464 4A28 001A                  		tst.b	obFrame(a0)	; check	if frame number	0 is displayed
00019468 6600                       		bne.s	@notsolid2	; if not, branch
0001946A 323C 001B                  		move.w	#$1B,d1
0001946E 343C 0007                  		move.w	#7,d2
00019472 3602                       		move.w	d2,d3
00019474 5243                       		addq.w	#1,d3
00019476 3828 0008                  		move.w	obX(a0),d4
0001947A 6100 88FE                  		bsr.w	SolidObject
0001947E 6000 8462                  		bra.w	RememberState
00019482                            ; ===========================================================================
00019482                            
00019482                            @notsolid2:
00019482 0828 0003 0022             		btst	#3,obStatus(a0)
00019488 6700                       		beq.s	@display
0001948A 43F8 D000                  		lea	(v_player).w,a1
0001948E 08A9 0003 0022             		bclr	#3,obStatus(a1)
00019494 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001949A 4228 0025                  		clr.b	obSolid(a0)
0001949E                            
0001949E                            	@display:
0001949E 6000 8442                  		bra.w	RememberState
0001949E 6000 8442                  		bra.w	RememberState
000194A2                            		include	"_anim\SBZ Spinning Platforms.asm"
000194A2                            ; ---------------------------------------------------------------------------
000194A2                            ; Animation script - trapdoor (SBZ)
000194A2                            ; ---------------------------------------------------------------------------
000194A2 0000                       Ani_Spin:	dc.w @trapopen-Ani_Spin
000194A4 0000                       		dc.w @trapclose-Ani_Spin
000194A6 0000                       		dc.w @spin1-Ani_Spin
000194A8 0000                       		dc.w @spin2-Ani_Spin
000194AA 0300 0102 FE01             @trapopen:	dc.b 3,	0, 1, 2, afBack, 1
000194B0 0302 0100 FE01             @trapclose:	dc.b 3,	2, 1, 0, afBack, 1
000194B6 0100 0102 0304 4342 4140+  @spin1:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
000194CA 0100 0102 0304 4342 4140+  @spin2:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
000194DE                            		even
000194DE                            		even
000194DE                            Map_Trap:	include	"_maps\Trapdoor.asm"
000194DE                            ; ---------------------------------------------------------------------------
000194DE                            ; Sprite mappings - trapdoor (SBZ)
000194DE                            ; ---------------------------------------------------------------------------
000194DE                            Map_Trap_internal:
000194DE 0000                       		dc.w @closed-Map_Trap_internal
000194E0 0000                       		dc.w @half-Map_Trap_internal
000194E2 0000                       		dc.w @open-Map_Trap_internal
000194E4 04                         @closed:	dc.b 4
000194E5 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
000194EA F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
000194EF F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
000194F4 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
000194F9 08                         @half:		dc.b 8
000194FA F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
000194FF 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00019504 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00019509 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
0001950E F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00019513 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00019518 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
0001951D 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00019522 04                         @open:		dc.b 4
00019523 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00019528 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
0001952D 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00019532 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00019538 00                         		even
00019538 00                         		even
00019538                            Map_Spin:	include	"_maps\SBZ Spinning Platforms.asm"
00019538                            ; ---------------------------------------------------------------------------
00019538                            ; Sprite mappings - spinning platforms (SBZ)
00019538                            ; ---------------------------------------------------------------------------
00019538                            Map_Spin_internal:
00019538 0000                       		dc.w @flat-Map_Spin_internal
0001953A 0000                       		dc.w @spin1-Map_Spin_internal
0001953C 0000                       		dc.w @spin2-Map_Spin_internal
0001953E 0000                       		dc.w @spin3-Map_Spin_internal
00019540 0000                       		dc.w @spin4-Map_Spin_internal
00019542 02                         @flat:		dc.b 2
00019543 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00019548 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
0001954D 02                         @spin1:		dc.b 2
0001954E F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00019553 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00019558 02                         @spin2:		dc.b 2
00019559 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
0001955E 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00019563 02                         @spin3:		dc.b 2
00019564 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00019569 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
0001956E 02                         @spin4:		dc.b 2
0001956F F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00019574 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
0001957A 00                         		even
0001957A 00                         		even
0001957A                            		include	"_incObj\6A Saws and Pizza Cutters.asm"
0001957A                            ; ---------------------------------------------------------------------------
0001957A                            ; Object 6A - ground saws and pizza cutters (SBZ)
0001957A                            ; ---------------------------------------------------------------------------
0001957A                            
0001957A                            Saws:
0001957A 7000                       		moveq	#0,d0
0001957C 1028 0024                  		move.b	obRoutine(a0),d0
00019580 323B 0000                  		move.w	Saw_Index(pc,d0.w),d1
00019584 4EFB 1000                  		jmp	Saw_Index(pc,d1.w)
00019588                            ; ===========================================================================
00019588 0000                       Saw_Index:	dc.w Saw_Main-Saw_Index
0001958A 0000                       		dc.w Saw_Action-Saw_Index
0001958C                            
0001958C =0000003A                  saw_origX:	equ $3A		; original x-axis position
0001958C =00000038                  saw_origY:	equ $38		; original y-axis position
0001958C =0000003D                  saw_here:	equ $3D		; flag set when the ground saw appears
0001958C                            ; ===========================================================================
0001958C                            
0001958C                            Saw_Main:	; Routine 0
0001958C 5428 0024                  		addq.b	#2,obRoutine(a0)
00019590 217C 0000 0000 0004        		move.l	#Map_Saw,obMap(a0)
00019598 317C 43AD 0002             		move.w	#$43AD,obGfx(a0)
0001959E 117C 0004 0001             		move.b	#4,obRender(a0)
000195A4 317C 0200 0018             		move.w	#$200,obPriority(a0)
000195AA 117C 0020 0014             		move.b	#$20,obActWid(a0)
000195B0 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
000195B6 3168 000C 0038             		move.w	obY(a0),saw_origY(a0)
000195BC 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object a ground saw?
000195C2 6400                       		bcc.s	Saw_Action	; if yes, branch
000195C4 117C 00A2 0020             		move.b	#$A2,obColType(a0)
000195CA                            
000195CA                            Saw_Action:	; Routine 2
000195CA 7000                       		moveq	#0,d0
000195CC 1028 0028                  		move.b	obSubtype(a0),d0
000195D0 0240 0007                  		andi.w	#7,d0
000195D4 D040                       		add.w	d0,d0
000195D6 323B 0000                  		move.w	@index(pc,d0.w),d1
000195DA 4EBB 1000                  		jsr	@index(pc,d1.w)
000195FA 4EF9 0000 F82E             		jmp	(DisplaySprite).l
00019600                            
00019600                            	@delete:
00019600 4EF9 0000 F86E             		jmp	(DeleteObject).l
00019606                            ; ===========================================================================
00019606 0000 0000 0000             @index:		dc.w @type00-@index, @type01-@index, @type02-@index ; pizza cutters
0001960C 0000 0000                  		dc.w @type03-@index, @type04-@index ; ground saws
00019610                            ; ===========================================================================
00019610                            
00019610                            @type00:
00019610 4E75                       		rts			; doesn't move
00019612                            ; ===========================================================================
00019612                            
00019612                            @type01:
00019612 323C 0060                  		move.w	#$60,d1
00019616 7000                       		moveq	#0,d0
00019618 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
0001961C 0828 0000 0022             		btst	#0,obStatus(a0)
00019622 6700                       		beq.s	@noflip01
00019624 4440                       		neg.w	d0
00019626 D041                       		add.w	d1,d0
00019628                            
00019628                            	@noflip01:
00019628 3228 003A                  		move.w	saw_origX(a0),d1
0001962C 9240                       		sub.w	d0,d1
0001962E 3141 0008                  		move.w	d1,obX(a0)	; move saw sideways
00019632                            
00019632 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00019636 6A00                       		bpl.s	@sameframe01
00019638 117C 0002 001E             		move.b	#2,obTimeFrame(a0) ; time between frame changes
0001963E 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
00019644                            
00019644                            	@sameframe01:
00019644 4A28 0001                  		tst.b	obRender(a0)
00019648 6A00                       		bpl.s	@nosound01
0001964A 3038 FE04                  		move.w	(v_framecount).w,d0
0001964E 0240 000F                  		andi.w	#$F,d0
00019652 6600                       		bne.s	@nosound01
0001965E                            
0001965E                            	@nosound01:
0001965E 4E75                       		rts	
00019660                            ; ===========================================================================
00019660                            
00019660                            @type02:
00019660 323C 0030                  		move.w	#$30,d1
00019664 7000                       		moveq	#0,d0
00019666 1038 FE64                  		move.b	(v_oscillate+6).w,d0
0001966A 0828 0000 0022             		btst	#0,obStatus(a0)
00019670 6700                       		beq.s	@noflip02
00019672 4440                       		neg.w	d0
00019674 0640 0080                  		addi.w	#$80,d0
00019678                            
00019678                            	@noflip02:
00019678 3228 0038                  		move.w	saw_origY(a0),d1
0001967C 9240                       		sub.w	d0,d1
0001967E 3141 000C                  		move.w	d1,obY(a0)	; move saw vertically
00019682 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00019686 6A00                       		bpl.s	@sameframe02
00019688 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
0001968E 0868 0000 001A             		bchg	#0,obFrame(a0)
00019694                            
00019694                            	@sameframe02:
00019694 4A28 0001                  		tst.b	obRender(a0)
00019698 6A00                       		bpl.s	@nosound02
0001969A 1038 FE64                  		move.b	(v_oscillate+6).w,d0
0001969E 0C00 0018                  		cmpi.b	#$18,d0
000196A2 6600                       		bne.s	@nosound02
000196AE                            
000196AE                            	@nosound02:
000196AE 4E75                       		rts	
000196B0                            ; ===========================================================================
000196B0                            
000196B0                            @type03:
000196B0 4A28 003D                  		tst.b	saw_here(a0)	; has the saw appeared already?
000196B4 6600                       		bne.s	@here03		; if yes, branch
000196B6                            
000196B6 3038 D008                  		move.w	(v_player+obX).w,d0
000196BA 0440 00C0                  		subi.w	#$C0,d0
000196BE 6500                       		bcs.s	@nosaw03x
000196C0 9068 0008                  		sub.w	obX(a0),d0
000196C4 6500                       		bcs.s	@nosaw03x
000196C6 3038 D00C                  		move.w	(v_player+obY).w,d0
000196CA 0440 0080                  		subi.w	#$80,d0
000196CE B068 000C                  		cmp.w	obY(a0),d0
000196D2 6400                       		bcc.s	@nosaw03y
000196D4 0640 0100                  		addi.w	#$100,d0
000196D8 B068 000C                  		cmp.w	obY(a0),d0
000196DC 6500                       		bcs.s	@nosaw03y
000196DE 117C 0001 003D             		move.b	#1,saw_here(a0)
000196E4 317C 0600 0010             		move.w	#$600,obVelX(a0) ; move object to the right
000196EA 117C 00A2 0020             		move.b	#$A2,obColType(a0)
000196F0 117C 0002 001A             		move.b	#2,obFrame(a0)
00019700                            
00019700                            	@nosaw03x:
00019700 588F                       		addq.l	#4,sp
00019702                            
00019702                            	@nosaw03y:
00019702 4E75                       		rts	
00019704                            ; ===========================================================================
00019704                            
00019704                            @here03:
00019704 4EB9 0000 F81A             		jsr	(SpeedToPos).l
0001970A 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00019710 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00019714 6A00                       		bpl.s	@sameframe03
00019716 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
0001971C 0868 0000 001A             		bchg	#0,obFrame(a0)
00019722                            
00019722                            	@sameframe03:
00019722 4E75                       		rts	
00019724                            ; ===========================================================================
00019724                            
00019724                            @type04:
00019724 4A28 003D                  		tst.b	saw_here(a0)
00019728 6600                       		bne.s	@here04
0001972A 3038 D008                  		move.w	(v_player+obX).w,d0
0001972E 0640 00E0                  		addi.w	#$E0,d0
00019732 9068 0008                  		sub.w	obX(a0),d0
00019736 6400                       		bcc.s	@nosaw04x
00019738 3038 D00C                  		move.w	(v_player+obY).w,d0
0001973C 0440 0080                  		subi.w	#$80,d0
00019740 B068 000C                  		cmp.w	obY(a0),d0
00019744 6400                       		bcc.s	@nosaw04y
00019746 0640 0100                  		addi.w	#$100,d0
0001974A B068 000C                  		cmp.w	obY(a0),d0
0001974E 6500                       		bcs.s	@nosaw04y
00019750 117C 0001 003D             		move.b	#1,saw_here(a0)
00019756 317C FA00 0010             		move.w	#-$600,obVelX(a0) ; move object to the left
0001975C 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00019762 117C 0002 001A             		move.b	#2,obFrame(a0)
00019772                            
00019772                            	@nosaw04x:
00019772 588F                       		addq.l	#4,sp
00019774                            
00019774                            	@nosaw04y:
00019774 4E75                       		rts	
00019776                            ; ===========================================================================
00019776                            
00019776                            @here04:
00019776 4EB9 0000 F81A             		jsr	(SpeedToPos).l
0001977C 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00019782 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00019786 6A00                       		bpl.s	@sameframe04
00019788 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
0001978E 0868 0000 001A             		bchg	#0,obFrame(a0)
00019794                            
00019794                            	@sameframe04:
00019794 4E75                       		rts	
00019794 4E75                       		rts	
00019796                            Map_Saw:	include	"_maps\Saws and Pizza Cutters.asm"
00019796                            ; ---------------------------------------------------------------------------
00019796                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00019796                            ; ---------------------------------------------------------------------------
00019796                            Map_Saw_internal:
00019796 0000                       		dc.w @pizzacutter1-Map_Saw_internal
00019798 0000                       		dc.w @pizzacutter2-Map_Saw_internal
0001979A 0000                       		dc.w @groundsaw1-Map_Saw_internal
0001979C 0000                       		dc.w @groundsaw2-Map_Saw_internal
0001979E 07                         @pizzacutter1:	dc.b 7
0001979F C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000197A4 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000197A9 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000197AE E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000197B3 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000197B8 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000197BD 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000197C2 07                         @pizzacutter2:	dc.b 7
000197C3 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000197C8 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000197CD E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000197D2 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000197D7 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000197DC 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000197E1 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000197E6 04                         @groundsaw1:	dc.b 4
000197E7 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000197EC E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000197F1 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000197F6 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000197FB 04                         @groundsaw2:	dc.b 4
000197FC E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00019801 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00019806 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
0001980B 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00019810                            		even
00019810                            		even
00019810                            		include	"_incObj\6B SBZ Stomper and Door.asm"
00019810                            ; ---------------------------------------------------------------------------
00019810                            ; Object 6B - stomper and sliding door (SBZ)
00019810                            ; ---------------------------------------------------------------------------
00019810                            
00019810                            ScrapStomp:
00019810 7000                       		moveq	#0,d0
00019812 1028 0024                  		move.b	obRoutine(a0),d0
00019816 323B 0000                  		move.w	Sto_Index(pc,d0.w),d1
0001981A 4EFB 1000                  		jmp	Sto_Index(pc,d1.w)
0001981E                            ; ===========================================================================
0001981E 0000                       Sto_Index:	dc.w Sto_Main-Sto_Index
00019820 0000                       		dc.w Sto_Action-Sto_Index
00019822                            
00019822 =00000016                  sto_height:	equ $16
00019822 =00000034                  sto_origX:	equ $34		; original x-axis position
00019822 =00000030                  sto_origY:	equ $30		; original y-axis position
00019822 =00000038                  sto_active:	equ $38		; flag set when a switch is pressed
00019822                            
00019822 400C 8001                  Sto_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00019826 1C20 3803                  		dc.b  $1C, $20,	$38,   3
0001982A 1C20 4004                  		dc.b  $1C, $20,	$40,   4
0001982E 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00019832 8040 0005                  		dc.b  $80, $40,	  0,   5
00019836                            ; ===========================================================================
00019836                            
00019836                            Sto_Main:	; Routine 0
00019836 5428 0024                  		addq.b	#2,obRoutine(a0)
0001983A 7000                       		moveq	#0,d0
0001983C 1028 0028                  		move.b	obSubtype(a0),d0
00019840 E448                       		lsr.w	#2,d0
00019842 0240 001C                  		andi.w	#$1C,d0
00019846 47FB 00DA                  		lea	Sto_Var(pc,d0.w),a3
0001984A 115B 0014                  		move.b	(a3)+,obActWid(a0)
0001984E 115B 0016                  		move.b	(a3)+,sto_height(a0)
00019852 E448                       		lsr.w	#2,d0
00019854 1140 001A                  		move.b	d0,obFrame(a0)
00019858 217C 0000 0000 0004        		move.l	#Map_Stomp,obMap(a0)
00019860 317C 22C0 0002             		move.w	#$22C0,obGfx(a0)
00019866 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ/SBZ3
0001986C 6600                       		bne.s	@isSBZ12	; if not, branch
0001986E 08F8 0000 F7CB             		bset	#0,(v_obj6B).w
00019874 6700                       		beq.s	@isSBZ3
00019876                            
00019876                            @chkdel:
00019876 45F8 FC00                  		lea	(v_objstate).w,a2
0001987A 7000                       		moveq	#0,d0
0001987C 1028 0023                  		move.b	obRespawnNo(a0),d0
00019880 6700                       		beq.s	@delete
00019882 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019888                            
00019888                            	@delete:
00019888 4EF9 0000 F86E             		jmp	(DeleteObject).l
0001988E                            ; ===========================================================================
0001988E                            
0001988E                            @isSBZ3:
0001988E 317C 41F0 0002             		move.w	#$41F0,obGfx(a0)
00019894 0C68 0A80 0008             		cmpi.w	#$A80,obX(a0)
0001989A 6600                       		bne.s	@isSBZ12
0001989C 45F8 FC00                  		lea	(v_objstate).w,a2
000198A0 7000                       		moveq	#0,d0
000198A2 1028 0023                  		move.b	obRespawnNo(a0),d0
000198A6 6700                       		beq.s	@isSBZ12
000198A8 0832 0000 0002             		btst	#0,2(a2,d0.w)
000198AE 6700                       		beq.s	@isSBZ12
000198B0 4238 F7CB                  		clr.b	(v_obj6B).w
000198B4 60C0                       		bra.s	@chkdel
000198B6                            ; ===========================================================================
000198B6                            
000198B6                            @isSBZ12:
000198B6 0028 0004 0001             		ori.b	#4,obRender(a0)
000198BC 317C 0200 0018             		move.w	#$200,obPriority(a0)
000198C2 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
000198C8 3168 000C 0030             		move.w	obY(a0),sto_origY(a0)
000198CE 7000                       		moveq	#0,d0
000198D0 101B                       		move.b	(a3)+,d0
000198D2 3140 003C                  		move.w	d0,$3C(a0)
000198D6 7000                       		moveq	#0,d0
000198D8 1028 0028                  		move.b	obSubtype(a0),d0
000198DC 6A00                       		bpl.s	Sto_Action
000198DE 0200 000F                  		andi.b	#$F,d0
000198E2 1140 003E                  		move.b	d0,$3E(a0)
000198E6 1153 0028                  		move.b	(a3),obSubtype(a0)
000198EA 0C13 0005                  		cmpi.b	#5,(a3)
000198EE 6600                       		bne.s	@chkgone
000198F0 08E8 0004 0001             		bset	#4,obRender(a0)
000198F6                            
000198F6                            	@chkgone:
000198F6 45F8 FC00                  		lea	(v_objstate).w,a2
000198FA 7000                       		moveq	#0,d0
000198FC 1028 0023                  		move.b	obRespawnNo(a0),d0
00019900 6700                       		beq.s	Sto_Action
00019902 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019908                            
00019908                            Sto_Action:	; Routine 2
00019908 3F28 0008                  		move.w	obX(a0),-(sp)
0001990C 7000                       		moveq	#0,d0
0001990E 1028 0028                  		move.b	obSubtype(a0),d0
00019912 0240 000F                  		andi.w	#$F,d0
00019916 D040                       		add.w	d0,d0
00019918 323B 0000                  		move.w	@index(pc,d0.w),d1
0001991C 4EBB 1000                  		jsr	@index(pc,d1.w)
00019920 381F                       		move.w	(sp)+,d4
00019922 4A28 0001                  		tst.b	obRender(a0)
00019926 6A00                       		bpl.s	@chkdel
00019928 7200                       		moveq	#0,d1
0001992A 1228 0014                  		move.b	obActWid(a0),d1
0001992E 0641 000B                  		addi.w	#$B,d1
00019932 7400                       		moveq	#0,d2
00019934 1428 0016                  		move.b	sto_height(a0),d2
00019938 3602                       		move.w	d2,d3
0001993A 5243                       		addq.w	#1,d3
0001993C 6100 843C                  		bsr.w	SolidObject
00019940                            
00019940                            	@chkdel:
0001995C 4EF9 0000 F82E             		jmp	(DisplaySprite).l
00019962                            
00019962                            	@chkgone:
00019962 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w
00019968 6600                       		bne.s	@delete
0001996A 4238 F7CB                  		clr.b	(v_obj6B).w
0001996E 45F8 FC00                  		lea	(v_objstate).w,a2
00019972 7000                       		moveq	#0,d0
00019974 1028 0023                  		move.b	obRespawnNo(a0),d0
00019978 6700                       		beq.s	@delete
0001997A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019980                            
00019980                            	@delete:
00019980 4EF9 0000 F86E             		jmp	(DeleteObject).l
00019986                            ; ===========================================================================
00019986 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
0001998A 0000 0000                  		dc.w @type02-@index, @type03-@index
0001998E 0000 0000                  		dc.w @type04-@index, @type05-@index
00019992                            ; ===========================================================================
00019992                            
00019992                            @type00:
00019992 4E75                       		rts
00019994                            ; ===========================================================================
00019994                            
00019994                            @type01:
00019994 4A28 0038                  		tst.b	sto_active(a0)
00019998 6600                       		bne.s	@isactive01
0001999A 45F8 F7E0                  		lea	(f_switch).w,a2
0001999E 7000                       		moveq	#0,d0
000199A0 1028 003E                  		move.b	$3E(a0),d0
000199A4 0832 0000 0000             		btst	#0,(a2,d0.w)
000199AA 6700                       		beq.s	@loc_15DC2
000199AC 117C 0001 0038             		move.b	#1,sto_active(a0)
000199B2                            
000199B2                            	@isactive01:
000199B2 3028 003C                  		move.w	$3C(a0),d0
000199B6 B068 003A                  		cmp.w	$3A(a0),d0
000199BA 6700                       		beq.s	@loc_15DE0
000199BC 5468 003A                  		addq.w	#2,$3A(a0)
000199C0                            
000199C0                            	@loc_15DC2:
000199C0 3028 003A                  		move.w	$3A(a0),d0
000199C4 0828 0000 0022             		btst	#0,obStatus(a0)
000199CA 6700                       		beq.s	@noflip01
000199CC 4440                       		neg.w	d0
000199CE 0640 0080                  		addi.w	#$80,d0
000199D2                            
000199D2                            	@noflip01:
000199D2 3228 0034                  		move.w	sto_origX(a0),d1
000199D6 9240                       		sub.w	d0,d1
000199D8 3141 0008                  		move.w	d1,obX(a0)
000199DC 4E75                       		rts	
000199DE                            ; ===========================================================================
000199DE                            
000199DE                            @loc_15DE0:
000199DE 5228 0028                  		addq.b	#1,obSubtype(a0)
000199E2 317C 00B4 0036             		move.w	#$B4,$36(a0)
000199E8 4228 0038                  		clr.b	sto_active(a0)
000199EC 45F8 FC00                  		lea	(v_objstate).w,a2
000199F0 7000                       		moveq	#0,d0
000199F2 1028 0023                  		move.b	obRespawnNo(a0),d0
000199F6 67C8                       		beq.s	@loc_15DC2
000199F8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000199FE 60C0                       		bra.s	@loc_15DC2
00019A00                            ; ===========================================================================
00019A00                            
00019A00                            @type02:
00019A00 4A28 0038                  		tst.b	sto_active(a0)
00019A04 6600                       		bne.s	@isactive02
00019A06 5368 0036                  		subq.w	#1,$36(a0)
00019A0A 6600                       		bne.s	@loc_15E1E
00019A0C 117C 0001 0038             		move.b	#1,sto_active(a0)
00019A12                            
00019A12                            	@isactive02:
00019A12 4A68 003A                  		tst.w	$3A(a0)
00019A16 6700                       		beq.s	@loc_15E3C
00019A18 5568 003A                  		subq.w	#2,$3A(a0)
00019A1C                            
00019A1C                            	@loc_15E1E:
00019A1C 3028 003A                  		move.w	$3A(a0),d0
00019A20 0828 0000 0022             		btst	#0,obStatus(a0)
00019A26 6700                       		beq.s	@noflip02
00019A28 4440                       		neg.w	d0
00019A2A 0640 0080                  		addi.w	#$80,d0
00019A2E                            
00019A2E                            	@noflip02:
00019A2E 3228 0034                  		move.w	sto_origX(a0),d1
00019A32 9240                       		sub.w	d0,d1
00019A34 3141 0008                  		move.w	d1,obX(a0)
00019A38 4E75                       		rts	
00019A3A                            ; ===========================================================================
00019A3A                            
00019A3A                            @loc_15E3C:
00019A3A 5328 0028                  		subq.b	#1,obSubtype(a0)
00019A3E 4228 0038                  		clr.b	sto_active(a0)
00019A42 45F8 FC00                  		lea	(v_objstate).w,a2
00019A46 7000                       		moveq	#0,d0
00019A48 1028 0023                  		move.b	obRespawnNo(a0),d0
00019A4C 67CE                       		beq.s	@loc_15E1E
00019A4E 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00019A54 60C6                       		bra.s	@loc_15E1E
00019A56                            ; ===========================================================================
00019A56                            
00019A56                            @type03:
00019A56 4A28 0038                  		tst.b	sto_active(a0)
00019A5A 6600                       		bne.s	@isactive03
00019A5C 4A68 003A                  		tst.w	$3A(a0)
00019A60 6700                       		beq.s	@loc_15E6A
00019A62 5368 003A                  		subq.w	#1,$3A(a0)
00019A66 6000                       		bra.s	@loc_15E8E
00019A68                            ; ===========================================================================
00019A68                            
00019A68                            @loc_15E6A:
00019A68 5368 0036                  		subq.w	#1,$36(a0)
00019A6C 6A00                       		bpl.s	@loc_15E8E
00019A6E 317C 003C 0036             		move.w	#$3C,$36(a0)
00019A74 117C 0001 0038             		move.b	#1,sto_active(a0)
00019A7A                            
00019A7A                            @isactive03:
00019A7A 5068 003A                  		addq.w	#8,$3A(a0)
00019A7E 3028 003A                  		move.w	$3A(a0),d0
00019A82 B068 003C                  		cmp.w	$3C(a0),d0
00019A86 6600                       		bne.s	@loc_15E8E
00019A88 4228 0038                  		clr.b	sto_active(a0)
00019A8C                            
00019A8C                            @loc_15E8E:
00019A8C 3028 003A                  		move.w	$3A(a0),d0
00019A90 0828 0000 0022             		btst	#0,obStatus(a0)
00019A96 6700                       		beq.s	@noflip03
00019A98 4440                       		neg.w	d0
00019A9A 0640 0038                  		addi.w	#$38,d0
00019A9E                            
00019A9E                            	@noflip03:
00019A9E 3228 0030                  		move.w	sto_origY(a0),d1
00019AA2 D240                       		add.w	d0,d1
00019AA4 3141 000C                  		move.w	d1,obY(a0)
00019AA8 4E75                       		rts	
00019AAA                            ; ===========================================================================
00019AAA                            
00019AAA                            @type04:
00019AAA 4A28 0038                  		tst.b	sto_active(a0)
00019AAE 6600                       		bne.s	@isactive04
00019AB0 4A68 003A                  		tst.w	$3A(a0)
00019AB4 6700                       		beq.s	@loc_15EBE
00019AB6 5168 003A                  		subq.w	#8,$3A(a0)
00019ABA 6000                       		bra.s	@loc_15EF0
00019ABC                            ; ===========================================================================
00019ABC                            
00019ABC                            @loc_15EBE:
00019ABC 5368 0036                  		subq.w	#1,$36(a0)
00019AC0 6A00                       		bpl.s	@loc_15EF0
00019AC2 317C 003C 0036             		move.w	#$3C,$36(a0)
00019AC8 117C 0001 0038             		move.b	#1,sto_active(a0)
00019ACE                            
00019ACE                            @isactive04:
00019ACE 3028 003A                  		move.w	$3A(a0),d0
00019AD2 B068 003C                  		cmp.w	$3C(a0),d0
00019AD6 6700                       		beq.s	@loc_15EE0
00019AD8 5068 003A                  		addq.w	#8,$3A(a0)
00019ADC 6000                       		bra.s	@loc_15EF0
00019ADE                            ; ===========================================================================
00019ADE                            
00019ADE                            @loc_15EE0:
00019ADE 5368 0036                  		subq.w	#1,$36(a0)
00019AE2 6A00                       		bpl.s	@loc_15EF0
00019AE4 317C 003C 0036             		move.w	#$3C,$36(a0)
00019AEA 4228 0038                  		clr.b	sto_active(a0)
00019AEE                            
00019AEE                            @loc_15EF0:
00019AEE 3028 003A                  		move.w	$3A(a0),d0
00019AF2 0828 0000 0022             		btst	#0,obStatus(a0)
00019AF8 6700                       		beq.s	@noflip04
00019AFA 4440                       		neg.w	d0
00019AFC 0640 0038                  		addi.w	#$38,d0
00019B00                            
00019B00                            	@noflip04:
00019B00 3228 0030                  		move.w	sto_origY(a0),d1
00019B04 D240                       		add.w	d0,d1
00019B06 3141 000C                  		move.w	d1,obY(a0)
00019B0A 4E75                       		rts	
00019B0C                            ; ===========================================================================
00019B0C                            
00019B0C                            @type05:
00019B0C 4A28 0038                  		tst.b	sto_active(a0)
00019B10 6600                       		bne.s	@loc_15F3E
00019B12 45F8 F7E0                  		lea	(f_switch).w,a2
00019B16 7000                       		moveq	#0,d0
00019B18 1028 003E                  		move.b	$3E(a0),d0
00019B1C 0832 0000 0000             		btst	#0,(a2,d0.w)
00019B22 6700                       		beq.s	@locret_15F5C
00019B24 117C 0001 0038             		move.b	#1,sto_active(a0)
00019B2A 45F8 FC00                  		lea	(v_objstate).w,a2
00019B2E 7000                       		moveq	#0,d0
00019B30 1028 0023                  		move.b	obRespawnNo(a0),d0
00019B34 6700                       		beq.s	@loc_15F3E
00019B36 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019B3C                            
00019B3C                            @loc_15F3E:
00019B3C 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
00019B44 06A8 0000 8000 000C        		addi.l	#$8000,obY(a0)
00019B4C 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00019B52 0C68 0980 0008             		cmpi.w	#$980,obX(a0)
00019B58 6700                       		beq.s	@loc_15F5E
00019B5A                            
00019B5A                            @locret_15F5C:
00019B5A 4E75                       		rts	
00019B5C                            ; ===========================================================================
00019B5C                            
00019B5C                            @loc_15F5E:
00019B5C 4228 0028                  		clr.b	obSubtype(a0)
00019B60 4228 0038                  		clr.b	sto_active(a0)
00019B64 4E75                       		rts	
00019B64 4E75                       		rts	
00019B66                            Map_Stomp:	include	"_maps\SBZ Stomper and Door.asm"
00019B66                            ; ---------------------------------------------------------------------------
00019B66                            ; Sprite mappings - stomper and	platforms (SBZ)
00019B66                            ; ---------------------------------------------------------------------------
00019B66                            Map_Stomp_internal:
00019B66 0000                       		dc.w @door-Map_Stomp_internal
00019B68 0000                       		dc.w @stomper-Map_Stomp_internal
00019B6A 0000                       		dc.w @stomper-Map_Stomp_internal
00019B6C 0000                       		dc.w @stomper-Map_Stomp_internal
00019B6E 0000                       		dc.w @bigdoor-Map_Stomp_internal
00019B70 04                         @door:		dc.b 4
00019B71 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0 ; horizontal sliding door
00019B76 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00019B7B F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00019B80 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00019B85 08                         @stomper:	dc.b 8
00019B86 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4 ; stomper block with yellow/black stripes
00019B8B E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00019B90 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00019B95 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00019B9A 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00019B9F 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00019BA4 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00019BA9 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00019BAE 0E                         @bigdoor:	dc.b $E
00019BAF C00F 0000 80               		dc.b $C0, $F, 0, 0, $80	; huge diagonal sliding door from SBZ3
00019BB4 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00019BB9 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00019BBE C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00019BC3 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00019BC8 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00019BCD C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00019BD2 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00019BD7 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00019BDC E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00019BE1 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00019BE6 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00019BEB 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00019BF0 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00019BF6 00                         		even
00019BF6 00                         		even
00019BF6                            		include	"_incObj\6C SBZ Vanishing Platforms.asm"
00019BF6                            ; ---------------------------------------------------------------------------
00019BF6                            ; Object 6C - vanishing	platforms (SBZ)
00019BF6                            ; ---------------------------------------------------------------------------
00019BF6                            
00019BF6                            VanishPlatform:
00019BF6 7000                       		moveq	#0,d0
00019BF8 1028 0024                  		move.b	obRoutine(a0),d0
00019BFC 323B 0000                  		move.w	VanP_Index(pc,d0.w),d1
00019C00 4EFB 1000                  		jmp	VanP_Index(pc,d1.w)
00019C04                            ; ===========================================================================
00019C04 0000                       VanP_Index:	dc.w VanP_Main-VanP_Index
00019C06 0000                       		dc.w VanP_Vanish-VanP_Index
00019C08 0000                       		dc.w VanP_Appear-VanP_Index
00019C0A 0000                       		dc.w loc_16068-VanP_Index
00019C0C                            
00019C0C =00000030                  vanp_timer:	equ $30		; counter for time until event
00019C0C =00000032                  vanp_timelen:	equ $32		; time between events (general)
00019C0C                            ; ===========================================================================
00019C0C                            
00019C0C                            VanP_Main:	; Routine 0
00019C0C 5C28 0024                  		addq.b	#6,obRoutine(a0)
00019C10 217C 0000 0000 0004        		move.l	#Map_VanP,obMap(a0)
00019C18 317C 445D 0002             		move.w	#$445D,obGfx(a0)
00019C1E 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; is level Spring Yard Zone?
00019C24 6700                       		beq.s	VanP_IsSYZ	; if yes, branch
00019C26 317C 44C3 0002             		move.w	#$44C3,obGfx(a0)	; SBZ
00019C2C                            
00019C2C                            	VanP_IsSYZ:	
00019C2C 0028 0004 0001             		ori.b	#4,obRender(a0)
00019C32 117C 0010 0014             		move.b	#$10,obActWid(a0)
00019C38 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019C3E 7000                       		moveq	#0,d0
00019C40 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00019C44 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00019C48 5240                       		addq.w	#1,d0		; add 1
00019C4A EF48                       		lsl.w	#7,d0		; multiply by $80
00019C4C 3200                       		move.w	d0,d1
00019C4E 5340                       		subq.w	#1,d0
00019C50 3140 0030                  		move.w	d0,vanp_timer(a0)
00019C54 3140 0032                  		move.w	d0,vanp_timelen(a0)
00019C58 7000                       		moveq	#0,d0
00019C5A 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00019C5E 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00019C62 0641 0080                  		addi.w	#$80,d1
00019C66 C0C1                       		mulu.w	d1,d0
00019C68 E088                       		lsr.l	#8,d0
00019C6A 3140 0036                  		move.w	d0,$36(a0)
00019C6E 5341                       		subq.w	#1,d1
00019C70 3141 0038                  		move.w	d1,$38(a0)
00019C74                            
00019C74                            loc_16068:	; Routine 6
00019C74 3038 FE04                  		move.w	(v_framecount).w,d0
00019C78 9068 0036                  		sub.w	$36(a0),d0
00019C7C C068 0038                  		and.w	$38(a0),d0
00019C80 6600                       		bne.s	@animate
00019C82 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto VanP_Vanish next
00019C86 6000                       		bra.s	VanP_Vanish
00019C88                            ; ===========================================================================
00019C88                            
00019C88                            @animate:
00019C88 43F9 0000 0000             		lea	(Ani_Van).l,a1
00019C8E 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
00019C94 4EF9 0001 18E2             		jmp	RememberState
00019C9A                            ; ===========================================================================
00019C9A                            
00019C9A                            VanP_Vanish:	; Routine 2
00019C9A                            VanP_Appear:	; Routine 4
00019C9A 5368 0030                  		subq.w	#1,vanp_timer(a0)
00019C9E 6A00                       		bpl.s	@wait
00019CA0 317C 007F 0030             		move.w	#127,vanp_timer(a0)
00019CA6 4A28 001C                  		tst.b	obAnim(a0)	; is platform vanishing?
00019CAA 6700                       		beq.s	@isvanishing	; if yes, branch
00019CAC 3168 0032 0030             		move.w	vanp_timelen(a0),vanp_timer(a0)
00019CB2                            
00019CB2                            	@isvanishing:
00019CB2 0868 0000 001C             		bchg	#0,obAnim(a0)
00019CB8                            
00019CB8                            	@wait:
00019CB8 43F9 0000 0000             		lea	(Ani_Van).l,a1
00019CBE 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
00019CC4 0828 0001 001A             		btst	#1,obFrame(a0)	; has platform vanished?
00019CCA 6600                       		bne.s	@notsolid	; if yes, branch
00019CCC 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
00019CD2 6600                       		bne.s	@loc_160D6
00019CD4 7200                       		moveq	#0,d1
00019CD6 1228 0014                  		move.b	obActWid(a0),d1
00019CDA 4EB9 0000 8C88             		jsr	(PlatformObject).l
00019CE0 4EF9 0001 18E2             		jmp	RememberState
00019CE6                            ; ===========================================================================
00019CE6                            
00019CE6                            @loc_160D6:
00019CE6 7200                       		moveq	#0,d1
00019CE8 1228 0014                  		move.b	obActWid(a0),d1
00019CEC 4EB9 0000 8DFC             		jsr	(ExitPlatform).l
00019CF2 3428 0008                  		move.w	obX(a0),d2
00019CF6 4EB9 0000 9366             		jsr	(MvSonicOnPtfm2).l
00019CFC 4EF9 0001 18E2             		jmp	RememberState
00019D02                            ; ===========================================================================
00019D02                            
00019D02                            @notsolid:
00019D02 0828 0003 0022             		btst	#3,obStatus(a0)
00019D08 6700                       		beq.s	@display
00019D0A 43F8 D000                  		lea	(v_player).w,a1
00019D0E 08A9 0003 0022             		bclr	#3,obStatus(a1)
00019D14 08A8 0003 0022             		bclr	#3,obStatus(a0)
00019D1A 117C 0002 0024             		move.b	#2,obRoutine(a0)
00019D20 4228 0025                  		clr.b	obSolid(a0)
00019D24                            
00019D24                            	@display:
00019D24 4EF9 0001 18E2             		jmp	RememberState
00019D24 4EF9 0001 18E2             		jmp	RememberState
00019D2A                            		include	"_anim\SBZ Vanishing Platforms.asm"
00019D2A                            ; ---------------------------------------------------------------------------
00019D2A                            ; Animation script - vanishing platforms (SBZ)
00019D2A                            ; ---------------------------------------------------------------------------
00019D2A 0000                       Ani_Van:	dc.w @vanish-Ani_Van
00019D2C 0000                       		dc.w @appear-Ani_Van
00019D2E 0300 0102 0304 0506 FE01   @vanish:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, afBack, 1
00019D38                            		even
00019D38 0306 0504 0302 0100 FE01   @appear:	dc.b 3,	6, 5, 4, 3, 2, 1, 0, afBack, 1
00019D42                            		even
00019D42                            		even
00019D42                            Map_VanP:	include	"_maps\SBZ Vanishing Platforms.asm"
00019D42                            ; --------------------------------------------------------------------------------
00019D42                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00019D42                            ; --------------------------------------------------------------------------------
00019D42                            
00019D42                            SME_Mrcg1:	
00019D42 0000 0000                  		dc.w SME_Mrcg1_E-SME_Mrcg1, SME_Mrcg1_14-SME_Mrcg1	
00019D46 0000 0000                  		dc.w SME_Mrcg1_29-SME_Mrcg1, SME_Mrcg1_2F-SME_Mrcg1	
00019D4A 0000 0000                  		dc.w SME_Mrcg1_3A-SME_Mrcg1, SME_Mrcg1_40-SME_Mrcg1	
00019D4E 0000                       		dc.w SME_Mrcg1_46-SME_Mrcg1	
00019D50 01                         SME_Mrcg1_E:	dc.b 1	
00019D51 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00019D56 04                         SME_Mrcg1_14:	dc.b 4	
00019D57 F803 0010 F8               		dc.b $F8, 3, 0, $10, $F8	
00019D5C F803 0010 00               		dc.b $F8, 3, 0, $10, 0	
00019D61 F803 0010 F0               		dc.b $F8, 3, 0, $10, $F0	
00019D66 F803 0010 08               		dc.b $F8, 3, 0, $10, 8	
00019D6B 01                         SME_Mrcg1_29:	dc.b 1	
00019D6C F807 0000 F8               		dc.b $F8, 7, 0, 0, $F8	
00019D71 02                         SME_Mrcg1_2F:	dc.b 2	
00019D72 F803 0010 F8               		dc.b $F8, 3, 0, $10, $F8	
00019D77 F803 0010 00               		dc.b $F8, 3, 0, $10, 0	
00019D7C 01                         SME_Mrcg1_3A:	dc.b 1	
00019D7D F803 0000 FD               		dc.b $F8, 3, 0, 0, $FD	
00019D82 01                         SME_Mrcg1_40:	dc.b 1	
00019D83 F803 0010 FD               		dc.b $F8, 3, 0, $10, $FD	
00019D88 00                         SME_Mrcg1_46:	dc.b 0	
00019D8A 00                         		even
00019D8A 00                         		even
00019D8A                            		include	"_incObj\6E Electrocuter.asm"
00019D8A                            ; ---------------------------------------------------------------------------
00019D8A                            ; Object 6E - electrocution orbs (SBZ)
00019D8A                            ; ---------------------------------------------------------------------------
00019D8A                            
00019D8A                            Electro:
00019D8A 7000                       		moveq	#0,d0
00019D8C 1028 0024                  		move.b	obRoutine(a0),d0
00019D90 323B 0000                  		move.w	Elec_Index(pc,d0.w),d1
00019D94 4EFB 1000                  		jmp	Elec_Index(pc,d1.w)
00019D98                            ; ===========================================================================
00019D98 0000                       Elec_Index:	dc.w Elec_Main-Elec_Index
00019D9A 0000                       		dc.w Elec_Shock-Elec_Index
00019D9C                            
00019D9C =00000034                  elec_freq:	equ $34		; frequency
00019D9C                            ; ===========================================================================
00019D9C                            
00019D9C                            Elec_Main:	; Routine 0
00019D9C 5428 0024                  		addq.b	#2,obRoutine(a0)
00019DA0 217C 0000 0000 0004        		move.l	#Map_Elec,obMap(a0)
00019DA8 317C 047E 0002             		move.w	#$47E,obGfx(a0)
00019DAE 0028 0004 0001             		ori.b	#4,obRender(a0)
00019DB4 117C 0028 0014             		move.b	#$28,obActWid(a0)
00019DBA 7000                       		moveq	#0,d0
00019DBC 1028 0028                  		move.b	obSubtype(a0),d0 ; read object type
00019DC0 E948                       		lsl.w	#4,d0		; multiply by $10
00019DC2 5340                       		subq.w	#1,d0
00019DC4 3140 0034                  		move.w	d0,elec_freq(a0)
00019DC8                            
00019DC8                            Elec_Shock:	; Routine 2
00019DC8 3038 FE04                  		move.w	(v_framecount).w,d0
00019DCC C068 0034                  		and.w	elec_freq(a0),d0 ; is it time to zap?
00019DD0 6600                       		bne.s	@animate	; if not, branch
00019DD2                            
00019DD2 117C 0001 001C             		move.b	#1,obAnim(a0)	; run "zap" animation
00019DD8 4A28 0001                  		tst.b	obRender(a0)
00019DDC 6A00                       		bpl.s	@animate
00019DE8                            
00019DE8                            	@animate:
00019DE8 43F9 0000 0000             		lea	(Ani_Elec).l,a1
00019DEE 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
00019DF4 117C 0000 0020             		move.b	#0,obColType(a0)
00019DFA 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; is 4th frame displayed?
00019E00 6600                       		bne.s	@display	; if not, branch
00019E02 117C 00A4 0020             		move.b	#$A4,obColType(a0) ; if yes, make object hurt Sonic
00019E08                            
00019E08                            	@display:
00019E08 4EF9 0001 18E2             		jmp	RememberState
00019E08 4EF9 0001 18E2             		jmp	RememberState
00019E0E                            		include	"_anim\Electrocuter.asm"
00019E0E                            ; ---------------------------------------------------------------------------
00019E0E                            ; Animation script - electrocution orbs (SBZ)
00019E0E                            ; ---------------------------------------------------------------------------
00019E0E 0000                       Ani_Elec:	dc.w byte_161CC-Ani_Elec
00019E10 0000                       		dc.w byte_161D0-Ani_Elec
00019E12 0700 FF                    byte_161CC:	dc.b 7,	0, afEnd
00019E16 00                         		even
00019E16 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, afChange, 0
00019E26                            		even
00019E26                            		even
00019E26                            Map_Elec:	include	"_maps\Electrocuter.asm"
00019E26                            ; --------------------------------------------------------------------------------
00019E26                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00019E26                            ; --------------------------------------------------------------------------------
00019E26                            
00019E26                            SME_KiF9w:	
00019E26 0000 0000                  		dc.w SME_KiF9w_C-SME_KiF9w, SME_KiF9w_17-SME_KiF9w	
00019E2A 0000 0000                  		dc.w SME_KiF9w_27-SME_KiF9w, SME_KiF9w_41-SME_KiF9w	
00019E2E 0000 0000                  		dc.w SME_KiF9w_56-SME_KiF9w, SME_KiF9w_75-SME_KiF9w	
00019E32 02                         SME_KiF9w_C:	dc.b 2	
00019E33 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019E38 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019E3D 03                         SME_KiF9w_17:	dc.b 3	
00019E3E F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00019E43 F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
00019E48 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019E4D 05                         SME_KiF9w_27:	dc.b 5	
00019E4E F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00019E53 F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
00019E58 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019E5D F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
00019E62 F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
00019E67 04                         SME_KiF9w_41:	dc.b 4	
00019E68 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019E6D 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019E72 F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
00019E77 F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
00019E7C 06                         SME_KiF9w_56:	dc.b 6	
00019E7D F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00019E82 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019E87 F60D 300C 08               		dc.b $F6, $D, $30, $C, 8	
00019E8C F60D 380C DC               		dc.b $F6, $D, $38, $C, $DC	
00019E91 F60D 200C 24               		dc.b $F6, $D, $20, $C, $24	
00019E96 F60D 280C C0               		dc.b $F6, $D, $28, $C, $C0	
00019E9B 04                         SME_KiF9w_75:	dc.b 4	
00019E9C F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019EA1 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019EA6 F60D 300C 24               		dc.b $F6, $D, $30, $C, $24	
00019EAB F60D 380C C0               		dc.b $F6, $D, $38, $C, $C0	
00019EB0                            		even
00019EB0                            		even
00019EB0                            		include	"_incObj\6F SBZ Spin Platform Conveyor.asm"
00019EB0                            ; ---------------------------------------------------------------------------
00019EB0                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00019EB0                            ; ---------------------------------------------------------------------------
00019EB0                            
00019EB0                            SpinConvey:
00019EB0 7000                       		moveq	#0,d0
00019EB2 1028 0024                  		move.b	obRoutine(a0),d0
00019EB6 323B 0000                  		move.w	SpinC_Index(pc,d0.w),d1
00019EBA 4EBB 1000                  		jsr	SpinC_Index(pc,d1.w)
00019EDA                            
00019EDA                            SpinC_Display:
00019EDA 4EF9 0000 F82E             		jmp	(DisplaySprite).l
00019EE0                            ; ===========================================================================
00019EE0                            
00019EE0                            loc_1629A:
00019EE0 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; check if act is 3
00019EE6 6600                       		bne.s	SpinC_Act1or2	; if not, branch
00019EE8 0C40 FF80                  		cmpi.w	#-$80,d0
00019EEC 64EC                       		bcc.s	SpinC_Display
00019EEE                            
00019EEE                            SpinC_Act1or2:
00019EEE 1028 002F                  		move.b	$2F(a0),d0
00019EF2 6A00                       		bpl.s	SpinC_Delete
00019EF4 0240 007F                  		andi.w	#$7F,d0
00019EF8 45F8 F7C1                  		lea	(v_obj63).w,a2
00019EFC 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00019F02                            
00019F02                            SpinC_Delete:
00019F02 4EF9 0000 F86E             		jmp	(DeleteObject).l
00019F08                            ; ===========================================================================
00019F08 0000                       SpinC_Index:	dc.w SpinC_Main-SpinC_Index
00019F0A 0000                       		dc.w loc_163D8-SpinC_Index
00019F0C                            ; ===========================================================================
00019F0C                            
00019F0C                            SpinC_Main:	; Routine 0
00019F0C 1028 0028                  		move.b	obSubtype(a0),d0
00019F10 6B00 0000                  		bmi.w	loc_16380
00019F14 5428 0024                  		addq.b	#2,obRoutine(a0)
00019F18 217C 0001 9538 0004        		move.l	#Map_Spin,obMap(a0)
00019F20 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
00019F26 117C 0010 0014             		move.b	#$10,obActWid(a0)
00019F2C 0028 0004 0001             		ori.b	#4,obRender(a0)
00019F32 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019F38 7000                       		moveq	#0,d0
00019F3A 1028 0028                  		move.b	obSubtype(a0),d0
00019F3E 3200                       		move.w	d0,d1
00019F40 E648                       		lsr.w	#3,d0
00019F42 0240 001E                  		andi.w	#$1E,d0
00019F46 45FA 0000                  		lea	off_164A6(pc),a2
00019F4A D4F2 0000                  		adda.w	(a2,d0.w),a2
00019F4E 315A 0038                  		move.w	(a2)+,$38(a0)
00019F52 315A 0030                  		move.w	(a2)+,$30(a0)
00019F56 214A 003C                  		move.l	a2,$3C(a0)
00019F5A 0241 000F                  		andi.w	#$F,d1
00019F5E E549                       		lsl.w	#2,d1
00019F60 1141 0038                  		move.b	d1,$38(a0)
00019F64 117C 0004 003A             		move.b	#4,$3A(a0)
00019F6A 4A38 F7C0                  		tst.b	(f_conveyrev).w
00019F6E 6700                       		beq.s	loc_16356
00019F70 117C 0001 003B             		move.b	#1,$3B(a0)
00019F76 4428 003A                  		neg.b	$3A(a0)
00019F7A 7200                       		moveq	#0,d1
00019F7C 1228 0038                  		move.b	$38(a0),d1
00019F80 D228 003A                  		add.b	$3A(a0),d1
00019F84 B228 0039                  		cmp.b	$39(a0),d1
00019F88 6500                       		bcs.s	loc_16352
00019F8A 1001                       		move.b	d1,d0
00019F8C 7200                       		moveq	#0,d1
00019F8E 4A00                       		tst.b	d0
00019F90 6A00                       		bpl.s	loc_16352
00019F92 1228 0039                  		move.b	$39(a0),d1
00019F96 5901                       		subq.b	#4,d1
00019F98                            
00019F98                            loc_16352:
00019F98 1141 0038                  		move.b	d1,$38(a0)
00019F9C                            
00019F9C                            loc_16356:
00019F9C 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00019FA2 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00019FA8 4A41                       		tst.w	d1
00019FAA 6600                       		bne.s	loc_1636C
00019FAC 117C 0001 001C             		move.b	#1,obAnim(a0)
00019FB2                            
00019FB2                            loc_1636C:
00019FB2 0C41 0008                  		cmpi.w	#8,d1
00019FB6 6600                       		bne.s	loc_16378
00019FB8 117C 0000 001C             		move.b	#0,obAnim(a0)
00019FBE                            
00019FBE                            loc_16378:
00019FBE 6100 A9A8                  		bsr.w	LCon_ChangeDir
00019FC2 6000 0000                  		bra.w	loc_163D8
00019FC6                            ; ===========================================================================
00019FC6                            
00019FC6                            loc_16380:
00019FC6 1140 002F                  		move.b	d0,$2F(a0)
00019FCA 0240 007F                  		andi.w	#$7F,d0
00019FCE 45F8 F7C1                  		lea	(v_obj63).w,a2
00019FD2 08F2 0000 0000             		bset	#0,(a2,d0.w)
00019FD8 6700                       		beq.s	loc_1639A
00019FDA 4EF9 0000 F86E             		jmp	(DeleteObject).l
00019FE0                            ; ===========================================================================
00019FE0                            
00019FE0                            loc_1639A:
00019FE0 D040                       		add.w	d0,d0
00019FE2 0240 001E                  		andi.w	#$1E,d0
00019FE6 0640 0000                  		addi.w	#ObjPosSBZPlatform_Index-ObjPos_Index,d0
00019FEA 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00019FF0 D4F2 0000                  		adda.w	(a2,d0.w),a2
00019FF4 321A                       		move.w	(a2)+,d1
00019FF6 2248                       		movea.l	a0,a1
00019FF8 6000                       		bra.s	SpinC_LoadPform
00019FFA                            ; ===========================================================================
00019FFA                            
00019FFA                            SpinC_Loop:
00019FFA 4EB9 0000 FDC8             		jsr	(FindFreeObj).l
0001A000 6600                       		bne.s	loc_163D0
0001A002                            
0001A002                            SpinC_LoadPform:
0001A002 12BC 006F                  		move.b	#id_SpinConvey,0(a1)
0001A006 335A 0008                  		move.w	(a2)+,obX(a1)
0001A00A 335A 000C                  		move.w	(a2)+,obY(a1)
0001A00E 301A                       		move.w	(a2)+,d0
0001A010 1340 0028                  		move.b	d0,obSubtype(a1)
0001A014                            
0001A014                            loc_163D0:
0001A014 51C9 FFE4                  		dbf	d1,SpinC_Loop
0001A018                            
0001A018 588F                       		addq.l	#4,sp
0001A01A 4E75                       		rts	
0001A01C                            ; ===========================================================================
0001A01C                            
0001A01C                            loc_163D8:	; Routine 2
0001A01C 43F9 0000 0000             		lea	(Ani_SpinConvey).l,a1
0001A022 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
0001A028 4A28 001A                  		tst.b	obFrame(a0)
0001A02C 6600                       		bne.s	loc_16404
0001A02E 3F28 0008                  		move.w	obX(a0),-(sp)
0001A032 6100 0000                  		bsr.w	loc_16424
0001A036 323C 001B                  		move.w	#$1B,d1
0001A03A 343C 0007                  		move.w	#7,d2
0001A03E 3602                       		move.w	d2,d3
0001A040 5243                       		addq.w	#1,d3
0001A042 381F                       		move.w	(sp)+,d4
0001A044 4EF9 0001 1D7A             		jmp	SolidObject
0001A04A                            ; ===========================================================================
0001A04A                            
0001A04A                            loc_16404:
0001A04A 0828 0003 0022             		btst	#3,obStatus(a0)
0001A050 6700                       		beq.s	loc_16420
0001A052 43F8 D000                  		lea	(v_objspace).w,a1
0001A056 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001A05C 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001A062 4228 0025                  		clr.b	obSolid(a0)
0001A066                            
0001A066                            loc_16420:
0001A066 6000 0000                  		bra.w	loc_16424
0001A06A                            
0001A06A                            loc_16424:
0001A06A 3028 0008                  		move.w	obX(a0),d0
0001A06E B068 0034                  		cmp.w	$34(a0),d0
0001A072 6600                       		bne.s	loc_16484
0001A074 3028 000C                  		move.w	obY(a0),d0
0001A078 B068 0036                  		cmp.w	$36(a0),d0
0001A07C 6600                       		bne.s	loc_16484
0001A07E 7200                       		moveq	#0,d1
0001A080 1228 0038                  		move.b	$38(a0),d1
0001A084 D228 003A                  		add.b	$3A(a0),d1
0001A088 B228 0039                  		cmp.b	$39(a0),d1
0001A08C 6500                       		bcs.s	loc_16456
0001A08E 1001                       		move.b	d1,d0
0001A090 7200                       		moveq	#0,d1
0001A092 4A00                       		tst.b	d0
0001A094 6A00                       		bpl.s	loc_16456
0001A096 1228 0039                  		move.b	$39(a0),d1
0001A09A 5901                       		subq.b	#4,d1
0001A09C                            
0001A09C                            loc_16456:
0001A09C 1141 0038                  		move.b	d1,$38(a0)
0001A0A0 2268 003C                  		movea.l	$3C(a0),a1
0001A0A4 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
0001A0AA 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
0001A0B0 4A41                       		tst.w	d1
0001A0B2 6600                       		bne.s	loc_16474
0001A0B4 117C 0001 001C             		move.b	#1,obAnim(a0)
0001A0BA                            
0001A0BA                            loc_16474:
0001A0BA 0C41 0008                  		cmpi.w	#8,d1
0001A0BE 6600                       		bne.s	loc_16480
0001A0C0 117C 0000 001C             		move.b	#0,obAnim(a0)
0001A0C6                            
0001A0C6                            loc_16480:
0001A0C6 6100 A8A0                  		bsr.w	LCon_ChangeDir
0001A0CA                            
0001A0CA                            loc_16484:
0001A0CA 4EF9 0000 F81A             		jmp	(SpeedToPos).l
0001A0CA 4EF9 0000 F81A             		jmp	(SpeedToPos).l
0001A0D0                            		include	"_anim\SBZ Spin Platform Conveyor.asm"
0001A0D0                            ; ---------------------------------------------------------------------------
0001A0D0                            ; Animation script - platform on conveyor belt (SBZ)
0001A0D0                            ; ---------------------------------------------------------------------------
0001A0D0 0000                       Ani_SpinConvey:	dc.w @spin-Ani_SpinConvey
0001A0D2 0000                       		dc.w @still-Ani_SpinConvey
0001A0D4 0000 0102 0304 4342 4140+  @spin:		dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001A0E1 6423 2221 00FF             		dc.b $64, $23, $22, $21, 0, afEnd
0001A0E8 00                         		even
0001A0E8 0F00 FF                    @still:		dc.b $F, 0, afEnd
0001A0EC 00                         		even
0001A0EC 00                         		even
0001A0EC                            
0001A0EC 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
0001A0F2 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
0001A0F8 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
0001A10C 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
0001A120 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
0001A134 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
0001A148 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
0001A15C 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
0001A170                            ; ===========================================================================
0001A170                            
0001A170                            		include	"_incObj\70 Girder Block.asm"
0001A170                            ; ---------------------------------------------------------------------------
0001A170                            ; Object 70 - large girder block (SBZ)
0001A170                            ; ---------------------------------------------------------------------------
0001A170                            
0001A170                            Girder:
0001A170 7000                       		moveq	#0,d0
0001A172 1028 0024                  		move.b	obRoutine(a0),d0
0001A176 323B 0000                  		move.w	Gird_Index(pc,d0.w),d1
0001A17A 4EFB 1000                  		jmp	Gird_Index(pc,d1.w)
0001A17E                            ; ===========================================================================
0001A17E 0000                       Gird_Index:	dc.w Gird_Main-Gird_Index
0001A180 0000                       		dc.w Gird_Action-Gird_Index
0001A182                            
0001A182 =00000016                  gird_height:	equ $16
0001A182 =00000032                  gird_origX:	equ $32		; original x-axis position
0001A182 =00000030                  gird_origY:	equ $30		; original y-axis position
0001A182 =00000034                  gird_time:	equ $34		; duration for movement in a direction
0001A182 =00000038                  gird_set:	equ $38		; which movement settings to use (0/8/16/24)
0001A182 =0000003A                  gird_delay:	equ $3A		; delay for movement
0001A182                            ; ===========================================================================
0001A182                            
0001A182                            Gird_Main:	; Routine 0
0001A182 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A186 217C 0000 0000 0004        		move.l	#Map_Gird,obMap(a0)
0001A18E 317C 42F0 0002             		move.w	#$42F0,obGfx(a0)
0001A194 0028 0004 0001             		ori.b	#4,obRender(a0)
0001A19A 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001A1A0 117C 0060 0014             		move.b	#$60,obActWid(a0)
0001A1A6 117C 0018 0016             		move.b	#$18,gird_height(a0)
0001A1AC 3168 0008 0032             		move.w	obX(a0),gird_origX(a0)
0001A1B2 3168 000C 0030             		move.w	obY(a0),gird_origY(a0)
0001A1B8 6100 0000                  		bsr.w	Gird_ChgMove
0001A1BC                            
0001A1BC                            Gird_Action:	; Routine 2
0001A1BC 3F28 0008                  		move.w	obX(a0),-(sp)
0001A1C0 4A68 003A                  		tst.w	gird_delay(a0)
0001A1C4 6700                       		beq.s	@beginmove
0001A1C6 5368 003A                  		subq.w	#1,gird_delay(a0)
0001A1CA 6600                       		bne.s	@solid
0001A1CC                            
0001A1CC                            	@beginmove:
0001A1CC 4EB9 0000 F81A             		jsr	(SpeedToPos).l
0001A1D2 5368 0034                  		subq.w	#1,gird_time(a0) ; decrement movement duration
0001A1D6 6600                       		bne.s	@solid		; if time remains, branch
0001A1D8 6100 0000                  		bsr.w	Gird_ChgMove	; if time is zero, branch
0001A1DC                            
0001A1DC                            	@solid:
0001A1DC 381F                       		move.w	(sp)+,d4
0001A1DE 4A28 0001                  		tst.b	obRender(a0)
0001A1E2 6A00                       		bpl.s	@chkdel
0001A1E4 7200                       		moveq	#0,d1
0001A1E6 1228 0014                  		move.b	obActWid(a0),d1
0001A1EA 0641 000B                  		addi.w	#$B,d1
0001A1EE 7400                       		moveq	#0,d2
0001A1F0 1428 0016                  		move.b	gird_height(a0),d2
0001A1F4 3602                       		move.w	d2,d3
0001A1F6 5243                       		addq.w	#1,d3
0001A1F8 4EB9 0001 1D7A             		jsr	SolidObject
0001A1FE                            
0001A1FE                            	@chkdel:
0001A21A 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001A220                            
0001A220                            	@delete:
0001A220 4EF9 0000 F86E             		jmp	(DeleteObject).l
0001A226                            ; ===========================================================================
0001A226                            
0001A226                            Gird_ChgMove:
0001A226 1028 0038                  		move.b	gird_set(a0),d0
0001A22A 0240 0018                  		andi.w	#$18,d0
0001A22E 43F9 0000 0000             		lea	(@settings).l,a1
0001A234 43F1 0000                  		lea	(a1,d0.w),a1
0001A238 3159 0010                  		move.w	(a1)+,obVelX(a0)
0001A23C 3159 0012                  		move.w	(a1)+,obVelY(a0)
0001A240 3159 0034                  		move.w	(a1)+,gird_time(a0)
0001A244 5028 0038                  		addq.b	#8,gird_set(a0)	; use next settings
0001A248 317C 0007 003A             		move.w	#7,gird_delay(a0)
0001A24E 4E75                       		rts	
0001A250                            ; ===========================================================================
0001A250                            @settings:	;   x-speed, y-speed, duration
0001A250 0100 0000 0060 0000        		dc.w   $100,	 0,   $60,     0 ; right
0001A258 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0 ; down
0001A260 FF00 FFC0 0060 0000        		dc.w  -$100,  -$40,   $60,     0 ; up/left
0001A268 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
0001A268 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
0001A270                            Map_Gird:	include	"_maps\Girder Block.asm"
0001A270                            ; ---------------------------------------------------------------------------
0001A270                            ; Sprite mappings - large girder block (SBZ)
0001A270                            ; ---------------------------------------------------------------------------
0001A270                            Map_Gird_internal:
0001A270 0000                       		dc.w @girder-Map_Gird_internal
0001A272 0C                         @girder:	dc.b $C
0001A273 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
0001A278 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
0001A27D E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
0001A282 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
0001A287 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
0001A28C 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
0001A291 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
0001A296 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
0001A29B E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
0001A2A0 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
0001A2A5 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
0001A2AA 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
0001A2B0 00                         		even
0001A2B0 00                         		even
0001A2B0                            		include	"_incObj\72 Teleporter.asm"
0001A2B0                            ; ---------------------------------------------------------------------------
0001A2B0                            ; Object 72 - teleporter (SBZ)
0001A2B0                            ; ---------------------------------------------------------------------------
0001A2B0                            
0001A2B0                            Teleport:
0001A2B0 7000                       		moveq	#0,d0
0001A2B2 1028 0024                  		move.b	obRoutine(a0),d0
0001A2B6 323B 0000                  		move.w	Tele_Index(pc,d0.w),d1
0001A2BA 4EBB 1000                  		jsr	Tele_Index(pc,d1.w)
0001A2DA 4E75                       		rts	
0001A2DC                            
0001A2DC                            	@delete:
0001A2DC 4EF9 0000 F86E             		jmp	(DeleteObject).l
0001A2E2                            ; ===========================================================================
0001A2E2 0000                       Tele_Index:	dc.w Tele_Main-Tele_Index
0001A2E4 0000                       		dc.w loc_166C8-Tele_Index
0001A2E6 0000                       		dc.w loc_1675E-Tele_Index
0001A2E8 0000                       		dc.w loc_16798-Tele_Index
0001A2EA                            ; ===========================================================================
0001A2EA                            
0001A2EA                            Tele_Main:	; Routine 0
0001A2EA 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A2EE 1028 0028                  		move.b	obSubtype(a0),d0
0001A2F2 D040                       		add.w	d0,d0
0001A2F4 0240 001E                  		andi.w	#$1E,d0
0001A2F8 45FA 0000                  		lea	Tele_Data(pc),a2
0001A2FC D4F2 0000                  		adda.w	(a2,d0.w),a2
0001A300 315A 003A                  		move.w	(a2)+,$3A(a0)
0001A304 214A 003C                  		move.l	a2,$3C(a0)
0001A308 315A 0036                  		move.w	(a2)+,$36(a0)
0001A30C 315A 0038                  		move.w	(a2)+,$38(a0)
0001A310                            
0001A310                            loc_166C8:	; Routine 2
0001A310 43F8 D000                  		lea	(v_player).w,a1
0001A314 3029 0008                  		move.w	obX(a1),d0
0001A318 9068 0008                  		sub.w	obX(a0),d0
0001A31C 0828 0000 0022             		btst	#0,obStatus(a0)
0001A322 6700                       		beq.s	loc_166E0
0001A324 0640 000F                  		addi.w	#$F,d0
0001A328                            
0001A328                            loc_166E0:
0001A328 0C40 0010                  		cmpi.w	#$10,d0
0001A32C 6400                       		bcc.s	locret_1675C
0001A32E 3229 000C                  		move.w	obY(a1),d1
0001A332 9268 000C                  		sub.w	obY(a0),d1
0001A336 0641 0020                  		addi.w	#$20,d1
0001A33A 0C41 0040                  		cmpi.w	#$40,d1
0001A33E 6400                       		bcc.s	locret_1675C
0001A340 4A38 F7C8                  		tst.b	(f_lockmulti).w
0001A344 6600                       		bne.s	locret_1675C
0001A346 0C28 0007 0028             		cmpi.b	#7,obSubtype(a0)
0001A34C 6600                       		bne.s	loc_1670E
0001A34E 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w
0001A354 6500                       		bcs.s	locret_1675C
0001A356                            
0001A356                            loc_1670E:
0001A356 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A35A 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
0001A360 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; use Sonic's rolling animation
0001A366 337C 0800 0020             		move.w	#$800,obInertia(a1)
0001A36C 337C 0000 0010             		move.w	#0,obVelX(a1)
0001A372 337C 0000 0012             		move.w	#0,obVelY(a1)
0001A378 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001A37E 08A9 0005 0022             		bclr	#5,obStatus(a1)
0001A384 08E9 0001 0022             		bset	#1,obStatus(a1)
0001A38A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A390 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A396 4228 0032                  		clr.b	$32(a0)
0001A3A4                            
0001A3A4                            locret_1675C:
0001A3A4 4E75                       		rts	
0001A3A6                            ; ===========================================================================
0001A3A6                            
0001A3A6                            loc_1675E:	; Routine 4
0001A3A6 43F8 D000                  		lea	(v_player).w,a1
0001A3AA 1028 0032                  		move.b	$32(a0),d0
0001A3AE 5428 0032                  		addq.b	#2,$32(a0)
0001A3B2 4EB9 0000 3D28             		jsr	(CalcSine).l
0001A3B8 EA40                       		asr.w	#5,d0
0001A3BA 3428 000C                  		move.w	obY(a0),d2
0001A3BE 9440                       		sub.w	d0,d2
0001A3C0 3342 000C                  		move.w	d2,obY(a1)
0001A3C4 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
0001A3CA 6600                       		bne.s	locret_16796
0001A3CC 6100 0000                  		bsr.w	sub_1681C
0001A3D0 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A3DE                            
0001A3DE                            locret_16796:
0001A3DE 4E75                       		rts	
0001A3E0                            ; ===========================================================================
0001A3E0                            
0001A3E0                            loc_16798:	; Routine 6
0001A3E0 588F                       		addq.l	#4,sp
0001A3E2 43F8 D000                  		lea	(v_player).w,a1
0001A3E6 5328 002E                  		subq.b	#1,$2E(a0)
0001A3EA 6A00                       		bpl.s	loc_167DA
0001A3EC 3368 0036 0008             		move.w	$36(a0),obX(a1)
0001A3F2 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001A3F8 7200                       		moveq	#0,d1
0001A3FA 1228 003A                  		move.b	$3A(a0),d1
0001A3FE 5801                       		addq.b	#4,d1
0001A400 B228 003B                  		cmp.b	$3B(a0),d1
0001A404 6500                       		bcs.s	loc_167C2
0001A406 7200                       		moveq	#0,d1
0001A408 6000                       		bra.s	loc_16800
0001A40A                            ; ===========================================================================
0001A40A                            
0001A40A                            loc_167C2:
0001A40A 1141 003A                  		move.b	d1,$3A(a0)
0001A40E 2468 003C                  		movea.l	$3C(a0),a2
0001A412 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
0001A418 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
0001A41E 6000 0000                  		bra.w	sub_1681C
0001A422                            ; ===========================================================================
0001A422                            
0001A422                            loc_167DA:
0001A422 2429 0008                  		move.l	obX(a1),d2
0001A426 2629 000C                  		move.l	obY(a1),d3
0001A42A 3029 0010                  		move.w	obVelX(a1),d0
0001A42E 48C0                       		ext.l	d0
0001A430 E180                       		asl.l	#8,d0
0001A432 D480                       		add.l	d0,d2
0001A434 3029 0012                  		move.w	obVelY(a1),d0
0001A438 48C0                       		ext.l	d0
0001A43A E180                       		asl.l	#8,d0
0001A43C D680                       		add.l	d0,d3
0001A43E 2342 0008                  		move.l	d2,obX(a1)
0001A442 2343 000C                  		move.l	d3,obY(a1)
0001A446 4E75                       		rts	
0001A448                            ; ===========================================================================
0001A448                            
0001A448                            loc_16800:
0001A448 0269 07FF 000C             		andi.w	#$7FF,obY(a1)
0001A44E 4228 0024                  		clr.b	obRoutine(a0)
0001A452 4238 F7C8                  		clr.b	(f_lockmulti).w
0001A456 337C 0000 0010             		move.w	#0,obVelX(a1)
0001A45C 337C 0200 0012             		move.w	#$200,obVelY(a1)
0001A462 4E75                       		rts	
0001A464                            
0001A464                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A464                            
0001A464                            
0001A464                            sub_1681C:
0001A464 7000                       		moveq	#0,d0
0001A466 343C 1000                  		move.w	#$1000,d2
0001A46A 3028 0036                  		move.w	$36(a0),d0
0001A46E 9069 0008                  		sub.w	obX(a1),d0
0001A472 6C00                       		bge.s	loc_16830
0001A474 4440                       		neg.w	d0
0001A476 4442                       		neg.w	d2
0001A478                            
0001A478                            loc_16830:
0001A478 7200                       		moveq	#0,d1
0001A47A 363C 1000                  		move.w	#$1000,d3
0001A47E 3228 0038                  		move.w	$38(a0),d1
0001A482 9269 000C                  		sub.w	obY(a1),d1
0001A486 6C00                       		bge.s	loc_16844
0001A488 4441                       		neg.w	d1
0001A48A 4443                       		neg.w	d3
0001A48C                            
0001A48C                            loc_16844:
0001A48C B240                       		cmp.w	d0,d1
0001A48E 6500                       		bcs.s	loc_1687A
0001A490 7200                       		moveq	#0,d1
0001A492 3228 0038                  		move.w	$38(a0),d1
0001A496 9269 000C                  		sub.w	obY(a1),d1
0001A49A 4841                       		swap	d1
0001A49C 83C3                       		divs.w	d3,d1
0001A49E 7000                       		moveq	#0,d0
0001A4A0 3028 0036                  		move.w	$36(a0),d0
0001A4A4 9069 0008                  		sub.w	obX(a1),d0
0001A4A8 6700                       		beq.s	loc_16866
0001A4AA 4840                       		swap	d0
0001A4AC 81C1                       		divs.w	d1,d0
0001A4AE                            
0001A4AE                            loc_16866:
0001A4AE 3340 0010                  		move.w	d0,obVelX(a1)
0001A4B2 3343 0012                  		move.w	d3,obVelY(a1)
0001A4B6 4A41                       		tst.w	d1
0001A4B8 6A00                       		bpl.s	loc_16874
0001A4BA 4441                       		neg.w	d1
0001A4BC                            
0001A4BC                            loc_16874:
0001A4BC 3141 002E                  		move.w	d1,$2E(a0)
0001A4C0 4E75                       		rts	
0001A4C2                            ; ===========================================================================
0001A4C2                            
0001A4C2                            loc_1687A:
0001A4C2 7000                       		moveq	#0,d0
0001A4C4 3028 0036                  		move.w	$36(a0),d0
0001A4C8 9069 0008                  		sub.w	obX(a1),d0
0001A4CC 4840                       		swap	d0
0001A4CE 81C2                       		divs.w	d2,d0
0001A4D0 7200                       		moveq	#0,d1
0001A4D2 3228 0038                  		move.w	$38(a0),d1
0001A4D6 9269 000C                  		sub.w	obY(a1),d1
0001A4DA 6700                       		beq.s	loc_16898
0001A4DC 4841                       		swap	d1
0001A4DE 83C0                       		divs.w	d0,d1
0001A4E0                            
0001A4E0                            loc_16898:
0001A4E0 3341 0012                  		move.w	d1,obVelY(a1)
0001A4E4 3342 0010                  		move.w	d2,obVelX(a1)
0001A4E8 4A40                       		tst.w	d0
0001A4EA 6A00                       		bpl.s	loc_168A6
0001A4EC 4440                       		neg.w	d0
0001A4EE                            
0001A4EE                            loc_168A6:
0001A4EE 3140 002E                  		move.w	d0,$2E(a0)
0001A4F2 4E75                       		rts	
0001A4F4                            ; End of function sub_1681C
0001A4F4                            
0001A4F4                            ; ===========================================================================
0001A4F4 0000 0000 0000             Tele_Data:	dc.w @type00-Tele_Data, @type01-Tele_Data, @type02-Tele_Data
0001A4FA 0000 0000 0000             		dc.w @type03-Tele_Data, @type04-Tele_Data, @type05-Tele_Data
0001A500 0000 0000                  		dc.w @type06-Tele_Data, @type07-Tele_Data
0001A504 0004 0794 098C             @type00:	dc.w 4,	$794, $98C
0001A50A 0004 0094 038C             @type01:	dc.w 4,	$94, $38C
0001A510 001C 0794 02E8             @type02:	dc.w $1C, $794,	$2E8
0001A516 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
0001A51C 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
0001A522 0884 0298 0894             		dc.w $884, $298, $894
0001A528 0270 0894 0190             		dc.w $270, $894, $190
0001A52E 0004 0894 0690             @type03:	dc.w 4,	$894, $690
0001A534 001C 1194 0470             @type04:	dc.w $1C, $1194, $470
0001A53A 1184 0498 1158             		dc.w $1184, $498, $1158
0001A540 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
0001A546 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
0001A54C 04E8 0F94 0590             		dc.w $4E8, $F94, $590
0001A552 0004 1294 0490             @type05:	dc.w 4,	$1294, $490
0001A558 001C 1594 FFE8             @type06:	dc.w $1C, $1594, $FFE8
0001A55E 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
0001A564 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
0001A56A 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
0001A570 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
0001A576 0004 0894 0090             @type07:	dc.w 4,	$894, $90
0001A576 0004 0894 0090             @type07:	dc.w 4,	$894, $90
0001A57C                            
0001A57C                            		include	"_incObj\78 Caterkiller.asm"
0001A57C                            ; ---------------------------------------------------------------------------
0001A57C                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
0001A57C                            ; ---------------------------------------------------------------------------
0001A57C                            
0001A57C                            Caterkiller:
0001A57C 7000                       		moveq	#0,d0
0001A57E 1028 0024                  		move.b	obRoutine(a0),d0
0001A582 323B 0000                  		move.w	Cat_Index(pc,d0.w),d1
0001A586 4EFB 1000                  		jmp	Cat_Index(pc,d1.w)
0001A58A                            ; ===========================================================================
0001A58A 0000                       Cat_Index:	dc.w Cat_Main-Cat_Index
0001A58C 0000                       		dc.w Cat_Head-Cat_Index
0001A58E 0000                       		dc.w Cat_BodySeg1-Cat_Index
0001A590 0000                       		dc.w Cat_BodySeg2-Cat_Index
0001A592 0000                       		dc.w Cat_BodySeg1-Cat_Index
0001A594 0000                       		dc.w Cat_Delete-Cat_Index
0001A596 0000                       		dc.w loc_16CC0-Cat_Index
0001A598                            
0001A598 =0000003C                  cat_parent:	equ $3C		; address of parent object
0001A598                            ; ===========================================================================
0001A598                            
0001A598                            locret_16950:
0001A598 4E75                       		rts	
0001A59A                            ; ===========================================================================
0001A59A                            
0001A59A                            Cat_Main:	; Routine 0
0001A59A 117C 0007 0016             		move.b	#7,obHeight(a0)
0001A5A0 117C 0008 0017             		move.b	#8,obWidth(a0)
0001A5A6 4EB9 0000 F7E2             		jsr	(ObjectFall).l
0001A5AC 4EB9 0001 8A16             		jsr	(ObjFloorDist).l
0001A5B2 4A41                       		tst.w	d1
0001A5B4 6AE2                       		bpl.s	locret_16950
0001A5B6 D368 000C                  		add.w	d1,obY(a0)
0001A5BA 4268 0012                  		clr.w	obVelY(a0)
0001A5BE 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A5C2 217C 0000 0000 0004        		move.l	#Map_Cat,obMap(a0)
0001A5CA 317C 22B0 0002             		move.w	#$22B0,obGfx(a0)
0001A5D0 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; if level is SBZ, branch
0001A5D6 6700                       		beq.s	@isscrapbrain
0001A5D8 317C 24FF 0002             		move.w	#$24FF,obGfx(a0) ; MZ specific code
0001A5DE                            
0001A5DE                            	@isscrapbrain:
0001A5DE 0228 0003 0001             		andi.b	#3,obRender(a0)
0001A5E4 0028 0004 0001             		ori.b	#4,obRender(a0)
0001A5EA 1168 0001 0022             		move.b	obRender(a0),obStatus(a0)
0001A5F0 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001A5F6 117C 0008 0014             		move.b	#8,obActWid(a0)
0001A5FC 117C 000B 0020             		move.b	#$B,obColType(a0)
0001A602 3428 0008                  		move.w	obX(a0),d2
0001A606 7A0C                       		moveq	#$C,d5
0001A608 0828 0000 0022             		btst	#0,obStatus(a0)
0001A60E 6700                       		beq.s	@noflip
0001A610 4445                       		neg.w	d5
0001A612                            
0001A612                            	@noflip:
0001A612 1C3C 0004                  		move.b	#4,d6
0001A616 7600                       		moveq	#0,d3
0001A618 7804                       		moveq	#4,d4
0001A61A 2448                       		movea.l	a0,a2
0001A61C 7202                       		moveq	#2,d1
0001A61E                            
0001A61E                            Cat_Loop:
0001A61E 4EB9 0000 FDDE             		jsr	(FindNextFreeObj).l
0001A624 6600 0000                  			bne.w	Cat_ChkGone
0001A628 12BC 0078                  		move.b	#id_Caterkiller,0(a1) ; load body segment object
0001A62C 1346 0024                  		move.b	d6,obRoutine(a1) ; goto Cat_BodySeg1 or Cat_BodySeg2 next
0001A630 5406                       		addq.b	#2,d6		; alternate between the two
0001A632 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
0001A638 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0001A63E 337C 0280 0018             		move.w	#$280,obPriority(a1)
0001A644 137C 0008 0014             		move.b	#8,obActWid(a1)
0001A64A 137C 00CB 0020             		move.b	#$CB,obColType(a1)
0001A650 D445                       		add.w	d5,d2
0001A652 3342 0008                  		move.w	d2,obX(a1)
0001A656 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A65C 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0001A662 1368 0022 0001             		move.b	obStatus(a0),obRender(a1)
0001A668 137C 0008 001A             		move.b	#8,obFrame(a1)
0001A66E 234A 003C                  		move.l	a2,cat_parent(a1)
0001A672 1344 003C                  		move.b	d4,cat_parent(a1)
0001A676 5804                       		addq.b	#4,d4
0001A678 2449                       		movea.l	a1,a2
0001A67A                            
0001A67A                            	@fail:
0001A67A 51C9 FFA2                  		dbf	d1,Cat_Loop	; repeat sequence 2 more times
0001A67E                            
0001A67E 117C 0007 002A             		move.b	#7,$2A(a0)
0001A684 4228 003C                  		clr.b	cat_parent(a0)
0001A688                            
0001A688                            Cat_Head:	; Routine 2
0001A688 4A28 0022                  		tst.b	obStatus(a0)
0001A68C 6B00 0000                  		bmi.w	loc_16C96
0001A690 7000                       		moveq	#0,d0
0001A692 1028 0025                  		move.b	ob2ndRout(a0),d0
0001A696 323B 0000                  		move.w	Cat_Index2(pc,d0.w),d1
0001A69A 4EBB 1000                  		jsr	Cat_Index2(pc,d1.w)
0001A69E 1228 002B                  		move.b	$2B(a0),d1
0001A6A2 6A00                       		bpl.s	@display
0001A6A4 43F9 0000 0000             		lea	(Ani_Cat).l,a1
0001A6AA 1028 0026                  		move.b	obAngle(a0),d0
0001A6AE 0240 007F                  		andi.w	#$7F,d0
0001A6B2 5828 0026                  		addq.b	#4,obAngle(a0)
0001A6B6 1031 0000                  		move.b	(a1,d0.w),d0
0001A6BA 6A00                       		bpl.s	@animate
0001A6BC 08A8 0007 002B             		bclr	#7,$2B(a0)
0001A6C2 6000                       		bra.s	@display
0001A6C4                            
0001A6C4                            	@animate:
0001A6C4 0201 0010                  		andi.b	#$10,d1
0001A6C8 D001                       		add.b	d1,d0
0001A6CA 1140 001A                  		move.b	d0,obFrame(a0)
0001A6CE                            
0001A6CE                            	@display:
0001A6EC 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001A6F2                            
0001A6F2                            	Cat_ChkGone:
0001A6F2 45F8 FC00                  		lea	(v_objstate).w,a2
0001A6F6 7000                       		moveq	#0,d0
0001A6F8 1028 0023                  		move.b	obRespawnNo(a0),d0
0001A6FC 6700                       		beq.s	@delete
0001A6FE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001A704                            
0001A704                            	@delete:
0001A704 117C 000A 0024             		move.b	#$A,obRoutine(a0)	; goto Cat_Delete next
0001A70A 4E75                       		rts	
0001A70C                            ; ===========================================================================
0001A70C                            
0001A70C                            Cat_Delete:	; Routine $A
0001A70C 4EF9 0000 F86E             		jmp	(DeleteObject).l
0001A712                            ; ===========================================================================
0001A712 0000                       Cat_Index2:	dc.w @wait-Cat_Index2
0001A714 0000                       		dc.w loc_16B02-Cat_Index2
0001A716                            ; ===========================================================================
0001A716                            
0001A716                            @wait:
0001A716 5328 002A                  		subq.b	#1,$2A(a0)
0001A71A 6B00                       		bmi.s	@move
0001A71C 4E75                       		rts	
0001A71E                            ; ===========================================================================
0001A71E                            
0001A71E                            @move:
0001A71E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A722 117C 0010 002A             		move.b	#$10,$2A(a0)
0001A728 317C FF40 0010             		move.w	#-$C0,obVelX(a0)
0001A72E 317C 0040 001C             		move.w	#$40,obAnim(a0)
0001A734 0868 0004 002B             		bchg	#4,$2B(a0)
0001A73A 6600                       		bne.s	loc_16AFC
0001A73C 4268 0010                  		clr.w	obVelX(a0)
0001A740 4468 001C                  		neg.w	obAnim(a0)
0001A744                            
0001A744                            loc_16AFC:
0001A744 08E8 0007 002B             		bset	#7,$2B(a0)
0001A74A                            
0001A74A                            loc_16B02:
0001A74A 5328 002A                  		subq.b	#1,$2A(a0)
0001A74E 6B00                       		bmi.s	@loc_16B5E
0001A750 4A68 0010                  			tst.w	obVelX(a0)
0001A754 6700                       			beq.s	@notmoving
0001A756 2428 0008                  			move.l	obX(a0),d2
0001A75A 2602                       			move.l	d2,d3
0001A75C 3028 0010                  		move.w	obVelX(a0),d0
0001A760 0828 0000 0022             		btst	#0,obStatus(a0)
0001A766 6700                       		beq.s	@noflip
0001A768 4440                       		neg.w	d0
0001A76A                            
0001A76A                            	@noflip:
0001A76A 48C0                       		ext.l	d0
0001A76C E180                       		asl.l	#8,d0
0001A76E D480                       		add.l	d0,d2
0001A770 2142 0008                  		move.l	d2,obX(a0)
0001A774 4843                       			swap	d3
0001A776 B668 0008                  			cmp.w	obX(a0),d3
0001A77A 6700                       			beq.s	@notmoving
0001A77C 4EB9 0001 8A16             			jsr	(ObjFloorDist).l
0001A782 0C41 FFF8                  			cmpi.w	#-8,d1
0001A786 6D00                       			blt.s	@loc_16B70
0001A788 0C41 000C                  			cmpi.w	#$C,d1
0001A78C 6C00                       			bge.s	@loc_16B70
0001A78E D368 000C                  			add.w	d1,obY(a0)
0001A792 7000                       		moveq	#0,d0
0001A794 1028 003C                  		move.b	cat_parent(a0),d0
0001A798 5228 003C                  		addq.b	#1,cat_parent(a0)
0001A79C 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
0001A7A2 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001A7A6                            
0001A7A6                            	@notmoving:
0001A7A6 4E75                       		rts	
0001A7A8                            ; ===========================================================================
0001A7A8                            
0001A7A8                            @loc_16B5E:
0001A7A8 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001A7AC 117C 0007 002A             		move.b	#7,$2A(a0)
0001A7B2 4268 0010                  			clr.w	obVelX(a0)
0001A7B6 4268 001C                  			clr.w	obAnim(a0)
0001A7BA 4E75                       		rts	
0001A7BC                            ; ===========================================================================
0001A7BC                            
0001A7BC                            @loc_16B70:
0001A7BC 7000                       			moveq	#0,d0
0001A7BE 1028 003C                  			move.b	cat_parent(a0),d0
0001A7C2 11BC 0080 002C             			move.b	#$80,$2C(a0,d0)
0001A7C8 4468 000A                  			neg.w	obX+2(a0)
0001A7CC 6700                       			beq.s	@loc_1730A
0001A7CE 0828 0000 0022             			btst	#0,obStatus(a0)
0001A7D4 6700                       			beq.s	@loc_1730A
0001A7D6 5368 0008                  			subq.w	#1,obX(a0)
0001A7DA 5228 003C                  			addq.b	#1,cat_parent(a0)
0001A7DE 7000                       			moveq	#0,d0
0001A7E0 1028 003C                  			move.b	cat_parent(a0),d0
0001A7E4 4230 002C                  			clr.b	$2C(a0,d0)
0001A7E8                            	@loc_1730A:
0001A7E8 0868 0000 0022             			bchg	#0,obStatus(a0)
0001A7EE 1168 0022 0001             			move.b	obStatus(a0),obRender(a0)
0001A7F4 5228 003C                  		addq.b	#1,cat_parent(a0)
0001A7F8 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
0001A7FE 4E75                       		rts	
0001A800                            ; ===========================================================================
0001A800                            
0001A800                            Cat_BodySeg2:	; Routine 6
0001A800 2268 003C                  		movea.l	cat_parent(a0),a1
0001A804 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001A80A 6A00                       		bpl.s	Cat_BodySeg1
0001A80C 43F9 0000 0000             		lea	(Ani_Cat).l,a1
0001A812 1028 0026                  		move.b	obAngle(a0),d0
0001A816 0240 007F                  		andi.w	#$7F,d0
0001A81A 5828 0026                  		addq.b	#4,obAngle(a0)
0001A81E 4A31 0004                  		tst.b	4(a1,d0.w)
0001A822 6A00                       		bpl.s	Cat_AniBody
0001A824 5828 0026                  		addq.b	#4,obAngle(a0)
0001A828                            
0001A828                            Cat_AniBody:
0001A828 1031 0000                  		move.b	(a1,d0.w),d0
0001A82C 5000                       		addq.b	#8,d0
0001A82E 1140 001A                  		move.b	d0,obFrame(a0)
0001A832                            
0001A832                            Cat_BodySeg1:	; Routine 4, 8
0001A832 2268 003C                  		movea.l	cat_parent(a0),a1
0001A836 4A28 0022                  		tst.b	obStatus(a0)
0001A83A 6B00 0000                  		bmi.w	loc_16C90
0001A83E 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001A844 1169 0025 0025             		move.b	ob2ndRout(a1),ob2ndRout(a0)
0001A84A 6700 0000                  		beq.w	loc_16C64
0001A84E 3169 001C 001C             		move.w	obAnim(a1),obAnim(a0)
0001A854 3029 0010                  		move.w	obVelX(a1),d0
0001A858 D068 001C                  			add.w	obAnim(a0),d0
0001A85C 3140 0010                  		move.w	d0,obVelX(a0)
0001A860 2428 0008                  		move.l	obX(a0),d2
0001A864 2602                       		move.l	d2,d3
0001A866 3028 0010                  		move.w	obVelX(a0),d0
0001A86A 0828 0000 0022             		btst	#0,obStatus(a0)
0001A870 6700                       		beq.s	loc_16C0C
0001A872 4440                       		neg.w	d0
0001A874                            
0001A874                            loc_16C0C:
0001A874 48C0                       		ext.l	d0
0001A876 E180                       		asl.l	#8,d0
0001A878 D480                       		add.l	d0,d2
0001A87A 2142 0008                  		move.l	d2,obX(a0)
0001A87E 4843                       		swap	d3
0001A880 B668 0008                  		cmp.w	obX(a0),d3
0001A884 6700                       		beq.s	loc_16C64
0001A886 7000                       		moveq	#0,d0
0001A888 1028 003C                  		move.b	cat_parent(a0),d0
0001A88C 1231 002C                  		move.b	$2C(a1,d0.w),d1
0001A890 0C01 0080                  		cmpi.b	#$80,d1
0001A894 6600                       		bne.s	loc_16C50
0001A896 1181 002C                  			move.b	d1,$2C(a0,d0)
0001A89A 4468 000A                  			neg.w	obX+2(a0)
0001A89E 6700                       			beq.s	locj_173E4
0001A8A0 0828 0000 0022             			btst	#0,obStatus(a0)
0001A8A6 6700                       			beq.s	locj_173E4
0001A8A8 0C68 FF40 0010             			cmpi.w	#-$C0,obVelX(a0)
0001A8AE 6600                       			bne.s	locj_173E4
0001A8B0 5368 0008                  			subq.w	#1,obX(a0)
0001A8B4 5228 003C                  			addq.b	#1,cat_parent(a0)
0001A8B8 7000                       			moveq	#0,d0
0001A8BA 1028 003C                  			move.b	cat_parent(a0),d0
0001A8BE 4230 002C                  			clr.b	$2C(a0,d0)
0001A8C2                            	locj_173E4:
0001A8C2 0868 0000 0022             		bchg	#0,obStatus(a0)
0001A8C8 1168 0022 0001             		move.b	obStatus(a0),1(a0)
0001A8CE 5228 003C                  		addq.b	#1,cat_parent(a0)
0001A8D2 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
0001A8D8 6000                       		bra.s	loc_16C64
0001A8DA                            ; ===========================================================================
0001A8DA                            
0001A8DA                            loc_16C50:
0001A8DA 4881                       		ext.w	d1
0001A8DC D368 000C                  		add.w	d1,obY(a0)
0001A8E0 5228 003C                  		addq.b	#1,cat_parent(a0)
0001A8E4 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
0001A8EA 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001A8EE                            
0001A8EE                            loc_16C64:
0001A8EE 0C29 000C 0024             		cmpi.b	#$C,obRoutine(a1)
0001A8F4 6700                       		beq.s	loc_16C90
0001A8F6 0C11 0027                  		cmpi.b	#id_ExplosionItem,0(a1)
0001A8FA 6700                       		beq.s	loc_16C7C
0001A8FC 0C29 000A 0024             		cmpi.b	#$A,obRoutine(a1)
0001A902 6600                       		bne.s	loc_16C82
0001A904                            
0001A904                            loc_16C7C:
0001A904 4229 0020                  		clr.b    $20(a1)
0001A908 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0001A90E                            
0001A90E                            loc_16C82:
0001A90E 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001A914                            
0001A914                            ; ===========================================================================
0001A914 FE00 FE80 0180 0200        Cat_FragSpeed:	dc.w -$200, -$180, $180, $200
0001A91C                            ; ===========================================================================
0001A91C                            
0001A91C                            loc_16C90:
0001A91C 08E9 0007 0022             		bset	#7,obStatus(a1)
0001A922                            
0001A922                            loc_16C96:
0001A922 7000                       		moveq	#0,d0
0001A924 1028 0024                  		move.b	obRoutine(a0),d0
0001A928 303B 00E8                  		move.w	Cat_FragSpeed-2(pc,d0.w),d0
0001A92C 0828 0000 0022             		btst	#0,obStatus(a0)
0001A932 6700                       		beq.s	loc_16CAA
0001A934 4440                       		neg.w	d0
0001A936                            
0001A936                            loc_16CAA:
0001A936 3140 0010                  		move.w	d0,obVelX(a0)
0001A93A 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0001A940 117C 000C 0024             		move.b	#$C,obRoutine(a0)
0001A946 0228 00F8 001A             		andi.b	#$F8,obFrame(a0)
0001A94C                            
0001A94C                            loc_16CC0:	; Routine $C
0001A94C 4EB9 0000 F7E2             		jsr	(ObjectFall).l
0001A952 4A68 0012                  		tst.w	obVelY(a0)
0001A956 6B00                       		bmi.s	loc_16CE0
0001A958 4EB9 0001 8A16             		jsr	(ObjFloorDist).l
0001A95E 4A41                       		tst.w	d1
0001A960 6A00                       		bpl.s	loc_16CE0
0001A962 D368 000C                  		add.w	d1,obY(a0)
0001A966 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0001A96C                            
0001A96C                            loc_16CE0:
0001A96C 4A28 0001                  		tst.b	obRender(a0)
0001A970 6A00 FD80                  		bpl.w	Cat_ChkGone
0001A974 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001A974 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001A97A                            		include	"_anim\Caterkiller.asm"
0001A97A                            ; ---------------------------------------------------------------------------
0001A97A                            ; Animation script - Caterkiller enemy (uses non-standard format)
0001A97A                            ; ---------------------------------------------------------------------------
0001A97A 0000 0000 0000 0000 0000+  Ani_Cat:	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
0001A98A 0101 0101 0101 0202 0202+  		dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
0001A99A 0404 0404 0404 0505 0505+  		dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
0001A9AA 0606 0707 0707 0707 0707+  		dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
0001A9BA 0707 0707 0707 0707 0707+  		dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
0001A9CA 0606 0606 0606 0505 0505+  		dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
0001A9DA 0403 0303 0303 0202 0202+  		dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
0001A9EA 0101 0000 0000 0000 0000+  		dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
0001A9FA                            		even
0001A9FA                            		even
0001A9FA                            Map_Cat:	include	"_maps\Caterkiller.asm"
0001A9FA                            ; ---------------------------------------------------------------------------
0001A9FA                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001A9FA                            ; ---------------------------------------------------------------------------
0001A9FA                            Map_Cat_internal:
0001A9FA 0000                       		dc.w byte_16D9E-Map_Cat_internal
0001A9FC 0000                       		dc.w byte_16DA4-Map_Cat_internal
0001A9FE 0000                       		dc.w byte_16DAA-Map_Cat_internal
0001AA00 0000                       		dc.w byte_16DB0-Map_Cat_internal
0001AA02 0000                       		dc.w byte_16DB6-Map_Cat_internal
0001AA04 0000                       		dc.w byte_16DBC-Map_Cat_internal
0001AA06 0000                       		dc.w byte_16DC2-Map_Cat_internal
0001AA08 0000                       		dc.w byte_16DC8-Map_Cat_internal
0001AA0A 0000                       		dc.w byte_16DCE-Map_Cat_internal
0001AA0C 0000                       		dc.w byte_16DD4-Map_Cat_internal
0001AA0E 0000                       		dc.w byte_16DDA-Map_Cat_internal
0001AA10 0000                       		dc.w byte_16DE0-Map_Cat_internal
0001AA12 0000                       		dc.w byte_16DE6-Map_Cat_internal
0001AA14 0000                       		dc.w byte_16DEC-Map_Cat_internal
0001AA16 0000                       		dc.w byte_16DF2-Map_Cat_internal
0001AA18 0000                       		dc.w byte_16DF8-Map_Cat_internal
0001AA1A 0000                       		dc.w byte_16DFE-Map_Cat_internal
0001AA1C 0000                       		dc.w byte_16E04-Map_Cat_internal
0001AA1E 0000                       		dc.w byte_16E0A-Map_Cat_internal
0001AA20 0000                       		dc.w byte_16E10-Map_Cat_internal
0001AA22 0000                       		dc.w byte_16E16-Map_Cat_internal
0001AA24 0000                       		dc.w byte_16E1C-Map_Cat_internal
0001AA26 0000                       		dc.w byte_16E22-Map_Cat_internal
0001AA28 0000                       		dc.w byte_16E28-Map_Cat_internal
0001AA2A 01                         byte_16D9E:	dc.b 1
0001AA2B F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
0001AA30 01                         byte_16DA4:	dc.b 1
0001AA31 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
0001AA36 01                         byte_16DAA:	dc.b 1
0001AA37 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
0001AA3C 01                         byte_16DB0:	dc.b 1
0001AA3D EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
0001AA42 01                         byte_16DB6:	dc.b 1
0001AA43 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
0001AA48 01                         byte_16DBC:	dc.b 1
0001AA49 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
0001AA4E 01                         byte_16DC2:	dc.b 1
0001AA4F EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
0001AA54 01                         byte_16DC8:	dc.b 1
0001AA55 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
0001AA5A 01                         byte_16DCE:	dc.b 1
0001AA5B F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001AA60 01                         byte_16DD4:	dc.b 1
0001AA61 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
0001AA66 01                         byte_16DDA:	dc.b 1
0001AA67 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
0001AA6C 01                         byte_16DE0:	dc.b 1
0001AA6D F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
0001AA72 01                         byte_16DE6:	dc.b 1
0001AA73 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
0001AA78 01                         byte_16DEC:	dc.b 1
0001AA79 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
0001AA7E 01                         byte_16DF2:	dc.b 1
0001AA7F F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
0001AA84 01                         byte_16DF8:	dc.b 1
0001AA85 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
0001AA8A 01                         byte_16DFE:	dc.b 1
0001AA8B F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
0001AA90 01                         byte_16E04:	dc.b 1
0001AA91 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
0001AA96 01                         byte_16E0A:	dc.b 1
0001AA97 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
0001AA9C 01                         byte_16E10:	dc.b 1
0001AA9D EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
0001AAA2 01                         byte_16E16:	dc.b 1
0001AAA3 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
0001AAA8 01                         byte_16E1C:	dc.b 1
0001AAA9 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
0001AAAE 01                         byte_16E22:	dc.b 1
0001AAAF EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
0001AAB4 01                         byte_16E28:	dc.b 1
0001AAB5 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
0001AABA                            		even
0001AABA                            		even
0001AABA                            
0001AABA                            		include	"_incObj\79 Lamppost.asm"
0001AABA                            ; ---------------------------------------------------------------------------
0001AABA                            ; Object 79 - lamppost
0001AABA                            ; ---------------------------------------------------------------------------
0001AABA                            
0001AABA                            Lamppost:
0001AABA 7000                       		moveq	#0,d0
0001AABC 1028 0024                  		move.b	obRoutine(a0),d0
0001AAC0 323B 0000                  		move.w	Lamp_Index(pc,d0.w),d1
0001AAC4 4EBB 1000                  		jsr	Lamp_Index(pc,d1.w)
0001AAC8 4EF9 0001 18E2             		jmp	(RememberState).l
0001AACE                            ; ===========================================================================
0001AACE 0000                       Lamp_Index:	dc.w Lamp_Main-Lamp_Index
0001AAD0 0000                       		dc.w Lamp_Blue-Lamp_Index
0001AAD2 0000                       		dc.w Lamp_Finish-Lamp_Index
0001AAD4 0000                       		dc.w Lamp_Twirl-Lamp_Index
0001AAD6                            
0001AAD6 =00000030                  lamp_origX:	equ $30		; original x-axis position
0001AAD6 =00000032                  lamp_origY:	equ $32		; original y-axis position
0001AAD6 =00000036                  lamp_time:	equ $36		; length of time to twirl the lamp
0001AAD6                            ; ===========================================================================
0001AAD6                            
0001AAD6                            Lamp_Main:	; Routine 0
0001AAD6 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AADA 217C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a0)
0001AAE2 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
0001AAE8 117C 0004 0001             		move.b	#4,obRender(a0)
0001AAEE 117C 0008 0014             		move.b	#8,obActWid(a0)
0001AAF4 317C 0280 0018             		move.w	#$280,obPriority(a0)
0001AAFA 45F8 FC00                  		lea	(v_objstate).w,a2
0001AAFE 7000                       		moveq	#0,d0
0001AB00 1028 0023                  		move.b	obRespawnNo(a0),d0
0001AB04 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001AB0A 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001AB10 6600                       		bne.s	@red
0001AB12 1238 FE30                  		move.b	(v_lastlamp).w,d1
0001AB16 0201 007F                  		andi.b	#$7F,d1
0001AB1A 1428 0028                  		move.b	obSubtype(a0),d2 ; get lamppost number
0001AB1E 0202 007F                  		andi.b	#$7F,d2
0001AB22 B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
0001AB24 6500                       		bcs.s	Lamp_Blue	; if yes, branch
0001AB26                            
0001AB26                            @red:
0001AB26 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001AB2C 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
0001AB32 117C 0003 001A             		move.b	#3,obFrame(a0)
0001AB38 4E75                       		rts	
0001AB3A                            
0001AB3A                            ; ===========================================================================
0001AB3A                            
0001AB3A                            Lamp_Blue:	; Routine 2
0001AB3A 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0001AB3E 6600 0000                  		bne.w	@donothing	; if yes, branch
0001AB42 4A38 F7C8                  		tst.b	(f_lockmulti).w
0001AB46 6B00 0000                  		bmi.w	@donothing
0001AB4A 1238 FE30                  		move.b	(v_lastlamp).w,d1
0001AB4E 0201 007F                  		andi.b	#$7F,d1
0001AB52 1428 0028                  		move.b	obSubtype(a0),d2
0001AB56 0202 007F                  		andi.b	#$7F,d2
0001AB5A B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
0001AB5C 6500                       		bcs.s	@chkhit		; if yes, branch
0001AB5E 45F8 FC00                  		lea	(v_objstate).w,a2
0001AB62 7000                       		moveq	#0,d0
0001AB64 1028 0023                  		move.b	obRespawnNo(a0),d0
0001AB68 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001AB6E 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001AB74 117C 0003 001A             		move.b	#3,obFrame(a0)
0001AB7A 6000 0000                  		bra.w	@donothing
0001AB7E                            ; ===========================================================================
0001AB7E                            
0001AB7E                            @chkhit:
0001AB7E 3038 D008                  		move.w	(v_player+obX).w,d0
0001AB82 9068 0008                  		sub.w	obX(a0),d0
0001AB86 5040                       		addq.w	#8,d0
0001AB88 0C40 0010                  		cmpi.w	#$10,d0
0001AB8C 6400 0000                  		bcc.w	@donothing
0001AB90 3038 D00C                  		move.w	(v_player+obY).w,d0
0001AB94 9068 000C                  		sub.w	obY(a0),d0
0001AB98 0640 0040                  		addi.w	#$40,d0
0001AB9C 0C40 0068                  		cmpi.w	#$68,d0
0001ABA0 6400                       		bcc.s	@donothing
0001ABA2                            
0001ABAC 5428 0024                  		addq.b	#2,obRoutine(a0)
0001ABB0 4EB9 0000 FDC8             		jsr	(FindFreeObj).l
0001ABB6 6600                       		bne.s	@fail
0001ABB8 12BC 0079                  		move.b	#id_Lamppost,0(a1)	; load twirling	lamp object
0001ABBC 137C 0006 0024             		move.b	#6,obRoutine(a1) ; goto Lamp_Twirl next
0001ABC2 3368 0008 0030             		move.w	obX(a0),lamp_origX(a1)
0001ABC8 3368 000C 0032             		move.w	obY(a0),lamp_origY(a1)
0001ABCE 0469 0018 0032             		subi.w	#$18,lamp_origY(a1)
0001ABD4 237C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a1)
0001ABDC 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
0001ABE2 137C 0004 0001             		move.b	#4,obRender(a1)
0001ABE8 137C 0008 0014             		move.b	#8,obActWid(a1)
0001ABEE 337C 0200 0018             		move.w	#$200,obPriority(a1)
0001ABF4 137C 0002 001A             		move.b	#2,obFrame(a1)	; use "ball only" frame
0001ABFA 337C 0020 0036             		move.w	#$20,lamp_time(a1)
0001AC00                            
0001AC00                            	@fail:
0001AC00 117C 0001 001A             		move.b	#1,obFrame(a0)	; use "post only" frame
0001AC06 6100 0000                  		bsr.w	Lamp_StoreInfo
0001AC0A 45F8 FC00                  		lea	(v_objstate).w,a2
0001AC0E 7000                       		moveq	#0,d0
0001AC10 1028 0023                  		move.b	obRespawnNo(a0),d0
0001AC14 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001AC1A                            
0001AC1A                            	@donothing:
0001AC1A 4E75                       		rts	
0001AC1C                            ; ===========================================================================
0001AC1C                            
0001AC1C                            Lamp_Finish:	; Routine 4	
0001AC1C 4E75                       		rts	
0001AC1E                            ; ===========================================================================
0001AC1E                            
0001AC1E                            Lamp_Twirl:	; Routine 6
0001AC1E 5368 0036                  		subq.w	#1,lamp_time(a0) ; decrement timer
0001AC22 6A00                       		bpl.s	@continue	; if time remains, keep twirling
0001AC24 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
0001AC2A                            
0001AC2A                            	@continue:
0001AC2A 1028 0026                  		move.b	obAngle(a0),d0
0001AC2E 0428 0010 0026             		subi.b	#$10,obAngle(a0)
0001AC34 0400 0040                  		subi.b	#$40,d0
0001AC38 4EB9 0000 3D28             		jsr	(CalcSine).l
0001AC3E C3FC 0C00                  		muls.w	#$C00,d1
0001AC42 4841                       		swap	d1
0001AC44 D268 0030                  		add.w	lamp_origX(a0),d1
0001AC48 3141 0008                  		move.w	d1,obX(a0)
0001AC4C C1FC 0C00                  		muls.w	#$C00,d0
0001AC50 4840                       		swap	d0
0001AC52 D068 0032                  		add.w	lamp_origY(a0),d0
0001AC56 3140 000C                  		move.w	d0,obY(a0)
0001AC5A 4E75                       		rts	
0001AC5C                            ; ===========================================================================
0001AC5C                            ; ---------------------------------------------------------------------------
0001AC5C                            ; Subroutine to	store information when you hit a lamppost
0001AC5C                            ; ---------------------------------------------------------------------------
0001AC5C                            
0001AC5C                            Lamp_StoreInfo:
0001AC5C 11E8 0028 FE30             		move.b	obSubtype(a0),(v_lastlamp).w 	; lamppost number
0001AC62 11F8 FE30 FE31             		move.b	(v_lastlamp).w,($FFFFFE31).w
0001AC68 31E8 0008 FE32             		move.w	obX(a0),($FFFFFE32).w		; x-position
0001AC6E 31E8 000C FE34             		move.w	obY(a0),($FFFFFE34).w		; y-position
0001AC74 31F8 FE20 FE36             		move.w	(v_rings).w,($FFFFFE36).w 	; rings
0001AC7A 11F8 FE1B FE54             		move.b	(v_lifecount).w,($FFFFFE54).w 	; lives
0001AC80 21F8 FE22 FE38             		move.l	(v_time).w,($FFFFFE38).w 	; time
0001AC86 11F8 F742 FE3C             		move.b	(v_dle_routine).w,($FFFFFE3C).w ; routine counter for dynamic level mod
0001AC8C 31F8 F72E FE3E             		move.w	(v_limitbtm2).w,($FFFFFE3E).w 	; lower y-boundary of level
0001AC92 31F8 F700 FE40             		move.w	(v_screenposx).w,($FFFFFE40).w 	; screen x-position
0001AC98 31F8 F704 FE42             		move.w	(v_screenposy).w,($FFFFFE42).w 	; screen y-position
0001AC9E 31F8 F708 FE44             		move.w	(v_bgscreenposx).w,($FFFFFE44).w ; bg position
0001ACA4 31F8 F70C FE46             		move.w	(v_bgscreenposy).w,($FFFFFE46).w 	; bg position
0001ACAA 31F8 F710 FE48             		move.w	(v_bg2screenposx).w,($FFFFFE48).w 	; bg position
0001ACB0 31F8 F714 FE4A             		move.w	(v_bg2screenposy).w,($FFFFFE4A).w 	; bg position
0001ACB6 31F8 F718 FE4C             		move.w	(v_bg3screenposx).w,($FFFFFE4C).w 	; bg position
0001ACBC 31F8 F71C FE4E             		move.w	(v_bg3screenposy).w,($FFFFFE4E).w 	; bg position
0001ACC2 31F8 F648 FE50             		move.w	(v_waterpos2).w,($FFFFFE50).w 	; water height
0001ACC8 11F8 F64D FE52             		move.b	(v_wtr_routine).w,($FFFFFE52).w ; rountine counter for water
0001ACCE 11F8 F64E FE53             		move.b	(f_wtr_state).w,($FFFFFE53).w 	; water direction
0001ACD4 11F8 F5C3 FE54             		move.b	(f_emeraldm).w,($FFFFFE54).w 	; emerald monitor
0001ACDA 11F8 F5C4 FF96             		move.b	(v_tagwater).w,(v_tagwaterlamp).w ; water switcher state TIS
0001ACE0 11F8 FF92 FF94             		move.b	(v_watersplashpos).w,(v_watersplashposlamp).w ; water splash y-pos TIS
0001ACE6 4E75                       		rts	
0001ACE8                            
0001ACE8                            ; ---------------------------------------------------------------------------
0001ACE8                            ; Subroutine to	load stored info when you start	a level	from a lamppost
0001ACE8                            ; ---------------------------------------------------------------------------
0001ACE8                            
0001ACE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ACE8                            
0001ACE8                            
0001ACE8                            Lamp_LoadInfo:
0001ACE8 11F8 FE31 FE30             		move.b	($FFFFFE31).w,(v_lastlamp).w
0001ACEE 31F8 FE32 D008             		move.w	($FFFFFE32).w,(v_player+obX).w
0001ACF4 31F8 FE34 D00C             		move.w	($FFFFFE34).w,(v_player+obY).w
0001ACFA 31F8 FE36 FE20             		move.w	($FFFFFE36).w,(v_rings).w
0001AD00 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,(v_lifecount).w
0001AD06 4278 FE20                  		clr.w	(v_rings).w
0001AD0A 4238 FE1B                  		clr.b	(v_lifecount).w
0001AD0E 21F8 FE38 FE22             		move.l	($FFFFFE38).w,(v_time).w
0001AD14 11FC 003B FE25             		move.b	#59,(v_timecent).w
0001AD1A 5338 FE24                  		subq.b	#1,(v_timesec).w
0001AD1E 11F8 FE3C F742             		move.b	($FFFFFE3C).w,(v_dle_routine).w
0001AD24 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
0001AD2A 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,(v_limitbtm2).w
0001AD30 31F8 FE3E F726             		move.w	($FFFFFE3E).w,(v_limitbtm1).w
0001AD36 31F8 FE40 F700             		move.w	($FFFFFE40).w,(v_screenposx).w
0001AD3C 31F8 FE42 F704             		move.w	($FFFFFE42).w,(v_screenposy).w
0001AD42 31F8 FE44 F708             		move.w	($FFFFFE44).w,(v_bgscreenposx).w
0001AD48 31F8 FE46 F70C             		move.w	($FFFFFE46).w,(v_bgscreenposy).w
0001AD4E 31F8 FE48 F710             		move.w	($FFFFFE48).w,(v_bg2screenposx).w
0001AD54 31F8 FE4A F714             		move.w	($FFFFFE4A).w,(v_bg2screenposy).w
0001AD5A 31F8 FE4C F718             		move.w	($FFFFFE4C).w,(v_bg3screenposx).w
0001AD60 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,(v_bg3screenposy).w
0001AD66 11F8 FF96 F5C4             		move.b	(v_tagwaterlamp).w,(v_tagwater).w ; water switcher state TIS
0001AD6C 11F8 FF94 FF92             		move.b	(v_watersplashposlamp).w,(v_watersplashpos).w ; water splash y-pos TIS
0001AD72 11F8 FE54 F5C3             		move.b	($FFFFFE54).w,(f_emeraldm).w	;emerald monitor count
0001AD78 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w	; is this Labyrinth Zone?
0001AD7E 6600                       		bne.s	@notlabyrinth	; if not, branch
0001AD80                            
0001AD80 31F8 FE50 F648             		move.w	($FFFFFE50).w,(v_waterpos2).w
0001AD86 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
0001AD8C 11F8 FE53 F64E             		move.b	($FFFFFE53).w,(f_wtr_state).w
0001AD92                            
0001AD92                            	@notlabyrinth:
0001AD92 4A38 FE30                  		tst.b	(v_lastlamp).w
0001AD96 6A00                       		bpl.s	locret_170F6
0001AD98 3038 FE32                  		move.w	($FFFFFE32).w,d0
0001AD9C 0440 00A0                  		subi.w	#$A0,d0
0001ADA0 31C0 F728                  		move.w	d0,(v_limitleft2).w
0001ADA4                            
0001ADA4                            locret_170F6:
0001ADA4 4E75                       		rts	
0001ADA4 4E75                       		rts	
0001ADA6                            Map_Lamp:	include	"_maps\Lamppost.asm"
0001ADA6                            ; --------------------------------------------------------------------------------
0001ADA6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001ADA6                            ; --------------------------------------------------------------------------------
0001ADA6                            
0001ADA6                            SME_JfaKr:	
0001ADA6 0000 0000                  		dc.w SME_JfaKr_A-SME_JfaKr, SME_JfaKr_3D-SME_JfaKr	
0001ADAA 0000 0000                  		dc.w SME_JfaKr_66-SME_JfaKr, SME_JfaKr_71-SME_JfaKr	
0001ADAE 0000                       		dc.w SME_JfaKr_A4-SME_JfaKr	
0001ADB0 0A                         SME_JfaKr_A:	dc.b $A	
0001ADB1 E401 0000 F8               		dc.b $E4, 1, 0, 0, $F8	
0001ADB6 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001ADBB D401 0006 F8               		dc.b $D4, 1, 0, 6, $F8	
0001ADC0 D401 0806 00               		dc.b $D4, 1, 8, 6, 0	
0001ADC5 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001ADCA F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001ADCF 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001ADD4 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001ADD9 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001ADDE 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001ADE3 08                         SME_JfaKr_3D:	dc.b 8	
0001ADE4 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001ADE9 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001ADEE F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001ADF3 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001ADF8 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001ADFD 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001AE02 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001AE07 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001AE0C 02                         SME_JfaKr_66:	dc.b 2	
0001AE0D F801 0008 F8               		dc.b $F8, 1, 0, 8, $F8	
0001AE12 F801 0808 00               		dc.b $F8, 1, 8, 8, 0	
0001AE17 0A                         SME_JfaKr_71:	dc.b $A	
0001AE18 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001AE1D E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001AE22 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001AE27 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001AE2C 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001AE31 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001AE36 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001AE3B 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001AE40 D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001AE45 D401 0808 00               		dc.b $D4, 1, 8, 8, 0	
0001AE4A 0A                         SME_JfaKr_A4:	dc.b $A	
0001AE4B E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001AE50 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001AE55 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001AE5A F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001AE5F 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001AE64 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001AE69 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001AE6E 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001AE73 D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001AE78 D401 2808 00               		dc.b $D4, 1, $28, 8, 0	
0001AE7E 00                         		even
0001AE7E 00                         		even
0001AE7E                            		include	"_incObj\7D Hidden Bonuses.asm"
0001AE7E                            ; ---------------------------------------------------------------------------
0001AE7E                            ; Object 7D - hidden points at the end of a level
0001AE7E                            ; ---------------------------------------------------------------------------
0001AE7E                            
0001AE7E                            HiddenBonus:
0001AE7E 7000                       		moveq	#0,d0
0001AE80 1028 0024                  		move.b	obRoutine(a0),d0
0001AE84 323B 0000                  		move.w	Bonus_Index(pc,d0.w),d1
0001AE88 4EFB 1000                  		jmp	Bonus_Index(pc,d1.w)
0001AE8C                            ; ===========================================================================
0001AE8C 0000                       Bonus_Index:	dc.w Bonus_Main-Bonus_Index
0001AE8E 0000                       		dc.w Bonus_Display-Bonus_Index
0001AE90                            
0001AE90 =00000030                  bonus_timelen:	equ $30		; length of time to display bonus sprites
0001AE90                            ; ===========================================================================
0001AE90                            
0001AE90                            Bonus_Main:	; Routine 0
0001AE90 7410                       		moveq	#$10,d2
0001AE92 3602                       		move.w	d2,d3
0001AE94 D643                       		add.w	d3,d3
0001AE96 43F8 D000                  		lea	(v_player).w,a1
0001AE9A 3029 0008                  		move.w	obX(a1),d0
0001AE9E 9068 0008                  		sub.w	obX(a0),d0
0001AEA2 D042                       		add.w	d2,d0
0001AEA4 B043                       		cmp.w	d3,d0
0001AEA6 6400                       		bcc.s	bonu_chkdel
0001AEA8 3229 000C                  		move.w	obY(a1),d1
0001AEAC 9268 000C                  		sub.w	obY(a0),d1
0001AEB0 D242                       		add.w	d2,d1
0001AEB2 B243                       		cmp.w	d3,d1
0001AEB4 6400                       		bcc.s	bonu_chkdel
0001AEB6 4A78 FE08                  		tst.w	(v_debuguse).w
0001AEBA 6600                       		bne.s	bonu_chkdel
0001AEBC 4A38 F7CD                  		tst.b	(f_bigring).w
0001AEC0 6600                       		bne.s	bonu_chkdel
0001AEC2 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AEC6 217C 0000 0000 0004        		move.l	#Map_Bonus,obMap(a0)
0001AECE 317C 84B6 0002             		move.w	#$84B6,obGfx(a0)
0001AED4 0028 0004 0001             		ori.b	#4,obRender(a0)
0001AEDA 317C 0000 0018             		move.w	#0,obPriority(a0)
0001AEE0 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001AEE6 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0001AEEC 317C 0077 0030             		move.w	#119,bonus_timelen(a0) ; set display time to 2 seconds
0001AEFC 7000                       		moveq	#0,d0
0001AEFE 1028 0028                  		move.b	obSubtype(a0),d0
0001AF02 D040                       		add.w	d0,d0
0001AF04 303B 0000                  		move.w	obj7d_points(pc,d0.w),d0 ; load bonus points array
0001AF08 4EB9 0000 0000             		jsr	(AddPoints).l
0001AF0E                            
0001AF0E                            bonu_chkdel:
0001AF2A 4E75                       		rts	
0001AF2C                            
0001AF2C                            	@delete:
0001AF2C 4EF9 0000 F86E             		jmp	(DeleteObject).l
0001AF32                            
0001AF32                            ; ===========================================================================
0001AF32 0000                       obj7d_points:	dc.w 0			; Bonus	points array
0001AF34 03E8                       		dc.w 1000
0001AF36 0064                       		dc.w 100
0001AF38 000A                       		dc.w 10
0001AF3A                            ; ===========================================================================
0001AF3A                            
0001AF3A                            Bonus_Display:	; Routine 2
0001AF3A 5368 0030                  		subq.w	#1,bonus_timelen(a0) ; decrement display time
0001AF3E 6B00                       		bmi.s	Bonus_Display_Delete		; if time is zero, branch
0001AF5C 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001AF62                            
0001AF62                            Bonus_Display_Delete:	
0001AF62 4EF9 0000 F86E             		jmp	(DeleteObject).l
0001AF62 4EF9 0000 F86E             		jmp	(DeleteObject).l
0001AF68                            Map_Bonus:	include	"_maps\Hidden Bonuses.asm"
0001AF68                            ; ---------------------------------------------------------------------------
0001AF68                            ; Sprite mappings - hidden points at the end of	a level
0001AF68                            ; ---------------------------------------------------------------------------
0001AF68                            Map_Bonus_internal:
0001AF68 0000                       		dc.w @blank-Map_Bonus_internal
0001AF6A 0000                       		dc.w @10000-Map_Bonus_internal
0001AF6C 0000                       		dc.w @1000-Map_Bonus_internal
0001AF6E 0000                       		dc.w @100-Map_Bonus_internal
0001AF70 00                         @blank:		dc.b 0
0001AF71 01                         @10000:		dc.b 1
0001AF72 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0001AF77 01                         @1000:		dc.b 1
0001AF78 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0001AF7D 01                         @100:		dc.b 1
0001AF7E F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
0001AF84 00                         		even
0001AF84 00                         		even
0001AF84                            
0001AF84                            		include	"_incObj\8A Credits.asm"
0001AF84                            ; ---------------------------------------------------------------------------
0001AF84                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
0001AF84                            ; ---------------------------------------------------------------------------
0001AF84                            
0001AF84                            CreditsText:
0001AF84 7000                       		moveq	#0,d0
0001AF86 1028 0024                  		move.b	obRoutine(a0),d0
0001AF8A 323B 0000                  		move.w	Cred_Index(pc,d0.w),d1
0001AF8E 4EFB 1000                  		jmp	Cred_Index(pc,d1.w)
0001AF92                            ; ===========================================================================
0001AF92 0000                       Cred_Index:	dc.w Cred_Main-Cred_Index
0001AF94 0000                       		dc.w Cred_Display-Cred_Index
0001AF96                            ; ===========================================================================
0001AF96                            
0001AF96                            Cred_Main:	; Routine 0
0001AF96 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AF9A 317C 0120 0008             		move.w	#$120,obX(a0)
0001AFA0 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0001AFA6 217C 0000 0000 0004        		move.l	#Map_Cred,obMap(a0)
0001AFAE 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0001AFB4 3038 FFF4                  		move.w	(v_creditsnum).w,d0 ; load credits index number
0001AFB8 1140 001A                  		move.b	d0,obFrame(a0)	; display appropriate sprite
0001AFBC 117C 0000 0001             		move.b	#0,obRender(a0)
0001AFC2 317C 0000 0018             		move.w	#0,obPriority(a0)
0001AFC8                            
0001AFC8 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w ; is the mode #4 (title screen)?
0001AFCE 6600                       		bne.s	Cred_Display	; if not, branch
0001AFD0                            
0001AFD0 317C 00A6 0002             		move.w	#$A6,obGfx(a0)
0001AFD6 117C 000A 001A             		move.b	#$A,obFrame(a0)	; display "SONIC TEAM PRESENTS"
0001AFDC 4A38 FFE3                  		tst.b	(f_creditscheat).w ; is hidden credits cheat on?
0001AFE0 6700                       		beq.s	Cred_Display	; if not, branch
0001AFE2 0C38 0072 F604             		cmpi.b	#btnABC+btnDn,(v_jpadhold1).w ; is A+B+C+Down being pressed? ($72)
0001AFE8 6600                       		bne.s	Cred_Display	; if not, branch
0001AFEA 31FC 0EEE FBC0             		move.w	#cWhite,(v_pal_dry_dup+$40).w ; 3rd palette, 1st entry = white
0001AFF0 31FC 0880 FBC2             		move.w	#$880,(v_pal_dry_dup+$42).w ; 3rd palette, 2nd entry = cyan
0001AFF6 4EF9 0000 F86E             		jmp	(DeleteObject).l
0001AFFC                            ; ===========================================================================
0001AFFC                            
0001AFFC                            Cred_Display:	; Routine 2
0001AFFC 4EF9 0000 F82E             		jmp	DisplaySprite
0001AFFC 4EF9 0000 F82E             		jmp	DisplaySprite
0001B002                            Map_Cred:	include	"_maps\Credits.asm"
0001B002                            ; ---------------------------------------------------------------------------
0001B002                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001B002                            ; ---------------------------------------------------------------------------
0001B002                            Map_Cred_internal:
0001B002 0000                       		dc.w @staff-Map_Cred_internal
0001B004 0000                       		dc.w @gameplan-Map_Cred_internal
0001B006 0000                       		dc.w @program-Map_Cred_internal
0001B008 0000                       		dc.w @character-Map_Cred_internal
0001B00A 0000                       		dc.w @design-Map_Cred_internal
0001B00C 0000                       		dc.w @soundproduce-Map_Cred_internal
0001B00E 0000                       		dc.w @soundprogram-Map_Cred_internal
0001B010 0000                       		dc.w @thanks-Map_Cred_internal
0001B012 0000                       		dc.w @presentedby-Map_Cred_internal
0001B014 0000                       		dc.w @tryagain-Map_Cred_internal
0001B016 0000                       		dc.w @sonicteam-Map_Cred_internal
0001B018 0E                         @staff:		dc.b $E			 ; SONIC TEAM STAFF
0001B019 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
0001B01E F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
0001B023 F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
0001B028 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
0001B02D F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
0001B032 F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
0001B037 F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
0001B03C F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001B041 F809 0008 08               		dc.b $F8, 9, 0,	8, 8
0001B046 F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
0001B04B F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
0001B050 F805 0004 48               		dc.b $F8, 5, 0,	4, $48
0001B055 F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
0001B05A F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
0001B05F 0E                         @gameplan:	dc.b $E	;  GAME PLAN CAROL YAS | GAME PLAN SORRA    
0001B060 9005 0000 90               		dc.b $90, 5, 0, 0, $90		; G
0001B065 9005 0004 A0               		dc.b $90, 5, 0, 4, $A0		; A
0001B06A 9009 0008 B0               		dc.b $90, 9, 0, 8, $B0		; M
0001B06F 9005 000E C4               		dc.b $90, 5, 0, $0E, $C4	; E
0001B074 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001B079 9005 0012 E4               		dc.b $90, 5, 0, $12, $E4	; P
0001B07E 9005 0016 F4               		dc.b $90, 5, 0, $16, $F4	; L
0001B083 9005 0004 04               		dc.b $90, 5, 0, 4, $4		; A
0001B088 9005 001A 14               		dc.b $90, 5, 0, $1A, $14	; N
0001B08D                            
0001B08D B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001B092 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001B097 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001B09C B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001B0A1 B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001B0A6 1B                         @program:	dc.b $1B	;  CHARACTER DESIGN BIGISLAND | PROGRAM ANGELKOR INVISIBLE SUN  
0001B0A7 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001B0AC 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001B0B1 9005 0026 B0               		dc.b $90, 5, 0, $26, $B0	; O
0001B0B6 9005 0000 C0               		dc.b $90, 5, 0, 0, $C0		; G
0001B0BB 9005 0022 D0               		dc.b $90, 5, 0, $22, $D0	; R
0001B0C0 9005 0004 E0               		dc.b $90, 5, 0, 4, $E0		; A
0001B0C5 9009 0008 F0               		dc.b $90, 9, 0, 8, $F0		; M
0001B0CA                            
0001B0CA B805 0004 C0               		dc.b $B8, 5, 0, 4, $C0		; A
0001B0CF B805 001A D0               		dc.b $B8, 5, 0, $1A, $D0	; N
0001B0D4 B805 0000 E0               		dc.b $B8, 5, 0, 0, $E0		; G
0001B0D9 B805 000E F0               		dc.b $B8, 5, 0, $0E, $F0	; E
0001B0DE B805 0016 00               		dc.b $B8, 5, 0, $16, $0	; L
0001B0E3 B805 0058 10               		dc.b $B8, 5, 0, $58, $10	; K
0001B0E8 B805 0026 20               		dc.b $B8, 5, 0, $26, $20	; O
0001B0ED B805 0022 30               		dc.b $B8, 5, 0, $22, $30	; R
0001B0F2                            
0001B0F2 D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	; I
0001B0F7 D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	; N
0001B0FC                            
0001B0FC D801 0046 E8               		dc.b $D8, 1, 0, $46, $E8	; I
0001B101 D805 002E F0               		dc.b $D8, 5, 0, $2E, $F0	; S
0001B106 D801 0046 00               		dc.b $D8, 1, 0, $46, $0	; I
0001B10B D805 0048 08               		dc.b $D8, 5, 0, $48, $8	; B
0001B110 D805 0016 18               		dc.b $D8, 5, 0, $16, $18	; L
0001B115 D805 000E 28               		dc.b $D8, 5, 0, $0E, $28	; E
0001B11A                            
0001B11A F805 002E C0               		dc.b $F8, 5, 0, $2E, $C0	; S
0001B11F F805 0032 D0               		dc.b $F8, 5, 0, $32, $D0	; U
0001B124 F805 001A E0               		dc.b $F8, 5, 0, $1A, $E0	; N
0001B129 08                         @character:	dc.b $8	;  CHARACTER DESIGN BIGISLAND | ART SORRA    
0001B12A 9005 0004 90               		dc.b $90, 5, 0, 4, $90		; A
0001B12F 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001B134 9005 003E B0               		dc.b $90, 5, 0, $3E, $B0	; T
0001B139                            
0001B139 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001B13E B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001B143 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001B148 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001B14D B805 0004 00               		dc.b $B8, 5, 0, 4, $0
0001B152 0B                         @design:	dc.b $B	;  DESIGN JINYA PHENIX RIE | DESIGN SORRA    
0001B153 9005 0042 90               		dc.b $90, 5, 0, $42, $90	; D
0001B158 9005 000E A0               		dc.b $90, 5, 0, $0E, $A0	; E
0001B15D 9005 002E B0               		dc.b $90, 5, 0, $2E, $B0	; S
0001B162 9001 0046 C0               		dc.b $90, 1, 0, $46, $C0	; I
0001B167 9005 0000 C8               		dc.b $90, 5, 0, 0, $C8		; G
0001B16C 9005 001A D8               		dc.b $90, 5, 0, $1A, $D8	; N
0001B171                            
0001B171 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001B176 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001B17B B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001B180 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001B185 B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001B18A 1C                         @soundproduce:	dc.b $1C	;  SOUND PRODUCE MASATO NAKAMURA | SOUND PORT MR JOKER PRODUCTION   
0001B18B 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001B190 9005 0026 A0               		dc.b $90, 5, 0, $26, $A0	; O
0001B195 9005 0032 B0               		dc.b $90, 5, 0, $32, $B0	; U
0001B19A 9005 001A C0               		dc.b $90, 5, 0, $1A, $C0	; N
0001B19F 9005 0042 D0               		dc.b $90, 5, 0, $42, $D0	; D
0001B1A4 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001B1A9 9005 0012 F0               		dc.b $90, 5, 0, $12, $F0	; P
0001B1AE 9005 0026 00               		dc.b $90, 5, 0, $26, $0	; O
0001B1B3 9005 0022 10               		dc.b $90, 5, 0, $22, $10	; R
0001B1B8 9005 003E 20               		dc.b $90, 5, 0, $3E, $20	; T
0001B1BD                            
0001B1BD B809 0008 C0               		dc.b $B8, 9, 0, 8, $C0		; M
0001B1C2 B805 0022 D4               		dc.b $B8, 5, 0, $22, $D4	; R
0001B1C7 B800 0060 0C               		dc.b $B8, 0, 0, $60, $C    ;Space
0001B1CC B805 004C F4               		dc.b $B8, 5, 0, $4C, $F4	; J
0001B1D1 B805 0026 04               		dc.b $B8, 5, 0, $26, $4	; O
0001B1D6 B805 0058 14               		dc.b $B8, 5, 0, $58, $14	; K
0001B1DB B805 000E 24               		dc.b $B8, 5, 0, $0E, $24	; E
0001B1E0 B805 0022 34               		dc.b $B8, 5, 0, $22, $34	; R
0001B1E5                            
0001B1E5 D805 0012 C0               		dc.b $D8, 5, 0, $12, $C0	; P
0001B1EA D805 0022 D0               		dc.b $D8, 5, 0, $22, $D0	; R
0001B1EF D805 0026 E0               		dc.b $D8, 5, 0, $26, $E0	; O
0001B1F4 D805 0042 F0               		dc.b $D8, 5, 0, $42, $F0	; D
0001B1F9 D805 0032 00               		dc.b $D8, 5, 0, $32, $0	; U
0001B1FE D805 001E 10               		dc.b $D8, 5, 0, $1E, $10	; C
0001B203 D805 003E 20               		dc.b $D8, 5, 0, $3E, $20	; T
0001B208 D801 0046 30               		dc.b $D8, 1, 0, $46, $30	; I
0001B20D D805 0026 38               		dc.b $D8, 5, 0, $26, $38	; O
0001B212 D805 001A 48               		dc.b $D8, 5, 0, $1A, $48	; N
0001B217 17                         @soundprogram:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
0001B218 D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
0001B21D D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
0001B222 D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
0001B227 D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
0001B22C D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
0001B231 D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
0001B236 D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
0001B23B D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
0001B240 D005 0000 28               		dc.b $D0, 5, 0,	0, $28
0001B245 D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
0001B24A D005 0004 48               		dc.b $D0, 5, 0,	4, $48
0001B24F D009 0008 58               		dc.b $D0, 9, 0,	8, $58
0001B254 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
0001B259 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
0001B25E 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
0001B263 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
0001B268 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
0001B26D 0005 0004 14               		dc.b 0,	5, 0, 4, $14
0001B272 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
0001B277 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
0001B27C 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
0001B281 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
0001B286 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
0001B28B 11                         @thanks:	dc.b $11	;  SPECIAL THANKS FUJIO MINEGISHI PAPA | SPECIAL  THANKS YOU   
0001B28C 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001B291 9005 0012 A0               		dc.b $90, 5, 0, $12, $A0	; P
0001B296 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001B29B 9005 001E C0               		dc.b $90, 5, 0, $1E, $C0	; C
0001B2A0 9001 0046 D0               		dc.b $90, 1, 0, $46, $D0	; I
0001B2A5 9005 0004 D8               		dc.b $90, 5, 0, 4, $D8		; A
0001B2AA 9005 0016 E8               		dc.b $90, 5, 0, $16, $E8	; L
0001B2AF 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001B2B4                            
0001B2B4 B805 003E C0               		dc.b $B8, 5, 0, $3E, $C0	; T
0001B2B9 B805 003A D0               		dc.b $B8, 5, 0, $3A, $D0	; H
0001B2BE B805 0004 E0               		dc.b $B8, 5, 0, 4, $E0		; A
0001B2C3 B805 001A F0               		dc.b $B8, 5, 0, $1A, $F0	; N
0001B2C8 B805 0058 00               		dc.b $B8, 5, 0, $58, $0	; K
0001B2CD B805 002E 10               		dc.b $B8, 5, 0, $2E, $10	; S
0001B2D2                            
0001B2D2 D805 002A C0               		dc.b $D8, 5, 0, $2A, $C0	; Y
0001B2D7 D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001B2DC D805 0032 E0               		dc.b $D8, 5, 0, $32, $E0	; U
0001B2E1 10                         @presentedby:	dc.b $10	;  PRESENTED BY SEGA | PRESENTED BY SORRA   
0001B2E2 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001B2E7 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001B2EC 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001B2F1 9005 002E C0               		dc.b $90, 5, 0, $2E, $C0	; S
0001B2F6 9005 000E D0               		dc.b $90, 5, 0, $0E, $D0	; E
0001B2FB 9005 001A E0               		dc.b $90, 5, 0, $1A, $E0	; N
0001B300 9005 003E F0               		dc.b $90, 5, 0, $3E, $F0	; T
0001B305 9005 000E 00               		dc.b $90, 5, 0, $0E, $0	; E
0001B30A 9005 0042 10               		dc.b $90, 5, 0, $42, $10	; D
0001B30F                            
0001B30F B805 0048 C0               		dc.b $B8, 5, 0, $48, $C0	; B
0001B314 B805 002A D0               		dc.b $B8, 5, 0, $2A, $D0	; Y
0001B319                            
0001B319 D805 002E C0               		dc.b $D8, 5, 0, $2E, $C0	; S
0001B31E D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001B323 D805 0022 E0               		dc.b $D8, 5, 0, $22, $E0	; R
0001B328 D805 0022 F0               		dc.b $D8, 5, 0, $22, $F0	; R
0001B32D D805 0004 00               		dc.b $D8, 5, 0, 4, $0		; A
0001B332 08                         @tryagain:	dc.b 8			 ; TRY AGAIN
0001B333 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
0001B338 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
0001B33D 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
0001B342 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
0001B347 3005 0000 08               		dc.b $30, 5, 0,	0, 8
0001B34C 3005 0004 18               		dc.b $30, 5, 0,	4, $18
0001B351 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
0001B356 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
0001B35B 0E                         @sonicteam:	dc.b $E	;  SONIC TEAM PRESENTS | SORRA PRESENTS
0001B35C E805 002E D0               		dc.b $E8, 5, 0, $2E, $D0	; S
0001B361 E805 0026 E0               		dc.b $E8, 5, 0, $26, $E0	; O
0001B366 E805 0022 F0               		dc.b $E8, 5, 0, $22, $F0	; R
0001B36B E805 0022 00               		dc.b $E8, 5, 0, $22, $0	; R
0001B370 E805 0004 10               		dc.b $E8, 5, 0, 4, $10		; A
0001B375 E800 0060 0C               		dc.b $E8, 0, 0, $60, $C   	 ; Space
0001B37A                            
0001B37A 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0	; P
0001B37F 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0	; R
0001B384 0005 000E E0               		dc.b 0,	5, 0, $E, $E0	; E
0001B389 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0	; S
0001B38E 0005 000E 00               		dc.b 0,	5, 0, $E, 0	; E
0001B393 0005 001A 10               		dc.b 0,	5, 0, $1A, $10	; N
0001B398 0005 003E 20               		dc.b 0,	5, 0, $3E, $20	; T
0001B39D 0005 002E 30               		dc.b 0,	5, 0, $2E, $30	; S
0001B3A2                            		even
0001B3A2                            		even
0001B3A2                            
0001B3A2                            		include	"_incObj\3D Boss - Green Hill (part 1).asm"
0001B3A2                            ; ---------------------------------------------------------------------------
0001B3A2                            ; Object 3D - Eggman (GHZ)
0001B3A2                            ; ---------------------------------------------------------------------------
0001B3A2                            
0001B3A2                            BossGreenHill:
0001B3A2 7000                       		moveq	#0,d0
0001B3A4 1028 0024                  		move.b	obRoutine(a0),d0
0001B3A8 323B 0000                  		move.w	BGHZ_Index(pc,d0.w),d1
0001B3AC 4EFB 1000                  		jmp	BGHZ_Index(pc,d1.w)
0001B3B0                            ; ===========================================================================
0001B3B0 0000                       BGHZ_Index:	dc.w BGHZ_Main-BGHZ_Index
0001B3B2 0000                       		dc.w BGHZ_ShipMain-BGHZ_Index
0001B3B4 0000                       		dc.w BGHZ_FaceMain-BGHZ_Index
0001B3B6 0000                       		dc.w BGHZ_FlameMain-BGHZ_Index
0001B3B8                            
0001B3B8 0200                       BGHZ_ObjData:	dc.b 2,	0		; routine counter, animation
0001B3BA 0401                       		dc.b 4,	1
0001B3BC 0607                       		dc.b 6,	7
0001B3BE                            ; ===========================================================================
0001B3BE                            
0001B3BE                            BGHZ_Main:	; Routine 0
0001B3BE 45F9 0001 B3B8             		lea	(BGHZ_ObjData).l,a2
0001B3C4 2248                       		movea.l	a0,a1
0001B3C6 7202                       		moveq	#2,d1
0001B3C8 6000                       		bra.s	BGHZ_LoadBoss
0001B3CA                            ; ===========================================================================
0001B3CA                            
0001B3CA                            BGHZ_Loop:
0001B3CA 4EB9 0000 FDDE             		jsr	(FindNextFreeObj).l
0001B3D0 6600                       		bne.s	loc_17772
0001B3D2                            
0001B3D2                            BGHZ_LoadBoss:
0001B3D2 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B3D6 12BC 003D                  		move.b	#id_BossGreenHill,0(a1)
0001B3DA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B3E0 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B3E6 237C 0000 0000 0004        		move.l	#Map_Eggman,obMap(a1)
0001B3EE 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B3F4 137C 0004 0001             		move.b	#4,obRender(a1)
0001B3FA 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B400 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001B406 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B40A 2348 0034                  		move.l	a0,$34(a1)
0001B40E 51C9 FFBA                  		dbf	d1,BGHZ_Loop	; repeat sequence 2 more times
0001B412                            
0001B412                            loc_17772:
0001B412 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B418 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B41E 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B424 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001B42A                            
0001B42A                            
0001B42A                            BGHZ_ShipMain:	; Routine 2
0001B42A 7000                       		moveq	#0,d0
0001B42C 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B430 323B 0000                  		move.w	BGHZ_ShipIndex(pc,d0.w),d1
0001B434 4EBB 1000                  		jsr	BGHZ_ShipIndex(pc,d1.w)
0001B438 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001B43E 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
0001B444 1028 0022                  		move.b	obStatus(a0),d0
0001B448 0200 0003                  		andi.b	#3,d0
0001B44C 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B452 8128 0001                  		or.b	d0,obRender(a0)
0001B456 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001B45C                            ; ===========================================================================
0001B45C 0000                       BGHZ_ShipIndex:	dc.w BGHZ_ShipStart-BGHZ_ShipIndex
0001B45E 0000                       		dc.w BGHZ_MakeBall-BGHZ_ShipIndex
0001B460 0000                       		dc.w BGHZ_ShipMove-BGHZ_ShipIndex
0001B462 0000                       		dc.w loc_17954-BGHZ_ShipIndex
0001B464 0000                       		dc.w loc_1797A-BGHZ_ShipIndex
0001B466 0000                       		dc.w loc_179AC-BGHZ_ShipIndex
0001B468 0000                       		dc.w loc_179F6-BGHZ_ShipIndex
0001B46A                            ; ===========================================================================
0001B46A                            
0001B46A                            BGHZ_ShipStart:
0001B46A 317C 0100 0012             		move.w	#$100,obVelY(a0) ; move ship down
0001B470 6100 0000                  		bsr.w	BossMove
0001B474 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
0001B47A 6600                       		bne.s	loc_177E6
0001B47C 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop ship
0001B482 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto next routine
0001B486                            
0001B486                            loc_177E6:
0001B486 1028 003F                  		move.b	$3F(a0),d0
0001B48A 4EB9 0000 3D28             		jsr	(CalcSine).l
0001B490 EC40                       		asr.w	#6,d0
0001B492 D068 0038                  		add.w	$38(a0),d0
0001B496 3140 000C                  		move.w	d0,obY(a0)
0001B49A 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B4A0 5428 003F                  		addq.b	#2,$3F(a0)
0001B4A4 0C28 0008 0025             		cmpi.b	#8,ob2ndRout(a0)
0001B4AA 6400                       		bcc.s	locret_1784A
0001B4AC 4A28 0022                  		tst.b	obStatus(a0)
0001B4B0 6B00                       		bmi.s	loc_1784C
0001B4B2 4A28 0020                  		tst.b	obColType(a0)
0001B4B6 6600                       		bne.s	locret_1784A
0001B4B8 4A28 003E                  		tst.b	$3E(a0)
0001B4BC 6600                       		bne.s	BGHZ_ShipFlash
0001B4BE 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001B4CE                            
0001B4CE                            BGHZ_ShipFlash:
0001B4CE 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1 ; load 2nd pallet, 2nd entry
0001B4D2 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001B4D4 4A51                       		tst.w	(a1)
0001B4D6 6600                       		bne.s	loc_1783C
0001B4D8 303C 0EEE                  		move.w	#cWhite,d0	; move 0EEE (white) to d0
0001B4DC                            
0001B4DC                            loc_1783C:
0001B4DC 3280                       		move.w	d0,(a1)		; load color stored in	d0
0001B4DE 5328 003E                  		subq.b	#1,$3E(a0)
0001B4E2 6600                       		bne.s	locret_1784A
0001B4E4 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B4EA                            
0001B4EA                            locret_1784A:
0001B4EA 4E75                       		rts	
0001B4EC                            ; ===========================================================================
0001B4EC                            
0001B4EC                            loc_1784C:
0001B4EC 7064                       		moveq	#100,d0
0001B4EE 6100 0000                  		bsr.w	AddPoints
0001B4F2 117C 0008 0025             		move.b	#8,ob2ndRout(a0)
0001B4F8 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001B4FE 4E75                       		rts	
0001B4FE 4E75                       		rts	
0001B500                            
0001B500                            ; ---------------------------------------------------------------------------
0001B500                            ; Defeated boss	subroutine
0001B500                            ; ---------------------------------------------------------------------------
0001B500                            
0001B500                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B500                            
0001B500                            
0001B500                            BossDefeated:
0001B500 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001B504 0200 0007                  		andi.b	#7,d0
0001B508 6600                       		bne.s	locret_178A2
0001B50A 4EB9 0000 FDC8             		jsr	(FindFreeObj).l
0001B510 6600                       		bne.s	locret_178A2
0001B512 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1)	; load explosion object
0001B516 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B51C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B522 4EB9 0000 3D02             		jsr	(RandomNumber).l
0001B528 3200                       		move.w	d0,d1
0001B52A 7200                       		moveq	#0,d1
0001B52C 1200                       		move.b	d0,d1
0001B52E E409                       		lsr.b	#2,d1
0001B530 0441 0020                  		subi.w	#$20,d1
0001B534 D369 0008                  		add.w	d1,obX(a1)
0001B538 E048                       		lsr.w	#8,d0
0001B53A E608                       		lsr.b	#3,d0
0001B53C D169 000C                  		add.w	d0,obY(a1)
0001B540                            
0001B540                            locret_178A2:
0001B540 4E75                       		rts	
0001B542                            ; End of function BossDefeated
0001B542                            
0001B542                            ; ---------------------------------------------------------------------------
0001B542                            ; Subroutine to	move a boss
0001B542                            ; ---------------------------------------------------------------------------
0001B542                            
0001B542                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B542                            
0001B542                            
0001B542                            BossMove:
0001B542 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0001B548 E188                       		lsl.l	#8,d0
0001B54A D1A8 0030                  		add.l	d0,$30(a0)
0001B54E E18A                       		lsl.l	#8,d2
0001B550 D5A8 0038                  		add.l	d2,$38(a0)
0001B554 4E75                       		rts
0001B556                            ; End of function BossMove
0001B556                            
0001B556                            ; ===========================================================================
0001B556                            
0001B556                            		include	"_incObj\3D Boss - Green Hill (part 2).asm"
0001B556                            
0001B556                            BGHZ_MakeBall:
0001B556 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001B55C 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B562 6100 FFDE                  		bsr.w	BossMove
0001B566 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001B56C 6600                       		bne.s	loc_17916
0001B56E 317C 0000 0010             		move.w	#0,obVelX(a0)
0001B574 317C 0000 0012             		move.w	#0,obVelY(a0)
0001B57A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B57E 4EB9 0000 FDDE             		jsr	(FindNextFreeObj).l
0001B584 6600                       		bne.s	loc_17910
0001B586 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load swinging ball object
0001B58A 3368 0300 0008             		move.w	$300(a0),obX(a1)
0001B590 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001B596 2348 0034                  		move.l	a0,$34(a1)
0001B59A                            
0001B59A                            loc_17910:
0001B59A 317C 0077 003C             		move.w	#$77,$3C(a0)
0001B5A0                            
0001B5A0                            loc_17916:
0001B5A0 6000 FEE4                  		bra.w	loc_177E6
0001B5A4                            ; ===========================================================================
0001B5A4                            
0001B5A4                            BGHZ_ShipMove:
0001B5A4 5368 003C                  		subq.w	#1,$3C(a0)
0001B5A8 6A00                       		bpl.s	BGHZ_Reverse
0001B5AA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B5AE 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001B5B4 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move the ship sideways
0001B5BA 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001B5C0 6600                       		bne.s	BGHZ_Reverse
0001B5C2 317C 007F 003C             		move.w	#$7F,$3C(a0)
0001B5C8 317C 0040 0010             		move.w	#$40,obVelX(a0)
0001B5CE                            
0001B5CE                            BGHZ_Reverse:
0001B5CE 0828 0000 0022             		btst	#0,obStatus(a0)
0001B5D4 6600                       		bne.s	loc_17950
0001B5D6 4468 0010                  		neg.w	obVelX(a0)	; reverse direction of the ship
0001B5DA                            
0001B5DA                            loc_17950:
0001B5DA 6000 FEAA                  		bra.w	loc_177E6
0001B5DE                            ; ===========================================================================
0001B5DE                            
0001B5DE                            loc_17954:
0001B5DE 5368 003C                  		subq.w	#1,$3C(a0)
0001B5E2 6B00                       		bmi.s	loc_17960
0001B5E4 6100 FF5C                  		bsr.w	BossMove
0001B5E8 6000                       		bra.s	loc_17976
0001B5EA                            ; ===========================================================================
0001B5EA                            
0001B5EA                            loc_17960:
0001B5EA 0868 0000 0022             		bchg	#0,obStatus(a0)
0001B5F0 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001B5F6 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001B5FA 317C 0000 0010             		move.w	#0,obVelX(a0)
0001B600                            
0001B600                            loc_17976:
0001B600 6000 FE84                  		bra.w	loc_177E6
0001B604                            ; ===========================================================================
0001B604                            
0001B604                            loc_1797A:
0001B604 5368 003C                  		subq.w	#1,$3C(a0)
0001B608 6B00                       		bmi.s	loc_17984
0001B60A 6000 FEF4                  		bra.w	BossDefeated
0001B60E                            ; ===========================================================================
0001B60E                            
0001B60E                            loc_17984:
0001B60E 08E8 0000 0022             		bset	#0,obStatus(a0)
0001B614 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001B61A 4268 0010                  		clr.w	obVelX(a0)
0001B61E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B622 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001B628 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001B62C 6600                       		bne.s	locret_179AA
0001B62E 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001B634                            
0001B634                            locret_179AA:
0001B634 4E75                       		rts	
0001B636                            ; ===========================================================================
0001B636                            
0001B636                            loc_179AC:
0001B636 5268 003C                  		addq.w	#1,$3C(a0)
0001B63A 6700                       		beq.s	loc_179BC
0001B63C 6A00                       		bpl.s	loc_179C2
0001B63E 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B644 6000                       		bra.s	loc_179EE
0001B646                            ; ===========================================================================
0001B646                            
0001B646                            loc_179BC:
0001B646 4268 0012                  		clr.w	obVelY(a0)
0001B64A 6000                       		bra.s	loc_179EE
0001B64C                            ; ===========================================================================
0001B64C                            
0001B64C                            loc_179C2:
0001B64C 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001B652 6500                       		bcs.s	loc_179DA
0001B654 6700                       		beq.s	loc_179E0
0001B656 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001B65C 6500                       		bcs.s	loc_179EE
0001B65E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B662 6000                       		bra.s	loc_179EE
0001B664                            ; ===========================================================================
0001B664                            
0001B664                            loc_179DA:
0001B664 5168 0012                  		subq.w	#8,obVelY(a0)
0001B668 6000                       		bra.s	loc_179EE
0001B66A                            ; ===========================================================================
0001B66A                            
0001B66A                            loc_179E0:
0001B66A 4268 0012                          clr.w    obVelY(a0)
0001B66E 4A38 FE2D                          tst.b     (v_invinc).w
0001B672 6600                               bne.s   @boss_invinc
0001B674 4A38 FE2E                          tst.b     (v_shoes).w
0001B678 6600                               bne.s   @boss_shoes
0001B67A                            
0001B67A 1038 F5C6                          move.b   (v_Saved_music),d0
0001B67E 6000 0000                          bra.w      @boss_play
0001B682                            
0001B682                            @boss_invinc:
0001B682 103C 0000                          move.b #bgm_Invincible,d0
0001B686                            
0001B686                            @boss_shoes:
0001B686 103C 0000                          move.b #bgm_Ending,d0
0001B68A                            
0001B68A                            @boss_play:
0001B68A 4EB8 12F8                          jsr PlaySound
0001B68E                            
0001B68E                            loc_179EE:
0001B68E 6100 FEB2                  		bsr.w	BossMove
0001B692 6000 FDF2                  		bra.w	loc_177E6
0001B696                            ; ===========================================================================
0001B696                            
0001B696                            loc_179F6:
0001B696 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001B69C 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B6A2 0C78 2AC0 F72A             		cmpi.w	#$2AC0,(v_limitright2).w
0001B6A8 6700                       		beq.s	loc_17A10
0001B6AA 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B6AE 6000                       		bra.s	loc_17A16
0001B6B0                            ; ===========================================================================
0001B6B0                            
0001B6B0                            loc_17A10:
0001B6B0 4A28 0001                  		tst.b	obRender(a0)
0001B6B4 6A00                       		bpl.s	BGHZ_ShipDel
0001B6B6                            
0001B6B6                            loc_17A16:
0001B6B6 6100 FE8A                  		bsr.w	BossMove
0001B6BA 6000 FDCA                  		bra.w	loc_177E6
0001B6BE                            ; ===========================================================================
0001B6BE                            
0001B6BE                            BGHZ_ShipDel:
0001B6BE 4EF9 0000 F86E             		jmp	(DeleteObject).l
0001B6C4                            ; ===========================================================================
0001B6C4                            
0001B6C4                            BGHZ_FaceMain:	; Routine 4
0001B6C4 7000                       		moveq	#0,d0
0001B6C6 7201                       		moveq	#1,d1
0001B6C8 2268 0034                  		movea.l	$34(a0),a1
0001B6CC 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B6D0 5900                       		subq.b	#4,d0
0001B6D2 6600                       		bne.s	loc_17A3E
0001B6D4 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
0001B6DA 6600                       		bne.s	loc_17A46
0001B6DC 7204                       		moveq	#4,d1
0001B6DE                            
0001B6DE                            loc_17A3E:
0001B6DE 5D00                       		subq.b	#6,d0
0001B6E0 6B00                       		bmi.s	loc_17A46
0001B6E2 720A                       		moveq	#$A,d1
0001B6E4 6000                       		bra.s	loc_17A5A
0001B6E6                            ; ===========================================================================
0001B6E6                            
0001B6E6                            loc_17A46:
0001B6E6 4A29 0020                  		tst.b	obColType(a1)
0001B6EA 6600                       		bne.s	loc_17A50
0001B6EC 7205                       		moveq	#5,d1
0001B6EE 6000                       		bra.s	loc_17A5A
0001B6F0                            ; ===========================================================================
0001B6F0                            
0001B6F0                            loc_17A50:
0001B6F0 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B6F6 6500                       		bcs.s	loc_17A5A
0001B6F8 7204                       		moveq	#4,d1
0001B6FA                            
0001B6FA                            loc_17A5A:
0001B6FA 1141 001C                  		move.b	d1,obAnim(a0)
0001B6FE 5500                       		subq.b	#2,d0
0001B700 6600                       		bne.s	BGHZ_FaceDisp
0001B702 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B708 4A28 0001                  		tst.b	obRender(a0)
0001B70C 6A00                       		bpl.s	BGHZ_FaceDel
0001B70E                            
0001B70E                            BGHZ_FaceDisp:
0001B70E 6000                       		bra.s	BGHZ_Display
0001B710                            ; ===========================================================================
0001B710                            
0001B710                            BGHZ_FaceDel:
0001B710 4EF9 0000 F86E             		jmp	(DeleteObject).l
0001B716                            ; ===========================================================================
0001B716                            
0001B716                            BGHZ_FlameMain:	; Routine 6
0001B716 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B71C 2268 0034                  		movea.l	$34(a0),a1
0001B720 0C29 000C 0025             		cmpi.b	#$C,ob2ndRout(a1)
0001B726 6600                       		bne.s	loc_17A96
0001B728 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B72E 4A28 0001                  		tst.b	obRender(a0)
0001B732 6A00                       		bpl.s	BGHZ_FlameDel
0001B734 6000                       		bra.s	BGHZ_FlameDisp
0001B736                            ; ===========================================================================
0001B736                            
0001B736                            loc_17A96:
0001B736 3029 0010                  		move.w	obVelX(a1),d0
0001B73A 6700                       		beq.s	BGHZ_FlameDisp
0001B73C 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B742                            
0001B742                            BGHZ_FlameDisp:
0001B742 6000                       		bra.s	BGHZ_Display
0001B744                            ; ===========================================================================
0001B744                            
0001B744                            BGHZ_FlameDel:
0001B744 4EF9 0000 F86E             		jmp	(DeleteObject).l
0001B74A                            ; ===========================================================================
0001B74A                            
0001B74A                            BGHZ_Display:
0001B74A 2268 0034                  		movea.l	$34(a0),a1
0001B74E 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B754 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B75A 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B760 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001B766 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
0001B76C 1028 0022                  		move.b	obStatus(a0),d0
0001B770 0200 0003                  		andi.b	#3,d0
0001B774 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B77A 8128 0001                  		or.b	d0,obRender(a0)
0001B77E 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001B77E 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001B784                            		include	"_incObj\48 Eggman's Swinging Ball.asm"
0001B784                            ; ---------------------------------------------------------------------------
0001B784                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001B784                            ; ---------------------------------------------------------------------------
0001B784                            
0001B784                            BossBall:
0001B784 7000                       		moveq	#0,d0
0001B786 1028 0024                  		move.b	obRoutine(a0),d0
0001B78A 323B 0000                  		move.w	GBall_Index(pc,d0.w),d1
0001B78E 4EFB 1000                  		jmp	GBall_Index(pc,d1.w)
0001B792                            ; ===========================================================================
0001B792 0000                       GBall_Index:	dc.w GBall_Main-GBall_Index
0001B794 0000                       		dc.w GBall_Base-GBall_Index
0001B796 0000                       		dc.w GBall_Display2-GBall_Index
0001B798 0000                       		dc.w loc_17C68-GBall_Index
0001B79A 0000                       		dc.w GBall_ChkVanish-GBall_Index
0001B79C                            ; ===========================================================================
0001B79C                            
0001B79C                            GBall_Main:	; Routine 0
0001B79C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B7A0 317C 4080 0026             		move.w	#$4080,obAngle(a0)
0001B7A6 317C FE00 003E             		move.w	#-$200,$3E(a0)
0001B7AC 217C 0000 0000 0004        		move.l	#Map_BossItems,obMap(a0)
0001B7B4 317C 046C 0002             		move.w	#$46C,obGfx(a0)
0001B7BA 45E8 0028                  		lea	obSubtype(a0),a2
0001B7BE 14FC 0000                  		move.b	#0,(a2)+
0001B7C2 7205                       		moveq	#5,d1
0001B7C4 2248                       		movea.l	a0,a1
0001B7C6 6000                       		bra.s	loc_17B60
0001B7C8                            ; ===========================================================================
0001B7C8                            
0001B7C8                            GBall_MakeLinks:
0001B7C8 4EB9 0000 FDDE             		jsr	(FindNextFreeObj).l
0001B7CE 6600                       		bne.s	GBall_MakeBall
0001B7D0 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B7D6 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B7DC 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load chain link object
0001B7E0 137C 0006 0024             		move.b	#6,obRoutine(a1)
0001B7E6 237C 0000 9480 0004        		move.l	#Map_Swing_GHZ,obMap(a1)
0001B7EE 337C 0380 0002             		move.w	#$380,obGfx(a1)
0001B7F4 137C 0001 001A             		move.b	#1,obFrame(a1)
0001B7FA 5228 0028                  		addq.b	#1,obSubtype(a0)
0001B7FE                            
0001B7FE                            loc_17B60:
0001B7FE 3A09                       		move.w	a1,d5
0001B800 0445 D000                  		subi.w	#$D000,d5
0001B804 EC4D                       		lsr.w	#6,d5
0001B806 0245 007F                  		andi.w	#$7F,d5
0001B80A 14C5                       		move.b	d5,(a2)+
0001B80C 137C 0004 0001             		move.b	#4,obRender(a1)
0001B812 137C 0008 0014             		move.b	#8,obActWid(a1)
0001B818 337C 0300 0018             		move.w	#$300,obPriority(a1)
0001B81E 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001B824 51C9 FFA2                  		dbf	d1,GBall_MakeLinks ; repeat sequence 5 more times
0001B828                            
0001B828                            GBall_MakeBall:
0001B828 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001B82E 237C 0000 99DC 0004        		move.l	#Map_GBall,obMap(a1) ; load different mappings for final link
0001B836 337C 43AA 0002             		move.w	#$43AA,obGfx(a1) ; use different graphics
0001B83C 137C 0001 001A             		move.b	#1,obFrame(a1)
0001B842 337C 0280 0018             		move.w	#$280,obPriority(a1)
0001B848 137C 0081 0020             		move.b	#$81,obColType(a1) ; make object hurt Sonic
0001B84E 4E75                       		rts	
0001B850                            ; ===========================================================================
0001B850                            
0001B850 0010 2030 4060             GBall_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0001B856                            
0001B856                            ; ===========================================================================
0001B856                            
0001B856                            GBall_Base:	; Routine 2
0001B856 47F9 0001 B850             		lea	(GBall_PosData).l,a3
0001B85C 45E8 0028                  		lea	obSubtype(a0),a2
0001B860 7C00                       		moveq	#0,d6
0001B862 1C1A                       		move.b	(a2)+,d6
0001B864                            
0001B864                            loc_17BC6:
0001B864 7800                       		moveq	#0,d4
0001B866 181A                       		move.b	(a2)+,d4
0001B868 ED4C                       		lsl.w	#6,d4
0001B86A 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
0001B870 2244                       		movea.l	d4,a1
0001B872 101B                       		move.b	(a3)+,d0
0001B874 B029 003C                  		cmp.b	$3C(a1),d0
0001B878 6700                       		beq.s	loc_17BE0
0001B87A 5229 003C                  		addq.b	#1,$3C(a1)
0001B87E                            
0001B87E                            loc_17BE0:
0001B87E 51CE FFE4                  		dbf	d6,loc_17BC6
0001B882                            
0001B882 B029 003C                  		cmp.b	$3C(a1),d0
0001B886 6600                       		bne.s	loc_17BFA
0001B888 2268 0034                  		movea.l	$34(a0),a1
0001B88C 0C29 0006 0025             		cmpi.b	#6,ob2ndRout(a1)
0001B892 6600                       		bne.s	loc_17BFA
0001B894 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B898                            
0001B898                            loc_17BFA:
0001B898 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
0001B89E 6700                       		beq.s	GBall_Display
0001B8A0 5268 0032                  		addq.w	#1,$32(a0)
0001B8A4                            
0001B8A4                            GBall_Display:
0001B8A4 6100 0000                  		bsr.w	sub_17C2A
0001B8A8 1028 0026                  		move.b	obAngle(a0),d0
0001B8AC 4EB9 0000 93F2             		jsr	(Swing_Move2).l
0001B8B2 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001B8B8                            ; ===========================================================================
0001B8B8                            
0001B8B8                            GBall_Display2:	; Routine 4
0001B8B8 6100 0000                  		bsr.w	sub_17C2A
0001B8BC 4EB9 0000 93B2             		jsr	(Obj48_Move).l
0001B8C2 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001B8C8                            
0001B8C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B8C8                            
0001B8C8                            
0001B8C8                            sub_17C2A:
0001B8C8 2268 0034                  		movea.l	$34(a0),a1
0001B8CC 0628 0020 001B             		addi.b	#$20,obAniFrame(a0)
0001B8D2 6400                       		bcc.s	loc_17C3C
0001B8D4 0868 0000 001A             		bchg	#0,obFrame(a0)
0001B8DA                            
0001B8DA                            loc_17C3C:
0001B8DA 3169 0008 003A             		move.w	obX(a1),$3A(a0)
0001B8E0 3029 000C                  		move.w	obY(a1),d0
0001B8E4 D068 0032                  		add.w	$32(a0),d0
0001B8E8 3140 0038                  		move.w	d0,$38(a0)
0001B8EC 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B8F2 4A29 0022                  		tst.b	obStatus(a1)
0001B8F6 6A00                       		bpl.s	locret_17C66
0001B8F8 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001B8FC 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001B902                            
0001B902                            locret_17C66:
0001B902 4E75                       		rts	
0001B904                            ; End of function sub_17C2A
0001B904                            
0001B904                            ; ===========================================================================
0001B904                            
0001B904                            loc_17C68:	; Routine 6
0001B904 2268 0034                  		movea.l	$34(a0),a1
0001B908 4A29 0022                  		tst.b	obStatus(a1)
0001B90C 6A00                       		bpl.s	GBall_Display3
0001B90E 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001B912 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001B918                            
0001B918                            GBall_Display3:
0001B918 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001B91E                            ; ===========================================================================
0001B91E                            
0001B91E                            GBall_ChkVanish:; Routine 8
0001B91E 7000                       		moveq	#0,d0
0001B920 4A28 001A                  		tst.b	obFrame(a0)
0001B924 6600                       		bne.s	GBall_Vanish
0001B926 5200                       		addq.b	#1,d0
0001B928                            
0001B928                            GBall_Vanish:
0001B928 1140 001A                  		move.b	d0,obFrame(a0)
0001B92C 2268 0034                  		movea.l	$34(a0),a1
0001B930 4A29 0022                  		tst.b	obStatus(a1)
0001B934 6A00                       		bpl.s	GBall_Display4
0001B936 117C 0000 0020             		move.b	#0,obColType(a0)
0001B93C 6100 FBC2                  		bsr.w	BossDefeated
0001B940 5328 003C                  		subq.b	#1,$3C(a0)
0001B944 6A00                       		bpl.s	GBall_Display4
0001B946 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001B94A 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001B950                            
0001B950                            GBall_Display4:
0001B950 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001B950 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001B956                            		include	"_anim\Eggman.asm"
0001B956                            ; ---------------------------------------------------------------------------
0001B956                            ; Animation script - Eggman (bosses)
0001B956                            ; ---------------------------------------------------------------------------
0001B956 0000                       Ani_Eggman:	dc.w @ship-Ani_Eggman
0001B958 0000                       		dc.w @facenormal1-Ani_Eggman
0001B95A 0000                       		dc.w @facenormal2-Ani_Eggman
0001B95C 0000                       		dc.w @facenormal3-Ani_Eggman
0001B95E 0000                       		dc.w @facelaugh-Ani_Eggman
0001B960 0000                       		dc.w @facehit-Ani_Eggman
0001B962 0000                       		dc.w @facepanic-Ani_Eggman
0001B964 0000                       		dc.w @blank-Ani_Eggman
0001B966 0000                       		dc.w @flame1-Ani_Eggman
0001B968 0000                       		dc.w @flame2-Ani_Eggman
0001B96A 0000                       		dc.w @facedefeat-Ani_Eggman
0001B96C 0000                       		dc.w @escapeflame-Ani_Eggman
0001B96E 0F00 FF                    @ship:		dc.b $F, 0, afEnd
0001B972 00                         		even
0001B972 0501 02FF                  @facenormal1:	dc.b 5,	1, 2, afEnd
0001B976                            		even
0001B976 0301 02FF                  @facenormal2:	dc.b 3,	1, 2, afEnd
0001B97A                            		even
0001B97A 0101 02FF                  @facenormal3:	dc.b 1,	1, 2, afEnd
0001B97E                            		even
0001B97E 0403 04FF                  @facelaugh:	dc.b 4,	3, 4, afEnd
0001B982                            		even
0001B982 1F05 01FF                  @facehit:	dc.b $1F, 5, 1,	afEnd
0001B986                            		even
0001B986 0306 01FF                  @facepanic:	dc.b 3,	6, 1, afEnd
0001B98A                            		even
0001B98A 0F0A FF                    @blank:		dc.b $F, $A, afEnd
0001B98E 00                         		even
0001B98E 0308 09FF                  @flame1:	dc.b 3,	8, 9, afEnd
0001B992                            		even
0001B992 0108 09FF                  @flame2:	dc.b 1,	8, 9, afEnd
0001B996                            		even
0001B996 0F07 FF                    @facedefeat:	dc.b $F, 7, afEnd
0001B99A 00                         		even
0001B99A 0209 080B 0C0B 0C09 08FE+  @escapeflame:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, afBack, 2
0001B9A6 00                         		even
0001B9A6 00                         		even
0001B9A6                            Map_Eggman:	include	"_maps\Eggman.asm"
0001B9A6                            ; --------------------------------------------------------------------------------
0001B9A6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001B9A6                            ; --------------------------------------------------------------------------------
0001B9A6                            
0001B9A6                            SME_F_pyS:	
0001B9A6 0000 0000                  		dc.w SME_F_pyS_1A-SME_F_pyS, SME_F_pyS_34-SME_F_pyS	
0001B9AA 0000 0000                  		dc.w SME_F_pyS_44-SME_F_pyS, SME_F_pyS_54-SME_F_pyS	
0001B9AE 0000 0000                  		dc.w SME_F_pyS_69-SME_F_pyS, SME_F_pyS_7E-SME_F_pyS	
0001B9B2 0000 0000                  		dc.w SME_F_pyS_93-SME_F_pyS, SME_F_pyS_A8-SME_F_pyS	
0001B9B6 0000 0000                  		dc.w SME_F_pyS_CC-SME_F_pyS, SME_F_pyS_D2-SME_F_pyS	
0001B9BA 0000 0000                  		dc.w SME_F_pyS_D8-SME_F_pyS, SME_F_pyS_D9-SME_F_pyS	
0001B9BE 0000                       		dc.w SME_F_pyS_E4-SME_F_pyS	
0001B9C0 05                         SME_F_pyS_1A:	dc.b 5	
0001B9C1 EC01 000A E4               		dc.b $EC, 1, 0, $A, $E4	
0001B9C6 FC0E 2010 E4               		dc.b $FC, $E, $20, $10, $E4	
0001B9CB FC0E 201C 04               		dc.b $FC, $E, $20, $1C, 4	
0001B9D0 140C 2028 EC               		dc.b $14, $C, $20, $28, $EC	
0001B9D5 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C	
0001B9DA 03                         SME_F_pyS_34:	dc.b 3	
0001B9DB E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001B9E0 EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC	
0001B9E5 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001B9EA 03                         SME_F_pyS_44:	dc.b 3	
0001B9EB E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001B9F0 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001B9F5 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001B9FA 04                         SME_F_pyS_54:	dc.b 4	
0001B9FB E408 003D F4               		dc.b $E4, 8, 0, $3D, $F4	
0001BA00 EC09 0040 EC               		dc.b $EC, 9, 0, $40, $EC	
0001BA05 EC05 0046 04               		dc.b $EC, 5, 0, $46, 4	
0001BA0A EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001BA0F 04                         SME_F_pyS_69:	dc.b 4	
0001BA10 E408 004A F4               		dc.b $E4, 8, 0, $4A, $F4	
0001BA15 EC09 004D EC               		dc.b $EC, 9, 0, $4D, $EC	
0001BA1A EC05 0053 04               		dc.b $EC, 5, 0, $53, 4	
0001BA1F EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001BA24 04                         SME_F_pyS_7E:	dc.b 4	
0001BA25 E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001BA2A EC09 005A EC               		dc.b $EC, 9, 0, $5A, $EC	
0001BA2F EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001BA34 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001BA39 04                         SME_F_pyS_93:	dc.b 4	
0001BA3A E404 0064 04               		dc.b $E4, 4, 0, $64, 4	
0001BA3F E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001BA44 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001BA49 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001BA4E 07                         SME_F_pyS_A8:	dc.b 7	
0001BA4F E409 0066 F4               		dc.b $E4, 9, 0, $66, $F4	
0001BA54 E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001BA59 EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001BA5E EC01 0035 EC               		dc.b $EC, 1, 0, $35, $EC	
0001BA63 F400 005D F4               		dc.b $F4, 0, 0, $5D, $F4	
0001BA68 F400 005F FC               		dc.b $F4, 0, 0, $5F, $FC	
0001BA6D EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001BA72 01                         SME_F_pyS_CC:	dc.b 1	
0001BA73 0405 002D 22               		dc.b 4, 5, 0, $2D, $22	
0001BA78 01                         SME_F_pyS_D2:	dc.b 1	
0001BA79 0405 0031 22               		dc.b 4, 5, 0, $31, $22	
0001BA7E 00                         SME_F_pyS_D8:	dc.b 0	
0001BA7F 02                         SME_F_pyS_D9:	dc.b 2	
0001BA80 0008 012A 22               		dc.b 0, 8, 1, $2A, $22	
0001BA85 0808 112A 22               		dc.b 8, 8, $11, $2A, $22	
0001BA8A 02                         SME_F_pyS_E4:	dc.b 2	
0001BA8B F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22	
0001BA90 0001 0139 3A               		dc.b 0, 1, 1, $39, $3A	
0001BA96 00                         		even
0001BA96 00                         		even
0001BA96                            Map_BossItems:	include	"_maps\Boss Items.asm"
0001BA96                            ; ---------------------------------------------------------------------------
0001BA96                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001BA96                            ; ---------------------------------------------------------------------------
0001BA96                            Map_BossItems_internal:
0001BA96 0000                       		dc.w @chainanchor1-Map_BossItems_internal
0001BA98 0000                       		dc.w @chainanchor2-Map_BossItems_internal
0001BA9A 0000                       		dc.w @cross-Map_BossItems_internal
0001BA9C 0000                       		dc.w @widepipe-Map_BossItems_internal
0001BA9E 0000                       		dc.w @pipe-Map_BossItems_internal
0001BAA0 0000                       		dc.w @spike-Map_BossItems_internal
0001BAA2 0000                       		dc.w @legmask-Map_BossItems_internal
0001BAA4 0000                       		dc.w @legs-Map_BossItems_internal
0001BAA6 01                         @chainanchor1:	dc.b 1
0001BAA7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; GHZ boss
0001BAAC 02                         @chainanchor2:	dc.b 2
0001BAAD FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; GHZ boss
0001BAB2 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001BAB8 00                         		even
0001BAB8 01                         @cross:		dc.b 1
0001BAB9 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; unknown
0001BABE 01                         @widepipe:	dc.b 1
0001BABF 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4	; SLZ boss
0001BAC4 01                         @pipe:		dc.b 1
0001BAC5 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8	; MZ boss
0001BACA 04                         @spike:		dc.b 4
0001BACB F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8 ; SYZ boss
0001BAD0 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
0001BAD5 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001BADA 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001BAE0 00                         		even
0001BAE0 02                         @legmask:	dc.b 2
0001BAE1 0005 0017 00               		dc.b 0,	5, 0, $17, 0	; FZ post-boss: sprite covering part of legs
0001BAE6 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001BAEC 00                         		even
0001BAEC 02                         @legs:		dc.b 2
0001BAED 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0	; FZ post-boss
0001BAF2 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001BAF8 00                         		even
0001BAF8 00                         		even
0001BAF8                            		include	"_incObj\77 Boss - Labyrinth.asm"
0001BAF8                            ; ---------------------------------------------------------------------------
0001BAF8                            ; Object 77 - Eggman (LZ)
0001BAF8                            ; ---------------------------------------------------------------------------
0001BAF8                            
0001BAF8                            BossLabyrinth:
0001BAF8 7000                       		moveq	#0,d0
0001BAFA 1028 0024                  		move.b	obRoutine(a0),d0
0001BAFE 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
0001BB02 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
0001BB06                            ; ===========================================================================
0001BB06 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
0001BB08 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0001BB0A 0000                       		dc.w Obj77_FaceMain-Obj77_Index
0001BB0C 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0001BB0E                            
0001BB0E 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
0001BB10 0401                       		dc.b 4,	1
0001BB12 0607                       		dc.b 6,	7
0001BB14                            ; ===========================================================================
0001BB14                            
0001BB14                            Obj77_Main:	; Routine 0
0001BB14 317C 1E10 0008             		move.w	#$1E10,obX(a0)
0001BB1A 317C 05C0 000C             		move.w	#$5C0,obY(a0)
0001BB20 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001BB26 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001BB2C 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BB32 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001BB38 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001BB3E 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001BB42 2248                       		movea.l	a0,a1
0001BB44 7202                       		moveq	#2,d1
0001BB46 6000                       		bra.s	Obj77_LoadBoss
0001BB48                            ; ===========================================================================
0001BB48                            
0001BB48                            Obj77_Loop:
0001BB48 4EB9 0000 FDDE             		jsr	(FindNextFreeObj).l
0001BB4E 6600                       		bne.s	Obj77_ShipMain
0001BB50 12BC 0077                  		move.b	#id_BossLabyrinth,0(a1)
0001BB54 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BB5A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BB60                            
0001BB60                            Obj77_LoadBoss:
0001BB60 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BB66 4229 0025                  		clr.b	ob2ndRout(a1)
0001BB6A 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001BB6E 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001BB72 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0001BB78 237C 0001 B9A6 0004        		move.l	#Map_Eggman,obMap(a1)
0001BB80 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001BB86 137C 0004 0001             		move.b	#4,obRender(a1)
0001BB8C 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001BB92 2348 0034                  		move.l	a0,$34(a1)
0001BB96 51C9 FFB0                  		dbf	d1,Obj77_Loop
0001BB9A                            
0001BB9A                            Obj77_ShipMain:	; Routine 2
0001BB9A 43F8 D000                  		lea	(v_player).w,a1
0001BB9E 7000                       		moveq	#0,d0
0001BBA0 1028 0025                  		move.b	ob2ndRout(a0),d0
0001BBA4 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
0001BBA8 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
0001BBAC 43F9 0001 B956             		lea	(Ani_Eggman).l,a1
0001BBB2 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
0001BBB8 7003                       		moveq	#3,d0
0001BBBA C028 0022                  		and.b	obStatus(a0),d0
0001BBBE 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BBC4 8128 0001                  		or.b	d0,obRender(a0)
0001BBC8 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001BBCE                            ; ===========================================================================
0001BBCE 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
0001BBD2 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
0001BBD6 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
0001BBDA 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001BBDE                            ; ===========================================================================
0001BBDE                            
0001BBDE                            loc_17F1E:
0001BBDE 3029 0008                  		move.w	obX(a1),d0
0001BBE2 0C40 1DA0                  		cmpi.w	#$1DA0,d0
0001BBE6 6500                       		bcs.s	loc_17F38
0001BBE8 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001BBEE 317C 0060 0010             		move.w	#$60,obVelX(a0)
0001BBF4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BBF8                            
0001BBF8                            loc_17F38:
0001BBF8 6100 F948                  		bsr.w	BossMove
0001BBFC 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001BC02 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001BC08                            
0001BC08                            loc_17F48:
0001BC08 4A28 003D                  		tst.b	$3D(a0)
0001BC0C 6600                       		bne.s	loc_17F8E
0001BC0E 4A28 0022                  		tst.b	obStatus(a0)
0001BC12 6B00                       		bmi.s	loc_17F92
0001BC14 4A28 0020                  		tst.b	obColType(a0)
0001BC18 6600                       		bne.s	locret_17F8C
0001BC1A 4A28 003E                  		tst.b	$3E(a0)
0001BC1E 6600                       		bne.s	loc_17F70
0001BC20 117C 0020 003E             		move.b	#$20,$3E(a0)
0001BC30                            
0001BC30                            loc_17F70:
0001BC30 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001BC34 7000                       		moveq	#0,d0
0001BC36 4A51                       		tst.w	(a1)
0001BC38 6600                       		bne.s	loc_17F7E
0001BC3A 303C 0EEE                  		move.w	#cWhite,d0
0001BC3E                            
0001BC3E                            loc_17F7E:
0001BC3E 3280                       		move.w	d0,(a1)
0001BC40 5328 003E                  		subq.b	#1,$3E(a0)
0001BC44 6600                       		bne.s	locret_17F8C
0001BC46 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BC4C                            
0001BC4C                            locret_17F8C:
0001BC4C 4E75                       		rts	
0001BC4E                            ; ===========================================================================
0001BC4E                            
0001BC4E                            loc_17F8E:
0001BC4E 6000 F8B0                  		bra.w	BossDefeated
0001BC52                            ; ===========================================================================
0001BC52                            
0001BC52                            loc_17F92:
0001BC52 7064                       		moveq	#100,d0
0001BC54 6100 0000                  		bsr.w	AddPoints
0001BC58 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001BC5E 4E75                       		rts	
0001BC60                            ; ===========================================================================
0001BC60                            
0001BC60                            loc_17FA0:
0001BC60 70FE                       		moveq	#-2,d0
0001BC62 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001BC68 6500                       		bcs.s	loc_17FB6
0001BC6A 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001BC70 4268 0010                  		clr.w	obVelX(a0)
0001BC74 5240                       		addq.w	#1,d0
0001BC76                            
0001BC76                            loc_17FB6:
0001BC76 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001BC7C 6E00                       		bgt.s	loc_17FCA
0001BC7E 317C 0500 0038             		move.w	#$500,$38(a0)
0001BC84 4268 0012                  		clr.w	obVelY(a0)
0001BC88 5240                       		addq.w	#1,d0
0001BC8A                            
0001BC8A                            loc_17FCA:
0001BC8A 6600                       		bne.s	loc_17FDC
0001BC8C 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001BC92 317C FE00 0012             		move.w	#-$200,obVelY(a0)
0001BC98 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BC9C                            
0001BC9C                            loc_17FDC:
0001BC9C 6000 FF5A                  		bra.w	loc_17F38
0001BCA0                            ; ===========================================================================
0001BCA0                            
0001BCA0                            loc_17FE0:
0001BCA0 70FE                       		moveq	#-2,d0
0001BCA2 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
0001BCA8 6500                       		bcs.s	loc_17FF6
0001BCAA 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001BCB0 4268 0010                  		clr.w	obVelX(a0)
0001BCB4 5240                       		addq.w	#1,d0
0001BCB6                            
0001BCB6                            loc_17FF6:
0001BCB6 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001BCBC 6E00                       		bgt.s	loc_1800A
0001BCBE 317C 04C0 0038             		move.w	#$4C0,$38(a0)
0001BCC4 4268 0012                  		clr.w	obVelY(a0)
0001BCC8 5240                       		addq.w	#1,d0
0001BCCA                            
0001BCCA                            loc_1800A:
0001BCCA 6600                       		bne.s	loc_1801A
0001BCCC 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001BCD2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BCD6 4228 003F                  		clr.b	$3F(a0)
0001BCDA                            
0001BCDA                            loc_1801A:
0001BCDA 6000 FF1C                  		bra.w	loc_17F38
0001BCDE                            ; ===========================================================================
0001BCDE                            
0001BCDE                            loc_1801E:
0001BCDE 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
0001BCE4 6E00                       		bgt.s	loc_1804E
0001BCE6 317C 0100 0038             		move.w	#$100,$38(a0)
0001BCEC 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001BCF2 317C FF80 0012             		move.w	#-$80,obVelY(a0)
0001BCF8 4A28 003D                  		tst.b	$3D(a0)
0001BCFC 6700                       		beq.s	loc_18046
0001BCFE E1E8 0010                  		asl	obVelX(a0)
0001BD02 E1E8 0012                  		asl	obVelY(a0)
0001BD06                            
0001BD06                            loc_18046:
0001BD06 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BD0A 6000 FEEC                  		bra.w	loc_17F38
0001BD0E                            ; ===========================================================================
0001BD0E                            
0001BD0E                            loc_1804E:
0001BD0E 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BD14 5428 003F                  		addq.b	#2,$3F(a0)
0001BD18 1028 003F                  		move.b	$3F(a0),d0
0001BD1C 4EB9 0000 3D28             		jsr	(CalcSine).l
0001BD22 4A41                       		tst.w	d1
0001BD24 6A00                       		bpl.s	loc_1806C
0001BD26 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BD2C                            
0001BD2C                            loc_1806C:
0001BD2C E840                       		asr.w	#4,d0
0001BD2E 4840                       		swap	d0
0001BD30 4240                       		clr.w	d0
0001BD32 D0A8 0030                  		add.l	$30(a0),d0
0001BD36 4840                       		swap	d0
0001BD38 3140 0008                  		move.w	d0,obX(a0)
0001BD3C 3028 0012                  		move.w	obVelY(a0),d0
0001BD40 3238 D00C                  		move.w	(v_player+obY).w,d1
0001BD44 9268 000C                  		sub.w	obY(a0),d1
0001BD48 6500                       		bcs.s	loc_180A2
0001BD4A 0441 0048                  		subi.w	#$48,d1
0001BD4E 6500                       		bcs.s	loc_180A2
0001BD50 E240                       		asr.w	#1,d0
0001BD52 0441 0028                  		subi.w	#$28,d1
0001BD56 6500                       		bcs.s	loc_180A2
0001BD58 E240                       		asr.w	#1,d0
0001BD5A 0441 0028                  		subi.w	#$28,d1
0001BD5E 6500                       		bcs.s	loc_180A2
0001BD60 7000                       		moveq	#0,d0
0001BD62                            
0001BD62                            loc_180A2:
0001BD62 48C0                       		ext.l	d0
0001BD64 E180                       		asl.l	#8,d0
0001BD66 4A28 003D                  		tst.b	$3D(a0)
0001BD6A 6700                       		beq.s	loc_180AE
0001BD6C D080                       		add.l	d0,d0
0001BD6E                            
0001BD6E                            loc_180AE:
0001BD6E D1A8 0038                  		add.l	d0,$38(a0)
0001BD72 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001BD78 6000 FE8E                  		bra.w	loc_17F48
0001BD7C                            ; ===========================================================================
0001BD7C                            
0001BD7C                            loc_180BC:
0001BD7C 70FE                       		moveq	#-2,d0
0001BD7E 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001BD84 6500                       		bcs.s	loc_180D2
0001BD86 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001BD8C 4268 0010                  		clr.w	obVelX(a0)
0001BD90 5240                       		addq.w	#1,d0
0001BD92                            
0001BD92                            loc_180D2:
0001BD92 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001BD98 6E00                       		bgt.s	loc_180E6
0001BD9A 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001BDA0 4268 0012                  		clr.w	obVelY(a0)
0001BDA4 5240                       		addq.w	#1,d0
0001BDA6                            
0001BDA6                            loc_180E6:
0001BDA6 6600                       		bne.s	loc_180F2
0001BDA8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BDAC 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BDB2                            
0001BDB2                            loc_180F2:
0001BDB2 6000 FE44                  		bra.w	loc_17F38
0001BDB6                            ; ===========================================================================
0001BDB6                            
0001BDB6                            loc_180F6:
0001BDB6 4A28 003D                  		tst.b	$3D(a0)
0001BDBA 6600                       		bne.s	loc_18112
0001BDBC 0C69 1EC8 0008             		cmpi.w	#$1EC8,obX(a1)
0001BDC2 6D00                       		blt.s	loc_18126
0001BDC4 0C69 00F0 000C             		cmpi.w	#$F0,obY(a1)
0001BDCA 6E00                       		bgt.s	loc_18126
0001BDCC 117C 0032 003C             		move.b	#$32,$3C(a0)
0001BDD2                            
0001BDD2                            loc_18112:
0001BDD2 4A38 FE2D                          tst.b     (v_invinc).w
0001BDD6 6600                               bne.s   @boss_invinc
0001BDD8                            
0001BDD8 1038 F5C6                          move.b   (v_Saved_music),d0
0001BDDC 6000 0000                          bra.w      @boss_play
0001BDE0                            
0001BDE0                            @boss_invinc:
0001BDE0 103C 0000                          move.b #bgm_Invincible,d0
0001BDE4                            
0001BDE4                            @boss_play:
0001BDE4 4EB8 12F8                          jsr PlaySound
0001BDE8 4238 F7AA                          clr.b    (f_lockscreen).w
0001BDEC 08E8 0000 0022                     bset    #0,obStatus(a0)
0001BDF2 5428 0025                          addq.b    #2,ob2ndRout(a0)
0001BDF6                            
0001BDF6                            loc_18126:
0001BDF6 6000 FE00                  		bra.w	loc_17F38
0001BDFA                            ; ===========================================================================
0001BDFA                            
0001BDFA                            loc_1812A:
0001BDFA 4A28 003D                  		tst.b	$3D(a0)
0001BDFE 6600                       		bne.s	loc_18136
0001BE00 5328 003C                  		subq.b	#1,$3C(a0)
0001BE04 6600                       		bne.s	loc_1814E
0001BE06                            
0001BE06                            loc_18136:
0001BE06 4228 003C                  		clr.b	$3C(a0)
0001BE0A 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001BE10 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001BE16 4228 003D                  		clr.b	$3D(a0)
0001BE1A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BE1E                            
0001BE1E                            loc_1814E:
0001BE1E 6000 FDD8                  		bra.w	loc_17F38
0001BE22                            ; ===========================================================================
0001BE22                            
0001BE22                            loc_18152:
0001BE22 0C78 2030 F72A             		cmpi.w	#$2030,(v_limitright2).w
0001BE28 6400                       		bcc.s	loc_18160
0001BE2A 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001BE2E 6000                       		bra.s	loc_18166
0001BE30                            ; ===========================================================================
0001BE30                            
0001BE30                            loc_18160:
0001BE30 4A28 0001                  		tst.b	obRender(a0)
0001BE34 6A00                       		bpl.s	Obj77_ShipDel
0001BE36                            
0001BE36                            loc_18166:
0001BE36 6000 FDC0                  		bra.w	loc_17F38
0001BE3A                            ; ===========================================================================
0001BE3A                            
0001BE3A                            Obj77_ShipDel:
0001BE3A 4EF9 0000 F86E             		jmp	(DeleteObject).l
0001BE40                            ; ===========================================================================
0001BE40                            
0001BE40                            Obj77_FaceMain:	; Routine 4
0001BE40 2268 0034                  		movea.l	$34(a0),a1
0001BE44 1011                       		move.b	(a1),d0
0001BE46 B010                       		cmp.b	(a0),d0
0001BE48 6600                       		bne.s	Obj77_FaceDel
0001BE4A 7000                       		moveq	#0,d0
0001BE4C 1029 0025                  		move.b	ob2ndRout(a1),d0
0001BE50 7201                       		moveq	#1,d1
0001BE52 4A28 003D                  		tst.b	$3D(a0)
0001BE56 6700                       		beq.s	loc_1818C
0001BE58 720A                       		moveq	#$A,d1
0001BE5A 6000                       		bra.s	loc_181A0
0001BE5C                            ; ===========================================================================
0001BE5C                            
0001BE5C                            loc_1818C:
0001BE5C 4A29 0020                  		tst.b	obColType(a1)
0001BE60 6600                       		bne.s	loc_18196
0001BE62 7205                       		moveq	#5,d1
0001BE64 6000                       		bra.s	loc_181A0
0001BE66                            ; ===========================================================================
0001BE66                            
0001BE66                            loc_18196:
0001BE66 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001BE6C 6500                       		bcs.s	loc_181A0
0001BE6E 7204                       		moveq	#4,d1
0001BE70                            
0001BE70                            loc_181A0:
0001BE70 1141 001C                  		move.b	d1,obAnim(a0)
0001BE74 0C00 000E                  		cmpi.b	#$E,d0
0001BE78 6600                       		bne.s	loc_181B6
0001BE7A 117C 0006 001C             		move.b	#6,obAnim(a0)
0001BE80 4A28 0001                  		tst.b	obRender(a0)
0001BE84 6A00                       		bpl.s	Obj77_FaceDel
0001BE86                            
0001BE86                            loc_181B6:
0001BE86 6000                       		bra.s	Obj77_Display
0001BE88                            ; ===========================================================================
0001BE88                            
0001BE88                            Obj77_FaceDel:
0001BE88 4EF9 0000 F86E             		jmp	(DeleteObject).l
0001BE8E                            ; ===========================================================================
0001BE8E                            
0001BE8E                            Obj77_FlameMain:; Routine 6
0001BE8E 117C 0007 001C             		move.b	#7,obAnim(a0)
0001BE94 2268 0034                  		movea.l	$34(a0),a1
0001BE98 1011                       		move.b	(a1),d0
0001BE9A B010                       		cmp.b	(a0),d0
0001BE9C 6600                       		bne.s	Obj77_FlameDel
0001BE9E 0C29 000E 0025             		cmpi.b	#$E,ob2ndRout(a1)
0001BEA4 6600                       		bne.s	loc_181F0
0001BEA6 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001BEAC 4A28 0001                  		tst.b	1(a0)
0001BEB0 6A00                       		bpl.s	Obj77_FlameDel
0001BEB2 6000                       		bra.s	loc_181F0
0001BEB4                            ; ===========================================================================
0001BEB4 4A69 0010                  		tst.w	obVelX(a1)
0001BEB8 6700                       		beq.s	loc_181F0
0001BEBA 117C 0008 001C             		move.b	#8,obAnim(a0)
0001BEC0                            
0001BEC0                            loc_181F0:
0001BEC0 6000                       		bra.s	Obj77_Display
0001BEC2                            ; ===========================================================================
0001BEC2                            
0001BEC2                            Obj77_FlameDel:
0001BEC2 4EF9 0000 F86E             		jmp	(DeleteObject).l
0001BEC8                            ; ===========================================================================
0001BEC8                            
0001BEC8                            Obj77_Display:
0001BEC8 43F9 0001 B956             		lea	(Ani_Eggman).l,a1
0001BECE 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
0001BED4 2268 0034                  		movea.l	$34(a0),a1
0001BED8 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001BEDE 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001BEE4 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001BEEA 7003                       		moveq	#3,d0
0001BEEC C028 0022                  		and.b	obStatus(a0),d0
0001BEF0 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BEF6 8128 0001                  		or.b	d0,obRender(a0)
0001BEFA 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001BEFA 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001BF00                            		include	"_incObj\73 Boss - Marble.asm"
0001BF00                            ; ---------------------------------------------------------------------------
0001BF00                            ; Object 73 - Eggman (MZ)
0001BF00                            ; ---------------------------------------------------------------------------
0001BF00                            
0001BF00                            BossMarble:
0001BF00 7000                       		moveq	#0,d0
0001BF02 1028 0024                  		move.b	obRoutine(a0),d0
0001BF06 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001BF0A 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001BF0E                            ; ===========================================================================
0001BF0E 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001BF10 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001BF12 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001BF14 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001BF16 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001BF18                            
0001BF18 0200 0200                  Obj73_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001BF1C 0401 0200                  		dc.b 4,	1, $02, $00
0001BF20 0607 0200                  		dc.b 6,	7, $02, $00
0001BF24 0800 0180                  		dc.b 8,	0, $01, $80
0001BF28                            ; ===========================================================================
0001BF28                            
0001BF28                            Obj73_Main:	; Routine 0
0001BF28 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001BF2E 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001BF34 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BF3A 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001BF40 45FA FFD6                  		lea	Obj73_ObjData(pc),a2
0001BF44 2248                       		movea.l	a0,a1
0001BF46 7203                       		moveq	#3,d1
0001BF48 6000                       		bra.s	Obj73_LoadBoss
0001BF4A                            ; ===========================================================================
0001BF4A                            
0001BF4A                            Obj73_Loop:
0001BF4A 4EB9 0000 FDDE             		jsr	(FindNextFreeObj).l
0001BF50 6600                       		bne.s	Obj73_ShipMain
0001BF52 12BC 0073                  		move.b	#id_BossMarble,0(a1)
0001BF56 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BF5C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BF62                            
0001BF62                            Obj73_LoadBoss:
0001BF62 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BF68 4229 0025                  		clr.b	ob2ndRout(a1)
0001BF6C 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001BF70 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001BF74 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001BF78 237C 0001 B9A6 0004        		move.l	#Map_Eggman,obMap(a1)
0001BF80 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001BF86 137C 0004 0001             		move.b	#4,obRender(a1)
0001BF8C 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001BF92 2348 0034                  		move.l	a0,$34(a1)
0001BF96 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001BF9A                            
0001BF9A                            Obj73_ShipMain:	; Routine 2
0001BF9A 7000                       		moveq	#0,d0
0001BF9C 1028 0025                  		move.b	ob2ndRout(a0),d0
0001BFA0 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001BFA4 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001BFA8 43F9 0001 B956             		lea	(Ani_Eggman).l,a1
0001BFAE 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
0001BFB4 7003                       		moveq	#3,d0
0001BFB6 C028 0022                  		and.b	obStatus(a0),d0
0001BFBA 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BFC0 8128 0001                  		or.b	d0,obRender(a0)
0001BFC4 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001BFCA                            ; ===========================================================================
0001BFCA 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001BFCC 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001BFCE 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001BFD0 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001BFD2 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001BFD4                            ; ===========================================================================
0001BFD4                            
0001BFD4                            loc_18302:
0001BFD4 1028 003F                  		move.b	$3F(a0),d0
0001BFD8 5428 003F                  		addq.b	#2,$3F(a0)
0001BFDC 4EB9 0000 3D28             		jsr	(CalcSine).l
0001BFE2 E440                       		asr.w	#2,d0
0001BFE4 3140 0012                  		move.w	d0,obVelY(a0)
0001BFE8 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001BFEE 6100 F552                  		bsr.w	BossMove
0001BFF2 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001BFF8 6600                       		bne.s	loc_18334
0001BFFA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BFFE 4228 0028                  		clr.b	obSubtype(a0)
0001C002 42A8 0010                  		clr.l	obVelX(a0)
0001C006                            
0001C006                            loc_18334:
0001C006 4EB9 0000 3D02             		jsr	(RandomNumber).l
0001C00C 1140 0034                  		move.b	d0,$34(a0)
0001C010                            
0001C010                            loc_1833E:
0001C010 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001C016 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C01C 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0001C022 6400                       		bcc.s	locret_18390
0001C024 4A28 0022                  		tst.b	obStatus(a0)
0001C028 6B00                       		bmi.s	loc_18392
0001C02A 4A28 0020                  		tst.b	obColType(a0)
0001C02E 6600                       		bne.s	locret_18390
0001C030 4A28 003E                  		tst.b	$3E(a0)
0001C034 6600                       		bne.s	loc_18374
0001C036 117C 0028 003E             		move.b	#$28,$3E(a0)
0001C046                            
0001C046                            loc_18374:
0001C046 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001C04A 7000                       		moveq	#0,d0
0001C04C 4A51                       		tst.w	(a1)
0001C04E 6600                       		bne.s	loc_18382
0001C050 303C 0EEE                  		move.w	#cWhite,d0
0001C054                            
0001C054                            loc_18382:
0001C054 3280                       		move.w	d0,(a1)
0001C056 5328 003E                  		subq.b	#1,$3E(a0)
0001C05A 6600                       		bne.s	locret_18390
0001C05C 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C062                            
0001C062                            locret_18390:
0001C062 4E75                       		rts	
0001C064                            ; ===========================================================================
0001C064                            
0001C064                            loc_18392:
0001C064 7064                       		moveq	#100,d0
0001C066 6100 0000                  		bsr.w	AddPoints
0001C06A 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
0001C070 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001C076 4268 0010                  		clr.w	obVelX(a0)
0001C07A 4E75                       		rts	
0001C07C                            ; ===========================================================================
0001C07C                            
0001C07C                            loc_183AA:
0001C07C 7000                       		moveq	#0,d0
0001C07E 1028 0028                  		move.b	obSubtype(a0),d0
0001C082 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001C086 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001C08A 0228 0006 0028             		andi.b	#6,obSubtype(a0)
0001C090 6000 FF7E                  		bra.w	loc_1833E
0001C094                            ; ===========================================================================
0001C094 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001C096 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001C098 0000                       		dc.w loc_183CA-off_183C2
0001C09A 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001C09C                            ; ===========================================================================
0001C09C                            
0001C09C                            loc_183CA:
0001C09C 4A68 0010                  		tst.w	obVelX(a0)
0001C0A0 6600                       		bne.s	loc_183FE
0001C0A2 7040                       		moveq	#$40,d0
0001C0A4 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001C0AA 6700                       		beq.s	loc_183E6
0001C0AC 6500                       		bcs.s	loc_183DE
0001C0AE 4440                       		neg.w	d0
0001C0B0                            
0001C0B0                            loc_183DE:
0001C0B0 3140 0012                  		move.w	d0,obVelY(a0)
0001C0B4 6000 F48C                  		bra.w	BossMove
0001C0B8                            ; ===========================================================================
0001C0B8                            
0001C0B8                            loc_183E6:
0001C0B8 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001C0BE 317C 0100 0012             		move.w	#$100,obVelY(a0)
0001C0C4 0828 0000 0022             		btst	#0,obStatus(a0)
0001C0CA 6600                       		bne.s	loc_183FE
0001C0CC 4468 0010                  		neg.w	obVelX(a0)
0001C0D0                            
0001C0D0                            loc_183FE:
0001C0D0 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001C0D6 6400                       		bcc.s	Obj73_MakeLava
0001C0D8 6100 F468                  		bsr.w	BossMove
0001C0DC 5968 0012                  		subq.w	#4,obVelY(a0)
0001C0E0                            
0001C0E0                            Obj73_MakeLava:
0001C0E0 5328 0034                  		subq.b	#1,$34(a0)
0001C0E4 6400                       		bcc.s	loc_1845C
0001C0E6 4EB9 0000 FDC8             		jsr	(FindFreeObj).l
0001C0EC 6600                       		bne.s	loc_1844A
0001C0EE 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
0001C0F2 337C 02E8 000C             		move.w	#$2E8,obY(a1)	; set Y	position
0001C0F8 4EB9 0000 3D02             		jsr	(RandomNumber).l
0001C0FE 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001C104 80FC 0050                  		divu.w	#$50,d0
0001C108 4840                       		swap	d0
0001C10A 0640 1878                  		addi.w	#$1878,d0
0001C10E 3340 0008                  		move.w	d0,obX(a1)
0001C112 EE09                       		lsr.b	#7,d1
0001C114 337C 00FF 0028             		move.w	#$FF,obSubtype(a1)
0001C11A                            
0001C11A                            loc_1844A:
0001C11A 4EB9 0000 3D02             		jsr	(RandomNumber).l
0001C120 0200 001F                  		andi.b	#$1F,d0
0001C124 0600 0040                  		addi.b	#$40,d0
0001C128 1140 0034                  		move.b	d0,$34(a0)
0001C12C                            
0001C12C                            loc_1845C:
0001C12C 0828 0000 0022             		btst	#0,obStatus(a0)
0001C132 6700                       		beq.s	loc_18474
0001C134 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001C13A 6D00                       		blt.s	locret_1849C
0001C13C 317C 1910 0030             		move.w	#$1910,$30(a0)
0001C142 6000                       		bra.s	loc_18482
0001C144                            ; ===========================================================================
0001C144                            
0001C144                            loc_18474:
0001C144 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001C14A 6E00                       		bgt.s	locret_1849C
0001C14C 317C 1830 0030             		move.w	#$1830,$30(a0)
0001C152                            
0001C152                            loc_18482:
0001C152 4268 0010                  		clr.w	obVelX(a0)
0001C156 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001C15C 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001C162 6400                       		bcc.s	loc_18498
0001C164 4468 0012                  		neg.w	obVelY(a0)
0001C168                            
0001C168                            loc_18498:
0001C168 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C16C                            
0001C16C                            locret_1849C:
0001C16C 4E75                       		rts	
0001C16E                            ; ===========================================================================
0001C16E                            
0001C16E                            Obj73_MakeLava2:
0001C16E 6100 F3D2                  		bsr.w	BossMove
0001C172 3028 0038                  		move.w	$38(a0),d0
0001C176 0440 022C                  		subi.w	#$22C,d0
0001C17A 6E00                       		bgt.s	locret_184F4
0001C17C 303C 022C                  		move.w	#$22C,d0
0001C180 4A68 0012                  		tst.w	obVelY(a0)
0001C184 6700                       		beq.s	loc_184EA
0001C186 4268 0012                  		clr.w	obVelY(a0)
0001C18A 317C 0050 003C             		move.w	#$50,$3C(a0)
0001C190 0868 0000 0022             		bchg	#0,obStatus(a0)
0001C196 4EB9 0000 FDC8             		jsr	(FindFreeObj).l
0001C19C 6600                       		bne.s	loc_184EA
0001C19E 3368 0030 0008             		move.w	$30(a0),obX(a1)
0001C1A4 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001C1AA 0669 0018 000C             		addi.w	#$18,obY(a1)
0001C1B0 12BC 0074                  		move.b	#id_BossFire,(a1)	; load lava ball object
0001C1B4 137C 0001 0028             		move.b	#1,obSubtype(a1)
0001C1BA                            
0001C1BA                            loc_184EA:
0001C1BA 5368 003C                  		subq.w	#1,$3C(a0)
0001C1BE 6600                       		bne.s	locret_184F4
0001C1C0 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C1C4                            
0001C1C4                            locret_184F4:
0001C1C4 4E75                       		rts	
0001C1C6                            ; ===========================================================================
0001C1C6                            
0001C1C6                            loc_184F6:
0001C1C6 5368 003C                  		subq.w	#1,$3C(a0)
0001C1CA 6B00                       		bmi.s	loc_18500
0001C1CC 6000 F332                  		bra.w	BossDefeated
0001C1D0                            ; ===========================================================================
0001C1D0                            
0001C1D0                            loc_18500:
0001C1D0 08E8 0000 0022             		bset	#0,obStatus(a0)
0001C1D6 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001C1DC 4268 0010                  		clr.w	obVelX(a0)
0001C1E0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C1E4 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001C1EA 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001C1EE 6600                       		bne.s	locret_1852A
0001C1F0 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001C1F6 4268 0012                  		clr.w	obVelY(a0)
0001C1FA                            
0001C1FA                            locret_1852A:
0001C1FA 4E75                       		rts	
0001C1FC                            ; ===========================================================================
0001C1FC                            
0001C1FC                            loc_1852C:
0001C1FC 5268 003C                  		addq.w	#1,$3C(a0)
0001C200 6700                       		beq.s	loc_18544
0001C202 6A00                       		bpl.s	loc_1854E
0001C204 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001C20A 6400                       		bcc.s	loc_18544
0001C20C 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C212 6000                       		bra.s	loc_1857A
0001C214                            ; ===========================================================================
0001C214                            
0001C214                            loc_18544:
0001C214 4268 0012                  		clr.w	obVelY(a0)
0001C218 4268 003C                  		clr.w	$3C(a0)
0001C21C 6000                       		bra.s	loc_1857A
0001C21E                            ; ===========================================================================
0001C21E                            
0001C21E                            loc_1854E:
0001C21E 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001C224 6500                       		bcs.s	loc_18566
0001C226 6700                       		beq.s	loc_1856C
0001C228 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001C22E 6500                       		bcs.s	loc_1857A
0001C230 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C234 6000                       		bra.s	loc_1857A
0001C236                            ; ===========================================================================
0001C236                            
0001C236                            loc_18566:
0001C236 5168 0012                  		subq.w	#8,obVelY(a0)
0001C23A 6000                       		bra.s	loc_1857A
0001C23C                            ; ===========================================================================
0001C23C                            
0001C23C                            loc_1856C:
0001C23C 4268 0012                  		clr.w	obVelY(a0)
0001C24A                            
0001C24A                            loc_1857A:
0001C24A 6100 F2F6                  		bsr.w	BossMove
0001C24E 6000 FDC0                  		bra.w	loc_1833E
0001C252                            ; ===========================================================================
0001C252                            
0001C252                            loc_18582:
0001C252 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001C258 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001C25E 0C78 1960 F72A             		cmpi.w	#$1960,(v_limitright2).w
0001C264 6400                       		bcc.s	loc_1859C
0001C266 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001C26A 6000                       		bra.s	loc_185A2
0001C26C                            ; ===========================================================================
0001C26C                            
0001C26C                            loc_1859C:
0001C26C 4A28 0001                  		tst.b	obRender(a0)
0001C270 6A00                       		bpl.s	Obj73_ShipDel
0001C272                            
0001C272                            loc_185A2:
0001C272 6100 F2CE                  		bsr.w	BossMove
0001C276 6000 FD98                  		bra.w	loc_1833E
0001C27A                            ; ===========================================================================
0001C27A                            
0001C27A                            Obj73_ShipDel:
0001C27A 4EF9 0000 F86E             		jmp	(DeleteObject).l
0001C280                            ; ===========================================================================
0001C280                            
0001C280                            Obj73_FaceMain:	; Routine 4
0001C280 7000                       		moveq	#0,d0
0001C282 7201                       		moveq	#1,d1
0001C284 2268 0034                  		movea.l	$34(a0),a1
0001C288 1029 0025                  		move.b	ob2ndRout(a1),d0
0001C28C 5540                       		subq.w	#2,d0
0001C28E 6600                       		bne.s	loc_185D2
0001C290 0829 0001 0028             		btst	#1,obSubtype(a1)
0001C296 6700                       		beq.s	loc_185DA
0001C298 4A69 0012                  		tst.w	obVelY(a1)
0001C29C 6600                       		bne.s	loc_185DA
0001C29E 7204                       		moveq	#4,d1
0001C2A0 6000                       		bra.s	loc_185EE
0001C2A2                            ; ===========================================================================
0001C2A2                            
0001C2A2                            loc_185D2:
0001C2A2 5500                       		subq.b	#2,d0
0001C2A4 6B00                       		bmi.s	loc_185DA
0001C2A6 720A                       		moveq	#$A,d1
0001C2A8 6000                       		bra.s	loc_185EE
0001C2AA                            ; ===========================================================================
0001C2AA                            
0001C2AA                            loc_185DA:
0001C2AA 4A29 0020                  		tst.b	obColType(a1)
0001C2AE 6600                       		bne.s	loc_185E4
0001C2B0 7205                       		moveq	#5,d1
0001C2B2 6000                       		bra.s	loc_185EE
0001C2B4                            ; ===========================================================================
0001C2B4                            
0001C2B4                            loc_185E4:
0001C2B4 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001C2BA 6500                       		bcs.s	loc_185EE
0001C2BC 7204                       		moveq	#4,d1
0001C2BE                            
0001C2BE                            loc_185EE:
0001C2BE 1141 001C                  		move.b	d1,obAnim(a0)
0001C2C2 5900                       		subq.b	#4,d0
0001C2C4 6600                       		bne.s	loc_18602
0001C2C6 117C 0006 001C             		move.b	#6,obAnim(a0)
0001C2CC 4A28 0001                  		tst.b	obRender(a0)
0001C2D0 6A00                       		bpl.s	Obj73_FaceDel
0001C2D2                            
0001C2D2                            loc_18602:
0001C2D2 6000                       		bra.s	Obj73_Display
0001C2D4                            ; ===========================================================================
0001C2D4                            
0001C2D4                            Obj73_FaceDel:
0001C2D4 4EF9 0000 F86E             		jmp	(DeleteObject).l
0001C2DA                            ; ===========================================================================
0001C2DA                            
0001C2DA                            Obj73_FlameMain:; Routine 6
0001C2DA 117C 0007 001C             		move.b	#7,obAnim(a0)
0001C2E0 2268 0034                  		movea.l	$34(a0),a1
0001C2E4 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001C2EA 6D00                       		blt.s	loc_1862A
0001C2EC 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001C2F2 4A28 0001                  		tst.b	obRender(a0)
0001C2F6 6A00                       		bpl.s	Obj73_FlameDel
0001C2F8 6000                       		bra.s	loc_18636
0001C2FA                            ; ===========================================================================
0001C2FA                            
0001C2FA                            loc_1862A:
0001C2FA 4A69 0010                  		tst.w	obVelX(a1)
0001C2FE 6700                       		beq.s	loc_18636
0001C300 117C 0008 001C             		move.b	#8,obAnim(a0)
0001C306                            
0001C306                            loc_18636:
0001C306 6000                       		bra.s	Obj73_Display
0001C308                            ; ===========================================================================
0001C308                            
0001C308                            Obj73_FlameDel:
0001C308 4EF9 0000 F86E             		jmp	(DeleteObject).l
0001C30E                            ; ===========================================================================
0001C30E                            
0001C30E                            Obj73_Display:
0001C30E 43F9 0001 B956             		lea	(Ani_Eggman).l,a1
0001C314 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
0001C31A                            
0001C31A                            loc_1864A:
0001C31A 2268 0034                  		movea.l	$34(a0),a1
0001C31E 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C324 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C32A 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001C330 7003                       		moveq	#3,d0
0001C332 C028 0022                  		and.b	obStatus(a0),d0
0001C336 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C33C 8128 0001                  		or.b	d0,obRender(a0)
0001C340 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001C346                            ; ===========================================================================
0001C346                            
0001C346                            Obj73_TubeMain:	; Routine 8
0001C346 2268 0034                  		movea.l	$34(a0),a1
0001C34A 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001C350 6600                       		bne.s	loc_18688
0001C352 4A28 0001                  		tst.b	obRender(a0)
0001C356 6A00                       		bpl.s	Obj73_TubeDel
0001C358                            
0001C358                            loc_18688:
0001C358 217C 0001 BA96 0004        		move.l	#Map_BossItems,obMap(a0)
0001C360 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001C366 117C 0004 001A             		move.b	#4,obFrame(a0)
0001C36C 60AC                       		bra.s	loc_1864A
0001C36E                            ; ===========================================================================
0001C36E                            
0001C36E                            Obj73_TubeDel:
0001C36E 4EF9 0000 F86E             		jmp	(DeleteObject).l
0001C36E 4EF9 0000 F86E             		jmp	(DeleteObject).l
0001C374                            		include	"_incObj\74 MZ Boss Fire.asm"
0001C374                            ; ---------------------------------------------------------------------------
0001C374                            ; Object 74 - lava that	Eggman drops (MZ)
0001C374                            ; ---------------------------------------------------------------------------
0001C374                            
0001C374                            BossFire:
0001C374 7000                       		moveq	#0,d0
0001C376 1028 0024                  		move.b	obRoutine(a0),d0
0001C37A 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001C37E 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001C382 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001C388                            ; ===========================================================================
0001C388 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001C38A 0000                       		dc.w Obj74_Action-Obj74_Index
0001C38C 0000                       		dc.w loc_18886-Obj74_Index
0001C38E 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001C390                            ; ===========================================================================
0001C390                            
0001C390                            Obj74_Main:	; Routine 0
0001C390 117C 0008 0016             		move.b	#8,obHeight(a0)
0001C396 117C 0008 0017             		move.b	#8,obWidth(a0)
0001C39C 217C 0000 D536 0004        		move.l	#Map_Fire,obMap(a0)
0001C3A4 317C 0345 0002             		move.w	#$345,obGfx(a0)
0001C3AA 117C 0004 0001             		move.b	#4,obRender(a0)
0001C3B0 317C 0280 0018             		move.w	#$280,obPriority(a0)
0001C3B6 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001C3BC 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C3C2 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C3C6 4A28 0028                  		tst.b	obSubtype(a0)
0001C3CA 6600                       		bne.s	loc_1870A
0001C3CC 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001C3D2 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C3D6 6000 0000                  		bra.w	loc_18886
0001C3DA                            ; ===========================================================================
0001C3DA                            
0001C3DA                            loc_1870A:
0001C3DA 117C 001E 0029             		move.b	#$1E,$29(a0)
0001C3EA                            
0001C3EA                            Obj74_Action:	; Routine 2
0001C3EA 7000                       		moveq	#0,d0
0001C3EC 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C3F0 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001C3F4 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001C3F8 4EB9 0000 F81A             		jsr	(SpeedToPos).l
0001C3FE 43F9 0001 0812             		lea	(Ani_Fire).l,a1
0001C404 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
0001C40A 0C68 02E8 000C             		cmpi.w	#$2E8,obY(a0)
0001C410 6200                       		bhi.s	Obj74_Delete
0001C412 4E75                       		rts	
0001C414                            ; ===========================================================================
0001C414                            
0001C414                            Obj74_Delete:
0001C414 4EF9 0000 F86E             		jmp	(DeleteObject).l
0001C41A                            ; ===========================================================================
0001C41A 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001C41C 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001C41E 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001C420 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001C422                            ; ===========================================================================
0001C422                            
0001C422                            Obj74_Drop:
0001C422 08E8 0001 0022             		bset	#1,obStatus(a0)
0001C428 5328 0029                  		subq.b	#1,$29(a0)
0001C42C 6A00                       		bpl.s	locret_18780
0001C42E 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001C434 4228 0028                  		clr.b	obSubtype(a0)
0001C438 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C43E 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001C444 6100 C5D0                  		bsr.w	ObjFloorDist
0001C448 4A41                       		tst.w	d1
0001C44A 6A00                       		bpl.s	locret_18780
0001C44C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C450                            
0001C450                            locret_18780:
0001C450 4E75                       		rts	
0001C452                            ; ===========================================================================
0001C452                            
0001C452                            Obj74_MakeFlame:
0001C452 5568 000C                  		subq.w	#2,obY(a0)
0001C456 08E8 0007 0002             		bset	#7,obGfx(a0)
0001C45C 317C 00A0 0010             		move.w	#$A0,obVelX(a0)
0001C462 4268 0012                  		clr.w	obVelY(a0)
0001C466 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C46C 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001C472 117C 0003 0029             		move.b	#3,$29(a0)
0001C478 4EB9 0000 FDDE             		jsr	(FindNextFreeObj).l
0001C47E 6600                       		bne.s	loc_187CA
0001C480 47D1                       		lea	(a1),a3
0001C482 45D0                       		lea	(a0),a2
0001C484 7003                       		moveq	#3,d0
0001C486                            
0001C486                            Obj74_Loop:
0001C486 26DA                       		move.l	(a2)+,(a3)+
0001C488 26DA                       		move.l	(a2)+,(a3)+
0001C48A 26DA                       		move.l	(a2)+,(a3)+
0001C48C 26DA                       		move.l	(a2)+,(a3)+
0001C48E 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001C492                            
0001C492 4469 0010                  		neg.w	obVelX(a1)
0001C496 5429 0025                  		addq.b	#2,ob2ndRout(a1)
0001C49A                            
0001C49A                            loc_187CA:
0001C49A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C49E 4E75                       		rts	
0001C4A0                            
0001C4A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C4A0                            
0001C4A0                            
0001C4A0                            Obj74_Duplicate2:
0001C4A0 4EB9 0000 FDDE             		jsr	(FindNextFreeObj).l
0001C4A6 6600                       		bne.s	locret_187EE
0001C4A8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C4AE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C4B4 12BC 0074                  		move.b	#id_BossFire,(a1)
0001C4B8 337C 0067 0028             		move.w	#$67,obSubtype(a1)
0001C4BE                            
0001C4BE                            locret_187EE:
0001C4BE 4E75                       		rts	
0001C4C0                            ; End of function Obj74_Duplicate2
0001C4C0                            
0001C4C0                            ; ===========================================================================
0001C4C0                            
0001C4C0                            Obj74_Duplicate:
0001C4C0 6100 C554                  		bsr.w	ObjFloorDist
0001C4C4 4A41                       		tst.w	d1
0001C4C6 6A00                       		bpl.s	loc_18826
0001C4C8 3028 0008                  		move.w	obX(a0),d0
0001C4CC 0C40 1940                  		cmpi.w	#$1940,d0
0001C4D0 6E00                       		bgt.s	loc_1882C
0001C4D2 3228 0030                  		move.w	$30(a0),d1
0001C4D6 B240                       		cmp.w	d0,d1
0001C4D8 6700                       		beq.s	loc_1881E
0001C4DA 0240 0010                  		andi.w	#$10,d0
0001C4DE 0241 0010                  		andi.w	#$10,d1
0001C4E2 B240                       		cmp.w	d0,d1
0001C4E4 6700                       		beq.s	loc_1881E
0001C4E6 61B8                       		bsr.s	Obj74_Duplicate2
0001C4E8 3168 0008 0032             		move.w	obX(a0),$32(a0)
0001C4EE                            
0001C4EE                            loc_1881E:
0001C4EE 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C4F4 4E75                       		rts	
0001C4F6                            ; ===========================================================================
0001C4F6                            
0001C4F6                            loc_18826:
0001C4F6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C4FA 4E75                       		rts	
0001C4FC                            ; ===========================================================================
0001C4FC                            
0001C4FC                            loc_1882C:
0001C4FC 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C500 4E75                       		rts	
0001C502                            ; ===========================================================================
0001C502                            
0001C502                            Obj74_FallEdge:
0001C502 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001C508 0668 0024 0012             		addi.w	#$24,obVelY(a0)	; make flame fall
0001C50E 3028 0008                  		move.w	obX(a0),d0
0001C512 9068 0032                  		sub.w	$32(a0),d0
0001C516 6A00                       		bpl.s	loc_1884A
0001C518 4440                       		neg.w	d0
0001C51A                            
0001C51A                            loc_1884A:
0001C51A 0C40 0012                  		cmpi.w	#$12,d0
0001C51E 6600                       		bne.s	loc_18856
0001C520 08A8 0007 0002             		bclr	#7,obGfx(a0)
0001C526                            
0001C526                            loc_18856:
0001C526 6100 C4EE                  		bsr.w	ObjFloorDist
0001C52A 4A41                       		tst.w	d1
0001C52C 6A00                       		bpl.s	locret_1887E
0001C52E 5328 0029                  		subq.b	#1,$29(a0)
0001C532 6700                       		beq.s	Obj74_Delete2
0001C534 4268 0012                  		clr.w	obVelY(a0)
0001C538 3168 0032 0008             		move.w	$32(a0),obX(a0)
0001C53E 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001C544 08E8 0007 0002             		bset	#7,obGfx(a0)
0001C54A 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001C54E                            
0001C54E                            locret_1887E:
0001C54E 4E75                       		rts	
0001C550                            ; ===========================================================================
0001C550                            
0001C550                            Obj74_Delete2:
0001C550 4EF9 0000 F86E             		jmp	(DeleteObject).l
0001C556                            ; ===========================================================================
0001C556                            
0001C556                            loc_18886:	; Routine 4
0001C556 08E8 0007 0002             		bset	#7,obGfx(a0)
0001C55C 5328 0029                  		subq.b	#1,$29(a0)
0001C560 6600                       		bne.s	Obj74_Animate
0001C562 117C 0001 001C             		move.b	#1,obAnim(a0)
0001C568 5968 000C                  		subq.w	#4,obY(a0)
0001C56C 4228 0020                  		clr.b	obColType(a0)
0001C570                            
0001C570                            Obj74_Animate:
0001C570 43F9 0001 0812             		lea	(Ani_Fire).l,a1
0001C576 4EF9 0000 C8E4             		jmp	(AnimateSprite).l
0001C57C                            ; ===========================================================================
0001C57C                            
0001C57C                            Obj74_Delete3:	; Routine 6
0001C57C 4EF9 0000 F86E             		jmp	(DeleteObject).l
0001C57C 4EF9 0000 F86E             		jmp	(DeleteObject).l
0001C582                            
0001C582                            	Obj7A_Delete:
0001C582 4EF9 0000 F86E             		jmp	(DeleteObject).l
0001C588                            
0001C588                            		include	"_incObj\7A Boss - Star Light.asm"
0001C588                            ; ---------------------------------------------------------------------------
0001C588                            ; Object 7A - Eggman (SLZ)
0001C588                            ; ---------------------------------------------------------------------------
0001C588                            
0001C588                            BossStarLight:
0001C588 7000                       		moveq	#0,d0
0001C58A 1028 0024                  		move.b	obRoutine(a0),d0
0001C58E 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001C592 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001C596                            ; ===========================================================================
0001C596 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001C598 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001C59A 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001C59C 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001C59E 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001C5A0                            
0001C5A0 0200 0200                  Obj7A_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001C5A4 0401 0200                  		dc.b 4,	1, $02, $00
0001C5A8 0607 0200                  		dc.b 6,	7, $02, $00
0001C5AC 0800 0180                  		dc.b 8,	0, $01, $80
0001C5B0                            ; ===========================================================================
0001C5B0                            
0001C5B0                            Obj7A_Main:
0001C5B0 317C 2188 0008             		move.w	#$2188,obX(a0)
0001C5B6 317C 0228 000C             		move.w	#$228,obY(a0)
0001C5BC 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C5C2 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001C5C8 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C5CE 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001C5D4 45FA FFCA                  		lea	Obj7A_ObjData(pc),a2
0001C5D8 2248                       		movea.l	a0,a1
0001C5DA 7203                       		moveq	#3,d1
0001C5DC 6000                       		bra.s	Obj7A_LoadBoss
0001C5DE                            ; ===========================================================================
0001C5DE                            
0001C5DE                            Obj7A_Loop:
0001C5DE 4EB9 0000 FDDE             		jsr	(FindNextFreeObj).l
0001C5E4 6600                       		bne.s	loc_1895C
0001C5E6 12BC 007A                  		move.b	#id_BossStarLight,0(a1)
0001C5EA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C5F0 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C5F6                            
0001C5F6                            Obj7A_LoadBoss:
0001C5F6 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C5FC 4229 0025                  		clr.b	ob2ndRout(a1)
0001C600 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001C604 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001C608 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001C60C 237C 0001 B9A6 0004        		move.l	#Map_Eggman,obMap(a1)
0001C614 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001C61A 137C 0004 0001             		move.b	#4,obRender(a1)
0001C620 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001C626 2348 0034                  		move.l	a0,$34(a1)
0001C62A 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001C62E                            
0001C62E                            loc_1895C:
0001C62E 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C632 45E8 002A                  		lea	$2A(a0),a2
0001C636 705E                       		moveq	#$5E,d0
0001C638 723E                       		moveq	#$3E,d1
0001C63A                            
0001C63A                            loc_18968:
0001C63A B011                       		cmp.b	(a1),d0
0001C63C 6600                       		bne.s	loc_18974
0001C63E 4A29 0028                  		tst.b	obSubtype(a1)
0001C642 6700                       		beq.s	loc_18974
0001C644 34C9                       		move.w	a1,(a2)+
0001C646                            
0001C646                            loc_18974:
0001C646 D2FC 0040                  		adda.w	#$40,a1
0001C64A 51C9 FFEE                  		dbf	d1,loc_18968
0001C64E                            
0001C64E                            Obj7A_ShipMain:	; Routine 2
0001C64E 7000                       		moveq	#0,d0
0001C650 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C654 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001C658 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001C65C 43F9 0001 B956             		lea	(Ani_Eggman).l,a1
0001C662 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
0001C668 7003                       		moveq	#3,d0
0001C66A C028 0022                  		and.b	obStatus(a0),d0
0001C66E 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C674 8128 0001                  		or.b	d0,obRender(a0)
0001C678 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001C67E                            ; ===========================================================================
0001C67E 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001C680 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001C682 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001C684 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001C686 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001C688 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001C68A                            ; ===========================================================================
0001C68A                            
0001C68A                            loc_189B8:
0001C68A 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001C690 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001C696 6400                       		bcc.s	loc_189CA
0001C698 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C69C                            
0001C69C                            loc_189CA:
0001C69C 6100 EEA4                  		bsr.w	BossMove
0001C6A0 1028 003F                  		move.b	$3F(a0),d0
0001C6A4 5428 003F                  		addq.b	#2,$3F(a0)
0001C6A8 4EB9 0000 3D28             		jsr	(CalcSine).l
0001C6AE EC40                       		asr.w	#6,d0
0001C6B0 D068 0038                  		add.w	$38(a0),d0
0001C6B4 3140 000C                  		move.w	d0,obY(a0)
0001C6B8 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C6BE 6000                       		bra.s	loc_189FE
0001C6C0                            ; ===========================================================================
0001C6C0                            
0001C6C0                            loc_189EE:
0001C6C0 6100 EE80                  		bsr.w	BossMove
0001C6C4 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001C6CA 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C6D0                            
0001C6D0                            loc_189FE:
0001C6D0 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001C6D6 6400                       		bcc.s	locret_18A44
0001C6D8 4A28 0022                  		tst.b	obStatus(a0)
0001C6DC 6B00                       		bmi.s	loc_18A46
0001C6DE 4A28 0020                  		tst.b	obColType(a0)
0001C6E2 6600                       		bne.s	locret_18A44
0001C6E4 4A28 003E                  		tst.b	$3E(a0)
0001C6E8 6600                       		bne.s	loc_18A28
0001C6EA 117C 0020 003E             		move.b	#$20,$3E(a0)
0001C6FA                            
0001C6FA                            loc_18A28:
0001C6FA 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001C6FE 7000                       		moveq	#0,d0
0001C700 4A51                       		tst.w	(a1)
0001C702 6600                       		bne.s	loc_18A36
0001C704 303C 0EEE                  		move.w	#cWhite,d0
0001C708                            
0001C708                            loc_18A36:
0001C708 3280                       		move.w	d0,(a1)
0001C70A 5328 003E                  		subq.b	#1,$3E(a0)
0001C70E 6600                       		bne.s	locret_18A44
0001C710 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C716                            
0001C716                            locret_18A44:
0001C716 4E75                       		rts	
0001C718                            ; ===========================================================================
0001C718                            
0001C718                            loc_18A46:
0001C718 7064                       		moveq	#100,d0
0001C71A 6100 0000                  		bsr.w	AddPoints
0001C71E 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001C724 117C 0078 003C             		move.b	#$78,$3C(a0)
0001C72A 4268 0010                  		clr.w	obVelX(a0)
0001C72E 4E75                       		rts	
0001C730                            ; ===========================================================================
0001C730                            
0001C730                            loc_18A5E:
0001C730 3028 0030                  		move.w	$30(a0),d0
0001C734 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001C73A 0828 0000 0022             		btst	#0,obStatus(a0)
0001C740 6600                       		bne.s	loc_18A7C
0001C742 4468 0010                  		neg.w	obVelX(a0)
0001C746 0C40 2008                  		cmpi.w	#$2008,d0
0001C74A 6E00                       		bgt.s	loc_18A88
0001C74C 6000                       		bra.s	loc_18A82
0001C74E                            ; ===========================================================================
0001C74E                            
0001C74E                            loc_18A7C:
0001C74E 0C40 2138                  		cmpi.w	#$2138,d0
0001C752 6D00                       		blt.s	loc_18A88
0001C754                            
0001C754                            loc_18A82:
0001C754 0868 0000 0022             		bchg	#0,obStatus(a0)
0001C75A                            
0001C75A                            loc_18A88:
0001C75A 3028 0008                  		move.w	8(a0),d0
0001C75E 72FF                       		moveq	#-1,d1
0001C760 7402                       		moveq	#2,d2
0001C762 45E8 002A                  		lea	$2A(a0),a2
0001C766 7828                       		moveq	#$28,d4
0001C768 4A68 0010                  		tst.w	obVelX(a0)
0001C76C 6A00                       		bpl.s	loc_18A9E
0001C76E 4444                       		neg.w	d4
0001C770                            
0001C770                            loc_18A9E:
0001C770 321A                       		move.w	(a2)+,d1
0001C772 2641                       		movea.l	d1,a3
0001C774 082B 0003 0022             		btst	#3,obStatus(a3)
0001C77A 6600                       		bne.s	loc_18AB4
0001C77C 362B 0008                  		move.w	8(a3),d3
0001C780 D644                       		add.w	d4,d3
0001C782 9640                       		sub.w	d0,d3
0001C784 6700                       		beq.s	loc_18AC0
0001C786                            
0001C786                            loc_18AB4:
0001C786 51CA FFE8                  		dbf	d2,loc_18A9E
0001C78A                            
0001C78A 1142 0028                  		move.b	d2,obSubtype(a0)
0001C78E 6000 FF0C                  		bra.w	loc_189CA
0001C792                            ; ===========================================================================
0001C792                            
0001C792                            loc_18AC0:
0001C792 1142 0028                  		move.b	d2,obSubtype(a0)
0001C796 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C79A 117C 0028 003C             		move.b	#$28,$3C(a0)
0001C7A0 6000 FEFA                  		bra.w	loc_189CA
0001C7A4                            ; ===========================================================================
0001C7A4                            
0001C7A4                            Obj7A_MakeBall:
0001C7A4 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001C7AA 6600                       		bne.s	loc_18B36
0001C7AC 70FF                       		moveq	#-1,d0
0001C7AE 1028 0028                  		move.b	obSubtype(a0),d0
0001C7B2 4880                       		ext.w	d0
0001C7B4 6B00                       		bmi.s	loc_18B40
0001C7B6 5540                       		subq.w	#2,d0
0001C7B8 4440                       		neg.w	d0
0001C7BA D040                       		add.w	d0,d0
0001C7BC 43E8 002A                  		lea	$2A(a0),a1
0001C7C0 3031 0000                  		move.w	(a1,d0.w),d0
0001C7C4 2440                       		movea.l	d0,a2
0001C7C6 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C7CA 723E                       		moveq	#$3E,d1
0001C7CC                            
0001C7CC                            loc_18AFA:
0001C7CC B0A9 003C                  		cmp.l	$3C(a1),d0
0001C7D0 6700                       		beq.s	loc_18B40
0001C7D2 D2FC 0040                  		adda.w	#$40,a1
0001C7D6 51C9 FFF4                  		dbf	d1,loc_18AFA
0001C7DA                            
0001C7DA 2F08                       		move.l	a0,-(sp)
0001C7DC 41D2                       		lea	(a2),a0
0001C7DE 4EB9 0000 FDDE             		jsr	(FindNextFreeObj).l
0001C7E4 205F                       		movea.l	(sp)+,a0
0001C7E6 6600                       		bne.s	loc_18B40
0001C7E8 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load spiked ball object
0001C7EC 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C7F2 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C7F8 0669 0020 000C             		addi.w	#$20,obY(a1)
0001C7FE 136A 0022 0022             		move.b	obStatus(a2),obStatus(a1)
0001C804 234A 003C                  		move.l	a2,$3C(a1)
0001C808                            
0001C808                            loc_18B36:
0001C808 5328 003C                  		subq.b	#1,$3C(a0)
0001C80C 6700                       		beq.s	loc_18B40
0001C80E 6000 FEC0                  		bra.w	loc_189FE
0001C812                            ; ===========================================================================
0001C812                            
0001C812                            loc_18B40:
0001C812 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001C816 6000 FE84                  		bra.w	loc_189CA
0001C81A                            ; ===========================================================================
0001C81A                            
0001C81A                            loc_18B48:
0001C81A 5328 003C                  		subq.b	#1,$3C(a0)
0001C81E 6B00                       		bmi.s	loc_18B52
0001C820 6000 ECDE                  		bra.w	BossDefeated
0001C824                            ; ===========================================================================
0001C824                            
0001C824                            loc_18B52:
0001C824 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C828 4268 0012                  		clr.w	obVelY(a0)
0001C82C 08E8 0000 0022             		bset	#0,obStatus(a0)
0001C832 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001C838 4268 0010                  		clr.w	obVelX(a0)
0001C83C 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001C842 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001C846 6600                       		bne.s	loc_18B7C
0001C848 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001C84E                            
0001C84E                            loc_18B7C:
0001C84E 6000 FE80                  		bra.w	loc_189FE
0001C852                            ; ===========================================================================
0001C852                            
0001C852                            loc_18B80:
0001C852 5228 003C                  		addq.b	#1,$3C(a0)
0001C856 6700                       		beq.s	loc_18B90
0001C858 6A00                       		bpl.s	loc_18B96
0001C85A 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C860 6000                       		bra.s	loc_18BC2
0001C862                            ; ===========================================================================
0001C862                            
0001C862                            loc_18B90:
0001C862 4268 0012                  		clr.w	obVelY(a0)
0001C866 6000                       		bra.s	loc_18BC2
0001C868                            ; ===========================================================================
0001C868                            
0001C868                            loc_18B96:
0001C868 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001C86E 6500                       		bcs.s	loc_18BAE
0001C870 6700                       		beq.s	loc_18BB4
0001C872 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001C878 6500                       		bcs.s	loc_18BC2
0001C87A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C87E 6000                       		bra.s	loc_18BC2
0001C880                            ; ===========================================================================
0001C880                            
0001C880                            loc_18BAE:
0001C880 5168 0012                  		subq.w	#8,obVelY(a0)
0001C884 6000                       		bra.s	loc_18BC2
0001C886                            ; ===========================================================================
0001C886                            
0001C886                            loc_18BB4:
0001C886 4268 0012                          	clr.w    obVelY(a0)
0001C88A 4A38 FE2D                          	tst.b     (v_invinc).w
0001C88E 6600                               	bne.s   @boss_invinc
0001C890                            
0001C890 1038 F5C6                          	move.b   (v_Saved_music),d0
0001C894 6000 0000                          	bra.w      @boss_play
0001C898                            
0001C898                            	@boss_invinc:
0001C898 103C 0000                          	move.b #bgm_Invincible,d0
0001C89C                            
0001C89C                            	@boss_play:
0001C89C 4EB8 12F8                          	jsr PlaySound
0001C8A0                            
0001C8A0                            loc_18BC2:
0001C8A0 6000 FE1E                  		bra.w	loc_189EE
0001C8A4                            ; ===========================================================================
0001C8A4                            
0001C8A4                            loc_18BC6:
0001C8A4 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001C8AA 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001C8B0 0C78 2160 F72A             		cmpi.w	#$2160,(v_limitright2).w
0001C8B6 6400                       		bcc.s	loc_18BE0
0001C8B8 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001C8BC 6000                       		bra.s	loc_18BE8
0001C8BE                            ; ===========================================================================
0001C8BE                            
0001C8BE                            loc_18BE0:
0001C8BE 4A28 0001                  		tst.b	obRender(a0)
0001C8C2 6A00 FCBE                  		bpl.w	Obj7A_Delete
0001C8C6                            
0001C8C6                            loc_18BE8:
0001C8C6 6100 EC7A                  		bsr.w	BossMove
0001C8CA 6000 FDD0                  		bra.w	loc_189CA
0001C8CE                            ; ===========================================================================
0001C8CE                            
0001C8CE                            Obj7A_FaceMain:	; Routine 4
0001C8CE 7000                       		moveq	#0,d0
0001C8D0 7201                       		moveq	#1,d1
0001C8D2 2268 0034                  		movea.l	$34(a0),a1
0001C8D6 1029 0025                  		move.b	ob2ndRout(a1),d0
0001C8DA 0C00 0006                  		cmpi.b	#6,d0
0001C8DE 6B00                       		bmi.s	loc_18C06
0001C8E0 720A                       		moveq	#$A,d1
0001C8E2 6000                       		bra.s	loc_18C1A
0001C8E4                            ; ===========================================================================
0001C8E4                            
0001C8E4                            loc_18C06:
0001C8E4 4A29 0020                  		tst.b	obColType(a1)
0001C8E8 6600                       		bne.s	loc_18C10
0001C8EA 7205                       		moveq	#5,d1
0001C8EC 6000                       		bra.s	loc_18C1A
0001C8EE                            ; ===========================================================================
0001C8EE                            
0001C8EE                            loc_18C10:
0001C8EE 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001C8F4 6500                       		bcs.s	loc_18C1A
0001C8F6 7204                       		moveq	#4,d1
0001C8F8                            
0001C8F8                            loc_18C1A:
0001C8F8 1141 001C                  		move.b	d1,obAnim(a0)
0001C8FC 0C00 000A                  		cmpi.b	#$A,d0
0001C900 6600                       		bne.s	loc_18C32
0001C902 117C 0006 001C             		move.b	#6,obAnim(a0)
0001C908 4A28 0001                  		tst.b	obRender(a0)
0001C90C 6A00 FC74                  		bpl.w	Obj7A_Delete
0001C910                            
0001C910                            loc_18C32:
0001C910 6000                       		bra.s	loc_18C6C
0001C912                            ; ===========================================================================
0001C912                            
0001C912                            Obj7A_FlameMain:; Routine 6
0001C912 117C 0008 001C             		move.b	#8,obAnim(a0)
0001C918 2268 0034                  		movea.l	$34(a0),a1
0001C91C 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C922 6600                       		bne.s	loc_18C56
0001C924 4A28 0001                  		tst.b	obRender(a0)
0001C928 6A00 FC58                  		bpl.w	Obj7A_Delete
0001C92C 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001C932 6000                       		bra.s	loc_18C6C
0001C934                            ; ===========================================================================
0001C934                            
0001C934                            loc_18C56:
0001C934 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001C93A 6E00                       		bgt.s	loc_18C6C
0001C93C 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001C942 6D00                       		blt.s	loc_18C6C
0001C944 117C 0007 001C             		move.b	#7,obAnim(a0)
0001C94A                            
0001C94A                            loc_18C6C:
0001C94A 43F9 0001 B956             		lea	(Ani_Eggman).l,a1
0001C950 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
0001C956                            
0001C956                            loc_18C78:
0001C956 2268 0034                  		movea.l	$34(a0),a1
0001C95A 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C960 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C966 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001C96C 7003                       		moveq	#3,d0
0001C96E C028 0022                  		and.b	obStatus(a0),d0
0001C972 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C978 8128 0001                  		or.b	d0,obRender(a0)
0001C97C 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001C982                            ; ===========================================================================
0001C982                            
0001C982                            Obj7A_TubeMain:	; Routine 8
0001C982 2268 0034                  		movea.l	$34(a0),a1
0001C986 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C98C 6600                       		bne.s	loc_18CB8
0001C98E 4A28 0001                  		tst.b	obRender(a0)
0001C992 6A00 FBEE                  		bpl.w	Obj7A_Delete
0001C996                            
0001C996                            loc_18CB8:
0001C996 217C 0001 BA96 0004        		move.l	#Map_BossItems,obMap(a0)
0001C99E 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001C9A4 117C 0003 001A             		move.b	#3,obFrame(a0)
0001C9AA 60AA                       		bra.s	loc_18C78
0001C9AA 60AA                       		bra.s	loc_18C78
0001C9AC                            		include	"_incObj\7B SLZ Boss Spikeball.asm"
0001C9AC                            ; ---------------------------------------------------------------------------
0001C9AC                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001C9AC                            ; ---------------------------------------------------------------------------
0001C9AC                            
0001C9AC                            BossSpikeball:
0001C9AC 7000                       		moveq	#0,d0
0001C9AE 1028 0024                  		move.b	obRoutine(a0),d0
0001C9B2 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001C9B6 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001C9BA 3028 0030                  		move.w	$30(a0),d0
0001C9BE 0240 FF80                  		andi.w	#$FF80,d0
0001C9C2 3238 F700                  		move.w	(v_screenposx).w,d1
0001C9C6 0441 0080                  		subi.w	#$80,d1
0001C9CA 0241 FF80                  		andi.w	#$FF80,d1
0001C9CE 9041                       		sub.w	d1,d0
0001C9D0 6B00 FBB0                  		bmi.w	Obj7A_Delete
0001C9D4 0C40 0280                  		cmpi.w	#$280,d0
0001C9D8 6200 FBA8                  		bhi.w	Obj7A_Delete
0001C9DC 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001C9E2                            ; ===========================================================================
0001C9E2 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001C9E4 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001C9E6 0000                       		dc.w loc_18DC6-Obj7B_Index
0001C9E8 0000                       		dc.w loc_18EAA-Obj7B_Index
0001C9EA 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001C9EC 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001C9EE                            ; ===========================================================================
0001C9EE                            
0001C9EE                            Obj7B_Main:	; Routine 0
0001C9EE 217C 0001 3DEE 0004        		move.l	#Map_SSawBall,obMap(a0)
0001C9F6 317C 0518 0002             		move.w	#$518,obGfx(a0)
0001C9FC 117C 0001 001A             		move.b	#1,obFrame(a0)
0001CA02 0028 0004 0001             		ori.b	#4,obRender(a0)
0001CA08 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001CA0E 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001CA14 117C 000C 0014             		move.b	#$C,obActWid(a0)
0001CA1A 2268 003C                  		movea.l	$3C(a0),a1
0001CA1E 3169 0008 0030             		move.w	obX(a1),$30(a0)
0001CA24 3169 000C 0034             		move.w	obY(a1),$34(a0)
0001CA2A 08E8 0000 0022             		bset	#0,obStatus(a0)
0001CA30 3028 0008                  		move.w	obX(a0),d0
0001CA34 B069 0008                  		cmp.w	obX(a1),d0
0001CA38 6E00                       		bgt.s	loc_18D68
0001CA3A 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001CA40 117C 0002 003A             		move.b	#2,$3A(a0)
0001CA46                            
0001CA46                            loc_18D68:
0001CA46 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CA4A                            
0001CA4A                            Obj7B_Fall:	; Routine 2
0001CA4A 4EB9 0000 F7E2             		jsr	(ObjectFall).l
0001CA50 2268 003C                  		movea.l	$3C(a0),a1
0001CA54 45F9 0000 0000             		lea	(word_19018).l,a2
0001CA5A 7000                       		moveq	#0,d0
0001CA5C 1029 001A                  		move.b	obFrame(a1),d0
0001CA60 3228 0008                  		move.w	8(a0),d1
0001CA64 9268 0030                  		sub.w	$30(a0),d1
0001CA68 6400                       		bcc.s	loc_18D8E
0001CA6A 5440                       		addq.w	#2,d0
0001CA6C                            
0001CA6C                            loc_18D8E:
0001CA6C D040                       		add.w	d0,d0
0001CA6E 3228 0034                  		move.w	$34(a0),d1
0001CA72 D272 0000                  		add.w	(a2,d0.w),d1
0001CA76 B268 000C                  		cmp.w	obY(a0),d1
0001CA7A 6E00                       		bgt.s	locret_18DC4
0001CA7C 2268 003C                  		movea.l	$3C(a0),a1
0001CA80 7202                       		moveq	#2,d1
0001CA82 0828 0000 0022             		btst	#0,obStatus(a0)
0001CA88 6700                       		beq.s	loc_18DAE
0001CA8A 7200                       		moveq	#0,d1
0001CA8C                            
0001CA8C                            loc_18DAE:
0001CA8C 317C 00F0 0028             		move.w	#$F0,obSubtype(a0)
0001CA92 117C 000A 001F             		move.b	#10,obDelayAni(a0)	; set frame duration to	10 frames
0001CA98 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001CA9E 6000 0000                  		bra.w	loc_18FA2
0001CAA2                            ; ===========================================================================
0001CAA2                            
0001CAA2                            locret_18DC4:
0001CAA2 4E75                       		rts	
0001CAA4                            ; ===========================================================================
0001CAA4                            
0001CAA4                            loc_18DC6:	; Routine 4
0001CAA4 2268 003C                  		movea.l	$3C(a0),a1
0001CAA8 7000                       		moveq	#0,d0
0001CAAA 1028 003A                  		move.b	$3A(a0),d0
0001CAAE 9029 003A                  		sub.b	$3A(a1),d0
0001CAB2 6700                       		beq.s	loc_18E2A
0001CAB4 6400                       		bcc.s	loc_18DDA
0001CAB6 4400                       		neg.b	d0
0001CAB8                            
0001CAB8                            loc_18DDA:
0001CAB8 323C F7E8                  		move.w	#-$818,d1
0001CABC 343C FEEC                  		move.w	#-$114,d2
0001CAC0 0C00 0001                  		cmpi.b	#1,d0
0001CAC4 6700                       		beq.s	loc_18E00
0001CAC6 323C F6A0                  		move.w	#-$960,d1
0001CACA 343C FF0C                  		move.w	#-$F4,d2
0001CACE 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001CAD4 6D00                       		blt.s	loc_18E00
0001CAD6 323C F5E0                  		move.w	#-$A20,d1
0001CADA 343C FF80                  		move.w	#-$80,d2
0001CADE                            
0001CADE                            loc_18E00:
0001CADE 3141 0012                  		move.w	d1,obVelY(a0)
0001CAE2 3142 0010                  		move.w	d2,obVelX(a0)
0001CAE6 3028 0008                  		move.w	obX(a0),d0
0001CAEA 9068 0030                  		sub.w	$30(a0),d0
0001CAEE 6400                       		bcc.s	loc_18E16
0001CAF0 4468 0010                  		neg.w	obVelX(a0)
0001CAF4                            
0001CAF4                            loc_18E16:
0001CAF4 117C 0001 001A             		move.b	#1,obFrame(a0)
0001CAFA 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001CB00 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CB04 6000 0000                  		bra.w	loc_18EAA
0001CB08                            ; ===========================================================================
0001CB08                            
0001CB08                            loc_18E2A:
0001CB08 45F9 0000 0000             		lea	(word_19018).l,a2
0001CB0E 7000                       		moveq	#0,d0
0001CB10 1029 001A                  		move.b	obFrame(a1),d0
0001CB14 343C 0028                  		move.w	#$28,d2
0001CB18 3228 0008                  		move.w	obX(a0),d1
0001CB1C 9268 0030                  		sub.w	$30(a0),d1
0001CB20 6400                       		bcc.s	loc_18E48
0001CB22 4442                       		neg.w	d2
0001CB24 5440                       		addq.w	#2,d0
0001CB26                            
0001CB26                            loc_18E48:
0001CB26 D040                       		add.w	d0,d0
0001CB28 3228 0034                  		move.w	$34(a0),d1
0001CB2C D272 0000                  		add.w	(a2,d0.w),d1
0001CB30 3141 000C                  		move.w	d1,obY(a0)
0001CB34 D468 0030                  		add.w	$30(a0),d2
0001CB38 3142 0008                  		move.w	d2,obX(a0)
0001CB3C 4268 000E                  		clr.w	obY+2(a0)
0001CB40 4268 000A                  		clr.w	obX+2(a0)
0001CB44 5368 0028                  		subq.w	#1,obSubtype(a0)
0001CB48 6600                       		bne.s	loc_18E7A
0001CB4A 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001CB50 117C 0008 0024             		move.b	#8,obRoutine(a0)
0001CB56 4E75                       		rts	
0001CB58                            ; ===========================================================================
0001CB58                            
0001CB58                            loc_18E7A:
0001CB58 0C68 0078 0028             		cmpi.w	#$78,obSubtype(a0)
0001CB5E 6600                       		bne.s	loc_18E88
0001CB60 117C 0005 001F             		move.b	#5,obDelayAni(a0)
0001CB66                            
0001CB66                            loc_18E88:
0001CB66 0C68 003C 0028             		cmpi.w	#$3C,obSubtype(a0)
0001CB6C 6600                       		bne.s	loc_18E96
0001CB6E 117C 0002 001F             		move.b	#2,obDelayAni(a0)
0001CB74                            
0001CB74                            loc_18E96:
0001CB74 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001CB78 6E00                       		bgt.s	locret_18EA8
0001CB7A 0868 0000 001A             		bchg	#0,obFrame(a0)
0001CB80 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001CB86                            
0001CB86                            locret_18EA8:
0001CB86 4E75                       		rts	
0001CB88                            ; ===========================================================================
0001CB88                            
0001CB88                            loc_18EAA:	; Routine 6
0001CB88 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001CB8C 707A                       		moveq	#id_BossStarLight,d0
0001CB8E 7240                       		moveq	#$40,d1
0001CB90 743E                       		moveq	#$3E,d2
0001CB92                            
0001CB92                            loc_18EB4:
0001CB92 B011                       		cmp.b	(a1),d0
0001CB94 6700                       		beq.s	loc_18EC0
0001CB96 D2C1                       		adda.w	d1,a1
0001CB98 51CA FFF8                  		dbf	d2,loc_18EB4
0001CB9C                            
0001CB9C 6000                       		bra.s	loc_18F38
0001CB9E                            ; ===========================================================================
0001CB9E                            
0001CB9E                            loc_18EC0:
0001CB9E 3029 0008                  		move.w	obX(a1),d0
0001CBA2 3229 000C                  		move.w	obY(a1),d1
0001CBA6 3428 0008                  		move.w	obX(a0),d2
0001CBAA 3628 000C                  		move.w	obY(a0),d3
0001CBAE 45FA 0000                  		lea	byte_19022(pc),a2
0001CBB2 47FA 0000                  		lea	byte_19026(pc),a3
0001CBB6 181A                       		move.b	(a2)+,d4
0001CBB8 4884                       		ext.w	d4
0001CBBA D044                       		add.w	d4,d0
0001CBBC 181B                       		move.b	(a3)+,d4
0001CBBE 4884                       		ext.w	d4
0001CBC0 D444                       		add.w	d4,d2
0001CBC2 B440                       		cmp.w	d0,d2
0001CBC4 6500                       		bcs.s	loc_18F38
0001CBC6 181A                       		move.b	(a2)+,d4
0001CBC8 4884                       		ext.w	d4
0001CBCA D044                       		add.w	d4,d0
0001CBCC 181B                       		move.b	(a3)+,d4
0001CBCE 4884                       		ext.w	d4
0001CBD0 D444                       		add.w	d4,d2
0001CBD2 B042                       		cmp.w	d2,d0
0001CBD4 6500                       		bcs.s	loc_18F38
0001CBD6 181A                       		move.b	(a2)+,d4
0001CBD8 4884                       		ext.w	d4
0001CBDA D244                       		add.w	d4,d1
0001CBDC 181B                       		move.b	(a3)+,d4
0001CBDE 4884                       		ext.w	d4
0001CBE0 D644                       		add.w	d4,d3
0001CBE2 B641                       		cmp.w	d1,d3
0001CBE4 6500                       		bcs.s	loc_18F38
0001CBE6 181A                       		move.b	(a2)+,d4
0001CBE8 4884                       		ext.w	d4
0001CBEA D244                       		add.w	d4,d1
0001CBEC 181B                       		move.b	(a3)+,d4
0001CBEE 4884                       		ext.w	d4
0001CBF0 D644                       		add.w	d4,d3
0001CBF2 B243                       		cmp.w	d3,d1
0001CBF4 6500                       		bcs.s	loc_18F38
0001CBF6 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CBFA 4268 0028                  		clr.w	obSubtype(a0)
0001CBFE 4229 0020                  		clr.b	obColType(a1)
0001CC02 5329 0021                  		subq.b	#1,obColProp(a1)
0001CC06 6600                       		bne.s	loc_18F38
0001CC08 08E9 0007 0022             		bset	#7,obStatus(a1)
0001CC0E 4268 0010                  		clr.w	obVelX(a0)
0001CC12 4268 0012                  		clr.w	obVelY(a0)
0001CC16                            
0001CC16                            loc_18F38:
0001CC16 4A68 0012                  		tst.w	obVelY(a0)
0001CC1A 6A00                       		bpl.s	loc_18F5C
0001CC1C 4EB9 0000 F7E2             		jsr	(ObjectFall).l
0001CC22 3028 0034                  		move.w	$34(a0),d0
0001CC26 0440 002F                  		subi.w	#$2F,d0
0001CC2A B068 000C                  		cmp.w	obY(a0),d0
0001CC2E 6E00                       		bgt.s	loc_18F58
0001CC30 4EB9 0000 F7E2             		jsr	(ObjectFall).l
0001CC36                            
0001CC36                            loc_18F58:
0001CC36 6000 FF20                  		bra.w	loc_18E7A
0001CC3A                            ; ===========================================================================
0001CC3A                            
0001CC3A                            loc_18F5C:
0001CC3A 4EB9 0000 F7E2             		jsr	(ObjectFall).l
0001CC40 2268 003C                  		movea.l	$3C(a0),a1
0001CC44 45F9 0000 0000             		lea	(word_19018).l,a2
0001CC4A 7000                       		moveq	#0,d0
0001CC4C 1029 001A                  		move.b	obFrame(a1),d0
0001CC50 3228 0008                  		move.w	obX(a0),d1
0001CC54 9268 0030                  		sub.w	$30(a0),d1
0001CC58 6400                       		bcc.s	loc_18F7E
0001CC5A 5440                       		addq.w	#2,d0
0001CC5C                            
0001CC5C                            loc_18F7E:
0001CC5C D040                       		add.w	d0,d0
0001CC5E 3228 0034                  		move.w	$34(a0),d1
0001CC62 D272 0000                  		add.w	(a2,d0.w),d1
0001CC66 B268 000C                  		cmp.w	obY(a0),d1
0001CC6A 6ECA                       		bgt.s	loc_18F58
0001CC6C 2268 003C                  		movea.l	$3C(a0),a1
0001CC70 7202                       		moveq	#2,d1
0001CC72 4A68 0010                  		tst.w	obVelX(a0)
0001CC76 6B00                       		bmi.s	loc_18F9C
0001CC78 7200                       		moveq	#0,d1
0001CC7A                            
0001CC7A                            loc_18F9C:
0001CC7A 317C 0000 0028             		move.w	#0,obSubtype(a0)
0001CC80                            
0001CC80                            loc_18FA2:
0001CC80 1341 003A                  		move.b	d1,$3A(a1)
0001CC84 1141 003A                  		move.b	d1,$3A(a0)
0001CC88 B229 001A                  		cmp.b	obFrame(a1),d1
0001CC8C 6700                       		beq.s	loc_19008
0001CC8E 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001CC94 6700                       		beq.s	loc_19008
0001CC96 4229 0025                  		clr.b	ob2ndRout(a1)
0001CC9A 137C 0002 0024             		move.b	#2,obRoutine(a1)
0001CCA0 45F8 D000                  		lea	(v_objspace).w,a2
0001CCA4 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
0001CCAA 446A 0012                  		neg.w	obVelY(a2)
0001CCAE 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0001CCB4 6600                       		bne.s	loc_18FDC
0001CCB6 E0EA 0012                  		asr	obVelY(a2)
0001CCBA                            
0001CCBA                            loc_18FDC:
0001CCBA 08EA 0001 0022             		bset	#1,obStatus(a2)
0001CCC0 08AA 0003 0022             		bclr	#3,obStatus(a2)
0001CCC6 422A 003C                  		clr.b	$3C(a2)
0001CCCA 2F08                       		move.l	a0,-(sp)
0001CCCC 41D2                       		lea	(a2),a0
0001CCCE 4EB9 0001 62B0             		jsr	(Sonic_ChkRoll).l
0001CCD4 205F                       		movea.l	(sp)+,a0
0001CCD6 157C 0002 0024             		move.b	#2,obRoutine(a2)
0001CCE6                            
0001CCE6                            loc_19008:
0001CCE6 4268 0010                  		clr.w	obVelX(a0)
0001CCEA 4268 0012                  		clr.w	obVelY(a0)
0001CCEE 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CCF2 6000 FE64                  		bra.w	loc_18E7A
0001CCF6                            ; ===========================================================================
0001CCF6 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w -8, -$1C, -$2F, -$1C, -8
0001CD00                            		even
0001CD00 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001CD04                            		even
0001CD04 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001CD08                            		even
0001CD08                            ; ===========================================================================
0001CD08                            
0001CD08                            Obj7B_Explode:	; Routine 8
0001CD08 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001CD0C 4228 0024                  		clr.b	obRoutine(a0)
0001CD10 0C68 0020 0028             		cmpi.w	#$20,obSubtype(a0)
0001CD16 6700                       		beq.s	Obj7B_MakeFrag
0001CD18 4E75                       		rts	
0001CD1A                            ; ===========================================================================
0001CD1A                            
0001CD1A                            Obj7B_MakeFrag:
0001CD1A 3168 0034 000C             		move.w	$34(a0),obY(a0)
0001CD20 7203                       		moveq	#3,d1
0001CD22 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001CD26                            
0001CD26                            Obj7B_Loop:
0001CD26 4EB9 0000 FDC8             		jsr	(FindFreeObj).l
0001CD2C 6600                       		bne.s	loc_1909A
0001CD2E 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load shrapnel object
0001CD32 137C 000A 0024             		move.b	#$A,obRoutine(a1)
0001CD38 237C 0000 0000 0004        		move.l	#Map_BSBall,obMap(a1)
0001CD40 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001CD46 337C 0518 0002             		move.w	#$518,obGfx(a1)
0001CD4C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001CD52 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001CD58 335A 0010                  		move.w	(a2)+,obVelX(a1)
0001CD5C 335A 0012                  		move.w	(a2)+,obVelY(a1)
0001CD60 137C 0098 0020             		move.b	#$98,obColType(a1)
0001CD66 0029 0004 0001             		ori.b	#4,obRender(a1)
0001CD6C 08E9 0007 0001             		bset	#7,obRender(a1)
0001CD72 137C 000C 0014             		move.b	#$C,obActWid(a1)
0001CD78                            
0001CD78                            loc_1909A:
0001CD78 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001CD7C                            
0001CD7C 4E75                       		rts	
0001CD7E                            ; ===========================================================================
0001CD7E FF00 FCC0                  Obj7B_FragSpeed:dc.w -$100, -$340	; horizontal, vertical
0001CD82 FF60 FDC0                  		dc.w -$A0, -$240
0001CD86 0100 FCC0                  		dc.w $100, -$340
0001CD8A 00A0 FDC0                  		dc.w $A0, -$240
0001CD8E                            ; ===========================================================================
0001CD8E                            
0001CD8E                            Obj7B_MoveFrag:	; Routine $A
0001CD8E 4EB9 0000 F81A             		jsr	(SpeedToPos).l
0001CD94 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001CD9A 3168 000C 0034             		move.w	obY(a0),$34(a0)
0001CDA0 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001CDA6 7004                       		moveq	#4,d0
0001CDA8 C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001CDAC E448                       		lsr.w	#2,d0
0001CDAE 1140 001A                  		move.b	d0,obFrame(a0)
0001CDB2 4A28 0001                  		tst.b	1(a0)
0001CDB6 6A00 F7CA                  		bpl.w	Obj7A_Delete
0001CDBA 4E75                       		rts	
0001CDBA 4E75                       		rts	
0001CDBC                            Map_BSBall:	include	"_maps\SLZ Boss Spikeball.asm"
0001CDBC                            ; ---------------------------------------------------------------------------
0001CDBC                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001CDBC                            ; ---------------------------------------------------------------------------
0001CDBC                            Map_BSBall_internal:
0001CDBC 0000                       		dc.w @fireball1-Map_BSBall_internal
0001CDBE 0000                       		dc.w @fireball2-Map_BSBall_internal
0001CDC0 01                         @fireball1:	dc.b 1
0001CDC1 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001CDC6 01                         @fireball2:	dc.b 1
0001CDC7 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001CDCC                            		even
0001CDCC                            		even
0001CDCC                            		include	"_incObj\75 Boss - Spring Yard.asm"
0001CDCC                            ; ---------------------------------------------------------------------------
0001CDCC                            ; Object 75 - Eggman (SYZ)
0001CDCC                            ; ---------------------------------------------------------------------------
0001CDCC                            
0001CDCC                            BossSpringYard:
0001CDCC 7000                       		moveq	#0,d0
0001CDCE 1028 0024                  		move.b	obRoutine(a0),d0
0001CDD2 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001CDD6 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001CDDA                            ; ===========================================================================
0001CDDA 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001CDDC 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001CDDE 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001CDE0 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001CDE2 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001CDE4                            
0001CDE4 0200 0280                  Obj75_ObjData:	dc.b 2,	0, $02, $80		; routine number, animation, priority (high and low bytes)
0001CDE8 0401 0280                  		dc.b 4,	1, $02, $80
0001CDEC 0607 0280                  		dc.b 6,	7, $02, $80
0001CDF0 0800 0280                  		dc.b 8,	0, $02, $80
0001CDF4                            ; ===========================================================================
0001CDF4                            
0001CDF4                            Obj75_Main:	; Routine 0
0001CDF4 317C 2DB0 0008             		move.w	#$2DB0,obX(a0)
0001CDFA 317C 04DA 000C             		move.w	#$4DA,obY(a0)
0001CE00 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001CE06 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001CE0C 117C 000F 0020             		move.b	#$F,obColType(a0)
0001CE12 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001CE18 45FA FFCA                  		lea	Obj75_ObjData(pc),a2
0001CE1C 2248                       		movea.l	a0,a1
0001CE1E 7203                       		moveq	#3,d1
0001CE20 6000                       		bra.s	Obj75_LoadBoss
0001CE22                            ; ===========================================================================
0001CE22                            
0001CE22                            Obj75_Loop:
0001CE22 4EB9 0000 FDDE             		jsr	(FindNextFreeObj).l
0001CE28 6600                       		bne.s	Obj75_ShipMain
0001CE2A 12BC 0075                  		move.b	#id_BossSpringYard,(a1)
0001CE2E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001CE34 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001CE3A                            
0001CE3A                            Obj75_LoadBoss:
0001CE3A 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001CE40 4229 0025                  		clr.b	ob2ndRout(a1)
0001CE44 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001CE48 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001CE4C 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001CE50 237C 0001 B9A6 0004        		move.l	#Map_Eggman,obMap(a1)
0001CE58 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001CE5E 137C 0004 0001             		move.b	#4,obRender(a1)
0001CE64 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001CE6A 2348 0034                  		move.l	a0,$34(a1)
0001CE6E 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001CE72                            
0001CE72                            Obj75_ShipMain:	; Routine 2
0001CE72 7000                       		moveq	#0,d0
0001CE74 1028 0025                  		move.b	ob2ndRout(a0),d0
0001CE78 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001CE7C 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001CE80 43F9 0001 B956             		lea	(Ani_Eggman).l,a1
0001CE86 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
0001CE8C 7003                       		moveq	#3,d0
0001CE8E C028 0022                  		and.b	obStatus(a0),d0
0001CE92 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001CE98 8128 0001                  		or.b	d0,obRender(a0)
0001CE9C 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001CEA2                            ; ===========================================================================
0001CEA2 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001CEA6 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001CEAA 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001CEAE                            ; ===========================================================================
0001CEAE                            
0001CEAE                            loc_191CC:
0001CEAE 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001CEB4 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001CEBA 6400                       		bcc.s	loc_191DE
0001CEBC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CEC0                            
0001CEC0                            loc_191DE:
0001CEC0 1028 003F                  		move.b	$3F(a0),d0
0001CEC4 5428 003F                  		addq.b	#2,$3F(a0)
0001CEC8 4EB9 0000 3D28             		jsr	(CalcSine).l
0001CECE E440                       		asr.w	#2,d0
0001CED0 3140 0012                  		move.w	d0,obVelY(a0)
0001CED4                            
0001CED4                            loc_191F2:
0001CED4 6100 E66C                  		bsr.w	BossMove
0001CED8 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001CEDE 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001CEE4                            
0001CEE4                            loc_19202:
0001CEE4 3028 0008                  		move.w	8(a0),d0
0001CEE8 0440 2C00                  		subi.w	#$2C00,d0
0001CEEC EA48                       		lsr.w	#5,d0
0001CEEE 1140 0034                  		move.b	d0,$34(a0)
0001CEF2 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001CEF8 6400                       		bcc.s	locret_19256
0001CEFA 4A28 0022                  		tst.b	obStatus(a0)
0001CEFE 6B00                       		bmi.s	loc_19258
0001CF00 4A28 0020                  		tst.b	obColType(a0)
0001CF04 6600                       		bne.s	locret_19256
0001CF06 4A28 003E                  		tst.b	$3E(a0)
0001CF0A 6600                       		bne.s	loc_1923A
0001CF0C 117C 0020 003E             		move.b	#$20,$3E(a0)
0001CF1C                            
0001CF1C                            loc_1923A:
0001CF1C 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001CF20 7000                       		moveq	#0,d0
0001CF22 4A51                       		tst.w	(a1)
0001CF24 6600                       		bne.s	loc_19248
0001CF26 303C 0EEE                  		move.w	#cWhite,d0
0001CF2A                            
0001CF2A                            loc_19248:
0001CF2A 3280                       		move.w	d0,(a1)
0001CF2C 5328 003E                  		subq.b	#1,$3E(a0)
0001CF30 6600                       		bne.s	locret_19256
0001CF32 117C 000F 0020             		move.b	#$F,obColType(a0)
0001CF38                            
0001CF38                            locret_19256:
0001CF38 4E75                       		rts	
0001CF3A                            ; ===========================================================================
0001CF3A                            
0001CF3A                            loc_19258:
0001CF3A 7064                       		moveq	#100,d0
0001CF3C 6100 0000                  		bsr.w	AddPoints
0001CF40 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001CF46 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001CF4C 4268 0010                  		clr.w	obVelX(a0)
0001CF50 4E75                       		rts	
0001CF52                            ; ===========================================================================
0001CF52                            
0001CF52                            loc_19270:
0001CF52 3028 0030                  		move.w	$30(a0),d0
0001CF56 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001CF5C 0828 0000 0022             		btst	#0,obStatus(a0)
0001CF62 6600                       		bne.s	loc_1928E
0001CF64 4468 0010                  		neg.w	obVelX(a0)
0001CF68 0C40 2C08                  		cmpi.w	#$2C08,d0
0001CF6C 6E00                       		bgt.s	loc_1929E
0001CF6E 6000                       		bra.s	loc_19294
0001CF70                            ; ===========================================================================
0001CF70                            
0001CF70                            loc_1928E:
0001CF70 0C40 2D38                  		cmpi.w	#$2D38,d0
0001CF74 6D00                       		blt.s	loc_1929E
0001CF76                            
0001CF76                            loc_19294:
0001CF76 0868 0000 0022             		bchg	#0,obStatus(a0)
0001CF7C 4228 003D                  		clr.b	$3D(a0)
0001CF80                            
0001CF80                            loc_1929E:
0001CF80 0440 2C10                  		subi.w	#$2C10,d0
0001CF84 0240 001F                  		andi.w	#$1F,d0
0001CF88 0440 001F                  		subi.w	#$1F,d0
0001CF8C 6A00                       		bpl.s	loc_192AE
0001CF8E 4440                       		neg.w	d0
0001CF90                            
0001CF90                            loc_192AE:
0001CF90 5340                       		subq.w	#1,d0
0001CF92 6E00                       		bgt.s	loc_192E8
0001CF94 4A28 003D                  		tst.b	$3D(a0)
0001CF98 6600                       		bne.s	loc_192E8
0001CF9A 3238 D008                  		move.w	(v_player+obX).w,d1
0001CF9E 0441 2C00                  		subi.w	#$2C00,d1
0001CFA2 EA41                       		asr.w	#5,d1
0001CFA4 B228 0034                  		cmp.b	$34(a0),d1
0001CFA8 6600                       		bne.s	loc_192E8
0001CFAA 7000                       		moveq	#0,d0
0001CFAC 1028 0034                  		move.b	$34(a0),d0
0001CFB0 EB40                       		asl.w	#5,d0
0001CFB2 0640 2C10                  		addi.w	#$2C10,d0
0001CFB6 3140 0030                  		move.w	d0,$30(a0)
0001CFBA 6100 0000                  		bsr.w	Obj75_FindBlocks
0001CFBE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CFC2 4268 0028                  		clr.w	obSubtype(a0)
0001CFC6 4268 0010                  		clr.w	obVelX(a0)
0001CFCA                            
0001CFCA                            loc_192E8:
0001CFCA 6000 FEF4                  		bra.w	loc_191DE
0001CFCE                            ; ===========================================================================
0001CFCE                            
0001CFCE                            loc_192EC:
0001CFCE 7000                       		moveq	#0,d0
0001CFD0 1028 0028                  		move.b	obSubtype(a0),d0
0001CFD4 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001CFD8 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001CFDC                            ; ===========================================================================
0001CFDC 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001CFDE 0000                       		dc.w loc_19348-off_192FA
0001CFE0 0000                       		dc.w loc_1938E-off_192FA
0001CFE2 0000                       		dc.w loc_193D0-off_192FA
0001CFE4                            ; ===========================================================================
0001CFE4                            
0001CFE4                            loc_19302:
0001CFE4 317C 0180 0012             		move.w	#$180,obVelY(a0)
0001CFEA 3028 0038                  		move.w	$38(a0),d0
0001CFEE 0C40 0556                  		cmpi.w	#$556,d0
0001CFF2 6500                       		bcs.s	loc_19344
0001CFF4 317C 0556 0038             		move.w	#$556,$38(a0)
0001CFFA 4268 003C                  		clr.w	$3C(a0)
0001CFFE 70FF                       		moveq	#-1,d0
0001D000 3028 0036                  		move.w	$36(a0),d0
0001D004 6700                       		beq.s	loc_1933C
0001D006 2240                       		movea.l	d0,a1
0001D008 137C 00FF 0029             		move.b	#-1,$29(a1)
0001D00E 117C 00FF 0029             		move.b	#-1,$29(a0)
0001D014 2348 0034                  		move.l	a0,$34(a1)
0001D018 317C 0032 003C             		move.w	#$32,$3C(a0)
0001D01E                            
0001D01E                            loc_1933C:
0001D01E 4268 0012                  		clr.w	obVelY(a0)
0001D022 5428 0028                  		addq.b	#2,obSubtype(a0)
0001D026                            
0001D026                            loc_19344:
0001D026 6000 FEAC                  		bra.w	loc_191F2
0001D02A                            ; ===========================================================================
0001D02A                            
0001D02A                            loc_19348:
0001D02A 5368 003C                  		subq.w	#1,$3C(a0)
0001D02E 6A00                       		bpl.s	loc_19366
0001D030 5428 0028                  		addq.b	#2,obSubtype(a0)
0001D034 317C F800 0012             		move.w	#-$800,obVelY(a0)
0001D03A 4A68 0036                  		tst.w	$36(a0)
0001D03E 6600                       		bne.s	loc_19362
0001D040 E0E8 0012                  		asr	obVelY(a0)
0001D044                            
0001D044                            loc_19362:
0001D044 7000                       		moveq	#0,d0
0001D046 6000                       		bra.s	loc_1937C
0001D048                            ; ===========================================================================
0001D048                            
0001D048                            loc_19366:
0001D048 7000                       		moveq	#0,d0
0001D04A 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001D050 6E00                       		bgt.s	loc_1937C
0001D052 7002                       		moveq	#2,d0
0001D054 0828 0001 003D             		btst	#1,$3D(a0)
0001D05A 6700                       		beq.s	loc_1937C
0001D05C 4440                       		neg.w	d0
0001D05E                            
0001D05E                            loc_1937C:
0001D05E D068 0038                  		add.w	$38(a0),d0
0001D062 3140 000C                  		move.w	d0,obY(a0)
0001D066 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001D06C 6000 FE76                  		bra.w	loc_19202
0001D070                            ; ===========================================================================
0001D070                            
0001D070                            loc_1938E:
0001D070 303C 04DA                  		move.w	#$4DA,d0
0001D074 4A68 0036                  		tst.w	$36(a0)
0001D078 6700                       		beq.s	loc_1939C
0001D07A 0440 0018                  		subi.w	#$18,d0
0001D07E                            
0001D07E                            loc_1939C:
0001D07E B068 0038                  		cmp.w	$38(a0),d0
0001D082 6D00                       		blt.s	loc_193BE
0001D084 317C 0008 003C             		move.w	#8,$3C(a0)
0001D08A 4A68 0036                  		tst.w	$36(a0)
0001D08E 6700                       		beq.s	loc_193B4
0001D090 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001D096                            
0001D096                            loc_193B4:
0001D096 5428 0028                  		addq.b	#2,obSubtype(a0)
0001D09A 4268 0012                  		clr.w	obVelY(a0)
0001D09E 6000                       		bra.s	loc_193CC
0001D0A0                            ; ===========================================================================
0001D0A0                            
0001D0A0                            loc_193BE:
0001D0A0 0C68 FFC0 0012             		cmpi.w	#-$40,obVelY(a0)
0001D0A6 6C00                       		bge.s	loc_193CC
0001D0A8 0668 000C 0012             		addi.w	#$C,obVelY(a0)
0001D0AE                            
0001D0AE                            loc_193CC:
0001D0AE 6000 FE24                  		bra.w	loc_191F2
0001D0B2                            ; ===========================================================================
0001D0B2                            
0001D0B2                            loc_193D0:
0001D0B2 5368 003C                  		subq.w	#1,$3C(a0)
0001D0B6 6E00                       		bgt.s	loc_19406
0001D0B8 6B00                       		bmi.s	loc_193EE
0001D0BA 70FF                       		moveq	#-1,d0
0001D0BC 3028 0036                  		move.w	$36(a0),d0
0001D0C0 6700                       		beq.s	loc_193E8
0001D0C2 2240                       		movea.l	d0,a1
0001D0C4 137C 000A 0029             		move.b	#$A,$29(a1)
0001D0CA                            
0001D0CA                            loc_193E8:
0001D0CA 4268 0036                  		clr.w	$36(a0)
0001D0CE 6000                       		bra.s	loc_19406
0001D0D0                            ; ===========================================================================
0001D0D0                            
0001D0D0                            loc_193EE:
0001D0D0 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001D0D6 6600                       		bne.s	loc_19406
0001D0D8 4228 0029                  		clr.b	$29(a0)
0001D0DC 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001D0E0 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001D0E6 6000                       		bra.s	loc_19446
0001D0E8                            ; ===========================================================================
0001D0E8                            
0001D0E8                            loc_19406:
0001D0E8 7001                       		moveq	#1,d0
0001D0EA 4A68 0036                  		tst.w	$36(a0)
0001D0EE 6700                       		beq.s	loc_19410
0001D0F0 7002                       		moveq	#2,d0
0001D0F2                            
0001D0F2                            loc_19410:
0001D0F2 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001D0F8 6700                       		beq.s	loc_19424
0001D0FA 6D00                       		blt.s	loc_1941C
0001D0FC 4440                       		neg.w	d0
0001D0FE                            
0001D0FE                            loc_1941C:
0001D0FE 4A68 0036                  		tst.w	$36(a0)
0001D102 D168 0038                  		add.w	d0,$38(a0)
0001D106                            
0001D106                            loc_19424:
0001D106 7000                       		moveq	#0,d0
0001D108 4A68 0036                  		tst.w	$36(a0)
0001D10C 6700                       		beq.s	loc_19438
0001D10E 7002                       		moveq	#2,d0
0001D110 0828 0000 003D             		btst	#0,$3D(a0)
0001D116 6700                       		beq.s	loc_19438
0001D118 4440                       		neg.w	d0
0001D11A                            
0001D11A                            loc_19438:
0001D11A D068 0038                  		add.w	$38(a0),d0
0001D11E 3140 000C                  		move.w	d0,obY(a0)
0001D122 3168 0030 0008             		move.w	$30(a0),8(a0)
0001D128                            
0001D128                            loc_19446:
0001D128 6000 FDBA                  		bra.w	loc_19202
0001D12C                            
0001D12C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D12C                            
0001D12C                            
0001D12C                            Obj75_FindBlocks:
0001D12C 4268 0036                  		clr.w	$36(a0)
0001D130 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001D134 703E                       		moveq	#$3E,d0
0001D136 7276                       		moveq	#$76,d1
0001D138 1428 0034                  		move.b	$34(a0),d2
0001D13C                            
0001D13C                            Obj75_FindLoop:
0001D13C B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001D13E 6600                       		bne.s	loc_1946A	; if not, branch
0001D140 B429 0028                  		cmp.b	obSubtype(a1),d2
0001D144 6600                       		bne.s	loc_1946A
0001D146 3149 0036                  		move.w	a1,$36(a0)
0001D14A 6000                       		bra.s	locret_19472
0001D14C                            ; ===========================================================================
0001D14C                            
0001D14C                            loc_1946A:
0001D14C 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001D150 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001D154                            
0001D154                            locret_19472:
0001D154 4E75                       		rts	
0001D156                            ; End of function Obj75_FindBlocks
0001D156                            
0001D156                            ; ===========================================================================
0001D156                            
0001D156                            loc_19474:
0001D156 5368 003C                  		subq.w	#1,$3C(a0)
0001D15A 6B00                       		bmi.s	loc_1947E
0001D15C 6000 E3A2                  		bra.w	BossDefeated
0001D160                            ; ===========================================================================
0001D160                            
0001D160                            loc_1947E:
0001D160 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001D164 4268 0012                  		clr.w	obVelY(a0)
0001D168 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D16E 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001D174 4268 0010                  		clr.w	obVelX(a0)
0001D178 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001D17E 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001D182 6600                       		bne.s	loc_194A8
0001D184 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001D18A                            
0001D18A                            loc_194A8:
0001D18A 6000 FD58                  		bra.w	loc_19202
0001D18E                            ; ===========================================================================
0001D18E                            
0001D18E                            loc_194AC:
0001D18E 5268 003C                  		addq.w	#1,$3C(a0)
0001D192 6700                       		beq.s	loc_194BC
0001D194 6A00                       		bpl.s	loc_194C2
0001D196 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001D19C 6000                       		bra.s	loc_194EE
0001D19E                            ; ===========================================================================
0001D19E                            
0001D19E                            loc_194BC:
0001D19E 4268 0012                  		clr.w	obVelY(a0)
0001D1A2 6000                       		bra.s	loc_194EE
0001D1A4                            ; ===========================================================================
0001D1A4                            
0001D1A4                            loc_194C2:
0001D1A4 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001D1AA 6500                       		bcs.s	loc_194DA
0001D1AC 6700                       		beq.s	loc_194E0
0001D1AE 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001D1B4 6500                       		bcs.s	loc_194EE
0001D1B6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001D1BA 6000                       		bra.s	loc_194EE
0001D1BC                            ; ===========================================================================
0001D1BC                            
0001D1BC                            loc_194DA:
0001D1BC 5168 0012                  		subq.w	#8,obVelY(a0)
0001D1C0 6000                       		bra.s	loc_194EE
0001D1C2                            ; ===========================================================================
0001D1C2                            
0001D1C2                            loc_194E0:
0001D1C2 4268 0012                  		clr.w    obVelY(a0)
0001D1C6 4A38 FE2D                          	tst.b     (v_invinc).w
0001D1CA 6600                               	bne.s   @boss_invinc
0001D1CC                            
0001D1CC 1038 F5C6                          	move.b   (v_Saved_music),d0
0001D1D0 6000 0000                          	bra.w      @boss_play
0001D1D4                            
0001D1D4                            @boss_invinc:
0001D1D4 103C 0000                          	move.b #bgm_Invincible,d0
0001D1D8                            
0001D1D8                            @boss_play:
0001D1D8 4EB8 12F8                          	jsr PlaySound
0001D1DC                            
0001D1DC                            loc_194EE:
0001D1DC 6000 FCF6                  		bra.w	loc_191F2
0001D1E0                            ; ===========================================================================
0001D1E0                            
0001D1E0                            loc_194F2:
0001D1E0 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001D1E6 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001D1EC 0C78 2D40 F72A             		cmpi.w	#$2D40,(v_limitright2).w
0001D1F2 6400                       		bcc.s	loc_1950C
0001D1F4 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001D1F8 6000                       		bra.s	loc_19512
0001D1FA                            ; ===========================================================================
0001D1FA                            
0001D1FA                            loc_1950C:
0001D1FA 4A28 0001                  		tst.b	obRender(a0)
0001D1FE 6A00                       		bpl.s	Obj75_ShipDelete
0001D200                            
0001D200                            loc_19512:
0001D200 6100 E340                  		bsr.w	BossMove
0001D204 6000 FCBA                  		bra.w	loc_191DE
0001D208                            ; ===========================================================================
0001D208                            
0001D208                            Obj75_ShipDelete:
0001D208 4EF9 0000 F86E             		jmp	(DeleteObject).l
0001D20E                            ; ===========================================================================
0001D20E                            
0001D20E                            Obj75_FaceMain:	; Routine 4
0001D20E 7201                       		moveq	#1,d1
0001D210 2268 0034                  		movea.l	$34(a0),a1
0001D214 7000                       		moveq	#0,d0
0001D216 1029 0025                  		move.b	ob2ndRout(a1),d0
0001D21A 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001D21E 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001D222 1141 001C                  		move.b	d1,obAnim(a0)
0001D226 1010                       		move.b	(a0),d0
0001D228 B011                       		cmp.b	(a1),d0
0001D22A 6600                       		bne.s	Obj75_FaceDelete
0001D22C 6000                       		bra.s	loc_195BE
0001D22E                            ; ===========================================================================
0001D22E                            
0001D22E                            Obj75_FaceDelete:
0001D22E 4EF9 0000 F86E             		jmp	(DeleteObject).l
0001D234                            ; ===========================================================================
0001D234 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001D238 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001D23C 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001D240                            ; ===========================================================================
0001D240                            
0001D240                            loc_19552:
0001D240 720A                       		moveq	#$A,d1
0001D242 4E75                       		rts	
0001D244                            ; ===========================================================================
0001D244                            
0001D244                            loc_19556:
0001D244 7206                       		moveq	#6,d1
0001D246 4E75                       		rts	
0001D248                            ; ===========================================================================
0001D248                            
0001D248                            loc_1955A:
0001D248 7000                       		moveq	#0,d0
0001D24A 1029 0028                  		move.b	obSubtype(a1),d0
0001D24E 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001D252 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001D256                            ; ===========================================================================
0001D256 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001D25A 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001D25E                            ; ===========================================================================
0001D25E                            
0001D25E                            loc_19570:
0001D25E 6000                       		bra.s	loc_19574
0001D260                            ; ===========================================================================
0001D260                            
0001D260                            loc_19572:
0001D260 7206                       		moveq	#6,d1
0001D262                            
0001D262                            loc_19574:
0001D262 4A29 0020                  		tst.b	obColType(a1)
0001D266 6600                       		bne.s	loc_1957E
0001D268 7205                       		moveq	#5,d1
0001D26A 4E75                       		rts	
0001D26C                            ; ===========================================================================
0001D26C                            
0001D26C                            loc_1957E:
0001D26C 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001D272 6500                       		bcs.s	locret_19588
0001D274 7204                       		moveq	#4,d1
0001D276                            
0001D276                            locret_19588:
0001D276 4E75                       		rts	
0001D278                            ; ===========================================================================
0001D278                            
0001D278                            Obj75_FlameMain:; Routine 6
0001D278 117C 0007 001C             		move.b	#7,obAnim(a0)
0001D27E 2268 0034                  		movea.l	$34(a0),a1
0001D282 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001D288 6600                       		bne.s	loc_195AA
0001D28A 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001D290 4A28 0001                  		tst.b	1(a0)
0001D294 6A00                       		bpl.s	Obj75_FlameDelete
0001D296 6000                       		bra.s	loc_195B6
0001D298                            ; ===========================================================================
0001D298                            
0001D298                            loc_195AA:
0001D298 4A69 0010                  		tst.w	obVelX(a1)
0001D29C 6700                       		beq.s	loc_195B6
0001D29E 117C 0008 001C             		move.b	#8,obAnim(a0)
0001D2A4                            
0001D2A4                            loc_195B6:
0001D2A4 6000                       		bra.s	loc_195BE
0001D2A6                            ; ===========================================================================
0001D2A6                            
0001D2A6                            Obj75_FlameDelete:
0001D2A6 4EF9 0000 F86E             		jmp	(DeleteObject).l
0001D2AC                            ; ===========================================================================
0001D2AC                            
0001D2AC                            loc_195BE:
0001D2AC 43F9 0001 B956             		lea	(Ani_Eggman).l,a1
0001D2B2 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
0001D2B8 2268 0034                  		movea.l	$34(a0),a1
0001D2BC 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D2C2 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D2C8                            
0001D2C8                            loc_195DA:
0001D2C8 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001D2CE 7003                       		moveq	#3,d0
0001D2D0 C028 0022                  		and.b	obStatus(a0),d0
0001D2D4 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001D2DA 8128 0001                  		or.b	d0,obRender(a0)
0001D2DE 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001D2E4                            ; ===========================================================================
0001D2E4                            
0001D2E4                            Obj75_SpikeMain:; Routine 8
0001D2E4 217C 0001 BA96 0004        		move.l	#Map_BossItems,obMap(a0)
0001D2EC 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001D2F2 117C 0005 001A             		move.b	#5,obFrame(a0)
0001D2F8 2268 0034                  		movea.l	$34(a0),a1
0001D2FC 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001D302 6600                       		bne.s	loc_1961C
0001D304 4A28 0001                  		tst.b	obRender(a0)
0001D308 6A00                       		bpl.s	Obj75_SpikeDelete
0001D30A                            
0001D30A                            loc_1961C:
0001D30A 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D310 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D316 3028 003C                  		move.w	$3C(a0),d0
0001D31A 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001D320 6600                       		bne.s	loc_19652
0001D322 0C29 0006 0028             		cmpi.b	#6,obSubtype(a1)
0001D328 6700                       		beq.s	loc_1964C
0001D32A 4A29 0028                  		tst.b	obSubtype(a1)
0001D32E 6600                       		bne.s	loc_19658
0001D330 0C40 0094                  		cmpi.w	#$94,d0
0001D334 6C00                       		bge.s	loc_19658
0001D336 5E40                       		addq.w	#7,d0
0001D338 6000                       		bra.s	loc_19658
0001D33A                            ; ===========================================================================
0001D33A                            
0001D33A                            loc_1964C:
0001D33A 4A69 003C                  		tst.w	$3C(a1)
0001D33E 6A00                       		bpl.s	loc_19658
0001D340                            
0001D340                            loc_19652:
0001D340 4A40                       		tst.w	d0
0001D342 6F00                       		ble.s	loc_19658
0001D344 5B40                       		subq.w	#5,d0
0001D346                            
0001D346                            loc_19658:
0001D346 3140 003C                  		move.w	d0,$3C(a0)
0001D34A E440                       		asr.w	#2,d0
0001D34C D168 000C                  		add.w	d0,obY(a0)
0001D350 117C 0008 0014             		move.b	#8,obActWid(a0)
0001D356 117C 000C 0016             		move.b	#$C,obHeight(a0)
0001D35C 4228 0020                  		clr.b	obColType(a0)
0001D360 2268 0034                  		movea.l	$34(a0),a1
0001D364 4A29 0020                  		tst.b	obColType(a1)
0001D368 6700                       		beq.s	loc_19688
0001D36A 4A29 0029                  		tst.b	$29(a1)
0001D36E 6600                       		bne.s	loc_19688
0001D370 117C 0084 0020             		move.b	#$84,obColType(a0)
0001D376                            
0001D376                            loc_19688:
0001D376 6000 FF50                  		bra.w	loc_195DA
0001D37A                            ; ===========================================================================
0001D37A                            
0001D37A                            Obj75_SpikeDelete:
0001D37A 4EF9 0000 F86E             		jmp	(DeleteObject).l
0001D37A 4EF9 0000 F86E             		jmp	(DeleteObject).l
0001D380                            		include	"_incObj\76 SYZ Boss Blocks.asm"
0001D380                            ; ---------------------------------------------------------------------------
0001D380                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001D380                            ; ---------------------------------------------------------------------------
0001D380                            
0001D380                            BossBlock:
0001D380 7000                       		moveq	#0,d0
0001D382 1028 0024                  		move.b	obRoutine(a0),d0
0001D386 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001D38A 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001D38E                            ; ===========================================================================
0001D38E 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001D390 0000                       		dc.w Obj76_Action-Obj76_Index
0001D392 0000                       		dc.w loc_19762-Obj76_Index
0001D394                            ; ===========================================================================
0001D394                            
0001D394                            Obj76_Main:	; Routine 0
0001D394 7800                       		moveq	#0,d4
0001D396 3A3C 2C10                  		move.w	#$2C10,d5
0001D39A 7C09                       		moveq	#9,d6
0001D39C 43D0                       		lea	(a0),a1
0001D39E 6000                       		bra.s	Obj76_MakeBlock
0001D3A0                            ; ===========================================================================
0001D3A0                            
0001D3A0                            Obj76_Loop:
0001D3A0 4EB9 0000 FDC8             		jsr	(FindFreeObj).l
0001D3A6 6600                       		bne.s	Obj76_ExitLoop
0001D3A8                            
0001D3A8                            Obj76_MakeBlock:
0001D3A8 12BC 0076                  		move.b	#id_BossBlock,(a1)
0001D3AC 237C 0000 0000 0004        		move.l	#Map_BossBlock,obMap(a1)
0001D3B4 337C 4000 0002             		move.w	#$4000,obGfx(a1)
0001D3BA 137C 0004 0001             		move.b	#4,obRender(a1)
0001D3C0 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001D3C6 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001D3CC 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001D3D2 3345 0008                  		move.w	d5,obX(a1)	; set x-position
0001D3D6 337C 0582 000C             		move.w	#$582,obY(a1)
0001D3DC 3344 0028                  		move.w	d4,obSubtype(a1)
0001D3E0 0644 0101                  		addi.w	#$101,d4
0001D3E4 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001D3E8 5429 0024                  		addq.b	#2,obRoutine(a1)
0001D3EC 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001D3F0                            
0001D3F0                            Obj76_ExitLoop:
0001D3F0 4E75                       		rts	
0001D3F2                            ; ===========================================================================
0001D3F2                            
0001D3F2                            Obj76_Action:	; Routine 2
0001D3F2 1028 0029                  		move.b	$29(a0),d0
0001D3F6 B028 0028                  		cmp.b	obSubtype(a0),d0
0001D3FA 6700                       		beq.s	Obj76_Solid
0001D3FC 4A00                       		tst.b	d0
0001D3FE 6B00                       		bmi.s	loc_19718
0001D400                            
0001D400                            loc_19712:
0001D400 6100 0000                  		bsr.w	Obj76_Break
0001D404 6000                       		bra.s	Obj76_Display
0001D406                            ; ===========================================================================
0001D406                            
0001D406                            loc_19718:
0001D406 2268 0034                  		movea.l	$34(a0),a1
0001D40A 4A29 0021                  		tst.b	obColProp(a1)
0001D40E 67F0                       		beq.s	loc_19712
0001D410 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D416 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D41C 0668 002C 000C             		addi.w	#$2C,obY(a0)
0001D422 B2C8                       		cmpa.w	a0,a1
0001D424 6500                       		bcs.s	Obj76_Display
0001D426 3029 0012                  		move.w	obVelY(a1),d0
0001D42A 48C0                       		ext.l	d0
0001D42C E080                       		asr.l	#8,d0
0001D42E D168 000C                  		add.w	d0,obY(a0)
0001D432 6000                       		bra.s	Obj76_Display
0001D434                            ; ===========================================================================
0001D434                            
0001D434                            Obj76_Solid:
0001D434 323C 001B                  		move.w	#$1B,d1
0001D438 343C 0010                  		move.w	#$10,d2
0001D43C 363C 0011                  		move.w	#$11,d3
0001D440 3828 0008                  		move.w	obX(a0),d4
0001D444 4EB9 0001 1D7A             		jsr	(SolidObject).l
0001D44A                            
0001D44A                            Obj76_Display:
0001D44A 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001D450                            ; ===========================================================================
0001D450                            
0001D450                            loc_19762:	; Routine 4
0001D450 4A28 0001                  		tst.b	obRender(a0)
0001D454 6A00                       		bpl.s	Obj76_Delete
0001D456 4EB9 0000 F7E2             		jsr	(ObjectFall).l
0001D45C 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001D462                            ; ===========================================================================
0001D462                            
0001D462                            Obj76_Delete:
0001D462 4EF9 0000 F86E             		jmp	(DeleteObject).l
0001D468                            
0001D468                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D468                            
0001D468                            
0001D468                            Obj76_Break:
0001D468 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001D46C 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001D470 7801                       		moveq	#1,d4
0001D472 7203                       		moveq	#3,d1
0001D474 7438                       		moveq	#$38,d2
0001D476 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D47A 117C 0008 0014             		move.b	#8,obActWid(a0)
0001D480 117C 0008 0016             		move.b	#8,obHeight(a0)
0001D486 43D0                       		lea	(a0),a1
0001D488 6000                       		bra.s	Obj76_MakeFrag
0001D48A                            ; ===========================================================================
0001D48A                            
0001D48A                            Obj76_LoopFrag:
0001D48A 4EB9 0000 FDDE             		jsr	(FindNextFreeObj).l
0001D490 6600                       		bne.s	loc_197D4
0001D492                            
0001D492                            Obj76_MakeFrag:
0001D492 45D0                       		lea	(a0),a2
0001D494 47D1                       		lea	(a1),a3
0001D496 7603                       		moveq	#3,d3
0001D498                            
0001D498                            loc_197AA:
0001D498 26DA                       		move.l	(a2)+,(a3)+
0001D49A 26DA                       		move.l	(a2)+,(a3)+
0001D49C 26DA                       		move.l	(a2)+,(a3)+
0001D49E 26DA                       		move.l	(a2)+,(a3)+
0001D4A0 51CB FFF6                  		dbf	d3,loc_197AA
0001D4A4                            
0001D4A4 335C 0010                  		move.w	(a4)+,obVelX(a1)
0001D4A8 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001D4AC 361D                       		move.w	(a5)+,d3
0001D4AE D769 0008                  		add.w	d3,obX(a1)
0001D4B2 361D                       		move.w	(a5)+,d3
0001D4B4 D769 000C                  		add.w	d3,obY(a1)
0001D4B8 1344 001A                  		move.b	d4,obFrame(a1)
0001D4BC 5244                       		addq.w	#1,d4
0001D4BE 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001D4C2                            
0001D4C2                            loc_197D4:
0001D4CC                            ; End of function Obj76_Break
0001D4CC                            
0001D4CC                            ; ===========================================================================
0001D4CC FE80 FE00                  Obj76_FragSpeed:dc.w -$180, -$200
0001D4D0 0180 FE00                  		dc.w $180, -$200
0001D4D4 FF00 FF00                  		dc.w -$100, -$100
0001D4D8 0100 FF00                  		dc.w $100, -$100
0001D4DC FFF8 FFF8                  Obj76_FragPos:	dc.w -8, -8
0001D4E0 0010 0000                  		dc.w $10, 0
0001D4E4 0000 0010                  		dc.w 0,	$10
0001D4E8 0010 0010                  		dc.w $10, $10
0001D4E8 0010 0010                  		dc.w $10, $10
0001D4EC                            Map_BossBlock:	include	"_maps\SYZ Boss Blocks.asm"
0001D4EC                            ; ---------------------------------------------------------------------------
0001D4EC                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001D4EC                            ; ---------------------------------------------------------------------------
0001D4EC                            Map_BossBlock_internal:
0001D4EC 0000                       		dc.w @wholeblock-Map_BossBlock_internal
0001D4EE 0000                       		dc.w @topleft-Map_BossBlock_internal
0001D4F0 0000                       		dc.w @topright-Map_BossBlock_internal
0001D4F2 0000                       		dc.w @bottomleft-Map_BossBlock_internal
0001D4F4 0000                       		dc.w @bottomright-Map_BossBlock_internal
0001D4F6 02                         @wholeblock:	dc.b 2
0001D4F7 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001D4FC 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001D501 00                         		dc.b 0
0001D502 01                         @topleft:	dc.b 1
0001D503 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001D508 01                         @topright:	dc.b 1
0001D509 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001D50E 01                         @bottomleft:	dc.b 1
0001D50F F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001D514 01                         @bottomright:	dc.b 1
0001D515 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001D51A                            		even
0001D51A                            		even
0001D51A                            
0001D51A                            loc_1982C:
0001D51A 4EF9 0000 F86E             		jmp	(DeleteObject).l
0001D520                            
0001D520                            		include	"_incObj\82 Eggman - Scrap Brain 2.asm"
0001D520                            ; ---------------------------------------------------------------------------
0001D520                            ; Object 82 - Eggman (SBZ2)
0001D520                            ; ---------------------------------------------------------------------------
0001D520                            
0001D520                            ScrapEggman:
0001D520 7000                       		moveq	#0,d0
0001D522 1028 0024                  		move.b	obRoutine(a0),d0
0001D526 323B 0000                  		move.w	SEgg_Index(pc,d0.w),d1
0001D52A 4EFB 1000                  		jmp	SEgg_Index(pc,d1.w)
0001D52E                            ; ===========================================================================
0001D52E 0000                       SEgg_Index:	dc.w SEgg_Main-SEgg_Index
0001D530 0000                       		dc.w SEgg_Eggman-SEgg_Index
0001D532 0000                       		dc.w SEgg_Switch-SEgg_Index
0001D534                            
0001D534 0200 03                    SEgg_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001D537 0400 03                    		dc.b 4,	0, 3
0001D53A                            ; ===========================================================================
0001D53A                            
0001D53A                            SEgg_Main:	; Routine 0
0001D53A 45FA FFF8                  		lea	SEgg_ObjData(pc),a2
0001D53E 317C 1C60 0008             		move.w	#$1C60,obX(a0)
0001D544 317C 02A4 000C             		move.w	#$2A4,obY(a0)
0001D54A 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D550 117C 0010 0021             		move.b	#$10,obColProp(a0)
0001D556 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001D55C 4228 0025                  		clr.b	ob2ndRout(a0)
0001D560 115A 0024                  		move.b	(a2)+,obRoutine(a0)
0001D564 115A 001C                  		move.b	(a2)+,obAnim(a0)
0001D568 115A 0018                  		move.b	(a2)+,obPriority(a0)
0001D56C 217C 0000 0000 0004        		move.l	#Map_SEgg,obMap(a0)
0001D574 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D57A 117C 0004 0001             		move.b	#4,obRender(a0)
0001D580 08E8 0007 0001             		bset	#7,obRender(a0)
0001D586 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001D58C 4EB9 0000 FDDE             		jsr	(FindNextFreeObj).l
0001D592 6600                       		bne.s	SEgg_Eggman
0001D594 2348 0034                  		move.l	a0,$34(a1)
0001D598 12BC 0082                  		move.b	#id_ScrapEggman,(a1) ; load switch object
0001D59C 337C 1C30 0008             		move.w	#$1C30,obX(a1)
0001D5A2 337C 02BC 000C             		move.w	#$2BC,obY(a1)
0001D5A8 4228 0025                  		clr.b	ob2ndRout(a0)
0001D5AC 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001D5B0 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001D5B4 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001D5B8 237C 0000 E066 0004        		move.l	#Map_But,obMap(a1)
0001D5C0 337C 04A4 0002             		move.w	#$4A4,obGfx(a1)
0001D5C6 137C 0004 0001             		move.b	#4,obRender(a1)
0001D5CC 08E9 0007 0001             		bset	#7,obRender(a1)
0001D5D2 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001D5D8 137C 0000 001A             		move.b	#0,obFrame(a1)
0001D5DE                            
0001D5DE                            SEgg_Eggman:	; Routine 2
0001D5DE 7000                       		moveq	#0,d0
0001D5E0 1028 0025                  		move.b	ob2ndRout(a0),d0
0001D5E4 323B 0000                  		move.w	SEgg_EggIndex(pc,d0.w),d1
0001D5E8 4EBB 1000                  		jsr	SEgg_EggIndex(pc,d1.w)
0001D5EC 43FA 0000                  		lea	Ani_SEgg(pc),a1
0001D5F0 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
0001D5F6 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001D5FC                            ; ===========================================================================
0001D5FC 0000                       SEgg_EggIndex:	dc.w SEgg_ChkSonic-SEgg_EggIndex
0001D5FE 0000                       		dc.w SEgg_PreLeap-SEgg_EggIndex
0001D600 0000                       		dc.w SEgg_Leap-SEgg_EggIndex
0001D602 0000                       		dc.w loc_19934-SEgg_EggIndex
0001D604                            ; ===========================================================================
0001D604                            
0001D604                            SEgg_ChkSonic:
0001D604 3028 0008                  		move.w	obX(a0),d0
0001D608 9078 D008                  		sub.w	(v_player+obX).w,d0
0001D60C 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001D610 6400                       		bcc.s	loc_19934	; if not, branch
0001D612 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001D616 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001D61C 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D622                            
0001D622                            loc_19934:
0001D622 4EF9 0000 F81A             		jmp	(SpeedToPos).l
0001D628                            ; ===========================================================================
0001D628                            
0001D628                            SEgg_PreLeap:
0001D628 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001D62C 6600                       		bne.s	loc_19954	; if time remains, branch
0001D62E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001D632 117C 0002 001C             		move.b	#2,obAnim(a0)
0001D638 5868 000C                  		addq.w	#4,obY(a0)
0001D63C 317C 000F 003C             		move.w	#15,$3C(a0)
0001D642                            
0001D642                            loc_19954:
0001D642 60DE                       		bra.s	loc_19934
0001D644                            ; ===========================================================================
0001D644                            
0001D644                            SEgg_Leap:
0001D644 5368 003C                  		subq.w	#1,$3C(a0)
0001D648 6E00                       		bgt.s	loc_199D0
0001D64A 6600                       		bne.s	loc_1996A
0001D64C 317C FF04 0010             		move.w	#-$FC,obVelX(a0) ; make Eggman leap
0001D652 317C FC40 0012             		move.w	#-$3C0,obVelY(a0)
0001D658                            
0001D658                            loc_1996A:
0001D658 0C68 1C32 0008             		cmpi.w	#$1C32,obX(a0)
0001D65E 6E00                       		bgt.s	loc_19976
0001D660 4268 0010                  		clr.w	obVelX(a0)
0001D664                            
0001D664                            loc_19976:
0001D664 0668 0024 0012             		addi.w	#$24,obVelY(a0)
0001D66A 4A68 0012                  		tst.w	obVelY(a0)
0001D66E 6B00                       		bmi.s	SEgg_FindBlocks
0001D670 0C68 0295 000C             		cmpi.w	#$295,obY(a0)
0001D676 6500                       		bcs.s	SEgg_FindBlocks
0001D678 317C 5357 0028             		move.w	#$5357,obSubtype(a0)
0001D67E 0C68 029B 000C             		cmpi.w	#$29B,obY(a0)
0001D684 6500                       		bcs.s	SEgg_FindBlocks
0001D686 317C 029B 000C             		move.w	#$29B,obY(a0)
0001D68C 4268 0012                  		clr.w	obVelY(a0)
0001D690                            
0001D690                            SEgg_FindBlocks:
0001D690 3028 0010                  		move.w	obVelX(a0),d0
0001D694 8068 0012                  		or.w	obVelY(a0),d0
0001D698 6600                       		bne.s	loc_199D0
0001D69A 43F8 D000                  		lea	(v_objspace).w,a1 ; start at the first object RAM
0001D69E 703E                       		moveq	#$3E,d0
0001D6A0 7240                       		moveq	#$40,d1
0001D6A2                            
0001D6A2                            SEgg_FindLoop:	
0001D6A2 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001D6A4 0C11 0083                  		cmpi.b	#id_FalseFloor,(a1) ; is object a block? (object $83)
0001D6A8 57C8 FFF8                  		dbeq	d0,SEgg_FindLoop ; if not, repeat (max	$3E times)
0001D6AC                            
0001D6AC 6600                       		bne.s	loc_199D0
0001D6AE 337C 474F 0028             		move.w	#$474F,obSubtype(a1) ; set block to disintegrate
0001D6B4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001D6B8 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D6BE                            
0001D6BE                            loc_199D0:
0001D6BE 6000 FF62                  		bra.w	loc_19934
0001D6C2                            ; ===========================================================================
0001D6C2                            
0001D6C2                            SEgg_Switch:	; Routine 4
0001D6C2 7000                       		moveq	#0,d0
0001D6C4 1028 0025                  		move.b	ob2ndRout(a0),d0
0001D6C8 303B 0000                  		move.w	SEgg_SwIndex(pc,d0.w),d0
0001D6CC 4EFB 0000                  		jmp	SEgg_SwIndex(pc,d0.w)
0001D6D0                            ; ===========================================================================
0001D6D0 0000                       SEgg_SwIndex:	dc.w loc_199E6-SEgg_SwIndex
0001D6D2 0000                       		dc.w SEgg_SwDisplay-SEgg_SwIndex
0001D6D4                            ; ===========================================================================
0001D6D4                            
0001D6D4                            loc_199E6:
0001D6D4 2268 0034                  		movea.l	$34(a0),a1
0001D6D8 0C69 5357 0028             		cmpi.w	#$5357,obSubtype(a1)
0001D6DE 6600                       		bne.s	SEgg_SwDisplay
0001D6E0 117C 0001 001A             		move.b	#1,obFrame(a0)
0001D6E6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001D6EA                            
0001D6EA                            SEgg_SwDisplay:
0001D6EA 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001D6EA 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001D6F0                            		include	"_anim\Eggman - Scrap Brain 2 & Final.asm"
0001D6F0                            ; ---------------------------------------------------------------------------
0001D6F0                            ; Animation script - Eggman (SBZ2)
0001D6F0                            ; ---------------------------------------------------------------------------
0001D6F0 0000                       Ani_SEgg:	dc.w @stand-Ani_SEgg
0001D6F2 0000                       		dc.w @laugh-Ani_SEgg
0001D6F4 0000                       		dc.w @jump1-Ani_SEgg
0001D6F6 0000                       		dc.w @intube-Ani_SEgg
0001D6F8 0000                       		dc.w @running-Ani_SEgg
0001D6FA 0000                       		dc.w @jump2-Ani_SEgg
0001D6FC 0000                       		dc.w @starjump-Ani_SEgg
0001D6FE 7E00 FF                    @stand:		dc.b $7E, 0, afEnd
0001D702 00                         		even
0001D702 0601 02FF                  @laugh:		dc.b 6,	1, 2, afEnd
0001D706 0E03 0404 0000 00FF        @jump1:		dc.b $E, 3, 4, 4, 0, 0,	0, afEnd
0001D70E 0005 09FF                  @intube:	dc.b 0,	5, 9, afEnd
0001D712 0607 0408 04FF             @running:	dc.b 6,	7, 4, 8, 4, afEnd
0001D718 0F04 0303 FF               @jump2:		dc.b $F, 4, 3, 3, afEnd
0001D71E 00                         		even
0001D71E 7E06 FF                    @starjump:	dc.b $7E, 6, afEnd
0001D722 00                         		even
0001D722 00                         		even
0001D722                            Map_SEgg:	include	"_maps\Eggman - Scrap Brain 2.asm"
0001D722                            ; --------------------------------------------------------------------------------
0001D722                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001D722                            ; --------------------------------------------------------------------------------
0001D722                            
0001D722                            SME_y00JM:	
0001D722 0000 0000                  		dc.w SME_y00JM_16-SME_y00JM, SME_y00JM_26-SME_y00JM	
0001D726 0000 0000                  		dc.w SME_y00JM_4A-SME_y00JM, SME_y00JM_6E-SME_y00JM	
0001D72A 0000 0000                  		dc.w SME_y00JM_83-SME_y00JM, SME_y00JM_A7-SME_y00JM	
0001D72E 0000 0000                  		dc.w SME_y00JM_BC-SME_y00JM, SME_y00JM_E0-SME_y00JM	
0001D732 0000 0000                  		dc.w SME_y00JM_FA-SME_y00JM, SME_y00JM_119-SME_y00JM	
0001D736 0000                       		dc.w SME_y00JM_142-SME_y00JM	
0001D738 03                         SME_y00JM_16:	dc.b 3	
0001D739 FC00 008F E8               		dc.b $FC, 0, 0, $8F, $E8	
0001D73E E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001D743 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001D748 07                         SME_y00JM_26:	dc.b 7	
0001D749 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0	
0001D74E 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001D753 FC00 008F E8               		dc.b $FC, 0, 0, $8F, $E8	
0001D758 F800 0002 F0               		dc.b $F8, 0, 0, 2, $F0	
0001D75D F800 0005 F8               		dc.b $F8, 0, 0, 5, $F8	
0001D762 F800 0008 00               		dc.b $F8, 0, 0, 8, 0	
0001D767 F800 000B 08               		dc.b $F8, 0, 0, $B, 8	
0001D76C 07                         SME_y00JM_4A:	dc.b 7	
0001D76D E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0	
0001D772 FD00 008F E8               		dc.b $FD, 0, 0, $8F, $E8	
0001D777 F900 0002 F0               		dc.b $F9, 0, 0, 2, $F0	
0001D77C F900 0005 F8               		dc.b $F9, 0, 0, 5, $F8	
0001D781 F900 0008 00               		dc.b $F9, 0, 0, 8, 0	
0001D786 F900 000B 08               		dc.b $F9, 0, 0, $B, 8	
0001D78B 010F 007F F0               		dc.b 1, $F, 0, $7F, $F0	
0001D790 04                         SME_y00JM_6E:	dc.b 4	
0001D791 F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0	
0001D796 F504 0830 10               		dc.b $F5, 4, 8, $30, $10	
0001D79B 0809 084E F0               		dc.b 8, 9, 8, $4E, $F0	
0001D7A0 EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0	
0001D7A5 07                         SME_y00JM_83:	dc.b 7	
0001D7A6 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001D7AB F104 0830 10               		dc.b $F1, 4, 8, $30, $10	
0001D7B0 0806 083E F8               		dc.b 8, 6, 8, $3E, $F8	
0001D7B5 E800 0000 F0               		dc.b $E8, 0, 0, 0, $F0	
0001D7BA E800 0003 F8               		dc.b $E8, 0, 0, 3, $F8	
0001D7BF E800 0006 00               		dc.b $E8, 0, 0, 6, 0	
0001D7C4 E800 0009 08               		dc.b $E8, 0, 0, 9, 8	
0001D7C9 04                         SME_y00JM_A7:	dc.b 4	
0001D7CA E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001D7CF E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001D7D4 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001D7D9 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001D7DE 07                         SME_y00JM_BC:	dc.b 7	
0001D7DF E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001D7E4 E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001D7E9 0409 0834 00               		dc.b 4, 9, 8, $34, 0	
0001D7EE 0405 083A E8               		dc.b 4, 5, 8, $3A, $E8	
0001D7F3 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001D7F8 F104 0854 10               		dc.b $F1, 4, 8, $54, $10	
0001D7FD F104 0054 E0               		dc.b $F1, 4, 0, $54, $E0	
0001D802 05                         SME_y00JM_E0:	dc.b 5	
0001D803 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001D808 F104 0830 10               		dc.b $F1, 4, 8, $30, $10	
0001D80D 0409 0834 00               		dc.b 4, 9, 8, $34, 0	
0001D812 0405 083A E8               		dc.b 4, 5, 8, $3A, $E8	
0001D817 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001D81C 06                         SME_y00JM_FA:	dc.b 6	
0001D81D EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0	
0001D822 EF04 0830 10               		dc.b $EF, 4, 8, $30, $10	
0001D827 0905 0844 00               		dc.b 9, 5, 8, $44, 0	
0001D82C 0301 0848 F8               		dc.b 3, 1, 8, $48, $F8	
0001D831 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8	
0001D836 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	
0001D83B 08                         SME_y00JM_119:	dc.b 8	
0001D83C E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001D841 E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001D846 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001D84B 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001D850 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0, $F0	
0001D855 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0, $F0	
0001D85A 000D 3EF0 F0               		dc.b 0, $D, $3E, $F0, $F0	
0001D85F 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0, $F0	
0001D864 03                         SME_y00JM_142:	dc.b 3	
0001D865 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4	
0001D86A F408 005E 04               		dc.b $F4, 8, 0, $5E, 4	
0001D86F EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC	
0001D874                            		even
0001D874                            		even
0001D874                            		include	"_incObj\83 SBZ Eggman's Crumbling Floor.asm"
0001D874                            ; ---------------------------------------------------------------------------
0001D874                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001D874                            ; ---------------------------------------------------------------------------
0001D874                            
0001D874                            FalseFloor:
0001D874 7000                       		moveq	#0,d0
0001D876 1028 0024                  		move.b	obRoutine(a0),d0
0001D87A 323B 0000                  		move.w	FFloor_Index(pc,d0.w),d1
0001D87E 4EFB 1000                  		jmp	FFloor_Index(pc,d1.w)
0001D882                            ; ===========================================================================
0001D882 0000                       FFloor_Index:	dc.w FFloor_Main-FFloor_Index
0001D884 0000                       		dc.w FFloor_ChkBreak-FFloor_Index
0001D886 0000                       		dc.w loc_19C36-FFloor_Index
0001D888 0000                       		dc.w loc_19C62-FFloor_Index
0001D88A 0000                       		dc.w loc_19C72-FFloor_Index
0001D88C 0000                       		dc.w loc_19C80-FFloor_Index
0001D88E                            ; ===========================================================================
0001D88E                            
0001D88E                            FFloor_Main:	; Routine 0
0001D88E 317C 1B80 0008             		move.w	#$1B80,obX(a0)
0001D894 317C 02D0 000C             		move.w	#$2D0,obY(a0)
0001D89A 117C 0080 0014             		move.b	#$80,obActWid(a0)
0001D8A0 117C 0010 0016             		move.b	#$10,obHeight(a0)
0001D8A6 117C 0004 0001             		move.b	#4,obRender(a0)
0001D8AC 08E8 0007 0001             		bset	#7,obRender(a0)
0001D8B2 7800                       		moveq	#0,d4
0001D8B4 3A3C 1B10                  		move.w	#$1B10,d5
0001D8B8 7C07                       		moveq	#7,d6
0001D8BA 45E8 0030                  		lea	$30(a0),a2
0001D8BE                            
0001D8BE                            FFloor_MakeBlock:
0001D8BE 4EB9 0000 FDC8             		jsr	(FindFreeObj).l
0001D8C4 6600                       		bne.s	FFloor_ExitMake
0001D8C6 34C9                       		move.w	a1,(a2)+
0001D8C8 12BC 0083                  		move.b	#id_FalseFloor,(a1) ; load block object
0001D8CC 237C 0000 0000 0004        		move.l	#Map_FFloor,obMap(a1)
0001D8D4 337C 4518 0002             		move.w	#$4518,obGfx(a1)
0001D8DA 137C 0004 0001             		move.b	#4,obRender(a1)
0001D8E0 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001D8E6 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001D8EC 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001D8F2 3345 0008                  		move.w	d5,obX(a1)	; set X	position
0001D8F6 337C 02D0 000C             		move.w	#$2D0,obY(a1)
0001D8FC 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001D900 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001D906 51CE FFB6                  		dbf	d6,FFloor_MakeBlock ; repeat sequence 7 more times
0001D90A                            
0001D90A                            FFloor_ExitMake:
0001D90A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D90E 4E75                       		rts	
0001D910                            ; ===========================================================================
0001D910                            
0001D910                            FFloor_ChkBreak:; Routine 2
0001D910 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001D916 6600                       		bne.s	FFloor_Solid	; if not, branch
0001D918 4228 001A                  		clr.b	obFrame(a0)
0001D91C 5428 0024                  		addq.b	#2,obRoutine(a0) ; next subroutine
0001D920                            
0001D920                            FFloor_Solid:
0001D920 7000                       		moveq	#0,d0
0001D922 1028 001A                  		move.b	obFrame(a0),d0
0001D926 4400                       		neg.b	d0
0001D928 4880                       		ext.w	d0
0001D92A 5040                       		addq.w	#8,d0
0001D92C E940                       		asl.w	#4,d0
0001D92E 383C 1C00                  		move.w	#$1C00,d4
0001D932 9840                       		sub.w	d0,d4
0001D934 1140 0014                  		move.b	d0,obActWid(a0)
0001D938 3144 0008                  		move.w	d4,obX(a0)
0001D93C 720B                       		moveq	#$B,d1
0001D93E D240                       		add.w	d0,d1
0001D940 7410                       		moveq	#$10,d2
0001D942 7611                       		moveq	#$11,d3
0001D944 4EF9 0001 1D7A             		jmp	(SolidObject).l
0001D94A                            ; ===========================================================================
0001D94A                            
0001D94A                            loc_19C36:	; Routine 4
0001D94A 0428 000E 001E             		subi.b	#$E,obTimeFrame(a0)
0001D950 6400                       		bcc.s	FFloor_Solid2
0001D952 70FF                       		moveq	#-1,d0
0001D954 1028 001A                  		move.b	obFrame(a0),d0
0001D958 4880                       		ext.w	d0
0001D95A D040                       		add.w	d0,d0
0001D95C 3030 0030                  		move.w	$30(a0,d0.w),d0
0001D960 2240                       		movea.l	d0,a1
0001D962 337C 474F 0028             		move.w	#$474F,obSubtype(a1)
0001D968 5228 001A                  		addq.b	#1,obFrame(a0)
0001D96C 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)
0001D972 6700                       		beq.s	loc_19C62
0001D974                            
0001D974                            FFloor_Solid2:
0001D974 60AA                       		bra.s	FFloor_Solid
0001D976                            ; ===========================================================================
0001D976                            
0001D976                            loc_19C62:	; Routine 6
0001D976 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001D97C 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001D982 6000 FB96                  		bra.w	loc_1982C
0001D986                            ; ===========================================================================
0001D986                            
0001D986                            loc_19C72:	; Routine 8
0001D986 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001D98C 6700                       		beq.s	FFloor_Break	; if yes, branch
0001D98E 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001D994                            ; ===========================================================================
0001D994                            
0001D994                            loc_19C80:	; Routine $A
0001D994 4A28 0001                  		tst.b	obRender(a0)
0001D998 6A00 FB80                  		bpl.w	loc_1982C
0001D99C 4EB9 0000 F7E2             		jsr	(ObjectFall).l
0001D9A2 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001D9A8                            ; ===========================================================================
0001D9A8                            
0001D9A8                            FFloor_Break:
0001D9A8 49FA 0000                  		lea	FFloor_FragSpeed(pc),a4
0001D9AC 4BFA 0000                  		lea	FFloor_FragPos(pc),a5
0001D9B0 7801                       		moveq	#1,d4
0001D9B2 7203                       		moveq	#3,d1
0001D9B4 7438                       		moveq	#$38,d2
0001D9B6 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D9BA 117C 0008 0014             		move.b	#8,obActWid(a0)
0001D9C0 117C 0008 0016             		move.b	#8,obHeight(a0)
0001D9C6 43D0                       		lea	(a0),a1
0001D9C8 6000                       		bra.s	FFloor_MakeFrag
0001D9CA                            ; ===========================================================================
0001D9CA                            
0001D9CA                            FFloor_LoopFrag:
0001D9CA 4EB9 0000 FDDE             		jsr	(FindNextFreeObj).l
0001D9D0 6600                       		bne.s	FFloor_BreakSnd
0001D9D2                            
0001D9D2                            FFloor_MakeFrag:
0001D9D2 45D0                       		lea	(a0),a2
0001D9D4 47D1                       		lea	(a1),a3
0001D9D6 7603                       		moveq	#3,d3
0001D9D8                            
0001D9D8                            loc_19CC4:
0001D9D8 26DA                       		move.l	(a2)+,(a3)+
0001D9DA 26DA                       		move.l	(a2)+,(a3)+
0001D9DC 26DA                       		move.l	(a2)+,(a3)+
0001D9DE 26DA                       		move.l	(a2)+,(a3)+
0001D9E0 51CB FFF6                  		dbf	d3,loc_19CC4
0001D9E4                            
0001D9E4 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001D9E8 361D                       		move.w	(a5)+,d3
0001D9EA D769 0008                  		add.w	d3,obX(a1)
0001D9EE 361D                       		move.w	(a5)+,d3
0001D9F0 D769 000C                  		add.w	d3,obY(a1)
0001D9F4 1344 001A                  		move.b	d4,obFrame(a1)
0001D9F8 5244                       		addq.w	#1,d4
0001D9FA 51C9 FFCE                  		dbf	d1,FFloor_LoopFrag ; repeat sequence 3 more times
0001D9FE                            
0001D9FE                            FFloor_BreakSnd:
0001DA08 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001DA0E                            ; ===========================================================================
0001DA0E 0080 0000                  FFloor_FragSpeed:dc.w $80, 0
0001DA12 0120 00C0                  		dc.w $120, $C0
0001DA16 FFF8 FFF8                  FFloor_FragPos:	dc.w -8, -8
0001DA1A 0010 0000                  		dc.w $10, 0
0001DA1E 0000 0010                  		dc.w 0,	$10
0001DA22 0010 0010                  		dc.w $10, $10
0001DA22 0010 0010                  		dc.w $10, $10
0001DA26                            Map_FFloor:	include	"_maps\SBZ Eggman's Crumbling Floor.asm"
0001DA26                            ; ---------------------------------------------------------------------------
0001DA26                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001DA26                            ; ---------------------------------------------------------------------------
0001DA26                            Map_FFloor_internal:
0001DA26 0000                       		dc.w @wholeblock-Map_FFloor_internal
0001DA28 0000                       		dc.w @topleft-Map_FFloor_internal
0001DA2A 0000                       		dc.w @topright-Map_FFloor_internal
0001DA2C 0000                       		dc.w @bottomleft-Map_FFloor_internal
0001DA2E 0000                       		dc.w @bottomright-Map_FFloor_internal
0001DA30 01                         @wholeblock:	dc.b 1
0001DA31 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001DA36 02                         @topleft:	dc.b 2
0001DA37 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001DA3C F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001DA41 00                         		dc.b 0
0001DA42 02                         @topright:	dc.b 2
0001DA43 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001DA48 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001DA4D 00                         		dc.b 0
0001DA4E 02                         @bottomleft:	dc.b 2
0001DA4F F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001DA54 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001DA59 00                         		dc.b 0
0001DA5A 02                         @bottomright:	dc.b 2
0001DA5B F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001DA60 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001DA66 00                         		even
0001DA66 00                         		even
0001DA66                            		include	"_incObj\85 Boss - Final.asm"
0001DA66                            ; ---------------------------------------------------------------------------
0001DA66                            ; Object 85 - Eggman (FZ)
0001DA66                            ; ---------------------------------------------------------------------------
0001DA66                            
0001DA66                            Obj85_Delete:
0001DA66 4EF9 0000 F86E             		jmp	(DeleteObject).l
0001DA6C                            ; ===========================================================================
0001DA6C                            
0001DA6C                            BossFinal:
0001DA6C 7000                       		moveq	#0,d0
0001DA6E 1028 0024                  		move.b	obRoutine(a0),d0
0001DA72 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001DA76 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001DA7A                            ; ===========================================================================
0001DA7A 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001DA7C 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001DA7E 0000                       		dc.w loc_1A38E-Obj85_Index
0001DA80 0000                       		dc.w loc_1A346-Obj85_Index
0001DA82 0000                       		dc.w loc_1A2C6-Obj85_Index
0001DA84 0000                       		dc.w loc_1A3AC-Obj85_Index
0001DA86 0000                       		dc.w loc_1A264-Obj85_Index
0001DA88                            
0001DA88 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001DA8E 0001 D722                  		dc.l Map_SEgg		; mappings pointer
0001DA92 25B0 0590 0300             		dc.w $25B0, $590, $300
0001DA98 0000 0000                  		dc.l Map_EggCyl
0001DA9C 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001DAA2 0000 0000                  		dc.l Map_FZLegs
0001DAA6 26E0 0596 0470             		dc.w $26E0, $596, $470
0001DAAC 0001 D722                  		dc.l Map_SEgg
0001DAB0 26E0 0596 0400             		dc.w $26E0, $596, $400
0001DAB6 0001 B9A6                  		dc.l Map_Eggman
0001DABA 26E0 0596 0400             		dc.w $26E0, $596, $400
0001DAC0 0001 B9A6                  		dc.l Map_Eggman
0001DAC4                            
0001DAC4                            Obj85_ObjData2:	; routine num, animation, sprite priority (high and low bytes), width, height		
0001DAC4 0200 0200 2019             		dc.b  2, 0, $02, $00, $20, $19
0001DACA 0400 0080 1208             		dc.b  4, 0, $00, $80, $12,   8
0001DAD0 0600 0180 0000             		dc.b  6, 0, $01, $80,   0,   0
0001DAD6 0800 0180 0000             		dc.b  8, 0, $01, $80,   0,   0
0001DADC 0A00 0180 2020             		dc.b $A, 0, $01, $80, $20, $20
0001DAE2 0C00 0180 0000             		dc.b $C, 0, $01, $80,   0,   0
0001DAE8                            ; ===========================================================================
0001DAE8                            
0001DAE8                            Obj85_Main:	; Routine 0
0001DAE8 45FA FF9E                  		lea	Obj85_ObjData(pc),a2
0001DAEC 47FA FFD6                  		lea	Obj85_ObjData2(pc),a3
0001DAF0 2248                       		movea.l	a0,a1
0001DAF2 7205                       		moveq	#5,d1
0001DAF4 6000                       		bra.s	Obj85_LoadBoss
0001DAF6                            ; ===========================================================================
0001DAF6                            
0001DAF6                            Obj85_Loop:
0001DAF6 4EB9 0000 FDDE             		jsr	(FindNextFreeObj).l
0001DAFC 6600                       		bne.s	loc_19E20
0001DAFE                            
0001DAFE                            Obj85_LoadBoss:
0001DAFE 12BC 0085                  		move.b	#id_BossFinal,(a1)
0001DB02 335A 0008                  		move.w	(a2)+,obX(a1)
0001DB06 335A 000C                  		move.w	(a2)+,obY(a1)
0001DB0A 335A 0002                  		move.w	(a2)+,obGfx(a1)
0001DB0E 235A 0004                  		move.l	(a2)+,obMap(a1)
0001DB12 135B 0024                  		move.b	(a3)+,obRoutine(a1)
0001DB16 135B 001C                  		move.b	(a3)+,obAnim(a1)
0001DB1A 335B 0018                  		move.w	(a3)+,obPriority(a1)
0001DB1E 135B 0014                  			move.b	(a3)+,obActWid(a1)
0001DB22 135B 0016                  		move.b	(a3)+,obHeight(a1)
0001DB26 137C 0004 0001             		move.b	#4,obRender(a1)
0001DB2C 08E8 0007 0001             		bset	#7,obRender(a0)
0001DB32 2348 0034                  		move.l	a0,$34(a1)
0001DB36 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001DB3A                            
0001DB3A                            loc_19E20:
0001DB3A 45E8 0036                  		lea	$36(a0),a2
0001DB3E 4EB9 0000 FDC8             		jsr	(FindFreeObj).l
0001DB44 6600                       		bne.s	loc_19E5A
0001DB46 12BC 0086                  		move.b	#id_BossPlasma,(a1) ; load energy ball object
0001DB4A 3489                       		move.w	a1,(a2)
0001DB4C 2348 0034                  		move.l	a0,$34(a1)
0001DB50 45E8 0038                  		lea	$38(a0),a2
0001DB54 7400                       		moveq	#0,d2
0001DB56 7203                       		moveq	#3,d1
0001DB58                            
0001DB58                            loc_19E3E:
0001DB58 4EB9 0000 FDDE             		jsr	(FindNextFreeObj).l
0001DB5E 6600                       		bne.s	loc_19E5A
0001DB60 34C9                       		move.w	a1,(a2)+
0001DB62 12BC 0084                  		move.b	#id_EggmanCylinder,(a1) ; load crushing	cylinder object
0001DB66 2348 0034                  		move.l	a0,$34(a1)
0001DB6A 1342 0028                  		move.b	d2,obSubtype(a1)
0001DB6E 5442                       		addq.w	#2,d2
0001DB70 51C9 FFE6                  		dbf	d1,loc_19E3E
0001DB74                            
0001DB74                            loc_19E5A:
0001DB74 317C 0000 0034             		move.w	#0,$34(a0)
0001DB7A 117C 0006 0021             		move.b	#6,obColProp(a0) ; set number of hits to 6
0001DB80 317C FFFF 0030             		move.w	#-1,$30(a0)
0001DB86                            
0001DB86                            Obj85_Eggman:	; Routine 2
0001DB86 7000                       		moveq	#0,d0
0001DB88 1028 0034                  		move.b	$34(a0),d0
0001DB8C 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001DB90 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001DB94 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001DB9A                            ; ===========================================================================
0001DB9A 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001DB9E 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001DBA2 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001DBA6 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001DBAA                            ; ===========================================================================
0001DBAA                            
0001DBAA                            loc_19E90:
0001DBAA 4AB8 F680                  		tst.l	(v_plc_buffer).w
0001DBAE 6600                       		bne.s	loc_19EA2
0001DBB0 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
0001DBB6 6500                       		bcs.s	loc_19EA2
0001DBB8 5428 0034                  		addq.b	#2,$34(a0)
0001DBBC                            
0001DBBC                            loc_19EA2:
0001DBBC 52B8 F636                  		addq.l	#1,(v_random).w
0001DBC0 4E75                       		rts	
0001DBC2                            ; ===========================================================================
0001DBC2                            
0001DBC2                            loc_19EA8:
0001DBC2 4A68 0030                  		tst.w	$30(a0)
0001DBC6 6A00                       		bpl.s	loc_19F10
0001DBC8 4268 0030                  		clr.w	$30(a0)
0001DBCC 4EB9 0000 3D02             		jsr	(RandomNumber).l
0001DBD2 0240 000C                  		andi.w	#$C,d0
0001DBD6 3200                       		move.w	d0,d1
0001DBD8 5441                       		addq.w	#2,d1
0001DBDA 4A80                       		tst.l	d0
0001DBDC 6A00                       		bpl.s	loc_19EC6
0001DBDE C340                       		exg	d1,d0
0001DBE0                            
0001DBE0                            loc_19EC6:
0001DBE0 43FA 0000                  		lea	word_19FD6(pc),a1
0001DBE4 3031 0000                  		move.w	(a1,d0.w),d0
0001DBE8 3231 1000                  		move.w	(a1,d1.w),d1
0001DBEC 3140 0030                  		move.w	d0,$30(a0)
0001DBF0 74FF                       		moveq	#-1,d2
0001DBF2 3430 0038                  		move.w	$38(a0,d0.w),d2
0001DBF6 2242                       		movea.l	d2,a1
0001DBF8 137C 00FF 0029             		move.b	#-1,$29(a1)
0001DBFE 337C FFFF 0030             		move.w	#-1,$30(a1)
0001DC04 3430 1038                  		move.w	$38(a0,d1.w),d2
0001DC08 2242                       		movea.l	d2,a1
0001DC0A 137C 0001 0029             		move.b	#1,$29(a1)
0001DC10 337C 0000 0030             		move.w	#0,$30(a1)
0001DC16 317C 0001 0032             		move.w	#1,$32(a0)
0001DC1C 4228 0035                  		clr.b	$35(a0)
0001DC2A                            
0001DC2A                            loc_19F10:
0001DC2A 4A68 0032                  		tst.w	$32(a0)
0001DC2E 6B00 0000                  		bmi.w	loc_19FA6
0001DC32 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001DC38 3038 D008                  		move.w	(v_player+obX).w,d0
0001DC3C 9068 0008                  		sub.w	obX(a0),d0
0001DC40 6500                       		bcs.s	loc_19F2E
0001DC42 08E8 0000 0022             		bset	#0,obStatus(a0)
0001DC48                            
0001DC48                            loc_19F2E:
0001DC48 323C 002B                  		move.w	#$2B,d1
0001DC4C 343C 0014                  		move.w	#$14,d2
0001DC50 363C 0014                  		move.w	#$14,d3
0001DC54 3828 0008                  		move.w	obX(a0),d4
0001DC58 4EB9 0001 1D7A             		jsr	(SolidObject).l
0001DC5E 4A44                       		tst.w	d4
0001DC60 6E00                       		bgt.s	loc_19F50
0001DC62                            
0001DC62                            loc_19F48:
0001DC62 4A28 0035                  		tst.b	$35(a0)
0001DC66 6600                       		bne.s	loc_19F88
0001DC68 6000                       		bra.s	loc_19F96
0001DC6A                            ; ===========================================================================
0001DC6A                            
0001DC6A                            loc_19F50:
0001DC6A 5E78 F636                  		addq.w	#7,(v_random).w
0001DC6E 0C38 0002 D01C             		cmpi.b	#id_Roll,(v_player+obAnim).w
0001DC74 66EC                       		bne.s	loc_19F48
0001DC76 303C 0300                  		move.w	#$300,d0
0001DC7A 0828 0000 0022             		btst	#0,obStatus(a0)
0001DC80 6600                       		bne.s	loc_19F6A
0001DC82 4440                       		neg.w	d0
0001DC84                            
0001DC84                            loc_19F6A:
0001DC84 31C0 D010                  		move.w	d0,(v_player+obVelX).w
0001DC88 4A28 0035                  		tst.b	$35(a0)
0001DC8C 6600                       		bne.s	loc_19F88
0001DC8E 5328 0021                  		subq.b	#1,obColProp(a0)
0001DC92 117C 00FF 0035             		move.b	#$FF,$35(a0)
0001DC98 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001DC9E                            
0001DC9E                            loc_19F88:
0001DC9E 5328 0035                  		subq.b	#1,$35(a0)
0001DCA2 6700                       		beq.s	loc_19F96
0001DCA4 117C 0003 001C             		move.b	#3,obAnim(a0)
0001DCAA 6000                       		bra.s	loc_19F9C
0001DCAC                            ; ===========================================================================
0001DCAC                            
0001DCAC                            loc_19F96:
0001DCAC 117C 0001 001C             		move.b	#1,obAnim(a0)
0001DCB2                            
0001DCB2                            loc_19F9C:
0001DCB2 43FA FA3C                  		lea	Ani_SEgg(pc),a1
0001DCB6 4EF9 0000 C8E4             		jmp	(AnimateSprite).l
0001DCBC                            ; ===========================================================================
0001DCBC                            
0001DCBC                            loc_19FA6:
0001DCBC 4A28 0021                  		tst.b	obColProp(a0)
0001DCC0 6700                       		beq.s	loc_19FBC
0001DCC2 5428 0034                  		addq.b	#2,$34(a0)
0001DCC6 317C FFFF 0030             		move.w	#-1,$30(a0)
0001DCCC 4268 0032                  		clr.w	$32(a0)
0001DCD0 4E75                       		rts	
0001DCD2                            ; ===========================================================================
0001DCD2                            
0001DCD2                            loc_19FBC:
0001DCD2 7064                       			moveq	#100,d0
0001DCD4 6100 0000                  			bsr.w	AddPoints
0001DCD8 117C 0006 0034             		move.b	#6,$34(a0)
0001DCDE 317C 25C0 0008             		move.w	#$25C0,obX(a0)
0001DCE4 317C 053C 000C             		move.w	#$53C,obY(a0)
0001DCEA 117C 0014 0016             		move.b	#$14,obHeight(a0)
0001DCF0 4E75                       		rts	
0001DCF2                            ; ===========================================================================
0001DCF2 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001DD02                            ; ===========================================================================
0001DD02                            
0001DD02                            loc_19FE6:
0001DD02 70FF                       		moveq	#-1,d0
0001DD04 3028 0036                  		move.w	$36(a0),d0
0001DD08 2240                       		movea.l	d0,a1
0001DD0A 4A68 0030                  		tst.w	$30(a0)
0001DD0E 6A00                       		bpl.s	loc_1A000
0001DD10 4268 0030                  		clr.w	$30(a0)
0001DD14 137C 00FF 0029             		move.b	#-1,$29(a1)
0001DD1A 6100                       		bsr.s	loc_1A020
0001DD1C                            
0001DD1C                            loc_1A000:
0001DD1C 700F                       		moveq	#$F,d0
0001DD1E C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001DD22 6600                       		bne.s	loc_1A00A
0001DD24 6100                       		bsr.s	loc_1A020
0001DD26                            
0001DD26                            loc_1A00A:
0001DD26 4A68 0032                  		tst.w	$32(a0)
0001DD2A 6700                       		beq.s	locret_1A01E
0001DD2C 5528 0034                  		subq.b	#2,$34(a0)
0001DD30 317C FFFF 0030             		move.w	#-1,$30(a0)
0001DD36 4268 0032                  		clr.w	$32(a0)
0001DD3A                            
0001DD3A                            locret_1A01E:
0001DD3A 4E75                       		rts	
0001DD3C                            ; ===========================================================================
0001DD3C                            
0001DD3C                            loc_1A020:
0001DD46                            ; ===========================================================================
0001DD46                            
0001DD46                            loc_1A02A:
0001DD46 117C 0030 0014             			move.b	#$30,obActWid(a0)
0001DD4C 08E8 0000 0022             		bset	#0,obStatus(a0)
0001DD52 4EB9 0000 F81A             		jsr	(SpeedToPos).l
0001DD58 117C 0006 001A             		move.b	#6,obFrame(a0)
0001DD5E 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001DD64 0C68 059C 000C             		cmpi.w	#$59C,obY(a0)
0001DD6A 6500                       		bcs.s	loc_1A070
0001DD6C 317C 059C 000C             		move.w	#$59C,obY(a0)
0001DD72 5428 0034                  		addq.b	#2,$34(a0)
0001DD76 117C 0020 0014             			move.b	#$20,obActWid(a0)
0001DD7C 317C 0100 0010             		move.w	#$100,obVelX(a0)
0001DD82 317C FF00 0012             		move.w	#-$100,obVelY(a0)
0001DD88 5438 F742                  		addq.b	#2,(v_dle_routine).w
0001DD8C                            
0001DD8C                            loc_1A070:
0001DD8C 6000 0000                  		bra.w	loc_1A166
0001DD90                            ; ===========================================================================
0001DD90                            
0001DD90                            loc_1A074:
0001DD90 08E8 0000 0022             		bset	#0,obStatus(a0)
0001DD96 117C 0004 001C             		move.b	#4,obAnim(a0)
0001DD9C 4EB9 0000 F81A             		jsr	(SpeedToPos).l
0001DDA2 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001DDA8 0C68 05A3 000C             		cmpi.w	#$5A3,obY(a0)
0001DDAE 6500                       		bcs.s	loc_1A09A
0001DDB0 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001DDB6                            
0001DDB6                            loc_1A09A:
0001DDB6 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001DDBC 3028 0008                  		move.w	obX(a0),d0
0001DDC0 9078 D008                  		sub.w	(v_player+obX).w,d0
0001DDC4 6A00                       		bpl.s	loc_1A0B4
0001DDC6 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001DDCC 6000 0000                  		bra.w	loc_1A0F2
0001DDD0                            ; ===========================================================================
0001DDD0                            
0001DDD0                            loc_1A0B4:
0001DDD0 0440 0070                  		subi.w	#$70,d0
0001DDD4 6500                       		bcs.s	loc_1A0F2
0001DDD6 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001DDDC 5140                       		subq.w	#8,d0
0001DDDE 6500                       		bcs.s	loc_1A0F2
0001DDE0 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001DDE6 5140                       		subq.w	#8,d0
0001DDE8 6500                       		bcs.s	loc_1A0F2
0001DDEA 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001DDF0 5140                       		subq.w	#8,d0
0001DDF2 6500                       		bcs.s	loc_1A0F2
0001DDF4 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001DDFA 5140                       		subq.w	#8,d0
0001DDFC 6500                       		bcs.s	loc_1A0F2
0001DDFE 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001DE04 0440 0038                  		subi.w	#$38,d0
0001DE08 6500                       		bcs.s	loc_1A0F2
0001DE0A 4268 0010                  		clr.w	obVelX(a0)
0001DE0E                            
0001DE0E                            loc_1A0F2:
0001DE0E 0C68 26A0 0008             		cmpi.w	#$26A0,obX(a0)
0001DE14 6500                       		bcs.s	loc_1A110
0001DE16 317C 26A0 0008             		move.w	#$26A0,obX(a0)
0001DE1C 317C 0240 0010             		move.w	#$240,obVelX(a0)
0001DE22 317C FB40 0012             		move.w	#-$4C0,obVelY(a0)
0001DE28 5428 0034                  		addq.b	#2,$34(a0)
0001DE2C                            
0001DE2C                            loc_1A110:
0001DE2C 6000                       		bra.s	loc_1A15C
0001DE2E                            ; ===========================================================================
0001DE2E                            
0001DE2E                            loc_1A112:
0001DE2E 4EB9 0000 F81A             		jsr	(SpeedToPos).l
0001DE34 0C68 26E0 0008             		cmpi.w	#$26E0,obX(a0)
0001DE3A 6500                       		bcs.s	loc_1A124
0001DE3C 4268 0010                  		clr.w	obVelX(a0)
0001DE40                            
0001DE40                            loc_1A124:
0001DE40 0668 0034 0012             		addi.w	#$34,obVelY(a0)
0001DE46 4A68 0012                  		tst.w	obVelY(a0)
0001DE4A 6B00                       		bmi.s	loc_1A142
0001DE4C 0C68 0592 000C             		cmpi.w	#$592,obY(a0)
0001DE52 6500                       		bcs.s	loc_1A142
0001DE54 317C 0592 000C             		move.w	#$592,obY(a0)
0001DE5A 4268 0012                  		clr.w	obVelY(a0)
0001DE5E                            
0001DE5E                            loc_1A142:
0001DE5E 3028 0010                  		move.w	obVelX(a0),d0
0001DE62 8068 0012                  		or.w	obVelY(a0),d0
0001DE66 6600                       		bne.s	loc_1A15C
0001DE68 5428 0034                  		addq.b	#2,$34(a0)
0001DE6C 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001DE72 117C 0001 0021             		move.b	#1,obColProp(a0)
0001DE78                            
0001DE78                            loc_1A15C:
0001DE78 43FA F876                  		lea	Ani_SEgg(pc),a1
0001DE7C 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
0001DE82                            
0001DE82                            loc_1A166:
0001DE82 0C78 2700 F72A             		cmpi.w	#$2700,(v_limitright2).w
0001DE88 6C00                       		bge.s	loc_1A172
0001DE8A 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001DE8E                            
0001DE8E                            loc_1A172:
0001DE8E 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001DE94 6C00                       		bge.s	locret_1A190
0001DE96 323C 001B                  		move.w	#$1B,d1
0001DE9A 343C 0070                  		move.w	#$70,d2
0001DE9E 363C 0071                  		move.w	#$71,d3
0001DEA2 3828 0008                  		move.w	obX(a0),d4
0001DEA6 4EF9 0001 1D7A             		jmp	(SolidObject).l
0001DEAC                            ; ===========================================================================
0001DEAC                            
0001DEAC                            locret_1A190:
0001DEAC 4E75                       		rts	
0001DEAE                            ; ===========================================================================
0001DEAE                            
0001DEAE                            loc_1A192:
0001DEAE 217C 0001 B9A6 0004        		move.l	#Map_Eggman,obMap(a0)
0001DEB6 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001DEBC 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DEC2 08E8 0000 0022             		bset	#0,obStatus(a0)
0001DEC8 4EB9 0000 F81A             		jsr	(SpeedToPos).l
0001DECE 0C68 0544 000C             		cmpi.w	#$544,obY(a0)
0001DED4 6400                       		bcc.s	loc_1A1D0
0001DED6 317C 0180 0010             		move.w	#$180,obVelX(a0)
0001DEDC 317C FFE8 0012             		move.w	#-$18,obVelY(a0)
0001DEE2 117C 000F 0020             		move.b	#$F,obColType(a0)
0001DEE8 5428 0034                  		addq.b	#2,$34(a0)
0001DEEC                            
0001DEEC                            loc_1A1D0:
0001DEEC 6000 FF8A                  		bra.w	loc_1A15C
0001DEF0                            ; ===========================================================================
0001DEF0                            
0001DEF0                            loc_1A1D4:
0001DEF0 08E8 0000 0022             		bset	#0,obStatus(a0)
0001DEF6 4EB9 0000 F81A             		jsr	(SpeedToPos).l
0001DEFC 4A68 0030                  		tst.w	$30(a0)
0001DF00 6600                       		bne.s	loc_1A1FC
0001DF02 4A28 0020                  		tst.b	obColType(a0)
0001DF06 6600                       		bne.s	loc_1A216
0001DF08 317C 001E 0030             		move.w	#$1E,$30(a0)
0001DF0E 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001DF14                            
0001DF14                            loc_1A1FC:
0001DF14 5368 0030                  		subq.w	#1,$30(a0)
0001DF18 6600                       		bne.s	loc_1A216
0001DF1A 4A28 0022                  		tst.b	obStatus(a0)
0001DF1E 6A00                       		bpl.s	loc_1A210
0001DF20 317C 0060 0012             		move.w	#$60,obVelY(a0)
0001DF26 6000                       		bra.s	loc_1A216
0001DF28                            ; ===========================================================================
0001DF28                            
0001DF28                            loc_1A210:
0001DF28 117C 000F 0020             		move.b	#$F,obColType(a0)
0001DF2E                            
0001DF2E                            loc_1A216:
0001DF2E 0C78 2790 D008             		cmpi.w	#$2790,(v_player+obX).w
0001DF34 6D00                       		blt.s	loc_1A23A
0001DF36 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w
0001DF3C 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
0001DF42 4278 D020                  		clr.w	(v_player+obInertia).w
0001DF46 4A68 0012                  		tst.w	obVelY(a0)
0001DF4A 6A00                       		bpl.s	loc_1A248
0001DF4C 31FC 0100 F602             		move.w	#$100,(v_jpadhold2).w
0001DF52                            
0001DF52                            loc_1A23A:
0001DF52 0C78 27E0 D008             		cmpi.w	#$27E0,(v_player+obX).w
0001DF58 6D00                       		blt.s	loc_1A248
0001DF5A 31FC 27E0 D008             		move.w	#$27E0,(v_player+obX).w
0001DF60                            
0001DF60                            loc_1A248:
0001DF60 0C68 2900 0008             		cmpi.w	#$2900,obX(a0)
0001DF66 6500                       		bcs.s	loc_1A260
0001DF68 4A28 0001                  		tst.b	obRender(a0)
0001DF6C 6B00                       		bmi.s	loc_1A260
0001DF6E 11FC 0018 F600             		move.b	#$18,(v_gamemode).w
0001DF74 6000 FAF0                  		bra.w	Obj85_Delete
0001DF78                            ; ===========================================================================
0001DF78                            
0001DF78                            loc_1A260:
0001DF78 6000 FEFE                  		bra.w	loc_1A15C
0001DF7C                            ; ===========================================================================
0001DF7C                            
0001DF7C                            loc_1A264:	; Routine 4
0001DF7C 2268 0034                  		movea.l	$34(a0),a1
0001DF80 1011                       		move.b	(a1),d0
0001DF82 B010                       		cmp.b	(a0),d0
0001DF84 6600 FAE0                  		bne.w	Obj85_Delete
0001DF88 117C 0007 001C             		move.b	#7,obAnim(a0)
0001DF8E 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001DF94 6C00                       		bge.s	loc_1A280
0001DF96 6000                       		bra.s	loc_1A2A6
0001DF98                            ; ===========================================================================
0001DF98                            
0001DF98                            loc_1A280:
0001DF98 4A69 0010                  		tst.w	obVelX(a1)
0001DF9C 6700                       		beq.s	loc_1A28C
0001DF9E 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001DFA4                            
0001DFA4                            loc_1A28C:
0001DFA4 43FA D9B0                  		lea	Ani_Eggman(pc),a1
0001DFA8 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
0001DFAE                            
0001DFAE                            loc_1A296:
0001DFAE 2268 0034                  		movea.l	$34(a0),a1
0001DFB2 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001DFB8 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001DFBE                            
0001DFBE                            loc_1A2A6:
0001DFBE 2268 0034                  		movea.l	$34(a0),a1
0001DFC2 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001DFC8 7003                       		moveq	#3,d0
0001DFCA C028 0022                  		and.b	obStatus(a0),d0
0001DFCE 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001DFD4 8128 0001                  		or.b	d0,obRender(a0)
0001DFD8 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001DFDE                            ; ===========================================================================
0001DFDE                            
0001DFDE                            loc_1A2C6:	; Routine 6
0001DFDE 2268 0034                  		movea.l	$34(a0),a1
0001DFE2 1011                       		move.b	(a1),d0
0001DFE4 B010                       		cmp.b	(a0),d0
0001DFE6 6600 FA7E                  		bne.w	Obj85_Delete
0001DFEA 0CA9 0001 B9A6 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001DFF2 6700                       		beq.s	loc_1A2E4
0001DFF4 117C 000A 001A             		move.b	#$A,obFrame(a0)
0001DFFA 60C2                       		bra.s	loc_1A2A6
0001DFFC                            ; ===========================================================================
0001DFFC                            
0001DFFC                            loc_1A2E4:
0001DFFC 117C 0001 001C             		move.b	#1,obAnim(a0)
0001E002 4A29 0021                  		tst.b	obColProp(a1)
0001E006 6F00                       		ble.s	loc_1A312
0001E008 117C 0006 001C             		move.b	#6,obAnim(a0)
0001E00E 217C 0001 B9A6 0004        		move.l	#Map_Eggman,obMap(a0)
0001E016 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001E01C 43FA D938                  		lea	Ani_Eggman(pc),a1
0001E020 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
0001E026 6000 FF86                  		bra.w	loc_1A296
0001E02A                            ; ===========================================================================
0001E02A                            
0001E02A                            loc_1A312:
0001E02A 4A28 0001                  		tst.b	1(a0)
0001E02E 6A00 FA36                  		bpl.w	Obj85_Delete
0001E032 6100 D4CC                  		bsr.w	BossDefeated
0001E036 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001E03C 117C 0000 001C             		move.b	#0,obAnim(a0)
0001E042 217C 0000 0000 0004        		move.l	#Map_FZDamaged,obMap(a0)
0001E04A 317C 03A0 0002             		move.w	#$3A0,obGfx(a0)
0001E050 43FA 0000                  		lea	Ani_FZEgg(pc),a1
0001E054 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
0001E05A 6000 FF52                  		bra.w	loc_1A296
0001E05E                            ; ===========================================================================
0001E05E                            
0001E05E                            loc_1A346:	; Routine 8
0001E05E 08E8 0000 0022             		bset	#0,obStatus(a0)
0001E064 2268 0034                  		movea.l	$34(a0),a1
0001E068 0CA9 0001 B9A6 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001E070 6700                       		beq.s	loc_1A35E
0001E072 6000 FF4A                  		bra.w	loc_1A2A6
0001E076                            ; ===========================================================================
0001E076                            
0001E076                            loc_1A35E:
0001E076 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001E07C 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001E082 4A28 001E                  		tst.b	obTimeFrame(a0)
0001E086 6600                       		bne.s	loc_1A376
0001E088 117C 0014 001E             		move.b	#$14,obTimeFrame(a0)
0001E08E                            
0001E08E                            loc_1A376:
0001E08E 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001E092 6E00                       		bgt.s	loc_1A38A
0001E094 5228 001A                  		addq.b	#1,obFrame(a0)
0001E098 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0001E09E 6E00 F9C6                  		bgt.w	Obj85_Delete
0001E0A2                            
0001E0A2                            loc_1A38A:
0001E0A2 6000 FF0A                  		bra.w	loc_1A296
0001E0A6                            ; ===========================================================================
0001E0A6                            
0001E0A6                            loc_1A38E:	; Routine $A
0001E0A6 117C 000B 001A             		move.b	#$B,obFrame(a0)
0001E0AC 3038 D008                  		move.w	(v_player+obX).w,d0
0001E0B0 9068 0008                  		sub.w	obX(a0),d0
0001E0B4 6500                       		bcs.s	loc_1A3A6
0001E0B6 4A28 0001                  		tst.b	obRender(a0)
0001E0BA 6A00 F9AA                  		bpl.w	Obj85_Delete
0001E0BE                            
0001E0BE                            loc_1A3A6:
0001E0BE 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001E0C4                            ; ===========================================================================
0001E0C4                            
0001E0C4                            loc_1A3AC:	; Routine $C
0001E0C4 117C 0000 001A             		move.b	#0,obFrame(a0)
0001E0CA 08E8 0000 0022             		bset	#0,obStatus(a0)
0001E0D0 2268 0034                  		movea.l	$34(a0),a1
0001E0D4 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001E0DA 6600                       		bne.s	loc_1A3D0
0001E0DC 0CA9 0001 B9A6 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001E0E4 6700 F980                  		beq.w	Obj85_Delete
0001E0E8                            
0001E0E8                            loc_1A3D0:
0001E0E8 6000 FED4                  		bra.w	loc_1A2A6
0001E0EC                            		
0001E0EC                            BossModeMusic:
0001E0EC 0C28 0002 0021             		cmpi.b	#2,obColProp(a0)
0001E0F2 6600 0000                  		bne.w	NormalMode
0001E0F6 4EF9 0000 0000             		jmp	PinchMode
0001E0FC                            
0001E0FC                            NormalMode:
0001E0FC 303C 00AC                  		move.w	#$AC,d0
0001E100 4EB9 0000 12FE             		jsr	(PlaySound_Special).l
0001E106 4E75                       		rts
0001E108                            
0001E108                            PinchMode:
0001E108 303C 0094                  		move.w	#$94,d0
0001E10C 4EB9 0000 12FE             		jsr	(PlaySound_Special).l
0001E112 303C 00E2                  		move.w	#$E2,d0
0001E116 4EB9 0000 12F8             		jsr	(PlaySound).l
0001E11C 4E75                       		rts		
0001E11C 4E75                       		rts		
0001E11E                            		include	"_anim\FZ Eggman in Ship.asm"
0001E11E                            ; ---------------------------------------------------------------------------
0001E11E                            ; Animation script - Eggman (FZ)
0001E11E                            ; ---------------------------------------------------------------------------
0001E11E 0000                       Ani_FZEgg:	dc.w byte_1A3D6-Ani_FZEgg
0001E120 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, afEnd
0001E124                            		even
0001E124                            		even
0001E124                            Map_FZDamaged:	include	"_maps\FZ Damaged Eggmobile.asm"
0001E124                            ; ---------------------------------------------------------------------------
0001E124                            ; Sprite mappings - Eggman in broken eggmobile (FZ)
0001E124                            ; ---------------------------------------------------------------------------
0001E124                            Map_FZDamaged_internal:
0001E124 0000                       		dc.w @damage1-Map_FZDamaged_internal
0001E126 0000                       		dc.w @damage2-Map_FZDamaged_internal
0001E128 06                         @damage1:	dc.b 6
0001E129 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001E12E EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001E133 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001E138 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001E13D FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001E142 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001E147 06                         @damage2:	dc.b 6
0001E148 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001E14D EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001E152 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001E157 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001E15C FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001E161 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001E166                            		even
0001E166                            		even
0001E166                            Map_FZLegs:	include	"_maps\FZ Eggmobile Legs.asm"
0001E166                            ; ---------------------------------------------------------------------------
0001E166                            ; Sprite mappings - legs on Eggman's escape ship (FZ)
0001E166                            ; ---------------------------------------------------------------------------
0001E166                            Map_FZLegs_internal:
0001E166 0000                       		dc.w @extended-Map_FZLegs_internal
0001E168 0000                       		dc.w @halfway-Map_FZLegs_internal
0001E16A 0000                       		dc.w @retracted-Map_FZLegs_internal
0001E16C 02                         @extended:	dc.b 2
0001E16D 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001E172 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001E177 03                         @halfway:	dc.b 3
0001E178 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001E17D 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001E182 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001E187 02                         @retracted:	dc.b 2
0001E188 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001E18D 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001E192                            		even
0001E192                            		even
0001E192                            		include	"_incObj\84 FZ Eggman's Cylinders.asm"
0001E192                            ; ---------------------------------------------------------------------------
0001E192                            ; Object 84 - cylinder Eggman hides in (FZ)
0001E192                            ; ---------------------------------------------------------------------------
0001E192                            
0001E192                            Obj84_Delete:
0001E192 4EF9 0000 F86E             		jmp	(DeleteObject).l
0001E198                            ; ===========================================================================
0001E198                            
0001E198                            EggmanCylinder:
0001E198 7000                       		moveq	#0,d0
0001E19A 1028 0024                  		move.b	obRoutine(a0),d0
0001E19E 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001E1A2 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001E1A6                            ; ===========================================================================
0001E1A6 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001E1A8 0000                       		dc.w loc_1A4CE-Obj84_Index
0001E1AA 0000                       		dc.w loc_1A57E-Obj84_Index
0001E1AC                            
0001E1AC 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001E1B0 2550 0620                  		dc.w $2550, $620
0001E1B4 2490 04C0                  		dc.w $2490, $4C0
0001E1B8 2510 04C0                  		dc.w $2510, $4C0
0001E1BC                            ; ===========================================================================
0001E1BC                            
0001E1BC                            Obj84_Main:	; Routine
0001E1BC 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001E1C0 7000                       		moveq	#0,d0
0001E1C2 1028 0028                  		move.b	obSubtype(a0),d0
0001E1C6 D040                       		add.w	d0,d0
0001E1C8 D2C0                       		adda.w	d0,a1
0001E1CA 117C 0004 0001             		move.b	#4,obRender(a0)
0001E1D0 08E8 0007 0001             		bset	#7,obRender(a0)
0001E1D6 08E8 0004 0001             		bset	#4,obRender(a0)
0001E1DC 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001E1E2 217C 0000 0000 0004        		move.l	#Map_EggCyl,obMap(a0)
0001E1EA 3159 0008                  		move.w	(a1)+,obX(a0)
0001E1EE 3151 000C                  		move.w	(a1),obY(a0)
0001E1F2 3159 0038                  		move.w	(a1)+,$38(a0)
0001E1F6 117C 0020 0016             		move.b	#$20,obHeight(a0)
0001E1FC 117C 0060 0017             		move.b	#$60,obWidth(a0)
0001E202 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001E208 117C 0060 0016             		move.b	#$60,obHeight(a0)
0001E20E 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001E214 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E218                            
0001E218                            loc_1A4CE:	; Routine 2
0001E218 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001E21E 6F00                       		ble.s	loc_1A4DC
0001E220 08E8 0001 0001             		bset	#1,obRender(a0)
0001E226                            
0001E226                            loc_1A4DC:
0001E226 42A8 003C                  		clr.l	$3C(a0)
0001E22A 4A28 0029                  		tst.b	$29(a0)
0001E22E 6700                       		beq.s	loc_1A4EA
0001E230 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E234                            
0001E234                            loc_1A4EA:
0001E234 2028 003C                  		move.l	$3C(a0),d0
0001E238 2228 0038                  		move.l	$38(a0),d1
0001E23C D280                       		add.l	d0,d1
0001E23E 4841                       		swap	d1
0001E240 3141 000C                  		move.w	d1,obY(a0)
0001E244 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0001E24A 6600                       		bne.s	loc_1A524
0001E24C 4A68 0030                  		tst.w	$30(a0)
0001E250 6A00                       		bpl.s	loc_1A524
0001E252 70F6                       		moveq	#-$A,d0
0001E254 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001E25A 6F00                       		ble.s	loc_1A514
0001E25C 700E                       		moveq	#$E,d0
0001E25E                            
0001E25E                            loc_1A514:
0001E25E D240                       		add.w	d0,d1
0001E260 2268 0034                  		movea.l	$34(a0),a1
0001E264 3341 000C                  		move.w	d1,obY(a1)
0001E268 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E26E                            
0001E26E                            loc_1A524:
0001E26E 323C 002B                  		move.w	#$2B,d1
0001E272 343C 0060                  		move.w	#$60,d2
0001E276 363C 0061                  		move.w	#$61,d3
0001E27A 3828 0008                  		move.w	obX(a0),d4
0001E27E 4EB9 0001 1D7A             		jsr	(SolidObject).l
0001E284 7000                       		moveq	#0,d0
0001E286 3228 003C                  		move.w	$3C(a0),d1
0001E28A 6A00                       		bpl.s	loc_1A550
0001E28C 4441                       		neg.w	d1
0001E28E 5141                       		subq.w	#8,d1
0001E290 6500                       		bcs.s	loc_1A55C
0001E292 5200                       		addq.b	#1,d0
0001E294 E841                       		asr.w	#4,d1
0001E296 D041                       		add.w	d1,d0
0001E298 6000                       		bra.s	loc_1A55C
0001E29A                            ; ===========================================================================
0001E29A                            
0001E29A                            loc_1A550:
0001E29A 0441 0027                  		subi.w	#$27,d1
0001E29E 6500                       		bcs.s	loc_1A55C
0001E2A0 5200                       		addq.b	#1,d0
0001E2A2 E841                       		asr.w	#4,d1
0001E2A4 D041                       		add.w	d1,d0
0001E2A6                            
0001E2A6                            loc_1A55C:
0001E2A6 1140 001A                  		move.b	d0,obFrame(a0)
0001E2AA 3038 D008                  		move.w	(v_player+obX).w,d0
0001E2AE 9068 0008                  		sub.w	obX(a0),d0
0001E2B2 6B00                       		bmi.s	loc_1A578
0001E2B4 0440 0140                  		subi.w	#$140,d0
0001E2B8 6B00                       		bmi.s	loc_1A578
0001E2BA 4A28 0001                  		tst.b	obRender(a0)
0001E2BE 6A00 FED2                  		bpl.w	Obj84_Delete
0001E2C2                            
0001E2C2                            loc_1A578:
0001E2C2 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001E2C8                            ; ===========================================================================
0001E2C8                            
0001E2C8                            loc_1A57E:	; Routine 4
0001E2C8 7000                       		moveq	#0,d0
0001E2CA 1028 0028                  		move.b	obSubtype(a0),d0
0001E2CE 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001E2D2 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001E2D6 6000 FF5C                  		bra.w	loc_1A4EA
0001E2DA                            ; ===========================================================================
0001E2DA 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001E2DC 0000                       		dc.w loc_1A598-off_1A590
0001E2DE 0000                       		dc.w loc_1A604-off_1A590
0001E2E0 0000                       		dc.w loc_1A604-off_1A590
0001E2E2                            ; ===========================================================================
0001E2E2                            
0001E2E2                            loc_1A598:
0001E2E2 4A28 0029                  		tst.b	$29(a0)
0001E2E6 6600                       		bne.s	loc_1A5D4
0001E2E8 2268 0034                  		movea.l	$34(a0),a1
0001E2EC 4A29 0021                  		tst.b	obColProp(a1)
0001E2F0 6600                       		bne.s	loc_1A5B4
0001E2F2 6100 D20C                  		bsr.w	BossDefeated
0001E2F6 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001E2FE                            
0001E2FE                            loc_1A5B4:
0001E2FE 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001E306 6400                       		bcc.s	locret_1A602
0001E308 42A8 003C                  		clr.l	$3C(a0)
0001E30C 2268 0034                  		movea.l	$34(a0),a1
0001E310 5369 0032                  		subq.w	#1,$32(a1)
0001E314 4269 0030                  		clr.w	$30(a1)
0001E318 5528 0024                  		subq.b	#2,obRoutine(a0)
0001E31C 4E75                       		rts	
0001E31E                            ; ===========================================================================
0001E31E                            
0001E31E                            loc_1A5D4:
0001E31E 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001E324 6C00                       		bge.s	loc_1A5E4
0001E326 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001E32E                            
0001E32E                            loc_1A5E4:
0001E32E 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001E336 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001E33C 6E00                       		bgt.s	locret_1A602
0001E33E 4268 003E                  		clr.w	$3E(a0)
0001E342 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001E348 4228 0029                  		clr.b	$29(a0)
0001E34C                            
0001E34C                            locret_1A602:
0001E34C 4E75                       		rts	
0001E34E                            ; ===========================================================================
0001E34E                            
0001E34E                            loc_1A604:
0001E34E 08E8 0001 0001             		bset	#1,obRender(a0)
0001E354 4A28 0029                  		tst.b	$29(a0)
0001E358 6600                       		bne.s	loc_1A646
0001E35A 2268 0034                  		movea.l	$34(a0),a1
0001E35E 4A29 0021                  		tst.b	obColProp(a1)
0001E362 6600                       		bne.s	loc_1A626
0001E364 6100 D19A                  		bsr.w	BossDefeated
0001E368 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001E370                            
0001E370                            loc_1A626:
0001E370 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001E378 6400                       		bcc.s	locret_1A674
0001E37A 42A8 003C                  		clr.l	$3C(a0)
0001E37E 2268 0034                  		movea.l	$34(a0),a1
0001E382 5369 0032                  		subq.w	#1,$32(a1)
0001E386 4269 0030                  		clr.w	$30(a1)
0001E38A 5528 0024                  		subq.b	#2,obRoutine(a0)
0001E38E 4E75                       		rts	
0001E390                            ; ===========================================================================
0001E390                            
0001E390                            loc_1A646:
0001E390 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001E396 6D00                       		blt.s	loc_1A656
0001E398 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001E3A0                            
0001E3A0                            loc_1A656:
0001E3A0 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001E3A8 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001E3AE 6D00                       		blt.s	locret_1A674
0001E3B0 4268 003E                  		clr.w	$3E(a0)
0001E3B4 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001E3BA 4228 0029                  		clr.b	$29(a0)
0001E3BE                            
0001E3BE                            locret_1A674:
0001E3BE 4E75                       		rts	
0001E3BE 4E75                       		rts	
0001E3C0                            Map_EggCyl:	include	"_maps\FZ Eggman's Cylinders.asm"
0001E3C0                            ; --------------------------------------------------------------------------------
0001E3C0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001E3C0                            ; --------------------------------------------------------------------------------
0001E3C0                            
0001E3C0                            SME_SCUpI:	
0001E3C0 0000 0000                  		dc.w SME_SCUpI_18-SME_SCUpI, SME_SCUpI_37-SME_SCUpI	
0001E3C4 0000 0000                  		dc.w SME_SCUpI_60-SME_SCUpI, SME_SCUpI_93-SME_SCUpI	
0001E3C8 0000 0000                  		dc.w SME_SCUpI_D0-SME_SCUpI, SME_SCUpI_112-SME_SCUpI	
0001E3CC 0000 0000                  		dc.w SME_SCUpI_159-SME_SCUpI, SME_SCUpI_1A0-SME_SCUpI	
0001E3D0 0000 0000                  		dc.w SME_SCUpI_1E7-SME_SCUpI, SME_SCUpI_22E-SME_SCUpI	
0001E3D4 0000 0000                  		dc.w SME_SCUpI_275-SME_SCUpI, SME_SCUpI_2BC-SME_SCUpI	
0001E3D8 06                         SME_SCUpI_18:	dc.b 6	
0001E3D9 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E3DE B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E3E3 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E3E8 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E3ED B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E3F2 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E3F7 08                         SME_SCUpI_37:	dc.b 8	
0001E3F8 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E3FD B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E402 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E407 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E40C B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E411 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E416 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E41B A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E420 0A                         SME_SCUpI_60:	dc.b $A	
0001E421 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E426 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E42B B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E430 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E435 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E43A D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E43F D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E444 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E449 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E44E A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E453 0C                         SME_SCUpI_93:	dc.b $C	
0001E454 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E459 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E45E B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E463 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E468 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E46D D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E472 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E477 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E47C F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E481 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E486 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E48B A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E490 0D                         SME_SCUpI_D0:	dc.b $D	
0001E491 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E496 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E49B B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E4A0 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E4A5 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E4AA D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E4AF D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E4B4 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E4B9 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E4BE 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E4C3 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E4C8 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E4CD A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E4D2 0E                         SME_SCUpI_112:	dc.b $E	
0001E4D3 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E4D8 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E4DD B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E4E2 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E4E7 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E4EC D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E4F1 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E4F6 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E4FB F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E500 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E505 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E50A 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E50F 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001E514 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E519 0E                         SME_SCUpI_159:	dc.b $E	
0001E51A A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E51F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E524 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E529 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E52E B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E533 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E538 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E53D F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E542 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E547 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E54C 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E551 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E556 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001E55B A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E560 0E                         SME_SCUpI_1A0:	dc.b $E	
0001E561 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E566 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E56B B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E570 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E575 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E57A D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E57F D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E584 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E589 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E58E 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E593 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E598 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E59D 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001E5A2 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E5A7 0E                         SME_SCUpI_1E7:	dc.b $E	
0001E5A8 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E5AD B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E5B2 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E5B7 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E5BC B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E5C1 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E5C6 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E5CB F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E5D0 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E5D5 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E5DA 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E5DF 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E5E4 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001E5E9 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E5EE 0E                         SME_SCUpI_22E:	dc.b $E	
0001E5EF A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E5F4 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E5F9 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E5FE B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E603 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E608 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E60D D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E612 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E617 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E61C 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E621 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E626 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E62B 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001E630 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E635 0E                         SME_SCUpI_275:	dc.b $E	
0001E636 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E63B B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E640 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E645 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E64A B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E64F D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E654 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E659 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E65E F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E663 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E668 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E66D 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E672 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001E677 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E67C 02                         SME_SCUpI_2BC:	dc.b 2	
0001E67D F804 0068 F0               		dc.b $F8, 4, 0, $68, $F0	
0001E682 000C 006A F0               		dc.b 0, $C, 0, $6A, $F0	
0001E688 00                         		even
0001E688 00                         		even
0001E688                            		include	"_incObj\86 FZ Plasma Ball Launcher.asm"
0001E688                            ; ---------------------------------------------------------------------------
0001E688                            ; Object 86 - energy balls (FZ)
0001E688                            ; ---------------------------------------------------------------------------
0001E688                            
0001E688                            BossPlasma:
0001E688 7000                       		moveq	#0,d0
0001E68A 1028 0024                  		move.b	obRoutine(a0),d0
0001E68E 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001E692 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001E696                            ; ===========================================================================
0001E696 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001E698 0000                       		dc.w Obj86_Generator-Obj86_Index
0001E69A 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001E69C 0000                       		dc.w loc_1A962-Obj86_Index
0001E69E 0000                       		dc.w loc_1A982-Obj86_Index
0001E6A0                            ; ===========================================================================
0001E6A0                            
0001E6A0                            Obj86_Main:	; Routine 0
0001E6A0 317C 2588 0008             		move.w	#$2588,obX(a0)
0001E6A6 317C 053C 000C             		move.w	#$53C,obY(a0)
0001E6AC 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001E6B2 217C 0000 0000 0004        		move.l	#Map_PLaunch,obMap(a0)
0001E6BA 117C 0000 001C             		move.b	#0,obAnim(a0)
0001E6C0 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001E6C6 117C 0008 0017             		move.b	#8,obWidth(a0)
0001E6CC 117C 0008 0016             		move.b	#8,obHeight(a0)
0001E6D2 117C 0004 0001             		move.b	#4,obRender(a0)
0001E6D8 08E8 0007 0001             		bset	#7,obRender(a0)
0001E6DE 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E6E2                            
0001E6E2                            Obj86_Generator:; Routine 2
0001E6E2 2268 0034                  		movea.l	$34(a0),a1
0001E6E6 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001E6EC 6600                       		bne.s	loc_1A850
0001E6EE 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001E6F2 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001E6F8 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001E6FE                            ; ===========================================================================
0001E6FE                            
0001E6FE                            loc_1A850:
0001E6FE 117C 0000 001C             		move.b	#0,obAnim(a0)
0001E704 4A28 0029                  		tst.b	$29(a0)
0001E708 6700                       		beq.s	loc_1A86C
0001E70A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E70E 117C 0001 001C             		move.b	#1,obAnim(a0)
0001E714 117C 003E 0028             		move.b	#$3E,obSubtype(a0)
0001E71A                            
0001E71A                            loc_1A86C:
0001E71A 323C 0013                  		move.w	#$13,d1
0001E71E 343C 0008                  		move.w	#8,d2
0001E722 363C 0011                  		move.w	#$11,d3
0001E726 3828 0008                  		move.w	obX(a0),d4
0001E72A 4EB9 0001 1D7A             		jsr	(SolidObject).l
0001E730 3038 D008                  		move.w	(v_player+obX).w,d0
0001E734 9068 0008                  		sub.w	obX(a0),d0
0001E738 6B00                       		bmi.s	loc_1A89A
0001E73A 0440 0140                  		subi.w	#$140,d0
0001E73E 6B00                       		bmi.s	loc_1A89A
0001E740 4A28 0001                  		tst.b	obRender(a0)
0001E744 6A00 FA4C                  		bpl.w	Obj84_Delete
0001E748                            
0001E748                            loc_1A89A:
0001E748 43FA 0000                  		lea	Ani_PLaunch(pc),a1
0001E74C 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
0001E752 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001E758                            ; ===========================================================================
0001E758                            
0001E758                            Obj86_MakeBalls:; Routine 4
0001E758 4A28 0029                  		tst.b	$29(a0)
0001E75C 6700 0000                  		beq.w	loc_1A954
0001E760 4228 0029                  		clr.b	$29(a0)
0001E764 D068 0030                  		add.w	$30(a0),d0
0001E768 0240 001E                  		andi.w	#$1E,d0
0001E76C D4C0                       		adda.w	d0,a2
0001E76E 5868 0030                  		addq.w	#4,$30(a0)
0001E772 4268 0032                  		clr.w	$32(a0)
0001E776 7403                       		moveq	#3,d2
0001E778                            
0001E778                            Obj86_Loop:
0001E778 4EB9 0000 FDDE             		jsr	(FindNextFreeObj).l
0001E77E 6600 0000                  		bne.w	loc_1A954
0001E782 12BC 0086                  		move.b	#id_BossPlasma,(a1)
0001E786 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E78C 337C 053C 000C             		move.w	#$53C,obY(a1)
0001E792 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001E798 337C 2300 0002             		move.w	#$2300,obGfx(a1)
0001E79E 237C 0000 0000 0004        		move.l	#Map_Plasma,obMap(a1)
0001E7A6 137C 000C 0016             		move.b	#$C,obHeight(a1)
0001E7AC 137C 000C 0017             		move.b	#$C,obWidth(a1)
0001E7B2 137C 0000 0020             		move.b	#0,obColType(a1)
0001E7B8 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001E7BE 337C 003E 0028             		move.w	#$3E,obSubtype(a1)
0001E7C4 137C 0004 0001             		move.b	#4,obRender(a1)
0001E7CA 08E9 0007 0001             		bset	#7,obRender(a1)
0001E7D0 2348 0034                  		move.l	a0,$34(a1)
0001E7D4 4EB9 0000 3D02             		jsr	(RandomNumber).l
0001E7DA 3228 0032                  		move.w	$32(a0),d1
0001E7DE C3FC FFB1                  		muls.w	#-$4F,d1
0001E7E2 0641 2578                  		addi.w	#$2578,d1
0001E7E6 0240 001F                  		andi.w	#$1F,d0
0001E7EA 0440 0010                  		subi.w	#$10,d0
0001E7EE D041                       		add.w	d1,d0
0001E7F0 3340 0030                  		move.w	d0,$30(a1)
0001E7F4 5268 0032                  		addq.w	#1,$32(a0)
0001E7F8 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001E7FE 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001E802                            
0001E802                            loc_1A954:
0001E802 4A68 0032                  		tst.w	$32(a0)
0001E806 6600                       		bne.s	loc_1A95E
0001E808 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E80C                            
0001E80C                            loc_1A95E:
0001E80C 6000 FF0C                  		bra.w	loc_1A86C
0001E810                            ; ===========================================================================
0001E810                            
0001E810                            loc_1A962:	; Routine 6
0001E810 117C 0002 001C             		move.b	#2,obAnim(a0)
0001E816 4A68 0038                  		tst.w	$38(a0)
0001E81A 6600                       		bne.s	loc_1A97E
0001E81C 117C 0002 0024             		move.b	#2,obRoutine(a0)
0001E822 2268 0034                  		movea.l	$34(a0),a1
0001E826 337C FFFF 0032             		move.w	#-1,$32(a1)
0001E82C                            
0001E82C                            loc_1A97E:
0001E82C 6000 FEEC                  		bra.w	loc_1A86C
0001E830                            ; ===========================================================================
0001E830                            
0001E830                            loc_1A982:	; Routine 8
0001E830 7000                       		moveq	#0,d0
0001E832 1028 0025                  		move.b	ob2ndRout(a0),d0
0001E836 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001E83A 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001E83E 43FA 0000                  		lea	Ani_Plasma(pc),a1
0001E842 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
0001E848 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001E84E                            ; ===========================================================================
0001E84E 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001E850 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001E852 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001E854                            ; ===========================================================================
0001E854                            
0001E854                            loc_1A9A6:
0001E854 3028 0030                  		move.w	$30(a0),d0
0001E858 9068 0008                  		sub.w	obX(a0),d0
0001E85C E940                       		asl.w	#4,d0
0001E85E 3140 0010                  		move.w	d0,obVelX(a0)
0001E862 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001E868 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001E86C 4E75                       		rts	
0001E86E                            ; ===========================================================================
0001E86E                            
0001E86E                            loc_1A9C0:
0001E86E 4A68 0010                  		tst.w	obVelX(a0)
0001E872 6700                       		beq.s	loc_1A9E6
0001E874 4EB9 0000 F81A             		jsr	(SpeedToPos).l
0001E87A 3028 0008                  		move.w	obX(a0),d0
0001E87E 9068 0030                  		sub.w	$30(a0),d0
0001E882 6400                       		bcc.s	loc_1A9E6
0001E884 4268 0010                  		clr.w	obVelX(a0)
0001E888 D168 0008                  		add.w	d0,obX(a0)
0001E88C 2268 0034                  		movea.l	$34(a0),a1
0001E890 5369 0032                  		subq.w	#1,$32(a1)
0001E894                            
0001E894                            loc_1A9E6:
0001E894 117C 0000 001C             		move.b	#0,obAnim(a0)
0001E89A 5368 0028                  		subq.w	#1,obSubtype(a0)
0001E89E 6600                       		bne.s	locret_1AA1C
0001E8A0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001E8A4 117C 0001 001C             		move.b	#1,obAnim(a0)
0001E8AA 117C 009A 0020             		move.b	#$9A,obColType(a0)
0001E8B0 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001E8B6 7000                       		moveq	#0,d0
0001E8B8 3038 D008                  		move.w	(v_player+obX).w,d0
0001E8BC 9068 0008                  		sub.w	obX(a0),d0
0001E8C0 3140 0010                  		move.w	d0,obVelX(a0)
0001E8C4 317C 0140 0012             		move.w	#$140,obVelY(a0)
0001E8CA                            
0001E8CA                            locret_1AA1C:
0001E8CA 4E75                       		rts	
0001E8CC                            ; ===========================================================================
0001E8CC                            
0001E8CC                            loc_1AA1E:
0001E8CC 4EB9 0000 F81A             		jsr	(SpeedToPos).l
0001E8D2 0C68 05E0 000C             		cmpi.w	#$5E0,obY(a0)
0001E8D8 6400                       		bcc.s	loc_1AA34
0001E8DA 5368 0028                  		subq.w	#1,obSubtype(a0)
0001E8DE 6700                       		beq.s	loc_1AA34
0001E8E0 4E75                       		rts	
0001E8E2                            ; ===========================================================================
0001E8E2                            
0001E8E2                            loc_1AA34:
0001E8E2 2268 0034                  		movea.l	$34(a0),a1
0001E8E6 5369 0038                  		subq.w	#1,$38(a1)
0001E8EA 6000 F8A6                  		bra.w	Obj84_Delete
0001E8EA 6000 F8A6                  		bra.w	Obj84_Delete
0001E8EE                            		include	"_anim\Plasma Ball Launcher.asm"
0001E8EE                            ; ---------------------------------------------------------------------------
0001E8EE                            ; Animation script - energy ball launcher (FZ)
0001E8EE                            ; ---------------------------------------------------------------------------
0001E8EE 0000                       Ani_PLaunch:	dc.w @red-Ani_PLaunch
0001E8F0 0000                       		dc.w @redsparking-Ani_PLaunch
0001E8F2 0000                       		dc.w @whitesparking-Ani_PLaunch
0001E8F4 7E00 FF                    @red:		dc.b $7E, 0, afEnd
0001E8F8 00                         		even
0001E8F8 0100 0200 03FF             @redsparking:	dc.b 1,	0, 2, 0, 3, afEnd
0001E8FE                            		even
0001E8FE 0101 0201 03FF             @whitesparking:	dc.b 1,	1, 2, 1, 3, afEnd
0001E904                            		even
0001E904                            		even
0001E904                            Map_PLaunch:	include	"_maps\Plasma Ball Launcher.asm"
0001E904                            ; ---------------------------------------------------------------------------
0001E904                            ; Sprite mappings - energy ball	launcher (FZ)
0001E904                            ; ---------------------------------------------------------------------------
0001E904                            Map_PLaunch_internal:
0001E904 0000                       		dc.w @red-Map_PLaunch_internal
0001E906 0000                       		dc.w @white-Map_PLaunch_internal
0001E908 0000                       		dc.w @sparking1-Map_PLaunch_internal
0001E90A 0000                       		dc.w @sparking2-Map_PLaunch_internal
0001E90C 01                         @red:		dc.b 1
0001E90D F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001E912 01                         @white:		dc.b 1
0001E913 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001E918 01                         @sparking1:	dc.b 1
0001E919 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001E91E 01                         @sparking2:	dc.b 1
0001E91F F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001E924                            		even
0001E924                            		even
0001E924                            		include	"_anim\Plasma Balls.asm"
0001E924                            ; ---------------------------------------------------------------------------
0001E924                            ; Animation script - energy balls (FZ)
0001E924                            ; ---------------------------------------------------------------------------
0001E924 0000                       Ani_Plasma:	dc.w @full-Ani_Plasma
0001E926 0000                       		dc.w @short-Ani_Plasma
0001E928 0100 0A08 0A01 0A09 0A06+  @full:		dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001E937 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001E946 0A05 FF                    		dc.b $A, 5, afEnd
0001E94A 00                         		even
0001E94A 0006 0501 0507 0501 05FF   @short:		dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	afEnd
0001E954                            		even
0001E954                            		even
0001E954                            Map_Plasma:	include	"_maps\Plasma Balls.asm"
0001E954                            ; ---------------------------------------------------------------------------
0001E954                            ; Sprite mappings - energy balls (FZ)
0001E954                            ; ---------------------------------------------------------------------------
0001E954                            Map_Plasma_internal:
0001E954 0000                       		dc.w @fuzzy1-Map_Plasma_internal
0001E956 0000                       		dc.w @fuzzy2-Map_Plasma_internal
0001E958 0000                       		dc.w @white1-Map_Plasma_internal
0001E95A 0000                       		dc.w @white2-Map_Plasma_internal
0001E95C 0000                       		dc.w @white3-Map_Plasma_internal
0001E95E 0000                       		dc.w @white4-Map_Plasma_internal
0001E960 0000                       		dc.w @fuzzy3-Map_Plasma_internal
0001E962 0000                       		dc.w @fuzzy4-Map_Plasma_internal
0001E964 0000                       		dc.w @fuzzy5-Map_Plasma_internal
0001E966 0000                       		dc.w @fuzzy6-Map_Plasma_internal
0001E968 0000                       		dc.w @blank-Map_Plasma_internal
0001E96A 02                         @fuzzy1:	dc.b 2
0001E96B F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001E970 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001E975 02                         @fuzzy2:	dc.b 2
0001E976 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001E97B F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001E980 02                         @white1:	dc.b 2
0001E981 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001E986 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001E98B 02                         @white2:	dc.b 2
0001E98C F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001E991 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001E996 02                         @white3:	dc.b 2
0001E997 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001E99C 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001E9A1 02                         @white4:	dc.b 2
0001E9A2 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001E9A7 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001E9AC 01                         @fuzzy3:	dc.b 1
0001E9AD F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001E9B2 01                         @fuzzy4:	dc.b 1
0001E9B3 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001E9B8 02                         @fuzzy5:	dc.b 2
0001E9B9 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001E9BE 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001E9C3 02                         @fuzzy6:	dc.b 2
0001E9C4 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001E9C9 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001E9CE 00                         @blank:		dc.b 0
0001E9D0 00                         		even
0001E9D0 00                         		even
0001E9D0                            
0001E9D0                            		include	"_incObj\3E Prison Capsule.asm"
0001E9D0                            ; ---------------------------------------------------------------------------
0001E9D0                            ; Object 3E - prison capsule
0001E9D0                            ; ---------------------------------------------------------------------------
0001E9D0                            
0001E9D0                            Prison:
0001E9D0 7000                       		moveq	#0,d0
0001E9D2 1028 0024                  		move.b	obRoutine(a0),d0
0001E9D6 323B 0000                  		move.w	Pri_Index(pc,d0.w),d1
0001E9DA 4EBB 1000                  		jsr	Pri_Index(pc,d1.w)
0001E9FA 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001EA00                            
0001EA00                            	@delete:
0001EA00 4EF9 0000 F86E             		jmp	(DeleteObject).l
0001EA06                            ; ===========================================================================
0001EA06 0000                       Pri_Index:	dc.w Pri_Main-Pri_Index
0001EA08 0000                       		dc.w Pri_BodyMain-Pri_Index
0001EA0A 0000                       		dc.w Pri_Switched-Pri_Index
0001EA0C 0000                       		dc.w Pri_Explosion-Pri_Index
0001EA0E 0000                       		dc.w Pri_Explosion-Pri_Index
0001EA10 0000                       		dc.w Pri_Explosion-Pri_Index
0001EA12 0000                       		dc.w Pri_Animals-Pri_Index
0001EA14 0000                       		dc.w Pri_EndAct-Pri_Index
0001EA16                            
0001EA16 =00000030                  pri_origY:	equ $30		; original y-axis position
0001EA16                            
0001EA16 0220 0400                  Pri_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001EA1A 040C 0501                  		dc.b 4,	$C, 5, 1
0001EA1E 0610 0403                  		dc.b 6,	$10, 4,	3
0001EA22 0810 0305                  		dc.b 8,	$10, 3,	5
0001EA26                            ; ===========================================================================
0001EA26                            
0001EA26                            Pri_Main:	; Routine 0
0001EA26 217C 0000 0000 0004        		move.l	#Map_Pri,obMap(a0)
0001EA2E 317C 049D 0002             		move.w	#$49D,obGfx(a0)
0001EA34 117C 0004 0001             		move.b	#4,obRender(a0)
0001EA3A 3168 000C 0030             		move.w	obY(a0),pri_origY(a0)
0001EA40 7000                       		moveq	#0,d0
0001EA42 1028 0028                  		move.b	obSubtype(a0),d0
0001EA46 E548                       		lsl.w	#2,d0
0001EA48 43FB 00CC                  		lea	Pri_Var(pc,d0.w),a1
0001EA4C 1159 0024                  		move.b	(a1)+,obRoutine(a0)
0001EA50 1159 0014                  		move.b	(a1)+,obActWid(a0)
0001EA54 1159 0018                  		move.b	(a1)+,obPriority(a0)
0001EA58 3028 0018                  		move.w obPriority(a0),d0 
0001EA5C E248                       		lsr.w #1,d0 
0001EA5E 0240 0380                  		andi.w #$380,d0 
0001EA62 3140 0018                  		move.w d0,obPriority(a0)		
0001EA66 1159 001A                  		move.b	(a1)+,obFrame(a0)
0001EA6A 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001EA6E 6600                       		bne.s	@not02		; if not, branch
0001EA70                            
0001EA70 117C 0006 0020             		move.b	#6,obColType(a0)
0001EA76 117C 0008 0021             		move.b	#8,obColProp(a0)
0001EA7C                            
0001EA7C                            	@not02:
0001EA7C 4E75                       		rts	
0001EA7E                            ; ===========================================================================
0001EA7E                            
0001EA7E                            Pri_BodyMain:	; Routine 2
0001EA7E 0C38 0002 F7A7             		cmpi.b	#2,(v_bossstatus).w
0001EA84 6700                       		beq.s	@chkopened
0001EA86 323C 002B                  		move.w	#$2B,d1
0001EA8A 343C 0018                  		move.w	#$18,d2
0001EA8E 363C 0018                  		move.w	#$18,d3
0001EA92 3828 0008                  		move.w	obX(a0),d4
0001EA96 4EF9 0001 1D7A             		jmp	(SolidObject).l
0001EA9C                            ; ===========================================================================
0001EA9C                            
0001EA9C                            @chkopened:
0001EA9C 4A28 0025                  		tst.b	ob2ndRout(a0)	; has the prison been opened?
0001EAA0 6700                       		beq.s	@open		; if yes, branch
0001EAA2 4228 0025                  		clr.b	ob2ndRout(a0)
0001EAA6 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001EAAC 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001EAB2                            
0001EAB2                            	@open:
0001EAB2 117C 0002 001A             		move.b	#2,obFrame(a0)	; use frame number 2 (destroyed	prison)
0001EAB8                            		
0001EAB8                            	@rts:
0001EAB8 4E75                       		rts
0001EABA                            ; ===========================================================================
0001EABA                            
0001EABA                            Pri_Switched:	; Routine 4
0001EABA 323C 0017                  		move.w	#$17,d1
0001EABE 343C 0008                  		move.w	#8,d2
0001EAC2 363C 0008                  		move.w	#8,d3
0001EAC6 3828 0008                  		move.w	obX(a0),d4
0001EACA 4EB9 0001 1D7A             		jsr	(SolidObject).l
0001EAD0 43F9 0000 0000             		lea	(Ani_Pri).l,a1
0001EAD6 4EB9 0000 C8E4             		jsr	(AnimateSprite).l
0001EADC 3168 0030 000C             		move.w	pri_origY(a0),obY(a0)
0001EAE2 4A28 0025                  		tst.b	ob2ndRout(a0)	; has prison already been opened?
0001EAE6 6700                       		beq.s	@open2		; if yes, branch
0001EAE8                            
0001EAE8 5068 000C                  		addq.w	#8,obY(a0)
0001EAEC 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0001EAF2 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time between animal spawns
0001EAF8 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
0001EAFC 4238 F7AA                  		clr.b	(f_lockscreen).w ; lock screen position
0001EB00 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
0001EB06 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; make Sonic run to the right
0001EB0C 4228 0025                  		clr.b	ob2ndRout(a0)
0001EB10 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001EB16 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001EB1C 4A38 F5C3                  		tst.b	(f_emeraldm).w
0001EB20 6700                       		beq.s	@open2
0001EB22 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001EB30                            
0001EB30                            	@open2:
0001EB30 4E75                       		rts	
0001EB32                            ; ===========================================================================
0001EB32                            
0001EB32                            Pri_Explosion:	; Routine 6, 8, $A
0001EB32 7007                       		moveq	#7,d0
0001EB34 C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001EB38 6600                       		bne.s	@noexplosion
0001EB3A 4EB9 0000 FDC8             		jsr	(FindFreeObj).l
0001EB40 6600                       		bne.s	@noexplosion
0001EB42 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1) ; load explosion object
0001EB46 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001EB4C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001EB52 4EB9 0000 3D02             		jsr	(RandomNumber).l
0001EB58 7200                       		moveq	#0,d1
0001EB5A 1200                       		move.b	d0,d1
0001EB5C E409                       		lsr.b	#2,d1
0001EB5E 0441 0020                  		subi.w	#$20,d1
0001EB62 D369 0008                  		add.w	d1,obX(a1)
0001EB66 E048                       		lsr.w	#8,d0
0001EB68 E608                       		lsr.b	#3,d0
0001EB6A D169 000C                  		add.w	d0,obY(a1)
0001EB6E                            
0001EB6E                            	@noexplosion:
0001EB6E 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001EB72 6700                       		beq.s	@makeanimal
0001EB74 4E75                       		rts	
0001EB76                            ; ===========================================================================
0001EB76                            
0001EB76                            @makeanimal:
0001EB76 11FC 0002 F7A7             		move.b	#2,(v_bossstatus).w
0001EB7C 117C 000C 0024             		move.b	#$C,obRoutine(a0)	; replace explosions with animals
0001EB82 117C 0006 001A             		move.b	#6,obFrame(a0)
0001EB88 317C 0096 001E             		move.w	#150,obTimeFrame(a0)
0001EB8E 0668 0020 000C             		addi.w	#$20,obY(a0)
0001EB94 7C07                       		moveq	#7,d6
0001EB96 3A3C 009A                  		move.w	#$9A,d5
0001EB9A 78E4                       		moveq	#-$1C,d4
0001EB9C                            
0001EB9C                            	@loop:
0001EB9C 4EB9 0000 FDC8             		jsr	(FindFreeObj).l
0001EBA2 6600                       		bne.s	@fail
0001EBA4 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001EBA8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001EBAE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001EBB4 D969 0008                  		add.w	d4,obX(a1)
0001EBB8 5E44                       		addq.w	#7,d4
0001EBBA 3345 0036                  		move.w	d5,$36(a1)
0001EBBE 5145                       		subq.w	#8,d5
0001EBC0 51CE FFDA                  		dbf	d6,@loop	; repeat 7 more	times
0001EBC4                            
0001EBC4                            	@fail:
0001EBC4 4E75                       		rts	
0001EBC6                            ; ===========================================================================
0001EBC6                            
0001EBC6                            Pri_Animals:	; Routine $C
0001EBC6 7007                       		moveq	#7,d0
0001EBC8 C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001EBCC 6600                       		bne.s	@noanimal
0001EBCE 4EB9 0000 FDC8             		jsr	(FindFreeObj).l
0001EBD4 6600                       		bne.s	@noanimal
0001EBD6 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001EBDA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001EBE0 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001EBE6 4EB9 0000 3D02             		jsr	(RandomNumber).l
0001EBEC 0240 001F                  		andi.w	#$1F,d0
0001EBF0 5D40                       		subq.w	#6,d0
0001EBF2 4A41                       		tst.w	d1
0001EBF4 6A00                       		bpl.s	@ispositive
0001EBF6 4440                       		neg.w	d0
0001EBF8                            
0001EBF8                            	@ispositive:
0001EBF8 D169 0008                  		add.w	d0,obX(a1)
0001EBFC 337C 000C 0036             		move.w	#$C,$36(a1)
0001EC02                            
0001EC02                            	@noanimal:
0001EC02 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001EC06 6600                       		bne.s	@wait
0001EC08 5428 0024                  		addq.b	#2,obRoutine(a0)
0001EC0C 317C 00B4 001E             		move.w	#180,obTimeFrame(a0)
0001EC12                            
0001EC12                            	@wait:
0001EC12 4E75                       		rts	
0001EC14                            ; ===========================================================================
0001EC14                            
0001EC14                            Pri_EndAct:	; Routine $E
0001EC14 703E                       		moveq	#$3E,d0
0001EC16 7228                       		moveq	#id_Animals,d1
0001EC18 7440                       		moveq	#$40,d2
0001EC1A 43F8 D040                  		lea	(v_objspace+$40).w,a1 ; load object RAM
0001EC1E                            
0001EC1E                            	@findanimal:
0001EC1E B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001EC20 6700                       		beq.s	@found		; if yes, branch
0001EC22 D2C2                       		adda.w	d2,a1		; next object RAM
0001EC24 51C8 FFF8                  		dbf	d0,@findanimal	; repeat $3E times
0001EC28                            
0001EC28 4EB9 0001 109C             		jsr	(GotThroughAct1).l
0001EC2E 4EF9 0000 F86E             		jmp	(DeleteObject).l
0001EC34                            
0001EC34                            	@found:
0001EC34 4E75                       		rts	
0001EC34 4E75                       		rts	
0001EC36                            		include	"_anim\Prison Capsule.asm"
0001EC36                            ; ---------------------------------------------------------------------------
0001EC36                            ; Animation script - prison capsule
0001EC36                            ; ---------------------------------------------------------------------------
0001EC36 0000                       Ani_Pri:	dc.w @switchflash-Ani_Pri
0001EC38 0000                       		dc.w @switchflash-Ani_Pri
0001EC3A 0201 03FF                  @switchflash:	dc.b 2,	1, 3, afEnd
0001EC3E                            		even
0001EC3E                            		even
0001EC3E                            Map_Pri:	include	"_maps\Prison Capsule.asm"
0001EC3E                            ; ---------------------------------------------------------------------------
0001EC3E                            ; Sprite mappings - prison capsule
0001EC3E                            ; ---------------------------------------------------------------------------
0001EC3E                            Map_Pri_internal:
0001EC3E 0000                       		dc.w @capsule-Map_Pri_internal
0001EC40 0000                       		dc.w @switch1-Map_Pri_internal
0001EC42 0000                       		dc.w @broken-Map_Pri_internal
0001EC44 0000                       		dc.w @switch2-Map_Pri_internal
0001EC46 0000                       		dc.w @unusedthing1-Map_Pri_internal
0001EC48 0000                       		dc.w @unusedthing2-Map_Pri_internal
0001EC4A 0000                       		dc.w @blank-Map_Pri_internal
0001EC4C 07                         @capsule:	dc.b 7
0001EC4D E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001EC52 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001EC57 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001EC5C F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001EC61 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001EC66 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001EC6B 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001EC70 01                         @switch1:	dc.b 1
0001EC71 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001EC76 06                         @broken:	dc.b 6
0001EC77 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001EC7C 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001EC81 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001EC86 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001EC8B 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001EC90 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001EC95 01                         @switch2:	dc.b 1
0001EC96 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001EC9B 02                         @unusedthing1:	dc.b 2
0001EC9C E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001ECA1 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001ECA6 01                         @unusedthing2:	dc.b 1
0001ECA7 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001ECAC 00                         @blank:		dc.b 0
0001ECAE 00                         		even
0001ECAE 00                         		even
0001ECAE                            
0001ECAE                            		include	"_incObj\sub ReactToItem.asm"
0001ECAE                            ; ---------------------------------------------------------------------------
0001ECAE                            ; Subroutine to react to obColType(a0)
0001ECAE                            ; ---------------------------------------------------------------------------
0001ECAE                            
0001ECAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ECAE                            
0001ECAE                            
0001ECAE                            ReactToItem:
0001ECAE 4E71                       		nop	
0001ECB0 3428 0008                  		move.w	obX(a0),d2	; load Sonic's x-axis position
0001ECB4 3628 000C                  		move.w	obY(a0),d3	; load Sonic's y-axis position
0001ECB8 5142                       		subq.w	#8,d2
0001ECBA 7A00                       		moveq	#0,d5
0001ECBC 1A28 0016                  		move.b	obHeight(a0),d5	; load Sonic's height
0001ECC0 5705                       		subq.b	#3,d5
0001ECC2 9645                       		sub.w	d5,d3
0001ECC4 0C28 0071 001A             		cmpi.b	#fr_Duck,obFrame(a0) ; is Sonic ducking?
0001ECCA 6600                       		bne.s	@notducking	; if not, branch
0001ECCC 0643 000C                  		addi.w	#$C,d3
0001ECD0 7A0A                       		moveq	#$A,d5
0001ECD2                            
0001ECD2                            	@notducking:
0001ECD2 383C 0010                  		move.w	#$10,d4
0001ECD6 DA45                       		add.w	d5,d5
0001ECD8 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; set object RAM start address
0001ECDC 3C3C 005F                  		move.w	#$5F,d6
0001ECE0                            
0001ECE0                            @loop:
0001ECE0 4A29 0001                  		tst.b	obRender(a1)
0001ECE4 6A00                       		bpl.s	@next
0001ECE6 1029 0020                  		move.b	obColType(a1),d0 ; load collision type
0001ECEA 6600                       		bne.s	@proximity	; if nonzero, branch
0001ECEC                            
0001ECEC                            	@next:
0001ECEC 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001ECF0 51CE FFEE                  		dbf	d6,@loop	; repeat $5F more times
0001ECF4                            
0001ECF4 7000                       		moveq	#0,d0
0001ECF6 4E75                       		rts	
0001ECF8                            ; ===========================================================================
0001ECF8                            @sizes:		;   width, height
0001ECF8 1414                       		dc.b  $14, $14		; $01
0001ECFA 0C14                       		dc.b   $C, $14		; $02
0001ECFC 140C                       		dc.b  $14,  $C		; $03
0001ECFE 0410                       		dc.b	4, $10		; $04
0001ED00 0C12                       		dc.b   $C, $12		; $05
0001ED02 1010                       		dc.b  $10, $10		; $06
0001ED04 0606                       		dc.b	6,   6		; $07
0001ED06 180C                       		dc.b  $18,  $C		; $08
0001ED08 0C10                       		dc.b   $C, $10		; $09
0001ED0A 100C                       		dc.b  $10,  $C		; $0A
0001ED0C 0808                       		dc.b	8,   8		; $0B
0001ED0E 1410                       		dc.b  $14, $10		; $0C
0001ED10 1408                       		dc.b  $14,   8		; $0D
0001ED12 0E0E                       		dc.b   $E,  $E		; $0E
0001ED14 1818                       		dc.b  $18, $18		; $0F
0001ED16 2810                       		dc.b  $28, $10		; $10
0001ED18 1018                       		dc.b  $10, $18		; $11
0001ED1A 0810                       		dc.b	8, $10		; $12
0001ED1C 2070                       		dc.b  $20, $70		; $13
0001ED1E 4020                       		dc.b  $40, $20		; $14
0001ED20 8020                       		dc.b  $80, $20		; $15
0001ED22 2020                       		dc.b  $20, $20		; $16
0001ED24 0808                       		dc.b	8,   8		; $17
0001ED26 0404                       		dc.b	4,   4		; $18
0001ED28 2008                       		dc.b  $20,   8		; $19
0001ED2A 0C0C                       		dc.b   $C,  $C		; $1A
0001ED2C 0804                       		dc.b	8,   4		; $1B
0001ED2E 1804                       		dc.b  $18,   4		; $1C
0001ED30 2804                       		dc.b  $28,   4		; $1D
0001ED32 0408                       		dc.b	4,   8		; $1E
0001ED34 0418                       		dc.b	4, $18		; $1F
0001ED36 0428                       		dc.b	4, $28		; $20
0001ED38 0420                       		dc.b	4, $20		; $21
0001ED3A 1818                       		dc.b  $18, $18		; $22
0001ED3C 0C18                       		dc.b   $C, $18		; $23
0001ED3E 4808                       		dc.b  $48,   8		; $24
0001ED40                            ; ===========================================================================
0001ED40                            
0001ED40                            @proximity:
0001ED40 0240 003F                  		andi.w	#$3F,d0
0001ED44 D040                       		add.w	d0,d0
0001ED46 45FB 00AE                  		lea	@sizes-2(pc,d0.w),a2
0001ED4A 7200                       		moveq	#0,d1
0001ED4C 121A                       		move.b	(a2)+,d1
0001ED4E 3029 0008                  		move.w	obX(a1),d0
0001ED52 9041                       		sub.w	d1,d0
0001ED54 9042                       		sub.w	d2,d0
0001ED56 6400                       		bcc.s	@outsidex	; branch if not touching
0001ED58 D241                       		add.w	d1,d1
0001ED5A D041                       		add.w	d1,d0
0001ED5C 6500                       		bcs.s	@withinx	; branch if touching
0001ED5E 6000 FF8C                  		bra.w	@next
0001ED62                            ; ===========================================================================
0001ED62                            
0001ED62                            @outsidex:
0001ED62 B044                       		cmp.w	d4,d0
0001ED64 6200 FF86                  		bhi.w	@next
0001ED68                            
0001ED68                            @withinx:
0001ED68 7200                       		moveq	#0,d1
0001ED6A 121A                       		move.b	(a2)+,d1
0001ED6C 3029 000C                  		move.w	obY(a1),d0
0001ED70 9041                       		sub.w	d1,d0
0001ED72 9043                       		sub.w	d3,d0
0001ED74 6400                       		bcc.s	@outsidey	; branch if not touching
0001ED76 D241                       		add.w	d1,d1
0001ED78 D240                       		add.w	d0,d1
0001ED7A 6500                       		bcs.s	@withiny	; branch if touching
0001ED7C 6000 FF6E                  		bra.w	@next
0001ED80                            
0001ED80                            ; ===========================================================================
0001ED80                            
0001ED80                            @outsidey:
0001ED80 B045                       		cmp.w	d5,d0
0001ED82 6200 FF68                  		bhi.w	@next
0001ED86                            
0001ED86                            @withiny:
0001ED86                            	@chktype:
0001ED86 1229 0020                          	move.b	obColType(a1),d1 ; load collision type
0001ED8A 0201 00C0                  		andi.b	#$C0,d1        ; is obColType $40 or higher?
0001ED8E 6700 0000                  		beq.w	React_Enemy    ; if not, branch
0001ED92 0C01 00C0                  		cmpi.b	#$C0,d1		; is obColType $C0 or higher?
0001ED96 6700 0000                  		beq.w	React_Special	; if yes, branch
0001ED9A 4A01                       		tst.b	d1		; is obColType $80-$BF?
0001ED9C 6B00 0000                  		bmi.w	React_ChkHurt	; if yes, branch
0001EDA0                            
0001EDA0                            ; obColType is $40-$7F (powerups)
0001EDA0                            
0001EDA0 1029 0020                  		move.b	obColType(a1),d0
0001EDA4 0200 003F                  		andi.b	#$3F,d0
0001EDA8 0C00 0006                  		cmpi.b	#6,d0		; is collision type $46	?
0001EDAC 6700                       		beq.s	React_Monitor	; if yes, branch
0001EDAE 0C68 005A 0030             		cmpi.w	#90,$30(a0)	; is Sonic invincible?
0001EDB4 6400 0000                  		bcc.w	@invincible	; if yes, branch
0001EDB8 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the object's routine counter
0001EDBC                            
0001EDBC                            	@invincible:
0001EDBC 4E75                       		rts	
0001EDBE                            ; ===========================================================================
0001EDBE                            
0001EDBE                            React_Monitor:
0001EDBE 4A68 0012                  		tst.w	obVelY(a0)	; is Sonic moving upwards?
0001EDC2 6A00                       		bpl.s	@movingdown	; if not, branch
0001EDC4                            
0001EDC4 3028 000C                  		move.w	obY(a0),d0
0001EDC8 0440 0010                  		subi.w	#$10,d0
0001EDCC B069 000C                  		cmp.w	obY(a1),d0
0001EDD0 6500                       		bcs.s	@donothing
0001EDD2 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's vertical speed
0001EDD6 337C FE80 0012             		move.w	#-$180,obVelY(a1)
0001EDDC 4A29 0025                  		tst.b	ob2ndRout(a1)
0001EDE0 6600                       		bne.s	@donothing
0001EDE2 5829 0025                  		addq.b	#4,ob2ndRout(a1) ; advance the monitor's routine counter
0001EDE6 4E75                       		rts	
0001EDE8                            ; ===========================================================================
0001EDE8                            
0001EDE8                            @movingdown:
0001EDE8 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001EDEE 6600                       		bne.s	@donothing
0001EDF0 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's y-motion
0001EDF4 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the monitor's routine counter
0001EDF8 4EB9 0001 6160             		jsr		BounceJD
0001EDFE                            
0001EDFE                            	@donothing:
0001EDFE 4E75                       		rts	
0001EE00                            ; ===========================================================================
0001EE00                            
0001EE00                            React_Enemy:
0001EE00 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001EE04 6600                       		bne.s	@donthurtsonic	; if yes, branch
0001EE06 0C28 001F 001C             		cmpi.b	#id_Spindash,obAnim(a0)	; is Sonic Spin Dashing? 
0001EE0C 6700 0000                  		beq.w	@donthurtsonic	; if yes, branch
0001EE10 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001EE16 6600 0000                  		bne.w	React_ChkHurt	; if not, branch
0001EE1A                            
0001EE1A                            	@donthurtsonic:
0001EE1A 4A29 0021                  		tst.b	obColProp(a1)
0001EE1E 6700                       		beq.s	breakenemy
0001EE20                            
0001EE20 4468 0010                  		neg.w	obVelX(a0)	; repel Sonic
0001EE24 4468 0012                  		neg.w	obVelY(a0)
0001EE28 E0E8 0010                  		asr	obVelX(a0)
0001EE2C E0E8 0012                  		asr	obVelY(a0)
0001EE30 137C 0000 0020             		move.b	#0,obColType(a1)
0001EE36 5329 0021                  		subq.b	#1,obColProp(a1)
0001EE3A 6600                       		bne.s	@flagnotclear
0001EE3C 08E9 0007 0022             		bset	#7,obStatus(a1)
0001EE42                            
0001EE42                            	@flagnotclear:
0001EE42 4E75                       		rts	
0001EE44                            ; ===========================================================================
0001EE44                            
0001EE44                            breakenemy:
0001EE44 08E9 0007 0022             		bset	#7,obStatus(a1)
0001EE4A 7000                       		moveq	#0,d0
0001EE4C 3038 F7D0                  		move.w	(v_itembonus).w,d0
0001EE50 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; add 2 to item bonus counter
0001EE54 0C40 0006                  		cmpi.w	#6,d0
0001EE58 6500                       		bcs.s	@bonusokay
0001EE5A 7006                       		moveq	#6,d0		; max bonus is lvl6
0001EE5C                            
0001EE5C                            	@bonusokay:
0001EE5C 3340 003E                  		move.w	d0,$3E(a1)
0001EE60 303B 0000                  		move.w	@points(pc,d0.w),d0
0001EE64 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 enemies been destroyed?
0001EE6A 6500                       		bcs.s	@lessthan16	; if not, branch
0001EE6C 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001EE70 337C 000A 003E             		move.w	#$A,$3E(a1)
0001EE76                            
0001EE76                            	@lessthan16:
0001EE76 6100 0000                  		bsr.w	AddPoints
0001EE7A 4EB9 0001 6160             		jsr		BounceJD
0001EE80 12BC 0027                  		move.b	#id_ExplosionItem,0(a1) ; change object to explosion
0001EE84 137C 0000 0024             		move.b	#0,obRoutine(a1)
0001EE8A 4A68 0012                  		tst.w	obVelY(a0)
0001EE8E 6B00                       		bmi.s	@bouncedown
0001EE90 3028 000C                  		move.w	obY(a0),d0
0001EE94 B069 000C                  		cmp.w	obY(a1),d0
0001EE98 6400                       		bcc.s	@bounceup
0001EE9A 4468 0012                  		neg.w	obVelY(a0)
0001EE9E 4E75                       		rts	
0001EEA0                            ; ===========================================================================
0001EEA0                            
0001EEA0                            	@bouncedown:
0001EEA0 0668 0100 0012             		addi.w	#$100,obVelY(a0)
0001EEA6 4E75                       		rts	
0001EEA8                            
0001EEA8                            	@bounceup:
0001EEA8 0468 0100 0012             		subi.w	#$100,obVelY(a0)
0001EEAE 4E75                       		rts	
0001EEB0                            
0001EEB0 000A 0014 0032 0064        @points:	dc.w 10, 20, 50, 100	; points awarded div 10
0001EEB8                            
0001EEB8                            ; ===========================================================================
0001EEB8                            
0001EEB8                            React_Caterkiller:
0001EEB8 08E9 0007 0022             		bset	#7,obStatus(a1)
0001EEBE                            
0001EEBE                            React_ChkHurt:
0001EEBE 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001EEC2 6700                       		beq.s	notinvincible	; if not, branch
0001EEC4                            
0001EEC4                            	isflashing:
0001EEC4 70FF                       		moveq	#-1,d0
0001EEC6 4E75                       		rts	
0001EEC8                            ; ===========================================================================
0001EEC8                            
0001EEC8                            	notinvincible:
0001EEC8 4E71                       		nop	
0001EECA 4A68 0030                  		tst.w	$30(a0)		; is Sonic flashing?
0001EECE 66F4                       		bne.s	isflashing	; if yes, branch
0001EED0 2449                       		movea.l	a1,a2
0001EED2                            
0001EED2                            ; End of function ReactToItem
0001EED2                            ; continue straight to HurtSonic
0001EED2                            
0001EED2                            ; ---------------------------------------------------------------------------
0001EED2                            ; Hurting Sonic	subroutine
0001EED2                            ; ---------------------------------------------------------------------------
0001EED2                            
0001EED2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EED2                            
0001EED2                            
0001EED2                            HurtSonic:
0001EED2 4A38 FE2C                  		tst.b	(v_shield).w	; does Sonic have a shield?
0001EED6 6600                       		bne.s	@hasshield	; if yes, branch
0001EED8 4A38 F5C8                  		tst.b	(v_rshield).w	; does Sonic have a red shield?
0001EEDC 6600                       		bne.s	@hasshield	; if yes, branch
0001EEDE 4A38 F5C9                  		tst.b	(v_gshield).w	; does Sonic have a gold shield?
0001EEE2 6600                       		bne.s	@hasshield	; if yes, branch
0001EEE4 4A38 F5CA                  		tst.b	(v_spshield).w	; does Sonic have a silver shield?
0001EEE8 6600                       		bne.s	@hasshield	; if yes, branch
0001EEEA 4A78 FE20                  		tst.w	(v_rings).w	; does Sonic have any rings?
0001EEEE 6700 0000                  		beq.w	@norings	; if not, branch
0001EEF2                            
0001EEF2 4EB9 0000 FDC8             		jsr	(FindFreeObj).l
0001EEF8 6600                       		bne.s	@hasshield
0001EEFA 12BC 0037                  		move.b	#id_RingLoss,0(a1) ; load bouncing multi rings object
0001EEFE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001EF04 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001EF0A                            
0001EF0A                            	@hasshield:
0001EF0A 0C38 0001 FE2C             		cmpi.b	#1,(v_shield).w     ; does sonic have a Shield?
0001EF10 6600                       		bne.s	@hasrshield        ; if no, check for red shield
0001EF12 0C12 006E                  		cmpi.b	#$6E,(a2)     ; was damage caused by electrocuter?
0001EF16 6700 FFAC                  		beq.w	isflashing
0001EF1A 0C12 0086                  		cmpi.b	#$86,(a2)     ; was damage caused by Plasma Ball Launcher?
0001EF1E 6700 FFA4                  		beq.w	isflashing
0001EF22                            
0001EF22                            	@hasrshield:
0001EF22 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w     ; does sonic not a Red Shield?
0001EF28 6700                       		beq.s	@hasspshield          ; if yes, check for gray shield
0001EF2A 0C12 0014                  		cmpi.b	#$14,(a2)	; was damage caused by lava ball?
0001EF2E 6700 FF94                  		beq.w 	isflashing
0001EF32 0C12 004C                  		cmpi.b	#$4C,(a2)	; was damage caused by lava geyser?
0001EF36 6700 FF8C                  		beq.w 	isflashing
0001EF3A 0C12 004D                  		cmpi.b	#$4D,(a2)	; was damage caused by lava geyser?
0001EF3E 6700 FF84                  		beq.w 	isflashing
0001EF42 0C12 0062                  		cmpi.b	#$62,(a2)	; was damage caused by gargoyle?
0001EF46 6700 FF7C                  		beq.w 	isflashing
0001EF4A 0C12 0074                  		cmpi.b	#$74,(a2)	; was damage caused by MZ fire boss?
0001EF4E 6700 FF74                  		beq.w 	isflashing
0001EF52 0C12 0035                  		cmpi.b	#$35,(a2)	; was damage caused by burning grass?
0001EF56 6700 FF6C                  		beq.w 	isflashing
0001EF5A 0C12 006D                  		cmpi.b	#$6D,(a2)	; was damage caused by flamethrower?
0001EF5E 6700 FF64                  		beq.w 	isflashing
0001EF62 0C12 0054                  		cmpi.b	#$54,(a2)	; was damage caused by Lava Tag/Magma?
0001EF66 6700 FF5C                  		beq.w 	isflashing
0001EF6A                            
0001EF6A                            	@hasspshield:
0001EF6A 0C38 0001 F5CA             		cmpi.b	#1,(v_spshield).w     ; does sonic have a sp Shield?
0001EF70 6600 0000                  		bne.w	@hurtcont           ; if yes, make him invulnerable to metal objects
0001EF74 0C12 0015                  		cmpi.b	#$15,(a2)	; was damage caused by SBZ Spiked Ball?
0001EF78 6700 FF4A                  		beq.w 	isflashing
0001EF7C 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ Harpoon?
0001EF80 6700 FF42                  		beq.w 	isflashing
0001EF84 0C12 0017                  		cmpi.b	#$17,(a2)	; was damage caused by helix of spikes?
0001EF88 6700 FF3A                  		beq.w 	isflashing
0001EF8C 0C12 0031                  		cmpi.b	#$31,(a2)	; was damage caused by Chained Stompers?
0001EF90 6700 FF32                  		beq.w 	isflashing
0001EF94 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by Spikes?
0001EF98 6700 FF2A                  		beq.w 	isflashing
0001EF9C 0C12 007B                  		cmpi.b	#$7B,(a2)	; was damage caused by SLZ boss spikeball?
0001EFA0 6700 FF22                  		beq.w 	isflashing
0001EFA4 0C12 0057                  		cmpi.b	#$57,(a2)	; was damage caused by Spiked Ball & Chain?
0001EFA8 6700 FF1A                  		beq.w 	isflashing
0001EFAC 0C12 0058                  		cmpi.b	#$58,(a2)	; was damage caused by Big Spiked Ball?
0001EFB0 6700 FF12                  		beq.w 	isflashing
0001EFB4 0C12 006A                  		cmpi.b	#$6A,(a2)	; was damage caused by Saws?
0001EFB8 6700 FF0A                  		beq.w 	isflashing
0001EFBC 0C12 005E                  		cmpi.b	#$5E,(a2)	; was damage caused by Seesaw ball?
0001EFC0 6700 FF02                  		beq.w 	isflashing
0001EFC4                            
0001EFC4 0C12 0006                  		cmpi.b	#$06,(a2)	; was damage caused by Mozzietron?
0001EFC8 6700 FE7A                  		beq.w 	breakenemy
0001EFCC 0C12 001E                  		cmpi.b	#$1E,(a2)	; was damage caused by Ball Hog?
0001EFD0 6700 FE72                  		beq.w 	breakenemy
0001EFD4 0C12 002D                  		cmpi.b	#$2D,(a2)	; was damage caused by Burrobot?
0001EFD8 6700 FE6A                  		beq.w 	breakenemy
0001EFDC 0C12 0017                  		cmpi.b	#$17,(a2)	; was damage caused by Jaws?
0001EFE0 6700 FEE2                  		beq.w 	isflashing
0001EFE4 0C12 0050                  		cmpi.b	#$50,(a2)	; was damage caused by Yadrin?
0001EFE8 6700 FE5A                  		beq.w 	breakenemy
0001EFEC                            		;cmpi.b	#$5F,(a2)	; was damage caused by Bomb?
0001EFEC                            		;beq.w 	breakenemy
0001EFEC 0C12 0060                  		cmpi.b	#$60,(a2)	; was damage caused by Orbinaut?
0001EFF0 6700 FE52                  		beq.w 	breakenemy
0001EFF4 0C12 0078                  		cmpi.b	#$78,(a2)	; was damage caused by Catterkiller?
0001EFF8 6700 FE4A                  		beq.w 	breakenemy
0001EFFC                            
0001EFFC                            	@hurtcont:
0001EFFC 11FC 0000 FE2C             		move.b	#0,(v_shield).w		; remove shield
0001F002                            		;move.b	#0,(v_gshield).w	; remove g shield
0001F002 11FC 0000 F5CA             		move.b	#0,(v_spshield).w	; remove sp shield
0001F008                            		
0001F008 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w ; do you have no r shield?
0001F00E 6700                       		beq.s	@gshieldcheck	;if not, branch
0001F010 5338 F5C8                  		subq.b	#1,(v_rshield).w
0001F014                            		
0001F014                            	@gshieldcheck:
0001F014 0C38 0000 F5C9             		cmpi.b	#0,(v_gshield).w 	; do you have no g shield?
0001F01A 6700                       		beq.s	@hurtcont2			;if not, branch
0001F01C 5338 F5C9                  		subq.b	#1,(v_gshield).w	
0001F020                            		
0001F020                            	@hurtcont2:
0001F020 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001F026 4EB9 0001 6808             		jsr		Sonic_ResetOnFloor
0001F02C 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F032 317C FC00 0012             		move.w	#-$400,obVelY(a0) ; make Sonic bounce away from the object
0001F038 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001F03E 0828 0006 0022             		btst	#6,obStatus(a0)	; is Sonic underwater?
0001F044 6700                       		beq.s	@isdry		; if not, branch
0001F046                            
0001F046 317C FE00 0012             		move.w	#-$200,obVelY(a0) ; slower bounce
0001F04C 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001F052                            
0001F052                            	@isdry:
0001F052 3028 0008                  		move.w	obX(a0),d0
0001F056 B06A 0008                  		cmp.w	obX(a2),d0
0001F05A 6500                       		bcs.s	@isleft		; if Sonic is left of the object, branch
0001F05C 4468 0010                  		neg.w	obVelX(a0)	; if Sonic is right of the object, reverse
0001F060                            
0001F060                            	@isleft:
0001F060 117C 0000 0039             		move.b	#0,f_spindash(a0) ; clear Spin Dash flag 
0001F066 317C 0000 0020             		move.w	#0,obInertia(a0) 
0001F06C 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0) 
0001F072 317C 0120 0030             		move.w	#$120,$30(a0)
0001F078 0C12 006E                  		cmpi.b	#$6E,(a2)    ; check if you were hurt by Electrocuter
0001F07C 6700                       		beq.s	@hurtelec       ; if yes, branch
0001F07E 0C12 0086                  		cmpi.b	#$86,(a2)    ; check if you were hurt by FZ plasma
0001F082 6700                       		beq.s	@hurtelec       ; if yes, branch
0001F084 317C 0000 0020             		move.w	#0,obInertia(a0)
0001F08A 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0)
0001F090 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001F096 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001F09A 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001F09E 6600                       		bne.s	@sound		; if not, branch
0001F0A0 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001F0A4 6600                       		bne.s	@sound		; if not, branch
0001F0A6 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001F0AA                            
0001F0AA                            	@sound:
0001F0AA 4EB9 0000 12FE             		jsr	(PlaySound_Special).l
0001F0B0 70FF                       		moveq	#-1,d0
0001F0B2 4E75                       		rts	
0001F0B4                            
0001F0B4                            	@hurtelec:
0001F0B4 117C 0020 001C             		move.b	#id_Hurt2,obAnim(a0)
0001F0BA 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001F0C0 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001F0C4 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001F0C8 66E0                       		bne.s	@sound		; if not, branch
0001F0CA 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001F0CE 66DA                       		bne.s	@sound		; if not, branch
0001F0D0 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001F0D4                            ; ===========================================================================
0001F0D4                            
0001F0D4                            @norings:
0001F0D4 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat on?
0001F0D8 6600 FE30                  		bne.w	@hasshield	; if yes, branch
0001F0DC                            
0001F0DC                            ; ---------------------------------------------------------------------------
0001F0DC                            ; Subroutine to	kill Sonic
0001F0DC                            ; ---------------------------------------------------------------------------
0001F0DC                            
0001F0DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F0DC                            
0001F0DC                            
0001F0DC                            KillSonic:
0001F0DC 11FC 0002 F5D8             		move.b    #2,(Super_Sonic_palette).w; Remove rotating palette
0001F0E2 4238 FE19                  		clr.b (Super_Sonic_Flag).w ; Revert Sonic to Normal
0001F0E6 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	active?
0001F0EA 6600 0000                  		bne.w	@dontdie	; if yes, branch
0001F0EE 31FC 0000 FE20             		move.w	#0,(v_rings).w ; clear rings
0001F0F4 11FC 0000 FE2D             		move.b	#0,(v_invinc).w	; remove invincibility
0001F0FA 11FC 0000 FE2E             		move.b  #0,(v_shoes).w
0001F100 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0001F106 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w  ;clear victory animation flag
0001F10C 117C 0006 0024             		move.b	#6,obRoutine(a0)
0001F112 4EB9 0001 6808             		jsr		Sonic_ResetOnFloor
0001F118 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F11E 317C F900 0012             		move.w	#-$700,obVelY(a0)
0001F124 317C 0000 0010             		move.w	#0,obVelX(a0)
0001F12A 317C 0000 0020             		move.w	#0,obInertia(a0)
0001F130 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001F136 0C12 0054                  		cmpi.b	#$54,(a2)    ; check if you were killed by lava
0001F13A 6700                       		beq.s	Kill_Lava       ; if yes, branch
0001F13C 0C12 006D                  		cmpi.b	#$6D,(a2)    ; check if you were killed by flamethrower
0001F140 6700                       		beq.s	Kill_Lava        ; if yes, branch
0001F142 117C 0018 001C             		move.b	#id_Death,obAnim(a0)
0001F148 08E8 0007 0002             		bset	#7,obGfx(a0)
0001F14E 303C 0000                  		move.w	#sfx_Death,d0	; play normal death sound
0001F152 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; check	if you were killed by spikes
0001F156 6600                       		bne.s	@sound
0001F158 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; play spikes death sound
0001F15C                            
0001F15C                            	@sound:
0001F15C 4EB9 0000 12FE             		jsr	(PlaySound_Special).l
0001F162                            
0001F162                            	@dontdie:
0001F162 70FF                       		moveq	#-1,d0
0001F164 4E75                       		rts	
0001F166                            ; End of function KillSonic
0001F166                            Kill_Lava:	
0001F166 08E8 0007 0002             	bset	#7,obGfx(a0)
0001F16C 117C 0016 001C             	move.b	#$16,$1C(a0)
0001F172 303C 00C8                  	move.w	#$C8,d0        ; play death sound
0001F176 4EB9 0000 12FE                 jsr		(PlaySound_Special).l
0001F17C                            
0001F17C                            
0001F17C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F17C                            
0001F17C                            
0001F17C                            React_Special:
0001F17C 1229 0020                  		move.b	obColType(a1),d1
0001F180 0201 003F                  		andi.b	#$3F,d1
0001F184 0C01 000B                  		cmpi.b	#$B,d1		; is collision type $CB	?
0001F188 6700                       		beq.s	@caterkiller	; if yes, branch
0001F18A 0C01 000C                  		cmpi.b	#$C,d1		; is collision type $CC	?
0001F18E 6700                       		beq.s	@yadrin		; if yes, branch
0001F190 0C01 0017                  		cmpi.b	#$17,d1		; is collision type $D7	?
0001F194 6700                       		beq.s	@D7orE1		; if yes, branch
0001F196 0C01 0021                  		cmpi.b	#$21,d1		; is collision type $E1	?
0001F19A 6700                       		beq.s	@D7orE1		; if yes, branch
0001F19C 4E75                       		rts	
0001F19E                            ; ===========================================================================
0001F19E                            
0001F19E                            @caterkiller:
0001F19E 6000 FD18                  		bra.w	React_Caterkiller
0001F1A2                            ; ===========================================================================
0001F1A2                            
0001F1A2                            @yadrin:
0001F1A2 9A40                       		sub.w	d0,d5
0001F1A4 0C45 0008                  		cmpi.w	#8,d5
0001F1A8 6400                       		bcc.s	@normalenemy
0001F1AA 3029 0008                  		move.w	obX(a1),d0
0001F1AE 5940                       		subq.w	#4,d0
0001F1B0 0829 0000 0022             		btst	#0,obStatus(a1)
0001F1B6 6700                       		beq.s	@noflip
0001F1B8 0440 0010                  		subi.w	#$10,d0
0001F1BC                            
0001F1BC                            	@noflip:
0001F1BC 9042                       		sub.w	d2,d0
0001F1BE 6400                       		bcc.s	@loc_1B13C
0001F1C0 0640 0018                  		addi.w	#$18,d0
0001F1C4 6500                       		bcs.s	@loc_1B140
0001F1C6 6000                       		bra.s	@normalenemy
0001F1C8                            ; ===========================================================================
0001F1C8                            
0001F1C8                            	@loc_1B13C:
0001F1C8 B044                       		cmp.w	d4,d0
0001F1CA 6200                       		bhi.s	@normalenemy
0001F1CC                            
0001F1CC                            	@loc_1B140:
0001F1CC 6000 FCF0                  		bra.w	React_ChkHurt
0001F1D0                            ; ===========================================================================
0001F1D0                            
0001F1D0                            	@normalenemy:
0001F1D0 6000 FC2E                  		bra.w	React_Enemy
0001F1D4                            ; ===========================================================================
0001F1D4                            
0001F1D4                            @D7orE1:
0001F1D4 5229 0021                  		addq.b	#1,obColProp(a1)
0001F1D8 4E75                       		rts	
0001F1DA                            ; End of function React_Special
0001F1DA                            
0001F1DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F1DA                            
0001F1DA                            React_ChkWaterTag:
0001F1DA 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001F1E0 6600 0000                  		bne	NotWaterTag
0001F1E4 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0001F1EA                            	NotWaterTag:
0001F1EA 4E75                       		rts
0001F1EC                            
0001F1EC                            React_WaterTag:
0001F1EC 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001F1F2 6700 0000                  		beq	SkipWaterTag
0001F1F6 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0001F1FC                            	SkipWaterTag:
0001F1FC 4E75                       		rts
0001F1FC 4E75                       		rts
0001F1FE                            
0001F1FE                            ; ---------------------------------------------------------------------------
0001F1FE                            ; Subroutine to	show the special stage layout
0001F1FE                            ; ---------------------------------------------------------------------------
0001F1FE                            
0001F1FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F1FE                            
0001F1FE                            
0001F1FE                            SS_ShowLayout:
0001F1FE 6100 0000                  		bsr.w	SS_AniWallsRings
0001F202 6100 0000                  		bsr.w	SS_AniItems
0001F206 3F05                       		move.w	d5,-(sp)
0001F208 43F8 8000                  		lea	($FFFF8000).w,a1
0001F20C 1038 F780                  		move.b	(v_ssangle).w,d0
0001F210 0200 00FC                  		andi.b	#$FC,d0
0001F214 4EB9 0000 3D28             		jsr	(CalcSine).l
0001F21A 3800                       		move.w	d0,d4
0001F21C 3A01                       		move.w	d1,d5
0001F21E C9FC 0018                  		muls.w	#$18,d4
0001F222 CBFC 0018                  		muls.w	#$18,d5
0001F226 7400                       		moveq	#0,d2
0001F228 3438 F700                  		move.w	(v_screenposx).w,d2
0001F22C 84FC 0018                  		divu.w	#$18,d2
0001F230 4842                       		swap	d2
0001F232 4442                       		neg.w	d2
0001F234 0642 FF4C                  		addi.w	#-$B4,d2
0001F238 7600                       		moveq	#0,d3
0001F23A 3638 F704                  		move.w	(v_screenposy).w,d3
0001F23E 86FC 0018                  		divu.w	#$18,d3
0001F242 4843                       		swap	d3
0001F244 4443                       		neg.w	d3
0001F246 0643 FF4C                  		addi.w	#-$B4,d3
0001F24A 3E3C 000F                  		move.w	#$F,d7
0001F24E                            
0001F24E                            loc_1B19E:
0001F24E 48A7 E000                  		movem.w	d0-d2,-(sp)
0001F252 48A7 C000                  		movem.w	d0-d1,-(sp)
0001F256 4440                       		neg.w	d0
0001F258 C3C2                       		muls.w	d2,d1
0001F25A C1C3                       		muls.w	d3,d0
0001F25C 2C00                       		move.l	d0,d6
0001F25E DC81                       		add.l	d1,d6
0001F260 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001F264 C1C2                       		muls.w	d2,d0
0001F266 C3C3                       		muls.w	d3,d1
0001F268 D280                       		add.l	d0,d1
0001F26A 2406                       		move.l	d6,d2
0001F26C 3C3C 000F                  		move.w	#$F,d6
0001F270                            
0001F270                            loc_1B1C0:
0001F270 2002                       		move.l	d2,d0
0001F272 E080                       		asr.l	#8,d0
0001F274 32C0                       		move.w	d0,(a1)+
0001F276 2001                       		move.l	d1,d0
0001F278 E080                       		asr.l	#8,d0
0001F27A 32C0                       		move.w	d0,(a1)+
0001F27C D485                       		add.l	d5,d2
0001F27E D284                       		add.l	d4,d1
0001F280 51CE FFEE                  		dbf	d6,loc_1B1C0
0001F284                            
0001F284 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001F288 0643 0018                  		addi.w	#$18,d3
0001F28C 51CF FFC0                  		dbf	d7,loc_1B19E
0001F290                            
0001F290 3A1F                       		move.w	(sp)+,d5
0001F292 41F9 00FF 0000             		lea	($FF0000).l,a0
0001F298 7000                       		moveq	#0,d0
0001F29A 3038 F704                  		move.w	(v_screenposy).w,d0
0001F29E 80FC 0018                  		divu.w	#$18,d0
0001F2A2 C0FC 0080                  		mulu.w	#$80,d0
0001F2A6 D1C0                       		adda.l	d0,a0
0001F2A8 7000                       		moveq	#0,d0
0001F2AA 3038 F700                  		move.w	(v_screenposx).w,d0
0001F2AE 80FC 0018                  		divu.w	#$18,d0
0001F2B2 D0C0                       		adda.w	d0,a0
0001F2B4 49F8 8000                  		lea	($FFFF8000).w,a4
0001F2B8 3E3C 000F                  		move.w	#$F,d7
0001F2BC                            
0001F2BC                            loc_1B20C:
0001F2BC 3C3C 000F                  		move.w	#$F,d6
0001F2C0                            
0001F2C0                            loc_1B210:
0001F2C0 7000                       		moveq	#0,d0
0001F2C2 1018                       		move.b	(a0)+,d0
0001F2C4 6700                       		beq.s	loc_1B268
0001F2C6 0C00 004E                  		cmpi.b	#$4E,d0
0001F2CA 6200                       		bhi.s	loc_1B268
0001F2CC 3614                       		move.w	(a4),d3
0001F2CE 0643 0120                  		addi.w	#$120,d3
0001F2D2 0C43 0070                  		cmpi.w	#$70,d3
0001F2D6 6500                       		blo.s	loc_1B268
0001F2D8 0C43 01D0                  		cmpi.w	#$1D0,d3
0001F2DC 6400                       		bhs.s	loc_1B268
0001F2DE 342C 0002                  		move.w	2(a4),d2
0001F2E2 0642 00F0                  		addi.w	#$F0,d2
0001F2E6 0C42 0070                  		cmpi.w	#$70,d2
0001F2EA 6500                       		blo.s	loc_1B268
0001F2EC 0C42 0170                  		cmpi.w	#$170,d2
0001F2F0 6400                       		bhs.s	loc_1B268
0001F2F2 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001F2F8 E748                       		lsl.w	#3,d0
0001F2FA 4BF5 0000                  		lea	(a5,d0.w),a5
0001F2FE 225D                       		movea.l	(a5)+,a1
0001F300 321D                       		move.w	(a5)+,d1
0001F302 D241                       		add.w	d1,d1
0001F304 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001F308 365D                       		movea.w	(a5)+,a3
0001F30A 7200                       		moveq	#0,d1
0001F30C 1219                       		move.b	(a1)+,d1
0001F30E 5301                       		subq.b	#1,d1
0001F310 6B00                       		bmi.s	loc_1B268
0001F312 4EB9 0000 FAA0             		jsr	(sub_D762).l
0001F318                            
0001F318                            loc_1B268:
0001F318 584C                       		addq.w	#4,a4
0001F31A 51CE FFA4                  		dbf	d6,loc_1B210
0001F31E                            
0001F31E 41E8 0070                  		lea	$70(a0),a0
0001F322 51CF FF98                  		dbf	d7,loc_1B20C
0001F326                            
0001F326 11C5 F62C                  		move.b	d5,(v_spritecount).w
0001F32A 0C05 0050                  		cmpi.b	#$50,d5
0001F32E 6700                       		beq.s	loc_1B288
0001F330 24BC 0000 0000             		move.l	#0,(a2)
0001F336 4E75                       		rts	
0001F338                            ; ===========================================================================
0001F338                            
0001F338                            loc_1B288:
0001F338 157C 0000 FFFB             		move.b	#0,-5(a2)
0001F33E 4E75                       		rts	
0001F340                            ; End of function SS_ShowLayout
0001F340                            
0001F340                            ; ---------------------------------------------------------------------------
0001F340                            ; Subroutine to	animate	walls and rings	in the special stage
0001F340                            ; ---------------------------------------------------------------------------
0001F340                            
0001F340                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F340                            
0001F340                            
0001F340                            SS_AniWallsRings:
0001F340 43F9 00FF 400C             		lea	($FF400C).l,a1
0001F346 7000                       		moveq	#0,d0
0001F348 1038 F780                  		move.b	(v_ssangle).w,d0
0001F34C E408                       		lsr.b	#2,d0
0001F34E 0240 000F                  		andi.w	#$F,d0
0001F352 7223                       		moveq	#$23,d1
0001F354                            
0001F354                            loc_1B2A4:
0001F354 3280                       		move.w	d0,(a1)
0001F356 5049                       		addq.w	#8,a1
0001F358 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001F35C                            
0001F35C 43F9 00FF 4005             		lea	($FF4005).l,a1
0001F362 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
0001F366 6A00                       		bpl.s	loc_1B2C8
0001F368 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
0001F36E 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
0001F372 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
0001F378                            
0001F378                            loc_1B2C8:
0001F378 1378 FEC3 01D0             		move.b	(v_ani1_frame).w,$1D0(a1)
0001F37E 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0001F382 6A00                       		bpl.s	loc_1B2E4
0001F384 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
0001F38A 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
0001F38E 0238 0001 FEC5             		andi.b	#1,(v_ani2_frame).w
0001F394                            
0001F394                            loc_1B2E4:
0001F394 1038 FEC5                  		move.b	(v_ani2_frame).w,d0
0001F398 1340 0138                  		move.b	d0,$138(a1)
0001F39C 1340 0160                  		move.b	d0,$160(a1)
0001F3A0 1340 0148                  		move.b	d0,$148(a1)
0001F3A4 1340 0150                  		move.b	d0,$150(a1)
0001F3A8 1340 01D8                  		move.b	d0,$1D8(a1)
0001F3AC 1340 01E0                  		move.b	d0,$1E0(a1)
0001F3B0 1340 01E8                  		move.b	d0,$1E8(a1)
0001F3B4 1340 01F0                  		move.b	d0,$1F0(a1)
0001F3B8 1340 01F8                  		move.b	d0,$1F8(a1)
0001F3BC 1340 0200                  		move.b	d0,$200(a1)
0001F3C0 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
0001F3C4 6A00                       		bpl.s	loc_1B326
0001F3C6 11FC 0004 FEC6             		move.b	#4,(v_ani3_time).w
0001F3CC 5238 FEC7                  		addq.b	#1,(v_ani3_frame).w
0001F3D0 0238 0003 FEC7             		andi.b	#3,(v_ani3_frame).w
0001F3D6                            
0001F3D6                            loc_1B326:
0001F3D6 1038 FEC7                  		move.b	(v_ani3_frame).w,d0
0001F3DA 1340 0168                  		move.b	d0,$168(a1)
0001F3DE 1340 0170                  		move.b	d0,$170(a1)
0001F3E2 1340 0178                  		move.b	d0,$178(a1)
0001F3E6 1340 0180                  		move.b	d0,$180(a1)
0001F3EA 5338 FEC0                  		subq.b	#1,(v_ani0_time).w
0001F3EE 6A00                       		bpl.s	loc_1B350
0001F3F0 11FC 0007 FEC0             		move.b	#7,(v_ani0_time).w
0001F3F6 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w
0001F3FA 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w
0001F400                            
0001F400                            loc_1B350:
0001F400 43F9 00FF 4016             		lea	($FF4016).l,a1
0001F406 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001F40C 7000                       		moveq	#0,d0
0001F40E 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
0001F412 D040                       		add.w	d0,d0
0001F414 41F0 0000                  		lea	(a0,d0.w),a0
0001F418 3290                       		move.w	(a0),(a1)
0001F41A 3368 0002 0008             		move.w	2(a0),8(a1)
0001F420 3368 0004 0010             		move.w	4(a0),$10(a1)
0001F426 3368 0006 0018             		move.w	6(a0),$18(a1)
0001F42C 3368 0008 0020             		move.w	8(a0),$20(a1)
0001F432 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001F438 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001F43E 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001F444 D0FC 0020                  		adda.w	#$20,a0
0001F448 D2FC 0048                  		adda.w	#$48,a1
0001F44C 3290                       		move.w	(a0),(a1)
0001F44E 3368 0002 0008             		move.w	2(a0),8(a1)
0001F454 3368 0004 0010             		move.w	4(a0),$10(a1)
0001F45A 3368 0006 0018             		move.w	6(a0),$18(a1)
0001F460 3368 0008 0020             		move.w	8(a0),$20(a1)
0001F466 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001F46C 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001F472 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001F478 D0FC 0020                  		adda.w	#$20,a0
0001F47C D2FC 0048                  		adda.w	#$48,a1
0001F480 3290                       		move.w	(a0),(a1)
0001F482 3368 0002 0008             		move.w	2(a0),8(a1)
0001F488 3368 0004 0010             		move.w	4(a0),$10(a1)
0001F48E 3368 0006 0018             		move.w	6(a0),$18(a1)
0001F494 3368 0008 0020             		move.w	8(a0),$20(a1)
0001F49A 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001F4A0 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001F4A6 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001F4AC D0FC 0020                  		adda.w	#$20,a0
0001F4B0 D2FC 0048                  		adda.w	#$48,a1
0001F4B4 3290                       		move.w	(a0),(a1)
0001F4B6 3368 0002 0008             		move.w	2(a0),8(a1)
0001F4BC 3368 0004 0010             		move.w	4(a0),$10(a1)
0001F4C2 3368 0006 0018             		move.w	6(a0),$18(a1)
0001F4C8 3368 0008 0020             		move.w	8(a0),$20(a1)
0001F4CE 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001F4D4 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001F4DA 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001F4E0 D0FC 0020                  		adda.w	#$20,a0
0001F4E4 D2FC 0048                  		adda.w	#$48,a1
0001F4E8 4E75                       		rts	
0001F4EA                            ; End of function SS_AniWallsRings
0001F4EA                            
0001F4EA                            ; ===========================================================================
0001F4EA 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001F4FA 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001F50A 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001F51A 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001F52A 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001F53A 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001F54A 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001F55A 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001F56A                            ; ---------------------------------------------------------------------------
0001F56A                            ; Subroutine to	remove items when you collect them in the special stage
0001F56A                            ; ---------------------------------------------------------------------------
0001F56A                            
0001F56A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F56A                            
0001F56A                            
0001F56A                            SS_RemoveCollectedItem:
0001F56A 45F9 00FF 4400             		lea	($FF4400).l,a2
0001F570 303C 001F                  		move.w	#$1F,d0
0001F574                            
0001F574                            loc_1B4C4:
0001F574 4A12                       		tst.b	(a2)
0001F576 6700                       		beq.s	locret_1B4CE
0001F578 504A                       		addq.w	#8,a2
0001F57A 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001F57E                            
0001F57E                            locret_1B4CE:
0001F57E 4E75                       		rts	
0001F580                            ; End of function SS_RemoveCollectedItem
0001F580                            
0001F580                            ; ---------------------------------------------------------------------------
0001F580                            ; Subroutine to	animate	special	stage items when you touch them
0001F580                            ; ---------------------------------------------------------------------------
0001F580                            
0001F580                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F580                            
0001F580                            
0001F580                            SS_AniItems:
0001F580 41F9 00FF 4400             		lea	($FF4400).l,a0
0001F586 3E3C 001F                  		move.w	#$1F,d7
0001F58A                            
0001F58A                            loc_1B4DA:
0001F58A 7000                       		moveq	#0,d0
0001F58C 1010                       		move.b	(a0),d0
0001F58E 6700                       		beq.s	loc_1B4E8
0001F590 E548                       		lsl.w	#2,d0
0001F592 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001F596 4E91                       		jsr	(a1)
0001F598                            
0001F598                            loc_1B4E8:
0001F598 5048                       		addq.w	#8,a0
0001F59A                            
0001F59A                            loc_1B4EA:
0001F59A 51CF FFEE                  		dbf	d7,loc_1B4DA
0001F59E                            
0001F59E 4E75                       		rts	
0001F5A0                            ; End of function SS_AniItems
0001F5A0                            
0001F5A0                            ; ===========================================================================
0001F5A0 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001F5A4 0000 0000                  		dc.l SS_AniBumper
0001F5A8 0000 0000                  		dc.l SS_Ani1Up
0001F5AC 0000 0000                  		dc.l SS_AniReverse
0001F5B0 0000 0000                  		dc.l SS_AniEmeraldSparks
0001F5B4 0000 0000                  		dc.l SS_AniGlassBlock
0001F5B8                            ; ===========================================================================
0001F5B8                            
0001F5B8                            SS_AniRingSparks:
0001F5B8 5328 0002                  		subq.b	#1,2(a0)
0001F5BC 6A00                       		bpl.s	locret_1B530
0001F5BE 117C 0005 0002             		move.b	#5,2(a0)
0001F5C4 7000                       		moveq	#0,d0
0001F5C6 1028 0003                  		move.b	3(a0),d0
0001F5CA 5228 0003                  		addq.b	#1,3(a0)
0001F5CE 2268 0004                  		movea.l	4(a0),a1
0001F5D2 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001F5D6 1280                       		move.b	d0,(a1)
0001F5D8 6600                       		bne.s	locret_1B530
0001F5DA 4290                       		clr.l	(a0)
0001F5DC 42A8 0004                  		clr.l	4(a0)
0001F5E0                            
0001F5E0                            locret_1B530:
0001F5E0 4E75                       		rts	
0001F5E2                            ; ===========================================================================
0001F5E2 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001F5E8                            ; ===========================================================================
0001F5E8                            
0001F5E8                            SS_AniBumper:
0001F5E8 5328 0002                  		subq.b	#1,2(a0)
0001F5EC 6A00                       		bpl.s	locret_1B566
0001F5EE 117C 0007 0002             		move.b	#7,2(a0)
0001F5F4 7000                       		moveq	#0,d0
0001F5F6 1028 0003                  		move.b	3(a0),d0
0001F5FA 5228 0003                  		addq.b	#1,3(a0)
0001F5FE 2268 0004                  		movea.l	4(a0),a1
0001F602 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001F606 6600                       		bne.s	loc_1B564
0001F608 4290                       		clr.l	(a0)
0001F60A 42A8 0004                  		clr.l	4(a0)
0001F60E 12BC 0025                  		move.b	#$25,(a1)
0001F612 4E75                       		rts	
0001F614                            ; ===========================================================================
0001F614                            
0001F614                            loc_1B564:
0001F614 1280                       		move.b	d0,(a1)
0001F616                            
0001F616                            locret_1B566:
0001F616 4E75                       		rts	
0001F618                            ; ===========================================================================
0001F618 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001F61E                            ; ===========================================================================
0001F61E                            
0001F61E                            SS_Ani1Up:
0001F61E 5328 0002                  		subq.b	#1,2(a0)
0001F622 6A00                       		bpl.s	locret_1B596
0001F624 117C 0005 0002             		move.b	#5,2(a0)
0001F62A 7000                       		moveq	#0,d0
0001F62C 1028 0003                  		move.b	3(a0),d0
0001F630 5228 0003                  		addq.b	#1,3(a0)
0001F634 2268 0004                  		movea.l	4(a0),a1
0001F638 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001F63C 1280                       		move.b	d0,(a1)
0001F63E 6600                       		bne.s	locret_1B596
0001F640 4290                       		clr.l	(a0)
0001F642 42A8 0004                  		clr.l	4(a0)
0001F646                            
0001F646                            locret_1B596:
0001F646 4E75                       		rts	
0001F648                            ; ===========================================================================
0001F648 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001F64E                            ; ===========================================================================
0001F64E                            
0001F64E                            SS_AniReverse:
0001F64E 5328 0002                  		subq.b	#1,2(a0)
0001F652 6A00                       		bpl.s	locret_1B5CC
0001F654 117C 0007 0002             		move.b	#7,2(a0)
0001F65A 7000                       		moveq	#0,d0
0001F65C 1028 0003                  		move.b	3(a0),d0
0001F660 5228 0003                  		addq.b	#1,3(a0)
0001F664 2268 0004                  		movea.l	4(a0),a1
0001F668 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001F66C 6600                       		bne.s	loc_1B5CA
0001F66E 4290                       		clr.l	(a0)
0001F670 42A8 0004                  		clr.l	4(a0)
0001F674 12BC 002B                  		move.b	#$2B,(a1)
0001F678 4E75                       		rts	
0001F67A                            ; ===========================================================================
0001F67A                            
0001F67A                            loc_1B5CA:
0001F67A 1280                       		move.b	d0,(a1)
0001F67C                            
0001F67C                            locret_1B5CC:
0001F67C 4E75                       		rts	
0001F67E                            ; ===========================================================================
0001F67E 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001F684                            ; ===========================================================================
0001F684                            
0001F684                            SS_AniEmeraldSparks:
0001F684 5328 0002                  		subq.b	#1,2(a0)
0001F688 6A00                       		bpl.s	locret_1B60C
0001F68A 117C 0005 0002             		move.b	#5,2(a0)
0001F690 7000                       		moveq	#0,d0
0001F692 1028 0003                  		move.b	3(a0),d0
0001F696 5228 0003                  		addq.b	#1,3(a0)
0001F69A 2268 0004                  		movea.l	4(a0),a1
0001F69E 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001F6A2 1280                       		move.b	d0,(a1)
0001F6A4 6600                       		bne.s	locret_1B60C
0001F6A6 4290                       		clr.l	(a0)
0001F6A8 42A8 0004                  		clr.l	4(a0)
0001F6AC 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001F6BC                            
0001F6BC                            locret_1B60C:
0001F6BC 4E75                       		rts	
0001F6BE                            ; ===========================================================================
0001F6BE 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001F6C4                            ; ===========================================================================
0001F6C4                            
0001F6C4                            SS_AniGlassBlock:
0001F6C4 5328 0002                  		subq.b	#1,2(a0)
0001F6C8 6A00                       		bpl.s	locret_1B640
0001F6CA 117C 0001 0002             		move.b	#1,2(a0)
0001F6D0 7000                       		moveq	#0,d0
0001F6D2 1028 0003                  		move.b	3(a0),d0
0001F6D6 5228 0003                  		addq.b	#1,3(a0)
0001F6DA 2268 0004                  		movea.l	4(a0),a1
0001F6DE 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001F6E2 1280                       		move.b	d0,(a1)
0001F6E4 6600                       		bne.s	locret_1B640
0001F6E6 12A8 0004                  		move.b	4(a0),(a1)
0001F6EA 4290                       		clr.l	(a0)
0001F6EC 42A8 0004                  		clr.l	4(a0)
0001F6F0                            
0001F6F0                            locret_1B640:
0001F6F0 4E75                       		rts	
0001F6F2                            ; ===========================================================================
0001F6F2 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001F6FC                            
0001F6FC                            ; ---------------------------------------------------------------------------
0001F6FC                            ; Special stage	layout pointers
0001F6FC                            ; ---------------------------------------------------------------------------
0001F6FC                            SS_LayoutIndex:
0001F6FC 0000 0000                  		dc.l SS_1
0001F700 0000 0000                  		dc.l SS_2
0001F704 0000 0000                  		dc.l SS_3
0001F708 0000 0000                  		dc.l SS_4
0001F70C 0000 0000                  		dc.l SS_5
0001F710 0000 0000                  		dc.l SS_6
0001F714                            		even
0001F714                            
0001F714                            ; ---------------------------------------------------------------------------
0001F714                            ; Special stage start locations
0001F714                            ; ---------------------------------------------------------------------------
0001F714                            SS_StartLoc:	include	"_inc\Start Location Array - Special Stages.asm"
0001F714                            ; ---------------------------------------------------------------------------
0001F714                            ; Special stage start locations
0001F714                            ; ---------------------------------------------------------------------------
0001F714                            
0001F714                            		incbin	"startpos\ss1.bin"
0001F718                            		incbin	"startpos\ss2.bin"
0001F71C                            		incbin	"startpos\ss3.bin"
0001F720                            		incbin	"startpos\ss4.bin"
0001F724                            		incbin	"startpos\ss5.bin"
0001F728                            		incbin	"startpos\ss6.bin"
0001F72C                            		even
0001F72C                            		even
0001F72C                            
0001F72C                            ; ---------------------------------------------------------------------------
0001F72C                            ; Subroutine to	load special stage layout
0001F72C                            ; ---------------------------------------------------------------------------
0001F72C                            
0001F72C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F72C                            
0001F72C                            
0001F72C                            SS_Load:
0001F72C 7000                       		moveq	#0,d0
0001F72E 1038 FE16                  		move.b	(v_lastspecial).w,d0 ; load number of last special stage entered
0001F732 5238 FE16                  		addq.b	#1,(v_lastspecial).w
0001F736 0C38 0006 FE16             		cmpi.b	#6,(v_lastspecial).w
0001F73C 6500                       		blo.s	SS_ChkEmldNum
0001F73E 11FC 0000 FE16             		move.b	#0,(v_lastspecial).w ; reset if higher than 6
0001F744                            
0001F744                            SS_ChkEmldNum:
0001F744 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all emeralds?
0001F74A 6700                       		beq.s	SS_LoadData	; if yes, branch
0001F74C 7200                       		moveq	#0,d1
0001F74E 1238 FE57                  		move.b	(v_emeralds).w,d1
0001F752 5301                       		subq.b	#1,d1
0001F754 6500                       		blo.s	SS_LoadData
0001F756 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0001F75A                            
0001F75A                            SS_ChkEmldLoop:	
0001F75A B033 1000                  		cmp.b	(a3,d1.w),d0
0001F75E 6600                       		bne.s	SS_ChkEmldRepeat
0001F760 60CA                       		bra.s	SS_Load
0001F762                            ; ===========================================================================
0001F762                            
0001F762                            SS_ChkEmldRepeat:
0001F762 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001F766                            
0001F766                            SS_LoadData:
0001F766 E548                       		lsl.w	#2,d0
0001F768 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001F76C 31D9 D008                  		move.w	(a1)+,(v_player+obX).w
0001F770 31D9 D00C                  		move.w	(a1)+,(v_player+obY).w
0001F774 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001F778 43F9 00FF 4000             		lea	($FF4000).l,a1
0001F77E 303C 0000                  		move.w	#0,d0
0001F782 4EB9 0000 1936             		jsr	(EniDec).l
0001F788 43F9 00FF 0000             		lea	($FF0000).l,a1
0001F78E 303C 0FFF                  		move.w	#$FFF,d0
0001F792                            
0001F792                            SS_ClrRAM3:
0001F792 4299                       		clr.l	(a1)+
0001F794 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001F798                            
0001F798 43F9 00FF 1020             		lea	($FF1020).l,a1
0001F79E 41F9 00FF 4000             		lea	($FF4000).l,a0
0001F7A4 723F                       		moveq	#$3F,d1
0001F7A6                            
0001F7A6                            loc_1B6F6:
0001F7A6 743F                       		moveq	#$3F,d2
0001F7A8                            
0001F7A8                            loc_1B6F8:
0001F7A8 12D8                       		move.b	(a0)+,(a1)+
0001F7AA 51CA FFFC                  		dbf	d2,loc_1B6F8
0001F7AE                            
0001F7AE 43E9 0040                  		lea	$40(a1),a1
0001F7B2 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001F7B6                            
0001F7B6 43F9 00FF 4008             		lea	($FF4008).l,a1
0001F7BC 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001F7C2 724D                       		moveq	#$4D,d1
0001F7C4                            
0001F7C4                            loc_1B714:
0001F7C4 22D8                       		move.l	(a0)+,(a1)+
0001F7C6 32FC 0000                  		move.w	#0,(a1)+
0001F7CA 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001F7D0 32D8                       		move.w	(a0)+,(a1)+
0001F7D2 51C9 FFF0                  		dbf	d1,loc_1B714
0001F7D6                            
0001F7D6 43F9 00FF 4400             		lea	($FF4400).l,a1
0001F7DC 323C 003F                  		move.w	#$3F,d1
0001F7E0                            
0001F7E0                            loc_1B730:
0001F7E0                            
0001F7E0 4299                       		clr.l	(a1)+
0001F7E2 51C9 FFFC                  		dbf	d1,loc_1B730
0001F7E6                            
0001F7E6 4E75                       		rts	
0001F7E8                            ; End of function SS_Load
0001F7E8                            
0001F7E8                            ; ===========================================================================
0001F7E8                            
0001F7E8                            SS_MapIndex:
0001F7E8                            		include	"_inc\Special Stage Mappings & VRAM Pointers.asm"
0001F7E8                            ; ---------------------------------------------------------------------------
0001F7E8                            ; Special stage	mappings and VRAM pointers
0001F7E8                            ; ---------------------------------------------------------------------------
0001F7E8 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001F7EC 0142                       	dc.w $142		; VRAM setting
0001F7EE 0000 0000                  	dc.l Map_SSWalls
0001F7F2 0142                       	dc.w $142
0001F7F4 0000 0000                  	dc.l Map_SSWalls
0001F7F8 0142                       	dc.w $142
0001F7FA 0000 0000                  	dc.l Map_SSWalls
0001F7FE 0142                       	dc.w $142
0001F800 0000 0000                  	dc.l Map_SSWalls
0001F804 0142                       	dc.w $142
0001F806 0000 0000                  	dc.l Map_SSWalls
0001F80A 0142                       	dc.w $142
0001F80C 0000 0000                  	dc.l Map_SSWalls
0001F810 0142                       	dc.w $142
0001F812 0000 0000                  	dc.l Map_SSWalls
0001F816 0142                       	dc.w $142
0001F818 0000 0000                  	dc.l Map_SSWalls
0001F81C 0142                       	dc.w $142
0001F81E 0000 0000                  	dc.l Map_SSWalls
0001F822 2142                       	dc.w $2142
0001F824 0000 0000                  	dc.l Map_SSWalls
0001F828 2142                       	dc.w $2142
0001F82A 0000 0000                  	dc.l Map_SSWalls
0001F82E 2142                       	dc.w $2142
0001F830 0000 0000                  	dc.l Map_SSWalls
0001F834 2142                       	dc.w $2142
0001F836 0000 0000                  	dc.l Map_SSWalls
0001F83A 2142                       	dc.w $2142
0001F83C 0000 0000                  	dc.l Map_SSWalls
0001F840 2142                       	dc.w $2142
0001F842 0000 0000                  	dc.l Map_SSWalls
0001F846 2142                       	dc.w $2142
0001F848 0000 0000                  	dc.l Map_SSWalls
0001F84C 2142                       	dc.w $2142
0001F84E 0000 0000                  	dc.l Map_SSWalls
0001F852 2142                       	dc.w $2142
0001F854 0000 0000                  	dc.l Map_SSWalls
0001F858 4142                       	dc.w $4142
0001F85A 0000 0000                  	dc.l Map_SSWalls
0001F85E 4142                       	dc.w $4142
0001F860 0000 0000                  	dc.l Map_SSWalls
0001F864 4142                       	dc.w $4142
0001F866 0000 0000                  	dc.l Map_SSWalls
0001F86A 4142                       	dc.w $4142
0001F86C 0000 0000                  	dc.l Map_SSWalls
0001F870 4142                       	dc.w $4142
0001F872 0000 0000                  	dc.l Map_SSWalls
0001F876 4142                       	dc.w $4142
0001F878 0000 0000                  	dc.l Map_SSWalls
0001F87C 4142                       	dc.w $4142
0001F87E 0000 0000                  	dc.l Map_SSWalls
0001F882 4142                       	dc.w $4142
0001F884 0000 0000                  	dc.l Map_SSWalls
0001F888 4142                       	dc.w $4142
0001F88A 0000 0000                  	dc.l Map_SSWalls
0001F88E 6142                       	dc.w $6142
0001F890 0000 0000                  	dc.l Map_SSWalls
0001F894 6142                       	dc.w $6142
0001F896 0000 0000                  	dc.l Map_SSWalls
0001F89A 6142                       	dc.w $6142
0001F89C 0000 0000                  	dc.l Map_SSWalls
0001F8A0 6142                       	dc.w $6142
0001F8A2 0000 0000                  	dc.l Map_SSWalls
0001F8A6 6142                       	dc.w $6142
0001F8A8 0000 0000                  	dc.l Map_SSWalls
0001F8AC 6142                       	dc.w $6142
0001F8AE 0000 0000                  	dc.l Map_SSWalls
0001F8B2 6142                       	dc.w $6142
0001F8B4 0000 0000                  	dc.l Map_SSWalls
0001F8B8 6142                       	dc.w $6142
0001F8BA 0000 0000                  	dc.l Map_SSWalls
0001F8BE 6142                       	dc.w $6142
0001F8C0 0001 0E72                  	dc.l Map_Bump
0001F8C4 023B                       	dc.w $23B
0001F8C6 0000 0000                  	dc.l Map_SS_R
0001F8CA 0570                       	dc.w $570
0001F8CC 0000 0000                  	dc.l Map_SS_R
0001F8D0 0251                       	dc.w $251
0001F8D2 0000 0000                  	dc.l Map_SS_R
0001F8D6 0370                       	dc.w $370
0001F8D8 0000 0000                  	dc.l Map_SS_Up
0001F8DC 0263                       	dc.w $263
0001F8DE 0000 0000                  	dc.l Map_SS_Down
0001F8E2 0263                       	dc.w $263
0001F8E4 0000 0000                  	dc.l Map_SS_R
0001F8E8 22F0                       	dc.w $22F0
0001F8EA 0000 0000                  	dc.l Map_SS_Glass
0001F8EE 0470                       	dc.w $470
0001F8F0 0000 0000                  	dc.l Map_SS_Glass
0001F8F4 05F0                       	dc.w $5F0
0001F8F6 0000 0000                  	dc.l Map_SS_Glass
0001F8FA 65F0                       	dc.w $65F0
0001F8FC 0000 0000                  	dc.l Map_SS_Glass
0001F900 25F0                       	dc.w $25F0
0001F902 0000 0000                  	dc.l Map_SS_Glass
0001F906 45F0                       	dc.w $45F0
0001F908 0000 0000                  	dc.l Map_SS_R
0001F90C 02F0                       	dc.w $2F0
0001F90E 0101 0E72                  	dc.l Map_Bump+$1000000	; add frame no.	* $1000000
0001F912 023B                       	dc.w $23B
0001F914 0201 0E72                  	dc.l Map_Bump+$2000000
0001F918 023B                       	dc.w $23B
0001F91A 0000 0000                  	dc.l Map_SS_R
0001F91E 0797                       	dc.w $797
0001F920 0000 0000                  	dc.l Map_SS_R
0001F924 07A0                       	dc.w $7A0
0001F926 0000 0000                  	dc.l Map_SS_R
0001F92A 07A9                       	dc.w $7A9
0001F92C 0000 0000                  	dc.l Map_SS_R
0001F930 0797                       	dc.w $797
0001F932 0000 0000                  	dc.l Map_SS_R
0001F936 07A0                       	dc.w $7A0
0001F938 0000 0000                  	dc.l Map_SS_R
0001F93C 07A9                       	dc.w $7A9
0001F93E 0000 BE36                  	dc.l Map_Ring
0001F942 2798                       	dc.w $2798
0001F944 0000 0000                  	dc.l Map_SS_Chaos3
0001F948 0770                       	dc.w $770
0001F94A 0000 0000                  	dc.l Map_SS_Chaos3
0001F94E 2770                       	dc.w $2770
0001F950 0000 0000                  	dc.l Map_SS_Chaos3
0001F954 4770                       	dc.w $4770
0001F956 0000 0000                  	dc.l Map_SS_Chaos3
0001F95A 6770                       	dc.w $6770
0001F95C 0000 0000                  	dc.l Map_SS_Chaos1
0001F960 0770                       	dc.w $770
0001F962 0000 0000                  	dc.l Map_SS_Chaos2
0001F966 0770                       	dc.w $770
0001F968 0000 0000                  	dc.l Map_SS_R
0001F96C 04F0                       	dc.w $4F0
0001F96E 0400 BE36                  	dc.l Map_Ring+$4000000
0001F972 2798                       	dc.w $2798
0001F974 0500 BE36                  	dc.l Map_Ring+$5000000
0001F978 2798                       	dc.w $2798
0001F97A 0600 BE36                  	dc.l Map_Ring+$6000000
0001F97E 2798                       	dc.w $2798
0001F980 0700 BE36                  	dc.l Map_Ring+$7000000
0001F984 2798                       	dc.w $2798
0001F986 0000 0000                  	dc.l Map_SS_Glass
0001F98A 23F0                       	dc.w $23F0
0001F98C 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001F990 23F0                       	dc.w $23F0
0001F992 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001F996 23F0                       	dc.w $23F0
0001F998 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001F99C 23F0                       	dc.w $23F0
0001F99E 0000 0000                  	dc.l Map_SS_R+$2000000
0001F9A2 04F0                       	dc.w $4F0
0001F9A4 0000 0000                  	dc.l Map_SS_Glass
0001F9A8 05F0                       	dc.w $5F0
0001F9AA 0000 0000                  	dc.l Map_SS_Glass
0001F9AE 65F0                       	dc.w $65F0
0001F9B0 0000 0000                  	dc.l Map_SS_Glass
0001F9B4 25F0                       	dc.w $25F0
0001F9B6 0000 0000                  	dc.l Map_SS_Glass
0001F9BA 45F0                       	dc.w $45F0
0001F9BA 45F0                       	dc.w $45F0
0001F9BC                            
0001F9BC                            Map_SS_R:	include	"_maps\SS R Block.asm"
0001F9BC                            ; ---------------------------------------------------------------------------
0001F9BC                            ; Sprite mappings - special stage "R" block
0001F9BC                            ; ---------------------------------------------------------------------------
0001F9BC                            Map_SS_R_internal:
0001F9BC 0000                       		dc.w byte_1B912-Map_SS_R_internal
0001F9BE 0000                       		dc.w byte_1B918-Map_SS_R_internal
0001F9C0 0000                       		dc.w byte_1B91E-Map_SS_R_internal
0001F9C2 01                         byte_1B912:	dc.b 1
0001F9C3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001F9C8 01                         byte_1B918:	dc.b 1
0001F9C9 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001F9CE 00                         byte_1B91E:	dc.b 0
0001F9D0 00                         		even
0001F9D0 00                         		even
0001F9D0                            Map_SS_Glass:	include	"_maps\SS Glass Block.asm"
0001F9D0                            ; ---------------------------------------------------------------------------
0001F9D0                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001F9D0                            ; ---------------------------------------------------------------------------
0001F9D0                            Map_SS_Glass_internal:
0001F9D0 0000                       		dc.w byte_1B928-Map_SS_Glass_internal
0001F9D2 0000                       		dc.w byte_1B92E-Map_SS_Glass_internal
0001F9D4 0000                       		dc.w byte_1B934-Map_SS_Glass_internal
0001F9D6 0000                       		dc.w byte_1B93A-Map_SS_Glass_internal
0001F9D8 01                         byte_1B928:	dc.b 1
0001F9D9 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001F9DE 01                         byte_1B92E:	dc.b 1
0001F9DF F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001F9E4 01                         byte_1B934:	dc.b 1
0001F9E5 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001F9EA 01                         byte_1B93A:	dc.b 1
0001F9EB F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001F9F0                            		even
0001F9F0                            		even
0001F9F0                            Map_SS_Up:	include	"_maps\SS UP Block.asm"
0001F9F0                            ; ---------------------------------------------------------------------------
0001F9F0                            ; Sprite mappings - special stage "UP" block
0001F9F0                            ; ---------------------------------------------------------------------------
0001F9F0                            Map_SS_Up_internal:
0001F9F0 0000                       		dc.w byte_1B944-Map_SS_Up_internal
0001F9F2 0000                       		dc.w byte_1B94A-Map_SS_Up_internal
0001F9F4 01                         byte_1B944:	dc.b 1
0001F9F5 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001F9FA 01                         byte_1B94A:	dc.b 1
0001F9FB F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001FA00                            		even
0001FA00                            		even
0001FA00                            Map_SS_Down:	include	"_maps\SS DOWN Block.asm"
0001FA00                            ; ---------------------------------------------------------------------------
0001FA00                            ; Sprite mappings - special stage "DOWN" block
0001FA00                            ; ---------------------------------------------------------------------------
0001FA00                            Map_SS_Down_internal:
0001FA00 0000                       		dc.w byte_1B954-Map_SS_Down_internal
0001FA02 0000                       		dc.w byte_1B95A-Map_SS_Down_internal
0001FA04 01                         byte_1B954:	dc.b 1
0001FA05 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001FA0A 01                         byte_1B95A:	dc.b 1
0001FA0B F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001FA10                            		even
0001FA10                            		even
0001FA10                            		include	"_maps\SS Chaos Emeralds.asm"
0001FA10                            ; ---------------------------------------------------------------------------
0001FA10                            ; Sprite mappings - special stage chaos	emeralds
0001FA10                            ; ---------------------------------------------------------------------------
0001FA10 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001FA12 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001FA14 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001FA16 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001FA18 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001FA1A 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001FA1C 01                         byte_1B96C:	dc.b 1
0001FA1D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001FA22 01                         byte_1B972:	dc.b 1
0001FA23 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0001FA28 01                         byte_1B978:	dc.b 1
0001FA29 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001FA2E 01                         byte_1B97E:	dc.b 1
0001FA2F F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001FA34                            		even
0001FA34                            		even
0001FA34                            
0001FA34                            		include	"_incObj\09 Sonic in Special Stage.asm"
0001FA34                            ; ---------------------------------------------------------------------------
0001FA34                            ; Object 09 - Sonic (special stage)
0001FA34                            ; ---------------------------------------------------------------------------
0001FA34                            
0001FA34                            SonicSpecial:
0001FA34 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0001FA38 6700                       		beq.s	Obj09_Normal	; if not, branch
0001FA3A 6100 0000                  		bsr.w	SS_FixCamera
0001FA3E 6000 0000                  		bra.w	DebugMode
0001FA42                            ; ===========================================================================
0001FA42                            
0001FA42                            Obj09_Normal:
0001FA42 7000                       		moveq	#0,d0
0001FA44 1028 0024                  		move.b	obRoutine(a0),d0
0001FA48 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001FA4C 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001FA50                            ; ===========================================================================
0001FA50 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001FA52 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001FA54 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001FA56 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001FA58                            ; ===========================================================================
0001FA58                            
0001FA58                            Obj09_Main:	; Routine 0
0001FA58 5428 0024                  		addq.b	#2,obRoutine(a0)
0001FA5C 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001FA62 117C 0007 0017             		move.b	#7,obWidth(a0)
0001FA68 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0001FA70 317C 0780 0002             		move.w	#$780,obGfx(a0)
0001FA76 117C 0004 0001             		move.b	#4,obRender(a0)
0001FA7C 317C 0000 0018             		move.w	#0,obPriority(a0)
0001FA82 117C 0002 001C             		move.b	#id_Roll,obAnim(a0)
0001FA88 08E8 0002 0022             		bset	#2,obStatus(a0)
0001FA8E 08E8 0001 0022             		bset	#1,obStatus(a0)
0001FA94                            
0001FA94                            Obj09_ChkDebug:	; Routine 2
0001FA94 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat enabled?
0001FA98 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001FA9A 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
0001FAA0 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001FAA2 31FC 0001 FE08             		move.w	#1,(v_debuguse).w ; change Sonic into a ring
0001FAA8                            
0001FAA8                            Obj09_NoDebug:
0001FAA8 117C 0000 0030             		move.b	#0,$30(a0)
0001FAAE 7000                       		moveq	#0,d0
0001FAB0 1028 0022                  		move.b	obStatus(a0),d0
0001FAB4 0240 0002                  		andi.w	#2,d0
0001FAB8 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001FABC 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001FAC0 4EB9 0001 6F68             		jsr	(Sonic_LoadGfx).l
0001FAC6 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001FACC                            ; ===========================================================================
0001FACC 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001FACE 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001FAD0                            ; ===========================================================================
0001FAD0                            
0001FAD0                            Obj09_OnWall:
0001FAD0 6100 0000                  		bsr.w	Obj09_Jump
0001FAD4 6100 0000                  		bsr.w	Obj09_Move
0001FAD8 6100 0000                  		bsr.w	Obj09_Fall
0001FADC 6000                       		bra.s	Obj09_Display
0001FADE                            ; ===========================================================================
0001FADE                            
0001FADE                            Obj09_InAir:
0001FADE 6100 0000                  		bsr.w	nullsub_2
0001FAE2 6100 0000                  		bsr.w	Obj09_Move
0001FAE6 6100 0000                  		bsr.w	Obj09_Fall
0001FAEA                            
0001FAEA                            Obj09_Display:
0001FAEA 6100 0000                  		bsr.w	Obj09_ChkItems
0001FAEE 6100 0000                  		bsr.w	Obj09_ChkItems2
0001FAF2 4EB9 0000 F81A             		jsr	(SpeedToPos).l
0001FAF8 6100 0000                  		bsr.w	SS_FixCamera
0001FAFC 3038 F780                  		move.w	(v_ssangle).w,d0
0001FB00 D078 F782                  		add.w	(v_ssrotate).w,d0
0001FB04 31C0 F780                  		move.w	d0,(v_ssangle).w
0001FB08 4EB9 0001 6A14             		jsr	(Sonic_Animate).l
0001FB0E 4E75                       		rts	
0001FB10                            
0001FB10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FB10                            
0001FB10                            
0001FB10                            Obj09_Move:
0001FB10 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
0001FB16 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001FB18 6100 0000                  		bsr.w	Obj09_MoveLeft
0001FB1C                            
0001FB1C                            Obj09_ChkRight:
0001FB1C 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
0001FB22 6700                       		beq.s	loc_1BA78	; if not, branch
0001FB24 6100 0000                  		bsr.w	Obj09_MoveRight
0001FB28                            
0001FB28                            loc_1BA78:
0001FB28 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001FB2C 0200 000C                  		andi.b	#btnL+btnR,d0
0001FB30 6600                       		bne.s	loc_1BAA8
0001FB32 3028 0020                  		move.w	obInertia(a0),d0
0001FB36 6700                       		beq.s	loc_1BAA8
0001FB38 6B00                       		bmi.s	loc_1BA9A
0001FB3A 0440 000C                  		subi.w	#$C,d0
0001FB3E 6400                       		bcc.s	loc_1BA94
0001FB40 303C 0000                  		move.w	#0,d0
0001FB44                            
0001FB44                            loc_1BA94:
0001FB44 3140 0020                  		move.w	d0,obInertia(a0)
0001FB48 6000                       		bra.s	loc_1BAA8
0001FB4A                            ; ===========================================================================
0001FB4A                            
0001FB4A                            loc_1BA9A:
0001FB4A 0640 000C                  		addi.w	#$C,d0
0001FB4E 6400                       		bcc.s	loc_1BAA4
0001FB50 303C 0000                  		move.w	#0,d0
0001FB54                            
0001FB54                            loc_1BAA4:
0001FB54 3140 0020                  		move.w	d0,obInertia(a0)
0001FB58                            
0001FB58                            loc_1BAA8:
0001FB58 1038 F780                  		move.b	(v_ssangle).w,d0
0001FB5C 0600 0020                  		addi.b	#$20,d0
0001FB60 0200 00C0                  		andi.b	#$C0,d0
0001FB64 4400                       		neg.b	d0
0001FB66 4EB9 0000 3D28             		jsr	(CalcSine).l
0001FB6C C3E8 0020                  		muls.w	obInertia(a0),d1
0001FB70 D3A8 0008                  		add.l	d1,obX(a0)
0001FB74 C1E8 0020                  		muls.w	obInertia(a0),d0
0001FB78 D1A8 000C                  		add.l	d0,obY(a0)
0001FB7C 48E7 C000                  		movem.l	d0-d1,-(sp)
0001FB80 2428 000C                  		move.l	obY(a0),d2
0001FB84 2628 0008                  		move.l	obX(a0),d3
0001FB88 6100 0000                  		bsr.w	sub_1BCE8
0001FB8C 6700                       		beq.s	loc_1BAF2
0001FB8E 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001FB92 93A8 0008                  		sub.l	d1,obX(a0)
0001FB96 91A8 000C                  		sub.l	d0,obY(a0)
0001FB9A 317C 0000 0020             		move.w	#0,obInertia(a0)
0001FBA0 4E75                       		rts	
0001FBA2                            ; ===========================================================================
0001FBA2                            
0001FBA2                            loc_1BAF2:
0001FBA2 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001FBA6 4E75                       		rts	
0001FBA8                            ; End of function Obj09_Move
0001FBA8                            
0001FBA8                            
0001FBA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FBA8                            
0001FBA8                            
0001FBA8                            Obj09_MoveLeft:
0001FBA8 08E8 0000 0022             		bset	#0,obStatus(a0)
0001FBAE 3028 0020                  		move.w	obInertia(a0),d0
0001FBB2 6700                       		beq.s	loc_1BB06
0001FBB4 6A00                       		bpl.s	loc_1BB1A
0001FBB6                            
0001FBB6                            loc_1BB06:
0001FBB6 0440 000C                  		subi.w	#$C,d0
0001FBBA 0C40 F800                  		cmpi.w	#-$800,d0
0001FBBE 6E00                       		bgt.s	loc_1BB14
0001FBC0 303C F800                  		move.w	#-$800,d0
0001FBC4                            
0001FBC4                            loc_1BB14:
0001FBC4 3140 0020                  		move.w	d0,obInertia(a0)
0001FBC8 4E75                       		rts	
0001FBCA                            ; ===========================================================================
0001FBCA                            
0001FBCA                            loc_1BB1A:
0001FBCA 0440 0040                  		subi.w	#$40,d0
0001FBCE 6400                       		bcc.s	loc_1BB22
0001FBD0 4E71                       		nop	
0001FBD2                            
0001FBD2                            loc_1BB22:
0001FBD2 3140 0020                  		move.w	d0,obInertia(a0)
0001FBD6 4E75                       		rts	
0001FBD8                            ; End of function Obj09_MoveLeft
0001FBD8                            
0001FBD8                            
0001FBD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FBD8                            
0001FBD8                            
0001FBD8                            Obj09_MoveRight:
0001FBD8 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001FBDE 3028 0020                  		move.w	obInertia(a0),d0
0001FBE2 6B00                       		bmi.s	loc_1BB48
0001FBE4 0640 000C                  		addi.w	#$C,d0
0001FBE8 0C40 0800                  		cmpi.w	#$800,d0
0001FBEC 6D00                       		blt.s	loc_1BB42
0001FBEE 303C 0800                  		move.w	#$800,d0
0001FBF2                            
0001FBF2                            loc_1BB42:
0001FBF2 3140 0020                  		move.w	d0,obInertia(a0)
0001FBF6 6000                       		bra.s	locret_1BB54
0001FBF8                            ; ===========================================================================
0001FBF8                            
0001FBF8                            loc_1BB48:
0001FBF8 0640 0040                  		addi.w	#$40,d0
0001FBFC 6400                       		bcc.s	loc_1BB50
0001FBFE 4E71                       		nop	
0001FC00                            
0001FC00                            loc_1BB50:
0001FC00 3140 0020                  		move.w	d0,obInertia(a0)
0001FC04                            
0001FC04                            locret_1BB54:
0001FC04 4E75                       		rts	
0001FC06                            ; End of function Obj09_MoveRight
0001FC06                            
0001FC06                            
0001FC06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC06                            
0001FC06                            
0001FC06                            Obj09_Jump:
0001FC06 1038 F603                  		move.b	(v_jpadpress2).w,d0
0001FC0A 0200 0070                  		andi.b	#btnABC,d0	; is A,	B or C pressed?
0001FC0E 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001FC10 1038 F780                  		move.b	(v_ssangle).w,d0
0001FC14 0200 00FC                  		andi.b	#$FC,d0
0001FC18 4400                       		neg.b	d0
0001FC1A 0400 0040                  		subi.b	#$40,d0
0001FC1E 4EB9 0000 3D28             		jsr	(CalcSine).l
0001FC24 C3FC 0680                  		muls.w	#$680,d1
0001FC28 E081                       		asr.l	#8,d1
0001FC2A 3141 0010                  		move.w	d1,obVelX(a0)
0001FC2E C1FC 0680                  		muls.w	#$680,d0
0001FC32 E080                       		asr.l	#8,d0
0001FC34 3140 0012                  		move.w	d0,obVelY(a0)
0001FC38 08E8 0001 0022             		bset	#1,obStatus(a0)
0001FC48                            
0001FC48                            Obj09_NoJump:
0001FC48 4E75                       		rts	
0001FC4A                            ; End of function Obj09_Jump
0001FC4A                            
0001FC4A                            
0001FC4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC4A                            
0001FC4A                            
0001FC4A                            nullsub_2:
0001FC4A 4E75                       		rts	
0001FC4C                            ; End of function nullsub_2
0001FC4C                            
0001FC4C                            ; ===========================================================================
0001FC4C                            ; ---------------------------------------------------------------------------
0001FC4C                            ; unused subroutine to limit Sonic's upward vertical speed
0001FC4C                            ; ---------------------------------------------------------------------------
0001FC4C 323C FC00                  		move.w	#-$400,d1
0001FC50 B268 0012                  		cmp.w	obVelY(a0),d1
0001FC54 6F00                       		ble.s	locret_1BBB4
0001FC56 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001FC5A 0200 0070                  		andi.b	#btnABC,d0
0001FC5E 6600                       		bne.s	locret_1BBB4
0001FC60 3141 0012                  		move.w	d1,obVelY(a0)
0001FC64                            
0001FC64                            locret_1BBB4:
0001FC64 4E75                       		rts	
0001FC66                            ; ---------------------------------------------------------------------------
0001FC66                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001FC66                            ; ---------------------------------------------------------------------------
0001FC66                            
0001FC66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC66                            
0001FC66                            
0001FC66                            SS_FixCamera:
0001FC66 3428 000C                  		move.w	obY(a0),d2
0001FC6A 3628 0008                  		move.w	obX(a0),d3
0001FC6E 3038 F700                  		move.w	(v_screenposx).w,d0
0001FC72 0443 00A0                  		subi.w	#$A0,d3
0001FC76 6500                       		bcs.s	loc_1BBCE
0001FC78 9043                       		sub.w	d3,d0
0001FC7A 9178 F700                  		sub.w	d0,(v_screenposx).w
0001FC7E                            
0001FC7E                            loc_1BBCE:
0001FC7E 3038 F704                  		move.w	(v_screenposy).w,d0
0001FC82 0442 0070                  		subi.w	#$70,d2
0001FC86 6500                       		bcs.s	locret_1BBDE
0001FC88 9042                       		sub.w	d2,d0
0001FC8A 9178 F704                  		sub.w	d0,(v_screenposy).w
0001FC8E                            
0001FC8E                            locret_1BBDE:
0001FC8E 4E75                       		rts	
0001FC90                            ; End of function SS_FixCamera
0001FC90                            
0001FC90                            ; ===========================================================================
0001FC90                            
0001FC90                            Obj09_ExitStage:
0001FC90 0678 0040 F782             		addi.w	#$40,(v_ssrotate).w
0001FC96 0C78 1800 F782             		cmpi.w	#$1800,(v_ssrotate).w
0001FC9C 6600                       		bne.s	loc_1BBF4
0001FC9E 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001FCA4                            
0001FCA4                            loc_1BBF4:
0001FCA4 0C78 3000 F782             		cmpi.w	#$3000,(v_ssrotate).w
0001FCAA 6D00                       		blt.s	loc_1BC12
0001FCAC 31FC 0000 F782             		move.w	#0,(v_ssrotate).w
0001FCB2 31FC 4000 F780             		move.w	#$4000,(v_ssangle).w
0001FCB8 5428 0024                  		addq.b	#2,obRoutine(a0)
0001FCBC 317C 003C 0038             		move.w	#$3C,$38(a0)
0001FCC2                            
0001FCC2                            loc_1BC12:
0001FCC2 3038 F780                  		move.w	(v_ssangle).w,d0
0001FCC6 D078 F782                  		add.w	(v_ssrotate).w,d0
0001FCCA 31C0 F780                  		move.w	d0,(v_ssangle).w
0001FCCE 4EB9 0001 6A14             		jsr	(Sonic_Animate).l
0001FCD4 4EB9 0001 6F68             		jsr	(Sonic_LoadGfx).l
0001FCDA 6100 FF8A                  		bsr.w	SS_FixCamera
0001FCDE 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001FCE4                            ; ===========================================================================
0001FCE4                            
0001FCE4                            Obj09_Exit2:
0001FCE4 5368 0038                  		subq.w	#1,$38(a0)
0001FCE8 6600                       		bne.s	loc_1BC40
0001FCEA 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001FCF0                            
0001FCF0                            loc_1BC40:
0001FCF0 4EB9 0001 6A14             		jsr	(Sonic_Animate).l
0001FCF6 4EB9 0001 6F68             		jsr	(Sonic_LoadGfx).l
0001FCFC 6100 FF68                  		bsr.w	SS_FixCamera
0001FD00 4EF9 0000 F82E             		jmp	(DisplaySprite).l
0001FD06                            
0001FD06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD06                            
0001FD06                            
0001FD06                            Obj09_Fall:
0001FD06 2428 000C                  		move.l	obY(a0),d2
0001FD0A 2628 0008                  		move.l	obX(a0),d3
0001FD0E 1038 F780                  		move.b	(v_ssangle).w,d0
0001FD12 0200 00FC                  		andi.b	#$FC,d0
0001FD16 4EB9 0000 3D28             		jsr	(CalcSine).l
0001FD1C 3828 0010                  		move.w	obVelX(a0),d4
0001FD20 48C4                       		ext.l	d4
0001FD22 E184                       		asl.l	#8,d4
0001FD24 C1FC 002A                  		muls.w	#$2A,d0
0001FD28 D084                       		add.l	d4,d0
0001FD2A 3828 0012                  		move.w	obVelY(a0),d4
0001FD2E 48C4                       		ext.l	d4
0001FD30 E184                       		asl.l	#8,d4
0001FD32 C3FC 002A                  		muls.w	#$2A,d1
0001FD36 D284                       		add.l	d4,d1
0001FD38 D680                       		add.l	d0,d3
0001FD3A 6100 0000                  		bsr.w	sub_1BCE8
0001FD3E 6700                       		beq.s	loc_1BCB0
0001FD40 9680                       		sub.l	d0,d3
0001FD42 7000                       		moveq	#0,d0
0001FD44 3140 0010                  		move.w	d0,obVelX(a0)
0001FD48 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001FD4E D481                       		add.l	d1,d2
0001FD50 6100 0000                  		bsr.w	sub_1BCE8
0001FD54 6700                       		beq.s	loc_1BCC6
0001FD56 9481                       		sub.l	d1,d2
0001FD58 7200                       		moveq	#0,d1
0001FD5A 3141 0012                  		move.w	d1,obVelY(a0)
0001FD5E 4E75                       		rts	
0001FD60                            ; ===========================================================================
0001FD60                            
0001FD60                            loc_1BCB0:
0001FD60 D481                       		add.l	d1,d2
0001FD62 6100 0000                  		bsr.w	sub_1BCE8
0001FD66 6700                       		beq.s	loc_1BCD4
0001FD68 9481                       		sub.l	d1,d2
0001FD6A 7200                       		moveq	#0,d1
0001FD6C 3141 0012                  		move.w	d1,obVelY(a0)
0001FD70 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001FD76                            
0001FD76                            loc_1BCC6:
0001FD76 E080                       		asr.l	#8,d0
0001FD78 E081                       		asr.l	#8,d1
0001FD7A 3140 0010                  		move.w	d0,obVelX(a0)
0001FD7E 3141 0012                  		move.w	d1,obVelY(a0)
0001FD82 4E75                       		rts	
0001FD84                            ; ===========================================================================
0001FD84                            
0001FD84                            loc_1BCD4:
0001FD84 E080                       		asr.l	#8,d0
0001FD86 E081                       		asr.l	#8,d1
0001FD88 3140 0010                  		move.w	d0,obVelX(a0)
0001FD8C 3141 0012                  		move.w	d1,obVelY(a0)
0001FD90 08E8 0001 0022             		bset	#1,obStatus(a0)
0001FD96 4E75                       		rts	
0001FD98                            ; End of function Obj09_Fall
0001FD98                            
0001FD98                            
0001FD98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD98                            
0001FD98                            
0001FD98                            sub_1BCE8:
0001FD98 43F9 00FF 0000             		lea	($FF0000).l,a1
0001FD9E 7800                       		moveq	#0,d4
0001FDA0 4842                       		swap	d2
0001FDA2 3802                       		move.w	d2,d4
0001FDA4 4842                       		swap	d2
0001FDA6 0644 0044                  		addi.w	#$44,d4
0001FDAA 88FC 0018                  		divu.w	#$18,d4
0001FDAE C8FC 0080                  		mulu.w	#$80,d4
0001FDB2 D3C4                       		adda.l	d4,a1
0001FDB4 7800                       		moveq	#0,d4
0001FDB6 4843                       		swap	d3
0001FDB8 3803                       		move.w	d3,d4
0001FDBA 4843                       		swap	d3
0001FDBC 0644 0014                  		addi.w	#$14,d4
0001FDC0 88FC 0018                  		divu.w	#$18,d4
0001FDC4 D2C4                       		adda.w	d4,a1
0001FDC6 7A00                       		moveq	#0,d5
0001FDC8 1819                       		move.b	(a1)+,d4
0001FDCA 6100                       		bsr.s	sub_1BD30
0001FDCC 1819                       		move.b	(a1)+,d4
0001FDCE 6100                       		bsr.s	sub_1BD30
0001FDD0 D2FC 007E                  		adda.w	#$7E,a1
0001FDD4 1819                       		move.b	(a1)+,d4
0001FDD6 6100                       		bsr.s	sub_1BD30
0001FDD8 1819                       		move.b	(a1)+,d4
0001FDDA 6100                       		bsr.s	sub_1BD30
0001FDDC 4A05                       		tst.b	d5
0001FDDE 4E75                       		rts	
0001FDE0                            ; End of function sub_1BCE8
0001FDE0                            
0001FDE0                            
0001FDE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FDE0                            
0001FDE0                            
0001FDE0                            sub_1BD30:
0001FDE0 6700                       		beq.s	locret_1BD44
0001FDE2 0C04 0028                  		cmpi.b	#$28,d4
0001FDE6 6700                       		beq.s	locret_1BD44
0001FDE8 0C04 003A                  		cmpi.b	#$3A,d4
0001FDEC 6500                       		bcs.s	loc_1BD46
0001FDEE 0C04 004B                  		cmpi.b	#$4B,d4
0001FDF2 6400                       		bcc.s	loc_1BD46
0001FDF4                            
0001FDF4                            locret_1BD44:
0001FDF4 4E75                       		rts	
0001FDF6                            ; ===========================================================================
0001FDF6                            
0001FDF6                            loc_1BD46:
0001FDF6 1144 0030                  		move.b	d4,$30(a0)
0001FDFA 2149 0032                  		move.l	a1,$32(a0)
0001FDFE 7AFF                       		moveq	#-1,d5
0001FE00 4E75                       		rts	
0001FE02                            ; End of function sub_1BD30
0001FE02                            
0001FE02                            
0001FE02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FE02                            
0001FE02                            
0001FE02                            Obj09_ChkItems:
0001FE02 43F9 00FF 0000             		lea	($FF0000).l,a1
0001FE08 7800                       		moveq	#0,d4
0001FE0A 3828 000C                  		move.w	obY(a0),d4
0001FE0E 0644 0050                  		addi.w	#$50,d4
0001FE12 88FC 0018                  		divu.w	#$18,d4
0001FE16 C8FC 0080                  		mulu.w	#$80,d4
0001FE1A D3C4                       		adda.l	d4,a1
0001FE1C 7800                       		moveq	#0,d4
0001FE1E 3828 0008                  		move.w	obX(a0),d4
0001FE22 0644 0020                  		addi.w	#$20,d4
0001FE26 88FC 0018                  		divu.w	#$18,d4
0001FE2A D2C4                       		adda.w	d4,a1
0001FE2C 1811                       		move.b	(a1),d4
0001FE2E 6600                       		bne.s	Obj09_ChkCont
0001FE30 4A28 003A                  		tst.b	$3A(a0)
0001FE34 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001FE38 7800                       		moveq	#0,d4
0001FE3A 4E75                       		rts	
0001FE3C                            ; ===========================================================================
0001FE3C                            
0001FE3C                            Obj09_ChkCont:
0001FE3C 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001FE40 6600                       		bne.s	Obj09_Chk1Up
0001FE42 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001FE46 6600                       		bne.s	Obj09_GetCont
0001FE48 14BC 0001                  		move.b	#1,(a2)
0001FE4C 2549 0004                  		move.l	a1,4(a2)
0001FE50                            
0001FE50                            Obj09_GetCont:
0001FE50 4EB9 0000 B99E             		jsr	(CollectRing).l
0001FE56 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; check if you have 50 rings
0001FE5C 6500                       		bcs.s	Obj09_NoCont
0001FE5E 08F8 0000 FE1B             		bset	#0,(v_lifecount).w
0001FE64 6600                       		bne.s	Obj09_NoCont
0001FE66 5238 FE18                  		addq.b	#1,(v_continues).w ; add 1 to number of continues
0001FE74                            
0001FE74                            Obj09_NoCont:
0001FE74 7800                       		moveq	#0,d4
0001FE76 4E75                       		rts	
0001FE78                            ; ===========================================================================
0001FE78                            
0001FE78                            Obj09_Chk1Up:
0001FE78 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001FE7C 6600                       		bne.s	Obj09_ChkEmer
0001FE7E 6100 F6EA                  		bsr.w	SS_RemoveCollectedItem
0001FE82 6600                       		bne.s	Obj09_Get1Up
0001FE84 14BC 0003                  		move.b	#3,(a2)
0001FE88 2549 0004                  		move.l	a1,4(a2)
0001FE8C                            
0001FE8C                            Obj09_Get1Up:
0001FE8C 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to number of lives
0001FE90 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0001FE9E 7800                       		moveq	#0,d4
0001FEA0 4E75                       		rts	
0001FEA2                            ; ===========================================================================
0001FEA2                            
0001FEA2                            Obj09_ChkEmer:
0001FEA2 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001FEA6 6500                       		bcs.s	Obj09_ChkGhost
0001FEA8 0C04 0040                  		cmpi.b	#$40,d4
0001FEAC 6200                       		bhi.s	Obj09_ChkGhost
0001FEAE 6100 F6BA                  		bsr.w	SS_RemoveCollectedItem
0001FEB2 6600                       		bne.s	Obj09_GetEmer
0001FEB4 14BC 0005                  		move.b	#5,(a2)
0001FEB8 2549 0004                  		move.l	a1,4(a2)
0001FEBC                            
0001FEBC                            Obj09_GetEmer:
0001FEBC 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0001FEC2 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001FEC4 0404 003B                  		subi.b	#$3B,d4
0001FEC8 7000                       		moveq	#0,d0
0001FECA 1038 FE57                  		move.b	(v_emeralds).w,d0
0001FECE 45F8 FE58                  		lea	(v_emldlist).w,a2
0001FED2 1584 0000                  		move.b	d4,(a2,d0.w)
0001FED6 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001FEDA                            
0001FEDA                            Obj09_NoEmer:
0001FEE4 7800                       		moveq	#0,d4
0001FEE6 4E75                       		rts	
0001FEE8                            ; ===========================================================================
0001FEE8                            
0001FEE8                            Obj09_ChkGhost:
0001FEE8 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001FEEC 6600                       		bne.s	Obj09_ChkGhostTag
0001FEEE 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001FEF4                            
0001FEF4                            Obj09_ChkGhostTag:
0001FEF4 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001FEF8 6600                       		bne.s	Obj09_NoGhost
0001FEFA 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001FF00 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001FF02 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001FF08                            
0001FF08                            Obj09_NoGhost:
0001FF08 78FF                       		moveq	#-1,d4
0001FF0A 4E75                       		rts	
0001FF0C                            ; ===========================================================================
0001FF0C                            
0001FF0C                            Obj09_MakeGhostSolid:
0001FF0C 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001FF12 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001FF14 43F9 00FF 1020             		lea	($FF1020).l,a1
0001FF1A 723F                       		moveq	#$3F,d1
0001FF1C                            
0001FF1C                            Obj09_GhostLoop2:
0001FF1C 743F                       		moveq	#$3F,d2
0001FF1E                            
0001FF1E                            Obj09_GhostLoop:
0001FF1E 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001FF22 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001FF24 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001FF28                            
0001FF28                            Obj09_NoReplace:
0001FF28 5249                       		addq.w	#1,a1
0001FF2A 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001FF2E 43E9 0040                  		lea	$40(a1),a1
0001FF32 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001FF36                            
0001FF36                            Obj09_GhostNotSolid:
0001FF36 4228 003A                  		clr.b	$3A(a0)
0001FF3A 7800                       		moveq	#0,d4
0001FF3C 4E75                       		rts	
0001FF3E                            ; End of function Obj09_ChkItems
0001FF3E                            
0001FF3E                            
0001FF3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FF3E                            
0001FF3E                            
0001FF3E                            Obj09_ChkItems2:
0001FF3E 1028 0030                  		move.b	$30(a0),d0
0001FF42 6600                       		bne.s	Obj09_ChkBumper
0001FF44 5328 0036                  		subq.b	#1,$36(a0)
0001FF48 6A00                       		bpl.s	loc_1BEA0
0001FF4A 117C 0000 0036             		move.b	#0,$36(a0)
0001FF50                            
0001FF50                            loc_1BEA0:
0001FF50 5328 0037                  		subq.b	#1,$37(a0)
0001FF54 6A00                       		bpl.s	locret_1BEAC
0001FF56 117C 0000 0037             		move.b	#0,$37(a0)
0001FF5C                            
0001FF5C                            locret_1BEAC:
0001FF5C 4E75                       		rts	
0001FF5E                            ; ===========================================================================
0001FF5E                            
0001FF5E                            Obj09_ChkBumper:
0001FF5E 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001FF62 6600                       		bne.s	Obj09_GOAL
0001FF64 2228 0032                  		move.l	$32(a0),d1
0001FF68 0481 00FF 0001             		subi.l	#$FF0001,d1
0001FF6E 3401                       		move.w	d1,d2
0001FF70 0241 007F                  		andi.w	#$7F,d1
0001FF74 C2FC 0018                  		mulu.w	#$18,d1
0001FF78 0441 0014                  		subi.w	#$14,d1
0001FF7C EE4A                       		lsr.w	#7,d2
0001FF7E 0242 007F                  		andi.w	#$7F,d2
0001FF82 C4FC 0018                  		mulu.w	#$18,d2
0001FF86 0442 0044                  		subi.w	#$44,d2
0001FF8A 9268 0008                  		sub.w	obX(a0),d1
0001FF8E 9468 000C                  		sub.w	obY(a0),d2
0001FF92 4EB9 0000 3FBA             		jsr	(CalcAngle).l
0001FF98 4EB9 0000 3D28             		jsr	(CalcSine).l
0001FF9E C3FC F900                  		muls.w	#-$700,d1
0001FFA2 E081                       		asr.l	#8,d1
0001FFA4 3141 0010                  		move.w	d1,obVelX(a0)
0001FFA8 C1FC F900                  		muls.w	#-$700,d0
0001FFAC E080                       		asr.l	#8,d0
0001FFAE 3140 0012                  		move.w	d0,obVelY(a0)
0001FFB2 08E8 0001 0022             		bset	#1,obStatus(a0)
0001FFB8 6100 F5B0                  		bsr.w	SS_RemoveCollectedItem
0001FFBC 6600                       		bne.s	Obj09_BumpSnd
0001FFBE 14BC 0002                  		move.b	#2,(a2)
0001FFC2 2028 0032                  		move.l	$32(a0),d0
0001FFC6 5380                       		subq.l	#1,d0
0001FFC8 2540 0004                  		move.l	d0,4(a2)
0001FFCC                            
0001FFCC                            Obj09_BumpSnd:
0001FFD6                            ; ===========================================================================
0001FFD6                            
0001FFD6                            Obj09_GOAL:
0001FFD6 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001FFDA 6600                       		bne.s	Obj09_UPblock
0001FFDC 5428 0024                  		addq.b	#2,obRoutine(a0) ; run routine "Obj09_ExitStage"
0001FFEA 4E75                       		rts	
0001FFEC                            ; ===========================================================================
0001FFEC                            
0001FFEC                            Obj09_UPblock:
0001FFEC 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001FFF0 6600                       		bne.s	Obj09_DOWNblock
0001FFF2 4A28 0036                  		tst.b	$36(a0)
0001FFF6 6600 0000                  		bne.w	Obj09_NoGlass
0001FFFA 117C 001E 0036             		move.b	#$1E,$36(a0)
00020000 0838 0006 F783             		btst	#6,($FFFFF783).w
00020006 6700                       		beq.s	Obj09_UPsnd
00020008 E1F8 F782                  		asl	(v_ssrotate).w	; increase stage rotation speed
0002000C 2268 0032                  		movea.l	$32(a0),a1
00020010 5389                       		subq.l	#1,a1
00020012 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
00020016                            
00020016                            Obj09_UPsnd:
00020020                            ; ===========================================================================
00020020                            
00020020                            Obj09_DOWNblock:
00020020 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
00020024 6600                       		bne.s	Obj09_Rblock
00020026 4A28 0036                  		tst.b	$36(a0)
0002002A 6600 0000                  		bne.w	Obj09_NoGlass
0002002E 117C 001E 0036             		move.b	#$1E,$36(a0)
00020034 0838 0006 F783             		btst	#6,(v_ssrotate+1).w
0002003A 6600                       		bne.s	Obj09_DOWNsnd
0002003C E0F8 F782                  		asr	(v_ssrotate).w	; reduce stage rotation speed
00020040 2268 0032                  		movea.l	$32(a0),a1
00020044 5389                       		subq.l	#1,a1
00020046 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0002004A                            
0002004A                            Obj09_DOWNsnd:
00020054                            ; ===========================================================================
00020054                            
00020054                            Obj09_Rblock:
00020054 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
00020058 6600                       		bne.s	Obj09_ChkGlass
0002005A 4A28 0037                  		tst.b	$37(a0)
0002005E 6600 0000                  		bne.w	Obj09_NoGlass
00020062 117C 001E 0037             		move.b	#$1E,$37(a0)
00020068 6100 F500                  		bsr.w	SS_RemoveCollectedItem
0002006C 6600                       		bne.s	Obj09_RevStage
0002006E 14BC 0004                  		move.b	#4,(a2)
00020072 2028 0032                  		move.l	$32(a0),d0
00020076 5380                       		subq.l	#1,d0
00020078 2540 0004                  		move.l	d0,4(a2)
0002007C                            
0002007C                            Obj09_RevStage:
0002007C 4478 F782                  		neg.w	(v_ssrotate).w	; reverse stage rotation
0002008A                            ; ===========================================================================
0002008A                            
0002008A                            Obj09_ChkGlass:
0002008A 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0002008E 6700                       		beq.s	Obj09_Glass	; if yes, branch
00020090 0C00 002E                  		cmpi.b	#$2E,d0
00020094 6700                       		beq.s	Obj09_Glass
00020096 0C00 002F                  		cmpi.b	#$2F,d0
0002009A 6700                       		beq.s	Obj09_Glass
0002009C 0C00 0030                  		cmpi.b	#$30,d0
000200A0 6600                       		bne.s	Obj09_NoGlass	; if not, branch
000200A2                            
000200A2                            Obj09_Glass:
000200A2 6100 F4C6                  		bsr.w	SS_RemoveCollectedItem
000200A6 6600                       		bne.s	Obj09_GlassSnd
000200A8 14BC 0006                  		move.b	#6,(a2)
000200AC 2268 0032                  		movea.l	$32(a0),a1
000200B0 5389                       		subq.l	#1,a1
000200B2 2549 0004                  		move.l	a1,4(a2)
000200B6 1011                       		move.b	(a1),d0
000200B8 5200                       		addq.b	#1,d0		; change glass type when touched
000200BA 0C00 0030                  		cmpi.b	#$30,d0
000200BE 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
000200C0 4200                       		clr.b	d0		; remove the glass block when it's destroyed
000200C2                            
000200C2                            Obj09_GlassUpdate:
000200C2 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
000200C6                            
000200C6                            Obj09_GlassSnd:
000200D0                            ; ===========================================================================
000200D0                            
000200D0                            Obj09_NoGlass:
000200D0 4E75                       		rts	
000200D2                            ; End of function Obj09_ChkItems2
000200D2                            ; End of function Obj09_ChkItems2
000200D2                            
000200D2                            		include	"_incObj\10.asm"
000200D2                            ; ---------------------------------------------------------------------------
000200D2                            ; Object 10 - After-Image
000200D2                            ; ---------------------------------------------------------------------------
000200D2                            
000200D2                            Obj10:
000200D2 0C38 0018 D01C                   cmpi.b   #id_Death,(v_player+obAnim).w   ; is Sonic using the death animation?
000200D8 6700 0000                        beq.w   AfterimageEnd      ; if yes, delete the After Image
000200DC                            
000200DC 7000                             moveq   #0,d0
000200DE 1028 0024                        move.b   obRoutine(a0),d0
000200E2 323B 0000                        move.w   Afterimage_Index(pc,d0.w),d1
000200E6 4EFB 1000                        jmp	Afterimage_Index(pc,d1.w)
000200EA                            
000200EA                            ; ===========================================================================
000200EA                            ;           Change the length by moving around the "No Afterimage" and "After Image Start/ After Image L Priority" sections.
000200EA                            ; ===========================================================================
000200EA                            Afterimage_Index:
000200EA 0000                             dc.w NoAfterImage-Afterimage_Index
000200EC 0000                             dc.w NoAfterImage-Afterimage_Index
000200EE 0000                             dc.w NoAfterImage-Afterimage_Index
000200F0 0000                             dc.w AfterimageStart-Afterimage_Index
000200F2 0000                             dc.w NoAfterImage-Afterimage_Index
000200F4 0000                             dc.w NoAfterImage-Afterimage_Index
000200F6 0000                             dc.w NoAfterImage-Afterimage_Index
000200F8 0000                             dc.w AfterimageLPrio-Afterimage_Index
000200FA 0000                             dc.w AfterimageEnd-Afterimage_Index
000200FC                            ; ===========================================================================
000200FC                            NoAfterImage:
000200FC 5428 0024                        addq.b   #2,obRoutine(a0)         ; go to next item of index, at the next frame
00020100 4E75                             rts
00020102                            ; ===========================================================================
00020102                            AfterimageStart:
00020102 117C 0002 0018                   move.b   #2,obPriority(a0)         ; set sprite priority to 2
00020108 6000                             bra.s   Afterimage_Show
0002010A                            ; ===========================================================================
0002010A                            AfterimageLPrio:
0002010A 5228 0018                        addq.b   #1,obPriority(a0)         ; set a lower sprite priority
0002010E                            ; ===========================================================================
0002010E                            Afterimage_Show:
0002010E 5428 0024                        addq.b   #2,obRoutine(a0)            ; go to next item of index
00020112 4EB9 0000 3D02                   jsr   (RandomNumber).l         ; get a random number
00020118 0200 0003                        andi.b   #3,d0               ; get a number equal or lower than 2 (0 until 2)
0002011C 6600                             bne.s   AfterimageException   ; if is not 0, branch
0002011E 4E75                             rts                        ; if it is 0, then don't show the after-image
00020120                            
00020120                            AfterimageException:
00020120 3178 D002 0002                   move.w   (v_player+obGfx).w,obGfx(a0)      ; copy Sonic map to after-image map
00020126 1178 D001 0001                    move.b   (v_player+obRender).w,obRender(a0)      ; copy Sonic frame infos (horizontal/vertical mirror, coordinate system......)
0002012C 2178 D01A 001A                    move.l   (v_player+obFrame).w,obFrame(a0)   ; copy the Sonic animation frame
00020132 4EF9 0000 F82E                   jmp   DisplaySprite
00020138                            ; ===========================================================================
00020138                            AfterimageEnd:
00020138 4EF9 0000 F86E                   jmp   DeleteObject
00020138 4EF9 0000 F86E                   jmp   DeleteObject
0002013E                            
0002013E                            		include	"_inc\AnimateLevelGfx.asm"
0002013E                            ; ---------------------------------------------------------------------------
0002013E                            ; Subroutine to	animate	level graphics
0002013E                            ; ---------------------------------------------------------------------------
0002013E                            
0002013E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002013E                            
0002013E                            
0002013E                            AnimateLevelGfx:
0002013E 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
00020142 6600                       		bne.s	@ispaused	; if yes, branch
00020144 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0002014A 6100 0000                  		bsr.w	AniArt_GiantRing
0002014E 7000                       		moveq	#0,d0
00020150 1038 FE10                  		move.b	(v_zone).w,d0
00020154 D040                       		add.w	d0,d0
00020156 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0002015A 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0002015E                            
0002015E                            	@ispaused:
0002015E 4E75                       		rts	
00020160                            
00020160                            ; ===========================================================================
00020160 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
00020164 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
00020168 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0002016C 0000                       		dc.w AniArt_Ending-AniArt_Index
0002016E                            ; ===========================================================================
0002016E                            ; ---------------------------------------------------------------------------
0002016E                            ; Animated pattern routine - Green Hill
0002016E                            ; ---------------------------------------------------------------------------
0002016E                            
0002016E                            AniArt_GHZ:
0002016E                            
0002016E                            AniArt_GHZ_Waterfall:
0002016E                            
0002016E =00000008                  @size:		equ 8	; number of tiles per frame
0002016E                            
0002016E 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
00020172 6A00                       		bpl.s	AniArt_GHZ_Bigflower ; branch if not 0
00020174                            
00020174 11FC 0005 F7B1             		move.b	#5,(v_lani0_time).w ; time to display each frame
0002017A 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
00020180 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
00020184 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
00020188 0240 0001                  		andi.w	#1,d0		; there are only 2 frames
0002018C 6700                       		beq.s	@isframe0	; branch if frame 0
0002018E 43E9 0100                  		lea	@size*$20(a1),a1 ; use graphics for frame 1
00020192                            
00020192                            	@isframe0:
0002019C 323C 0007                  		move.w	#@size-1,d1	; number of 8x8	tiles
000201A0 6000 0000                  		bra.w	LoadTiles
000201A4                            ; ===========================================================================
000201A4                            
000201A4                            AniArt_GHZ_Bigflower:
000201A4                            
000201A4 =00000010                  @size:		equ 16	; number of tiles per frame
000201A4                            
000201A4 5338 F7B3                  		subq.b	#1,(v_lani1_time).w
000201A8 6A00                       		bpl.s	AniArt_GHZ_Smallflower
000201AA                            
000201AA 11FC 000F F7B3             		move.b	#$F,(v_lani1_time).w
000201B0 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
000201B6 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
000201BA 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w
000201BE 0240 0001                  		andi.w	#1,d0
000201C2 6700                       		beq.s	@isframe0
000201C4 43E9 0200                  		lea	@size*$20(a1),a1
000201C8                            
000201C8                            	@isframe0:
000201D2 323C 000F                  		move.w	#@size-1,d1
000201D6 6000 0000                  		bra.w	LoadTiles
000201DA                            ; ===========================================================================
000201DA                            
000201DA                            AniArt_GHZ_Smallflower:
000201DA                            
000201DA =0000000C                  @size:		equ 12	; number of tiles per frame
000201DA                            
000201DA 5338 F7B5                  		subq.b	#1,(v_lani2_time).w
000201DE 6A00                       		bpl.s	@end
000201E0                            
000201E0 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
000201E6 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
000201EA 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
000201EE 0240 0003                  		andi.w	#3,d0		; there are 4 frames
000201F2 103B 0000                  		move.b	@sequence(pc,d0.w),d0
000201F6 0800 0000                  		btst	#0,d0		; is frame 0 or 2? (actual frame, not frame counter)
000201FA 6600                       		bne.s	@isframe1	; if not, branch
000201FC 11FC 007F F7B5             		move.b	#$7F,(v_lani2_time).w ; set longer duration for frames 0 and 2
00020202                            
00020202                            	@isframe1:
00020202 EF48                       		lsl.w	#7,d0		; multiply frame num by $80
00020204 3200                       		move.w	d0,d1
00020206 D040                       		add.w	d0,d0
00020208 D041                       		add.w	d1,d0		; multiply that by 3 (i.e. frame num times 12 * $20)
00020214 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0002021A 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0002021E 323C 000B                  		move.w	#@size-1,d1
00020222 6100 0000                  		bsr.w	LoadTiles
00020226                            
00020226                            @end:
00020226 4E75                       		rts	
00020228                            
00020228 0001 0201                  @sequence:	dc.b 0,	1, 2, 1
0002022C                            ; ===========================================================================
0002022C                            ; ---------------------------------------------------------------------------
0002022C                            ; Animated pattern routine - Marble
0002022C                            ; ---------------------------------------------------------------------------
0002022C                            
0002022C                            AniArt_MZ:
0002022C                            
0002022C                            AniArt_MZ_Lava:
0002022C                            
0002022C =00000008                  @size:		equ 8	; number of tiles per frame
0002022C                            
0002022C 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
00020230 6A00                       		bpl.s	AniArt_MZ_Magma	; branch if not 0
00020232                            
00020232 11FC 0011 F7B1             		move.b	#$11,(v_lani0_time).w ; time to display each frame
00020238 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0002023E 7000                       		moveq	#0,d0
00020240 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
00020244 5200                       		addq.b	#1,d0		; increment frame counter
00020246 0C00 0003                  		cmpi.b	#3,d0		; there are 3 frames
0002024A 6600                       		bne.s	@frame01or2	; branch if frame 0, 1 or 2
0002024C 7000                       		moveq	#0,d0
0002024E                            
0002024E                            	@frame01or2:
0002024E 11C0 F7B0                  		move.b	d0,(v_lani0_frame).w
00020252 C0FC 0100                  		mulu.w	#@size*$20,d0
00020256 D2C0                       		adda.w	d0,a1		; jump to appropriate tile
00020262 323C 0007                  		move.w	#@size-1,d1
00020266 6100 0000                  		bsr.w	LoadTiles
0002026A                            
0002026A                            AniArt_MZ_Magma:
0002026A 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0002026E 6A00                       		bpl.s	AniArt_MZ_Torch	; branch if not 0
00020270                            		
00020270 11FC 0001 F7B3             		move.b	#1,(v_lani1_time).w ; time between each gfx change
00020276 7000                       		moveq	#0,d0
00020278 1038 F7B0                  		move.b	(v_lani0_frame).w,d0 ; get surface lava frame number
0002027C 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load magma gfx
00020282 EE58                       		ror.w	#7,d0		; multiply frame num by $200
00020284 D8C0                       		adda.w	d0,a4		; jump to appropriate tile
00020290 7600                       		moveq	#0,d3
00020292 1638 F7B2                  		move.b	(v_lani1_frame).w,d3
00020296 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter (unused)
0002029A 1638 FE68                  		move.b	(v_oscillate+$A).w,d3 ; get oscillating value
0002029E 343C 0003                  		move.w	#3,d2
000202A2                            
000202A2                            	@loop:
000202A2 3003                       		move.w	d3,d0
000202A4 D040                       		add.w	d0,d0
000202A6 0240 001E                  		andi.w	#$1E,d0
000202AA 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
000202B0 3033 0000                  		move.w	(a3,d0.w),d0
000202B4 47F3 0000                  		lea	(a3,d0.w),a3
000202B8 224C                       		movea.l	a4,a1
000202BA 323C 001F                  		move.w	#$1F,d1
000202BE 4E93                       		jsr	(a3)
000202C0 5843                       		addq.w	#4,d3
000202C2 51CA FFDE                  		dbf	d2,@loop
000202C6 4E75                       		rts	
000202C8                            ; ===========================================================================
000202C8                            
000202C8                            AniArt_MZ_Torch:
000202C8                            
000202C8 =00000006                  @size:		equ 6	; number of tiles per frame
000202C8                            
000202C8 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
000202CC 6A00 0000                  		bpl.w	@end		; branch if not 0
000202D0                            		
000202D0 11FC 0004 F7B5             		move.b	#4,(v_lani2_time).w ; time to display each frame
000202D6 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
000202DC 7000                       		moveq	#0,d0
000202DE 1038 F7B6                  		move.b	(v_lani3_frame).w,d0
000202E2 5238 F7B6                  		addq.b	#1,(v_lani3_frame).w ; increment frame counter
000202E6 0238 0003 F7B6             		andi.b	#3,(v_lani3_frame).w ; there are 3 frames
000202EC C0FC 00C0                  		mulu.w	#@size*$20,d0
000202F0 D2C0                       		adda.w	d0,a1		; jump to appropriate tile
000202FC 323C 0005                  		move.w	#@size-1,d1
00020300 6000 0000                  		bra.w	LoadTiles
00020304                            
00020304                            @end:
00020304 4E75                       		rts	
00020306                            ; ===========================================================================
00020306                            ; ---------------------------------------------------------------------------
00020306                            ; Animated pattern routine - Scrap Brain
00020306                            ; ---------------------------------------------------------------------------
00020306                            
00020306                            AniArt_SBZ:
00020306                            
00020306 =0000000C                  @size:		equ 12	; number of tiles per frame
00020306                            
00020306 4A38 F7B4                  		tst.b	(v_lani2_frame).w
0002030A 6700                       		beq.s	@smokepuff	; branch if counter hits 0
0002030C                            		
0002030C 5338 F7B4                  		subq.b	#1,(v_lani2_frame).w ; decrement counter
00020310 6000                       		bra.s	@chk_smokepuff2
00020312                            ; ===========================================================================
00020312                            
00020312                            @smokepuff:
00020312 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
00020316 6A00                       		bpl.s	@chk_smokepuff2 ; branch if not 0
00020318                            		
00020318 11FC 0007 F7B1             		move.b	#7,(v_lani0_time).w ; time to display each frame
0002031E 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0002032E 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
00020332 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
00020336 0240 0007                  		andi.w	#7,d0
0002033A 6700                       		beq.s	@untilnextpuff	; branch if frame 0
0002033C 5340                       		subq.w	#1,d0
0002033E C0FC 0180                  		mulu.w	#@size*$20,d0
00020342 43F1 0000                  		lea	(a1,d0.w),a1
00020346 323C 000B                  		move.w	#@size-1,d1
0002034A 6000 0000                  		bra.w	LoadTiles
0002034E                            ; ===========================================================================
0002034E                            
0002034E                            @untilnextpuff:
0002034E 11FC 00B4 F7B4             		move.b	#180,(v_lani2_frame).w ; time between smoke puffs (3 seconds)
00020354                            
00020354                            @clearsky:
00020354 323C 0005                  		move.w	#(@size/2)-1,d1
00020358 6100 0000                  		bsr.w	LoadTiles
0002035C 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
00020362 323C 0005                  		move.w	#(@size/2)-1,d1
00020366 6000 0000                  		bra.w	LoadTiles	; load blank tiles for no smoke puff
0002036A                            ; ===========================================================================
0002036A                            
0002036A                            @chk_smokepuff2:
0002036A 4A38 F7B5                  		tst.b	(v_lani2_time).w
0002036E 6700                       		beq.s	@smokepuff2	; branch if counter hits 0
00020370                            		
00020370 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement counter
00020374 6000                       		bra.s	@end
00020376                            ; ===========================================================================
00020376                            
00020376                            @smokepuff2:
00020376 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0002037A 6A00                       		bpl.s	@end		; branch if not 0
0002037C                            		
0002037C 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w ; time to display each frame
00020382 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
00020392 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
00020396 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0002039A 0240 0007                  		andi.w	#7,d0
0002039E 6700                       		beq.s	@untilnextpuff2	; branch if frame 0
000203A0 5340                       		subq.w	#1,d0
000203A2 C0FC 0180                  		mulu.w	#@size*$20,d0
000203A6 43F1 0000                  		lea	(a1,d0.w),a1
000203AA 323C 000B                  		move.w	#@size-1,d1
000203AE 6000 0000                  		bra.w	LoadTiles
000203B2                            ; ===========================================================================
000203B2                            
000203B2                            @untilnextpuff2:
000203B2 11FC 0078 F7B5             		move.b	#120,(v_lani2_time).w ; time between smoke puffs (2 seconds)
000203B8 609A                       		bra.s	@clearsky
000203BA                            ; ===========================================================================
000203BA                            
000203BA                            @end:
000203BA 4E75                       		rts	
000203BC                            ; ===========================================================================
000203BC                            ; ---------------------------------------------------------------------------
000203BC                            ; Animated pattern routine - ending sequence
000203BC                            ; ---------------------------------------------------------------------------
000203BC                            
000203BC                            AniArt_Ending:
000203BC                            
000203BC                            AniArt_Ending_BigFlower:
000203BC                            
000203BC =00000010                  @size:		equ 16	; number of tiles per frame
000203BC                            
000203BC 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
000203C0 6A00                       		bpl.s	AniArt_Ending_SmallFlower ; branch if not 0
000203C2                            		
000203C2 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w
000203C8 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
000203CE 45F8 9400                  		lea	($FFFF9400).w,a2 ; load 2nd big flower from RAM
000203D2 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
000203D6 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
000203DA 0240 0001                  		andi.w	#1,d0		; only 2 frames
000203DE 6700                       		beq.s	@isframe0	; branch if frame 0
000203E0 43E9 0200                  		lea	@size*$20(a1),a1
000203E4 45EA 0200                  		lea	@size*$20(a2),a2
000203E8                            
000203E8                            	@isframe0:
000203F2 323C 000F                  		move.w	#@size-1,d1
000203F6 6100 0000                  		bsr.w	LoadTiles
000203FA 224A                       		movea.l	a2,a1
00020406 323C 000F                  		move.w	#@size-1,d1
0002040A 6000 0000                  		bra.w	LoadTiles
0002040E                            ; ===========================================================================
0002040E                            
0002040E                            AniArt_Ending_SmallFlower:
0002040E                            
0002040E =0000000C                  @size:		equ 12	; number of tiles per frame
0002040E                            
0002040E 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
00020412 6A00                       		bpl.s	AniArt_Ending_Flower3 ; branch if not 0
00020414                            		
00020414 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0002041A 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0002041E 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
00020422 0240 0007                  		andi.w	#7,d0		; max 8 frames
00020426 103B 0000                  		move.b	@sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0002042A EF48                       		lsl.w	#7,d0		; multiply by $80
0002042C 3200                       		move.w	d0,d1
0002042E D040                       		add.w	d0,d0
00020430 D041                       		add.w	d1,d0		; multiply by 3
0002043C 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
00020442 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
00020446 323C 000B                  		move.w	#@size-1,d1
0002044A 6000 0000                  		bra.w	LoadTiles
0002044E                            ; ===========================================================================
0002044E 0000 0001 0202 0201        @sequence:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
00020456                            ; ===========================================================================
00020456                            
00020456                            AniArt_Ending_Flower3:
00020456                            
00020456 =00000010                  @size:		equ 16	; number of tiles per frame
00020456                            
00020456 5338 F7B9                  		subq.b	#1,(v_lani4_time).w ; decrement timer
0002045A 6A00                       		bpl.s	AniArt_Ending_Flower4 ; branch if not 0
0002045C                            		
0002045C 11FC 000E F7B9             		move.b	#$E,(v_lani4_time).w
00020462 1038 F7B8                  		move.b	(v_lani4_frame).w,d0
00020466 5238 F7B8                  		addq.b	#1,(v_lani4_frame).w ; increment frame counter
0002046A 0240 0003                  		andi.w	#3,d0		; max 4 frames
0002046E 103B 0000                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
00020472 E148                       		lsl.w	#8,d0		; multiply by $100
00020474 D040                       		add.w	d0,d0		; multiply by 2
00020480 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
00020484 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
00020488 323C 000F                  		move.w	#@size-1,d1
0002048C 6000 0000                  		bra.w	LoadTiles
00020490                            ; ===========================================================================
00020490 0001 0201                  AniArt_Ending_Flower3_sequence:	dc.b 0,	1, 2, 1
00020494                            ; ===========================================================================
00020494                            
00020494                            AniArt_Ending_Flower4:
00020494                            
00020494 =00000010                  @size:		equ 16	; number of tiles per frame
00020494                            
00020494 5338 F7BB                  		subq.b	#1,(v_lani5_time).w ; decrement timer
00020498 6A00                       		bpl.s	@end		; branch if not 0
0002049A                            		
0002049A 11FC 000B F7BB             		move.b	#$B,(v_lani5_time).w
000204A0 1038 F7BA                  		move.b	(v_lani5_frame).w,d0
000204A4 5238 F7BA                  		addq.b	#1,(v_lani5_frame).w ; increment frame counter
000204A8 0240 0003                  		andi.w	#3,d0
000204AC 103B 00E2                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
000204B0 E148                       		lsl.w	#8,d0		; multiply by $100
000204B2 D040                       		add.w	d0,d0		; multiply by 2
000204BE 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
000204C2 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
000204C6 323C 000F                  		move.w	#@size-1,d1
000204CA 6000 0000                  		bra.w	LoadTiles
000204CE                            ; ===========================================================================
000204CE                            
000204CE                            @end:
000204CE 4E75                       		rts	
000204D0                            ; ===========================================================================
000204D0                            
000204D0                            AniArt_none:
000204D0 4E75                       		rts	
000204D2                            
000204D2                            ; ---------------------------------------------------------------------------
000204D2                            ; Subroutine to	transfer graphics to VRAM
000204D2                            
000204D2                            ; input:
000204D2                            ;	a1 = source address
000204D2                            ;	a6 = vdp_data_port ($C00000)
000204D2                            ;	d1 = number of tiles to load (minus one)
000204D2                            ; ---------------------------------------------------------------------------
000204D2                            
000204D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000204D2                            
000204D2                            
000204D2                            LoadTiles:
000204D2 2C99                       		move.l	(a1)+,(a6)
000204D4 2C99                       		move.l	(a1)+,(a6)
000204D6 2C99                       		move.l	(a1)+,(a6)
000204D8 2C99                       		move.l	(a1)+,(a6)
000204DA 2C99                       		move.l	(a1)+,(a6)
000204DC 2C99                       		move.l	(a1)+,(a6)
000204DE 2C99                       		move.l	(a1)+,(a6)
000204E0 2C99                       		move.l	(a1)+,(a6)
000204E2 51C9 FFEE                  		dbf	d1,LoadTiles
000204E6 4E75                       		rts	
000204E8                            ; End of function LoadTiles
000204E8                            
000204E8                            ; ===========================================================================
000204E8                            ; ---------------------------------------------------------------------------
000204E8                            ; Animated pattern routine - more Marble Zone
000204E8                            ; ---------------------------------------------------------------------------
000204E8 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
000204EC 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
000204F0 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
000204F4 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
000204F8 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
000204FC 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
00020500 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
00020504 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
00020508                            ; ===========================================================================
00020508                            
00020508                            loc_1C3EE:
00020508 2C91                       		move.l	(a1),(a6)
0002050A 43E9 0010                  		lea	$10(a1),a1
0002050E 51C9 FFF8                  		dbf	d1,loc_1C3EE
00020512 4E75                       		rts	
00020514                            ; ===========================================================================
00020514                            
00020514                            loc_1C3FA:
00020514 2029 0002                  		move.l	2(a1),d0
00020518 1029 0001                  		move.b	1(a1),d0
0002051C E098                       		ror.l	#8,d0
0002051E 2C80                       		move.l	d0,(a6)
00020520 43E9 0010                  		lea	$10(a1),a1
00020524 51C9 FFEE                  		dbf	d1,loc_1C3FA
00020528 4E75                       		rts	
0002052A                            ; ===========================================================================
0002052A                            
0002052A                            loc_1C410:
0002052A 2CA9 0002                  		move.l	2(a1),(a6)
0002052E 43E9 0010                  		lea	$10(a1),a1
00020532 51C9 FFF6                  		dbf	d1,loc_1C410
00020536 4E75                       		rts	
00020538                            ; ===========================================================================
00020538                            
00020538                            loc_1C41E:
00020538 2029 0004                  		move.l	4(a1),d0
0002053C 1029 0003                  		move.b	3(a1),d0
00020540 E098                       		ror.l	#8,d0
00020542 2C80                       		move.l	d0,(a6)
00020544 43E9 0010                  		lea	$10(a1),a1
00020548 51C9 FFEE                  		dbf	d1,loc_1C41E
0002054C 4E75                       		rts	
0002054E                            ; ===========================================================================
0002054E                            
0002054E                            loc_1C434:
0002054E 2CA9 0004                  		move.l	4(a1),(a6)
00020552 43E9 0010                  		lea	$10(a1),a1
00020556 51C9 FFF6                  		dbf	d1,loc_1C434
0002055A 4E75                       		rts	
0002055C                            ; ===========================================================================
0002055C                            
0002055C                            loc_1C442:
0002055C 2029 0006                  		move.l	6(a1),d0
00020560 1029 0005                  		move.b	5(a1),d0
00020564 E098                       		ror.l	#8,d0
00020566 2C80                       		move.l	d0,(a6)
00020568 43E9 0010                  		lea	$10(a1),a1
0002056C 51C9 FFEE                  		dbf	d1,loc_1C442
00020570 4E75                       		rts	
00020572                            ; ===========================================================================
00020572                            
00020572                            loc_1C458:
00020572 2CA9 0006                  		move.l	6(a1),(a6)
00020576 43E9 0010                  		lea	$10(a1),a1
0002057A 51C9 FFF6                  		dbf	d1,loc_1C458
0002057E 4E75                       		rts	
00020580                            ; ===========================================================================
00020580                            
00020580                            loc_1C466:
00020580 2029 0008                  		move.l	8(a1),d0
00020584 1029 0007                  		move.b	7(a1),d0
00020588 E098                       		ror.l	#8,d0
0002058A 2C80                       		move.l	d0,(a6)
0002058C 43E9 0010                  		lea	$10(a1),a1
00020590 51C9 FFEE                  		dbf	d1,loc_1C466
00020594 4E75                       		rts	
00020596                            ; ===========================================================================
00020596                            
00020596                            loc_1C47C:
00020596 2CA9 0008                  		move.l	8(a1),(a6)
0002059A 43E9 0010                  		lea	$10(a1),a1
0002059E 51C9 FFF6                  		dbf	d1,loc_1C47C
000205A2 4E75                       		rts	
000205A4                            ; ===========================================================================
000205A4                            
000205A4                            loc_1C48A:
000205A4 2029 000A                  		move.l	$A(a1),d0
000205A8 1029 0009                  		move.b	9(a1),d0
000205AC E098                       		ror.l	#8,d0
000205AE 2C80                       		move.l	d0,(a6)
000205B0 43E9 0010                  		lea	$10(a1),a1
000205B4 51C9 FFEE                  		dbf	d1,loc_1C48A
000205B8 4E75                       		rts	
000205BA                            ; ===========================================================================
000205BA                            
000205BA                            loc_1C4A0:
000205BA 2CA9 000A                  		move.l	$A(a1),(a6)
000205BE 43E9 0010                  		lea	$10(a1),a1
000205C2 51C9 FFF6                  		dbf	d1,loc_1C4A0
000205C6 4E75                       		rts	
000205C8                            ; ===========================================================================
000205C8                            
000205C8                            loc_1C4AE:
000205C8 2029 000C                  		move.l	$C(a1),d0
000205CC 1029 000B                  		move.b	$B(a1),d0
000205D0 E098                       		ror.l	#8,d0
000205D2 2C80                       		move.l	d0,(a6)
000205D4 43E9 0010                  		lea	$10(a1),a1
000205D8 51C9 FFEE                  		dbf	d1,loc_1C4AE
000205DC 4E75                       		rts	
000205DE                            ; ===========================================================================
000205DE                            
000205DE                            loc_1C4C4:
000205DE 2CA9 000C                  		move.l	$C(a1),(a6)
000205E2 43E9 0010                  		lea	$10(a1),a1
000205E6 51C9 FFF6                  		dbf	d1,loc_1C4C4
000205EA 4E75                       		rts	
000205EC                            ; ===========================================================================
000205EC                            
000205EC                            loc_1C4D2:
000205EC 2029 000C                  		move.l	$C(a1),d0
000205F0 E198                       		rol.l	#8,d0
000205F2 1011                       		move.b	0(a1),d0
000205F4 2C80                       		move.l	d0,(a6)
000205F6 43E9 0010                  		lea	$10(a1),a1
000205FA 51C9 FFF0                  		dbf	d1,loc_1C4D2
000205FE 4E75                       		rts	
00020600                            ; ===========================================================================
00020600                            
00020600                            loc_1C4E8:
00020600 3CA9 000E                  		move.w	$E(a1),(a6)
00020604 3C91                       		move.w	0(a1),(a6)
00020606 43E9 0010                  		lea	$10(a1),a1
0002060A 51C9 FFF4                  		dbf	d1,loc_1C4E8
0002060E 4E75                       		rts	
00020610                            ; ===========================================================================
00020610                            
00020610                            loc_1C4FA:
00020610 2011                       		move.l	0(a1),d0
00020612 1029 000F                  		move.b	$F(a1),d0
00020616 E098                       		ror.l	#8,d0
00020618 2C80                       		move.l	d0,(a6)
0002061A 43E9 0010                  		lea	$10(a1),a1
0002061E 51C9 FFF0                  		dbf	d1,loc_1C4FA
00020622 4E75                       		rts	
00020624                            
00020624                            ; ---------------------------------------------------------------------------
00020624                            ; Animated pattern routine - giant ring
00020624                            ; ---------------------------------------------------------------------------
00020624                            
00020624                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020624                            
00020624                            
00020624                            AniArt_GiantRing:
00020624                            
00020624 =0000000E                  @size:		equ 14
00020624                            
00020624 4A78 F7BE                  		tst.w	(v_gfxbigring).w	; Is there any of the art left to load?
00020628 6600                       		bne.s	@loadTiles		; If so, get to work
0002062A 4E75                       		rts	
0002062C                            ; ===========================================================================
0002062C                            ; loc_1C518:
0002062C                            @loadTiles:
0002062C 0478 01C0 F7BE             		subi.w	#@size*$20,(v_gfxbigring).w	; Count-down the 14 tiles we're going to load now
00020632 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
00020638 7000                       		moveq	#0,d0
0002063A 3038 F7BE                  		move.w	(v_gfxbigring).w,d0
0002063E 43F1 0000                  		lea	(a1,d0.w),a1
00020642                            		; Turn VRAM address into VDP command
00020642 0640 8000                  		addi.w	#$8000,d0
00020646 E588                       		lsl.l	#2,d0
00020648 E448                       		lsr.w	#2,d0
0002064A 0040 4000                  		ori.w	#$4000,d0
0002064E 4840                       		swap	d0
00020650                            		; Send VDP command (write to VRAM at address contained in v_gfxbigring)
00020650 2D40 0004                  		move.l	d0,4(a6)
00020654                            
00020654 323C 000D                  		move.w	#@size-1,d1
00020658 6000 FE78                  		bra.w	LoadTiles
0002065C                            
0002065C                            ; End of function AniArt_GiantRing
0002065C                            ; End of function AniArt_GiantRing
0002065C                            
0002065C                            		include	"_incObj\21 HUD.asm"
0002065C                            ; ---------------------------------------------------------------------------
0002065C                            ; Object 21 - SCORE, TIME, RINGS
0002065C                            ; ---------------------------------------------------------------------------
0002065C                            
0002065C                            HUD:
0002065C 7000                       		moveq	#0,d0
0002065E 1028 0024                  		move.b	obRoutine(a0),d0
00020662 323B 0000                  		move.w	HUD_Index(pc,d0.w),d1
00020666 4EFB 1000                  		jmp	HUD_Index(pc,d1.w)
0002066A                            ; ===========================================================================
0002066A 0000                       HUD_Index:	dc.w HUD_Main-HUD_Index
0002066C 0000                       		dc.w HUD_Flash-HUD_Index
0002066E                            ; ===========================================================================
0002066E                            
0002066E                            HUD_Main:	; Routine 0
0002066E 5428 0024                  		addq.b	#2,obRoutine(a0)
00020672 317C 0090 0008             		move.w	#$90,obX(a0)
00020678 317C 0108 000A             		move.w	#$108,obScreenY(a0)
0002067E 217C 0000 0000 0004        		move.l	#Map_HUD,obMap(a0)
00020686 317C 06CA 0002             		move.w	#$6CA,obGfx(a0)
0002068C 117C 0000 0001             		move.b	#0,obRender(a0)
00020692 317C 0000 0018             		move.w	#0,obPriority(a0)
00020698                            
00020698                            HUD_Flash:	; Routine 2
00020698 7000                       		moveq	#0,d0
0002069A 0838 0003 FE05             		btst	#3,(v_framebyte).w
000206A0 6600                       		bne.s	@display
000206A2 4A78 FE20                  		tst.w	(v_rings).w	; do you have any rings?
000206A6 6600                       		bne.s	@norings	; if so, branch
000206A8 5240                       		addq.w	#1,d0		; make ring counter flash red
000206AA                            ; ===========================================================================
000206AA                            
000206AA                            @norings:
000206AA 0C38 0009 FE23             		cmpi.b	#9,(v_timemin).w ; have	9 minutes elapsed?
000206B0 6600                       		bne.s	@display	; if not, branch
000206B2 5440                       		addq.w	#2,d0		; make time counter flash red
000206B4                            
000206B4                            	@display:
000206B4 1140 001A                  		move.b	d0,obFrame(a0)
000206B8 4EF9 0000 F82E             		jmp	DisplaySprite
000206B8 4EF9 0000 F82E             		jmp	DisplaySprite
000206BE                            Map_HUD:	include	"_maps\HUD.asm"
000206BE                            ; ---------------------------------------------------------------------------
000206BE                            ; Sprite mappings - SCORE, TIME, RINGS
000206BE                            ; ---------------------------------------------------------------------------
000206BE                            Map_HUD_internal:
000206BE 0000                       		dc.w @allyellow-Map_HUD_internal
000206C0 0000                       		dc.w @ringred-Map_HUD_internal
000206C2 0000                       		dc.w @timered-Map_HUD_internal
000206C4 0000                       		dc.w @allred-Map_HUD_internal
000206C6 0A                         @allyellow:	dc.b $A
000206C7 800D 8000 00               		dc.b $80, $D, $80, 0, 0
000206CC 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
000206D1 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
000206D6 900D 8010 00               		dc.b $90, $D, $80, $10,	0
000206DB 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
000206E0 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
000206E5 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
000206EA A009 8030 30               		dc.b $A0, 9, $80, $30, $30
000206EF 4005 810A 00               		dc.b $40, 5, $81, $A, 0
000206F4 400D 810E 10               		dc.b $40, $D, $81, $E, $10
000206F9 00                         		dc.b 0
000206FA 0A                         @ringred:	dc.b $A
000206FB 800D 8000 00               		dc.b $80, $D, $80, 0, 0
00020700 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
00020705 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0002070A 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0002070F 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
00020714 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
00020719 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0002071E A009 8030 30               		dc.b $A0, 9, $80, $30, $30
00020723 4005 810A 00               		dc.b $40, 5, $81, $A, 0
00020728 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0002072D 00                         		dc.b 0
0002072E 0A                         @timered:	dc.b $A
0002072F 800D 8000 00               		dc.b $80, $D, $80, 0, 0
00020734 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
00020739 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0002073E 900D A010 00               		dc.b $90, $D, $A0, $10,	0
00020743 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
00020748 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0002074D A001 8000 20               		dc.b $A0, 1, $80, 0, $20
00020752 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
00020757 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0002075C 400D 810E 10               		dc.b $40, $D, $81, $E, $10
00020761 00                         		dc.b 0
00020762 0A                         @allred:	dc.b $A
00020763 800D 8000 00               		dc.b $80, $D, $80, 0, 0
00020768 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0002076D 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
00020772 900D A010 00               		dc.b $90, $D, $A0, $10,	0
00020777 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0002077C A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
00020781 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
00020786 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0002078B 4005 810A 00               		dc.b $40, 5, $81, $A, 0
00020790 400D 810E 10               		dc.b $40, $D, $81, $E, $10
00020796 00                         		even
00020796 00                         		even
00020796                            
00020796                            ; ---------------------------------------------------------------------------
00020796                            ; Add points subroutine
00020796                            ; ---------------------------------------------------------------------------
00020796                            
00020796                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020796                            
00020796                            
00020796                            AddPoints:
00020796 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; set score counter to update
0002079C                            
0002079C                            
0002079C 47F8 FE26                  			lea     (v_score).w,a3
000207A0 D193                       			add.l   d0,(a3)
000207A2 223C 000F 423F             			move.l  #999999,d1
000207A8 B293                       			cmp.l   (a3),d1 ; is score below 999999?
000207AA 6200                       			bhi.s   @belowmax ; if yes, branch
000207AC 2681                       			move.l  d1,(a3) ; reset score to 999999
000207AE                            		@belowmax:
000207AE 2013                       			move.l  (a3),d0
000207B0 B0B8 FFC0                  			cmp.l   (v_scorelife).w,d0 ; has Sonic got 50000+ points?
000207B4 6500                       			blo.s   @noextralife ; if not, branch
000207B6                            
000207B6 06B8 0000 1388 FFC0        			addi.l  #5000,(v_scorelife).w ; increase requirement by 50000
000207BE 4A38 FFF8                  			tst.b   (v_megadrive).w
000207C2 6B00                       			bmi.s   @noextralife ; branch if Mega Drive is Japanese
000207C4 5238 FE12                  			addq.b  #1,(v_lives).w ; give extra life
000207C8 5238 FE1C                  			addq.b  #1,(f_lifecount).w
000207D6                            
000207D6                            @locret_1C6B6:
000207D6                            @noextralife:
000207D6 4E75                       		rts	
000207D8                            ; End of function AddPoints
000207D8                            
000207D8                            		include	"_inc\HUD_Update.asm"
000207D8                            ; ---------------------------------------------------------------------------
000207D8                            ; Subroutine to	update the HUD
000207D8                            ; ---------------------------------------------------------------------------
000207D8                            
000207D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000207D8                            
000207D8                            hudVRAM:	macro loc
000207D8                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),d0
000207D8                            		endm
000207D8                            
000207D8                            
000207D8                            HUD_Update:
000207D8 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	on?
000207DC 6600 0000                  		bne.w	HudDebug	; if yes, branch
000207E0 4A38 FE1F                  		tst.b	(f_scorecount).w ; does the score need updating?
000207E4 6700                       		beq.s	@chkrings	; if not, branch
000207E6                            
000207E6 4238 FE1F                  		clr.b	(f_scorecount).w
000207EA 203C 5C80 0003             		hudVRAM	$DC80		; set VRAM address
000207F0 2238 FE26                  		move.l	(v_score).w,d1	; load score
000207F4 6100 0000                  		bsr.w	Hud_Score
000207F8                            
000207F8                            	@chkrings:
000207F8 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
000207FC 6700                       		beq.s	@chktime	; if not, branch
000207FE 6A00                       		bpl.s	@notzero
00020800 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
00020804                            
00020804                            	@notzero:
00020804 4238 FE1D                  		clr.b	(f_ringcount).w
00020808 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0002080E 7200                       		moveq	#0,d1
00020810 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
00020814 6100 0000                  		bsr.w	Hud_Rings
00020818                            
00020818                            	@chktime:
00020818 4A38 FE1E                  		tst.b	(f_timecount).w	; does the time	need updating?
0002081C 6700                       		beq.s	@chklives	; if not, branch
0002081E 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
00020822 6600                       		bne.s	@chklives	; if yes, branch
00020824 43F8 FE22                  		lea	(v_time).w,a1
00020828 0C99 0009 3B3B             		cmpi.l	#(9*$10000)+(59*$100)+59,(a1)+ ; is the time 9:59:59?
0002082E 6700                       		beq.s	TimeOver	; if yes, branch
00020830                            
00020830 5221                       		addq.b	#1,-(a1)	; increment 1/60s counter
00020832 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
00020836 6500                       		bcs.s	@chklives
00020838 12BC 0000                  		move.b	#0,(a1)
0002083C 5221                       		addq.b	#1,-(a1)	; increment second counter
0002083E 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
00020842 6500                       		bcs.s	@updatetime
00020844 12BC 0000                  		move.b	#0,(a1)
00020848 5221                       		addq.b	#1,-(a1)	; increment minute counter
0002084A 0C11 0009                  		cmpi.b	#9,(a1)		; check if passed 9
0002084E 6500                       		bcs.s	@updatetime
00020850 12BC 0009                  		move.b	#9,(a1)		; keep as 9
00020854                            
00020854                            	@updatetime:
00020854 203C 5E40 0003             		hudVRAM	$DE40
0002085A 7200                       		moveq	#0,d1
0002085C 1238 FE23                  		move.b	(v_timemin).w,d1 ; load	minutes
00020860 6100 0000                  		bsr.w	Hud_Mins
00020864 203C 5EC0 0003             		hudVRAM	$DEC0
0002086A 7200                       		moveq	#0,d1
0002086C 1238 FE24                  		move.b	(v_timesec).w,d1 ; load	seconds
00020870 6100 0000                  		bsr.w	Hud_Secs
00020874                            
00020874                            	@chklives:
00020874 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
00020878 6700                       		beq.s	@chkbonus	; if not, branch
0002087A 4238 FE1C                  		clr.b	(f_lifecount).w
0002087E 6100 0000                  		bsr.w	Hud_Lives
00020882                            
00020882                            	@chkbonus:
00020882 4A38 F7D6                  		tst.b	(f_endactbonus).w ; do time/ring bonus counters need updating?
00020886 6700                       		beq.s	@finish		; if not, branch
00020888 4238 F7D6                  		clr.b	(f_endactbonus).w
00020896 7200                       		moveq	#0,d1
00020898 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0002089C 6100 0000                  		bsr.w	Hud_TimeRingBonus
000208A0 7200                       		moveq	#0,d1
000208A2 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
000208A6 6100 0000                  		bsr.w	Hud_TimeRingBonus
000208AA                            
000208AA                            	@finish:
000208AA 4E75                       		rts	
000208AC                            ; ===========================================================================
000208AC                            
000208AC                            TimeOver:
000208AC 4238 FE1E                  		clr.b	(f_timecount).w
000208B0 41F8 D000                  		lea	(v_player).w,a0
000208B4 2448                       		movea.l	a0,a2
000208B6 6100 E824                  		bsr.w	KillSonic
000208BA 11FC 0001 FE1A             		move.b	#1,(f_timeover).w
000208C0 4E75                       		rts	
000208C2                            ; ===========================================================================
000208C2                            
000208C2                            HudDebug:
000208C2 6100 0000                  		bsr.w	HudDb_XY
000208C6 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
000208CA 6700                       		beq.s	@objcounter	; if not, branch
000208CC 6A00                       		bpl.s	@notzero
000208CE 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
000208D2                            
000208D2                            	@notzero:
000208D2 4238 FE1D                  		clr.b	(f_ringcount).w
000208D6 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
000208DC 7200                       		moveq	#0,d1
000208DE 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
000208E2 6100 0000                  		bsr.w	Hud_Rings
000208E6                            
000208E6                            	@objcounter:
000208E6 203C 5EC0 0003             		hudVRAM	$DEC0		; set VRAM address
000208EC 7200                       		moveq	#0,d1
000208EE 1238 F62C                  		move.b	(v_spritecount).w,d1 ; load "number of objects" counter
000208F2 6100 0000                  		bsr.w	Hud_Secs
000208F6 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
000208FA 6700                       		beq.s	@chkbonus	; if not, branch
000208FC 4238 FE1C                  		clr.b	(f_lifecount).w
00020900 6100 0000                  		bsr.w	Hud_Lives
00020904                            
00020904                            	@chkbonus:
00020904 4A38 F7D6                  		tst.b	(f_endactbonus).w ; does the ring/time bonus counter need updating?
00020908 6700                       		beq.s	@finish		; if not, branch
0002090A 4238 F7D6                  		clr.b	(f_endactbonus).w
00020918 7200                       		moveq	#0,d1
0002091A 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0002091E 6100 0000                  		bsr.w	Hud_TimeRingBonus
00020922 7200                       		moveq	#0,d1
00020924 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
00020928 6100 0000                  		bsr.w	Hud_TimeRingBonus
0002092C                            
0002092C                            	@finish:
0002092C 4E75                       		rts	
0002092E                            ; End of function HUD_Update
0002092E                            
0002092E                            ; ---------------------------------------------------------------------------
0002092E                            ; Subroutine to	load "0" on the	HUD
0002092E                            ; ---------------------------------------------------------------------------
0002092E                            
0002092E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002092E                            
0002092E                            
0002092E                            Hud_LoadZero:
00020938 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0002093C 343C 0002                  		move.w	#2,d2
00020940 6000                       		bra.s	loc_1C83E
00020942                            ; End of function Hud_LoadZero
00020942                            
00020942                            ; ---------------------------------------------------------------------------
00020942                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
00020942                            ; ---------------------------------------------------------------------------
00020942                            
00020942                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020942                            
00020942                            
00020942                            Hud_Base:
00020942 4DF9 00C0 0000             		lea	($C00000).l,a6
00020948 6100 0000                  		bsr.w	Hud_Lives
00020956 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0002095A 343C 000E                  		move.w	#$E,d2
0002095E                            
0002095E                            loc_1C83E:
0002095E 43FA 0000                  		lea	Art_Hud(pc),a1
00020962                            
00020962                            loc_1C842:
00020962 323C 000F                  		move.w	#$F,d1
00020966 101A                       		move.b	(a2)+,d0
00020968 6B00                       		bmi.s	loc_1C85E
0002096A 4880                       		ext.w	d0
0002096C EB48                       		lsl.w	#5,d0
0002096E 47F1 0000                  		lea	(a1,d0.w),a3
00020972                            
00020972                            loc_1C852:
00020972 2C9B                       		move.l	(a3)+,(a6)
00020974 51C9 FFFC                  		dbf	d1,loc_1C852
00020978                            
00020978                            loc_1C858:
00020978 51CA FFE8                  		dbf	d2,loc_1C842
0002097C                            
0002097C 4E75                       		rts	
0002097E                            ; ===========================================================================
0002097E                            
0002097E                            loc_1C85E:
0002097E 2CBC 0000 0000             		move.l	#0,(a6)
00020984 51C9 FFF8                  		dbf	d1,loc_1C85E
00020988                            
00020988 60EE                       		bra.s	loc_1C858
0002098A                            ; End of function Hud_Base
0002098A                            
0002098A                            ; ===========================================================================
0002098A 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
00020996 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0002099A                            ; ---------------------------------------------------------------------------
0002099A                            ; Subroutine to	load debug mode	numbers	patterns
0002099A                            ; ---------------------------------------------------------------------------
0002099A                            
0002099A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002099A                            
0002099A                            
0002099A                            HudDb_XY:
000209A4 3238 F700                  		move.w	(v_screenposx).w,d1 ; load camera x-position
000209A8 4841                       		swap	d1
000209AA 3238 D008                  		move.w	(v_player+obX).w,d1 ; load Sonic's x-position
000209AE 6100                       		bsr.s	HudDb_XY2
000209B0 3238 F704                  		move.w	(v_screenposy).w,d1 ; load camera y-position
000209B4 4841                       		swap	d1
000209B6 3238 D00C                  		move.w	(v_player+obY).w,d1 ; load Sonic's y-position
000209BA                            ; End of function HudDb_XY
000209BA                            
000209BA                            
000209BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000209BA                            
000209BA                            
000209BA                            HudDb_XY2:
000209BA 7C07                       		moveq	#7,d6
000209BC 43F9 0000 05FC             		lea	(Art_Text).l,a1
000209C2                            
000209C2                            HudDb_XYLoop:
000209C2 E959                       		rol.w	#4,d1
000209C4 3401                       		move.w	d1,d2
000209C6 0242 000F                  		andi.w	#$F,d2
000209CA 0C42 000A                  		cmpi.w	#$A,d2
000209CE 6500                       		bcs.s	loc_1C8B2
000209D0 5E42                       		addq.w	#7,d2
000209D2                            
000209D2                            loc_1C8B2:
000209D2 EB4A                       		lsl.w	#5,d2
000209D4 47F1 2000                  		lea	(a1,d2.w),a3
000209D8 2C9B                       		move.l	(a3)+,(a6)
000209DA 2C9B                       		move.l	(a3)+,(a6)
000209DC 2C9B                       		move.l	(a3)+,(a6)
000209DE 2C9B                       		move.l	(a3)+,(a6)
000209E0 2C9B                       		move.l	(a3)+,(a6)
000209E2 2C9B                       		move.l	(a3)+,(a6)
000209E4 2C9B                       		move.l	(a3)+,(a6)
000209E6 2C9B                       		move.l	(a3)+,(a6)
000209E8 4841                       		swap	d1
000209EA 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
000209EE                            
000209EE 4E75                       		rts	
000209F0                            ; End of function HudDb_XY2
000209F0                            
000209F0                            ; ---------------------------------------------------------------------------
000209F0                            ; Subroutine to	load rings numbers patterns
000209F0                            ; ---------------------------------------------------------------------------
000209F0                            
000209F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000209F0                            
000209F0                            
000209F0                            Hud_Rings:
000209F0 45F9 0000 0000             		lea	(Hud_100).l,a2
000209F6 7C02                       		moveq	#2,d6
000209F8 6000                       		bra.s	Hud_LoadArt
000209FA                            ; End of function Hud_Rings
000209FA                            
000209FA                            ; ---------------------------------------------------------------------------
000209FA                            ; Subroutine to	load score numbers patterns
000209FA                            ; ---------------------------------------------------------------------------
000209FA                            
000209FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000209FA                            
000209FA                            
000209FA                            Hud_Score:
000209FA 45F9 0000 0000             		lea	(Hud_100000).l,a2
00020A00 7C05                       		moveq	#5,d6
00020A02                            
00020A02                            Hud_LoadArt:
00020A02 7800                       		moveq	#0,d4
00020A04 43FA 0000                  		lea	Art_Hud(pc),a1
00020A08                            
00020A08                            Hud_ScoreLoop:
00020A08 7400                       		moveq	#0,d2
00020A0A 261A                       		move.l	(a2)+,d3
00020A0C                            
00020A0C                            loc_1C8EC:
00020A0C 9283                       		sub.l	d3,d1
00020A0E 6500                       		bcs.s	loc_1C8F4
00020A10 5242                       		addq.w	#1,d2
00020A12 60F8                       		bra.s	loc_1C8EC
00020A14                            ; ===========================================================================
00020A14                            
00020A14                            loc_1C8F4:
00020A14 D283                       		add.l	d3,d1
00020A16 4A42                       		tst.w	d2
00020A18 6700                       		beq.s	loc_1C8FE
00020A1A 383C 0001                  		move.w	#1,d4
00020A1E                            
00020A1E                            loc_1C8FE:
00020A1E 4A44                       		tst.w	d4
00020A20 6700                       		beq.s	loc_1C92C
00020A22 ED4A                       		lsl.w	#6,d2
00020A24 2D40 0004                  		move.l	d0,4(a6)
00020A28 47F1 2000                  		lea	(a1,d2.w),a3
00020A2C 2C9B                       		move.l	(a3)+,(a6)
00020A2E 2C9B                       		move.l	(a3)+,(a6)
00020A30 2C9B                       		move.l	(a3)+,(a6)
00020A32 2C9B                       		move.l	(a3)+,(a6)
00020A34 2C9B                       		move.l	(a3)+,(a6)
00020A36 2C9B                       		move.l	(a3)+,(a6)
00020A38 2C9B                       		move.l	(a3)+,(a6)
00020A3A 2C9B                       		move.l	(a3)+,(a6)
00020A3C 2C9B                       		move.l	(a3)+,(a6)
00020A3E 2C9B                       		move.l	(a3)+,(a6)
00020A40 2C9B                       		move.l	(a3)+,(a6)
00020A42 2C9B                       		move.l	(a3)+,(a6)
00020A44 2C9B                       		move.l	(a3)+,(a6)
00020A46 2C9B                       		move.l	(a3)+,(a6)
00020A48 2C9B                       		move.l	(a3)+,(a6)
00020A4A 2C9B                       		move.l	(a3)+,(a6)
00020A4C                            
00020A4C                            loc_1C92C:
00020A4C 0680 0040 0000             		addi.l	#$400000,d0
00020A52 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
00020A56                            
00020A56 4E75                       		rts	
00020A58                            
00020A58                            ; End of function Hud_Score
00020A58                            ; End of function Hud_Score
00020A58                            
00020A58                            ; ---------------------------------------------------------------------------
00020A58                            ; Subroutine to	load countdown numbers on the continue screen
00020A58                            ; ---------------------------------------------------------------------------
00020A58                            
00020A58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020A58                            
00020A58                            
00020A58                            ContScrCounter:
00020A62 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00020A68 45F9 0000 0000             		lea	(Hud_10).l,a2
00020A6E 7C01                       		moveq	#1,d6
00020A70 7800                       		moveq	#0,d4
00020A72 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
00020A76                            
00020A76                            ContScr_Loop:
00020A76 7400                       		moveq	#0,d2
00020A78 261A                       		move.l	(a2)+,d3
00020A7A                            
00020A7A                            loc_1C95A:
00020A7A 9283                       		sub.l	d3,d1
00020A7C 6500                       		blo.s	loc_1C962
00020A7E 5242                       		addq.w	#1,d2
00020A80 60F8                       		bra.s	loc_1C95A
00020A82                            ; ===========================================================================
00020A82                            
00020A82                            loc_1C962:
00020A82 D283                       		add.l	d3,d1
00020A84 ED4A                       		lsl.w	#6,d2
00020A86 47F1 2000                  		lea	(a1,d2.w),a3
00020A8A 2C9B                       		move.l	(a3)+,(a6)
00020A8C 2C9B                       		move.l	(a3)+,(a6)
00020A8E 2C9B                       		move.l	(a3)+,(a6)
00020A90 2C9B                       		move.l	(a3)+,(a6)
00020A92 2C9B                       		move.l	(a3)+,(a6)
00020A94 2C9B                       		move.l	(a3)+,(a6)
00020A96 2C9B                       		move.l	(a3)+,(a6)
00020A98 2C9B                       		move.l	(a3)+,(a6)
00020A9A 2C9B                       		move.l	(a3)+,(a6)
00020A9C 2C9B                       		move.l	(a3)+,(a6)
00020A9E 2C9B                       		move.l	(a3)+,(a6)
00020AA0 2C9B                       		move.l	(a3)+,(a6)
00020AA2 2C9B                       		move.l	(a3)+,(a6)
00020AA4 2C9B                       		move.l	(a3)+,(a6)
00020AA6 2C9B                       		move.l	(a3)+,(a6)
00020AA8 2C9B                       		move.l	(a3)+,(a6)
00020AAA 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
00020AAE                            
00020AAE 4E75                       		rts	
00020AB0                            ; End of function ContScrCounter
00020AB0                            
00020AB0                            ; ===========================================================================
00020AB0                            
00020AB0                            		include	"_inc\HUD (part 2).asm"
00020AB0                            ; ---------------------------------------------------------------------------
00020AB0                            ; HUD counter sizes
00020AB0                            ; ---------------------------------------------------------------------------
00020AB0 0001 86A0                  Hud_100000:	dc.l 100000
00020AB4 0000 2710                  Hud_10000:	dc.l 10000
00020AB8 0000 03E8                  Hud_1000:	dc.l 1000
00020ABC 0000 0064                  Hud_100:	dc.l 100
00020AC0 0000 000A                  Hud_10:		dc.l 10
00020AC4 0000 0001                  Hud_1:		dc.l 1
00020AC8                            
00020AC8                            ; ---------------------------------------------------------------------------
00020AC8                            ; Subroutine to	load time numbers patterns
00020AC8                            ; ---------------------------------------------------------------------------
00020AC8                            
00020AC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020AC8                            
00020AC8                            
00020AC8                            Hud_Mins:
00020AC8 45F9 0002 0AC4             		lea	(Hud_1).l,a2
00020ACE 7C00                       		moveq	#0,d6
00020AD0 6000                       		bra.s	loc_1C9BA
00020AD2                            ; End of function Hud_Mins
00020AD2                            
00020AD2                            
00020AD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020AD2                            
00020AD2                            
00020AD2                            Hud_Secs:
00020AD2 45F9 0002 0AC0             		lea	(Hud_10).l,a2
00020AD8 7C01                       		moveq	#1,d6
00020ADA                            
00020ADA                            loc_1C9BA:
00020ADA 7800                       		moveq	#0,d4
00020ADC 43FA 0000                  		lea	Art_Hud(pc),a1
00020AE0                            
00020AE0                            Hud_TimeLoop:
00020AE0 7400                       		moveq	#0,d2
00020AE2 261A                       		move.l	(a2)+,d3
00020AE4                            
00020AE4                            loc_1C9C4:
00020AE4 9283                       		sub.l	d3,d1
00020AE6 6500                       		bcs.s	loc_1C9CC
00020AE8 5242                       		addq.w	#1,d2
00020AEA 60F8                       		bra.s	loc_1C9C4
00020AEC                            ; ===========================================================================
00020AEC                            
00020AEC                            loc_1C9CC:
00020AEC D283                       		add.l	d3,d1
00020AEE 4A42                       		tst.w	d2
00020AF0 6700                       		beq.s	loc_1C9D6
00020AF2 383C 0001                  		move.w	#1,d4
00020AF6                            
00020AF6                            loc_1C9D6:
00020AF6 ED4A                       		lsl.w	#6,d2
00020AF8 2D40 0004                  		move.l	d0,4(a6)
00020AFC 47F1 2000                  		lea	(a1,d2.w),a3
00020B00 2C9B                       		move.l	(a3)+,(a6)
00020B02 2C9B                       		move.l	(a3)+,(a6)
00020B04 2C9B                       		move.l	(a3)+,(a6)
00020B06 2C9B                       		move.l	(a3)+,(a6)
00020B08 2C9B                       		move.l	(a3)+,(a6)
00020B0A 2C9B                       		move.l	(a3)+,(a6)
00020B0C 2C9B                       		move.l	(a3)+,(a6)
00020B0E 2C9B                       		move.l	(a3)+,(a6)
00020B10 2C9B                       		move.l	(a3)+,(a6)
00020B12 2C9B                       		move.l	(a3)+,(a6)
00020B14 2C9B                       		move.l	(a3)+,(a6)
00020B16 2C9B                       		move.l	(a3)+,(a6)
00020B18 2C9B                       		move.l	(a3)+,(a6)
00020B1A 2C9B                       		move.l	(a3)+,(a6)
00020B1C 2C9B                       		move.l	(a3)+,(a6)
00020B1E 2C9B                       		move.l	(a3)+,(a6)
00020B20 0680 0040 0000             		addi.l	#$400000,d0
00020B26 51CE FFB8                  		dbf	d6,Hud_TimeLoop
00020B2A                            
00020B2A 4E75                       		rts	
00020B2C                            ; End of function Hud_Secs
00020B2C                            
00020B2C                            ; ---------------------------------------------------------------------------
00020B2C                            ; Subroutine to	load time/ring bonus numbers patterns
00020B2C                            ; ---------------------------------------------------------------------------
00020B2C                            
00020B2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020B2C                            
00020B2C                            
00020B2C                            Hud_TimeRingBonus:
00020B2C 45F9 0002 0AB8             		lea	(Hud_1000).l,a2
00020B32 7C03                       		moveq	#3,d6
00020B34 7800                       		moveq	#0,d4
00020B36 43FA 0000                  		lea	Art_Hud(pc),a1
00020B3A                            
00020B3A                            Hud_BonusLoop:
00020B3A 7400                       		moveq	#0,d2
00020B3C 261A                       		move.l	(a2)+,d3
00020B3E                            
00020B3E                            loc_1CA1E:
00020B3E 9283                       		sub.l	d3,d1
00020B40 6500                       		bcs.s	loc_1CA26
00020B42 5242                       		addq.w	#1,d2
00020B44 60F8                       		bra.s	loc_1CA1E
00020B46                            ; ===========================================================================
00020B46                            
00020B46                            loc_1CA26:
00020B46 D283                       		add.l	d3,d1
00020B48 4A42                       		tst.w	d2
00020B4A 6700                       		beq.s	loc_1CA30
00020B4C 383C 0001                  		move.w	#1,d4
00020B50                            
00020B50                            loc_1CA30:
00020B50 4A44                       		tst.w	d4
00020B52 6700                       		beq.s	Hud_ClrBonus
00020B54 ED4A                       		lsl.w	#6,d2
00020B56 47F1 2000                  		lea	(a1,d2.w),a3
00020B5A 2C9B                       		move.l	(a3)+,(a6)
00020B5C 2C9B                       		move.l	(a3)+,(a6)
00020B5E 2C9B                       		move.l	(a3)+,(a6)
00020B60 2C9B                       		move.l	(a3)+,(a6)
00020B62 2C9B                       		move.l	(a3)+,(a6)
00020B64 2C9B                       		move.l	(a3)+,(a6)
00020B66 2C9B                       		move.l	(a3)+,(a6)
00020B68 2C9B                       		move.l	(a3)+,(a6)
00020B6A 2C9B                       		move.l	(a3)+,(a6)
00020B6C 2C9B                       		move.l	(a3)+,(a6)
00020B6E 2C9B                       		move.l	(a3)+,(a6)
00020B70 2C9B                       		move.l	(a3)+,(a6)
00020B72 2C9B                       		move.l	(a3)+,(a6)
00020B74 2C9B                       		move.l	(a3)+,(a6)
00020B76 2C9B                       		move.l	(a3)+,(a6)
00020B78 2C9B                       		move.l	(a3)+,(a6)
00020B7A                            
00020B7A                            loc_1CA5A:
00020B7A 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
00020B7E                            
00020B7E 4E75                       		rts	
00020B80                            ; ===========================================================================
00020B80                            
00020B80                            Hud_ClrBonus:
00020B80 7A0F                       		moveq	#$F,d5
00020B82                            
00020B82                            Hud_ClrBonusLoop:
00020B82 2CBC 0000 0000             		move.l	#0,(a6)
00020B88 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
00020B8C                            
00020B8C 60EC                       		bra.s	loc_1CA5A
00020B8E                            ; End of function Hud_TimeRingBonus
00020B8E                            
00020B8E                            ; ---------------------------------------------------------------------------
00020B8E                            ; Subroutine to	load uncompressed lives	counter	patterns
00020B8E                            ; ---------------------------------------------------------------------------
00020B8E                            
00020B8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020B8E                            
00020B8E                            
00020B8E                            Hud_Lives:
00020B8E 203C 7BA0 0003             		hudVRAM	$FBA0		; set VRAM address
00020B94 7200                       		moveq	#0,d1
00020B96 1238 FE12                  		move.b	(v_lives).w,d1	; load number of lives
00020B9A 45F9 0002 0AC0             		lea	(Hud_10).l,a2
00020BA0 7C01                       		moveq	#1,d6
00020BA2 7800                       		moveq	#0,d4
00020BA4 43FA 0000                  		lea	Art_LivesNums(pc),a1
00020BA8                            		
00020BA8                            
00020BA8                            Hud_LivesLoop:
00020BA8 2D40 0004                  		move.l	d0,4(a6)
00020BAC 7400                       		moveq	#0,d2
00020BAE 261A                       		move.l	(a2)+,d3
00020BB0                            
00020BB0                            loc_1CA90:
00020BB0 9283                       		sub.l	d3,d1
00020BB2 6500                       		bcs.s	loc_1CA98
00020BB4 5242                       		addq.w	#1,d2
00020BB6 60F8                       		bra.s	loc_1CA90
00020BB8                            ; ===========================================================================
00020BB8                            
00020BB8                            loc_1CA98:
00020BB8 D283                       		add.l	d3,d1
00020BBA 4A42                       		tst.w	d2
00020BBC 6700                       		beq.s	loc_1CAA2
00020BBE 383C 0001                  		move.w	#1,d4
00020BC2                            
00020BC2                            loc_1CAA2:
00020BC2 4A44                       		tst.w	d4
00020BC4 6700                       		beq.s	Hud_ClrLives
00020BC6                            
00020BC6                            loc_1CAA6:
00020BC6 EB4A                       		lsl.w	#5,d2
00020BC8 47F1 2000                  		lea	(a1,d2.w),a3
00020BCC 2C9B                       		move.l	(a3)+,(a6)
00020BCE 2C9B                       		move.l	(a3)+,(a6)
00020BD0 2C9B                       		move.l	(a3)+,(a6)
00020BD2 2C9B                       		move.l	(a3)+,(a6)
00020BD4 2C9B                       		move.l	(a3)+,(a6)
00020BD6 2C9B                       		move.l	(a3)+,(a6)
00020BD8 2C9B                       		move.l	(a3)+,(a6)
00020BDA 2C9B                       		move.l	(a3)+,(a6)
00020BDC                            
00020BDC                            loc_1CABC:
00020BDC 0680 0040 0000             		addi.l	#$400000,d0
00020BE2 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
00020BE6                            
00020BE6 4E75                       		rts	
00020BE8                            ; ===========================================================================
00020BE8                            
00020BE8                            Hud_ClrLives:
00020BE8 4A46                       		tst.w	d6
00020BEA 67DA                       		beq.s	loc_1CAA6
00020BEC 7A07                       		moveq	#7,d5
00020BEE                            
00020BEE                            Hud_ClrLivesLoop:
00020BEE 2CBC 0000 0000             		move.l	#0,(a6)
00020BF4 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
00020BF8 60E2                       		bra.s	loc_1CABC
00020BFA                            ; End of function Hud_Lives
00020BFA                            ; End of function Hud_Lives
00020BFA                            
00020BFA                            Art_Hud:	incbin	"artunc\HUD Numbers.bin" ; 8x16 pixel numbers on HUD
00020EFA                            		even
00020EFA                            Art_LivesNums:	incbin	"artunc\Lives Counter Numbers.bin" ; 8x8 pixel numbers on lives counter
0002103A                            		even
0002103A                            
0002103A                            		include	"_incObj\DebugMode.asm"
0002103A                            ; ---------------------------------------------------------------------------
0002103A                            ; When debug mode is currently in use
0002103A                            ; ---------------------------------------------------------------------------
0002103A                            
0002103A                            DebugMode:
0002103A 7000                       		moveq	#0,d0
0002103C 1038 FE08                  		move.b	(v_debuguse).w,d0
00021040 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
00021044 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
00021048                            ; ===========================================================================
00021048 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0002104A 0000                       		dc.w Debug_Action-Debug_Index
0002104C                            ; ===========================================================================
0002104C                            
0002104C                            Debug_Main:	; Routine 0
0002104C 5438 FE08                  		addq.b	#2,(v_debuguse).w
00021050 31F8 F72C FEF0             		move.w	(v_limittop2).w,(v_limittopdb).w ; buffer level x-boundary
00021056 31F8 F726 FEF2             		move.w	(v_limitbtm1).w,(v_limitbtmdb).w ; buffer level y-boundary
0002105C 31FC 0000 F72C             		move.w	#0,(v_limittop2).w
00021062 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
00021068 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
0002106E 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
00021074 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
0002107A 117C 0000 001A             		move.b	#0,obFrame(a0)
00021080 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00021086 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
0002108C 6600                       		bne.s	@islevel	; if not, branch
0002108E                            
0002108E 31FC 0000 F782             		move.w	#0,(v_ssrotate).w ; stop special stage rotating
00021094 31FC 0000 F780             		move.w	#0,(v_ssangle).w ; make	special	stage "upright"
0002109A 7006                       		moveq	#6,d0		; use 6th debug	item list
0002109C 6000                       		bra.s	@selectlist
0002109E                            ; ===========================================================================
0002109E                            
0002109E                            @islevel:
0002109E 7000                       		moveq	#0,d0
000210A0 1038 FE10                  		move.b	(v_zone).w,d0
000210A4                            
000210A4                            @selectlist:
000210A4 45F9 0000 0000             		lea	(DebugList).l,a2
000210AA D040                       		add.w	d0,d0
000210AC D4F2 0000                  		adda.w	(a2,d0.w),a2
000210B0 3C1A                       		move.w	(a2)+,d6
000210B2 BC38 FE06                  		cmp.b	(v_debugitem).w,d6 ; have you gone past the last item?
000210B6 6200                       		bhi.s	@noreset	; if not, branch
000210B8 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; back to start of list
000210BE                            
000210BE                            	@noreset:
000210BE 6100 0000                  		bsr.w	Debug_ShowItem
000210C2 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
000210C8 11FC 0001 FE0B             		move.b	#1,(v_debugyspeed).w
000210CE                            
000210CE                            Debug_Action:	; Routine 2
000210CE 7006                       		moveq	#6,d0
000210D0 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w
000210D6 6700                       		beq.s	@isntlevel
000210D8                            
000210D8 7000                       		moveq	#0,d0
000210DA 1038 FE10                  		move.b	(v_zone).w,d0
000210DE                            
000210DE                            	@isntlevel:
000210DE 45F9 0000 0000             		lea	(DebugList).l,a2
000210E4 D040                       		add.w	d0,d0
000210E6 D4F2 0000                  		adda.w	(a2,d0.w),a2
000210EA 3C1A                       		move.w	(a2)+,d6
000210EC 6100 0000                  		bsr.w	Debug_Control
000210F0 4EF9 0000 F82E             		jmp	(DisplaySprite).l
000210F6                            
000210F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000210F6                            
000210F6                            
000210F6                            Debug_Control:
000210F6 7800                       		moveq	#0,d4
000210F8 323C 0001                  		move.w	#1,d1
000210FC 1838 F605                  		move.b	(v_jpadpress1).w,d4
00021100 0244 000F                  		andi.w	#btnDir,d4	; is up/down/left/right	pressed?
00021104 6600                       		bne.s	@dirpressed	; if yes, branch
00021106                            
00021106 1038 F604                  		move.b	(v_jpadhold1).w,d0
0002110A 0240 000F                  		andi.w	#btnDir,d0	; is up/down/left/right	held?
0002110E 6600                       		bne.s	@dirheld	; if yes, branch
00021110                            
00021110 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
00021116 11FC 000F FE0B             		move.b	#15,(v_debugyspeed).w
0002111C 6000 0000                  		bra.w	Debug_ChgItem
00021120                            ; ===========================================================================
00021120                            
00021120                            @dirheld:
00021120 5338 FE0A                  		subq.b	#1,(v_debugxspeed).w
00021124 6600                       		bne.s	loc_1D01C
00021126 11FC 0001 FE0A             		move.b	#1,(v_debugxspeed).w
0002112C 5238 FE0B                  		addq.b	#1,(v_debugyspeed).w
00021130 6600                       		bne.s	@dirpressed
00021132 11FC 00FF FE0B             		move.b	#-1,(v_debugyspeed).w
00021138                            
00021138                            @dirpressed:
00021138 1838 F604                  		move.b	(v_jpadhold1).w,d4
0002113C                            
0002113C                            loc_1D01C:
0002113C 7200                       		moveq	#0,d1
0002113E 1238 FE0B                  		move.b	(v_debugyspeed).w,d1
00021142 5241                       		addq.w	#1,d1
00021144 4841                       		swap	d1
00021146 E881                       		asr.l	#4,d1
00021148 2428 000C                  		move.l	obY(a0),d2
0002114C 2628 0008                  		move.l	obX(a0),d3
00021150 0804 0000                  		btst	#bitUp,d4	; is up	being pressed?
00021154 6700                       		beq.s	loc_1D03C	; if not, branch
00021156 9481                       		sub.l	d1,d2
00021158 6400                       		bcc.s	loc_1D03C
0002115A 7400                       		moveq	#0,d2
0002115C                            
0002115C                            loc_1D03C:
0002115C 0804 0001                  		btst	#bitDn,d4	; is down being	pressed?
00021160 6700                       		beq.s	loc_1D052	; if not, branch
00021162 D481                       		add.l	d1,d2
00021164 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0002116A 6500                       		bcs.s	loc_1D052
0002116C 243C 07FF 0000             		move.l	#$7FF0000,d2
00021172                            
00021172                            loc_1D052:
00021172 0804 0002                  		btst	#bitL,d4
00021176 6700                       		beq.s	loc_1D05E
00021178 9681                       		sub.l	d1,d3
0002117A 6400                       		bcc.s	loc_1D05E
0002117C 7600                       		moveq	#0,d3
0002117E                            
0002117E                            loc_1D05E:
0002117E 0804 0003                  		btst	#bitR,d4
00021182 6700                       		beq.s	loc_1D066
00021184 D681                       		add.l	d1,d3
00021186                            
00021186                            loc_1D066:
00021186 2142 000C                  		move.l	d2,obY(a0)
0002118A 2143 0008                  		move.l	d3,obX(a0)
0002118E                            
0002118E                            Debug_ChgItem:
0002118E 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
00021194 6700                       		beq.s	@createitem	; if not, branch
00021196 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
0002119C 6700                       		beq.s	@nextitem	; if not, branch
0002119E 5338 FE06                  		subq.b	#1,(v_debugitem).w ; go back 1 item
000211A2 6400                       		bcc.s	@display
000211A4 DD38 FE06                  		add.b	d6,(v_debugitem).w
000211A8 6000                       		bra.s	@display
000211AA                            ; ===========================================================================
000211AA                            
000211AA                            @nextitem:
000211AA 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
000211B0 6700                       		beq.s	@createitem	; if not, branch
000211B2 5238 FE06                  		addq.b	#1,(v_debugitem).w ; go forwards 1 item
000211B6 BC38 FE06                  		cmp.b	(v_debugitem).w,d6
000211BA 6200                       		bhi.s	@display
000211BC 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; loop back to first item
000211C2                            
000211C2                            	@display:
000211C2 6000 0000                  		bra.w	Debug_ShowItem
000211C6                            ; ===========================================================================
000211C6                            
000211C6                            @createitem:
000211C6 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000211CC 6700                       		beq.s	@backtonormal	; if not, branch
000211CE 4EB9 0000 FDC8             		jsr	(FindFreeObj).l
000211D4 6600                       		bne.s	@backtonormal
000211D6 3368 0008 0008             		move.w	obX(a0),obX(a1)
000211DC 3368 000C 000C             		move.w	obY(a0),obY(a1)
000211E2 12A8 0004                  		move.b	4(a0),0(a1)	; create object
000211E6 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
000211EC 1368 0001 0022             		move.b	obRender(a0),obStatus(a1)
000211F2 0229 007F 0022             		andi.b	#$7F,obStatus(a1)
000211F8 7000                       		moveq	#0,d0
000211FA 1038 FE06                  		move.b	(v_debugitem).w,d0
000211FE E748                       		lsl.w	#3,d0
00021200 1372 0004 0028             		move.b	4(a2,d0.w),obSubtype(a1)
00021206 4E75                       		rts	
00021208                            ; ===========================================================================
00021208                            
00021208                            @backtonormal:
00021208 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
0002120E 6700                       		beq.s	@stayindebug	; if not, branch
00021210 7000                       		moveq	#0,d0
00021212 31C0 FE08                  		move.w	d0,(v_debuguse).w ; deactivate debug mode
00021216 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
0002121E 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
00021224 11C0 D01C                  		move.b	d0,(v_player+obAnim).w
00021228 3140 000A                  		move.w	d0,obX+2(a0)
0002122C 3140 000E                  		move.w	d0,obY+2(a0)
00021230 31F8 FEF0 F72C             		move.w	(v_limittopdb).w,(v_limittop2).w ; restore level boundaries
00021236 31F8 FEF2 F726             		move.w	(v_limitbtmdb).w,(v_limitbtm1).w
0002123C 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; are you in the special stage?
00021242 6600                       		bne.s	@stayindebug	; if not, branch
00021244                            
00021244 4278 F780                  		clr.w	(v_ssangle).w
00021248 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set new level rotation speed
0002124E 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
00021256 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
0002125C 11FC 0002 D01C             		move.b	#id_Roll,(v_player+obAnim).w
00021262 08F8 0002 D022             		bset	#2,(v_player+obStatus).w
00021268 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0002126E                            
0002126E                            	@stayindebug:
0002126E 4E75                       		rts	
00021270                            ; End of function Debug_Control
00021270                            
00021270                            
00021270                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00021270                            
00021270                            
00021270                            Debug_ShowItem:
00021270 7000                       		moveq	#0,d0
00021272 1038 FE06                  		move.b	(v_debugitem).w,d0
00021276 E748                       		lsl.w	#3,d0
00021278 2172 0000 0004             		move.l	(a2,d0.w),obMap(a0) ; load mappings for item
0002127E 3172 0006 0002             		move.w	6(a2,d0.w),obGfx(a0) ; load VRAM setting for item
00021284 1172 0005 001A             		move.b	5(a2,d0.w),obFrame(a0) ; load frame number for item
0002128A 4E75                       		rts	
0002128C                            ; End of function Debug_ShowItem
0002128C                            ; End of function Debug_ShowItem
0002128C                            		include	"_inc\DebugList.asm"
0002128C                            ; ---------------------------------------------------------------------------
0002128C                            ; Debug	mode item lists
0002128C                            ; ---------------------------------------------------------------------------
0002128C                            DebugList:
0002128C 0000                       	dc.w @GHZ-DebugList
0002128E 0000                       	dc.w @LZ-DebugList
00021290 0000                       	dc.w @MZ-DebugList
00021292 0000                       	dc.w @SLZ-DebugList
00021294 0000                       	dc.w @SYZ-DebugList
00021296 0000                       	dc.w @SBZ-DebugList
00021298 0000                       	dc.w @Ending-DebugList
0002129A                            
0002129A                            dbug:	macro map,object,subtype,frame,vram
0002129A                            	dc.l map+(object<<24)
0002129A                            	dc.b subtype,frame
0002129A                            	dc.w vram
0002129A                            	endm
0002129A                            
0002129A                            @GHZ:
0002129A 0000                       	dc.w (@GHZend-@GHZ-2)/8
0002129C                            
0002129C                            ;		mappings	object		subtype	frame	VRAM setting
0002129C 2500 BE36 0000 27B2        	dbug 	Map_Ring,	id_Rings,	0,	0,	$27B2
000212A4 2600 C5F4 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000212AC 1F00 B216 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
000212B4 2200 B6A0 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
000212BC 2B00 CD96 0000 047B        	dbug	Map_Chop,	id_Chopper,	0,	0,	$47B
000212C4 3600 F1D4 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
000212CC 1800 9970 0000 4000        	dbug	Map_Plat_GHZ,	id_BasicPlatform, 0,	0,	$4000
000212D4 3B00 F2FA 0000 63D0        	dbug	Map_PRock,	id_PurpleRock,	0,	0,	$63D0
000212DC 4001 19D4 0000 04F0        	dbug	Map_Moto,	id_MotoBug,	0,	0,	$4F0
000212E4 4101 005A 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
000212EC 4201 0284 0000 249B        	dbug	Map_Newt,	id_Newtron,	0,	0,	$249B
000212F4 4401 0598 0000 434C        	dbug	Map_Edge,	id_EdgeWalls,	0,	0,	$434C
000212FC 7901 ADA6 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00021304 4B00 BE86 0000 2400        	dbug	Map_GRing,	id_GiantRing,	0,	0,	$2400
0002130C 7D01 AF68 0101 84B6        	dbug	Map_Bonus,	id_HiddenBonus,	1,	1,	$84B6
00021314                            	@GHZend:
00021314                            
00021314                            @LZ:
00021314 0000                       	dc.w (@LZend-@LZ-2)/8
00021316                            
00021316                            ;		mappings	object		subtype	frame	VRAM setting
00021316 2500 BE36 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0002131E 2600 C5F4 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00021326 4101 005A 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
0002132E 2C00 CE3C 0800 2486        	dbug	Map_Jaws,	id_Jaws,	8,	0,	$2486
00021336 2D00 D028 0002 84A6        	dbug	Map_Burro,	id_Burrobot,	0,	2,	$84A6
0002133E 1601 4396 0000 03CC        	dbug	Map_Harp,	id_Harpoon,	0,	0,	$3CC
00021346 1601 4396 0203 03CC        	dbug	Map_Harp,	id_Harpoon,	2,	3,	$3CC
0002134E 3300 E4A6 0000 43DE        	dbug	Map_Push,	id_PushBlock,	0,	0,	$43DE
00021356 3200 E066 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
0002135E 3600 F1D4 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00021366 5201 246C 0400 43BC        	dbug	Map_MBlockLZ,	id_MovingBlock,	4,	0,	$43BC
0002136E 6101 45BE 0100 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 1,	0,	$43E6
00021376 6101 45BE 1301 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $13,	1,	$43E6
0002137E 6101 45BE 0500 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 5,	0,	$43E6
00021386 6201 4712 0000 443E        	dbug	Map_Gar,	id_Gargoyle,	0,	0,	$443E
0002138E 6101 45BE 2702 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $27,	2,	$43E6
00021396 6101 45BE 3003 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $30,	3,	$43E6
0002139E 6301 4A74 7F00 03F6        	dbug	Map_LConv,	id_LabyrinthConvey, $7F, 0,	$3F6
000213A6 6001 42E0 0000 0467        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$467
000213AE 6401 4DC2 8413 8348        	dbug	Map_Bub,	id_Bubble,	$84,	$13,	$8348
000213B6 6501 4F4A 0202 C259        	dbug	Map_WFall,	id_Waterfall,	2,	2,	$C259
000213BE 6501 4F4A 0909 C259        	dbug	Map_WFall,	id_Waterfall,	9,	9,	$C259
000213C6 0B01 372C 0000 43DE        	dbug	Map_Pole,	id_Pole,	0,	0,	$43DE
000213CE 0C01 37FC 0200 4328        	dbug	Map_Flap,	id_FlapDoor,	2,	0,	$4328
000213D6 7901 ADA6 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000213DE                            	@LZend:
000213DE                            
000213DE                            @MZ:
000213DE 0000                       	dc.w (@MZend-@MZ-2)/8
000213E0                            
000213E0                            ;		mappings	object		subtype	frame	VRAM setting
000213E0 2500 BE36 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000213E8 2600 C5F4 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000213F0 2200 B6A0 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
000213F8 3600 F1D4 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00021400 4101 005A 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00021408 1300 D536 0000 0345        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$345
00021410 4601 0C50 0000 4000        	dbug	Map_Brick,	id_MarbleBrick,	0,	0,	$4000
00021418 6E01 9E26 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
00021420 6A01 9796 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
00021428 3300 E4A6 0000 42B8        	dbug	Map_Push,	id_PushBlock,	0,	0,	$42B8
00021430 1E00 A910 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
00021438 5101 2192 0000 42B8        	dbug	Map_Smab,	id_SmashBlock,	0,	0,	$42B8
00021440 5201 2416 0000 02B8        	dbug	Map_MBlock,	id_MovingBlock,	0,	0,	$2B8
00021448 5300 9FB2 0000 62B8        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$62B8
00021450 5401 153A 0000 8680        	dbug	Map_LTag,	id_LavaTag,	0,	0,	$8680
00021458 5501 260A 0000 04B8        	dbug	Map_Bas,	id_Basaran,	0,	0,	$4B8
00021460 7801 A9FA 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
00021468 7901 ADA6 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00021470                            	@MZend:
00021470                            
00021470                            @SLZ:
00021470 0000                       	dc.w (@SLZend-@SLZ-2)/8
00021472                            
00021472                            ;		mappings	object		subtype	frame	VRAM setting
00021472 2500 BE36 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0002147A 2600 C5F4 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00021482 5901 3154 0000 4000        	dbug	Map_Elev,	id_Elevator,	0,	0,	$4000
0002148A 5300 9FB2 0002 44E0        	dbug	Map_CFlo,	id_CollapseFloor, 0,	2,	$44E0
00021492 1800 99CE 0000 4000        	dbug	Map_Plat_SLZ,	id_BasicPlatform, 0,	0,	$4000
0002149A 5A01 328E 0000 4000        	dbug	Map_Circ,	id_CirclingPlatform, 0,	0,	$4000
000214A2 5B01 3446 0000 4000        	dbug	Map_Stair,	id_Staircase,	0,	0,	$4000
000214AA 5D01 3A1A 0000 43A0        	dbug	Map_Fan,	id_Fan,		0,	0,	$43A0
000214B2 5E01 3DAC 0000 0374        	dbug	Map_Seesaw,	id_Seesaw,	0,	0,	$374
000214BA 4101 005A 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
000214C2 1300 D536 0000 0480        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$480
000214CA 1C00 A0E4 0000 44D8        	dbug	Map_Scen,	id_Scenery,	0,	0,	$44D8
000214D2 5F01 402A 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
000214DA 6001 42E0 0000 2429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$2429
000214E2 7901 ADA6 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000214EA                            	@SLZend:
000214EA                            
000214EA                            @SYZ:
000214EA 0000                       	dc.w (@SYZend-@SYZ-2)/8
000214EC                            
000214EC                            ;		mappings	object		subtype	frame	VRAM setting
000214EC 2500 BE36 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000214F4 2600 C5F4 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000214FC 3600 F1D4 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00021504 4101 005A 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
0002150C 4301 04EA 0000 04B8        	dbug	Map_Roll,	id_Roller,	0,	0,	$4B8
00021514 1201 0CCE 0000 0000        	dbug	Map_Light,	id_SpinningLight, 0,	0,	0
0002151C 4701 0E72 0000 0380        	dbug	Map_Bump,	id_Bumper,	0,	0,	$380
00021524 1F00 B216 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
0002152C 2200 B6A0 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
00021534 5001 1C64 0000 247B        	dbug	Map_Yad,	id_Yadrin,	0,	0,	$247B
0002153C 1800 99BC 0000 4000        	dbug	Map_Plat_SYZ,	id_BasicPlatform, 0,	0,	$4000
00021544 5601 2B14 0000 4000        	dbug	Map_FBlock,	id_FloatingBlock, 0,	0,	$4000
0002154C 3200 E066 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
00021554 7801 A9FA 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
0002155C 7901 ADA6 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00021564                            	@SYZend:
00021564                            
00021564                            @SBZ:
00021564 0000                       	dc.w (@SBZend-@SBZ-2)/8
00021566                            
00021566                            ;		mappings	object		subtype	frame	VRAM setting
00021566 2500 BE36 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0002156E 2600 C5F4 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00021576 5F01 402A 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
0002157E 6001 42E0 0000 0429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$429
00021586 7801 A9FA 0000 22B0        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$22B0
0002158E 1501 2EB0 0702 4391        	dbug	Map_BBall,	id_SwingingPlatform, 7,	2,	$4391
00021596 6701 9284 E000 C344        	dbug	Map_Disc,	id_RunningDisc,	$E0,	0,	$C344
0002159E 5201 2416 2802 22C0        	dbug	Map_MBlock,	id_MovingBlock,	$28,	2,	$22C0
000215A6 3200 E066 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
000215AE 6901 94DE 0300 4492        	dbug	Map_Trap,	id_SpinPlatform, 3,	0,	$4492
000215B6 6901 9538 8300 04DF        	dbug	Map_Spin,	id_SpinPlatform, $83,	0,	$4DF
000215BE 6A01 9796 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
000215C6 5300 9FB2 0000 43F5        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$43F5
000215CE 5201 2416 3903 4460        	dbug	Map_MBlock,	id_MovingBlock,	$39,	3,	$4460
000215D6 6B01 9B66 0000 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	0,	0,	$22C0
000215DE 2A00 A4A2 0000 42E8        	dbug	Map_ADoor,	id_AutoDoor,	0,	0,	$42E8
000215E6 6B01 9B66 1301 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$13,	1,	$22C0
000215EE 6A01 9796 0100 43B5        	dbug	Map_Saw,	id_Saws,	1,	0,	$43B5
000215F6 6B01 9B66 2401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$24,	1,	$22C0
000215FE 6A01 9796 0402 43B5        	dbug	Map_Saw,	id_Saws,	4,	2,	$43B5
00021606 6B01 9B66 3401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$34,	1,	$22C0
0002160E 6C01 9D42 0000 44C3        	dbug	Map_VanP,	id_VanishPlatform, 0,	0,	$44C3
00021616 6D01 0942 6400 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	0,	$83D9
0002161E 6D01 0942 640B 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	$B,	$83D9
00021626 6E01 9E26 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
0002162E 7001 A270 0000 42F0        	dbug	Map_Gird,	id_Girder,	0,	0,	$42F0
00021636 7101 38C0 1100 8680        	dbug	Map_Invis,	id_Invisibarrier, $11,	0,	$8680
0002163E 1E00 A910 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
00021646 7901 ADA6 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
0002164E                            	@SBZend:
0002164E                            
0002164E                            @Ending:
0002164E 0000                       	dc.w (@Endingend-@Ending-2)/8
00021650                            
00021650                            ;		mappings	object		subtype	frame	VRAM setting
00021650 2500 BE36 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00021658 2500 BE36 0008 27B2        	dbug	Map_Ring,	id_Rings,	0,	8,	$27B2
00021660                            	@Endingend:
00021660                            
00021660                            	even
00021660                            	even
00021660                            		include	"_inc\LevelHeaders.asm"
00021660                            ; ---------------------------------------------------------------------------
00021660                            ; Level Headers
00021660                            ; ---------------------------------------------------------------------------
00021660                            
00021660                            LevelHeaders:
00021660                            
00021660                            lhead:	macro plc1,lvlgfx,plc2,sixteen,twofivesix,music,pal
00021660                            	dc.l (plc1<<24)+lvlgfx
00021660                            	dc.l (plc2<<24)+sixteen
00021660                            	dc.l twofivesix
00021660                            	dc.b 0, music, pal, pal
00021660                            	endm
00021660                            
00021660                            ; 1st PLC, level gfx (unused), 2nd PLC, 16x16 data, 256x256 data,
00021660                            ; music (unused), palette (unused), palette
00021660                            
00021660                            ;		1st PLC				2nd PLC				256x256 data			palette
00021660                            ;				level gfx*			16x16 data			music*
00021660                            
00021660 0000 0000 0000 0000 0000+  	lhead	plcid_GHZ,	Nem_GHZ_2nd,	plcid_GHZ2,	Blk16_GHZ,	Blk256_GHZ,	bgm_GHZ,	palid_GHZ	; Green Hill
00021670 0000 0000 0000 0000 0000+  	lhead	plcid_LZ,	Nem_LZ,		plcid_LZ2,	Blk16_LZ,	Blk256_LZ,	bgm_LZ,		palid_LZ	; Labyrinth
00021680 0000 0000 0000 0000 0000+  	lhead	plcid_MZ,	Nem_MZ,		plcid_MZ2,	Blk16_MZ,	Blk256_MZ,	bgm_MZ,		palid_MZ	; Marble
00021690 0000 0000 0000 0000 0000+  	lhead	plcid_SLZ,	Nem_SLZ,	plcid_SLZ2,	Blk16_SLZ,	Blk256_SLZ,	bgm_SLZ,	palid_SLZ	; Star Light
000216A0 0000 0000 0000 0000 0000+  	lhead	plcid_SYZ,	Nem_SYZ,	plcid_SYZ2,	Blk16_SYZ,	Blk256_SYZ,	bgm_SYZ,	palid_SYZ	; Spring Yard
000216B0 0000 0000 0000 0000 0000+  	lhead	plcid_SBZ,	Nem_SBZ,	plcid_SBZ2,	Blk16_SBZ,	Blk256_SBZ,	bgm_SBZ,	palid_SBZ1	; Scrap Brain
000216C0 0000 0000 0000 0000 0000+  	lhead	0,		Nem_GHZ_2nd,	0,		Blk16_GHZ,	Blk256_GHZ,	bgm_SBZ,	palid_Ending	; Ending
000216D0                            	even
000216D0                            
000216D0                            ;	* music and level gfx are actually set elsewhere, so these values are useless
000216D0                            ;	* music and level gfx are actually set elsewhere, so these values are useless
000216D0                            		include	"_inc\Pattern Load Cues.asm"
000216D0                            ; ---------------------------------------------------------------------------
000216D0                            ; Pattern load cues
000216D0                            ; ---------------------------------------------------------------------------
000216D0                            ArtLoadCues:
000216D0                            
000216D0 0000                       ptr_PLC_Main:		dc.w PLC_Main-ArtLoadCues
000216D2 0000                       ptr_PLC_Main2:		dc.w PLC_Main2-ArtLoadCues
000216D4 0000                       ptr_PLC_Explode:	dc.w PLC_Explode-ArtLoadCues
000216D6 0000                       ptr_PLC_GameOver:	dc.w PLC_GameOver-ArtLoadCues
000216D8                            PLC_Levels:
000216D8 0000                       ptr_PLC_GHZ:		dc.w PLC_GHZ-ArtLoadCues
000216DA 0000                       ptr_PLC_GHZ2:		dc.w PLC_GHZ2-ArtLoadCues
000216DC 0000                       ptr_PLC_LZ:		dc.w PLC_LZ-ArtLoadCues
000216DE 0000                       ptr_PLC_LZ2:		dc.w PLC_LZ2-ArtLoadCues
000216E0 0000                       ptr_PLC_MZ:		dc.w PLC_MZ-ArtLoadCues
000216E2 0000                       ptr_PLC_MZ2:		dc.w PLC_MZ2-ArtLoadCues
000216E4 0000                       ptr_PLC_SLZ:		dc.w PLC_SLZ-ArtLoadCues
000216E6 0000                       ptr_PLC_SLZ2:		dc.w PLC_SLZ2-ArtLoadCues
000216E8 0000                       ptr_PLC_SYZ:		dc.w PLC_SYZ-ArtLoadCues
000216EA 0000                       ptr_PLC_SYZ2:		dc.w PLC_SYZ2-ArtLoadCues
000216EC 0000                       ptr_PLC_SBZ:		dc.w PLC_SBZ-ArtLoadCues
000216EE 0000                       ptr_PLC_SBZ2:		dc.w PLC_SBZ2-ArtLoadCues
000216F0 0000                       ptr_PLC_TitleCard:	dc.w PLC_TitleCard-ArtLoadCues
000216F2 0000                       ptr_PLC_Boss:		dc.w PLC_Boss-ArtLoadCues
000216F4 0000                       ptr_PLC_Signpost:	dc.w PLC_Signpost-ArtLoadCues
000216F6 0000                       ptr_PLC_Warp:		dc.w PLC_Warp-ArtLoadCues
000216F8 0000                       ptr_PLC_SpecialStage:	dc.w PLC_SpecialStage-ArtLoadCues
000216FA                            PLC_Animals:
000216FA 0000                       ptr_PLC_GHZAnimals:	dc.w PLC_GHZAnimals-ArtLoadCues
000216FC 0000                       ptr_PLC_LZAnimals:	dc.w PLC_LZAnimals-ArtLoadCues
000216FE 0000                       ptr_PLC_MZAnimals:	dc.w PLC_MZAnimals-ArtLoadCues
00021700 0000                       ptr_PLC_SLZAnimals:	dc.w PLC_SLZAnimals-ArtLoadCues
00021702 0000                       ptr_PLC_SYZAnimals:	dc.w PLC_SYZAnimals-ArtLoadCues
00021704 0000                       ptr_PLC_SBZAnimals:	dc.w PLC_SBZAnimals-ArtLoadCues
00021706 0000                       ptr_PLC_SSResult:	dc.w PLC_SSResult-ArtLoadCues
00021708 0000                       ptr_PLC_Ending:		dc.w PLC_Ending-ArtLoadCues
0002170A 0000                       ptr_PLC_TryAgain:	dc.w PLC_TryAgain-ArtLoadCues
0002170C 0000                       ptr_PLC_EggmanSBZ2:	dc.w PLC_EggmanSBZ2-ArtLoadCues
0002170E 0000                       ptr_PLC_FZBoss:		dc.w PLC_FZBoss-ArtLoadCues
00021710 0000                       ptr_PLC_Egg:		dc.w PLC_Egg-ArtLoadCues
00021712 0000                       ptr_PLC_LifeIcon:		dc.w PLC_LifeIcon-ArtLoadCues
00021714 0000                       ptr_PLC_LifeIconF:		dc.w PLC_LifeIconF-ArtLoadCues
00021716                            
00021716                            plcm:	macro gfx,vram
00021716                            	dc.l gfx
00021716                            	dc.w vram
00021716                            	endm
00021716                            
00021716                            ; ---------------------------------------------------------------------------
00021716                            ; Pattern load cues - standard block 1
00021716                            ; ---------------------------------------------------------------------------
00021716 0000                       PLC_Main:	dc.w ((PLC_Mainend-PLC_Main-2)/6)-1
00021718 0000 0000 D800             		plcm	Nem_Lamp, $D800		; lamppost
0002171E 0000 0000 D940             		plcm	Nem_Hud, $D940		; HUD
00021724 0000 0000 F300             		plcm	Nem_Ring, $F300		; rings		
0002172A 0000 0000 ADA0             		plcm	Nem_Points, $ADA0 	; points from enemy
00021730                            	PLC_Mainend:
00021730                            ; ---------------------------------------------------------------------------
00021730                            ; Pattern load cues - standard block 2
00021730                            ; ---------------------------------------------------------------------------
00021730 0000                       PLC_Main2:	dc.w ((PLC_Main2end-PLC_Main2-2)/6)-1
00021732 0000 0000 D000             		plcm	Nem_Monitors, $D000	; monitors
00021738                            	PLC_Main2end:
00021738                            ; ---------------------------------------------------------------------------
00021738                            ; Pattern load cues - explosion
00021738                            ; ---------------------------------------------------------------------------
00021738 0000                       PLC_Explode:	dc.w ((PLC_Explodeend-PLC_Explode-2)/6)-1
0002173A 0000 0000 B400             		plcm	Nem_Explode, $B400	; explosion
00021740                            	PLC_Explodeend:
00021740                            ; ---------------------------------------------------------------------------
00021740                            ; Pattern load cues - game/time	over
00021740                            ; ---------------------------------------------------------------------------
00021740 0000                       PLC_GameOver:	dc.w ((PLC_GameOverend-PLC_GameOver-2)/6)-1
00021742 0000 0000 ABC0             		plcm	Nem_GameOver, $ABC0	; game/time over
00021748                            	PLC_GameOverend:
00021748                            ; ---------------------------------------------------------------------------
00021748                            ; Pattern load cues - Green Hill
00021748                            ; ---------------------------------------------------------------------------
00021748 0000                       PLC_GHZ:	dc.w ((PLC_GHZ2-PLC_GHZ-2)/6)-1
0002174A 0000 0000 0000             		plcm	Nem_GHZ_1st, 0		; GHZ main patterns
00021750 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
00021756 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
0002175C 0000 0000 7A00             		plcm	Nem_PplRock, $7A00	; purple rock
00021762 0000 0000 8000             		plcm	Nem_Crabmeat, $8000	; crabmeat enemy
00021768 0000 0000 8880             		plcm	Nem_Mozzietron, $8880	; mozzietron enemy
0002176E 0000 0000 8F60             		plcm	Nem_Chopper, $8F60	; chopper enemy
00021774 0000 0000 9360             		plcm	Nem_Newtron, $9360	; newtron enemy
0002177A 0000 0000 9E00             		plcm	Nem_Motobug, $9E00	; motobug enemy
00021780 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00021786 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
0002178C 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00021792                            
00021792 0000                       PLC_GHZ2:	dc.w ((PLC_GHZ2end-PLC_GHZ2-2)/6)-1
00021794 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
0002179A 0000 0000 71C0             		plcm	Nem_Bridge, $71C0	; bridge
000217A0 0000 0000 7300             		plcm	Nem_SpikePole, $7300	; spiked pole
000217A6 0000 0000 7540             		plcm	Nem_Ball, $7540		; giant	ball
000217AC 0000 0000 A1E0             		plcm	Nem_GhzWall1, $A1E0	; breakable wall
000217B2 0000 0000 6980             		plcm	Nem_GhzWall2, $6980	; normal wall
000217B8                            	PLC_GHZ2end:
000217B8                            ; ---------------------------------------------------------------------------
000217B8                            ; Pattern load cues - Labyrinth
000217B8                            ; ---------------------------------------------------------------------------
000217B8 0000                       PLC_LZ:		dc.w ((PLC_LZ2-PLC_LZ-2)/6)-1
000217BA 0000 0000 0000             		plcm	Nem_LZ,0		; LZ main patterns
000217C0 0000 0000 3C00             		plcm	Nem_LzBlock1, $3C00	; block
000217C6                            		;plcm	Nem_LzBlock2, $3E00	; blocks
000217C6 0000 0000 6000             		plcm	Nem_Water, $6000	; water	surface
000217CC 0000 0000 6200             		plcm	Nem_LzSpikeBall, $6200	; spiked ball
000217D2 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
000217D8 0000 0000 7780             		plcm	Nem_LzBlock3, $7780	; block
000217DE 0000 0000 7880             		plcm	Nem_LzDoor1, $7880	; vertical door
000217E4 0000 0000 7980             		plcm	Nem_Harpoon, $7980	; harpoon
000217EA 0000 0000 94C0             		plcm	Nem_Burrobot, $94C0	; burrobot enemy
000217F0                            
000217F0 0000                       PLC_LZ2:	dc.w ((PLC_LZ2end-PLC_LZ2-2)/6)-1
000217F2 0000 0000 7BC0             		plcm	Nem_LzPole, $7BC0	; pole that breaks
000217F8 0000 0000 7CC0             		plcm	Nem_LzDoor2, $7CC0	; large	horizontal door
000217FE                            		;plcm	Nem_LzWheel, $7EC0	; wheel
000217FE                            		;plcm	Nem_Gargoyle, $5D20	; gargoyle head
000217FE 0000 0000 89E0             		plcm	Nem_LzPlatfm, $89E0	; rising platform
00021804 0000 0000 8CE0             		plcm	Nem_Orbinaut, $8CE0	; orbinaut enemy
0002180A 0000 0000 90C0             		plcm	Nem_Jaws, $90C0		; jaws enemy
00021810 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00021816 0000 0000 A000             		plcm	Nem_Cork, $A000		; cork block
0002181C 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00021822 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00021828 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
0002182E                            	PLC_LZ2end:
0002182E                            ; ---------------------------------------------------------------------------
0002182E                            ; Pattern load cues - Marble
0002182E                            ; ---------------------------------------------------------------------------
0002182E 0000                       PLC_MZ:		dc.w ((PLC_MZ2-PLC_MZ-2)/6)-1
00021830 0000 0000 0000             		plcm	Nem_MZ,0		; MZ main patterns
00021836 0000 0000 9FE0             		plcm	Nem_Cater, $9FE0	; caterkiller enemy
0002183C 0000 0000 6040             		plcm	Nem_BallHog, $6040	; ball hog enemy
00021842 0000 0000 68A0             		plcm	Nem_MzFire, $68A0	; fireballs
00021848                            	;	plcm	Nem_MzGlass, $71C0	; green	glassy block
00021848 0000 0000 75A0             		plcm	Nem_Cutter, $75A0	; pizza	cutter
0002184E 0000 0000 8000             		plcm	Nem_Bomb, $8000
00021854 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
0002185A 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00021860 0000 0000 9700             		plcm	Nem_Basaran, $9700	; basaran enemy
00021866                            
00021866 0000                       PLC_MZ2:	dc.w ((PLC_MZ2end-PLC_MZ2-2)/6)-1
00021868 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
0002186E 0000 0000 5D40             		plcm	Nem_SbzDoor1, $5D40	; door
00021874                            		;plcm	Nem_MzSwitch, $A260	; switch
00021874 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
0002187A 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00021880 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00021886 0000 0000 5700             		plcm	Nem_MzBlock, $5700	; green	stone block
0002188C 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00021892                            	PLC_MZ2end:
00021892                            ; ---------------------------------------------------------------------------
00021892                            ; Pattern load cues - Star Light
00021892                            ; ---------------------------------------------------------------------------
00021892 0000                       PLC_SLZ:	dc.w ((PLC_SLZ2-PLC_SLZ-2)/6)-1
00021894 0000 0000 0000             		plcm	Nem_SLZ,0		; SLZ main patterns
0002189A 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
000218A0 0000 0000 8520             		plcm	Nem_Orbinaut, $8520	; orbinaut enemy
000218A6 0000 0000 9000             		plcm	Nem_MzFire, $9000	; fireballs
000218AC 0000 0000 9C00             		plcm	Nem_SlzBlock, $9C00	; block
000218B2 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
000218B8 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
000218BE 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
000218C4 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
000218CA                            
000218CA 0000                       PLC_SLZ2:	dc.w ((PLC_SLZ2end-PLC_SLZ2-2)/6)-1
000218CC 0000 0000 6E80             		plcm	Nem_Seesaw, $6E80	; seesaw
000218D2 0000 0000 7400             		plcm	Nem_Fan, $7400		; fan
000218D8 0000 0000 7980             		plcm	Nem_Pylon, $7980	; foreground pylon
000218DE 0000 0000 7B80             		plcm	Nem_SlzSwing, $7B80	; swinging platform
000218E4 0000 0000 9B00             		plcm	Nem_SlzCannon, $9B00	; fireball launcher
000218EA 0000 0000 9E00             		plcm	Nem_SlzSpike, $9E00	; spikeball
000218F0                            	PLC_SLZ2end:
000218F0                            ; ---------------------------------------------------------------------------
000218F0                            ; Pattern load cues - Spring Yard
000218F0                            ; ---------------------------------------------------------------------------
000218F0 0000                       PLC_SYZ:	dc.w ((PLC_SYZ2-PLC_SYZ-2)/6)-1
000218F2 0000 0000 0000             		plcm	Nem_SYZ,0		; SYZ main patterns
000218F8                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
000218F8                            		;plcm	Nem_SbzDoor1, $5D40	; door
000218F8 0000 0000 7540             		plcm	Nem_Ball, $7540		; giant	ball
000218FE 0000 0000 7EA0             		plcm	Nem_Bubbles, $7EA0	; bubbles and numbers
00021904                            		;plcm	Nem_Buzz, $8880		; buzz bomber enemy
00021904 0000 0000 8F60             		plcm	Nem_Yadrin, $8F60	; yadrin enemy
0002190A 0000 0000 9700             		plcm	Nem_Roller, $9700	; roller enemy
00021910 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00021916 0000 0000 7840             		plcm	Nem_SbzFloor, $7840	; collapsing floor
0002191C 0000 0000 8BA0             		plcm	Nem_SbzBlock, $8BA0	; vanishing block
00021922 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00021928                            
00021928 0000                       PLC_SYZ2:	dc.w ((PLC_SYZ2end-PLC_SYZ2-2)/6)-1
0002192A                            		;plcm	Nem_Cater, $5600	; caterkiller enemy
0002192A 0000 0000 7000             		plcm	Nem_Bumper, $7000	; bumper
00021930 0000 0000 72C0             		plcm	Nem_SyzSpike1, $72C0	; large	spikeball
00021936 0000 0000 7740             		plcm	Nem_SyzSpike2, $7740	; small	spikeball
0002193C                            		;plcm	Nem_TrapDoor, $9240	; trapdoor
0002193C 0000 0000 78C0             		plcm	Nem_SbzFloor, $78C0	; collapsing floor
00021942                            		;plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00021942 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00021948 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
0002194E 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00021954 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
0002195A                            	PLC_SYZ2end:
0002195A                            ; ---------------------------------------------------------------------------
0002195A                            ; Pattern load cues - Scrap Brain
0002195A                            ; ---------------------------------------------------------------------------
0002195A 0000                       PLC_SBZ:	dc.w ((PLC_SBZ2-PLC_SBZ-2)/6)-1
0002195C 0000 0000 0000             		plcm	Nem_SBZ,0		; SBZ main patterns
00021962                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00021962                            		;plcm	Nem_SbzDoor1, $5D00	; door
00021962                            		;plcm	Nem_Girder, $5E00	; girder
00021962 0000 0000 6880             		plcm	Nem_SbzWheel1, $6880	; spot on large	wheel
00021968 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
0002196E                            		;plcm	Nem_SbzWheel2, $6900	; wheel	that grabs Sonic
0002196E 0000 0000 7220             		plcm	Nem_SyzSpike1, $7220	; large	spikeball
00021974 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
0002197A 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
00021980 0000 0000 9860             		plcm	Nem_SbzBlock, $9860	; vanishing block
00021986                            
00021986 0000                       PLC_SBZ2:	dc.w ((PLC_SBZ2end-PLC_SBZ2-2)/6)-1
00021988 0000 0000 5600             		plcm	Nem_Cater, $5600	; caterkiller enemy
0002198E 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00021994 0000 0000 8C00             		plcm	Nem_SlideFloor, $8C00	; floor	that slides away
0002199A                            		;plcm	Nem_SbzDoor2, $8DE0	; horizontal door
0002199A 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
000219A0 0000 0000 9240             		plcm	Nem_TrapDoor, $9240	; trapdoor
000219A6 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
000219AC 0000 0000 9BE0             		plcm	Nem_SpinPform, $9BE0	; small	spinning platform
000219B2 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
000219B8 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
000219BE 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
000219C4 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
000219CA                            	PLC_SBZ2end:
000219CA                            ; ---------------------------------------------------------------------------
000219CA                            ; Pattern load cues - title card
000219CA                            ; ---------------------------------------------------------------------------
000219CA 0000                       PLC_TitleCard:	dc.w ((PLC_TitleCardend-PLC_TitleCard-2)/6)-1
000219CC 0000 0000 B000             		plcm	Nem_TitleCard, $B000
000219D2                            	PLC_TitleCardend:
000219D2                            ; ---------------------------------------------------------------------------
000219D2                            ; Pattern load cues - act 3 boss
000219D2                            ; ---------------------------------------------------------------------------
000219D2 0000                       PLC_Boss:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
000219D4 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
000219DA 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
000219E0 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
000219E6                            		;plcm	Nem_Bomb, $A300		; bomb enemy ((gets overwritten)
000219E6                            		;plcm	Nem_SlzSpike, $A300	; spikeball ((SLZ boss)
000219E6 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
000219EC 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
000219F2                            	PLC_Bossend:
000219F2                            ; ---------------------------------------------------------------------------
000219F2                            ; Pattern load cues - act 1/2 signpost
000219F2                            ; ---------------------------------------------------------------------------
000219F2 0000                       PLC_Signpost:	dc.w ((PLC_Signpostend-PLC_Signpost-2)/6)-1
000219F4 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
000219FA 0000 0000 96C0             		plcm	Nem_Bonus, $96C0	; hidden bonus points
00021A00 0000 0000 8C40             		plcm	Nem_BigFlash, $8C40	; giant	ring flash effect
00021A06                            		;plcm	Nem_SSEmerald, $EE00	; emeralds
00021A06                            	PLC_Signpostend:
00021A06                            ; ---------------------------------------------------------------------------
00021A06                            ; Pattern load cues - beta special stage warp effect
00021A06                            ; ---------------------------------------------------------------------------
00021A06                            PLC_Warp:
00021A06                            	PLC_Warpend:
00021A06                            ; ---------------------------------------------------------------------------
00021A06                            ; Pattern load cues - special stage
00021A06                            ; ---------------------------------------------------------------------------
00021A06 0000                       PLC_SpecialStage:	dc.w ((PLC_SpeStageend-PLC_SpecialStage-2)/6)-1
00021A08 0000 0000 0000             		plcm	Nem_SSBgCloud, 0	; bubble and cloud background
00021A0E 0000 0000 0A20             		plcm	Nem_SSBgFish, $A20	; bird and fish	background
00021A14 0000 0000 2840             		plcm	Nem_SSWalls, $2840	; walls
00021A1A 0000 0000 4760             		plcm	Nem_Bumper, $4760	; bumper
00021A20 0000 0000 4A20             		plcm	Nem_SSGOAL, $4A20	; GOAL block
00021A26 0000 0000 4C60             		plcm	Nem_SSUpDown, $4C60	; UP and DOWN blocks
00021A2C 0000 0000 5E00             		plcm	Nem_SSRBlock, $5E00	; R block
00021A32 0000 0000 6E00             		plcm	Nem_SS1UpBlock, $6E00	; 1UP block
00021A38 0000 0000 7E00             		plcm	Nem_SSEmStars, $7E00	; emerald collection stars
00021A3E 0000 0000 8E00             		plcm	Nem_SSRedWhite, $8E00	; red and white	block
00021A44 0000 0000 9E00             		plcm	Nem_SSGhost, $9E00	; ghost	block
00021A4A 0000 0000 AE00             		plcm	Nem_SSWBlock, $AE00	; W block
00021A50 0000 0000 BE00             		plcm	Nem_SSGlass, $BE00	; glass	block
00021A56 0000 0000 EE00             		plcm	Nem_SSEmerald, $EE00	; emeralds
00021A5C                            		;plcm	Nem_SSZone1, $F2E0	; ZONE 1 block
00021A5C                            		;plcm	Nem_SSZone2, $F400	; ZONE 2 block
00021A5C                            		;plcm	Nem_SSZone3, $F520	; ZONE 3 block
00021A5C                            	PLC_SpeStageend:
00021A5C                            		;plcm	Nem_SSZone4, $F2E0	; ZONE 4 block
00021A5C                            		;plcm	Nem_SSZone5, $F400	; ZONE 5 block
00021A5C                            		;plcm	Nem_SSZone6, $F520	; ZONE 6 block
00021A5C                            ; ---------------------------------------------------------------------------
00021A5C                            ; Pattern load cues - GHZ animals
00021A5C                            ; ---------------------------------------------------------------------------
00021A5C 0000                       PLC_GHZAnimals:	dc.w ((PLC_GHZAnimalsend-PLC_GHZAnimals-2)/6)-1
00021A5E 0000 0000 B000             		plcm	Nem_Rabbit, $B000	; rabbit
00021A64 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00021A6A                            	PLC_GHZAnimalsend:
00021A6A                            ; ---------------------------------------------------------------------------
00021A6A                            ; Pattern load cues - LZ animals
00021A6A                            ; ---------------------------------------------------------------------------
00021A6A 0000                       PLC_LZAnimals:	dc.w ((PLC_LZAnimalsend-PLC_LZAnimals-2)/6)-1
00021A6C 0000 0000 B000             		plcm	Nem_BlackBird, $B000	; blackbird
00021A72 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00021A78                            	PLC_LZAnimalsend:
00021A78                            ; ---------------------------------------------------------------------------
00021A78                            ; Pattern load cues - MZ animals
00021A78                            ; ---------------------------------------------------------------------------
00021A78 0000                       PLC_MZAnimals:	dc.w ((PLC_MZAnimalsend-PLC_MZAnimals-2)/6)-1
00021A7A 0000 0000 B000             		plcm	Nem_Squirrel, $B000	; squirrel
00021A80 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00021A86                            	PLC_MZAnimalsend:
00021A86                            ; ---------------------------------------------------------------------------
00021A86                            ; Pattern load cues - SLZ animals
00021A86                            ; ---------------------------------------------------------------------------
00021A86 0000                       PLC_SLZAnimals:	dc.w ((PLC_SLZAnimalsend-PLC_SLZAnimals-2)/6)-1
00021A88 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00021A8E 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00021A94                            	PLC_SLZAnimalsend:
00021A94                            ; ---------------------------------------------------------------------------
00021A94                            ; Pattern load cues - SYZ animals
00021A94                            ; ---------------------------------------------------------------------------
00021A94 0000                       PLC_SYZAnimals:	dc.w ((PLC_SYZAnimalsend-PLC_SYZAnimals-2)/6)-1
00021A96 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00021A9C 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00021AA2                            	PLC_SYZAnimalsend:
00021AA2                            ; ---------------------------------------------------------------------------
00021AA2                            ; Pattern load cues - SBZ animals
00021AA2                            ; ---------------------------------------------------------------------------
00021AA2 0000                       PLC_SBZAnimals:	dc.w ((PLC_SBZAnimalsend-PLC_SBZAnimals-2)/6)-1
00021AA4 0000 0000 B000             		plcm	Nem_Rabbit, $B000		; rabbit
00021AAA 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00021AB0                            	PLC_SBZAnimalsend:
00021AB0                            ; ---------------------------------------------------------------------------
00021AB0                            ; Pattern load cues - special stage results screen
00021AB0                            ; ---------------------------------------------------------------------------
00021AB0 0000                       PLC_SSResult:dc.w ((PLC_SpeStResultend-PLC_SSResult-2)/6)-1
00021AB2 0000 0000 A820             		plcm	Nem_ResultEm, $A820	; emeralds
00021AB8 0000 0000 AA20             		plcm	Nem_MiniSonic, $AA20	; mini Sonic
00021ABE                            	PLC_SpeStResultend:
00021ABE                            ; ---------------------------------------------------------------------------
00021ABE                            ; Pattern load cues - ending sequence
00021ABE                            ; ---------------------------------------------------------------------------
00021ABE 0000                       PLC_Ending:	dc.w ((PLC_Endingend-PLC_Ending-2)/6)-1
00021AC0 0000 0000 0000             		plcm	Nem_GHZ_1st,0		; GHZ main patterns
00021AC6 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
00021ACC 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
00021AD2                            		;plcm	Nem_EndFlower, $7400	; flowers
00021AD2 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00021AD8 0000 0000 7C20             		plcm	Nem_EndSonic, $7C20	; Sonic
00021ADE 0000 0000 AA60             		plcm	Nem_Rabbit, $AA60	; rabbit
00021AE4 0000 0000 ACA0             		plcm	Nem_Chicken, $ACA0	; chicken
00021AEA 0000 0000 AE60             		plcm	Nem_BlackBird, $AE60	; blackbird
00021AF0 0000 0000 B0A0             		plcm	Nem_Seal, $B0A0		; seal
00021AF6 0000 0000 B260             		plcm	Nem_Pig, $B260		; pig
00021AFC 0000 0000 B4A0             		plcm	Nem_Flicky, $B4A0	; flicky
00021B02 0000 0000 B660             		plcm	Nem_Squirrel, $B660	; squirrel
00021B08 0000 0000 B8A0             		plcm	Nem_EndStH, $B8A0	; "SONIC THE HEDGEHOG"
00021B0E                            	PLC_Endingend:
00021B0E                            ; ---------------------------------------------------------------------------
00021B0E                            ; Pattern load cues - "TRY AGAIN" and "END" screens
00021B0E                            ; ---------------------------------------------------------------------------
00021B0E 0000                       PLC_TryAgain:	dc.w ((PLC_TryAgainend-PLC_TryAgain-2)/6)-1
00021B10 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00021B16 0000 0000 7C20             		plcm	Nem_TryAgain, $7C20	; Eggman
00021B1C 0000 0000 B400             		plcm	Nem_CreditText, $B400	; credits alphabet
00021B22                            	PLC_TryAgainend:
00021B22                            ; ---------------------------------------------------------------------------
00021B22                            ; Pattern load cues - Eggman on SBZ 2
00021B22                            ; ---------------------------------------------------------------------------
00021B22 0000                       PLC_EggmanSBZ2:	dc.w ((PLC_EggmanSBZ2end-PLC_EggmanSBZ2-2)/6)-1
00021B24 0000 0000 A300             		plcm	Nem_SbzBlock, $A300	; block
00021B2A 0000 0000 8000             		plcm	Nem_Sbz2Eggman, $8000	; Eggman
00021B30 0000 0000 9400             		plcm	Nem_LzSwitch, $9400	; switch
00021B36                            	PLC_EggmanSBZ2end:
00021B36                            ; ---------------------------------------------------------------------------
00021B36                            ; Pattern load cues - final boss
00021B36                            ; ---------------------------------------------------------------------------
00021B36 0000                       PLC_FZBoss:	dc.w ((PLC_FZBossend-PLC_FZBoss-2)/6)-1
00021B38 0000 0000 7400             		plcm	Nem_FzEggman, $7400	; Eggman after boss
00021B3E 0000 0000 6000             		plcm	Nem_FzBoss, $6000	; FZ boss
00021B44 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00021B4A 0000 0000 8E00             		plcm	Nem_Sbz2Eggman, $8E00	; Eggman without ship
00021B50 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00021B56                            	PLC_FZBossend:
00021B56                            ; ---------------------------------------------------------------------------
00021B56                            ; Pattern load cues - Eggman
00021B56                            ; ---------------------------------------------------------------------------
00021B56 0004                       PLC_Egg:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00021B58 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00021B5E 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00021B64 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00021B6A 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00021B70 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00021B76 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00021B7C                            	PLC_Eggend:
00021B7C                            		even
00021B7C                            ; ---------------------------------------------------------------------------
00021B7C                            ; Pattern load cues - Life Icon
00021B7C                            ; ---------------------------------------------------------------------------	
00021B7C 0000                       PLC_LifeIcon:	dc.w ((PLC_LifeIcon_end-PLC_LifeIcon-2)/6)-1
00021B7E 0000 0000 FA80             		plcm	Nem_Lives, $FA80	; lives	counter	
00021B84                            	PLC_LifeIcon_end: 
00021B84                            		even	
00021B84                            ; ---------------------------------------------------------------------------
00021B84                            ; Pattern load cues - Life Icon (Future)
00021B84                            ; ---------------------------------------------------------------------------	
00021B84 0000                       PLC_LifeIconF:	dc.w ((PLC_LifeIconF_end-PLC_LifeIconF-2)/6)-1
00021B86 0000 0000 FA80             		plcm	Nem_Future, $FA80	; lives	counter	
00021B8C                            	PLC_LifeIconF_end: ; nahhhhh... too far, bro
00021B8C                            		even			
00021B8C                            ; ---------------------------------------------------------------------------
00021B8C                            ; Pattern load cue IDs
00021B8C                            ; ---------------------------------------------------------------------------
00021B8C =00000000                  plcid_Main:		equ (ptr_PLC_Main-ArtLoadCues)/2	; 0
00021B8C =00000001                  plcid_Main2:		equ (ptr_PLC_Main2-ArtLoadCues)/2	; 1
00021B8C =00000002                  plcid_Explode:		equ (ptr_PLC_Explode-ArtLoadCues)/2	; 2
00021B8C =00000003                  plcid_GameOver:		equ (ptr_PLC_GameOver-ArtLoadCues)/2	; 3
00021B8C =00000004                  plcid_GHZ:		equ (ptr_PLC_GHZ-ArtLoadCues)/2		; 4
00021B8C =00000005                  plcid_GHZ2:		equ (ptr_PLC_GHZ2-ArtLoadCues)/2	; 5
00021B8C =00000006                  plcid_LZ:		equ (ptr_PLC_LZ-ArtLoadCues)/2		; 6
00021B8C =00000007                  plcid_LZ2:		equ (ptr_PLC_LZ2-ArtLoadCues)/2		; 7
00021B8C =00000008                  plcid_MZ:		equ (ptr_PLC_MZ-ArtLoadCues)/2		; 8
00021B8C =00000009                  plcid_MZ2:		equ (ptr_PLC_MZ2-ArtLoadCues)/2		; 9
00021B8C =0000000A                  plcid_SLZ:		equ (ptr_PLC_SLZ-ArtLoadCues)/2		; $A
00021B8C =0000000B                  plcid_SLZ2:		equ (ptr_PLC_SLZ2-ArtLoadCues)/2	; $B
00021B8C =0000000C                  plcid_SYZ:		equ (ptr_PLC_SYZ-ArtLoadCues)/2		; $C
00021B8C =0000000D                  plcid_SYZ2:		equ (ptr_PLC_SYZ2-ArtLoadCues)/2	; $D
00021B8C =0000000E                  plcid_SBZ:		equ (ptr_PLC_SBZ-ArtLoadCues)/2		; $E
00021B8C =0000000F                  plcid_SBZ2:		equ (ptr_PLC_SBZ2-ArtLoadCues)/2	; $F
00021B8C =00000010                  plcid_TitleCard:	equ (ptr_PLC_TitleCard-ArtLoadCues)/2	; $10
00021B8C =00000011                  plcid_Boss:		equ (ptr_PLC_Boss-ArtLoadCues)/2	; $11
00021B8C =00000012                  plcid_Signpost:		equ (ptr_PLC_Signpost-ArtLoadCues)/2	; $12
00021B8C =00000013                  plcid_Warp:		equ (ptr_PLC_Warp-ArtLoadCues)/2	; $13
00021B8C =00000014                  plcid_SpecialStage:	equ (ptr_PLC_SpecialStage-ArtLoadCues)/2 ; $14
00021B8C =00000015                  plcid_GHZAnimals:	equ (ptr_PLC_GHZAnimals-ArtLoadCues)/2	; $15
00021B8C =00000016                  plcid_LZAnimals:	equ (ptr_PLC_LZAnimals-ArtLoadCues)/2	; $16
00021B8C =00000017                  plcid_MZAnimals:	equ (ptr_PLC_MZAnimals-ArtLoadCues)/2	; $17
00021B8C =00000018                  plcid_SLZAnimals:	equ (ptr_PLC_SLZAnimals-ArtLoadCues)/2	; $18
00021B8C =00000019                  plcid_SYZAnimals:	equ (ptr_PLC_SYZAnimals-ArtLoadCues)/2	; $19
00021B8C =0000001A                  plcid_SBZAnimals:	equ (ptr_PLC_SBZAnimals-ArtLoadCues)/2	; $1A
00021B8C =0000001B                  plcid_SSResult:		equ (ptr_PLC_SSResult-ArtLoadCues)/2	; $1B
00021B8C =0000001C                  plcid_Ending:		equ (ptr_PLC_Ending-ArtLoadCues)/2	; $1C
00021B8C =0000001D                  plcid_TryAgain:		equ (ptr_PLC_TryAgain-ArtLoadCues)/2	; $1D
00021B8C =0000001E                  plcid_EggmanSBZ2:	equ (ptr_PLC_EggmanSBZ2-ArtLoadCues)/2	; $1E
00021B8C =0000001F                  plcid_FZBoss:		equ (ptr_PLC_FZBoss-ArtLoadCues)/2	; $1F
00021B8C =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $20
00021B8C =00000021                  plcid_LifeIcon:		equ (ptr_PLC_LifeIcon-ArtLoadCues)/2	; $21
00021B8C =00000022                  plcid_LifeIconF:		equ (ptr_PLC_LifeIconF-ArtLoadCues)/2	; $21
00021B8C =00000022                  plcid_LifeIconF:		equ (ptr_PLC_LifeIconF-ArtLoadCues)/2	; $21
00021B8C                            
00021C00                            			dcb.b	$300,$FF
00021F00                            	Nem_SegaLogo:	incbin	"artnem\Sega Logo (JP1).bin" ; large Sega logo
00022370                            			even
00022370                            	Eni_SegaLogo:	incbin	"tilemaps\Sega Logo (JP1).bin" ; large Sega logo (mappings)
0002246C                            			even
0002246C                            Eni_Title:	incbin	"tilemaps\Title Screen.bin" ; title screen foreground (mappings)
0002254C                            		even
0002254C                            Nem_TitleFg:	incbin	"artnem\Title Screen Foreground.bin"
000239B8                            		even
000239B8                            Nem_TitleSonic:	incbin	"artnem\Title Screen Sonic.bin"
00025498                            		even
00025498                            Nem_TitleTM:	incbin	"artnem\Title Screen TM.bin"
000254CC                            		even
000254CC                            Nem_TitleMenu:   incbin   "artnem\titlemenu.bin"  
000256FE 00                         		even		
000256FE                            Eni_JapNames:	incbin	"tilemaps\Hidden Japanese Credits.bin" ; Japanese credits (mappings)
000257BC                            		even
000257BC                            Nem_JapNames:	incbin	"artnem\Hidden Japanese Credits.bin"
00025C64                            		even
00025C64                            
00025C64                            Map_Sonic:	include	"_maps\Sonic.asm"
00025C64                            ; --------------------------------------------------------------------------------
00025C64                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00025C64                            ; --------------------------------------------------------------------------------
00025C64                            
00025C64                            SME_9IQLQ:	
00025C64 0000 0000                  		dc.w SME_9IQLQ_1EE-SME_9IQLQ, SME_9IQLQ_1EF-SME_9IQLQ	
00025C68 0000 0000                  		dc.w SME_9IQLQ_204-SME_9IQLQ, SME_9IQLQ_232-SME_9IQLQ	
00025C6C 0000 0000                  		dc.w SME_9IQLQ_265-SME_9IQLQ, SME_9IQLQ_27A-SME_9IQLQ	
00025C70 0000 0000                  		dc.w SME_9IQLQ_28A-SME_9IQLQ, SME_9IQLQ_29A-SME_9IQLQ	
00025C74 0000 0000                  		dc.w SME_9IQLQ_2AF-SME_9IQLQ, SME_9IQLQ_2BA-SME_9IQLQ	
00025C78 0000 0000                  		dc.w SME_9IQLQ_2CA-SME_9IQLQ, SME_9IQLQ_2DA-SME_9IQLQ	
00025C7C 0000 0000                  		dc.w SME_9IQLQ_2EA-SME_9IQLQ, SME_9IQLQ_2FF-SME_9IQLQ	
00025C80 0000 0000                  		dc.w SME_9IQLQ_30F-SME_9IQLQ, SME_9IQLQ_333-SME_9IQLQ	
00025C84 0000 0000                  		dc.w SME_9IQLQ_34D-SME_9IQLQ, SME_9IQLQ_358-SME_9IQLQ	
00025C88 0000 0000                  		dc.w SME_9IQLQ_368-SME_9IQLQ, SME_9IQLQ_37D-SME_9IQLQ	
00025C8C 0000 0000                  		dc.w SME_9IQLQ_388-SME_9IQLQ, SME_9IQLQ_398-SME_9IQLQ	
00025C90 0000 0000                  		dc.w SME_9IQLQ_3B2-SME_9IQLQ, SME_9IQLQ_3CC-SME_9IQLQ	
00025C94 0000 0000                  		dc.w SME_9IQLQ_3EB-SME_9IQLQ, SME_9IQLQ_400-SME_9IQLQ	
00025C98 0000 0000                  		dc.w SME_9IQLQ_410-SME_9IQLQ, SME_9IQLQ_42A-SME_9IQLQ	
00025C9C 0000 0000                  		dc.w SME_9IQLQ_43F-SME_9IQLQ, SME_9IQLQ_44F-SME_9IQLQ	
00025CA0 0000 0000                  		dc.w SME_9IQLQ_469-SME_9IQLQ, SME_9IQLQ_47E-SME_9IQLQ	
00025CA4 0000 0000                  		dc.w SME_9IQLQ_489-SME_9IQLQ, SME_9IQLQ_494-SME_9IQLQ	
00025CA8 0000 0000                  		dc.w SME_9IQLQ_4AE-SME_9IQLQ, SME_9IQLQ_4C3-SME_9IQLQ	
00025CAC 0000 0000                  		dc.w SME_9IQLQ_4CE-SME_9IQLQ, SME_9IQLQ_4DE-SME_9IQLQ	
00025CB0 0000 0000                  		dc.w SME_9IQLQ_4EE-SME_9IQLQ, SME_9IQLQ_50D-SME_9IQLQ	
00025CB4 0000 0000                  		dc.w SME_9IQLQ_52C-SME_9IQLQ, SME_9IQLQ_541-SME_9IQLQ	
00025CB8 0000 0000                  		dc.w SME_9IQLQ_551-SME_9IQLQ, SME_9IQLQ_56B-SME_9IQLQ	
00025CBC 0000 0000                  		dc.w SME_9IQLQ_580-SME_9IQLQ, SME_9IQLQ_590-SME_9IQLQ	
00025CC0 0000 0000                  		dc.w SME_9IQLQ_5AA-SME_9IQLQ, SME_9IQLQ_5B5-SME_9IQLQ	
00025CC4 0000 0000                  		dc.w SME_9IQLQ_5C0-SME_9IQLQ, SME_9IQLQ_5CB-SME_9IQLQ	
00025CC8 0000 0000                  		dc.w SME_9IQLQ_5D6-SME_9IQLQ, SME_9IQLQ_5E1-SME_9IQLQ	
00025CCC 0000 0000                  		dc.w SME_9IQLQ_5EC-SME_9IQLQ, SME_9IQLQ_5F7-SME_9IQLQ	
00025CD0 0000 0000                  		dc.w SME_9IQLQ_602-SME_9IQLQ, SME_9IQLQ_617-SME_9IQLQ	
00025CD4 0000 0000                  		dc.w SME_9IQLQ_627-SME_9IQLQ, SME_9IQLQ_637-SME_9IQLQ	
00025CD8 0000 0000                  		dc.w SME_9IQLQ_647-SME_9IQLQ, SME_9IQLQ_65C-SME_9IQLQ	
00025CDC 0000 0000                  		dc.w SME_9IQLQ_66C-SME_9IQLQ, SME_9IQLQ_67C-SME_9IQLQ	
00025CE0 0000 0000                  		dc.w SME_9IQLQ_68C-SME_9IQLQ, SME_9IQLQ_697-SME_9IQLQ	
00025CE4 0000 0000                  		dc.w SME_9IQLQ_6A2-SME_9IQLQ, SME_9IQLQ_6AD-SME_9IQLQ	
00025CE8 0000 0000                  		dc.w SME_9IQLQ_6B8-SME_9IQLQ, SME_9IQLQ_6C3-SME_9IQLQ	
00025CEC 0000 0000                  		dc.w SME_9IQLQ_6CE-SME_9IQLQ, SME_9IQLQ_6D9-SME_9IQLQ	
00025CF0 0000 0000                  		dc.w SME_9IQLQ_6E4-SME_9IQLQ, SME_9IQLQ_6F9-SME_9IQLQ	
00025CF4 0000 0000                  		dc.w SME_9IQLQ_709-SME_9IQLQ, SME_9IQLQ_714-SME_9IQLQ	
00025CF8 0000 0000                  		dc.w SME_9IQLQ_724-SME_9IQLQ, SME_9IQLQ_739-SME_9IQLQ	
00025CFC 0000 0000                  		dc.w SME_9IQLQ_749-SME_9IQLQ, SME_9IQLQ_754-SME_9IQLQ	
00025D00 0000 0000                  		dc.w SME_9IQLQ_764-SME_9IQLQ, SME_9IQLQ_774-SME_9IQLQ	
00025D04 0000 0000                  		dc.w SME_9IQLQ_784-SME_9IQLQ, SME_9IQLQ_7B2-SME_9IQLQ	
00025D08 0000 0000                  		dc.w SME_9IQLQ_7E0-SME_9IQLQ, SME_9IQLQ_7F0-SME_9IQLQ	
00025D0C 0000 0000                  		dc.w SME_9IQLQ_800-SME_9IQLQ, SME_9IQLQ_810-SME_9IQLQ	
00025D10 0000 0000                  		dc.w SME_9IQLQ_82A-SME_9IQLQ, SME_9IQLQ_83A-SME_9IQLQ	
00025D14 0000 0000                  		dc.w SME_9IQLQ_84A-SME_9IQLQ, SME_9IQLQ_864-SME_9IQLQ	
00025D18 0000 0000                  		dc.w SME_9IQLQ_87E-SME_9IQLQ, SME_9IQLQ_893-SME_9IQLQ	
00025D1C 0000 0000                  		dc.w SME_9IQLQ_8A8-SME_9IQLQ, SME_9IQLQ_8BD-SME_9IQLQ	
00025D20 0000 0000                  		dc.w SME_9IQLQ_8D2-SME_9IQLQ, SME_9IQLQ_8D8-SME_9IQLQ	
00025D24 0000 0000                  		dc.w SME_9IQLQ_8DE-SME_9IQLQ, SME_9IQLQ_8E4-SME_9IQLQ	
00025D28 0000 0000                  		dc.w SME_9IQLQ_8EA-SME_9IQLQ, SME_9IQLQ_8F0-SME_9IQLQ	
00025D2C 0000 0000                  		dc.w SME_9IQLQ_8F6-SME_9IQLQ, SME_9IQLQ_8FC-SME_9IQLQ	
00025D30 0000 0000                  		dc.w SME_9IQLQ_90C-SME_9IQLQ, SME_9IQLQ_912-SME_9IQLQ	
00025D34 0000 0000                  		dc.w SME_9IQLQ_91D-SME_9IQLQ, SME_9IQLQ_923-SME_9IQLQ	
00025D38 0000 0000                  		dc.w SME_9IQLQ_92E-SME_9IQLQ, SME_9IQLQ_934-SME_9IQLQ	
00025D3C 0000 0000                  		dc.w SME_9IQLQ_949-SME_9IQLQ, SME_9IQLQ_96D-SME_9IQLQ	
00025D40 0000 0000                  		dc.w SME_9IQLQ_987-SME_9IQLQ, SME_9IQLQ_997-SME_9IQLQ	
00025D44 0000 0000                  		dc.w SME_9IQLQ_9B1-SME_9IQLQ, SME_9IQLQ_9C6-SME_9IQLQ	
00025D48 0000 0000                  		dc.w SME_9IQLQ_9DB-SME_9IQLQ, SME_9IQLQ_9F0-SME_9IQLQ	
00025D4C 0000 0000                  		dc.w SME_9IQLQ_A1E-SME_9IQLQ, SME_9IQLQ_A2E-SME_9IQLQ	
00025D50 0000 0000                  		dc.w SME_9IQLQ_A3E-SME_9IQLQ, SME_9IQLQ_A4E-SME_9IQLQ	
00025D54 0000 0000                  		dc.w SME_9IQLQ_A5E-SME_9IQLQ, SME_9IQLQ_A82-SME_9IQLQ	
00025D58 0000 0000                  		dc.w SME_9IQLQ_A83-SME_9IQLQ, SME_9IQLQ_A84-SME_9IQLQ	
00025D5C 0000 0000                  		dc.w SME_9IQLQ_A94-SME_9IQLQ, SME_9IQLQ_AA4-SME_9IQLQ	
00025D60 0000 0000                  		dc.w SME_9IQLQ_AB4-SME_9IQLQ, SME_9IQLQ_ABF-SME_9IQLQ	
00025D64 0000 0000                  		dc.w SME_9IQLQ_ACF-SME_9IQLQ, SME_9IQLQ_ADF-SME_9IQLQ	
00025D68 0000 0000                  		dc.w SME_9IQLQ_AEF-SME_9IQLQ, SME_9IQLQ_AFF-SME_9IQLQ	
00025D6C 0000 0000                  		dc.w SME_9IQLQ_B14-SME_9IQLQ, SME_9IQLQ_B3D-SME_9IQLQ	
00025D70 0000 0000                  		dc.w SME_9IQLQ_B52-SME_9IQLQ, SME_9IQLQ_B67-SME_9IQLQ	
00025D74 0000 0000                  		dc.w SME_9IQLQ_B81-SME_9IQLQ, SME_9IQLQ_B9B-SME_9IQLQ	
00025D78 0000 0000                  		dc.w SME_9IQLQ_BA6-SME_9IQLQ, SME_9IQLQ_BC0-SME_9IQLQ	
00025D7C 0000 0000                  		dc.w SME_9IQLQ_BD0-SME_9IQLQ, SME_9IQLQ_BEA-SME_9IQLQ	
00025D80 0000 0000                  		dc.w SME_9IQLQ_BF5-SME_9IQLQ, SME_9IQLQ_C05-SME_9IQLQ	
00025D84 0000 0000                  		dc.w SME_9IQLQ_C15-SME_9IQLQ, SME_9IQLQ_C25-SME_9IQLQ	
00025D88 0000 0000                  		dc.w SME_9IQLQ_C30-SME_9IQLQ, SME_9IQLQ_C40-SME_9IQLQ	
00025D8C 0000 0000                  		dc.w SME_9IQLQ_C78-SME_9IQLQ, SME_9IQLQ_C97-SME_9IQLQ	
00025D90 0000 0000                  		dc.w SME_9IQLQ_CA7-SME_9IQLQ, SME_9IQLQ_CCB-SME_9IQLQ	
00025D94 0000 0000                  		dc.w SME_9IQLQ_CD6-SME_9IQLQ, SME_9IQLQ_CEB-SME_9IQLQ	
00025D98 0000 0000                  		dc.w SME_9IQLQ_CFB-SME_9IQLQ, SME_9IQLQ_D0B-SME_9IQLQ	
00025D9C 0000 0000                  		dc.w SME_9IQLQ_D20-SME_9IQLQ, SME_9IQLQ_D26-SME_9IQLQ	
00025DA0 0000 0000                  		dc.w SME_9IQLQ_D2C-SME_9IQLQ, SME_9IQLQ_D32-SME_9IQLQ	
00025DA4 0000 0000                  		dc.w SME_9IQLQ_D38-SME_9IQLQ, SME_9IQLQ_D43-SME_9IQLQ	
00025DA8 0000 0000                  		dc.w SME_9IQLQ_D49-SME_9IQLQ, SME_9IQLQ_D4F-SME_9IQLQ	
00025DAC 0000 0000                  		dc.w SME_9IQLQ_D55-SME_9IQLQ, SME_9IQLQ_D65-SME_9IQLQ	
00025DB0 0000 0000                  		dc.w SME_9IQLQ_D75-SME_9IQLQ, SME_9IQLQ_D85-SME_9IQLQ	
00025DB4 0000 0000                  		dc.w SME_9IQLQ_D95-SME_9IQLQ, SME_9IQLQ_DA5-SME_9IQLQ	
00025DB8 0000 0000                  		dc.w SME_9IQLQ_DCE-SME_9IQLQ, SME_9IQLQ_DDE-SME_9IQLQ	
00025DBC 0000 0000                  		dc.w SME_9IQLQ_DEE-SME_9IQLQ, SME_9IQLQ_E12-SME_9IQLQ	
00025DC0 0000 0000                  		dc.w SME_9IQLQ_E22-SME_9IQLQ, SME_9IQLQ_E28-SME_9IQLQ	
00025DC4 0000 0000                  		dc.w SME_9IQLQ_E2E-SME_9IQLQ, SME_9IQLQ_E52-SME_9IQLQ	
00025DC8 0000 0000                  		dc.w SME_9IQLQ_E62-SME_9IQLQ, SME_9IQLQ_E68-SME_9IQLQ	
00025DCC 0000 0000                  		dc.w SME_9IQLQ_E73-SME_9IQLQ, SME_9IQLQ_E7E-SME_9IQLQ	
00025DD0 0000 0000                  		dc.w SME_9IQLQ_E98-SME_9IQLQ, SME_9IQLQ_EB7-SME_9IQLQ	
00025DD4 0000 0000                  		dc.w SME_9IQLQ_ECC-SME_9IQLQ, SME_9IQLQ_EDC-SME_9IQLQ	
00025DD8 0000 0000                  		dc.w SME_9IQLQ_EF6-SME_9IQLQ, SME_9IQLQ_F0B-SME_9IQLQ	
00025DDC 0000 0000                  		dc.w SME_9IQLQ_F1B-SME_9IQLQ, SME_9IQLQ_F35-SME_9IQLQ	
00025DE0 0000 0000                  		dc.w SME_9IQLQ_F45-SME_9IQLQ, SME_9IQLQ_F4B-SME_9IQLQ	
00025DE4 0000 0000                  		dc.w SME_9IQLQ_F51-SME_9IQLQ, SME_9IQLQ_F61-SME_9IQLQ	
00025DE8 0000 0000                  		dc.w SME_9IQLQ_F71-SME_9IQLQ, SME_9IQLQ_F77-SME_9IQLQ	
00025DEC 0000 0000                  		dc.w SME_9IQLQ_F87-SME_9IQLQ, SME_9IQLQ_F92-SME_9IQLQ	
00025DF0 0000 0000                  		dc.w SME_9IQLQ_FB1-SME_9IQLQ, SME_9IQLQ_FD0-SME_9IQLQ	
00025DF4 0000 0000                  		dc.w SME_9IQLQ_FE5-SME_9IQLQ, SME_9IQLQ_FF5-SME_9IQLQ	
00025DF8 0000 0000                  		dc.w SME_9IQLQ_100F-SME_9IQLQ, SME_9IQLQ_1024-SME_9IQLQ	
00025DFC 0000 0000                  		dc.w SME_9IQLQ_1034-SME_9IQLQ, SME_9IQLQ_104E-SME_9IQLQ	
00025E00 0000 0000                  		dc.w SME_9IQLQ_105E-SME_9IQLQ, SME_9IQLQ_1078-SME_9IQLQ	
00025E04 0000 0000                  		dc.w SME_9IQLQ_108D-SME_9IQLQ, SME_9IQLQ_10A2-SME_9IQLQ	
00025E08 0000 0000                  		dc.w SME_9IQLQ_10AD-SME_9IQLQ, SME_9IQLQ_10B8-SME_9IQLQ	
00025E0C 0000 0000                  		dc.w SME_9IQLQ_10C3-SME_9IQLQ, SME_9IQLQ_10CE-SME_9IQLQ	
00025E10 0000 0000                  		dc.w SME_9IQLQ_10D9-SME_9IQLQ, SME_9IQLQ_10E9-SME_9IQLQ	
00025E14 0000 0000                  		dc.w SME_9IQLQ_10F9-SME_9IQLQ, SME_9IQLQ_111D-SME_9IQLQ	
00025E18 0000 0000                  		dc.w SME_9IQLQ_1128-SME_9IQLQ, SME_9IQLQ_1133-SME_9IQLQ	
00025E1C 0000 0000                  		dc.w SME_9IQLQ_113E-SME_9IQLQ, SME_9IQLQ_1149-SME_9IQLQ	
00025E20 0000 0000                  		dc.w SME_9IQLQ_1159-SME_9IQLQ, SME_9IQLQ_116E-SME_9IQLQ	
00025E24 0000 0000                  		dc.w SME_9IQLQ_116F-SME_9IQLQ, SME_9IQLQ_1170-SME_9IQLQ	
00025E28 0000 0000                  		dc.w SME_9IQLQ_1180-SME_9IQLQ, SME_9IQLQ_1190-SME_9IQLQ	
00025E2C 0000 0000                  		dc.w SME_9IQLQ_1191-SME_9IQLQ, SME_9IQLQ_1192-SME_9IQLQ	
00025E30 0000 0000                  		dc.w SME_9IQLQ_119D-SME_9IQLQ, SME_9IQLQ_11A3-SME_9IQLQ	
00025E34 0000 0000                  		dc.w SME_9IQLQ_11AE-SME_9IQLQ, SME_9IQLQ_11B9-SME_9IQLQ	
00025E38 0000 0000                  		dc.w SME_9IQLQ_11C4-SME_9IQLQ, SME_9IQLQ_11CF-SME_9IQLQ	
00025E3C 0000 0000                  		dc.w SME_9IQLQ_11E9-SME_9IQLQ, SME_9IQLQ_1203-SME_9IQLQ	
00025E40 0000 0000                  		dc.w SME_9IQLQ_120E-SME_9IQLQ, SME_9IQLQ_1219-SME_9IQLQ	
00025E44 0000 0000                  		dc.w SME_9IQLQ_1224-SME_9IQLQ, SME_9IQLQ_122F-SME_9IQLQ	
00025E48 0000 0000                  		dc.w SME_9IQLQ_123A-SME_9IQLQ, SME_9IQLQ_1245-SME_9IQLQ	
00025E4C 0000 0000                  		dc.w SME_9IQLQ_1250-SME_9IQLQ, SME_9IQLQ_125B-SME_9IQLQ	
00025E50 0000                       		dc.w SME_9IQLQ_1266-SME_9IQLQ	
00025E52 00                         SME_9IQLQ_1EE:	dc.b 0	
00025E53 04                         SME_9IQLQ_1EF:	dc.b 4	
00025E54 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00025E59 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
00025E5E 0408 000B F0               		dc.b 4, 8, 0, $B, $F0	
00025E63 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00025E68 09                         SME_9IQLQ_204:	dc.b 9	
00025E69 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00025E6E 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
00025E73 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00025E78 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
00025E7D FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
00025E82 F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00025E87 FC00 000D F8               		dc.b $FC, 0, 0, $D, $F8	
00025E8C FC00 000E 08               		dc.b $FC, 0, 0, $E, 8	
00025E91 F404 000F F8               		dc.b $F4, 4, 0, $F, $F8	
00025E96 0A                         SME_9IQLQ_232:	dc.b $A	
00025E97 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00025E9C 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
00025EA1 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00025EA6 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
00025EAB FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
00025EB0 F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00025EB5 FC00 000D 08               		dc.b $FC, 0, 0, $D, 8	
00025EBA F400 000E F8               		dc.b $F4, 0, 0, $E, $F8	
00025EBF F400 000F 00               		dc.b $F4, 0, 0, $F, 0	
00025EC4 FC00 0010 F8               		dc.b $FC, 0, 0, $10, $F8	
00025EC9 04                         SME_9IQLQ_265:	dc.b 4	
00025ECA EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00025ECF F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00025ED4 FC00 100D 08               		dc.b $FC, 0, $10, $D, 8	
00025ED9 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00025EDE 03                         SME_9IQLQ_27A:	dc.b 3	
00025EDF EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025EE4 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025EE9 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00025EEE 03                         SME_9IQLQ_28A:	dc.b 3	
00025EEF EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025EF4 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025EF9 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00025EFE 04                         SME_9IQLQ_29A:	dc.b 4	
00025EFF EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025F04 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025F09 0C04 000C 00               		dc.b $C, 4, 0, $C, 0	
00025F0E 0C00 000E F8               		dc.b $C, 0, 0, $E, $F8	
00025F13 02                         SME_9IQLQ_2AF:	dc.b 2	
00025F14 F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00025F19 0401 000C 08               		dc.b 4, 1, 0, $C, 8	
00025F1E 03                         SME_9IQLQ_2BA:	dc.b 3	
00025F1F FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025F24 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025F29 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
00025F2E 03                         SME_9IQLQ_2CA:	dc.b 3	
00025F2F FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025F34 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025F39 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
00025F3E 03                         SME_9IQLQ_2DA:	dc.b 3	
00025F3F F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00025F44 EC08 000C F0               		dc.b $EC, 8, 0, $C, $F0	
00025F49 FC02 000F 08               		dc.b $FC, 2, 0, $F, 8	
00025F4E 04                         SME_9IQLQ_2EA:	dc.b 4	
00025F4F 0408 0000 F0               		dc.b 4, 8, 0, 0, $F0	
00025F54 0C08 0003 F8               		dc.b $C, 8, 0, 3, $F8	
00025F59 EC0A 0006 F0               		dc.b $EC, $A, 0, 6, $F0	
00025F5E F400 000F 08               		dc.b $F4, 0, 0, $F, 8	
00025F63 03                         SME_9IQLQ_2FF:	dc.b 3	
00025F64 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0	
00025F69 0408 0009 F0               		dc.b 4, 8, 0, 9, $F0	
00025F6E 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00025F73 07                         SME_9IQLQ_30F:	dc.b 7	
00025F74 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
00025F79 FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
00025F7E 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
00025F83 F300 000E F5               		dc.b $F3, 0, 0, $E, $F5	
00025F88 EB05 000F FD               		dc.b $EB, 5, 0, $F, $FD	
00025F8D EB00 0013 F5               		dc.b $EB, 0, 0, $13, $F5	
00025F92 F300 0014 ED               		dc.b $F3, 0, 0, $14, $ED	
00025F97 05                         SME_9IQLQ_333:	dc.b 5	
00025F98 FC0E 0000 F5               		dc.b $FC, $E, 0, 0, $F5	
00025F9D F400 000C F5               		dc.b $F4, 0, 0, $C, $F5	
00025FA2 EC05 000D FD               		dc.b $EC, 5, 0, $D, $FD	
00025FA7 EC00 0011 F5               		dc.b $EC, 0, 0, $11, $F5	
00025FAC F400 0012 ED               		dc.b $F4, 0, 0, $12, $ED	
00025FB1 02                         SME_9IQLQ_34D:	dc.b 2	
00025FB2 FD0A 0000 F5               		dc.b $FD, $A, 0, 0, $F5	
00025FB7 ED09 0009 F5               		dc.b $ED, 9, 0, 9, $F5	
00025FBC 03                         SME_9IQLQ_358:	dc.b 3	
00025FBD F30F 0000 F0               		dc.b $F3, $F, 0, 0, $F0	
00025FC2 EB0C 0010 F0               		dc.b $EB, $C, 0, $10, $F0	
00025FC7 0500 0014 10               		dc.b 5, 0, 0, $14, $10	
00025FCC 04                         SME_9IQLQ_368:	dc.b 4	
00025FCD EB09 0000 F5               		dc.b $EB, 9, 0, 0, $F5	
00025FD2 FB09 0006 ED               		dc.b $FB, 9, 0, 6, $ED	
00025FD7 FB06 000C 05               		dc.b $FB, 6, 0, $C, 5	
00025FDC 0B04 0012 ED               		dc.b $B, 4, 0, $12, $ED	
00025FE1 02                         SME_9IQLQ_37D:	dc.b 2	
00025FE2 EC09 0000 F6               		dc.b $EC, 9, 0, 0, $F6	
00025FE7 FC0E 0006 EE               		dc.b $FC, $E, 0, 6, $EE	
00025FEC 03                         SME_9IQLQ_388:	dc.b 3	
00025FED ED09 0000 F6               		dc.b $ED, 9, 0, 0, $F6	
00025FF2 FD06 0006 F6               		dc.b $FD, 6, 0, 6, $F6	
00025FF7 FD00 000C 06               		dc.b $FD, 0, 0, $C, 6	
00025FFC 05                         SME_9IQLQ_398:	dc.b 5	
00025FFD FD0C 0000 F6               		dc.b $FD, $C, 0, 0, $F6	
00026002 0509 0004 F6               		dc.b 5, 9, 0, 4, $F6	
00026007 F500 000A EE               		dc.b $F5, 0, 0, $A, $EE	
0002600C ED01 000B F6               		dc.b $ED, 1, 0, $B, $F6	
00026011 ED05 000D FE               		dc.b $ED, 5, 0, $D, $FE	
00026016 05                         SME_9IQLQ_3B2:	dc.b 5	
00026017 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
0002601C EC06 0006 04               		dc.b $EC, 6, 0, 6, 4	
00026021 FC08 000C EC               		dc.b $FC, 8, 0, $C, $EC	
00026026 0409 000F F4               		dc.b 4, 9, 0, $F, $F4	
0002602B 1400 0015 FC               		dc.b $14, 0, 0, $15, $FC	
00026030 06                         SME_9IQLQ_3CC:	dc.b 6	
00026031 ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
00026036 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
0002603B FD0C 0008 ED               		dc.b $FD, $C, 0, 8, $ED	
00026040 0509 000C F5               		dc.b 5, 9, 0, $C, $F5	
00026045 FD05 0012 0D               		dc.b $FD, 5, 0, $12, $D	
0002604A F500 0016 15               		dc.b $F5, 0, 0, $16, $15	
0002604F 04                         SME_9IQLQ_3EB:	dc.b 4	
00026050 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00026055 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
0002605A FE0D 0008 F6               		dc.b $FE, $D, 0, 8, $F6	
0002605F 0E08 0010 FE               		dc.b $E, 8, 0, $10, $FE	
00026064 03                         SME_9IQLQ_400:	dc.b 3	
00026065 ED0F 0000 EF               		dc.b $ED, $F, 0, 0, $EF	
0002606A ED03 0010 0F               		dc.b $ED, 3, 0, $10, $F	
0002606F 0D0C 0014 F7               		dc.b $D, $C, 0, $14, $F7	
00026074 05                         SME_9IQLQ_410:	dc.b 5	
00026075 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
0002607A EC05 0006 04               		dc.b $EC, 5, 0, 6, 4	
0002607F FC0D 000A F4               		dc.b $FC, $D, 0, $A, $F4	
00026084 0C08 0012 F4               		dc.b $C, 8, 0, $12, $F4	
00026089 1404 0015 FC               		dc.b $14, 4, 0, $15, $FC	
0002608E 04                         SME_9IQLQ_42A:	dc.b 4	
0002608F EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
00026094 EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
00026099 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
0002609E 0C08 0010 FD               		dc.b $C, 8, 0, $10, $FD	
000260A3 03                         SME_9IQLQ_43F:	dc.b 3	
000260A4 ED0F 0000 ED               		dc.b $ED, $F, 0, 0, $ED	
000260A9 ED03 0010 0D               		dc.b $ED, 3, 0, $10, $D	
000260AE 0D0C 0014 F5               		dc.b $D, $C, 0, $14, $F5	
000260B3 05                         SME_9IQLQ_44F:	dc.b 5	
000260B4 ED09 0000 EE               		dc.b $ED, 9, 0, 0, $EE	
000260B9 ED01 0006 06               		dc.b $ED, 1, 0, 6, 6	
000260BE FD00 0008 EE               		dc.b $FD, 0, 0, 8, $EE	
000260C3 FD0D 0009 F6               		dc.b $FD, $D, 0, 9, $F6	
000260C8 0D08 0011 FE               		dc.b $D, 8, 0, $11, $FE	
000260CD 04                         SME_9IQLQ_469:	dc.b 4	
000260CE F307 0000 ED               		dc.b $F3, 7, 0, 0, $ED	
000260D3 EB09 0008 FD               		dc.b $EB, 9, 0, 8, $FD	
000260D8 FB04 000E FD               		dc.b $FB, 4, 0, $E, $FD	
000260DD 0309 0010 FD               		dc.b 3, 9, 0, $10, $FD	
000260E2 02                         SME_9IQLQ_47E:	dc.b 2	
000260E3 F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
000260E8 EC0B 0008 FD               		dc.b $EC, $B, 0, 8, $FD	
000260ED 02                         SME_9IQLQ_489:	dc.b 2	
000260EE F40A 0000 FD               		dc.b $F4, $A, 0, 0, $FD	
000260F3 F406 0009 ED               		dc.b $F4, 6, 0, 9, $ED	
000260F8 05                         SME_9IQLQ_494:	dc.b 5	
000260F9 E900 0000 04               		dc.b $E9, 0, 0, 0, 4	
000260FE F10C 0001 F4               		dc.b $F1, $C, 0, 1, $F4	
00026103 F100 0005 EC               		dc.b $F1, 0, 0, 5, $EC	
00026108 F90E 0006 EC               		dc.b $F9, $E, 0, 6, $EC	
0002610D F902 0012 0C               		dc.b $F9, 2, 0, $12, $C	
00026112 04                         SME_9IQLQ_4AE:	dc.b 4	
00026113 F306 0000 EC               		dc.b $F3, 6, 0, 0, $EC	
00026118 EB09 0006 FC               		dc.b $EB, 9, 0, 6, $FC	
0002611D FB04 000C FC               		dc.b $FB, 4, 0, $C, $FC	
00026122 0309 000E FC               		dc.b 3, 9, 0, $E, $FC	
00026127 02                         SME_9IQLQ_4C3:	dc.b 2	
00026128 F306 0000 ED               		dc.b $F3, 6, 0, 0, $ED	
0002612D F30B 0006 FD               		dc.b $F3, $B, 0, 6, $FD	
00026132 03                         SME_9IQLQ_4CE:	dc.b 3	
00026133 F408 0000 ED               		dc.b $F4, 8, 0, 0, $ED	
00026138 FC0D 0003 ED               		dc.b $FC, $D, 0, 3, $ED	
0002613D FC01 000B 0D               		dc.b $FC, 1, 0, $B, $D	
00026142 03                         SME_9IQLQ_4DE:	dc.b 3	
00026143 F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
00026148 EC00 0008 FD               		dc.b $EC, 0, 0, 8, $FD	
0002614D F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD	
00026152 06                         SME_9IQLQ_4EE:	dc.b 6	
00026153 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00026158 EC04 0006 F6               		dc.b $EC, 4, 0, 6, $F6	
0002615D F404 0008 EE               		dc.b $F4, 4, 0, 8, $EE	
00026162 F40A 000A FE               		dc.b $F4, $A, 0, $A, $FE	
00026167 0C00 0013 FE               		dc.b $C, 0, 0, $13, $FE	
0002616C FC00 0014 16               		dc.b $FC, 0, 0, $14, $16	
00026171 06                         SME_9IQLQ_50D:	dc.b 6	
00026172 FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00026177 E408 0006 F7               		dc.b $E4, 8, 0, 6, $F7	
0002617C EC04 0009 FF               		dc.b $EC, 4, 0, 9, $FF	
00026181 F404 000B EF               		dc.b $F4, 4, 0, $B, $EF	
00026186 F40A 000D FF               		dc.b $F4, $A, 0, $D, $FF	
0002618B 0C00 0016 FF               		dc.b $C, 0, 0, $16, $FF	
00026190 04                         SME_9IQLQ_52C:	dc.b 4	
00026191 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00026196 F304 0006 EF               		dc.b $F3, 4, 0, 6, $EF	
0002619B EB0A 0008 FF               		dc.b $EB, $A, 0, 8, $FF	
000261A0 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
000261A5 03                         SME_9IQLQ_541:	dc.b 3	
000261A6 E90F 0000 F5               		dc.b $E9, $F, 0, 0, $F5	
000261AB F102 0010 ED               		dc.b $F1, 2, 0, $10, $ED	
000261B0 0908 0013 ED               		dc.b 9, 8, 0, $13, $ED	
000261B5 05                         SME_9IQLQ_551:	dc.b 5	
000261B6 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
000261BB EC08 0006 F6               		dc.b $EC, 8, 0, 6, $F6	
000261C0 F404 0009 EE               		dc.b $F4, 4, 0, 9, $EE	
000261C5 F40D 000B FE               		dc.b $F4, $D, 0, $B, $FE	
000261CA 0408 0013 FE               		dc.b 4, 8, 0, $13, $FE	
000261CF 04                         SME_9IQLQ_56B:	dc.b 4	
000261D0 FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
000261D5 F404 0006 EF               		dc.b $F4, 4, 0, 6, $EF	
000261DA EC0A 0008 FF               		dc.b $EC, $A, 0, 8, $FF	
000261DF 0404 0011 FF               		dc.b 4, 4, 0, $11, $FF	
000261E4 03                         SME_9IQLQ_580:	dc.b 3	
000261E5 EB0F 0000 F0               		dc.b $EB, $F, 0, 0, $F0	
000261EA 0B08 0010 F0               		dc.b $B, 8, 0, $10, $F0	
000261EF EB01 0013 0F               		dc.b $EB, 1, 0, $13, $F	
000261F4 05                         SME_9IQLQ_590:	dc.b 5	
000261F5 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
000261FA EB0A 0006 FF               		dc.b $EB, $A, 0, 6, $FF	
000261FF F304 000F EF               		dc.b $F3, 4, 0, $F, $EF	
00026204 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
00026209 0B00 0013 FF               		dc.b $B, 0, 0, $13, $FF	
0002620E 02                         SME_9IQLQ_5AA:	dc.b 2	
0002620F EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00026214 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00026219 02                         SME_9IQLQ_5B5:	dc.b 2	
0002621A FE0E 0000 EC               		dc.b $FE, $E, 0, 0, $EC	
0002621F EE09 000C F4               		dc.b $EE, 9, 0, $C, $F4	
00026224 02                         SME_9IQLQ_5C0:	dc.b 2	
00026225 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002622A FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002622F 02                         SME_9IQLQ_5CB:	dc.b 2	
00026230 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00026235 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002623A 02                         SME_9IQLQ_5D6:	dc.b 2	
0002623B EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00026240 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00026245 02                         SME_9IQLQ_5E1:	dc.b 2	
00026246 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002624B FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00026250 02                         SME_9IQLQ_5EC:	dc.b 2	
00026251 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00026256 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002625B 02                         SME_9IQLQ_5F7:	dc.b 2	
0002625C EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00026261 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00026266 04                         SME_9IQLQ_602:	dc.b 4	
00026267 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
0002626C EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00026271 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00026276 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
0002627B 03                         SME_9IQLQ_617:	dc.b 3	
0002627C F60F 0000 F6               		dc.b $F6, $F, 0, 0, $F6	
00026281 EE02 0010 EE               		dc.b $EE, 2, 0, $10, $EE	
00026286 EE08 0013 F6               		dc.b $EE, 8, 0, $13, $F6	
0002628B 03                         SME_9IQLQ_627:	dc.b 3	
0002628C EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00026291 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00026296 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
0002629B 03                         SME_9IQLQ_637:	dc.b 3	
0002629C FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000262A1 EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000262A6 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000262AB 04                         SME_9IQLQ_647:	dc.b 4	
000262AC EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000262B1 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000262B6 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000262BB FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000262C0 03                         SME_9IQLQ_65C:	dc.b 3	
000262C1 FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000262C6 EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000262CB FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000262D0 03                         SME_9IQLQ_66C:	dc.b 3	
000262D1 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000262D6 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000262DB FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000262E0 03                         SME_9IQLQ_67C:	dc.b 3	
000262E1 EE0D 0000 EE               		dc.b $EE, $D, 0, 0, $EE	
000262E6 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000262EB FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000262F0 02                         SME_9IQLQ_68C:	dc.b 2	
000262F1 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000262F6 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000262FB 02                         SME_9IQLQ_697:	dc.b 2	
000262FC F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00026301 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00026306 02                         SME_9IQLQ_6A2:	dc.b 2	
00026307 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002630C F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00026311 02                         SME_9IQLQ_6AD:	dc.b 2	
00026312 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00026317 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002631C 02                         SME_9IQLQ_6B8:	dc.b 2	
0002631D F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00026322 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00026327 02                         SME_9IQLQ_6C3:	dc.b 2	
00026328 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002632D F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00026332 02                         SME_9IQLQ_6CE:	dc.b 2	
00026333 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00026338 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002633D 02                         SME_9IQLQ_6D9:	dc.b 2	
0002633E F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00026343 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00026348 04                         SME_9IQLQ_6E4:	dc.b 4	
00026349 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002634E F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
00026353 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00026358 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
0002635D 03                         SME_9IQLQ_6F9:	dc.b 3	
0002635E EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
00026363 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
00026368 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
0002636D 02                         SME_9IQLQ_709:	dc.b 2	
0002636E F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
00026373 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00026378 03                         SME_9IQLQ_714:	dc.b 3	
00026379 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002637E 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
00026383 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00026388 04                         SME_9IQLQ_724:	dc.b 4	
00026389 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002638E F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
00026393 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00026398 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
0002639D 03                         SME_9IQLQ_739:	dc.b 3	
0002639E EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000263A3 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000263A8 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000263AD 02                         SME_9IQLQ_749:	dc.b 2	
000263AE F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
000263B3 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
000263B8 03                         SME_9IQLQ_754:	dc.b 3	
000263B9 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000263BE 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000263C3 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000263C8 03                         SME_9IQLQ_764:	dc.b 3	
000263C9 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000263CE 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000263D3 F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000263D8 03                         SME_9IQLQ_774:	dc.b 3	
000263D9 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000263DE 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000263E3 F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000263E8 09                         SME_9IQLQ_784:	dc.b 9	
000263E9 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
000263EE F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
000263F3 1000 0009 F3               		dc.b $10, 0, 0, 9, $F3	
000263F8 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
000263FD 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
00026402 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00026407 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
0002640C F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
00026411 F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00026416 09                         SME_9IQLQ_7B2:	dc.b 9	
00026417 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
0002641C F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
00026421 1000 0009 F0               		dc.b $10, 0, 0, 9, $F0	
00026426 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
0002642B 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
00026430 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00026435 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
0002643A F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
0002643F F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00026444 03                         SME_9IQLQ_7E0:	dc.b 3	
00026445 F20F 0000 F5               		dc.b $F2, $F, 0, 0, $F5	
0002644A 0201 0010 ED               		dc.b 2, 1, 0, $10, $ED	
0002644F EA0C 0012 F5               		dc.b $EA, $C, 0, $12, $F5	
00026454 03                         SME_9IQLQ_7F0:	dc.b 3	
00026455 F40B 0000 EF               		dc.b $F4, $B, 0, 0, $EF	
0002645A EC07 000C 07               		dc.b $EC, 7, 0, $C, 7	
0002645F EC04 0014 F7               		dc.b $EC, 4, 0, $14, $F7	
00026464 03                         SME_9IQLQ_800:	dc.b 3	
00026465 F30F 0000 F4               		dc.b $F3, $F, 0, 0, $F4	
0002646A EB0C 0010 F4               		dc.b $EB, $C, 0, $10, $F4	
0002646F 0300 0014 EC               		dc.b 3, 0, 0, $14, $EC	
00026474 05                         SME_9IQLQ_810:	dc.b 5	
00026475 F10E 0000 F7               		dc.b $F1, $E, 0, 0, $F7	
0002647A 090C 000C EF               		dc.b 9, $C, 0, $C, $EF	
0002647F F901 0010 EF               		dc.b $F9, 1, 0, $10, $EF	
00026484 1104 0012 F7               		dc.b $11, 4, 0, $12, $F7	
00026489 E908 0014 F7               		dc.b $E9, 8, 0, $14, $F7	
0002648E 03                         SME_9IQLQ_82A:	dc.b 3	
0002648F ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
00026494 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
00026499 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
0002649E 03                         SME_9IQLQ_83A:	dc.b 3	
0002649F ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
000264A4 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
000264A9 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
000264AE 05                         SME_9IQLQ_84A:	dc.b 5	
000264AF 0509 0000 F6               		dc.b 5, 9, 0, 0, $F6	
000264B4 ED02 0006 0E               		dc.b $ED, 2, 0, 6, $E	
000264B9 0500 0009 0E               		dc.b 5, 0, 0, 9, $E	
000264BE ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
000264C3 ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000264C8 05                         SME_9IQLQ_864:	dc.b 5	
000264C9 ED02 0000 0E               		dc.b $ED, 2, 0, 0, $E	
000264CE 0509 0003 F6               		dc.b 5, 9, 0, 3, $F6	
000264D3 0800 0009 0E               		dc.b 8, 0, 0, 9, $E	
000264D8 ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
000264DD ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000264E2 04                         SME_9IQLQ_87E:	dc.b 4	
000264E3 F00E 0000 E9               		dc.b $F0, $E, 0, 0, $E9	
000264E8 0808 000C F9               		dc.b 8, 8, 0, $C, $F9	
000264ED E808 000F F1               		dc.b $E8, 8, 0, $F, $F1	
000264F2 F002 0012 09               		dc.b $F0, 2, 0, $12, 9	
000264F7 04                         SME_9IQLQ_893:	dc.b 4	
000264F8 E60B 0000 F3               		dc.b $E6, $B, 0, 0, $F3	
000264FD 0608 000C F3               		dc.b 6, 8, 0, $C, $F3	
00026502 F602 000F 0B               		dc.b $F6, 2, 0, $F, $B	
00026507 EE02 0012 EB               		dc.b $EE, 2, 0, $12, $EB	
0002650C 04                         SME_9IQLQ_8A8:	dc.b 4	
0002650D EA0F 0000 EA               		dc.b $EA, $F, 0, 0, $EA	
00026512 F202 0010 0A               		dc.b $F2, 2, 0, $10, $A	
00026517 0A00 0013 02               		dc.b $A, 0, 0, $13, 2	
0002651C 0A00 0014 0A               		dc.b $A, 0, 0, $14, $A	
00026521 04                         SME_9IQLQ_8BD:	dc.b 4	
00026522 E80F 0000 ED               		dc.b $E8, $F, 0, 0, $ED	
00026527 0808 0010 F5               		dc.b 8, 8, 0, $10, $F5	
0002652C F801 0013 0D               		dc.b $F8, 1, 0, $13, $D	
00026531 F001 0015 E5               		dc.b $F0, 1, 0, $15, $E5	
00026536 01                         SME_9IQLQ_8D2:	dc.b 1	
00026537 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002653C 01                         SME_9IQLQ_8D8:	dc.b 1	
0002653D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026542 01                         SME_9IQLQ_8DE:	dc.b 1	
00026543 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026548 01                         SME_9IQLQ_8E4:	dc.b 1	
00026549 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002654E 01                         SME_9IQLQ_8EA:	dc.b 1	
0002654F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026554 01                         SME_9IQLQ_8F0:	dc.b 1	
00026555 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002655A 01                         SME_9IQLQ_8F6:	dc.b 1	
0002655B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026560 03                         SME_9IQLQ_8FC:	dc.b 3	
00026561 F00A 0000 F0               		dc.b $F0, $A, 0, 0, $F0	
00026566 080C 0009 F0               		dc.b 8, $C, 0, 9, $F0	
0002656B F002 000D 08               		dc.b $F0, 2, 0, $D, 8	
00026570 01                         SME_9IQLQ_90C:	dc.b 1	
00026571 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026576 02                         SME_9IQLQ_912:	dc.b 2	
00026577 F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC	
0002657C F402 000C 0C               		dc.b $F4, 2, 0, $C, $C	
00026581 01                         SME_9IQLQ_91D:	dc.b 1	
00026582 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026587 02                         SME_9IQLQ_923:	dc.b 2	
00026588 EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4	
0002658D 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4	
00026592 01                         SME_9IQLQ_92E:	dc.b 1	
00026593 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026598 04                         SME_9IQLQ_934:	dc.b 4	
00026599 ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
0002659E FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0	
000265A3 F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
000265A8 F500 0014 08               		dc.b $F5, 0, 0, $14, 8	
000265AD 07                         SME_9IQLQ_949:	dc.b 7	
000265AE ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
000265B3 FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0	
000265B8 0D04 000E 00               		dc.b $D, 4, 0, $E, 0	
000265BD F500 0010 E8               		dc.b $F5, 0, 0, $10, $E8	
000265C2 F500 0011 08               		dc.b $F5, 0, 0, $11, 8	
000265C7 0D00 0012 F8               		dc.b $D, 0, 0, $12, $F8	
000265CC FD00 0013 E8               		dc.b $FD, 0, 0, $13, $E8	
000265D1 05                         SME_9IQLQ_96D:	dc.b 5	
000265D2 F502 0000 F0               		dc.b $F5, 2, 0, 0, $F0	
000265D7 F50B 0003 F8               		dc.b $F5, $B, 0, 3, $F8	
000265DC ED08 000F F0               		dc.b $ED, 8, 0, $F, $F0	
000265E1 F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
000265E6 ED00 0014 08               		dc.b $ED, 0, 0, $14, 8	
000265EB 03                         SME_9IQLQ_987:	dc.b 3	
000265EC F50B 0000 F8               		dc.b $F5, $B, 0, 0, $F8	
000265F1 ED03 000C F0               		dc.b $ED, 3, 0, $C, $F0	
000265F6 ED04 0010 F8               		dc.b $ED, 4, 0, $10, $F8	
000265FB 05                         SME_9IQLQ_997:	dc.b 5	
000265FC F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4	
00026601 E80C 000C F4               		dc.b $E8, $C, 0, $C, $F4	
00026606 1004 0010 F4               		dc.b $10, 4, 0, $10, $F4	
0002660B 0000 0012 EC               		dc.b 0, 0, 0, $12, $EC	
00026610 F000 0013 0C               		dc.b $F0, 0, 0, $13, $C	
00026615 04                         SME_9IQLQ_9B1:	dc.b 4	
00026616 F402 0000 F8               		dc.b $F4, 2, 0, 0, $F8	
0002661B F402 0003 00               		dc.b $F4, 2, 0, 3, 0	
00026620 F402 0006 08               		dc.b $F4, 2, 0, 6, 8	
00026625 0C08 0009 F8               		dc.b $C, 8, 0, 9, $F8	
0002662A 04                         SME_9IQLQ_9C6:	dc.b 4	
0002662B F404 0000 03               		dc.b $F4, 4, 0, 0, 3	
00026630 FC0D 0002 F8               		dc.b $FC, $D, 0, 2, $F8	
00026635 0C08 000A F8               		dc.b $C, 8, 0, $A, $F8	
0002663A 0C00 000D 10               		dc.b $C, 0, 0, $D, $10	
0002663F 04                         SME_9IQLQ_9DB:	dc.b 4	
00026640 EC08 0800 E8               		dc.b $EC, 8, 8, 0, $E8	
00026645 F402 0803 00               		dc.b $F4, 2, 8, 3, 0	
0002664A F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0	
0002664F EC00 0016 00               		dc.b $EC, 0, 0, $16, 0	
00026654 09                         SME_9IQLQ_9F0:	dc.b 9	
00026655 F402 0000 00               		dc.b $F4, 2, 0, 0, 0	
0002665A EC0C 0003 E8               		dc.b $EC, $C, 0, 3, $E8	
0002665F F407 0007 E0               		dc.b $F4, 7, 0, 7, $E0	
00026664 0C00 080F F8               		dc.b $C, 0, 8, $F, $F8	
00026669 F400 0010 F0               		dc.b $F4, 0, 0, $10, $F0	
0002666E F402 0011 F8               		dc.b $F4, 2, 0, $11, $F8	
00026673 0400 0014 F0               		dc.b 4, 0, 0, $14, $F0	
00026678 0C00 0015 F0               		dc.b $C, 0, 0, $15, $F0	
0002667D FC00 0016 F0               		dc.b $FC, 0, 0, $16, $F0	
00026682 03                         SME_9IQLQ_A1E:	dc.b 3	
00026683 EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8	
00026688 040D 080C E0               		dc.b 4, $D, 8, $C, $E0	
0002668D 0C00 1814 00               		dc.b $C, 0, $18, $14, 0	
00026692 03                         SME_9IQLQ_A2E:	dc.b 3	
00026693 F40F 0000 E8               		dc.b $F4, $F, 0, 0, $E8	
00026698 0401 0010 E0               		dc.b 4, 1, 0, $10, $E0	
0002669D EC0C 0012 E8               		dc.b $EC, $C, 0, $12, $E8	
000266A2 03                         SME_9IQLQ_A3E:	dc.b 3	
000266A3 F30F 0000 EC               		dc.b $F3, $F, 0, 0, $EC	
000266A8 EB0C 0010 EC               		dc.b $EB, $C, 0, $10, $EC	
000266AD F303 0014 0C               		dc.b $F3, 3, 0, $14, $C	
000266B2 03                         SME_9IQLQ_A4E:	dc.b 3	
000266B3 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
000266B8 0808 0010 08               		dc.b 8, 8, 0, $10, 8	
000266BD 0000 0013 18               		dc.b 0, 0, 0, $13, $18	
000266C2 07                         SME_9IQLQ_A5E:	dc.b 7	
000266C3 E802 0000 F8               		dc.b $E8, 2, 0, 0, $F8	
000266C8 E802 0003 00               		dc.b $E8, 2, 0, 3, 0	
000266CD E802 0006 08               		dc.b $E8, 2, 0, 6, 8	
000266D2 E802 0009 10               		dc.b $E8, 2, 0, 9, $10	
000266D7 000C 000C F8               		dc.b 0, $C, 0, $C, $F8	
000266DC 0001 0010 18               		dc.b 0, 1, 0, $10, $18	
000266E1 0804 0012 08               		dc.b 8, 4, 0, $12, 8	
000266E6 00                         SME_9IQLQ_A82:	dc.b 0	
000266E7 00                         SME_9IQLQ_A83:	dc.b 0	
000266E8 03                         SME_9IQLQ_A84:	dc.b 3	
000266E9 F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC	
000266EE FC00 0808 F4               		dc.b $FC, 0, 8, 8, $F4	
000266F3 040C 0809 F4               		dc.b 4, $C, 8, 9, $F4	
000266F8 03                         SME_9IQLQ_A94:	dc.b 3	
000266F9 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
000266FE FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00026703 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00026708 03                         SME_9IQLQ_AA4:	dc.b 3	
00026709 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
0002670E 040C 0008 F4               		dc.b 4, $C, 0, 8, $F4	
00026713 FC00 000C F4               		dc.b $FC, 0, 0, $C, $F4	
00026718 02                         SME_9IQLQ_AB4:	dc.b 2	
00026719 F40A 0000 F0               		dc.b $F4, $A, 0, 0, $F0	
0002671E F40A 0800 08               		dc.b $F4, $A, 8, 0, 8	
00026723 03                         SME_9IQLQ_ABF:	dc.b 3	
00026724 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
00026729 040C 0808 FC               		dc.b 4, $C, 8, 8, $FC	
0002672E FC00 080C 14               		dc.b $FC, 0, 8, $C, $14	
00026733 03                         SME_9IQLQ_ACF:	dc.b 3	
00026734 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
00026739 FC05 0808 14               		dc.b $FC, 5, 8, 8, $14	
0002673E 0408 080C FC               		dc.b 4, 8, 8, $C, $FC	
00026743 03                         SME_9IQLQ_ADF:	dc.b 3	
00026744 F40D 0000 F4               		dc.b $F4, $D, 0, 0, $F4	
00026749 FC00 0008 14               		dc.b $FC, 0, 0, 8, $14	
0002674E 040C 0009 FC               		dc.b 4, $C, 0, 9, $FC	
00026753 03                         SME_9IQLQ_AEF:	dc.b 3	
00026754 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00026759 FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
0002675E 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00026763 04                         SME_9IQLQ_AFF:	dc.b 4	
00026764 E90B 0000 F4               		dc.b $E9, $B, 0, 0, $F4	
00026769 1100 000C FC               		dc.b $11, 0, 0, $C, $FC	
0002676E 0900 000D FC               		dc.b 9, 0, 0, $D, $FC	
00026773 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
00026778 08                         SME_9IQLQ_B14:	dc.b 8	
00026779 E909 0000 F4               		dc.b $E9, 9, 0, 0, $F4	
0002677E F901 0006 04               		dc.b $F9, 1, 0, 6, 4	
00026783 0900 0008 FC               		dc.b 9, 0, 0, 8, $FC	
00026788 1100 0009 FC               		dc.b $11, 0, 0, 9, $FC	
0002678D F901 000A FC               		dc.b $F9, 1, 0, $A, $FC	
00026792 F900 000C F4               		dc.b $F9, 0, 0, $C, $F4	
00026797 0100 000D F4               		dc.b 1, 0, 0, $D, $F4	
0002679C 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
000267A1 04                         SME_9IQLQ_B3D:	dc.b 4	
000267A2 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
000267A7 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
000267AC F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
000267B1 F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
000267B6 04                         SME_9IQLQ_B52:	dc.b 4	
000267B7 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
000267BC 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
000267C1 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
000267C6 F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
000267CB 05                         SME_9IQLQ_B67:	dc.b 5	
000267CC E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
000267D1 F001 0009 0C               		dc.b $F0, 1, 0, 9, $C	
000267D6 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
000267DB 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
000267E0 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
000267E5 05                         SME_9IQLQ_B81:	dc.b 5	
000267E6 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
000267EB E801 0009 0C               		dc.b $E8, 1, 0, 9, $C	
000267F0 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
000267F5 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
000267FA 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
000267FF 02                         SME_9IQLQ_B9B:	dc.b 2	
00026800 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00026805 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
0002680A 05                         SME_9IQLQ_BA6:	dc.b 5	
0002680B 0505 0000 EB               		dc.b 5, 5, 0, 0, $EB	
00026810 ED02 0004 F3               		dc.b $ED, 2, 0, 4, $F3	
00026815 F503 0007 FB               		dc.b $F5, 3, 0, 7, $FB	
0002681A ED03 000B 03               		dc.b $ED, 3, 0, $B, 3	
0002681F ED00 000F FB               		dc.b $ED, 0, 0, $F, $FB	
00026824 03                         SME_9IQLQ_BC0:	dc.b 3	
00026825 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
0002682A 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
0002682F 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00026834 05                         SME_9IQLQ_BD0:	dc.b 5	
00026835 0D00 0000 EB               		dc.b $D, 0, 0, 0, $EB	
0002683A F503 0001 F3               		dc.b $F5, 3, 0, 1, $F3	
0002683F F503 0005 FB               		dc.b $F5, 3, 0, 5, $FB	
00026844 F503 0009 03               		dc.b $F5, 3, 0, 9, 3	
00026849 ED08 000D F3               		dc.b $ED, 8, 0, $D, $F3	
0002684E 02                         SME_9IQLQ_BEA:	dc.b 2	
0002684F ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00026854 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00026859 03                         SME_9IQLQ_BF5:	dc.b 3	
0002685A F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
0002685F 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00026864 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
00026869 03                         SME_9IQLQ_C05:	dc.b 3	
0002686A EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
0002686F 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00026874 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00026879 03                         SME_9IQLQ_C15:	dc.b 3	
0002687A F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
0002687F 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00026884 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
00026889 02                         SME_9IQLQ_C25:	dc.b 2	
0002688A EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
0002688F FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0	
00026894 03                         SME_9IQLQ_C30:	dc.b 3	
00026895 E80D 2000 EC               		dc.b $E8, $D, $20, 0, $EC	
0002689A E801 2008 0C               		dc.b $E8, 1, $20, 8, $C	
0002689F F80B 200A F4               		dc.b $F8, $B, $20, $A, $F4	
000268A4 0B                         SME_9IQLQ_C40:	dc.b $B	
000268A5 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
000268AA E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
000268AF 1000 000A F4               		dc.b $10, 0, 0, $A, $F4	
000268B4 0808 000B F4               		dc.b 8, 8, 0, $B, $F4	
000268B9 1000 000E 04               		dc.b $10, 0, 0, $E, 4	
000268BE F800 000F FC               		dc.b $F8, 0, 0, $F, $FC	
000268C3 F800 0010 F4               		dc.b $F8, 0, 0, $10, $F4	
000268C8 F800 0011 04               		dc.b $F8, 0, 0, $11, 4	
000268CD 0000 0012 FC               		dc.b 0, 0, 0, $12, $FC	
000268D2 0000 0013 04               		dc.b 0, 0, 0, $13, 4	
000268D7 0000 0014 F4               		dc.b 0, 0, 0, $14, $F4	
000268DC 06                         SME_9IQLQ_C78:	dc.b 6	
000268DD E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
000268E2 E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
000268E7 F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
000268EC 1000 0010 F4               		dc.b $10, 0, 0, $10, $F4	
000268F1 0808 0011 F4               		dc.b 8, 8, 0, $11, $F4	
000268F6 1000 0014 04               		dc.b $10, 0, 0, $14, 4	
000268FB 03                         SME_9IQLQ_C97:	dc.b 3	
000268FC EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
00026901 FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC	
00026906 0301 0012 0C               		dc.b 3, 1, 0, $12, $C	
0002690B 07                         SME_9IQLQ_CA7:	dc.b 7	
0002690C F801 0000 0C               		dc.b $F8, 1, 0, 0, $C	
00026911 080C 0002 F4               		dc.b 8, $C, 0, 2, $F4	
00026916 F801 0006 FC               		dc.b $F8, 1, 0, 6, $FC	
0002691B F000 0008 FC               		dc.b $F0, 0, 0, 8, $FC	
00026920 F801 0009 EC               		dc.b $F8, 1, 0, 9, $EC	
00026925 F002 000B F4               		dc.b $F0, 2, 0, $B, $F4	
0002692A F002 000E 04               		dc.b $F0, 2, 0, $E, 4	
0002692F 02                         SME_9IQLQ_CCB:	dc.b 2	
00026930 F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC	
00026935 F802 0010 0C               		dc.b $F8, 2, 0, $10, $C	
0002693A 04                         SME_9IQLQ_CD6:	dc.b 4	
0002693B F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00026940 F800 000C EC               		dc.b $F8, 0, 0, $C, $EC	
00026945 F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
0002694A 0000 0011 EC               		dc.b 0, 0, 0, $11, $EC	
0002694F 03                         SME_9IQLQ_CEB:	dc.b 3	
00026950 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00026955 F801 000C EC               		dc.b $F8, 1, 0, $C, $EC	
0002695A F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
0002695F 03                         SME_9IQLQ_CFB:	dc.b 3	
00026960 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00026965 F008 000C F4               		dc.b $F0, 8, 0, $C, $F4	
0002696A F801 000F EC               		dc.b $F8, 1, 0, $F, $EC	
0002696F 04                         SME_9IQLQ_D0B:	dc.b 4	
00026970 0002 0000 F4               		dc.b 0, 2, 0, 0, $F4	
00026975 F803 0003 FC               		dc.b $F8, 3, 0, 3, $FC	
0002697A F803 0007 04               		dc.b $F8, 3, 0, 7, 4	
0002697F F802 000B 0C               		dc.b $F8, 2, 0, $B, $C	
00026984 01                         SME_9IQLQ_D20:	dc.b 1	
00026985 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
0002698A 01                         SME_9IQLQ_D26:	dc.b 1	
0002698B F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00026990 01                         SME_9IQLQ_D2C:	dc.b 1	
00026991 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00026996 01                         SME_9IQLQ_D32:	dc.b 1	
00026997 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
0002699C 02                         SME_9IQLQ_D38:	dc.b 2	
0002699D F80B 0000 F4               		dc.b $F8, $B, 0, 0, $F4	
000269A2 F802 000C 0C               		dc.b $F8, 2, 0, $C, $C	
000269A7 01                         SME_9IQLQ_D43:	dc.b 1	
000269A8 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000269AD 01                         SME_9IQLQ_D49:	dc.b 1	
000269AE F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000269B3 01                         SME_9IQLQ_D4F:	dc.b 1	
000269B4 F00B 0000 F5               		dc.b $F0, $B, 0, 0, $F5	
000269B9 03                         SME_9IQLQ_D55:	dc.b 3	
000269BA E80F 0000 F1               		dc.b $E8, $F, 0, 0, $F1	
000269BF 0805 0010 F1               		dc.b 8, 5, 0, $10, $F1	
000269C4 0801 0014 01               		dc.b 8, 1, 0, $14, 1	
000269C9 03                         SME_9IQLQ_D65:	dc.b 3	
000269CA 0809 0000 F1               		dc.b 8, 9, 0, 0, $F1	
000269CF E80B 0006 F1               		dc.b $E8, $B, 0, 6, $F1	
000269D4 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
000269D9 03                         SME_9IQLQ_D75:	dc.b 3	
000269DA E80B 0000 F1               		dc.b $E8, $B, 0, 0, $F1	
000269DF 0809 000C F1               		dc.b 8, 9, 0, $C, $F1	
000269E4 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
000269E9 03                         SME_9IQLQ_D85:	dc.b 3	
000269EA E80B 0000 F1               		dc.b $E8, $B, 0, 0, $F1	
000269EF 0809 000C F1               		dc.b 8, 9, 0, $C, $F1	
000269F4 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
000269F9 03                         SME_9IQLQ_D95:	dc.b 3	
000269FA E80B 0000 F1               		dc.b $E8, $B, 0, 0, $F1	
000269FF 0809 000C F1               		dc.b 8, 9, 0, $C, $F1	
00026A04 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
00026A09 08                         SME_9IQLQ_DA5:	dc.b 8	
00026A0A 0809 0000 F1               		dc.b 8, 9, 0, 0, $F1	
00026A0F 0000 0006 09               		dc.b 0, 0, 0, 6, 9	
00026A14 F002 0007 F9               		dc.b $F0, 2, 0, 7, $F9	
00026A19 F001 000A 01               		dc.b $F0, 1, 0, $A, 1	
00026A1E 0000 000C F1               		dc.b 0, 0, 0, $C, $F1	
00026A23 0000 000D 01               		dc.b 0, 0, 0, $D, 1	
00026A28 E802 000E F1               		dc.b $E8, 2, 0, $E, $F1	
00026A2D E804 0011 F9               		dc.b $E8, 4, 0, $11, $F9	
00026A32 03                         SME_9IQLQ_DCE:	dc.b 3	
00026A33 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
00026A38 EC0F 0003 EF               		dc.b $EC, $F, 0, 3, $EF	
00026A3D E40C 0013 EF               		dc.b $E4, $C, 0, $13, $EF	
00026A42 03                         SME_9IQLQ_DDE:	dc.b 3	
00026A43 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
00026A48 EC0F 0003 EF               		dc.b $EC, $F, 0, 3, $EF	
00026A4D E408 0013 EF               		dc.b $E4, 8, 0, $13, $EF	
00026A52 07                         SME_9IQLQ_DEE:	dc.b 7	
00026A53 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
00026A58 F402 0003 F7               		dc.b $F4, 2, 0, 3, $F7	
00026A5D F402 0006 FF               		dc.b $F4, 2, 0, 6, $FF	
00026A62 EC02 0009 07               		dc.b $EC, 2, 0, 9, 7	
00026A67 0400 000C EF               		dc.b 4, 0, 0, $C, $EF	
00026A6C E403 000D EF               		dc.b $E4, 3, 0, $D, $EF	
00026A71 E405 0011 F7               		dc.b $E4, 5, 0, $11, $F7	
00026A76 03                         SME_9IQLQ_E12:	dc.b 3	
00026A77 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
00026A7C FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
00026A81 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
00026A86 01                         SME_9IQLQ_E22:	dc.b 1	
00026A87 FC0E 0000 F5               		dc.b $FC, $E, 0, 0, $F5	
00026A8C 01                         SME_9IQLQ_E28:	dc.b 1	
00026A8D FD0A 0000 F5               		dc.b $FD, $A, 0, 0, $F5	
00026A92 07                         SME_9IQLQ_E2E:	dc.b 7	
00026A93 0500 0000 10               		dc.b 5, 0, 0, 0, $10	
00026A98 0301 0001 F0               		dc.b 3, 1, 0, 1, $F0	
00026A9D 0301 0003 F8               		dc.b 3, 1, 0, 3, $F8	
00026AA2 FB02 0005 00               		dc.b $FB, 2, 0, 5, 0	
00026AA7 FB00 0008 F8               		dc.b $FB, 0, 0, 8, $F8	
00026AAC FB00 0009 F0               		dc.b $FB, 0, 0, 9, $F0	
00026AB1 FB02 000A 08               		dc.b $FB, 2, 0, $A, 8	
00026AB6 03                         SME_9IQLQ_E52:	dc.b 3	
00026AB7 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
00026ABC FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
00026AC1 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
00026AC6 01                         SME_9IQLQ_E62:	dc.b 1	
00026AC7 FC0E 0000 EE               		dc.b $FC, $E, 0, 0, $EE	
00026ACC 02                         SME_9IQLQ_E68:	dc.b 2	
00026ACD FD06 0000 F6               		dc.b $FD, 6, 0, 0, $F6	
00026AD2 FD00 0006 06               		dc.b $FD, 0, 0, 6, 6	
00026AD7 02                         SME_9IQLQ_E73:	dc.b 2	
00026AD8 FD0C 0000 F6               		dc.b $FD, $C, 0, 0, $F6	
00026ADD 0509 0004 F6               		dc.b 5, 9, 0, 4, $F6	
00026AE2 05                         SME_9IQLQ_E7E:	dc.b 5	
00026AE3 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00026AE8 EC06 0006 04               		dc.b $EC, 6, 0, 6, 4	
00026AED FC08 000C EC               		dc.b $FC, 8, 0, $C, $EC	
00026AF2 0409 000F F4               		dc.b 4, 9, 0, $F, $F4	
00026AF7 1400 0015 FC               		dc.b $14, 0, 0, $15, $FC	
00026AFC 06                         SME_9IQLQ_E98:	dc.b 6	
00026AFD ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
00026B02 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
00026B07 FD0C 0008 ED               		dc.b $FD, $C, 0, 8, $ED	
00026B0C 0509 000C F5               		dc.b 5, 9, 0, $C, $F5	
00026B11 FD05 0012 0D               		dc.b $FD, 5, 0, $12, $D	
00026B16 F500 0016 15               		dc.b $F5, 0, 0, $16, $15	
00026B1B 04                         SME_9IQLQ_EB7:	dc.b 4	
00026B1C EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00026B21 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00026B26 FE0D 0008 F6               		dc.b $FE, $D, 0, 8, $F6	
00026B2B 0E08 0010 FE               		dc.b $E, 8, 0, $10, $FE	
00026B30 03                         SME_9IQLQ_ECC:	dc.b 3	
00026B31 ED0F 0000 EF               		dc.b $ED, $F, 0, 0, $EF	
00026B36 ED03 0010 0F               		dc.b $ED, 3, 0, $10, $F	
00026B3B 0D0C 0014 F7               		dc.b $D, $C, 0, $14, $F7	
00026B40 05                         SME_9IQLQ_EDC:	dc.b 5	
00026B41 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00026B46 EC05 0006 04               		dc.b $EC, 5, 0, 6, 4	
00026B4B FC0D 000A F4               		dc.b $FC, $D, 0, $A, $F4	
00026B50 0C08 0012 F4               		dc.b $C, 8, 0, $12, $F4	
00026B55 1404 0015 FC               		dc.b $14, 4, 0, $15, $FC	
00026B5A 04                         SME_9IQLQ_EF6:	dc.b 4	
00026B5B EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
00026B60 EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
00026B65 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
00026B6A 0C08 0010 FD               		dc.b $C, 8, 0, $10, $FD	
00026B6F 03                         SME_9IQLQ_F0B:	dc.b 3	
00026B70 ED0F 0000 ED               		dc.b $ED, $F, 0, 0, $ED	
00026B75 ED03 0010 0D               		dc.b $ED, 3, 0, $10, $D	
00026B7A 0D0C 0014 F5               		dc.b $D, $C, 0, $14, $F5	
00026B7F 05                         SME_9IQLQ_F1B:	dc.b 5	
00026B80 ED09 0000 EE               		dc.b $ED, 9, 0, 0, $EE	
00026B85 ED01 0006 06               		dc.b $ED, 1, 0, 6, 6	
00026B8A FD00 0008 EE               		dc.b $FD, 0, 0, 8, $EE	
00026B8F FD0D 0009 F6               		dc.b $FD, $D, 0, 9, $F6	
00026B94 0D08 0011 FE               		dc.b $D, 8, 0, $11, $FE	
00026B99 03                         SME_9IQLQ_F35:	dc.b 3	
00026B9A EB09 0000 FD               		dc.b $EB, 9, 0, 0, $FD	
00026B9F FB04 0006 FD               		dc.b $FB, 4, 0, 6, $FD	
00026BA4 0309 0008 FD               		dc.b 3, 9, 0, 8, $FD	
00026BA9 01                         SME_9IQLQ_F45:	dc.b 1	
00026BAA EC0B 0000 FD               		dc.b $EC, $B, 0, 0, $FD	
00026BAF 01                         SME_9IQLQ_F4B:	dc.b 1	
00026BB0 F40A 0000 FD               		dc.b $F4, $A, 0, 0, $FD	
00026BB5 03                         SME_9IQLQ_F51:	dc.b 3	
00026BB6 E900 0000 04               		dc.b $E9, 0, 0, 0, 4	
00026BBB F90A 0001 FC               		dc.b $F9, $A, 0, 1, $FC	
00026BC0 F108 000A FC               		dc.b $F1, 8, 0, $A, $FC	
00026BC5 03                         SME_9IQLQ_F61:	dc.b 3	
00026BC6 EB09 0000 FC               		dc.b $EB, 9, 0, 0, $FC	
00026BCB FB04 0006 FC               		dc.b $FB, 4, 0, 6, $FC	
00026BD0 0309 0008 FC               		dc.b 3, 9, 0, 8, $FC	
00026BD5 01                         SME_9IQLQ_F71:	dc.b 1	
00026BD6 F30B 0000 FD               		dc.b $F3, $B, 0, 0, $FD	
00026BDB 03                         SME_9IQLQ_F77:	dc.b 3	
00026BDC FC01 0000 0D               		dc.b $FC, 1, 0, 0, $D	
00026BE1 F400 0002 FD               		dc.b $F4, 0, 0, 2, $FD	
00026BE6 FC05 0003 FD               		dc.b $FC, 5, 0, 3, $FD	
00026BEB 02                         SME_9IQLQ_F87:	dc.b 2	
00026BEC EC00 0000 FD               		dc.b $EC, 0, 0, 0, $FD	
00026BF1 F40A 0001 FD               		dc.b $F4, $A, 0, 1, $FD	
00026BF6 06                         SME_9IQLQ_F92:	dc.b 6	
00026BF7 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00026BFC EC04 0006 F6               		dc.b $EC, 4, 0, 6, $F6	
00026C01 F404 0008 EE               		dc.b $F4, 4, 0, 8, $EE	
00026C06 F40A 000A FE               		dc.b $F4, $A, 0, $A, $FE	
00026C0B 0C00 0013 FE               		dc.b $C, 0, 0, $13, $FE	
00026C10 FC00 0014 16               		dc.b $FC, 0, 0, $14, $16	
00026C15 06                         SME_9IQLQ_FB1:	dc.b 6	
00026C16 FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00026C1B E408 0006 F7               		dc.b $E4, 8, 0, 6, $F7	
00026C20 EC04 0009 FF               		dc.b $EC, 4, 0, 9, $FF	
00026C25 F404 000B EF               		dc.b $F4, 4, 0, $B, $EF	
00026C2A F40A 000D FF               		dc.b $F4, $A, 0, $D, $FF	
00026C2F 0C00 0016 FF               		dc.b $C, 0, 0, $16, $FF	
00026C34 04                         SME_9IQLQ_FD0:	dc.b 4	
00026C35 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00026C3A F304 0006 EF               		dc.b $F3, 4, 0, 6, $EF	
00026C3F EB0A 0008 FF               		dc.b $EB, $A, 0, 8, $FF	
00026C44 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
00026C49 03                         SME_9IQLQ_FE5:	dc.b 3	
00026C4A E90F 0000 F5               		dc.b $E9, $F, 0, 0, $F5	
00026C4F F102 0010 ED               		dc.b $F1, 2, 0, $10, $ED	
00026C54 0908 0013 ED               		dc.b 9, 8, 0, $13, $ED	
00026C59 05                         SME_9IQLQ_FF5:	dc.b 5	
00026C5A FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00026C5F EC08 0006 F6               		dc.b $EC, 8, 0, 6, $F6	
00026C64 F404 0009 EE               		dc.b $F4, 4, 0, 9, $EE	
00026C69 F40D 000B FE               		dc.b $F4, $D, 0, $B, $FE	
00026C6E 0408 0013 FE               		dc.b 4, 8, 0, $13, $FE	
00026C73 04                         SME_9IQLQ_100F:	dc.b 4	
00026C74 FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00026C79 F404 0006 EF               		dc.b $F4, 4, 0, 6, $EF	
00026C7E EC0A 0008 FF               		dc.b $EC, $A, 0, 8, $FF	
00026C83 0404 0011 FF               		dc.b 4, 4, 0, $11, $FF	
00026C88 03                         SME_9IQLQ_1024:	dc.b 3	
00026C89 EB0F 0000 F0               		dc.b $EB, $F, 0, 0, $F0	
00026C8E 0B08 0010 F0               		dc.b $B, 8, 0, $10, $F0	
00026C93 EB01 0013 0F               		dc.b $EB, 1, 0, $13, $F	
00026C98 05                         SME_9IQLQ_1034:	dc.b 5	
00026C99 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00026C9E EB0A 0006 FF               		dc.b $EB, $A, 0, 6, $FF	
00026CA3 F304 000F EF               		dc.b $F3, 4, 0, $F, $EF	
00026CA8 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
00026CAD 0B00 0013 FF               		dc.b $B, 0, 0, $13, $FF	
00026CB2 03                         SME_9IQLQ_104E:	dc.b 3	
00026CB3 F40E 0000 F8               		dc.b $F4, $E, 0, 0, $F8	
00026CB8 0C08 000C F0               		dc.b $C, 8, 0, $C, $F0	
00026CBD 0400 000F F0               		dc.b 4, 0, 0, $F, $F0	
00026CC2 05                         SME_9IQLQ_105E:	dc.b 5	
00026CC3 F40E 0000 F8               		dc.b $F4, $E, 0, 0, $F8	
00026CC8 0401 000C F0               		dc.b 4, 1, 0, $C, $F0	
00026CCD 0C04 000E F8               		dc.b $C, 4, 0, $E, $F8	
00026CD2 EC04 0010 F8               		dc.b $EC, 4, 0, $10, $F8	
00026CD7 0C00 0012 08               		dc.b $C, 0, 0, $12, 8	
00026CDC 04                         SME_9IQLQ_1078:	dc.b 4	
00026CDD F40E 0000 F8               		dc.b $F4, $E, 0, 0, $F8	
00026CE2 0401 000C F0               		dc.b 4, 1, 0, $C, $F0	
00026CE7 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00026CEC EC08 0011 F8               		dc.b $EC, 8, 0, $11, $F8	
00026CF1 04                         SME_9IQLQ_108D:	dc.b 4	
00026CF2 F40E 0000 F8               		dc.b $F4, $E, 0, 0, $F8	
00026CF7 0401 000C F0               		dc.b 4, 1, 0, $C, $F0	
00026CFC 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00026D01 EC08 0011 F8               		dc.b $EC, 8, 0, $11, $F8	
00026D06 02                         SME_9IQLQ_10A2:	dc.b 2	
00026D07 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D0C E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026D11 02                         SME_9IQLQ_10AD:	dc.b 2	
00026D12 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D17 E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026D1C 02                         SME_9IQLQ_10B8:	dc.b 2	
00026D1D F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D22 E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026D27 02                         SME_9IQLQ_10C3:	dc.b 2	
00026D28 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D2D E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026D32 02                         SME_9IQLQ_10CE:	dc.b 2	
00026D33 F00C 0000 F0               		dc.b $F0, $C, 0, 0, $F0	
00026D38 F80F 0004 F0               		dc.b $F8, $F, 0, 4, $F0	
00026D3D 03                         SME_9IQLQ_10D9:	dc.b 3	
00026D3E F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D43 F00C 0010 F0               		dc.b $F0, $C, 0, $10, $F0	
00026D48 F002 0014 E8               		dc.b $F0, 2, 0, $14, $E8	
00026D4D 03                         SME_9IQLQ_10E9:	dc.b 3	
00026D4E F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D53 F008 0010 F0               		dc.b $F0, 8, 0, $10, $F0	
00026D58 F002 0013 E8               		dc.b $F0, 2, 0, $13, $E8	
00026D5D 07                         SME_9IQLQ_10F9:	dc.b 7	
00026D5E F00A 0000 E8               		dc.b $F0, $A, 0, 0, $E8	
00026D63 F000 0009 00               		dc.b $F0, 0, 0, 9, 0	
00026D68 F803 000A 00               		dc.b $F8, 3, 0, $A, 0	
00026D6D 0800 000E 08               		dc.b 8, 0, 0, $E, 8	
00026D72 0000 000F 08               		dc.b 0, 0, 0, $F, 8	
00026D77 1000 0010 08               		dc.b $10, 0, 0, $10, 8	
00026D7C 0804 0011 F0               		dc.b 8, 4, 0, $11, $F0	
00026D81 02                         SME_9IQLQ_111D:	dc.b 2	
00026D82 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D87 E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026D8C 02                         SME_9IQLQ_1128:	dc.b 2	
00026D8D F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D92 E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026D97 02                         SME_9IQLQ_1133:	dc.b 2	
00026D98 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D9D E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026DA2 02                         SME_9IQLQ_113E:	dc.b 2	
00026DA3 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026DA8 E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026DAD 03                         SME_9IQLQ_1149:	dc.b 3	
00026DAE F802 0000 10               		dc.b $F8, 2, 0, 0, $10	
00026DB3 F80F 0003 F0               		dc.b $F8, $F, 0, 3, $F0	
00026DB8 F008 0013 00               		dc.b $F0, 8, 0, $13, 0	
00026DBD 04                         SME_9IQLQ_1159:	dc.b 4	
00026DBE F00F 0000 F8               		dc.b $F0, $F, 0, 0, $F8	
00026DC3 100C 0010 F0               		dc.b $10, $C, 0, $10, $F0	
00026DC8 0001 0014 F0               		dc.b 0, 1, 0, $14, $F0	
00026DCD F800 0016 F0               		dc.b $F8, 0, 0, $16, $F0	
00026DD2 00                         SME_9IQLQ_116E:	dc.b 0	
00026DD3 00                         SME_9IQLQ_116F:	dc.b 0	
00026DD4 03                         SME_9IQLQ_1170:	dc.b 3	
00026DD5 F00E 0000 E8               		dc.b $F0, $E, 0, 0, $E8	
00026DDA F803 000C 08               		dc.b $F8, 3, 0, $C, 8	
00026DDF 0809 0010 F0               		dc.b 8, 9, 0, $10, $F0	
00026DE4 03                         SME_9IQLQ_1180:	dc.b 3	
00026DE5 F00E 0000 E8               		dc.b $F0, $E, 0, 0, $E8	
00026DEA 080D 000C F0               		dc.b 8, $D, 0, $C, $F0	
00026DEF F801 0014 08               		dc.b $F8, 1, 0, $14, 8	
00026DF4 00                         SME_9IQLQ_1190:	dc.b 0	
00026DF5 00                         SME_9IQLQ_1191:	dc.b 0	
00026DF6 02                         SME_9IQLQ_1192:	dc.b 2	
00026DF7 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0	
00026DFC F40F 0004 F0               		dc.b $F4, $F, 0, 4, $F0	
00026E01 01                         SME_9IQLQ_119D:	dc.b 1	
00026E02 F40F 0000 F0               		dc.b $F4, $F, 0, 0, $F0	
00026E07 02                         SME_9IQLQ_11A3:	dc.b 2	
00026E08 F40F 0000 F0               		dc.b $F4, $F, 0, 0, $F0	
00026E0D E40D 0010 F0               		dc.b $E4, $D, 0, $10, $F0	
00026E12 02                         SME_9IQLQ_11AE:	dc.b 2	
00026E13 E40F 0000 F0               		dc.b $E4, $F, 0, 0, $F0	
00026E18 040D 0010 F0               		dc.b 4, $D, 0, $10, $F0	
00026E1D 02                         SME_9IQLQ_11B9:	dc.b 2	
00026E1E E40F 0000 F0               		dc.b $E4, $F, 0, 0, $F0	
00026E23 040D 0010 F0               		dc.b 4, $D, 0, $10, $F0	
00026E28 02                         SME_9IQLQ_11C4:	dc.b 2	
00026E29 E40F 0000 F0               		dc.b $E4, $F, 0, 0, $F0	
00026E2E 040D 0010 F0               		dc.b 4, $D, 0, $10, $F0	
00026E33 05                         SME_9IQLQ_11CF:	dc.b 5	
00026E34 0209 0000 00               		dc.b 2, 9, 0, 0, 0	
00026E39 E207 0006 F0               		dc.b $E2, 7, 0, 6, $F0	
00026E3E EA06 000E 00               		dc.b $EA, 6, 0, $E, 0	
00026E43 E200 0014 00               		dc.b $E2, 0, 0, $14, 0	
00026E48 0200 0015 F8               		dc.b 2, 0, 0, $15, $F8	
00026E4D 05                         SME_9IQLQ_11E9:	dc.b 5	
00026E4E E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026E53 020C 000C F0               		dc.b 2, $C, 0, $C, $F0	
00026E58 0201 0010 10               		dc.b 2, 1, 0, $10, $10	
00026E5D 0A04 0012 00               		dc.b $A, 4, 0, $12, 0	
00026E62 EA02 0014 08               		dc.b $EA, 2, 0, $14, 8	
00026E67 02                         SME_9IQLQ_1203:	dc.b 2	
00026E68 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026E6D 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026E72 02                         SME_9IQLQ_120E:	dc.b 2	
00026E73 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026E78 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026E7D 02                         SME_9IQLQ_1219:	dc.b 2	
00026E7E E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026E83 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026E88 02                         SME_9IQLQ_1224:	dc.b 2	
00026E89 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026E8E 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026E93 02                         SME_9IQLQ_122F:	dc.b 2	
00026E94 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026E99 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026E9E 02                         SME_9IQLQ_123A:	dc.b 2	
00026E9F E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026EA4 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026EA9 02                         SME_9IQLQ_1245:	dc.b 2	
00026EAA E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026EAF 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026EB4 02                         SME_9IQLQ_1250:	dc.b 2	
00026EB5 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026EBA 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026EBF 02                         SME_9IQLQ_125B:	dc.b 2	
00026EC0 E20F 0000 F0               		dc.b $E2, $F, 0, 0, $F0	
00026EC5 020D 0010 F0               		dc.b 2, $D, 0, $10, $F0	
00026ECA 02                         SME_9IQLQ_1266:	dc.b 2	
00026ECB E20F 0000 F0               		dc.b $E2, $F, 0, 0, $F0	
00026ED0 020D 0010 F0               		dc.b 2, $D, 0, $10, $F0	
00026ED6 00                         		even
00026ED6 00                         		even
00026ED6                            SonicDynPLC:	include	"_maps\Sonic - Dynamic Gfx Script.asm"
00026ED6                            ; --------------------------------------------------------------------------------
00026ED6                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00026ED6                            
00026ED6                            SME_A1owa:	
00026ED6 0000 0000                  		dc.w SME_A1owa_1EE-SME_A1owa, SME_A1owa_1EF-SME_A1owa	
00026EDA 0000 0000                  		dc.w SME_A1owa_1F8-SME_A1owa, SME_A1owa_20B-SME_A1owa	
00026EDE 0000 0000                  		dc.w SME_A1owa_220-SME_A1owa, SME_A1owa_229-SME_A1owa	
00026EE2 0000 0000                  		dc.w SME_A1owa_230-SME_A1owa, SME_A1owa_237-SME_A1owa	
00026EE6 0000 0000                  		dc.w SME_A1owa_240-SME_A1owa, SME_A1owa_245-SME_A1owa	
00026EEA 0000 0000                  		dc.w SME_A1owa_24C-SME_A1owa, SME_A1owa_253-SME_A1owa	
00026EEE 0000 0000                  		dc.w SME_A1owa_25A-SME_A1owa, SME_A1owa_263-SME_A1owa	
00026EF2 0000 0000                  		dc.w SME_A1owa_26A-SME_A1owa, SME_A1owa_279-SME_A1owa	
00026EF6 0000 0000                  		dc.w SME_A1owa_284-SME_A1owa, SME_A1owa_28B-SME_A1owa	
00026EFA 0000 0000                  		dc.w SME_A1owa_292-SME_A1owa, SME_A1owa_29B-SME_A1owa	
00026EFE 0000 0000                  		dc.w SME_A1owa_2A0-SME_A1owa, SME_A1owa_2A7-SME_A1owa	
00026F02 0000 0000                  		dc.w SME_A1owa_2B2-SME_A1owa, SME_A1owa_2BD-SME_A1owa	
00026F06 0000 0000                  		dc.w SME_A1owa_2CA-SME_A1owa, SME_A1owa_2D3-SME_A1owa	
00026F0A 0000 0000                  		dc.w SME_A1owa_2DA-SME_A1owa, SME_A1owa_2E5-SME_A1owa	
00026F0E 0000 0000                  		dc.w SME_A1owa_2EE-SME_A1owa, SME_A1owa_2F5-SME_A1owa	
00026F12 0000 0000                  		dc.w SME_A1owa_300-SME_A1owa, SME_A1owa_309-SME_A1owa	
00026F16 0000 0000                  		dc.w SME_A1owa_30E-SME_A1owa, SME_A1owa_313-SME_A1owa	
00026F1A 0000 0000                  		dc.w SME_A1owa_31E-SME_A1owa, SME_A1owa_327-SME_A1owa	
00026F1E 0000 0000                  		dc.w SME_A1owa_32C-SME_A1owa, SME_A1owa_333-SME_A1owa	
00026F22 0000 0000                  		dc.w SME_A1owa_33A-SME_A1owa, SME_A1owa_347-SME_A1owa	
00026F26 0000 0000                  		dc.w SME_A1owa_354-SME_A1owa, SME_A1owa_35D-SME_A1owa	
00026F2A 0000 0000                  		dc.w SME_A1owa_364-SME_A1owa, SME_A1owa_36F-SME_A1owa	
00026F2E 0000 0000                  		dc.w SME_A1owa_378-SME_A1owa, SME_A1owa_37F-SME_A1owa	
00026F32 0000 0000                  		dc.w SME_A1owa_38A-SME_A1owa, SME_A1owa_38F-SME_A1owa	
00026F36 0000 0000                  		dc.w SME_A1owa_394-SME_A1owa, SME_A1owa_399-SME_A1owa	
00026F3A 0000 0000                  		dc.w SME_A1owa_39E-SME_A1owa, SME_A1owa_3A3-SME_A1owa	
00026F3E 0000 0000                  		dc.w SME_A1owa_3A8-SME_A1owa, SME_A1owa_3AD-SME_A1owa	
00026F42 0000 0000                  		dc.w SME_A1owa_3B2-SME_A1owa, SME_A1owa_3BB-SME_A1owa	
00026F46 0000 0000                  		dc.w SME_A1owa_3C2-SME_A1owa, SME_A1owa_3C9-SME_A1owa	
00026F4A 0000 0000                  		dc.w SME_A1owa_3D0-SME_A1owa, SME_A1owa_3D9-SME_A1owa	
00026F4E 0000 0000                  		dc.w SME_A1owa_3E0-SME_A1owa, SME_A1owa_3E7-SME_A1owa	
00026F52 0000 0000                  		dc.w SME_A1owa_3EE-SME_A1owa, SME_A1owa_3F3-SME_A1owa	
00026F56 0000 0000                  		dc.w SME_A1owa_3F8-SME_A1owa, SME_A1owa_3FD-SME_A1owa	
00026F5A 0000 0000                  		dc.w SME_A1owa_402-SME_A1owa, SME_A1owa_407-SME_A1owa	
00026F5E 0000 0000                  		dc.w SME_A1owa_40C-SME_A1owa, SME_A1owa_411-SME_A1owa	
00026F62 0000 0000                  		dc.w SME_A1owa_416-SME_A1owa, SME_A1owa_41F-SME_A1owa	
00026F66 0000 0000                  		dc.w SME_A1owa_426-SME_A1owa, SME_A1owa_42B-SME_A1owa	
00026F6A 0000 0000                  		dc.w SME_A1owa_432-SME_A1owa, SME_A1owa_43B-SME_A1owa	
00026F6E 0000 0000                  		dc.w SME_A1owa_442-SME_A1owa, SME_A1owa_447-SME_A1owa	
00026F72 0000 0000                  		dc.w SME_A1owa_44E-SME_A1owa, SME_A1owa_455-SME_A1owa	
00026F76 0000 0000                  		dc.w SME_A1owa_45C-SME_A1owa, SME_A1owa_46F-SME_A1owa	
00026F7A 0000 0000                  		dc.w SME_A1owa_482-SME_A1owa, SME_A1owa_489-SME_A1owa	
00026F7E 0000 0000                  		dc.w SME_A1owa_490-SME_A1owa, SME_A1owa_497-SME_A1owa	
00026F82 0000 0000                  		dc.w SME_A1owa_4A2-SME_A1owa, SME_A1owa_4A9-SME_A1owa	
00026F86 0000 0000                  		dc.w SME_A1owa_4B0-SME_A1owa, SME_A1owa_4BB-SME_A1owa	
00026F8A 0000 0000                  		dc.w SME_A1owa_4C6-SME_A1owa, SME_A1owa_4CF-SME_A1owa	
00026F8E 0000 0000                  		dc.w SME_A1owa_4D8-SME_A1owa, SME_A1owa_4E1-SME_A1owa	
00026F92 0000 0000                  		dc.w SME_A1owa_4EA-SME_A1owa, SME_A1owa_4ED-SME_A1owa	
00026F96 0000 0000                  		dc.w SME_A1owa_4F0-SME_A1owa, SME_A1owa_4F3-SME_A1owa	
00026F9A 0000 0000                  		dc.w SME_A1owa_4F6-SME_A1owa, SME_A1owa_4F9-SME_A1owa	
00026F9E 0000 0000                  		dc.w SME_A1owa_4FC-SME_A1owa, SME_A1owa_4FF-SME_A1owa	
00026FA2 0000 0000                  		dc.w SME_A1owa_506-SME_A1owa, SME_A1owa_509-SME_A1owa	
00026FA6 0000 0000                  		dc.w SME_A1owa_50E-SME_A1owa, SME_A1owa_511-SME_A1owa	
00026FAA 0000 0000                  		dc.w SME_A1owa_516-SME_A1owa, SME_A1owa_519-SME_A1owa	
00026FAE 0000 0000                  		dc.w SME_A1owa_522-SME_A1owa, SME_A1owa_531-SME_A1owa	
00026FB2 0000 0000                  		dc.w SME_A1owa_53C-SME_A1owa, SME_A1owa_543-SME_A1owa	
00026FB6 0000 0000                  		dc.w SME_A1owa_54E-SME_A1owa, SME_A1owa_557-SME_A1owa	
00026FBA 0000 0000                  		dc.w SME_A1owa_560-SME_A1owa, SME_A1owa_569-SME_A1owa	
00026FBE 0000 0000                  		dc.w SME_A1owa_57C-SME_A1owa, SME_A1owa_583-SME_A1owa	
00026FC2 0000 0000                  		dc.w SME_A1owa_58A-SME_A1owa, SME_A1owa_591-SME_A1owa	
00026FC6 0000 0000                  		dc.w SME_A1owa_598-SME_A1owa, SME_A1owa_5A7-SME_A1owa	
00026FCA 0000 0000                  		dc.w SME_A1owa_5A8-SME_A1owa, SME_A1owa_5A9-SME_A1owa	
00026FCE 0000 0000                  		dc.w SME_A1owa_5B0-SME_A1owa, SME_A1owa_5B7-SME_A1owa	
00026FD2 0000 0000                  		dc.w SME_A1owa_5BE-SME_A1owa, SME_A1owa_5C1-SME_A1owa	
00026FD6 0000 0000                  		dc.w SME_A1owa_5C8-SME_A1owa, SME_A1owa_5CF-SME_A1owa	
00026FDA 0000 0000                  		dc.w SME_A1owa_5D6-SME_A1owa, SME_A1owa_5DD-SME_A1owa	
00026FDE 0000 0000                  		dc.w SME_A1owa_5E6-SME_A1owa, SME_A1owa_5F7-SME_A1owa	
00026FE2 0000 0000                  		dc.w SME_A1owa_600-SME_A1owa, SME_A1owa_609-SME_A1owa	
00026FE6 0000 0000                  		dc.w SME_A1owa_614-SME_A1owa, SME_A1owa_61F-SME_A1owa	
00026FEA 0000 0000                  		dc.w SME_A1owa_624-SME_A1owa, SME_A1owa_62F-SME_A1owa	
00026FEE 0000 0000                  		dc.w SME_A1owa_636-SME_A1owa, SME_A1owa_641-SME_A1owa	
00026FF2 0000 0000                  		dc.w SME_A1owa_646-SME_A1owa, SME_A1owa_64D-SME_A1owa	
00026FF6 0000 0000                  		dc.w SME_A1owa_654-SME_A1owa, SME_A1owa_65B-SME_A1owa	
00026FFA 0000 0000                  		dc.w SME_A1owa_660-SME_A1owa, SME_A1owa_667-SME_A1owa	
00026FFE 0000 0000                  		dc.w SME_A1owa_67E-SME_A1owa, SME_A1owa_68B-SME_A1owa	
00027002 0000 0000                  		dc.w SME_A1owa_692-SME_A1owa, SME_A1owa_6A1-SME_A1owa	
00027006 0000 0000                  		dc.w SME_A1owa_6A6-SME_A1owa, SME_A1owa_6AF-SME_A1owa	
0002700A 0000 0000                  		dc.w SME_A1owa_6B6-SME_A1owa, SME_A1owa_6BD-SME_A1owa	
0002700E 0000 0000                  		dc.w SME_A1owa_6C6-SME_A1owa, SME_A1owa_6C9-SME_A1owa	
00027012 0000 0000                  		dc.w SME_A1owa_6CC-SME_A1owa, SME_A1owa_6CF-SME_A1owa	
00027016 0000 0000                  		dc.w SME_A1owa_6D2-SME_A1owa, SME_A1owa_6D5-SME_A1owa	
0002701A 0000 0000                  		dc.w SME_A1owa_6D8-SME_A1owa, SME_A1owa_6DB-SME_A1owa	
0002701E 0000 0000                  		dc.w SME_A1owa_6DE-SME_A1owa, SME_A1owa_6E5-SME_A1owa	
00027022 0000 0000                  		dc.w SME_A1owa_6EC-SME_A1owa, SME_A1owa_6F3-SME_A1owa	
00027026 0000 0000                  		dc.w SME_A1owa_6FA-SME_A1owa, SME_A1owa_701-SME_A1owa	
0002702A 0000 0000                  		dc.w SME_A1owa_712-SME_A1owa, SME_A1owa_719-SME_A1owa	
0002702E 0000 0000                  		dc.w SME_A1owa_720-SME_A1owa, SME_A1owa_72F-SME_A1owa	
00027032 0000 0000                  		dc.w SME_A1owa_736-SME_A1owa, SME_A1owa_739-SME_A1owa	
00027036 0000 0000                  		dc.w SME_A1owa_73E-SME_A1owa, SME_A1owa_74D-SME_A1owa	
0002703A 0000 0000                  		dc.w SME_A1owa_754-SME_A1owa, SME_A1owa_757-SME_A1owa	
0002703E 0000 0000                  		dc.w SME_A1owa_75C-SME_A1owa, SME_A1owa_761-SME_A1owa	
00027042 0000 0000                  		dc.w SME_A1owa_76C-SME_A1owa, SME_A1owa_779-SME_A1owa	
00027046 0000 0000                  		dc.w SME_A1owa_782-SME_A1owa, SME_A1owa_789-SME_A1owa	
0002704A 0000 0000                  		dc.w SME_A1owa_794-SME_A1owa, SME_A1owa_79D-SME_A1owa	
0002704E 0000 0000                  		dc.w SME_A1owa_7A4-SME_A1owa, SME_A1owa_7AF-SME_A1owa	
00027052 0000 0000                  		dc.w SME_A1owa_7B6-SME_A1owa, SME_A1owa_7B9-SME_A1owa	
00027056 0000 0000                  		dc.w SME_A1owa_7BC-SME_A1owa, SME_A1owa_7C3-SME_A1owa	
0002705A 0000 0000                  		dc.w SME_A1owa_7CA-SME_A1owa, SME_A1owa_7CD-SME_A1owa	
0002705E 0000 0000                  		dc.w SME_A1owa_7D4-SME_A1owa, SME_A1owa_7D9-SME_A1owa	
00027062 0000 0000                  		dc.w SME_A1owa_7E6-SME_A1owa, SME_A1owa_7F3-SME_A1owa	
00027066 0000 0000                  		dc.w SME_A1owa_7FC-SME_A1owa, SME_A1owa_803-SME_A1owa	
0002706A 0000 0000                  		dc.w SME_A1owa_80E-SME_A1owa, SME_A1owa_817-SME_A1owa	
0002706E 0000 0000                  		dc.w SME_A1owa_81E-SME_A1owa, SME_A1owa_829-SME_A1owa	
00027072 0000 0000                  		dc.w SME_A1owa_830-SME_A1owa, SME_A1owa_83B-SME_A1owa	
00027076 0000 0000                  		dc.w SME_A1owa_844-SME_A1owa, SME_A1owa_84D-SME_A1owa	
0002707A 0000 0000                  		dc.w SME_A1owa_852-SME_A1owa, SME_A1owa_857-SME_A1owa	
0002707E 0000 0000                  		dc.w SME_A1owa_85C-SME_A1owa, SME_A1owa_861-SME_A1owa	
00027082 0000 0000                  		dc.w SME_A1owa_866-SME_A1owa, SME_A1owa_86D-SME_A1owa	
00027086 0000 0000                  		dc.w SME_A1owa_874-SME_A1owa, SME_A1owa_883-SME_A1owa	
0002708A 0000 0000                  		dc.w SME_A1owa_888-SME_A1owa, SME_A1owa_88D-SME_A1owa	
0002708E 0000 0000                  		dc.w SME_A1owa_892-SME_A1owa, SME_A1owa_897-SME_A1owa	
00027092 0000 0000                  		dc.w SME_A1owa_89E-SME_A1owa, SME_A1owa_8A7-SME_A1owa	
00027096 0000 0000                  		dc.w SME_A1owa_8A8-SME_A1owa, SME_A1owa_8A9-SME_A1owa	
0002709A 0000 0000                  		dc.w SME_A1owa_8B0-SME_A1owa, SME_A1owa_8B7-SME_A1owa	
0002709E 0000 0000                  		dc.w SME_A1owa_8B8-SME_A1owa, SME_A1owa_8B9-SME_A1owa	
000270A2 0000 0000                  		dc.w SME_A1owa_8BE-SME_A1owa, SME_A1owa_8C1-SME_A1owa	
000270A6 0000 0000                  		dc.w SME_A1owa_8C6-SME_A1owa, SME_A1owa_8CB-SME_A1owa	
000270AA 0000 0000                  		dc.w SME_A1owa_8D0-SME_A1owa, SME_A1owa_8D5-SME_A1owa	
000270AE 0000 0000                  		dc.w SME_A1owa_8E0-SME_A1owa, SME_A1owa_8EB-SME_A1owa	
000270B2 0000 0000                  		dc.w SME_A1owa_8F0-SME_A1owa, SME_A1owa_8F5-SME_A1owa	
000270B6 0000 0000                  		dc.w SME_A1owa_8FA-SME_A1owa, SME_A1owa_8FF-SME_A1owa	
000270BA 0000 0000                  		dc.w SME_A1owa_904-SME_A1owa, SME_A1owa_909-SME_A1owa	
000270BE 0000 0000                  		dc.w SME_A1owa_90E-SME_A1owa, SME_A1owa_913-SME_A1owa	
000270C2 0000                       		dc.w SME_A1owa_918-SME_A1owa	
000270C4 00                         SME_A1owa_1EE:	dc.b 0	
000270C5 0420 0070 0320 0B20 0E     SME_A1owa_1EF:	dc.b 4, $20, 0, $70, 3, $20, $B, $20, $E	
000270CE 0920 0020 0B20 0E10 0300+  SME_A1owa_1F8:	dc.b 9, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, 6, 0, $A, $10, $1D	
000270E1 0A20 0020 0B20 0E10 0300+  SME_A1owa_20B:	dc.b $A, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, $A, 0, $1F, 0, $26, 0, $32	
000270F6 04B6 C606 D200 0920 0E     SME_A1owa_220:	dc.b 4, $B6, $C6, 6, $D2, 0, 9, $20, $E	
000270FF 0350 1150 1720 0E          SME_A1owa_229:	dc.b 3, $50, $11, $50, $17, $20, $E	
00027106 0350 2050 1720 0E          SME_A1owa_230:	dc.b 3, $50, $20, $50, $17, $20, $E	
0002710D 0450 2050 1710 2700 0E     SME_A1owa_237:	dc.b 4, $50, $20, $50, $17, $10, $27, 0, $E	
00027116 02B6 D316 DF               SME_A1owa_240:	dc.b 2, $B6, $D3, $16, $DF	
0002711B 0356 E126 E736 EA          SME_A1owa_245:	dc.b 3, $56, $E1, $26, $E7, $36, $EA	
00027122 0356 E126 E736 EE          SME_A1owa_24C:	dc.b 3, $56, $E1, $26, $E7, $36, $EE	
00027129 03B6 F226 FE27 01          SME_A1owa_253:	dc.b 3, $B6, $F2, $26, $FE, $27, 1	
00027130 0420 0B20 0E87 0A07 13     SME_A1owa_25A:	dc.b 4, $20, $B, $20, $E, $87, $A, 7, $13	
00027139 0380 2920 0B20 0E          SME_A1owa_263:	dc.b 3, $80, $29, $20, $B, $20, $E	
00027140 0750 3A50 4010 4600 3530+  SME_A1owa_26A:	dc.b 7, $50, $3A, $50, $40, $10, $46, 0, $35, $30, $36, 0, $34, 0, $33	
0002714F 05B0 4800 3530 3600 3400+  SME_A1owa_279:	dc.b 5, $B0, $48, 0, $35, $30, $36, 0, $34, 0, $33	
0002715A 0380 5A57 0400 09          SME_A1owa_284:	dc.b 3, $80, $5A, $57, 4, 0, 9	
00027161 03F7 1437 2407 28          SME_A1owa_28B:	dc.b 3, $F7, $14, $37, $24, 7, $28	
00027168 0450 5450 6350 6910 6F     SME_A1owa_292:	dc.b 4, $50, $54, $50, $63, $50, $69, $10, $6F	
00027171 0250 54B0 71               SME_A1owa_29B:	dc.b 2, $50, $54, $B0, $71	
00027176 0357 0457 2907 2F          SME_A1owa_2A0:	dc.b 3, $57, 4, $57, $29, 7, $2F	
0002717D 0530 7D50 8100 3310 3430+  SME_A1owa_2A7:	dc.b 5, $30, $7D, $50, $81, 0, $33, $10, $34, $30, $36	
00027188 0550 8750 8D20 9350 9600+  SME_A1owa_2B2:	dc.b 5, $50, $87, $50, $8D, $20, $93, $50, $96, 0, $9C	
00027193 0650 8710 9D30 9F50 A330+  SME_A1owa_2BD:	dc.b 6, $50, $87, $10, $9D, $30, $9F, $50, $A3, $30, $A9, 0, $AD	
000271A0 0450 AE10 B470 B620 BE     SME_A1owa_2CA:	dc.b 4, $50, $AE, $10, $B4, $70, $B6, $20, $BE	
000271A9 03F9 7539 8539 89          SME_A1owa_2D3:	dc.b 3, $F9, $75, $39, $85, $39, $89	
000271B0 0550 C130 C770 CB20 D310+  SME_A1owa_2DA:	dc.b 5, $50, $C1, $30, $C7, $70, $CB, $20, $D3, $10, $D6	
000271BB 0450 C110 D870 DA20 E2     SME_A1owa_2E5:	dc.b 4, $50, $C1, $10, $D8, $70, $DA, $20, $E2	
000271C4 03F9 8D39 9D39 A1          SME_A1owa_2EE:	dc.b 3, $F9, $8D, $39, $9D, $39, $A1	
000271CB 0550 8710 9D00 9370 E520+  SME_A1owa_2F5:	dc.b 5, $50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED	
000271D6 0470 F050 F810 FE51 00     SME_A1owa_300:	dc.b 4, $70, $F0, $50, $F8, $10, $FE, $51, 0	
000271DF 0270 F0B1 06               SME_A1owa_309:	dc.b 2, $70, $F0, $B1, 6	
000271E4 0281 1858 F9               SME_A1owa_30E:	dc.b 2, $81, $18, $58, $F9	
000271E9 0508 FF39 0009 04B9 0529+  SME_A1owa_313:	dc.b 5, 8, $FF, $39, 0, 9, 4, $B9, 5, $29, $11	
000271F4 0451 1251 2111 2751 29     SME_A1owa_31E:	dc.b 4, $51, $12, $51, $21, $11, $27, $51, $29	
000271FD 0251 12B1 2F               SME_A1owa_327:	dc.b 2, $51, $12, $B1, $2F	
00027202 0329 1479 1719 1F          SME_A1owa_32C:	dc.b 3, $29, $14, $79, $17, $19, $1F	
00027209 0370 F001 0681 3B          SME_A1owa_333:	dc.b 3, $70, $F0, 1, 6, $81, $3B	
00027210 0651 4411 4A11 4C81 4E01+  SME_A1owa_33A:	dc.b 6, $51, $44, $11, $4A, $11, $4C, $81, $4E, 1, $57, 1, $58	
0002721D 0651 4421 5911 5C11 5E81+  SME_A1owa_347:	dc.b 6, $51, $44, $21, $59, $11, $5C, $11, $5E, $81, $60, 1, $57	
0002722A 0451 6911 6F81 7111 7A     SME_A1owa_354:	dc.b 4, $51, $69, $11, $6F, $81, $71, $11, $7A	
00027233 03F9 A529 B529 B8          SME_A1owa_35D:	dc.b 3, $F9, $A5, $29, $B5, $29, $B8	
0002723A 0551 7C21 8211 8571 8721+  SME_A1owa_364:	dc.b 5, $51, $7C, $21, $82, $11, $85, $71, $87, $21, $8F	
00027245 0451 7C11 9281 9411 9D     SME_A1owa_36F:	dc.b 4, $51, $7C, $11, $92, $81, $94, $11, $9D	
0002724E 03F9 BB29 CB19 CE          SME_A1owa_378:	dc.b 3, $F9, $BB, $29, $CB, $19, $CE	
00027255 0551 4481 9F11 5E11 A801+  SME_A1owa_37F:	dc.b 5, $51, $44, $81, $9F, $11, $5E, $11, $A8, 1, $57	
00027260 0251 AAB1 B0               SME_A1owa_38A:	dc.b 2, $51, $AA, $B1, $B0	
00027265 02B7 3057 3C               SME_A1owa_38F:	dc.b 2, $B7, $30, $57, $3C	
0002726A 0250 54B1 BC               SME_A1owa_394:	dc.b 2, $50, $54, $B1, $BC	
0002726F 0257 3CB7 42               SME_A1owa_399:	dc.b 2, $57, $3C, $B7, $42	
00027274 0251 AAB1 C8               SME_A1owa_39E:	dc.b 2, $51, $AA, $B1, $C8	
00027279 0257 3CB7 4E               SME_A1owa_3A3:	dc.b 2, $57, $3C, $B7, $4E	
0002727E 0250 54B1 D4               SME_A1owa_3A8:	dc.b 2, $50, $54, $B1, $D4	
00027283 0257 3CB7 5A               SME_A1owa_3AD:	dc.b 2, $57, $3C, $B7, $5A	
00027288 0451 E011 E6B1 E801 F4     SME_A1owa_3B2:	dc.b 4, $51, $E0, $11, $E6, $B1, $E8, 1, $F4	
00027291 03F8 7128 8128 84          SME_A1owa_3BB:	dc.b 3, $F8, $71, $28, $81, $28, $84	
00027298 0351 F511 FBB1 FD          SME_A1owa_3C2:	dc.b 3, $51, $F5, $11, $FB, $B1, $FD	
0002729F 03B8 BD78 C901 F4          SME_A1owa_3C9:	dc.b 3, $B8, $BD, $78, $C9, 1, $F4	
000272A6 0451 E012 09B2 0B01 F4     SME_A1owa_3D0:	dc.b 4, $51, $E0, $12, 9, $B2, $B, 1, $F4	
000272AF 03B8 D178 DD01 F4          SME_A1owa_3D9:	dc.b 3, $B8, $D1, $78, $DD, 1, $F4	
000272B6 0351 F511 FBB2 17          SME_A1owa_3E0:	dc.b 3, $51, $F5, $11, $FB, $B2, $17	
000272BD 0378 E5B8 ED01 F4          SME_A1owa_3E7:	dc.b 3, $78, $E5, $B8, $ED, 1, $F4	
000272C4 0252 23B2 29               SME_A1owa_3EE:	dc.b 2, $52, $23, $B2, $29	
000272C9 0258 87B8 8D               SME_A1owa_3F3:	dc.b 2, $58, $87, $B8, $8D	
000272CE 0251 12B2 35               SME_A1owa_3F8:	dc.b 2, $51, $12, $B2, $35	
000272D3 0258 87B8 99               SME_A1owa_3FD:	dc.b 2, $58, $87, $B8, $99	
000272D8 0252 23B2 41               SME_A1owa_402:	dc.b 2, $52, $23, $B2, $41	
000272DD 0258 87B8 A5               SME_A1owa_407:	dc.b 2, $58, $87, $B8, $A5	
000272E2 0251 12B2 4D               SME_A1owa_40C:	dc.b 2, $51, $12, $B2, $4D	
000272E7 0258 87B8 B1               SME_A1owa_411:	dc.b 2, $58, $87, $B8, $B1	
000272EC 0452 5912 5FB2 6102 6D     SME_A1owa_416:	dc.b 4, $52, $59, $12, $5F, $B2, $61, 2, $6D	
000272F5 03B9 2129 2D59 30          SME_A1owa_41F:	dc.b 3, $B9, $21, $29, $2D, $59, $30	
000272FC 0272 6EB2 76               SME_A1owa_426:	dc.b 2, $72, $6E, $B2, $76	
00027301 03B9 3629 4259 45          SME_A1owa_42B:	dc.b 3, $B9, $36, $29, $42, $59, $45	
00027308 0452 5912 82B2 8402 6D     SME_A1owa_432:	dc.b 4, $52, $59, $12, $82, $B2, $84, 2, $6D	
00027311 03B9 4B29 5759 5A          SME_A1owa_43B:	dc.b 3, $B9, $4B, $29, $57, $59, $5A	
00027318 0272 6EB2 90               SME_A1owa_442:	dc.b 2, $72, $6E, $B2, $90	
0002731D 03B9 6029 6C59 6F          SME_A1owa_447:	dc.b 3, $B9, $60, $29, $6C, $59, $6F	
00027324 03B4 EE24 FA54 FD          SME_A1owa_44E:	dc.b 3, $B4, $EE, $24, $FA, $54, $FD	
0002732B 03B5 0325 0F55 12          SME_A1owa_455:	dc.b 3, $B5, 3, $25, $F, $55, $12	
00027332 0925 1E55 2105 3715 1815+  SME_A1owa_45C:	dc.b 9, $25, $1E, $55, $21, 5, $37, $15, $18, $15, $1A, $15, $1C, $14, $EE, $14, $F2, $14, $F6	
00027345 0925 2D55 3005 3615 2715+  SME_A1owa_46F:	dc.b 9, $25, $2D, $55, $30, 5, $36, $15, $27, $15, $29, $15, $2B, $15, 3, $15, 7, $15, $B	
00027358 03F6 6416 7436 76          SME_A1owa_482:	dc.b 3, $F6, $64, $16, $74, $36, $76	
0002735F 03B6 8176 8D16 95          SME_A1owa_489:	dc.b 3, $B6, $81, $76, $8D, $16, $95	
00027366 03F5 3835 4805 4C          SME_A1owa_490:	dc.b 3, $F5, $38, $35, $48, 5, $4C	
0002736D 05B5 4D35 5915 5D15 5F25+  SME_A1owa_497:	dc.b 5, $B5, $4D, $35, $59, $15, $5D, $15, $5F, $25, $61	
00027378 03B5 6425 7055 73          SME_A1owa_4A2:	dc.b 3, $B5, $64, $25, $70, $55, $73	
0002737F 03B5 7925 8555 88          SME_A1owa_4A9:	dc.b 3, $B5, $79, $25, $85, $55, $88	
00027386 0555 9425 9A05 AD55 8E55+  SME_A1owa_4B0:	dc.b 5, $55, $94, $25, $9A, 5, $AD, $55, $8E, $55, $64	
00027391 0525 A355 A605 AC55 9D55+  SME_A1owa_4BB:	dc.b 5, $25, $A3, $55, $A6, 5, $AC, $55, $9D, $55, $79	
0002739C 04B5 BA25 C625 C925 CC     SME_A1owa_4C6:	dc.b 4, $B5, $BA, $25, $C6, $25, $C9, $25, $CC	
000273A5 04B5 AE25 CF25 D225 D5     SME_A1owa_4CF:	dc.b 4, $B5, $AE, $25, $CF, $25, $D2, $25, $D5	
000273AE 04F5 D825 E805 EB05 EC     SME_A1owa_4D8:	dc.b 4, $F5, $D8, $25, $E8, 5, $EB, 5, $EC	
000273B7 04F5 ED25 FD16 0016 02     SME_A1owa_4E1:	dc.b 4, $F5, $ED, $25, $FD, $16, 0, $16, 2	
000273C0 01F2 9C                    SME_A1owa_4EA:	dc.b 1, $F2, $9C	
000273C3 01F6 2B                    SME_A1owa_4ED:	dc.b 1, $F6, $2B	
000273C6 01F2 AC                    SME_A1owa_4F0:	dc.b 1, $F2, $AC	
000273C9 01F6 3B                    SME_A1owa_4F3:	dc.b 1, $F6, $3B	
000273CC 01F2 BC                    SME_A1owa_4F6:	dc.b 1, $F2, $BC	
000273CF 01F6 4B                    SME_A1owa_4F9:	dc.b 1, $F6, $4B	
000273D2 01F2 CC                    SME_A1owa_4FC:	dc.b 1, $F2, $CC	
000273D5 0386 5B36 7A26 7E          SME_A1owa_4FF:	dc.b 3, $86, $5B, $36, $7A, $26, $7E	
000273DC 01F2 DC                    SME_A1owa_506:	dc.b 1, $F2, $DC	
000273DF 02B2 EC22 F8               SME_A1owa_509:	dc.b 2, $B2, $EC, $22, $F8	
000273E4 01F2 FB                    SME_A1owa_50E:	dc.b 1, $F2, $FB	
000273E7 02B3 0B23 17               SME_A1owa_511:	dc.b 2, $B3, $B, $23, $17	
000273EC 01F3 1A                    SME_A1owa_516:	dc.b 1, $F3, $1A	
000273EF 0453 2AB3 3018 1508 17     SME_A1owa_519:	dc.b 4, $53, $2A, $B3, $30, $18, $15, 8, $17	
000273F8 0753 3C73 4213 4A03 4C08+  SME_A1owa_522:	dc.b 7, $53, $3C, $73, $42, $13, $4A, 3, $4C, 8, $1A, 8, $19, 8, $18	
00027407 0528 1BB8 1E28 2A18 2D08+  SME_A1owa_531:	dc.b 5, $28, $1B, $B8, $1E, $28, $2A, $18, $2D, 8, $2F	
00027412 03B8 3038 3C18 40          SME_A1owa_53C:	dc.b 3, $B8, $30, $38, $3C, $18, $40	
00027419 05B4 8834 9413 FD03 FF0A+  SME_A1owa_543:	dc.b 5, $B4, $88, $34, $94, $13, $FD, 3, $FF, $A, $CD	
00027424 0427 6627 6927 6C20 0E     SME_A1owa_54E:	dc.b 4, $27, $66, $27, $69, $27, $6C, $20, $E	
0002742D 0413 4D73 4F23 5703 5A     SME_A1owa_557:	dc.b 4, $13, $4D, $73, $4F, $23, $57, 3, $5A	
00027436 0423 5B23 5EF3 6108 42     SME_A1owa_560:	dc.b 4, $23, $5B, $23, $5E, $F3, $61, 8, $42	
0002743F 0928 5338 5678 4303 6408+  SME_A1owa_569:	dc.b 9, $28, $53, $38, $56, $78, $43, 3, $64, 8, $4B, $28, $4F, 8, $4D, 8, $4E, 8, $52	
00027452 03B3 7173 7D00 71          SME_A1owa_57C:	dc.b 3, $B3, $71, $73, $7D, 0, $71	
00027459 03F8 5B18 6B38 6D          SME_A1owa_583:	dc.b 3, $F8, $5B, $18, $6B, $38, $6D	
00027460 03F8 0138 113A CE          SME_A1owa_58A:	dc.b 3, $F8, 1, $38, $11, $3A, $CE	
00027467 03F9 E229 F209 F5          SME_A1owa_591:	dc.b 3, $F9, $E2, $29, $F2, 9, $F5	
0002746E 0729 E229 E629 EA29 EE39+  SME_A1owa_598:	dc.b 7, $29, $E2, $29, $E6, $29, $EA, $29, $EE, $39, $F6, $19, $FA, $19, $FC	
0002747D 00                         SME_A1owa_5A7:	dc.b 0	
0002747E 00                         SME_A1owa_5A8:	dc.b 0	
0002747F 0373 9D03 A533 A6          SME_A1owa_5A9:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
00027486 0373 8533 8D23 91          SME_A1owa_5B0:	dc.b 3, $73, $85, $33, $8D, $23, $91	
0002748D 0376 9736 9F06 A3          SME_A1owa_5B7:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
00027494 0183 94                    SME_A1owa_5BE:	dc.b 1, $83, $94	
00027497 0376 9736 9F06 A3          SME_A1owa_5C1:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
0002749E 0373 8533 8D23 91          SME_A1owa_5C8:	dc.b 3, $73, $85, $33, $8D, $23, $91	
000274A5 0373 9D03 A533 A6          SME_A1owa_5CF:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
000274AC 0373 AA33 B223 B6          SME_A1owa_5D6:	dc.b 3, $73, $AA, $33, $B2, $23, $B6	
000274B3 04B3 B903 C603 C503 C7     SME_A1owa_5DD:	dc.b 4, $B3, $B9, 3, $C6, 3, $C5, 3, $C7	
000274BC 0856 1113 C303 C503 C613+  SME_A1owa_5E6:	dc.b 8, $56, $11, $13, $C3, 3, $C5, 3, $C6, $13, $BF, 6, 5, 6, 6, 3, $C7	
000274CD 04B3 DA33 E603 EA03 EB     SME_A1owa_5F7:	dc.b 4, $B3, $DA, $33, $E6, 3, $EA, 3, $EB	
000274D6 04B3 C833 D403 D803 D9     SME_A1owa_600:	dc.b 4, $B3, $C8, $33, $D4, 3, $D8, 3, $D9	
000274DF 0583 EC13 F553 F713 FD03+  SME_A1owa_609:	dc.b 5, $83, $EC, $13, $F5, $53, $F7, $13, $FD, 3, $FF	
000274EA 0584 0014 0953 F713 FD03+  SME_A1owa_614:	dc.b 5, $84, 0, $14, 9, $53, $F7, $13, $FD, 3, $FF	
000274F5 0284 0B74 14               SME_A1owa_61F:	dc.b 2, $84, $B, $74, $14	
000274FA 0534 9824 9C34 9F34 A304+  SME_A1owa_624:	dc.b 5, $34, $98, $24, $9C, $34, $9F, $34, $A3, 4, $A7	
00027505 0384 1C24 2514 28          SME_A1owa_62F:	dc.b 3, $84, $1C, $24, $25, $14, $28	
0002750C 0504 A834 A934 AD34 B124+  SME_A1owa_636:	dc.b 5, 4, $A8, $34, $A9, $34, $AD, $34, $B1, $24, $B5	
00027517 0284 2A74 33               SME_A1owa_641:	dc.b 2, $84, $2A, $74, $33	
0002751C 03B7 DF17 EB27 ED          SME_A1owa_646:	dc.b 3, $B7, $DF, $17, $EB, $27, $ED	
00027523 0384 1C24 3B14 3E          SME_A1owa_64D:	dc.b 3, $84, $1C, $24, $3B, $14, $3E	
0002752A 03B7 F017 FC27 FE          SME_A1owa_654:	dc.b 3, $B7, $F0, $17, $FC, $27, $FE	
00027531 0254 40B4 46               SME_A1owa_65B:	dc.b 2, $54, $40, $B4, $46	
00027536 0374 5214 5AB4 5C          SME_A1owa_660:	dc.b 3, $74, $52, $14, $5A, $B4, $5C	
0002753D 0B74 6814 7004 7924 7504+  SME_A1owa_667:	dc.b $B, $74, $68, $14, $70, 4, $79, $24, $75, 4, $78, 4, $73, 4, $72, 4, $74, 4, $85, 4, $87, 4, $83	
00027554 0674 7A14 7054 8204 7924+  SME_A1owa_67E:	dc.b 6, $74, $7A, $14, $70, $54, $82, 4, $79, $24, $75, 4, $78	
00027561 0354 C9B4 CF10 6D          SME_A1owa_68B:	dc.b 3, $54, $C9, $B4, $CF, $10, $6D	
00027568 0714 C334 C514 BE04 BD14+  SME_A1owa_692:	dc.b 7, $14, $C3, $34, $C5, $14, $BE, 4, $BD, $14, $B8, $24, $BA, $24, $C0	
00027577 02F4 DB24 EB               SME_A1owa_6A1:	dc.b 2, $F4, $DB, $24, $EB	
0002757C 04B6 A416 B026 B206 B1     SME_A1owa_6A6:	dc.b 4, $B6, $A4, $16, $B0, $26, $B2, 6, $B1	
00027585 03B6 B516 C126 C3          SME_A1owa_6AF:	dc.b 3, $B6, $B5, $16, $C1, $26, $C3	
0002758C 03B9 D129 DD19 E0          SME_A1owa_6B6:	dc.b 3, $B9, $D1, $29, $DD, $19, $E0	
00027593 0427 6F37 7237 7627 7A     SME_A1owa_6BD:	dc.b 4, $27, $6F, $37, $72, $37, $76, $27, $7A	
0002759C 01F7 7E                    SME_A1owa_6C6:	dc.b 1, $F7, $7E	
0002759F 01F7 8E                    SME_A1owa_6C9:	dc.b 1, $F7, $8E	
000275A2 01F7 9E                    SME_A1owa_6CC:	dc.b 1, $F7, $9E	
000275A5 01F7 AE                    SME_A1owa_6CF:	dc.b 1, $F7, $AE	
000275A8 01F7 BE                    SME_A1owa_6D2:	dc.b 1, $F7, $BE	
000275AB 01FA 08                    SME_A1owa_6D5:	dc.b 1, $FA, 8	
000275AE 01FA BD                    SME_A1owa_6D8:	dc.b 1, $FA, $BD	
000275B1 01BA 18                    SME_A1owa_6DB:	dc.b 1, $BA, $18	
000275B4 03FA 243A 341A 38          SME_A1owa_6DE:	dc.b 3, $FA, $24, $3A, $34, $1A, $38	
000275BB 035A 46BA 3A0A 4C          SME_A1owa_6E5:	dc.b 3, $5A, $46, $BA, $3A, $A, $4C	
000275C2 03BA 4D5A 590A 5F          SME_A1owa_6EC:	dc.b 3, $BA, $4D, $5A, $59, $A, $5F	
000275C9 03BA 605A 6C0A 72          SME_A1owa_6F3:	dc.b 3, $BA, $60, $5A, $6C, $A, $72	
000275D0 03BA 735A 7F0A 85          SME_A1owa_6FA:	dc.b 3, $BA, $73, $5A, $7F, $A, $85	
000275D7 085A 7F0A 852A 781A 7C0A+  SME_A1owa_701:	dc.b 8, $5A, $7F, $A, $85, $2A, $78, $1A, $7C, $A, $76, $A, $86, $2A, $87, $1A, $8A	
000275E8 0320 0EFA 8C3A 9C          SME_A1owa_712:	dc.b 3, $20, $E, $FA, $8C, $3A, $9C	
000275EF 0320 0EFA A02A B0          SME_A1owa_719:	dc.b 3, $20, $E, $FA, $A0, $2A, $B0	
000275F6 0720 0E2A 912A 952A 980A+  SME_A1owa_720:	dc.b 7, $20, $E, $2A, $91, $2A, $95, $2A, $98, $A, $8F, $3A, $B5, $3A, $B9	
00027605 0350 3A50 4010 46          SME_A1owa_72F:	dc.b 3, $50, $3A, $50, $40, $10, $46	
0002760C 01B0 48                    SME_A1owa_736:	dc.b 1, $B0, $48	
0002760F 0280 5A00 09               SME_A1owa_739:	dc.b 2, $80, $5A, 0, 9	
00027614 0707 2817 1617 1A27 1D07+  SME_A1owa_73E:	dc.b 7, 7, $28, $17, $16, $17, $1A, $27, $1D, 7, $19, 7, $15, $27, $21	
00027623 0350 6350 6910 6F          SME_A1owa_74D:	dc.b 3, $50, $63, $50, $69, $10, $6F	
0002762A 01B0 71                    SME_A1owa_754:	dc.b 1, $B0, $71	
0002762D 0257 2907 2F               SME_A1owa_757:	dc.b 2, $57, $29, 7, $2F	
00027632 0230 7D50 81               SME_A1owa_75C:	dc.b 2, $30, $7D, $50, $81	
00027637 0550 8750 8D20 9350 9600+  SME_A1owa_761:	dc.b 5, $50, $87, $50, $8D, $20, $93, $50, $96, 0, $9C	
00027642 0650 8710 9D30 9F50 A330+  SME_A1owa_76C:	dc.b 6, $50, $87, $10, $9D, $30, $9F, $50, $A3, $30, $A9, 0, $AD	
0002764F 0450 AE10 B470 B620 BE     SME_A1owa_779:	dc.b 4, $50, $AE, $10, $B4, $70, $B6, $20, $BE	
00027658 03F9 7539 8539 89          SME_A1owa_782:	dc.b 3, $F9, $75, $39, $85, $39, $89	
0002765F 0550 C130 C770 CB20 D310+  SME_A1owa_789:	dc.b 5, $50, $C1, $30, $C7, $70, $CB, $20, $D3, $10, $D6	
0002766A 0450 C110 D870 DA20 E2     SME_A1owa_794:	dc.b 4, $50, $C1, $10, $D8, $70, $DA, $20, $E2	
00027673 03F9 8D39 9D39 A1          SME_A1owa_79D:	dc.b 3, $F9, $8D, $39, $9D, $39, $A1	
0002767A 0550 8710 9D00 9370 E520+  SME_A1owa_7A4:	dc.b 5, $50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED	
00027685 0350 F810 FE51 00          SME_A1owa_7AF:	dc.b 3, $50, $F8, $10, $FE, $51, 0	
0002768C 01B1 06                    SME_A1owa_7B6:	dc.b 1, $B1, 6	
0002768F 0181 18                    SME_A1owa_7B9:	dc.b 1, $81, $18	
00027692 0308 FF89 0B29 01          SME_A1owa_7BC:	dc.b 3, 8, $FF, $89, $B, $29, 1	
00027699 0351 2111 2751 29          SME_A1owa_7C3:	dc.b 3, $51, $21, $11, $27, $51, $29	
000276A0 01B1 2F                    SME_A1owa_7CA:	dc.b 1, $B1, $2F	
000276A3 0319 1F09 1639 1B          SME_A1owa_7CD:	dc.b 3, $19, $1F, 9, $16, $39, $1B	
000276AA 0201 0681 3B               SME_A1owa_7D4:	dc.b 2, 1, 6, $81, $3B	
000276AF 0651 4411 4A11 4C81 4E01+  SME_A1owa_7D9:	dc.b 6, $51, $44, $11, $4A, $11, $4C, $81, $4E, 1, $57, 1, $58	
000276BC 0651 4421 5911 5C11 5E81+  SME_A1owa_7E6:	dc.b 6, $51, $44, $21, $59, $11, $5C, $11, $5E, $81, $60, 1, $57	
000276C9 0451 6911 6F81 7111 7A     SME_A1owa_7F3:	dc.b 4, $51, $69, $11, $6F, $81, $71, $11, $7A	
000276D2 03F9 A529 B529 B8          SME_A1owa_7FC:	dc.b 3, $F9, $A5, $29, $B5, $29, $B8	
000276D9 0551 7C21 8211 8571 8721+  SME_A1owa_803:	dc.b 5, $51, $7C, $21, $82, $11, $85, $71, $87, $21, $8F	
000276E4 0451 7C11 9281 9411 9D     SME_A1owa_80E:	dc.b 4, $51, $7C, $11, $92, $81, $94, $11, $9D	
000276ED 03F9 BB29 CB19 CE          SME_A1owa_817:	dc.b 3, $F9, $BB, $29, $CB, $19, $CE	
000276F4 0551 4481 9F11 5E11 A801+  SME_A1owa_81E:	dc.b 5, $51, $44, $81, $9F, $11, $5E, $11, $A8, 1, $57	
000276FF 03BA D32A DF0A E2          SME_A1owa_829:	dc.b 3, $BA, $D3, $2A, $DF, $A, $E2	
00027706 05BA E31A EF1A F11A F30A+  SME_A1owa_830:	dc.b 5, $BA, $E3, $1A, $EF, $1A, $F1, $1A, $F3, $A, $F5	
00027711 04BA F61B 022B 042B 07     SME_A1owa_83B:	dc.b 4, $BA, $F6, $1B, 2, $2B, 4, $2B, 7	
0002771A 04BB 0A1B 162B 182B 1B     SME_A1owa_844:	dc.b 4, $BB, $A, $1B, $16, $2B, $18, $2B, $1B	
00027723 02FB 1E7B 2E               SME_A1owa_84D:	dc.b 2, $FB, $1E, $7B, $2E	
00027728 02FB 367B 46               SME_A1owa_852:	dc.b 2, $FB, $36, $7B, $46	
0002772D 02FB 1E7B 2E               SME_A1owa_857:	dc.b 2, $FB, $1E, $7B, $2E	
00027732 02FB 367B 46               SME_A1owa_85C:	dc.b 2, $FB, $36, $7B, $46	
00027737 023B 4EFB 52               SME_A1owa_861:	dc.b 2, $3B, $4E, $FB, $52	
0002773C 03FB 623B 722B 76          SME_A1owa_866:	dc.b 3, $FB, $62, $3B, $72, $2B, $76	
00027743 03FB 792B 892B 8C          SME_A1owa_86D:	dc.b 3, $FB, $79, $2B, $89, $2B, $8C	
0002774A 078B 970B 8F3B 900B 960B+  SME_A1owa_874:	dc.b 7, $8B, $97, $B, $8F, $3B, $90, $B, $96, $B, $95, $B, $94, $1B, $A0	
00027759 02FB 1E7B 2E               SME_A1owa_883:	dc.b 2, $FB, $1E, $7B, $2E	
0002775E 02FB 367B 46               SME_A1owa_888:	dc.b 2, $FB, $36, $7B, $46	
00027763 02FB 1E7B 2E               SME_A1owa_88D:	dc.b 2, $FB, $1E, $7B, $2E	
00027768 02FB 367B 46               SME_A1owa_892:	dc.b 2, $FB, $36, $7B, $46	
0002776D 032D 23FD 132D 26          SME_A1owa_897:	dc.b 3, $2D, $23, $FD, $13, $2D, $26	
00027774 04FD 293D 391D 3D0D 3F     SME_A1owa_89E:	dc.b 4, $FD, $29, $3D, $39, $1D, $3D, $D, $3F	
0002777D 00                         SME_A1owa_8A7:	dc.b 0	
0002777E 00                         SME_A1owa_8A8:	dc.b 0	
0002777F 03BD 403D 4C5D 50          SME_A1owa_8A9:	dc.b 3, $BD, $40, $3D, $4C, $5D, $50	
00027786 03BD 567D 621D 6A          SME_A1owa_8B0:	dc.b 3, $BD, $56, $7D, $62, $1D, $6A	
0002778D 00                         SME_A1owa_8B7:	dc.b 0	
0002778E 00                         SME_A1owa_8B8:	dc.b 0	
0002778F 023B A2FB A6               SME_A1owa_8B9:	dc.b 2, $3B, $A2, $FB, $A6	
00027794 01FB B6                    SME_A1owa_8BE:	dc.b 1, $FB, $B6	
00027797 02FB C67B D6               SME_A1owa_8C1:	dc.b 2, $FB, $C6, $7B, $D6	
0002779C 02FB DE7B EE               SME_A1owa_8C6:	dc.b 2, $FB, $DE, $7B, $EE	
000277A1 02FB F67C 06               SME_A1owa_8CB:	dc.b 2, $FB, $F6, $7C, 6	
000277A6 02FC 0E7C 1E               SME_A1owa_8D0:	dc.b 2, $FC, $E, $7C, $1E	
000277AB 055C 267C 2C5C 340C 3A0C+  SME_A1owa_8D5:	dc.b 5, $5C, $26, $7C, $2C, $5C, $34, $C, $3A, $C, $3B	
000277B6 05BC 3C3C 481C 4C1C 4E2C+  SME_A1owa_8E0:	dc.b 5, $BC, $3C, $3C, $48, $1C, $4C, $1C, $4E, $2C, $50	
000277C1 02BC 535C 5F               SME_A1owa_8EB:	dc.b 2, $BC, $53, $5C, $5F	
000277C6 02BC 655C 71               SME_A1owa_8F0:	dc.b 2, $BC, $65, $5C, $71	
000277CB 02BC 775C 83               SME_A1owa_8F5:	dc.b 2, $BC, $77, $5C, $83	
000277D0 02BC 895C 95               SME_A1owa_8FA:	dc.b 2, $BC, $89, $5C, $95	
000277D5 02BC 9B5C A7               SME_A1owa_8FF:	dc.b 2, $BC, $9B, $5C, $A7	
000277DA 02BC AD5C B9               SME_A1owa_904:	dc.b 2, $BC, $AD, $5C, $B9	
000277DF 02BC BF5C CB               SME_A1owa_909:	dc.b 2, $BC, $BF, $5C, $CB	
000277E4 02BC D15C DD               SME_A1owa_90E:	dc.b 2, $BC, $D1, $5C, $DD	
000277E9 02FC E37C F3               SME_A1owa_913:	dc.b 2, $FC, $E3, $7C, $F3	
000277EE 02FC FB7D 0B               SME_A1owa_918:	dc.b 2, $FC, $FB, $7D, $B	
000277F4 00                         		even
000277F4 00                         		even
000277F4                            
000277F4                            ; ---------------------------------------------------------------------------
000277F4                            ; Uncompressed graphics	- Sonic
000277F4                            ; ---------------------------------------------------------------------------
000277F4                            Art_Sonic:	incbin	"artunc\Sonic.bin"	; Sonic
0004EF94                            		even
0004EF94                            ; ---------------------------------------------------------------------------
0004EF94                            ; Compressed graphics - various
0004EF94                            ; ---------------------------------------------------------------------------
0004EF94                            Art_GShield:	incbin	"artunc\Gold Shield.bin"
0004FC54                            		even
0004FC54                            Art_RedShield:	incbin	"artunc\Red Shield.bin"
00050914                            		even
00050914                            Art_SpShield:	incbin	"artunc\Gray Shield.bin"
000515D4                            		even
000515D4                            Art_Shield:	incbin	"artunc\Shield.bin"
00052294                            		even
00052294                            Unc_Stars:	incbin	"artunc\Invincibility Stars.bin"
00052694                            		even
00052694                            
00052694                            Map_SSWalls:	include	"_maps\SS Walls.asm"
00052694                            ; ---------------------------------------------------------------------------
00052694                            ; Sprite mappings - walls of the special stage
00052694                            ; ---------------------------------------------------------------------------
00052694                            Map_SSWalls_internal:
00052694 0000                       		dc.w byte_2C584-Map_SSWalls_internal
00052696 0000                       		dc.w byte_2C58A-Map_SSWalls_internal
00052698 0000                       		dc.w byte_2C590-Map_SSWalls_internal
0005269A 0000                       		dc.w byte_2C596-Map_SSWalls_internal
0005269C 0000                       		dc.w byte_2C59C-Map_SSWalls_internal
0005269E 0000                       		dc.w byte_2C5A2-Map_SSWalls_internal
000526A0 0000                       		dc.w byte_2C5A8-Map_SSWalls_internal
000526A2 0000                       		dc.w byte_2C5AE-Map_SSWalls_internal
000526A4 0000                       		dc.w byte_2C5B4-Map_SSWalls_internal
000526A6 0000                       		dc.w byte_2C5BA-Map_SSWalls_internal
000526A8 0000                       		dc.w byte_2C5C0-Map_SSWalls_internal
000526AA 0000                       		dc.w byte_2C5C6-Map_SSWalls_internal
000526AC 0000                       		dc.w byte_2C5CC-Map_SSWalls_internal
000526AE 0000                       		dc.w byte_2C5D2-Map_SSWalls_internal
000526B0 0000                       		dc.w byte_2C5D8-Map_SSWalls_internal
000526B2 0000                       		dc.w byte_2C5DE-Map_SSWalls_internal
000526B4 01                         byte_2C584:	dc.b 1
000526B5 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000526BA 01                         byte_2C58A:	dc.b 1
000526BB F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
000526C0 01                         byte_2C590:	dc.b 1
000526C1 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
000526C6 01                         byte_2C596:	dc.b 1
000526C7 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
000526CC 01                         byte_2C59C:	dc.b 1
000526CD F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
000526D2 01                         byte_2C5A2:	dc.b 1
000526D3 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
000526D8 01                         byte_2C5A8:	dc.b 1
000526D9 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
000526DE 01                         byte_2C5AE:	dc.b 1
000526DF F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
000526E4 01                         byte_2C5B4:	dc.b 1
000526E5 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
000526EA 01                         byte_2C5BA:	dc.b 1
000526EB F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
000526F0 01                         byte_2C5C0:	dc.b 1
000526F1 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
000526F6 01                         byte_2C5C6:	dc.b 1
000526F7 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
000526FC 01                         byte_2C5CC:	dc.b 1
000526FD F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00052702 01                         byte_2C5D2:	dc.b 1
00052703 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00052708 01                         byte_2C5D8:	dc.b 1
00052709 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0005270E 01                         byte_2C5DE:	dc.b 1
0005270F F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00052714                            		even
00052714                            		even
00052714                            
00052714                            ; ---------------------------------------------------------------------------
00052714                            ; Compressed graphics - special stage
00052714                            ; ---------------------------------------------------------------------------
00052714                            Nem_SSWalls:	incbin	"artnem\Special Walls.bin" ; special stage walls
0005304C                            		even
0005304C                            Eni_SSBg1:	incbin	"tilemaps\SS Background 1.bin" ; special stage background (mappings)
00053180                            		even
00053180                            Nem_SSBgFish:	incbin	"artnem\Special Birds & Fish.bin" ; special stage birds and fish background
00053E10                            		even
00053E10                            Eni_SSBg2:	incbin	"tilemaps\SS Background 2.bin" ; special stage background (mappings)
00054110                            		even
00054110                            Nem_SSBgCloud:	incbin	"artnem\Special Clouds.bin" ; special stage clouds background
00054604                            		even
00054604                            Nem_SSGOAL:	incbin	"artnem\Special GOAL.bin" ; special stage GOAL block
000546F2                            		even
000546F2                            Nem_SSRBlock:	incbin	"artnem\Special R.bin"	; special stage R block
000547C2                            		even
000547C2                            Nem_SS1UpBlock:	incbin	"artnem\Special 1UP.bin" ; special stage 1UP block
000548B8                            		even
000548B8                            Nem_SSEmStars:	incbin	"artnem\Special Emerald Twinkle.bin" ; special stage stars from a collected emerald
00054916                            		even
00054916                            Nem_SSRedWhite:	incbin	"artnem\Special Red-White.bin" ; special stage red/white block
000549A8                            		even
000549A8                            Nem_SSZone1:	incbin	"artnem\Special ZONE1.bin" ; special stage ZONE1 block
00054A6A                            		even
00054A6A                            Nem_SSZone2:	incbin	"artnem\Special ZONE2.bin" ; ZONE2 block
00054B38                            		even
00054B38                            Nem_SSZone3:	incbin	"artnem\Special ZONE3.bin" ; ZONE3 block
00054C04                            		even
00054C04                            Nem_SSZone4:	incbin	"artnem\Special ZONE4.bin" ; ZONE4 block
00054CCC                            		even
00054CCC                            Nem_SSZone5:	incbin	"artnem\Special ZONE5.bin" ; ZONE5 block
00054D96                            		even
00054D96                            Nem_SSZone6:	incbin	"artnem\Special ZONE6.bin" ; ZONE6 block
00054E66                            		even
00054E66                            Nem_SSUpDown:	incbin	"artnem\Special UP-DOWN.bin" ; special stage UP/DOWN block
0005505A                            		even
0005505A                            Nem_SSEmerald:	incbin	"artnem\Special Emeralds.bin" ; special stage chaos emeralds
000551C2                            		even
000551C2                            Nem_SSGhost:	incbin	"artnem\Special Ghost.bin" ; special stage ghost block
00055272                            		even
00055272                            Nem_SSWBlock:	incbin	"artnem\Special W.bin"	; special stage W block
0005534C                            		even
0005534C                            Nem_SSGlass:	incbin	"artnem\Special Glass.bin" ; special stage destroyable glass block
000553D0                            		even
000553D0                            Nem_ResultEm:	incbin	"artnem\Special Result Emeralds.bin" ; chaos emeralds on special stage results screen
0005554E                            		even
0005554E                            ; ---------------------------------------------------------------------------
0005554E                            ; Compressed graphics - GHZ stuff
0005554E                            ; ---------------------------------------------------------------------------
0005554E                            Nem_Stalk:	incbin	"artnem\GHZ Flower Stalk.bin"
000555B0                            		even
000555B0                            Nem_Swing:	incbin	"artnem\GHZ Swinging Platform.bin"
000556CA                            		even
000556CA                            Nem_Bridge:	incbin	"artnem\GHZ Bridge.bin"
000557E8                            		even
000557E8                            Nem_GhzUnkBlock:incbin	"artnem\Unused - GHZ Block.bin"
00055830                            		even
00055830                            Nem_Ball:	incbin	"artnem\GHZ Giant Ball.bin"
000559CE                            		even
000559CE                            Nem_Spikes:	incbin	"artnem\Spikes.bin"
00055A4A                            		even
00055A4A                            Nem_GhzLog:	incbin	"artnem\Unused - GHZ Log.bin"
00055C5E                            		even
00055C5E                            Nem_SpikePole:	incbin	"artnem\GHZ Spiked Log.bin"
00055D8A                            		even
00055D8A                            Nem_PplRock:	incbin	"artnem\GHZ Purple Rock.bin"
00055EDE                            		even
00055EDE                            Nem_GhzWall1:	incbin	"artnem\GHZ Breakable Wall.bin"
00055F8E                            		even
00055F8E                            Nem_GhzWall2:	incbin	"artnem\GHZ Edge Wall.bin"
00055FEE                            		even
00055FEE                            ; ---------------------------------------------------------------------------
00055FEE                            ; Compressed graphics - LZ stuff
00055FEE                            ; ---------------------------------------------------------------------------
00055FEE                            Nem_Water:	incbin	"artnem\LZ Water Surface.bin"
000560C6                            		even
000560C6                            Nem_Splash:	incbin	"artnem\LZ Water & Splashes.bin"
000568BA                            		even
000568BA                            Nem_LzSpikeBall:incbin	"artnem\LZ Spiked Ball & Chain.bin"
00056A4C 00                         		even
00056A4C                            Nem_FlapDoor:	incbin	"artnem\LZ Flapping Door.bin"
00056BB6                            		even
00056BB6                            Nem_Bubbles:	incbin	"artnem\LZ Bubbles & Countdown.bin"
000571F6 00                         		even
000571F6                            Nem_LzBlock3:	incbin	"artnem\LZ 32x16 Block.bin"
00057298 00                         		even
00057298                            Nem_LzDoor1:	incbin	"artnem\LZ Vertical Door.bin"
00057312 00                         		even
00057312                            Nem_Harpoon:	incbin	"artnem\LZ Harpoon.bin"
00057478 00                         		even
00057478                            Nem_LzPole:	incbin	"artnem\LZ Breakable Pole.bin"
000574FE 00                         		even
000574FE                            Nem_LzDoor2:	incbin	"artnem\LZ Horizontal Door.bin"
0005766A                            		even
0005766A                            Nem_LzWheel:	incbin	"artnem\LZ Wheel.bin"
00057B4C                            		even
00057B4C                            Nem_Gargoyle:	incbin	"artnem\LZ Gargoyle & Fireball.bin"
00057CBC                            		even
00057CBC                            Nem_LzBlock2:	incbin	"artnem\LZ Blocks.bin"
00057F74                            		even
00057F74                            Nem_LzPlatfm:	incbin	"artnem\LZ Rising Platform.bin"
000580BA                            		even
000580BA                            Nem_Cork:	incbin	"artnem\LZ Cork.bin"
000581E4                            		even
000581E4                            Nem_LzBlock1:	incbin	"artnem\LZ 32x32 Block.bin"
00058364 00                         		even
00058364                            ; ---------------------------------------------------------------------------
00058364                            ; Compressed graphics - MZ stuff
00058364                            ; ---------------------------------------------------------------------------
00058364                            Nem_MzMetal:	incbin	"artnem\MZ Metal Blocks.bin"
000585F2                            		even
000585F2                            Nem_MzSwitch:	incbin	"artnem\MZ Switch.bin"
000586B0                            		even
000586B0                            Nem_MzGlass:	incbin	"artnem\MZ Green Glass Block.bin"
00058788                            		even
00058788                            Nem_UnkGrass:	incbin	"artnem\Unused - Grass.bin"
000587DC                            		even
000587DC                            Nem_MzFire:	incbin	"artnem\Fireballs.bin"
00058AFA 00                         		even
00058AFA                            Nem_Lava:	incbin	"artnem\MZ Lava.bin"
00059410                            		even
00059410                            Nem_MzBlock:	incbin	"artnem\MZ Green Pushable Block.bin"
0005957E                            		even
0005957E                            Nem_MzUnkBlock:	incbin	"artnem\Unused - MZ Background.bin"
00059606                            		even
00059606                            ; ---------------------------------------------------------------------------
00059606                            ; Compressed graphics - SLZ stuff
00059606                            ; ---------------------------------------------------------------------------
00059606                            Nem_Seesaw:	incbin	"artnem\SLZ Seesaw.bin"
00059842                            		even
00059842                            Nem_SlzSpike:	incbin	"artnem\SLZ Little Spikeball.bin"
00059988                            		even
00059988                            Nem_Fan:	incbin	"artnem\SLZ Fan.bin"
00059BCC                            		even
00059BCC                            Nem_SlzWall:	incbin	"artnem\SLZ Breakable Wall.bin"
00059C68 00                         		even
00059C68                            Nem_Pylon:	incbin	"artnem\SLZ Pylon.bin"
00059D4A                            		even
00059D4A                            Nem_SlzSwing:	incbin	"artnem\SLZ Swinging Platform.bin"
00059F2C                            		even
00059F2C                            Nem_SlzBlock:	incbin	"artnem\SLZ 32x32 Block.bin"
0005A038                            		even
0005A038                            Nem_SlzCannon:	incbin	"artnem\SLZ Cannon.bin"
0005A0DC                            		even
0005A0DC                            ; ---------------------------------------------------------------------------
0005A0DC                            ; Compressed graphics - SYZ stuff
0005A0DC                            ; ---------------------------------------------------------------------------
0005A0DC                            Nem_Bumper:	incbin	"artnem\SYZ Bumper.bin"
0005A26C                            		even
0005A26C                            Nem_SyzSpike2:	incbin	"artnem\SYZ Small Spikeball.bin"
0005A2CE                            		even
0005A2CE                            Nem_LzSwitch:	incbin	"artnem\Switch.bin"
0005A3EA 00                         		even
0005A3EA                            Nem_SyzSpike1:	incbin	"artnem\SYZ Large Spikeball.bin"
0005A678                            		even
0005A678                            ; ---------------------------------------------------------------------------
0005A678                            ; Compressed graphics - SBZ stuff
0005A678                            ; ---------------------------------------------------------------------------
0005A678                            Nem_SbzWheel1:	incbin	"artnem\SBZ Running Disc.bin"
0005A6CC                            		even
0005A6CC                            Nem_SbzWheel2:	incbin	"artnem\SBZ Junction Wheel.bin"
0005A968                            		even
0005A968                            Nem_Cutter:	incbin	"artnem\SBZ Pizza Cutter.bin"
0005AB58                            		even
0005AB58                            Nem_Stomper:	incbin	"artnem\SBZ Stomper.bin"
0005ACF6                            		even
0005ACF6                            Nem_SpinPform:	incbin	"artnem\SBZ Spinning Platform.bin"
0005B026                            		even
0005B026                            Nem_TrapDoor:	incbin	"artnem\SBZ Trapdoor.bin"
0005B204                            		even
0005B204                            Nem_SbzFloor:	incbin	"artnem\SBZ Collapsing Floor.bin"
0005B25C                            		even
0005B25C                            Nem_Electric:	incbin	"artnem\SBZ Electrocuter.bin"
0005B40E 00                         		even
0005B40E                            Nem_SbzBlock:	incbin	"artnem\SBZ Vanishing Block.bin"
0005B52A                            		even
0005B52A                            Nem_FlamePipe:	incbin	"artnem\SBZ Flaming Pipe.bin"
0005B6B8                            		even
0005B6B8                            Nem_SbzDoor1:	incbin	"artnem\SBZ Small Vertical Door.bin"
0005B752                            		even
0005B752                            Nem_SlideFloor:	incbin	"artnem\SBZ Sliding Floor Trap.bin"
0005B7AA                            		even
0005B7AA                            Nem_SbzDoor2:	incbin	"artnem\SBZ Large Horizontal Door.bin"
0005B8A6                            		even
0005B8A6                            Nem_Girder:	incbin	"artnem\SBZ Crushing Girder.bin"
0005B9BC                            		even
0005B9BC                            ; ---------------------------------------------------------------------------
0005B9BC                            ; Compressed graphics - enemies
0005B9BC                            ; ---------------------------------------------------------------------------
0005B9BC                            Nem_BallHog:	incbin	"artnem\Enemy Ball Hog.bin"
0005BE04 00                         		even
0005BE04                            Nem_Crabmeat:	incbin	"artnem\Enemy Crabmeat.bin"
0005C2F4 00                         		even
0005C2F4                            Nem_Mozzietron:	incbin	"artnem\Enemy Mozzietron.bin"
0005C5D8 00                         		even
0005C5D8                            Nem_Buzz:	incbin	"artnem\Enemy Buzz Bomber.bin"
0005C998                            		even
0005C998                            Nem_UnkExplode:	incbin	"artnem\Unused - Explosion.bin"
0005CB80                            		even
0005CB80                            Nem_Burrobot:	incbin	"artnem\Enemy Burrobot.bin"
0005D2AE 00                         		even
0005D2AE                            Nem_Chopper:	incbin	"artnem\Enemy Chopper.bin"
0005D536 00                         		even
0005D536                            Nem_Jaws:	incbin	"artnem\Enemy Jaws.bin"
0005D7D2 00                         		even
0005D7D2                            Nem_Roller:	incbin	"artnem\Enemy Roller.bin"
0005DDA6                            		even
0005DDA6                            Nem_Motobug:	incbin	"artnem\Enemy Motobug.bin"
0005E038                            		even
0005E038                            Nem_Newtron:	incbin	"artnem\Enemy Newtron.bin"
0005E682 00                         		even
0005E682                            Nem_Yadrin:	incbin	"artnem\Enemy Yadrin.bin"
0005EABE                            		even
0005EABE                            Nem_Basaran:	incbin	"artnem\Enemy Basaran.bin"
0005EDCC 00                         		even
0005EDCC                            Nem_Splats:	incbin	"artnem\Enemy Splats.bin"
0005F02C                            		even
0005F02C                            Nem_Bomb:	incbin	"artnem\Enemy Bomb.bin"
0005F32A                            		even
0005F32A                            Nem_Orbinaut:	incbin	"artnem\Enemy Orbinaut.bin"
0005F556 00                         		even
0005F556                            Nem_Cater:	incbin	"artnem\Enemy Caterkiller.bin"
0005F6E4                            		even
0005F6E4                            ; ---------------------------------------------------------------------------
0005F6E4                            ; Compressed graphics - various
0005F6E4                            ; ---------------------------------------------------------------------------
0005F6E4                            Nem_TitleCard:	incbin	"artnem\Title Cards.bin"
0005FD44 00                         		even
0005FD44                            Nem_Hud:	incbin	"artnem\HUD.bin"	; HUD (rings, time, score)
0005FEBC 00                         		even
0005FEBC                            Nem_Lives:	incbin	"artnem\HUD - Life Counter Icon.bin"
0005FFDE 00                         		even
0005FFDE                            Nem_Future:	incbin	"artnem\HUD - Life Counter Icon Future.bin"
000600E6 00                         		even
000600E6                            Nem_Ring:	incbin	"artnem\Rings.bin"
0006023A 00                         		even
0006023A                            Nem_Monitors:	incbin	"artnem\Monitors.bin"
000606C8                            		even
000606C8                            Nem_Explode:	incbin	"artnem\Explosion.bin"
00060D3C                            		even
00060D3C                            Nem_Points:	incbin	"artnem\Points.bin"	; points from destroyed enemy or object
00060DA6                            		even
00060DA6                            Nem_GameOver:	incbin	"artnem\Game Over.bin"	; game over / time over
00060F38                            		even
00060F38                            Nem_HSpring:	incbin	"artnem\Spring Horizontal.bin"
00061056 00                         		even
00061056                            Nem_VSpring:	incbin	"artnem\Spring Vertical.bin"
00061142                            		even
00061142                            Nem_SignPost:	incbin	"artnem\Signpost.bin"	; end of level signpost
000616BA                            		even
000616BA                            Nem_Lamp:	incbin	"artnem\Lamppost.bin"
000617A4                            		even
000617A4                            Nem_BigFlash:	incbin	"artnem\Giant Ring Flash.bin"
00061918                            		even
00061918                            Nem_Bonus:	incbin	"artnem\Hidden Bonuses.bin" ; hidden bonuses at end of a level
00061CA0 00                         		even
00061CA0                            ; ---------------------------------------------------------------------------
00061CA0                            ; Compressed graphics - continue screen
00061CA0                            ; ---------------------------------------------------------------------------
00061CA0                            Nem_ContSonic:	incbin	"artnem\Continue Screen Sonic.bin"
00061F74 00                         		even
00061F74                            Nem_MiniSonic:	incbin	"artnem\Continue Screen Stuff.bin"
0006220E 00                         		even
0006220E                            ; ---------------------------------------------------------------------------
0006220E                            ; Compressed graphics - animals
0006220E                            ; ---------------------------------------------------------------------------
0006220E                            Nem_Rabbit:	incbin	"artnem\Animal Rabbit.bin"
00062366                            		even
00062366                            Nem_Chicken:	incbin	"artnem\Animal Chicken.bin"
000624C2                            		even
000624C2                            Nem_BlackBird:	incbin	"artnem\Animal Blackbird.bin"
0006263E                            		even
0006263E                            Nem_Seal:	incbin	"artnem\Animal Seal.bin"
0006275A                            		even
0006275A                            Nem_Pig:	incbin	"artnem\Animal Pig.bin"
000628D4                            		even
000628D4                            Nem_Flicky:	incbin	"artnem\Animal Flicky.bin"
00062A0E                            		even
00062A0E                            Nem_Squirrel:	incbin	"artnem\Animal Squirrel.bin"
00062B6A                            		even
00062B6A                            ; ---------------------------------------------------------------------------
00062B6A                            ; Compressed graphics - primary patterns and block mappings
00062B6A                            ; ---------------------------------------------------------------------------
00062B6A                            Blk16_GHZ:	incbin	"map16\GHZ.bin"
00063546                            		even
00063546                            Nem_GHZ_1st:	incbin	"artnem\8x8 - GHZ1.bin"	; GHZ primary patterns
00064E96                            		even
00064E96                            Nem_GHZ_2nd:	incbin	"artnem\8x8 - GHZ2.bin"	; GHZ secondary patterns
00066418                            		even
00066418                            Blk256_GHZ:	incbin	"map256\GHZ.bin"
00068812                            		even
00068812                            Blk16_TS:	incbin	"map16\TS.bin"
00068A96                            		even
00068A96                            Nem_TS_1st:	incbin	"artnem\8x8 - TS1.bin"	; GHZ primary patterns
00069BC2                            		even
00069BC2                            Blk256_TS:	incbin	"map256\TS.bin"
0006A770                            		even
0006A770                            Blk16_LZ:	incbin	"map16\LZ.bin"
0006B90E                            		even
0006B90E                            Nem_LZ:		incbin	"artnem\8x8 - LZ.bin"	; LZ primary patterns
0006EDB6                            		even
0006EDB6                            Blk256_LZ:	incbin	"map256\LZ.bin"
000722D8                            		even
000722D8                            Blk16_MZ:	incbin	"map16\MZ.bin"
00072AC6                            		even
00072AC6                            Nem_MZ:		incbin	"artnem\8x8 - MZ.bin"	; MZ primary patterns
00075556                            		even
00075556                            		incbin	"map256\MZ (JP1).bin"
00077690                            		even
00077690                            Blk16_SLZ:	incbin	"map16\SLZ.bin"
00077D12                            		even
00077D12                            Nem_SLZ:	incbin	"artnem\8x8 - SLZ.bin"	; SLZ primary patterns
0007B77C                            		even
0007B77C                            Blk256_SLZ:	incbin	"map256\SLZ.bin"
0007DB86                            		even
0007DB86                            Blk16_SYZ:	incbin	"map16\SYZ.bin"
0007E286                            		even
0007E286                            Nem_SYZ:	incbin	"artnem\8x8 - SYZ.bin"	; SYZ primary patterns
00080A2C                            		even
00080A2C                            Blk256_SYZ:	incbin	"map256\SYZ.bin"
00080FBE                            		even
00080FBE                            Blk16_SBZ:	incbin	"map16\SBZ.bin"
00081BB8                            		even
00081BB8                            Nem_SBZ:	incbin	"artnem\8x8 - SBZ.bin"	; SBZ primary patterns
000843FA                            		even
000843FA                            		incbin	"map256\SBZ (JP1).bin"
00084F86                            		even
00084F86                            ; ---------------------------------------------------------------------------
00084F86                            ; Compressed graphics - bosses and ending sequence
00084F86                            ; ---------------------------------------------------------------------------
00084F86                            Nem_Eggman:	incbin	"artnem\Boss - Main.bin"
000857EE                            		even
000857EE                            Nem_Weapons:	incbin	"artnem\Boss - Weapons.bin"
00085AD8                            		even
00085AD8                            Nem_Prison:	incbin	"artnem\Prison Capsule.bin"
0008635C                            		even
0008635C                            Nem_Sbz2Eggman:	incbin	"artnem\Boss - Eggman in SBZ2 & FZ.bin"
00086B9A 00                         		even
00086B9A                            Nem_FzBoss:	incbin	"artnem\Boss - Final Zone.bin"
00087368 00                         		even
00087368                            Nem_FzEggman:	incbin	"artnem\Boss - Eggman after FZ Fight.bin"
00087890                            		even
00087890                            Nem_Exhaust:	incbin	"artnem\Boss - Exhaust Flame.bin"
000879B0                            		even
000879B0                            Nem_EndEm:	incbin	"artnem\Ending - Emeralds.bin"
00087BB8 00                         		even
00087BB8                            Nem_EndSonic:	incbin	"artnem\Ending - Sonic.bin"
00088EA2 00                         		even
00088EA2                            Nem_TryAgain:	incbin	"artnem\Ending - Try Again.bin"
000897E6                            		even
000897E6                            		even
000897E6                            Kos_EndFlowers:	incbin	"artkos\Flowers at Ending.bin" ; ending sequence animated flowers
00089D76                            		even
00089D76                            Nem_EndFlower:	incbin	"artnem\Ending - Flowers.bin"
00089FFE                            		even
00089FFE                            Nem_CreditText:	incbin	"artnem\Ending - Credits.bin"
0008A682                            		even
0008A682                            Nem_EndStH:	incbin	"artnem\Ending - StH Logo.bin"
0008A9E6                            		even
0008A9E6                            
0008A9E6 FFFF FFFF FFFF FFFF FFFF+  		dcb.b $40,$FF
0008AA26                            ; ---------------------------------------------------------------------------
0008AA26                            ; Collision data
0008AA26                            ; ---------------------------------------------------------------------------
0008AA26                            AngleMap:	incbin	"collide\Angle Map.bin"
0008AB26                            		even
0008AB26                            CollArray1:	incbin	"collide\Collision Array (Normal).bin"
0008BB26                            		even
0008BB26                            CollArray2:	incbin	"collide\Collision Array (Rotated).bin"
0008CB26                            		even
0008CB26                            Col_GHZ:	incbin	"collide\GHZ.bin"	; GHZ index
0008CCD4 00                         		even
0008CCD4                            Col_LZ:		incbin	"collide\LZ.bin"	; LZ index
0008CF78                            		even
0008CF78                            Col_MZ:		incbin	"collide\MZ.bin"	; MZ index
0008D11C 00                         		even
0008D11C                            Col_SLZ:	incbin	"collide\SLZ.bin"	; SLZ index
0008D310                            		even
0008D310                            Col_SYZ:	incbin	"collide\SYZ.bin"	; SYZ index
0008D448                            		even
0008D448                            Col_SBZ:	incbin	"collide\SBZ.bin"	; SBZ index
0008D618                            		even
0008D618                            ; ---------------------------------------------------------------------------
0008D618                            ; Special Stage layouts
0008D618                            ; ---------------------------------------------------------------------------
0008D618                            SS_1:		incbin	"sslayout\1.bin"
0008D892                            		even
0008D892                            SS_2:		incbin	"sslayout\2.bin"
0008DCA4                            		even
0008DCA4                            SS_3:		incbin	"sslayout\3.bin"
0008E000                            		even
0008E000                            SS_4:		incbin	"sslayout\4.bin"
0008E4DA                            		even
0008E4DA                            	SS_5:		incbin	"sslayout\5 (JP1).bin"
0008E98A                            			even
0008E98A                            	SS_6:		incbin	"sslayout\6 (JP1).bin"
0008EC7C                            		even
0008EC7C                            ; ---------------------------------------------------------------------------
0008EC7C                            ; Animated uncompressed graphics
0008EC7C                            ; ---------------------------------------------------------------------------
0008EC7C                            Art_GhzWater:	incbin	"artunc\GHZ Waterfall.bin"
0008EE7C                            		even
0008EE7C                            Art_GhzFlower1:	incbin	"artunc\GHZ Flower Large.bin"
0008F27C                            		even
0008F27C                            Art_GhzFlower2:	incbin	"artunc\GHZ Flower Small.bin"
0008F6FC                            		even
0008F6FC                            Art_MzLava1:	incbin	"artunc\MZ Lava Surface.bin"
0008F9FC                            		even
0008F9FC                            Art_MzLava2:	incbin	"artunc\MZ Lava.bin"
0008FFFC                            		even
0008FFFC                            Art_MzTorch:	incbin	"artunc\MZ Background Torch.bin"
000902FC                            		even
000902FC                            Art_SbzSmoke:	incbin	"artunc\SBZ Background Smoke.bin"
00090D7C                            		even
00090D7C                            
00090D7C                            ; ---------------------------------------------------------------------------
00090D7C                            ; Level	layout index
00090D7C                            ; ---------------------------------------------------------------------------
00090D7C                            Level_Index:
00090D7C                            		; GHZ
00090D7C 0000 0000 0000             		dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
00090D82 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
00090D88 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
00090D8E 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
00090D94                            		; LZ
00090D94 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
00090D9A 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
00090DA0 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
00090DA6 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
00090DAC                            		; MZ
00090DAC 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
00090DB2 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
00090DB8 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
00090DBE 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
00090DC4                            		; SLZ
00090DC4 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00090DCA 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00090DD0 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00090DD6 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
00090DDC                            		; SYZ
00090DDC 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00090DE2 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
00090DE8 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
00090DEE 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
00090DF4                            		; SBZ
00090DF4 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
00090DFA 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
00090E00 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
00090E06 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
00090E0C                            		; Ending
00090E0C 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00090E12 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00090E18 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00090E1E 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00090E24                            
00090E24                            Level_GHZ1:	incbin	"levels\ghz1.bin"
00091056                            		even
00091056 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0009105A                            Level_GHZ2:	incbin	"levels\ghz2.bin"
00091194                            		even
00091194 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
00091198                            Level_GHZ3:	incbin	"levels\ghz3.bin"
000912BA                            		even
000912BA                            Level_GHZbg:	incbin	"levels\ghzbg.bin"
000912F8                            		even
000912F8 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
000912FC 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
00091300                            
00091300                            Level_LZ1:	incbin	"levels\lz1.bin"
000913C2                            		even
000913C2                            Level_LZbg:	incbin	"levels\lzbg.bin"
000914C4                            		even
000914C4 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
000914C8                            Level_LZ2:	incbin	"levels\lz2.bin"
00091562                            		even
00091562 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00091566                            Level_LZ3:	incbin	"levels\lz3.bin"
00091680                            		even
00091680 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
00091684                            Level_SBZ3:	incbin	"levels\sbz3.bin"
0009173E                            		even
0009173E 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
00091742                            
00091742                            Level_MZ1:	incbin	"levels\mz1.bin"
00091834                            		even
00091834                            Level_MZ1bg:	incbin	"levels\mz1bg.bin"
00091956                            		even
00091956                            Level_MZ2:	incbin	"levels\mz2.bin"
00091A78                            		even
00091A78                            Level_MZ2bg:	incbin	"levels\mz2bg.bin"
00091B9A                            		even
00091B9A 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
00091B9E                            Level_MZ3:	incbin	"levels\mz3.bin"
00091C38                            		even
00091C38                            Level_MZ3bg:	incbin	"levels\mz3bg.bin"
00091D5A                            		even
00091D5A 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
00091D5E 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
00091D62                            
00091D62                            Level_SLZ1:	incbin	"levels\slz1.bin"
00091E74                            		even
00091E74                            Level_SLZbg:	incbin	"levels\slzbg.bin"
00091EEE                            		even
00091EEE                            Level_SLZ2:	incbin	"levels\slz2.bin"
00091FDE                            		even
00091FDE                            Level_SLZ3:	incbin	"levels\slz3.bin"
000920F8                            		even
000920F8 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
000920FC                            
000920FC                            Level_SYZ1:	incbin	"levels\syz1.bin"
00092200                            		even
00092200                            		incbin	"levels\syzbg (JP1).bin"
0009223A                            		even
0009223A 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0009223E                            Level_SYZ2:	incbin	"levels\syz2.bin"
00092342                            		even
00092342 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
00092346                            Level_SYZ3:	incbin	"levels\syz3.bin"
000924A0 00                         		even
000924A0 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
000924A4 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
000924A8                            
000924A8                            Level_SBZ1:	incbin	"levels\sbz1.bin"
000925CA                            		even
000925CA                            Level_SBZ1bg:	incbin	"levels\sbz1bg.bin"
00092608                            		even
00092608                            Level_SBZ2:	incbin	"levels\sbz2.bin"
0009274A                            		even
0009274A                            Level_SBZ2bg:	incbin	"levels\sbz2bg.bin"
000928B4                            		even
000928B4 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
000928B8 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
000928BC                            Level_End:	incbin	"levels\ending.bin"
000928EC 00                         		even
000928EC 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
000928F0                            
000928F0                            
000928F0                            Art_BigRing:	incbin	"artunc\Giant Ring.bin"
00093530                            		even
00093530                            
00093600                            
00093600                            ; ---------------------------------------------------------------------------
00093600                            ; Sprite locations index
00093600                            ; ---------------------------------------------------------------------------
00093600                            ObjPos_Index:
00093600                            		; GHZ
00093600 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093604 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093608 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009360C 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093610                            		; LZ
00093610 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093614 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093618 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009361C 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093620                            		; MZ
00093620 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093624 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093628 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009362C 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093630                            		; SLZ
00093630 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093634 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093638 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009363C 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093640                            		; SYZ
00093640 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093644 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093648 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009364C 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093650                            		; SBZ
00093650 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093654 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093658 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009365C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093660                            		; Ending
00093660 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093664 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093668 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009366C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093670                            		; --- Put extra object data here. ---
00093670                            ObjPosLZPlatform_Index:
00093670 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00093674 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
00093678 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0009367C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00093680                            ObjPosSBZPlatform_Index:
00093680 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00093684 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
00093688 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0009368C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00093690 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00093696                            ObjPos_GHZ1:	incbin	"objpos\ghz1.bin"
00093D1A                            		even
00093D1A                            ObjPos_GHZ2:	incbin	"objpos\ghz2.bin"
00094338                            		even
00094338                            		incbin	"objpos\ghz3 (JP1).bin"
0009494A                            		even
0009494A                            		incbin	"objpos\lz1 (JP1).bin"
00094980                            		even
00094980                            ObjPos_LZ2:	incbin	"objpos\lz2.bin"
00094CC2                            		even
00094CC2                            		incbin	"objpos\lz3 (JP1).bin"
00095286                            		even
00095286                            ObjPos_SBZ3:	incbin	"objpos\sbz3.bin"
000957F0                            		even
000957F0                            ObjPos_LZ1pf1:	incbin	"objpos\lz1pf1.bin"
00095822                            		even
00095822                            ObjPos_LZ1pf2:	incbin	"objpos\lz1pf2.bin"
00095854                            		even
00095854                            ObjPos_LZ2pf1:	incbin	"objpos\lz2pf1.bin"
00095886                            		even
00095886                            ObjPos_LZ2pf2:	incbin	"objpos\lz2pf2.bin"
000958B8                            		even
000958B8                            ObjPos_LZ3pf1:	incbin	"objpos\lz3pf1.bin"
00095902                            		even
00095902                            ObjPos_LZ3pf2:	incbin	"objpos\lz3pf2.bin"
00095940                            		even
00095940                            		incbin	"objpos\mz1 (JP1).bin"
00095F0A                            		even
00095F0A                            ObjPos_MZ2:	incbin	"objpos\mz2.bin"
00096522                            		even
00096522                            ObjPos_MZ3:	incbin	"objpos\mz3.bin"
00096810                            		even
00096810                            ObjPos_SLZ1:	incbin	"objpos\slz1.bin"
00096D44                            		even
00096D44                            ObjPos_SLZ2:	incbin	"objpos\slz2.bin"
000971AC                            		even
000971AC                            ObjPos_SLZ3:	incbin	"objpos\slz3.bin"
0009778E                            		even
0009778E                            ObjPos_SYZ1:	incbin	"objpos\syz1.bin"
000977E2                            		even
000977E2                            ObjPos_SYZ2:	incbin	"objpos\syz2.bin"
0009781E                            		even
0009781E                            		incbin	"objpos\syz3 (JP1).bin"
00097884                            		even
00097884                            		incbin	"objpos\sbz1 (JP1).bin"
000978CC                            		even
000978CC                            ObjPos_SBZ2:	incbin	"objpos\sbz2.bin"
000978F6                            		even
000978F6                            ObjPos_FZ:	incbin	"objpos\fz.bin"
00097932                            		even
00097932                            ObjPos_SBZ1pf1:	incbin	"objpos\sbz1pf1.bin"
00097964                            		even
00097964                            ObjPos_SBZ1pf2:	incbin	"objpos\sbz1pf2.bin"
00097996                            		even
00097996                            ObjPos_SBZ1pf3:	incbin	"objpos\sbz1pf3.bin"
000979C8                            		even
000979C8                            ObjPos_SBZ1pf4:	incbin	"objpos\sbz1pf4.bin"
000979FA                            		even
000979FA                            ObjPos_SBZ1pf5:	incbin	"objpos\sbz1pf5.bin"
00097A2C                            		even
00097A2C                            ObjPos_SBZ1pf6:	incbin	"objpos\sbz1pf6.bin"
00097A64                            		even
00097A64                            ObjPos_End:	incbin	"objpos\ending.bin"
00097BC0                            		even
00097BC0 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00097BC6                            
00097BC6                            		dcb.b $63C,$FF
00098202                            		;dcb.b ($10000-(*%$10000))-(EndOfRom-SoundDriver),$FF
00098202                            
00098202                            SoundDriver:	include "s1.sounddriver.asm"
00098202                            ; ---------------------------------------------------------------------------
00098202                            ; Modified (early?) SMPS 68k Type 1b
00098202                            ; ---------------------------------------------------------------------------
00098202                            ; Go_SoundTypes:
00098202 0000 0000                  Go_SoundPriorities:	dc.l SoundPriorities
00098206                            ; Go_SoundD0:
00098206 0000 0000                  Go_SpecSoundIndex:	dc.l SpecSoundIndex
0009820A 0000 0000                  Go_MusicIndex:		dc.l MusicIndex
0009820E 0000 0000                  Go_SoundIndex:		dc.l SoundIndex
00098212                            ; off_719A0:
00098212 0000 0000                  Go_SpeedUpIndex:	dc.l SpeedUpIndex
00098216 0000 0000                  Go_PSGIndex:		dc.l PSG_Index
0009821A                            ; ---------------------------------------------------------------------------
0009821A                            ; PSG instruments used in music
0009821A                            ; ---------------------------------------------------------------------------
0009821A                            PSG_Index:
0009821A 0000 0000 0000 0000 0000+  		dc.l PSG1, PSG2, PSG3
00098226 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00098232 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0009823E                            PSG1:		incbin	"sound/psg/psg1.bin"
00098255                            PSG2:		incbin	"sound/psg/psg2.bin"
0009825C                            PSG3:		incbin	"sound/psg/psg3.bin"
0009826D                            PSG4:		incbin	"sound/psg/psg4.bin"
00098278                            PSG6:		incbin	"sound/psg/psg6.bin"
00098287                            PSG5:		incbin	"sound/psg/psg5.bin"
000982B1                            PSG7:		incbin	"sound/psg/psg7.bin"
000982CD                            PSG8:		incbin	"sound/psg/psg8.bin"
000982F5                            PSG9:		incbin	"sound/psg/psg9.bin"
00098306                            ; ---------------------------------------------------------------------------
00098306                            ; New tempos for songs during speed shoes
00098306                            ; ---------------------------------------------------------------------------
00098306                            ; DANGER! several songs will use the first few bytes of MusicIndex as their main
00098306                            ; tempos while speed shoes are active. If you don't want that, you should add
00098306                            ; their "correct" sped-up main tempos to the list.
00098306                            ; byte_71A94:
00098306                            SpeedUpIndex:
00098306 07                         		dc.b 7		; GHZ
00098307 72                         		dc.b $72	; LZ
00098308 73                         		dc.b $73	; MZ
00098309 26                         		dc.b $26	; SLZ
0009830A 15                         		dc.b $15	; SYZ
0009830B 08                         		dc.b 8		; SBZ
0009830C FF                         		dc.b $FF	; Invincibility
0009830D 05                         		dc.b 5		; Extra Life
0009830E                            		;dc.b ?		; Special Stage
0009830E                            		;dc.b ?		; Title Screen
0009830E                            		;dc.b ?		; Ending
0009830E                            		;dc.b ?		; Boss
0009830E                            		;dc.b ?		; FZ
0009830E                            		;dc.b ?		; Sonic Got Through
0009830E                            		;dc.b ?		; Game Over
0009830E                            		;dc.b ?		; Continue Screen
0009830E                            		;dc.b ?		; Credits
0009830E                            		;dc.b ?		; Drowning
0009830E                            		;dc.b ?		; Get Emerald
0009830E                            
0009830E                            ; ---------------------------------------------------------------------------
0009830E                            ; Music	Pointers
0009830E                            ; ---------------------------------------------------------------------------
0009830E                            MusicIndex:
0009830E 0000 0000                  ptr_mus81:	dc.l Music81
00098312 0000 0000                  ptr_mus82:	dc.l Music82
00098316 0000 0000                  ptr_mus83:	dc.l Music83
0009831A 0000 0000                  ptr_mus84:	dc.l Music84
0009831E 0000 0000                  ptr_mus85:	dc.l Music85
00098322 0000 0000                  ptr_mus86:	dc.l Music86
00098326 0000 0000                  ptr_mus87:	dc.l Music87
0009832A 0000 0000                  ptr_mus88:	dc.l Music88
0009832E 0000 0000                  ptr_mus89:	dc.l Music89
00098332 0000 0000                  ptr_mus8A:	dc.l Music8A
00098336 0000 0000                  ptr_mus8B:	dc.l Music8B
0009833A 0000 0000                  ptr_mus8C:	dc.l Music8C
0009833E 0000 0000                  ptr_mus8D:	dc.l Music8D
00098342 0000 0000                  ptr_mus8E:	dc.l Music8E
00098346 0000 0000                  ptr_mus8F:	dc.l Music8F
0009834A 0000 0000                  ptr_mus90:	dc.l Music90
0009834E 0000 0000                  ptr_mus91:	dc.l Music91
00098352 0000 0000                  ptr_mus92:	dc.l Music92
00098356 0000 0000                  ptr_mus93:	dc.l Music93
0009835A 0000 0000                  ptr_mus94:	dc.l Music94
0009835E 0000 0000                  ptr_mus95:	dc.l Music95
00098362 0000 0000                  ptr_mus96:	dc.l Music96
00098366 0000 0000                  ptr_mus97:	dc.l Music97
0009836A 0000 0000                  ptr_mus98:	dc.l Music98
0009836E 0000 0000                  ptr_mus99:	dc.l Music99
00098372 0000 0000                  ptr_mus9A:	dc.l Music9A
00098376 0000 0000                  ptr_mus9B:	dc.l Music9B
0009837A 0000 0000                  ptr_mus9C:	dc.l Music9C
0009837E                            ptr_musend
0009837E                            ; ---------------------------------------------------------------------------
0009837E                            ; Priority of sound. New music or SFX must have a priority higher than or equal
0009837E                            ; to what is stored in v_sndprio or it won't play. If bit 7 of new priority is
0009837E                            ; set ($80 and up), the new music or SFX will not set its priority -- meaning
0009837E                            ; any music or SFX can override it (as long as it can override whatever was
0009837E                            ; playing before). Usually, SFX will only override SFX, special SFX ($D0-$DF)
0009837E                            ; will only override special SFX and music will only override music.
0009837E                            ; ---------------------------------------------------------------------------
0009837E                            ; SoundTypes:
0009837E                            SoundPriorities:
0009837E 9090 9090 9090 9090 9090+  		dc.b     $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $81
0009838D 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $90
0009839D 8070 7070 7070 7070 7070+  		dc.b $80,$70,$70,$70,$70,$70,$70,$70,$70,$70,$68,$70,$70,$70,$60,$70	; $A0
000983AD 7060 7060 7070 7070 7070+  		dc.b $70,$60,$70,$60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$7F	; $B0
000983BD 6070 7070 7070 7070 7070+  		dc.b $60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $C0
000983CD 8080 8080 8080 8080 8080+  		dc.b $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80	; $D0
000983DD 9090 9090 90               		dc.b $90,$90,$90,$90,$90                                            	; $E0
000983E2                            
000983E2                            ; ---------------------------------------------------------------------------
000983E2                            ; Subroutine to update music more than once per frame
000983E2                            ; (Called by horizontal & vert. interrupts)
000983E2                            ; ---------------------------------------------------------------------------
000983E2                            
000983E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000983E2                            
000983E2                            ; sub_71B4C:
000983E2                            UpdateMusic:
000983E2 33FC 0100 00A1 1100        		stopZ80
000983EA 4E71                       		nop	
000983EC 4E71                       		nop	
000983EE 4E71                       		nop	
000983F0                            ; loc_71B5A:
000983F0                            @updateloop:
000983F0 0839 0000 00A1 1100        		btst	#0,(z80_bus_request).l		; Is the z80 busy?
000983F8 66F6                       		bne.s	@updateloop			; If so, wait
000983FA                            
000983FA 0839 0007 00A0 1FFD        		btst	#7,(z80_dac_status).l		; Is DAC accepting new samples?
00098402 6700                       		beq.s	@driverinput			; Branch if yes
00098404 33FC 0000 00A1 1100        		startZ80
0009840C 4E71                       		nop	
0009840E 4E71                       		nop	
00098410 4E71                       		nop	
00098412 4E71                       		nop	
00098414 4E71                       		nop	
00098416 60CA                       		bra.s	UpdateMusic
00098418                            ; ===========================================================================
00098418                            ; loc_71B82:
00098418                            @driverinput:
00098418 4DF9 00FF F000             		lea	(v_snddriver_ram&$FFFFFF).l,a6
0009841E 422E 000E                  		clr.b	f_voice_selector(a6)
00098422 4A2E 0003                  		tst.b	f_pausemusic(a6)		; is music paused?
00098426 6600 0000                  		bne.w	PauseMusic			; if yes, branch
0009842A 532E 0001                  		subq.b	#1,v_main_tempo_timeout(a6)	; Has main tempo timer expired?
0009842E 6600                       		bne.s	@skipdelay
00098430 4EBA 0000                  		jsr	TempoWait(pc)
00098434                            ; loc_71B9E:
00098434                            @skipdelay:
00098434 102E 0004                  		move.b	v_fadeout_counter(a6),d0
00098438 6700                       		beq.s	@skipfadeout
0009843A 4EBA 0000                  		jsr	DoFadeOut(pc)
0009843E                            ; loc_71BA8:
0009843E                            @skipfadeout:
0009843E 4A2E 0024                  		tst.b	f_fadein_flag(a6)
00098442 6700                       		beq.s	@skipfadein
00098444 4EBA 0000                  		jsr	DoFadeIn(pc)
00098448                            ; loc_71BB2:
00098448                            @skipfadein:
00098448                            		; DANGER! The following line only checks v_soundqueue0 and v_soundqueue1, breaking v_soundqueue2.
00098448 4A6E 000A                  		tst.w	v_soundqueue0(a6)	; is a music or sound queued for played?
0009844C 6700                       		beq.s	@nosndinput		; if not, branch
0009844E 4EBA 0000                  		jsr	CycleSoundQueue(pc)
00098452                            ; loc_71BBC:
00098452                            @nosndinput:
00098452 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; is song queue set for silence (empty)?
00098458 6700                       		beq.s	@nonewsound		; If yes, branch
0009845A 4EBA 0000                  		jsr	PlaySoundID(pc)
0009845E                            ; loc_71BC8:
0009845E                            @nonewsound:
0009845E 4A38 C901                  		tst.b	($FFFFC901).w
00098462 6700                       		beq.s	@cont
00098464 5338 C901                  		subq.b	#1,($FFFFC901).w
00098468                            		
00098468                            @cont:
00098468 4BEE 0040                  		lea	v_music_dac_track(a6),a5
0009846C 4A15                       		tst.b	(a5)			; Is DAC track playing? (TrackPlaybackControl)
0009846E 6A00                       		bpl.s	@dacdone		; Branch if not
00098470 4EBA 0000                  		jsr	DACUpdateTrack(pc)
00098474                            ; loc_71BD4:
00098474                            @dacdone:
00098474 422E 0008                  		clr.b	f_updating_dac(a6)
00098478 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
0009847A                            ; loc_71BDA:
0009847A                            @bgmfmloop:
0009847A DAFC 0030                  		adda.w	#TrackSz,a5
0009847E 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00098480 6A00                       		bpl.s	@bgmfmnext		; Branch if not
00098482 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00098486                            ; loc_71BE6:
00098486                            @bgmfmnext:
00098486 51CF FFF2                  		dbf	d7,@bgmfmloop
0009848A                            
0009848A 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks
0009848C                            ; loc_71BEC:
0009848C                            @bgmpsgloop:
0009848C DAFC 0030                  		adda.w	#TrackSz,a5
00098490 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00098492 6A00                       		bpl.s	@bgmpsgnext		; Branch if not
00098494 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00098498                            ; loc_71BF8:
00098498                            @bgmpsgnext:
00098498 51CF FFF2                  		dbf	d7,@bgmpsgloop
0009849C                            
0009849C 1D7C 0080 000E             		move.b	#$80,f_voice_selector(a6)			; Now at SFX tracks
000984A2 7E02                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d7	; 3 FM tracks (SFX)
000984A4                            ; loc_71C04:
000984A4                            @sfxfmloop:
000984A4 DAFC 0030                  		adda.w	#TrackSz,a5
000984A8 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000984AA 6A00                       		bpl.s	@sfxfmnext		; Branch if not
000984AC 4EBA 0000                  		jsr	FMUpdateTrack(pc)
000984B0                            ; loc_71C10:
000984B0                            @sfxfmnext:
000984B0 51CF FFF2                  		dbf	d7,@sfxfmloop
000984B4                            
000984B4 7E02                       		moveq	#((v_sfx_psg_tracks_end-v_sfx_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks (SFX)
000984B6                            ; loc_71C16:
000984B6                            @sfxpsgloop:
000984B6 DAFC 0030                  		adda.w	#TrackSz,a5
000984BA 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000984BC 6A00                       		bpl.s	@sfxpsgnext		; Branch of not
000984BE 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
000984C2                            ; loc_71C22:
000984C2                            @sfxpsgnext:
000984C2 51CF FFF2                  		dbf	d7,@sfxpsgloop
000984C6                            		
000984C6 1D7C 0040 000E             		move.b	#$40,f_voice_selector(a6) ; Now at special SFX tracks
000984CC DAFC 0030                  		adda.w	#TrackSz,a5
000984D0 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000984D2 6A00                       		bpl.s	@specfmdone		; Branch if not
000984D4 4EBA 0000                  		jsr	FMUpdateTrack(pc)
000984D8                            ; loc_71C38:
000984D8                            @specfmdone:
000984D8 DAFC 0030                  		adda.w	#TrackSz,a5
000984DC 4A15                       		tst.b	(a5)			; Is track playing (TrackPlaybackControl)
000984DE 6A00                       		bpl.s	DoStartZ80		; Branch if not
000984E0 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
000984E4                            ; loc_71C44:
000984E4                            DoStartZ80:
000984E4 33FC 0000 00A1 1100        		startZ80
000984EC 0838 0006 FFF8             		btst #6,(v_megadrive).w ; is Megadrive PAL?
000984F2 6700                       		beq.s @end ; if not, branch
000984F4 0C38 0005 F015             		cmpi.b #$5,(v_palmuscounter).w ; 5th frame?
000984FA 6600                       		bne.s @end ; if not, branch
000984FC 11FC 0000 F015             		move.b #$0,(v_palmuscounter).w ; reset counter
00098502 6000 FEDE                  		bra.w UpdateMusic ; run sound driver again
00098506                            
00098506                            	@end:
00098506 5238 F015                  		addq.b #$1,(v_palmuscounter).w ; add 1 to frame count
0009850A 4E75                       		rts
0009850C                            ; End of function UpdateMusic
0009850C                            
0009850C                            
0009850C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009850C                            
0009850C                            ; sub_71C4E: UpdateDAC:
0009850C                            DACUpdateTrack:
0009850C 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Has DAC sample timeout expired?
00098510 6600                       		bne.s	@locret				; Return if not
00098512 1D7C 0080 0008             		move.b	#$80,f_updating_dac(a6)		; Set flag to indicate this is the DAC
00098518                            ;DACDoNext:
00098518 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; DAC track data pointer
0009851C                            ; loc_71C5E:
0009851C                            @sampleloop:
0009851C 7A00                       		moveq	#0,d5
0009851E 1A1C                       		move.b	(a4)+,d5	; Get next SMPS unit
00098520 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
00098524 6500                       		blo.s	@notcoord	; Branch if not
00098526 4EBA 0000                  		jsr	CoordFlag(pc)
0009852A 60F0                       		bra.s	@sampleloop
0009852C                            ; ===========================================================================
0009852C                            ; loc_71C6E:
0009852C                            @notcoord:
0009852C 4A05                       		tst.b	d5			; Is it a sample?
0009852E 6A00                       		bpl.s	@gotduration		; Branch if not (duration)
00098530 1B45 0010                  		move.b	d5,TrackSavedDAC(a5)	; Store new sample
00098534 1A1C                       		move.b	(a4)+,d5		; Get another byte
00098536 6A00                       		bpl.s	@gotduration		; Branch if it is a duration
00098538 534C                       		subq.w	#1,a4			; Put byte back
0009853A 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5) ; Use last duration
00098540 6000                       		bra.s	@gotsampleduration
00098542                            ; ===========================================================================
00098542                            ; loc_71C84:
00098542                            @gotduration:
00098542 4EBA 0000                  		jsr	SetDuration(pc)
00098546                            ; loc_71C88:
00098546                            @gotsampleduration:
00098546 2B4C 0004                  		move.l	a4,TrackDataPointer(a5) ; Save pointer
0009854A 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
0009854E 6600                       		bne.s	@locret			; Return if yes
00098550 7000                       		moveq	#0,d0
00098552 102D 0010                  		move.b	TrackSavedDAC(a5),d0	; Get sample
00098556 0C00 0080                  		cmpi.b	#$80,d0			; Is it a rest?
0009855A 6700                       		beq.s	@locret			; Return if yes
0009855C 0800 0003                  		btst	#3,d0			; Is bit 3 set (samples between $88-$8F)?
00098560 6600                       		bne.s	@timpani		; Various timpani
00098562 13C0 00A0 1FFF             		move.b	d0,(z80_dac_sample).l
00098568                            ; locret_71CAA:
00098568                            @locret:
00098568 4E75                       		rts	
0009856A                            ; ===========================================================================
0009856A                            ; loc_71CAC:
0009856A                            @timpani:
0009856A 0400 0088                  		subi.b	#$88,d0		; Convert into an index
0009856E 103B 0000                  		move.b	DAC_sample_rate(pc,d0.w),d0
00098572                            		; Warning: this affects the raw pitch of sample $83, meaning it will
00098572                            		; use this value from then on.
00098572 13C0 00A0 00EA             		move.b	d0,(z80_dac3_pitch).l
00098578 13FC 0083 00A0 1FFF        		move.b	#$83,(z80_dac_sample).l	; Use timpani
00098580 4E75                       		rts	
00098582                            ; End of function DACUpdateTrack
00098582                            
00098582                            ; ===========================================================================
00098582                            ; Note: this only defines rates for samples $88-$8D, meaning $8E-$8F are invalid.
00098582                            ; Also, $8C-$8D are so slow you may want to skip them.
00098582                            ; byte_71CC4:
00098582 171A 2122 FFFF             DAC_sample_rate: dc.b $17, $1A, $21, $22, $FF, $FF
00098588                            
00098588                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098588                            
00098588                            ; sub_71CCA:
00098588                            FMUpdateTrack:
00098588 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5) ; Update duration timeout
0009858C 6600                       		bne.s	@notegoing		; Branch if it hasn't expired
0009858E 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
00098592 4EBA 0000                  		jsr	FMDoNext(pc)
00098596 4EBA 0000                  		jsr	FMPrepareNote(pc)
0009859A 6000 0000                  		bra.w	FMNoteOn
0009859E                            ; ===========================================================================
0009859E                            ; loc_71CE0:
0009859E                            @notegoing:
0009859E 4EBA 0000                  		jsr	NoteTimeoutUpdate(pc)
000985A2 4EBA 0000                  		jsr	DoModulation(pc)
000985A6 6000 0000                  		bra.w	FMUpdateFreq
000985AA                            ; End of function FMUpdateTrack
000985AA                            
000985AA                            
000985AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000985AA                            
000985AA                            ; sub_71CEC:
000985AA                            FMDoNext:
000985AA 286D 0004                  		movea.l	TrackDataPointer(a5),a4 ; Track data pointer
000985AE 0895 0001                  		bclr	#1,(a5)			; Clear 'track at rest' bit (TrackPlaybackControl)
000985B2                            ; loc_71CF4:
000985B2                            @noteloop:
000985B2 7A00                       		moveq	#0,d5
000985B4 1A1C                       		move.b	(a4)+,d5	; Get byte from track
000985B6 0C05 00E0                  		cmpi.b	#$E0,d5		; Is this a coord. flag?
000985BA 6500                       		blo.s	@gotnote	; Branch if not
000985BC 4EBA 0000                  		jsr	CoordFlag(pc)
000985C0 60F0                       		bra.s	@noteloop
000985C2                            ; ===========================================================================
000985C2                            ; loc_71D04:
000985C2                            @gotnote:
000985C2 4EBA 0000                  		jsr	FMNoteOff(pc)
000985C6 4A05                       		tst.b	d5		; Is this a note?
000985C8 6A00                       		bpl.s	@gotduration	; Branch if not
000985CA 4EBA 0000                  		jsr	FMSetFreq(pc)
000985CE 1A1C                       		move.b	(a4)+,d5	; Get another byte
000985D0 6A00                       		bpl.s	@gotduration	; Branch if it is a duration
000985D2 534C                       		subq.w	#1,a4		; Otherwise, put it back
000985D4 6000 0000                  		bra.w	FinishTrackUpdate
000985D8                            ; ===========================================================================
000985D8                            ; loc_71D1A:
000985D8                            @gotduration:
000985D8 4EBA 0000                  		jsr	SetDuration(pc)
000985DC 6000 0000                  		bra.w	FinishTrackUpdate
000985E0                            ; End of function FMDoNext
000985E0                            
000985E0                            
000985E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000985E0                            
000985E0                            ; sub_71D22:
000985E0                            FMSetFreq:
000985E0 0405 0080                  		subi.b	#$80,d5			; Make it a zero-based index
000985E4 6700                       		beq.s	TrackSetRest
000985E6 DA2D 0008                  		add.b	TrackTranspose(a5),d5	; Add track transposition
000985EA 0245 007F                  		andi.w	#$7F,d5			; Clear high byte and sign bit
000985EE E34D                       		lsl.w	#1,d5
000985F0 41FA 0000                  		lea	FMFrequencies(pc),a0
000985F4 3C30 5000                  		move.w	(a0,d5.w),d6
000985F8 3B46 0010                  		move.w	d6,TrackFreq(a5)	; Store new frequency
000985FC 4E75                       		rts	
000985FE                            ; End of function FMSetFreq
000985FE                            
000985FE                            
000985FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000985FE                            
000985FE                            ; sub_71D40:
000985FE                            SetDuration:
000985FE 1005                       		move.b	d5,d0
00098600 122D 0002                  		move.b	TrackTempoDivider(a5),d1	; Get dividing timing
00098604                            ; loc_71D46:
00098604                            @multloop:
00098604 5301                       		subq.b	#1,d1
00098606 6700                       		beq.s	@donemult
00098608 D005                       		add.b	d5,d0
0009860A 60F8                       		bra.s	@multloop
0009860C                            ; ===========================================================================
0009860C                            ; loc_71D4E:
0009860C                            @donemult:
0009860C 1B40 000F                  		move.b	d0,TrackSavedDuration(a5)	; Save duration
00098610 1B40 000E                  		move.b	d0,TrackDurationTimeout(a5)	; Save duration timeout
00098614 4E75                       		rts	
00098616                            ; End of function SetDuration
00098616                            
00098616                            ; ===========================================================================
00098616                            ; loc_71D58:
00098616                            TrackSetRest:
00098616 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
0009861A 426D 0010                  		clr.w	TrackFreq(a5)	; Clear frequency
0009861E                            
0009861E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009861E                            
0009861E                            ; sub_71D60:
0009861E                            FinishTrackUpdate:
0009861E 2B4C 0004                  		move.l	a4,TrackDataPointer(a5)	; Store new track position
00098622 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5)	; Reset note timeout
00098628 0815 0004                  		btst	#4,(a5)				; Is track set to not attack note? (TrackPlaybackControl)
0009862C 6600                       		bne.s	@locret				; If so, branch
0009862E 1B6D 0013 0012             		move.b	TrackNoteTimeoutMaster(a5),TrackNoteTimeout(a5)	; Reset note fill timeout
00098634 422D 000C                  		clr.b	TrackVolEnvIndex(a5)		; Reset PSG volume envelope index (even on FM tracks...)
00098638 0815 0003                  		btst	#3,(a5)				; Is modulation on? (TrackPlaybackControl)
0009863C 6700                       		beq.s	@locret				; If not, return (TrackPlaybackControl)
0009863E 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Modulation data pointer
00098642 1B58 0018                  		move.b	(a0)+,TrackModulationWait(a5)	; Reset wait
00098646 1B58 0019                  		move.b	(a0)+,TrackModulationSpeed(a5)	; Reset speed
0009864A 1B58 001A                  		move.b	(a0)+,TrackModulationDelta(a5)	; Reset delta
0009864E 1018                       		move.b	(a0)+,d0			; Get steps
00098650 E208                       		lsr.b	#1,d0				; Halve them
00098652 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; Then store
00098656 426D 001C                  		clr.w	TrackModulationVal(a5)		; Reset frequency change
0009865A                            ; locret_71D9C:
0009865A                            @locret:
0009865A 4E75                       		rts	
0009865C                            ; End of function FinishTrackUpdate
0009865C                            
0009865C                            
0009865C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009865C                            
0009865C                            ; sub_71D9E: NoteFillUpdate
0009865C                            NoteTimeoutUpdate:
0009865C 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)	; Is note fill on?
00098660 6700                       		beq.s	@locret
00098662 532D 0012                  		subq.b	#1,TrackNoteTimeout(a5)	; Update note fill timeout
00098666 6600                       		bne.s	@locret				; Return if it hasn't expired
00098668 08D5 0001                  		bset	#1,(a5)				; Put track at rest (TrackPlaybackControl)
0009866C 4A2D 0001                  		tst.b	TrackVoiceControl(a5)		; Is this a psg track?
00098670 6B00 0000                  		bmi.w	@psgnoteoff			; If yes, branch
00098674 4EBA 0000                  		jsr	FMNoteOff(pc)
00098678 584F                       		addq.w	#4,sp				; Do not return to caller
0009867A 4E75                       		rts	
0009867C                            ; ===========================================================================
0009867C                            ; loc_71DBE:
0009867C                            @psgnoteoff:
0009867C 4EBA 0000                  		jsr	PSGNoteOff(pc)
00098680 584F                       		addq.w	#4,sp		; Do not return to caller
00098682                            ; locret_71DC4:
00098682                            @locret:
00098682 4E75                       		rts	
00098684                            ; End of function NoteTimeoutUpdate
00098684                            
00098684                            
00098684                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098684                            
00098684                            ; sub_71DC6:
00098684                            DoModulation:
00098684 584F                       		addq.w	#4,sp				; Do not return to caller (but see below)
00098686 0815 0003                  		btst	#3,(a5)				; Is modulation active? (TrackPlaybackControl)
0009868A 6700                       		beq.s	@locret				; Return if not
0009868C 4A2D 0018                  		tst.b	TrackModulationWait(a5)	; Has modulation wait expired?
00098690 6700                       		beq.s	@waitdone			; If yes, branch
00098692 532D 0018                  		subq.b	#1,TrackModulationWait(a5)	; Update wait timeout
00098696 4E75                       		rts	
00098698                            ; ===========================================================================
00098698                            ; loc_71DDA:
00098698                            @waitdone:
00098698 532D 0019                  		subq.b	#1,TrackModulationSpeed(a5)	; Update speed
0009869C 6700                       		beq.s	@updatemodulation		; If it expired, want to update modulation
0009869E 4E75                       		rts	
000986A0                            ; ===========================================================================
000986A0                            ; loc_71DE2:
000986A0                            @updatemodulation:
000986A0 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Get modulation data
000986A4 1B68 0001 0019             		move.b	1(a0),TrackModulationSpeed(a5)	; Restore modulation speed
000986AA 4A2D 001B                  		tst.b	TrackModulationSteps(a5)	; Check number of steps
000986AE 6600                       		bne.s	@calcfreq			; If nonzero, branch
000986B0 1B68 0003 001B             		move.b	3(a0),TrackModulationSteps(a5)	; Restore from modulation data
000986B6 442D 001A                  		neg.b	TrackModulationDelta(a5)	; Negate modulation delta
000986BA 4E75                       		rts	
000986BC                            ; ===========================================================================
000986BC                            ; loc_71DFE:
000986BC                            @calcfreq:
000986BC 532D 001B                  		subq.b	#1,TrackModulationSteps(a5)	; Update modulation steps
000986C0 1C2D 001A                  		move.b	TrackModulationDelta(a5),d6	; Get modulation delta
000986C4 4886                       		ext.w	d6
000986C6 DC6D 001C                  		add.w	TrackModulationVal(a5),d6	; Add cumulative modulation change
000986CA 3B46 001C                  		move.w	d6,TrackModulationVal(a5)	; Store it
000986CE DC6D 0010                  		add.w	TrackFreq(a5),d6		; Add note frequency to it
000986D2 594F                       		subq.w	#4,sp		; In this case, we want to return to caller after all
000986D4                            ; locret_71E16:
000986D4                            @locret:
000986D4 4E75                       		rts	
000986D6                            ; End of function DoModulation
000986D6                            
000986D6                            
000986D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000986D6                            
000986D6                            ; sub_71E18:
000986D6                            FMPrepareNote:
000986D6 0815 0001                  		btst	#1,(a5)			; Is track resting? (TrackPlaybackControl)
000986DA 6600                       		bne.s	locret_71E48		; Return if so
000986DC 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get current note frequency
000986E0 6700                       		beq.s	FMSetRest		; Branch if zero
000986E2                            ; loc_71E24:
000986E2                            FMUpdateFreq:
000986E2 102D 001E                  		move.b	TrackDetune(a5),d0 	; Get detune value
000986E6 4880                       		ext.w	d0
000986E8 DC40                       		add.w	d0,d6			; Add note frequency
000986EA 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
000986EE 6600                       		bne.s	locret_71E48		; Return if so
000986F0 3206                       		move.w	d6,d1
000986F2 E049                       		lsr.w	#8,d1
000986F4 103C 00A4                  		move.b	#$A4,d0			; Register for upper 6 bits of frequency
000986F8 4EBA 0000                  		jsr	WriteFMIorII(pc)
000986FC 1206                       		move.b	d6,d1
000986FE 103C 00A0                  		move.b	#$A0,d0			; Register for lower 8 bits of frequency
00098702 4EBA 0000                  		jsr	WriteFMIorII(pc)	; (It would be better if this were a jmp)
00098706                            ; locret_71E48:
00098706                            locret_71E48:
00098706 4E75                       		rts	
00098708                            ; ===========================================================================
00098708                            ; loc_71E4A:
00098708                            FMSetRest:
00098708 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
0009870C 4E75                       		rts	
0009870E                            ; End of function FMPrepareNote
0009870E                            
0009870E                            ; ===========================================================================
0009870E                            ; loc_71E50:
0009870E                            PauseMusic:
0009870E 6B00                       		bmi.s	@unpausemusic		; Branch if music is being unpaused
00098710 0C2E 0002 0003             		cmpi.b	#2,f_pausemusic(a6)
00098716 6700 0000                  		beq.w	@unpausedallfm
0009871A 1D7C 0002 0003             		move.b	#2,f_pausemusic(a6)
00098720 7602                       		moveq	#2,d3
00098722 103C 00B4                  		move.b	#$B4,d0		; Command to set AMS/FMS/panning
00098726 7200                       		moveq	#0,d1		; No panning, AMS or FMS
00098728                            ; loc_71E6A:
00098728                            @killpanloop:
00098728 4EBA 0000                  		jsr	WriteFMI(pc)
0009872C 4EBA 0000                  		jsr	WriteFMII(pc)
00098730 5200                       		addq.b	#1,d0
00098732 51CB FFF4                  		dbf	d3,@killpanloop
00098736                            
00098736 7602                       		moveq	#2,d3
00098738 7028                       		moveq	#$28,d0		; Key on/off register
0009873A                            ; loc_71E7C:
0009873A                            @noteoffloop:
0009873A 1203                       		move.b	d3,d1		; FM1, FM2, FM3
0009873C 4EBA 0000                  		jsr	WriteFMI(pc)
00098740 5801                       		addq.b	#4,d1		; FM4, FM5, FM6
00098742 4EBA 0000                  		jsr	WriteFMI(pc)
00098746 51CB FFF2                  		dbf	d3,@noteoffloop
0009874A                            
0009874A 4EBA 0000                  		jsr	PSGSilenceAll(pc)
0009874E 6000 FD94                  		bra.w	DoStartZ80
00098752                            ; ===========================================================================
00098752                            ; loc_71E94:
00098752                            @unpausemusic:
00098752 422E 0003                  		clr.b	f_pausemusic(a6)
00098756 7630                       		moveq	#TrackSz,d3
00098758 4BEE 0040                  		lea	v_music_fmdac_tracks(a6),a5
0009875C 7806                       		moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d4	; 6 FM + 1 DAC tracks
0009875E                            ; loc_71EA0:
0009875E                            @bgmfmloop:
0009875E 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00098762 6700                       		beq.s	@bgmfmnext		; Branch if not
00098764 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00098768 6600                       		bne.s	@bgmfmnext		; Branch if yes
0009876A 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
0009876E 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00098772 4EBA 0000                  		jsr	WriteFMIorII(pc)
00098776                            ; loc_71EB8:
00098776                            @bgmfmnext:
00098776 DAC3                       		adda.w	d3,a5
00098778 51CC FFE4                  		dbf	d4,@bgmfmloop
0009877C                            
0009877C 4BEE 0220                  		lea	v_sfx_fm_tracks(a6),a5
00098780 7802                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d4	; 3 FM tracks (SFX)
00098782                            ; loc_71EC4:
00098782                            @sfxfmloop:
00098782 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00098786 6700                       		beq.s	@sfxfmnext		; Branch if not
00098788 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
0009878C 6600                       		bne.s	@sfxfmnext		; Branch if yes
0009878E 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00098792 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00098796 4EBA 0000                  		jsr	WriteFMIorII(pc)
0009879A                            ; loc_71EDC:
0009879A                            @sfxfmnext:
0009879A DAC3                       		adda.w	d3,a5
0009879C 51CC FFE4                  		dbf	d4,@sfxfmloop
000987A0                            
000987A0 4BEE 0340                  		lea	v_spcsfx_track_ram(a6),a5
000987A4 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
000987A8 6700                       		beq.s	@unpausedallfm		; Branch if not
000987AA 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
000987AE 6600                       		bne.s	@unpausedallfm		; Branch if yes
000987B0 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
000987B4 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
000987B8 4EBA 0000                  		jsr	WriteFMIorII(pc)
000987BC                            ; loc_71EFE:
000987BC                            @unpausedallfm:
000987BC 6000 FD26                  		bra.w	DoStartZ80
000987C0                            
000987C0                            ; ---------------------------------------------------------------------------
000987C0                            ; Subroutine to	play a sound or	music track
000987C0                            ; ---------------------------------------------------------------------------
000987C0                            
000987C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000987C0                            
000987C0                            ; Sound_Play:
000987C0                            CycleSoundQueue:
000987C0 2079 0009 8202             		movea.l	(Go_SoundPriorities).l,a0
000987C6 43EE 000A                  		lea	v_soundqueue0(a6),a1	; load music track number
000987CA 1616                       		move.b	v_sndprio(a6),d3	; Get priority of currently playing SFX
000987CC 7802                       		moveq	#2,d4			; Number of queues-1 (v_soundqueue0, v_soundqueue1, v_soundqueue2)
000987CE                            ; loc_71F12:
000987CE                            @inputloop:
000987CE 1011                       		move.b	(a1),d0			; move track number to d0
000987D0 1200                       		move.b	d0,d1
000987D2 4219                       		clr.b	(a1)+			; Clear entry
000987D4 0400 0081                  		subi.b	#bgm__First,d0		; Make it into 0-based index
000987D8 6500                       		bcs.s	@nextinput		; If negative (i.e., it was $80 or lower), branch
000987DA 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; Is v_sound_id a $80 (silence/empty)?
000987E0 6700                       		beq.s	@havesound		; If yes, branch
000987E2 1D41 000A                  		move.b	d1,v_soundqueue0(a6)	; Put sound into v_soundqueue0
000987E6 6000                       		bra.s	@nextinput
000987E8                            ; ===========================================================================
000987E8                            ; loc_71F2C:
000987E8                            @havesound:
000987E8 0240 007F                  		andi.w	#$7F,d0			; Clear high byte and sign bit
000987EC 1430 0000                  		move.b	(a0,d0.w),d2		; Get sound type
000987F0 B403                       		cmp.b	d3,d2			; Is it a lower priority sound?
000987F2 6500                       		blo.s	@nextinput		; Branch if yes
000987F4 1602                       		move.b	d2,d3			; Store new priority
000987F6 1D41 0009                  		move.b	d1,v_sound_id(a6)	; Queue sound for play
000987FA                            ; loc_71F3E:
000987FA                            @nextinput:
000987FA 51CC FFD2                  		dbf	d4,@inputloop
000987FE                            
000987FE 4A03                       		tst.b	d3			; We don't want to change sound priority if it is negative
00098800 6B00                       		bmi.s	@locret
00098802 1C83                       		move.b	d3,v_sndprio(a6)	; Set new sound priority
00098804                            ; locret_71F4A:
00098804                            @locret:
00098804 4E75                       		rts	
00098806                            ; End of function CycleSoundQueue
00098806                            
00098806                            
00098806                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098806                            
00098806                            ; Sound_ChkValue:
00098806                            PlaySoundID:
00098806 7E00                       		moveq	#0,d7
00098808 1E2E 0009                  		move.b	v_sound_id(a6),d7
0009880C 6700 0000                  		beq.w	StopAllSound
00098810 6A00                       		bpl.s	@locret			; If >= 0, return (not a valid sound, bgm or command)
00098812 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; reset	music flag
00098818                            		; DANGER! Music ends at $93, yet this checks until $9F; attempting to
00098818                            		; play sounds $94-$9F will cause a crash! Remove the '+$C' to fix this.
00098818                            		; See LevSel_NoCheat for more.
00098818 0C07 0000                  		cmpi.b	#bgm__Last,d7	; Is this music ($81-$9F)?
0009881C 6300 0000                  		bls.w	Sound_PlayBGM		; Branch if yes
00098820 0C07 00A0                  		cmpi.b	#sfx__First,d7		; Is this after music but before sfx? (redundant check)
00098824 6500 0000                  		blo.w	@locret			; Return if yes
00098828 0C07 0000                  		cmpi.b	#sfx__Last,d7		; Is this sfx ($A0-$CF)?
0009882C 6300 0000                  		bls.w	Sound_PlaySFX		; Branch if yes
00098830 0C07 00D0                  		cmpi.b	#spec__First,d7		; Is this after sfx but before special sfx? (redundant check)
00098834 6500 0000                  		blo.w	@locret			; Return if yes
00098838 0C07 00D1                  		cmpi.b	#$D1,d7
0009883C 6500 0000                  		bcs.w	Sound_PlaySpecial
00098840 0C07 00DF                  		cmp.b	#$DF,d7
00098844 6F00 0000                  		ble.w	Sound_D1toDF
00098848 0C07 00E0                  		cmpi.b	#flg__First,d7		; Is this after special sfx but before $E0?
0009884C 6500 0000                  		blo.w	@locret			; Return if yes
00098850 0C07 0000                  		cmpi.b	#flg__Last,d7		; Is this $E0-$E4?
00098854 6300                       		bls.s	Sound_E0toE4		; Branch if yes
00098856                            ; locret_71F8C:
00098856                            @locret:
00098856 4E75                       		rts	
00098858                            ; ===========================================================================
00098858                            
00098858                            Sound_E0toE4:
00098858 0407 00E0                  		subi.b	#flg__First,d7
0009885C E54F                       		lsl.w	#2,d7
0009885E 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00098862                            ; ===========================================================================
00098862                            
00098862                            Sound_ExIndex:
00098862 6000 0000                  ptr_flgE0:	bra.w	FadeOutMusic		; $E0
00098866 6000 0000                  ptr_flgE1:	bra.w	PlaySegaSound		; $E1
0009886A 6000 0000                  ptr_flgE2:	bra.w	SpeedUpMusic		; $E2
0009886E 6000 0000                  ptr_flgE3:	bra.w	SlowDownMusic		; $E3
00098872 6000 0000                  ptr_flgE4:	bra.w	StopAllSound		; $E4
00098876                            ptr_flgend
00098876                            ; ===========================================================================
00098876                            ; ---------------------------------------------------------------------------
00098876                            ; Play "Say-gaa" PCM sound
00098876                            ; ---------------------------------------------------------------------------
00098876                            ; Sound_E1: PlaySega:
00098876                            PlaySegaSound:
00098876 13FC 0088 00A0 1FFF        		move.b	#$88,(z80_dac_sample).l	; Queue Sega PCM
0009887E 33FC 0000 00A1 1100        		startZ80
00098886 323C 0011                  		move.w	#$11,d1
0009888A                            ; loc_71FC0:
0009888A                            @busyloop_outer:
0009888A 303C FFFF                  		move.w	#-1,d0
0009888E                            ; loc_71FC4:
0009888E                            @busyloop:
0009888E 4E71                       		nop	
00098890 51C8 FFFC                  		dbf	d0,@busyloop
00098894                            
00098894 51C9 FFF4                  		dbf	d1,@busyloop_outer
00098898                            
00098898 584F                       		addq.w	#4,sp	; Tamper return value so we don't return to caller
0009889A 4E75                       		rts	
0009889C                            ; ===========================================================================
0009889C                            ; ---------------------------------------------------------------------------
0009889C                            ; Play music track $81-$9F
0009889C                            ; ---------------------------------------------------------------------------
0009889C                            ; Sound_81to9F:
0009889C                            Sound_PlayBGM:
0009889C 0C07 0000                  		cmpi.b	#bgm_ExtraLife,d7	; is the "extra life" music to be played?
000988A0 6600                       		bne.s	@bgmnot1up		; if not, branch
000988A2 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is a 1-up music playing?
000988A6 6600 0000                  		bne.w	@locdblret		; if yes, branch
000988AA 4BEE 0040                  		lea	v_music_track_ram(a6),a5
000988AE 7009                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d0	; 1 DAC + 6 FM + 3 PSG tracks
000988B0                            ; loc_71FE6:
000988B0                            @clearsfxloop:
000988B0 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
000988B4 DAFC 0030                  		adda.w	#TrackSz,a5
000988B8 51C8 FFF6                  		dbf	d0,@clearsfxloop
000988BC                            
000988BC 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
000988C0 7005                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d0	; 3 FM + 3 PSG tracks (SFX)
000988C2                            ; loc_71FF8:
000988C2                            @cleartrackplayloop:
000988C2 0895 0007                  		bclr	#7,(a5)			; Clear 'track is playing' bit (TrackPlaybackControl)
000988C6 DAFC 0030                  		adda.w	#TrackSz,a5
000988CA 51C8 FFF6                  		dbf	d0,@cleartrackplayloop
000988CE                            
000988CE 4216                       		clr.b	v_sndprio(a6)		; Clear priority
000988D0 204E                       		movea.l	a6,a0
000988D2 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
000988D6 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Backup $220 bytes: all variables and music track data
000988DA                            ; loc_72012:
000988DA                            @backupramloop:
000988DA 22D8                       		move.l	(a0)+,(a1)+
000988DC 51C8 FFFC                  		dbf	d0,@backupramloop
000988E0                            
000988E0 1D7C 0080 0027             		move.b	#$80,f_1up_playing(a6)
000988E6 4216                       		clr.b	v_sndprio(a6)		; Clear priority again (?)
000988E8 6000                       		bra.s	@bgm_loadMusic
000988EA                            ; ===========================================================================
000988EA                            ; loc_72024:
000988EA                            @bgmnot1up:
000988EA 422E 0027                  		clr.b	f_1up_playing(a6)
000988EE 422E 0026                  		clr.b	v_fadein_counter(a6)
000988F2                            ; loc_7202C:
000988F2                            @bgm_loadMusic:
000988F2 4EBA 0000                  		jsr	InitMusicPlayback(pc)
000988F6 2879 0009 8212             		movea.l	(Go_SpeedUpIndex).l,a4
000988FC 0407 0081                  		subi.b	#bgm__First,d7
00098900 1D74 7000 0029             		move.b	(a4,d7.w),v_speeduptempo(a6)
00098906 2879 0009 820A             		movea.l	(Go_MusicIndex).l,a4
0009890C E54F                       		lsl.w	#2,d7
0009890E 2874 7000                  		movea.l	(a4,d7.w),a4		; a4 now points to (uncompressed) song data
00098912 7000                       		moveq	#0,d0
00098914 3014                       		move.w	(a4),d0			; load voice pointer
00098916 D08C                       		add.l	a4,d0			; It is a relative pointer
00098918 2D40 0018                  		move.l	d0,v_voice_ptr(a6)
0009891C 102C 0005                  		move.b	5(a4),d0		; load tempo
00098920 1D40 0028                  		move.b	d0,v_tempo_mod(a6)
00098924                            		;tst.b	f_speedup(a6)
00098924                            		;beq.s	@nospeedshoes
00098924                            		;move.b	v_speeduptempo(a6),d0
00098924                            ; loc_72068:
00098924                            ;@nospeedshoes:
00098924 1D40 0002                  		move.b	d0,v_main_tempo(a6)
00098928 1D40 0001                  		move.b	d0,v_main_tempo_timeout(a6)
0009892C 7200                       		moveq	#0,d1
0009892E 264C                       		movea.l	a4,a3
00098930 5C4C                       		addq.w	#6,a4			; Point past header
00098932 7E00                       		moveq	#0,d7
00098934 1E2B 0002                  		move.b	2(a3),d7		; load number of FM+DAC tracks
00098938 6700 0000                  		beq.w	@bgm_fmdone		; branch if zero
0009893C 5307                       		subq.b	#1,d7
0009893E 123C 00C0                  		move.b	#$C0,d1			; Default AMS+FMS+Panning
00098942 182B 0004                  		move.b	4(a3),d4		; load tempo dividing timing
00098946 7C30                       		moveq	#TrackSz,d6
00098948 1A3C 0001                  		move.b	#1,d5			; Note duration for first "note"
0009894C 43EE 0040                  		lea	v_music_fmdac_tracks(a6),a1
00098950 45FA 0000                  		lea	FMDACInitBytes(pc),a2
00098954                            ; loc_72098:
00098954                            @bmg_fmloadloop:
00098954 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
00098958 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
0009895C 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
00098960 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
00098964 1341 000A                  		move.b	d1,TrackAMSFMSPan(a1)		; Set AMS/FMS/Panning
00098968 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
0009896C 7000                       		moveq	#0,d0
0009896E 301C                       		move.w	(a4)+,d0			; load DAC/FM pointer
00098970 D08B                       		add.l	a3,d0				; Relative pointer
00098972 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00098976 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load FM channel modifier
0009897A D2C6                       		adda.w	d6,a1
0009897C 51CF FFD6                  		dbf	d7,@bmg_fmloadloop
00098980                            		
00098980 0C2B 0007 0002             		cmpi.b	#7,2(a3)	; Are 7 FM tracks defined?
00098986 6600                       		bne.s	@silencefm6
00098988 702B                       		moveq	#$2B,d0		; DAC enable/disable register
0009898A 7200                       		moveq	#0,d1		; Disable DAC
0009898C 4EBA 0000                  		jsr	WriteFMI(pc)
00098990 6000 0000                  		bra.w	@bgm_fmdone
00098994                            ; ===========================================================================
00098994                            ; loc_720D8:
00098994                            @silencefm6:
00098994 7028                       		moveq	#$28,d0		; Key on/off register
00098996 7206                       		moveq	#6,d1		; Note off on all operators of channel 6
00098998 4EBA 0000                  		jsr	WriteFMI(pc)
0009899C 103C 0042                  		move.b	#$42,d0		; TL for operator 1 of FM6
000989A0 727F                       		moveq	#$7F,d1		; Total silence
000989A2 4EBA 0000                  		jsr	WriteFMII(pc)
000989A6 103C 004A                  		move.b	#$4A,d0		; TL for operator 3 of FM6
000989AA 727F                       		moveq	#$7F,d1		; Total silence
000989AC 4EBA 0000                  		jsr	WriteFMII(pc)
000989B0 103C 0046                  		move.b	#$46,d0		; TL for operator 2 of FM6
000989B4 727F                       		moveq	#$7F,d1		; Total silence
000989B6 4EBA 0000                  		jsr	WriteFMII(pc)
000989BA 103C 004E                  		move.b	#$4E,d0		; TL for operator 4 of FM6
000989BE 727F                       		moveq	#$7F,d1		; Total silence
000989C0 4EBA 0000                  		jsr	WriteFMII(pc)
000989C4 103C 00B6                  		move.b	#$B6,d0		; AMS/FMS/panning of FM6
000989C8 123C 00C0                  		move.b	#$C0,d1		; Stereo
000989CC 4EBA 0000                  		jsr	WriteFMII(pc)
000989D0                            ; loc_72114:
000989D0                            @bgm_fmdone:
000989D0 7E00                       		moveq	#0,d7
000989D2 1E2B 0003                  		move.b	3(a3),d7	; Load number of PSG tracks
000989D6 6700                       		beq.s	@bgm_psgdone	; branch if zero
000989D8 5307                       		subq.b	#1,d7
000989DA 43EE 0190                  		lea	v_music_psg_tracks(a6),a1
000989DE 45FA 0000                  		lea	PSGInitBytes(pc),a2
000989E2                            ; loc_72126:
000989E2                            @bgm_psgloadloop:
000989E2 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
000989E6 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
000989EA 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
000989EE 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
000989F2 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
000989F6 7000                       		moveq	#0,d0
000989F8 301C                       		move.w	(a4)+,d0			; load PSG channel pointer
000989FA D08B                       		add.l	a3,d0				; Relative pointer
000989FC 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00098A00 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load PSG modifier
00098A04 101C                       		move.b	(a4)+,d0			; load redundant byte
00098A06 135C 000B                  		move.b	(a4)+,TrackVoiceIndex(a1)	; Initial PSG tone
00098A0A D2C6                       		adda.w	d6,a1
00098A0C 51CF FFD4                  		dbf	d7,@bgm_psgloadloop
00098A10                            ; loc_72154:
00098A10                            @bgm_psgdone:
00098A10 43EE 0220                  		lea	v_sfx_track_ram(a6),a1
00098A14 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 6 SFX tracks
00098A16                            ; loc_7215A:
00098A16                            @sfxstoploop:
00098A16 4A11                       		tst.b	(a1)		; Is SFX playing? (TrackPlaybackControl)
00098A18 6A00 0000                  		bpl.w	@sfxnext	; Branch if not
00098A1C 7000                       		moveq	#0,d0
00098A1E 1029 0001                  		move.b	TrackVoiceControl(a1),d0 ; Get voice control bits
00098A22 6B00                       		bmi.s	@sfxpsgchannel		; Branch if this is a PSG channel
00098A24 5500                       		subq.b	#2,d0			; SFX can't have FM1 or FM2
00098A26 E508                       		lsl.b	#2,d0			; Convert to index
00098A28 6000                       		bra.s	@gotchannelindex
00098A2A                            ; ===========================================================================
00098A2A                            ; loc_7216E:
00098A2A                            @sfxpsgchannel:
00098A2A E608                       		lsr.b	#3,d0		; Convert to index
00098A2C                            ; loc_72170:
00098A2C                            @gotchannelindex:
00098A2C 41FA 0000                  		lea	SFX_BGMChannelRAM(pc),a0
00098A30 2070 0000                  		movea.l	(a0,d0.w),a0
00098A34 08D0 0002                  		bset	#2,(a0)		; Set 'SFX is overriding' bit (TrackPlaybackControl)
00098A38                            ; loc_7217C:
00098A38                            @sfxnext:
00098A38 D2C6                       		adda.w	d6,a1
00098A3A 51CF FFDA                  		dbf	d7,@sfxstoploop
00098A3E                            
00098A3E 4A6E 0340                  		tst.w	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00098A42 6A00                       		bpl.s	@checkspecialpsg				; Branch if not
00098A44 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00098A4A                            ; loc_7218E:
00098A4A                            @checkspecialpsg:
00098A4A 4A6E 0370                  		tst.w	v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00098A4E 6A00                       		bpl.s	@sendfmnoteoff					; Branch if not
00098A50 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00098A56                            ; loc_7219A:
00098A56                            @sendfmnoteoff:
00098A56 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00098A5A 7805                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d4	; 6 FM tracks
00098A5C                            ; loc_721A0:
00098A5C                            @fmnoteoffloop:
00098A5C 4EBA 0000                  		jsr	FMNoteOff(pc)
00098A60 DAC6                       		adda.w	d6,a5
00098A62 51CC FFF8                  		dbf	d4,@fmnoteoffloop		; run all FM tracks
00098A66 7802                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d4 ; 3 PSG tracks
00098A68                            ; loc_721AC:
00098A68                            @psgnoteoffloop:
00098A68 4EBA 0000                  		jsr	PSGNoteOff(pc)
00098A6C DAC6                       		adda.w	d6,a5
00098A6E 51CC FFF8                  		dbf	d4,@psgnoteoffloop		; run all PSG tracks
00098A72                            ; loc_721B6:
00098A72                            @locdblret:
00098A72 584F                       		addq.w	#4,sp	; Tamper with return value to not return to caller
00098A74 4E75                       		rts	
00098A76                            ; ===========================================================================
00098A76                            ; byte_721BA:
00098A76 0600 0102 0405 06          FMDACInitBytes:	dc.b 6,	0, 1, 2, 4, 5, 6	; first byte is for DAC; then notice the 0, 1, 2 then 4, 5, 6; this is the gap between parts I and II for YM2612 port writes
00098A7E 00                         		even
00098A7E                            ; byte_721C2:
00098A7E 80A0 C0                    PSGInitBytes:	dc.b $80, $A0, $C0	; Specifically, these configure writes to the PSG port for each channel
00098A82 00                         		even
00098A82                            ; ===========================================================================
00098A82                            ; ---------------------------------------------------------------------------
00098A82                            ; Play Spin Dash sound effect
00098A82                            ; ---------------------------------------------------------------------------
00098A82                            Sound_D1toDF:
00098A82 4A2E 0027                  		tst.b	$27(a6)
00098A86 6600 0000                  		bne.w	loc_722C6
00098A8A 4A2E 0004                  		tst.b	4(a6)
00098A8E 6600 0000                  		bne.w	loc_722C6
00098A92 4A2E 0024                  		tst.b	$24(a6)
00098A96 6600 0000                  		bne.w	loc_722C6
00098A9A 4238 C900                  		clr.b	($FFFFC900).w
00098A9E 0C07 00D5                  		cmp.b	#$D5,d7		; is this the Spin Dash sound?
00098AA2 6600                       		bne.s	@cont3	; if not, branch
00098AA4 3F00                       		move.w	d0,-(sp)
00098AA6 1038 C902                  		move.b	($FFFFC902).w,d0	; store extra frequency
00098AAA 4A38 C901                  		tst.b	($FFFFC901).w	; is the Spin Dash timer active?
00098AAE 6600                       		bne.s	@cont1		; if it is, branch
00098AB0 103C 00FF                  		move.b	#-1,d0		; otherwise, reset frequency (becomes 0 on next line)
00098AB4                            		
00098AB4                            @cont1:
00098AB4 5200                       		addq.b	#1,d0
00098AB6 0C00 000C                  		cmp.b	#$C,d0		; has the limit been reached?
00098ABA 6400                       		bcc.s	@cont2		; if it has, branch
00098ABC 11C0 C902                  		move.b	d0,($FFFFC902).w	; otherwise, set new frequency
00098AC0                            		
00098AC0                            @cont2:
00098AC0 11FC 0001 C900             		move.b	#1,($FFFFC900).w	; set flag
00098AC6 11FC 003C C901             		move.b	#60,($FFFFC901).w	; set timer
00098ACC 301F                       		move.w	(sp)+,d0
00098ACE                            		
00098ACE                            @cont3:	
00098ACE 2079 0009 820E             		movea.l	(Go_SoundIndex).l,a0
00098AD4 0407 00A0                  		sub.b	#$A0,d7
00098AD8 6000                       		bra.s	SoundEffects_Common
00098ADA                            ; ---------------------------------------------------------------------------
00098ADA                            ; Play normal sound effect
00098ADA                            ; ---------------------------------------------------------------------------
00098ADA                            ; Sound_A0toCF:
00098ADA                            Sound_PlaySFX:
00098ADA 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
00098ADE 6600 0000                  		bne.w	loc_722C6		; Exit is it is
00098AE2 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
00098AE6 6600 0000                  		bne.w	loc_722C6		; Exit if it is
00098AEA 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
00098AEE 6600 0000                  		bne.w	loc_722C6		; Exit if it is
00098AF2 4238 C900                  		clr.b	($FFFFC900).w
00098AF6 0C07 0000                  		cmpi.b	#sfx_Ring,d7		; is ring sound	effect played?
00098AFA 6600                       		bne.s	Sound_notB5		; if not, branch
00098AFC 4A2E 002B                  		tst.b	v_ring_speaker(a6)	; Is the ring sound playing on right speaker?
00098B00 6600                       		bne.s	loc_721EE		; Branch if not
00098B02 1E3C 0000                  		move.b	#sfx_RingLeft,d7	; play ring sound in left speaker
00098B06                            
00098B06                            loc_721EE:
00098B06 086E 0000 002B             		bchg	#0,v_ring_speaker(a6)	; change speaker
00098B0C                            
00098B0C                            Sound_notB5:
00098B0C 0C07 0000                  		cmpi.b	#sfx_Push,d7		; is "pushing" sound played?
00098B10 6600                       		bne.s	Sound_notA7		; if not, branch
00098B12 4A2E 002C                  		tst.b	f_push_playing(a6)	; Is pushing sound already playing?
00098B16 6600 0000                  		bne.w	locret_722C4			; Return if not
00098B1A 1D7C 0080 002C             		move.b	#$80,f_push_playing(a6)	; Mark it as playing
00098B20                            		
00098B20                            Sound_notA7:
00098B20 2079 0009 820E             		movea.l	(Go_SoundIndex).l,a0
00098B26 0407 00A0                  		subi.b	#sfx__First,d7		; Make it 0-based
00098B2A                            
00098B2A                            SoundEffects_Common:		
00098B2A E54F                       		lsl.w	#2,d7			; Convert sfx ID into index
00098B2C 2670 7000                  		movea.l	(a0,d7.w),a3		; SFX data pointer
00098B30 224B                       		movea.l	a3,a1
00098B32 7200                       		moveq	#0,d1
00098B34 3219                       		move.w	(a1)+,d1		; Voice pointer
00098B36 D28B                       		add.l	a3,d1			; Relative pointer
00098B38 1A19                       		move.b	(a1)+,d5		; Dividing timing	
00098B3A                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which SFXes whose
00098B3A                            		; index entry is above $3F will cause a crash. This is actually the same way that
00098B3A                            		; this bug is fixed in Ristar's driver.
00098B3A 7E00                       		moveq	#0,d7	
00098B3C 1E19                       		move.b	(a1)+,d7	; Number of tracks (FM + PSG)
00098B3E 5307                       		subq.b	#1,d7
00098B40 7C30                       		moveq	#TrackSz,d6
00098B42                            
00098B42                            loc_72228:
00098B42 7600                       		moveq	#0,d3
00098B44 1629 0001                  		move.b	1(a1),d3	; Channel assignment bits
00098B48 1803                       		move.b	d3,d4
00098B4A 6B00                       		bmi.s	loc_72244	; Branch if PSG
00098B4C 5543                       		subq.w	#2,d3		; SFX can only have FM3, FM4 or FM5
00098B4E E54B                       		lsl.w	#2,d3
00098B50 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
00098B54 2A75 3000                  		movea.l	(a5,d3.w),a5
00098B58 08D5 0002                  		bset	#2,(a5)		; Mark music track as being overridden (TrackPlaybackControl)
00098B5C 6000                       		bra.s	loc_7226E
00098B5E                            ; ===========================================================================
00098B5E                            
00098B5E                            loc_72244:
00098B5E E64B                       		lsr.w	#3,d3
00098B60 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
00098B64 2A75 3000                  		movea.l	(a5,d3.w),a5
00098B68 08D5 0002                  		bset	#2,(a5)			; Mark music track as being overridden (TrackPlaybackControl)
00098B6C 0C04 00C0                  		cmpi.b	#$C0,d4			; Is this PSG 3?
00098B70 6600                       		bne.s	loc_7226E	; Branch if not
00098B72 1004                       		move.b	d4,d0
00098B74 0000 001F                  		ori.b	#$1F,d0			; Command to silence PSG 3
00098B78 13C0 00C0 0011             		move.b	d0,(psg_input).l
00098B7E 0840 0005                  		bchg	#5,d0			; Command to silence noise channel
00098B82 13C0 00C0 0011             		move.b	d0,(psg_input).l
00098B88                            
00098B88                            loc_7226E:
00098B88 4BFA 0000                  		lea	SFX_SFXChannelRAM(pc),a5
00098B8C 2A75 3000                  		movea.l	(a5,d3.w),a5
00098B90 244D                       		movea.l	a5,a2
00098B92 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
00098B94                            
00098B94                            loc_72276:
00098B94 429A                       		clr.l	(a2)+
00098B96 51C8 FFFC                  		dbf	d0,loc_72276
00098B9A                            
00098B9A 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits (TrackPlaybackControl)
00098B9C 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)	; Initial voice control bits
00098BA0 7000                       		moveq	#0,d0
00098BA2 3019                       		move.w	(a1)+,d0			; Track data pointer
00098BA4 D08B                       		add.l	a3,d0				; Relative pointer
00098BA6 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
00098BAA 3B59 0008                  		move.w	(a1)+,8(a5)
00098BAE 4A38 C900                  		tst.b	($FFFFC900).w	; is the Spin Dash sound playing?
00098BB2 6700                       		beq.s	@cont		; if not, branch
00098BB4 3F00                       		move.w	d0,-(sp)
00098BB6 1038 C902                  		move.b	($FFFFC902).w,d0
00098BBA D12D 0008                  		add.b	d0,8(a5)
00098BBE 301F                       		move.w	(sp)+,d0
00098BC0                            		
00098BC0                            @cont:
00098BC0 1B7C 0001 000E             		move.b	#1,$E(a5)
00098BC6 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
00098BCA 4A04                       		tst.b	d4				; Is this a PSG channel?
00098BCC 6B00                       		bmi.s	loc_722A8		; Branch if yes
00098BCE 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00098BD4 2B41 0020                  		move.l	d1,TrackVoicePtr(a5)		; Voice pointer
00098BD8                            
00098BD8                            loc_722A8:
00098BD8 51CF FF68                  		dbf	d7,loc_72228
00098BDC                            
00098BDC 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00098BE0 6A00                       		bpl.s	loc_722B8				; Branch if not
00098BE2 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00098BE8                            
00098BE8                            loc_722B8:
00098BE8 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is SFX being played?
00098BEC 6A00                       		bpl.s	locret_722C4						; Branch if not
00098BEE 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00098BF4                            
00098BF4                            locret_722C4:
00098BF4 4E75                       		rts	
00098BF6                            ; ===========================================================================
00098BF6                            
00098BF6                            loc_722C6:
00098BF6 4216                       		clr.b	v_sndprio(a6)	; Clear priority
00098BF8 4E75                       		rts	
00098BFA                            ; ===========================================================================
00098BFA                            ; ---------------------------------------------------------------------------
00098BFA                            ; RAM addresses for FM and PSG channel variables used by the SFX
00098BFA                            ; ---------------------------------------------------------------------------
00098BFA                            ; dword_722CC: BGMChannelRAM:
00098BFA                            SFX_BGMChannelRAM:
00098BFA 00FF F0D0                  		dc.l (v_snddriver_ram+v_music_fm3_track)&$FFFFFF
00098BFE 0000 0000                  		dc.l 0
00098C02 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00098C06 00FF F130                  		dc.l (v_snddriver_ram+v_music_fm5_track)&$FFFFFF
00098C0A 00FF F190                  		dc.l (v_snddriver_ram+v_music_psg1_track)&$FFFFFF
00098C0E 00FF F1C0                  		dc.l (v_snddriver_ram+v_music_psg2_track)&$FFFFFF
00098C12 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Plain PSG3
00098C16 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Noise
00098C1A                            ; dword_722EC: SFXChannelRAM:
00098C1A                            SFX_SFXChannelRAM:
00098C1A 00FF F220                  		dc.l (v_snddriver_ram+v_sfx_fm3_track)&$FFFFFF
00098C1E 0000 0000                  		dc.l 0
00098C22 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
00098C26 00FF F280                  		dc.l (v_snddriver_ram+v_sfx_fm5_track)&$FFFFFF
00098C2A 00FF F2B0                  		dc.l (v_snddriver_ram+v_sfx_psg1_track)&$FFFFFF
00098C2E 00FF F2E0                  		dc.l (v_snddriver_ram+v_sfx_psg2_track)&$FFFFFF
00098C32 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Plain PSG3
00098C36 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Noise
00098C3A                            ; ===========================================================================
00098C3A                            ; ---------------------------------------------------------------------------
00098C3A                            ; Play GHZ waterfall sound
00098C3A                            ; ---------------------------------------------------------------------------
00098C3A                            ; Sound_D0toDF:
00098C3A                            Sound_PlaySpecial:
00098C3A 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
00098C3E 6600 0000                  		bne.w	@locret			; Return if so
00098C42 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
00098C46 6600 0000                  		bne.w	@locret			; Exit if it is
00098C4A 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
00098C4E 6600 0000                  		bne.w	@locret			; Exit if it is
00098C52 2079 0009 8206             		movea.l	(Go_SpecSoundIndex).l,a0
00098C58 0407 00D0                  		subi.b	#spec__First,d7		; Make it 0-based
00098C5C E54F                       		lsl.w	#2,d7
00098C5E 2670 7000                  		movea.l	(a0,d7.w),a3
00098C62 224B                       		movea.l	a3,a1
00098C64 7000                       		moveq	#0,d0
00098C66 3019                       		move.w	(a1)+,d0			; Voice pointer
00098C68 D08B                       		add.l	a3,d0				; Relative pointer
00098C6A 2D40 0020                  		move.l	d0,v_special_voice_ptr(a6)	; Store voice pointer
00098C6E 1A19                       		move.b	(a1)+,d5			; Dividing timing
00098C70                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which special SFXes whose
00098C70                            		; index entry is above $3F will cause a crash. This instance was not fixed in Ristar's driver.
00098C70 7E00                       		moveq	#0,d7	
00098C72 1E19                       		move.b	(a1)+,d7			; Number of tracks (FM + PSG)
00098C74 5307                       		subq.b	#1,d7
00098C76 7C30                       		moveq	#TrackSz,d6
00098C78                            ; loc_72348:
00098C78                            @sfxloadloop:
00098C78 1829 0001                  		move.b	1(a1),d4					; Voice control bits
00098C7C 6B00                       		bmi.s	@sfxoverridepsg					; Branch if PSG
00098C7E 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00098C84 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00098C88 6000                       		bra.s	@sfxinitpsg
00098C8A                            ; ===========================================================================
00098C8A                            ; loc_7235A:
00098C8A                            @sfxoverridepsg:
00098C8A 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00098C90 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
00098C94                            ; loc_72364:
00098C94                            @sfxinitpsg:
00098C94 244D                       		movea.l	a5,a2
00098C96 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
00098C98                            ; loc_72368:
00098C98                            @clearsfxtrackram:
00098C98 429A                       		clr.l	(a2)+
00098C9A 51C8 FFFC                  		dbf	d0,@clearsfxtrackram
00098C9E                            
00098C9E 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits & voice control bits (TrackPlaybackControl)
00098CA0 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)
00098CA4 7000                       		moveq	#0,d0
00098CA6 3019                       		move.w	(a1)+,d0			; Track data pointer
00098CA8 D08B                       		add.l	a3,d0				; Relative pointer
00098CAA 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
00098CAE 3B59 0008                  		move.w	(a1)+,TrackTranspose(a5)	; load FM/PSG channel modifier
00098CB2 1B7C 0001 000E             		move.b	#1,TrackDurationTimeout(a5)	; Set duration of first "note"
00098CB8 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
00098CBC 4A04                       		tst.b	d4				; Is this a PSG channel?
00098CBE 6B00                       		bmi.s	@sfxpsginitdone			; Branch if yes
00098CC0 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00098CC6                            ; loc_72396:
00098CC6                            @sfxpsginitdone:
00098CC6 51CF FFB0                  		dbf	d7,@sfxloadloop
00098CCA                            
00098CCA 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is track playing?
00098CCE 6A00                       		bpl.s	@doneoverride					; Branch if not
00098CD0 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00098CD6                            ; loc_723A6:
00098CD6                            @doneoverride:
00098CD6 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is track playing?
00098CDA 6A00                       		bpl.s	@locret						; Branch if not
00098CDC 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00098CE2 0004 001F                  		ori.b	#$1F,d4						; Command to silence channel
00098CE6 13C4 00C0 0011             		move.b	d4,(psg_input).l
00098CEC 0844 0005                  		bchg	#5,d4			; Command to silence noise channel
00098CF0 13C4 00C0 0011             		move.b	d4,(psg_input).l
00098CF6                            ; locret_723C6:
00098CF6                            @locret:
00098CF6 4E75                       		rts	
00098CF8                            ; End of function PlaySoundID
00098CF8                            
00098CF8                            ; ===========================================================================
00098CF8                            ; ---------------------------------------------------------------------------
00098CF8                            ; Unused RAM addresses for FM and PSG channel variables used by the Special SFX
00098CF8                            ; ---------------------------------------------------------------------------
00098CF8                            ; The first block would have been used for overriding the music tracks
00098CF8                            ; as they have a lower priority, just as they are in Sound_PlaySFX
00098CF8                            ; The third block would be used to set up the Special SFX
00098CF8                            ; The second block, however, is for the SFX tracks, which have a higher priority
00098CF8                            ; and would be checked for if they're currently playing
00098CF8                            ; If they are, then the third block would be used again, this time to mark
00098CF8                            ; the new tracks as 'currently playing'
00098CF8                            
00098CF8                            ; These were actually used in Moonwalker's driver (and other SMPS 68k Type 1a drivers)
00098CF8                            
00098CF8                            ; BGMFM4PSG3RAM:
00098CF8                            ;SpecSFX_BGMChannelRAM:
00098CF8 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00098CFC 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF
00098D00                            ; SFXFM4PSG3RAM:
00098D00                            ;SpecSFX_SFXChannelRAM:
00098D00 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
00098D04 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF
00098D08                            ; SpecialSFXFM4PSG3RAM:
00098D08                            ;SpecSFX_SpecSFXChannelRAM:
00098D08 00FF F340                  		dc.l (v_snddriver_ram+v_spcsfx_fm4_track)&$FFFFFF
00098D0C 00FF F370                  		dc.l (v_snddriver_ram+v_spcsfx_psg3_track)&$FFFFFF
00098D10                            
00098D10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098D10                            
00098D10                            ; Snd_FadeOut1: Snd_FadeOutSFX: FadeOutSFX:
00098D10                            StopSFX:
00098D10 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00098D12 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
00098D16 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 3 FM + 3 PSG tracks (SFX)
00098D18                            ; loc_723EA:
00098D18                            @trackloop:
00098D18 4A15                       		tst.b	(a5)		; Is track playing? (TrackPlaybackControl)
00098D1A 6A00 0000                  		bpl.w	@nexttrack	; Branch if not
00098D1E 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
00098D22 7600                       		moveq	#0,d3
00098D24 162D 0001                  		move.b	TrackVoiceControl(a5),d3	; Get voice control bits
00098D28 6B00                       		bmi.s	@trackpsg			; Branch if PSG
00098D2A 4EBA 0000                  		jsr	FMNoteOff(pc)
00098D2E 0C03 0004                  		cmpi.b	#4,d3						; Is this FM4?
00098D32 6600                       		bne.s	@getfmpointer					; Branch if not
00098D34 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
00098D38 6A00                       		bpl.s	@getfmpointer					; Branch if not
00098D3A                            		; DANGER! there is a missing 'movea.l	a5,a3' here, without which the
00098D3A                            		; code is broken. It is dangerous to do a fade out when a GHZ waterfall
00098D3A                            		; is playing its sound!
00098D3A 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00098D3E 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get special voice pointer
00098D42 6000                       		bra.s	@gotfmpointer
00098D44                            ; ===========================================================================
00098D44                            ; loc_72416:
00098D44                            @getfmpointer:
00098D44 5503                       		subq.b	#2,d3		; SFX only has FM3 and up
00098D46 E50B                       		lsl.b	#2,d3
00098D48 41FA FEB0                  		lea	SFX_BGMChannelRAM(pc),a0
00098D4C 264D                       		movea.l	a5,a3
00098D4E 2A70 3000                  		movea.l	(a0,d3.w),a5
00098D52 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get music voice pointer
00098D56                            ; loc_72428:
00098D56                            @gotfmpointer:
00098D56 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00098D5A 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00098D5E 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00098D62 4EBA 0000                  		jsr	SetVoice(pc)
00098D66 2A4B                       		movea.l	a3,a5
00098D68 6000                       		bra.s	@nexttrack
00098D6A                            ; ===========================================================================
00098D6A                            ; loc_7243C:
00098D6A                            @trackpsg:
00098D6A 4EBA 0000                  		jsr	PSGNoteOff(pc)
00098D6E 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00098D72 0C03 00E0                  		cmpi.b	#$E0,d3			; Is this a noise channel:
00098D76 6700                       		beq.s	@gotpsgpointer		; Branch if yes
00098D78 0C03 00C0                  		cmpi.b	#$C0,d3			; Is this PSG 3?
00098D7C 6700                       		beq.s	@gotpsgpointer		; Branch if yes
00098D7E E60B                       		lsr.b	#3,d3
00098D80 41FA FE78                  		lea	SFX_BGMChannelRAM(pc),a0
00098D84 2070 3000                  		movea.l	(a0,d3.w),a0
00098D88                            ; loc_7245A:
00098D88                            @gotpsgpointer:
00098D88 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00098D8C 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
00098D90 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise channel?
00098D96 6600                       		bne.s	@nexttrack			; Branch if not
00098D98 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise type
00098DA0                            ; loc_72472:
00098DA0                            @nexttrack:
00098DA0 DAFC 0030                  		adda.w	#TrackSz,a5
00098DA4 51CF FF72                  		dbf	d7,@trackloop
00098DA8                            
00098DA8 4E75                       		rts	
00098DAA                            ; End of function StopSFX
00098DAA                            
00098DAA                            
00098DAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098DAA                            
00098DAA                            ; Snd_FadeOut2: FadeOutSFX2: FadeOutSpecialSFX:
00098DAA                            StopSpecialSFX:
00098DAA 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00098DAE 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00098DB0 6A00                       		bpl.s	@fadedfm		; Branch if not
00098DB2 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00098DB6 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
00098DBA 6600                       		bne.s	@fadedfm		; Branch if not
00098DBC 4EBA 0000                  		jsr	SendFMNoteOff(pc)
00098DC0 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
00098DC4 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00098DC8 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00098DCC 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00098DCE 6A00                       		bpl.s	@fadedfm		; Branch if not
00098DD0 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00098DD4 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00098DD8 4EBA 0000                  		jsr	SetVoice(pc)
00098DDC                            ; loc_724AE:
00098DDC                            @fadedfm:
00098DDC 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
00098DE0 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00098DE2 6A00                       		bpl.s	@fadedpsg		; Branch if not
00098DE4 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00098DE8 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
00098DEC 6600                       		bne.s	@fadedpsg		; Return if not
00098DEE 4EBA 0000                  		jsr	SendPSGNoteOff(pc)
00098DF2 4BEE 01F0                  		lea	v_music_psg3_track(a6),a5
00098DF6 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00098DFA 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00098DFE 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00098E00 6A00                       		bpl.s	@fadedpsg		; Return if not
00098E02 0C2D 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a5)	; Is this a noise channel?
00098E08 6600                       		bne.s	@fadedpsg			; Return if not
00098E0A 13ED 001F 00C0 0011        		move.b	TrackPSGNoise(a5),(psg_input).l ; Set noise type
00098E12                            ; locret_724E4:
00098E12                            @fadedpsg:
00098E12 4E75                       		rts	
00098E14                            ; End of function StopSpecialSFX
00098E14                            
00098E14                            ; ===========================================================================
00098E14                            ; ---------------------------------------------------------------------------
00098E14                            ; Fade out music
00098E14                            ; ---------------------------------------------------------------------------
00098E14                            ; Sound_E0:
00098E14                            FadeOutMusic:
00098E14 4EBA FEFA                  		jsr	StopSFX(pc)
00098E18 4EBA FF90                  		jsr	StopSpecialSFX(pc)
00098E1C 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)			; Set fadeout delay to 3
00098E22 1D7C 0028 0004             		move.b	#$28,v_fadeout_counter(a6)		; Set fadeout counter
00098E28 422E 0040                  		clr.b	v_music_dac_track+TrackPlaybackControl(a6)	; Stop DAC track
00098E2C 422E 002A                  		clr.b	f_speedup(a6)				; Disable speed shoes tempo
00098E30 4E75                       		rts	
00098E32                            
00098E32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098E32                            
00098E32                            ; sub_72504:
00098E32                            DoFadeOut:
00098E32 102E 0006                  		move.b	v_fadeout_delay(a6),d0	; Has fadeout delay expired?
00098E36 6700                       		beq.s	@continuefade		; Branch if yes
00098E38 532E 0006                  		subq.b	#1,v_fadeout_delay(a6)
00098E3C 4E75                       		rts	
00098E3E                            ; ===========================================================================
00098E3E                            ; loc_72510:
00098E3E                            @continuefade:
00098E3E 532E 0004                  		subq.b	#1,v_fadeout_counter(a6)	; Update fade counter
00098E42 6700 0000                  		beq.w	StopAllSound			; Branch if fade is done
00098E46 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)		; Reset fade delay
00098E4C 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00098E50 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00098E52                            ; loc_72524:
00098E52                            @fmloop:
00098E52 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00098E54 6A00                       		bpl.s	@nextfm			; Branch if not
00098E56 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
00098E5A 6A00                       		bpl.s	@sendfmtl		; Branch if still positive
00098E5C 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00098E60 6000                       		bra.s	@nextfm
00098E62                            ; ===========================================================================
00098E62                            ; loc_72534:
00098E62                            @sendfmtl:
00098E62 4EBA 0000                  		jsr	SendVoiceTL(pc)
00098E66                            ; loc_72538:
00098E66                            @nextfm:
00098E66 DAFC 0030                  		adda.w	#TrackSz,a5
00098E6A 51CF FFE6                  		dbf	d7,@fmloop
00098E6E                            
00098E6E 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00098E70                            ; loc_72542:
00098E70                            @psgloop:
00098E70 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00098E72 6A00                       		bpl.s	@nextpsg		; branch if not
00098E74 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
00098E78 0C2D 0010 0009             		cmpi.b	#$10,TrackVolume(a5)	; Is it greater than $F?
00098E7E 6500                       		blo.s	@sendpsgvol		; Branch if not
00098E80 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00098E84 6000                       		bra.s	@nextpsg
00098E86                            ; ===========================================================================
00098E86                            ; loc_72558:
00098E86                            @sendpsgvol:
00098E86 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Store new volume attenuation
00098E8A 4EBA 0000                  		jsr	SetPSGVolume(pc)
00098E8E                            ; loc_72560:
00098E8E                            @nextpsg:
00098E8E DAFC 0030                  		adda.w	#TrackSz,a5
00098E92 51CF FFDC                  		dbf	d7,@psgloop
00098E96                            
00098E96 4E75                       		rts	
00098E98                            ; End of function DoFadeOut
00098E98                            
00098E98                            
00098E98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098E98                            
00098E98                            ; sub_7256A:
00098E98                            FMSilenceAll:
00098E98 7602                       		moveq	#2,d3		; 3 FM channels for each YM2612 parts
00098E9A 7028                       		moveq	#$28,d0		; FM key on/off register
00098E9C                            ; loc_7256E:
00098E9C                            @noteoffloop:
00098E9C 1203                       		move.b	d3,d1
00098E9E 4EBA 0000                  		jsr	WriteFMI(pc)
00098EA2 5801                       		addq.b	#4,d1		; Move to YM2612 part 1
00098EA4 4EBA 0000                  		jsr	WriteFMI(pc)
00098EA8 51CB FFF2                  		dbf	d3,@noteoffloop
00098EAC                            
00098EAC 7040                       		moveq	#$40,d0		; Set TL on FM channels...
00098EAE 727F                       		moveq	#$7F,d1		; ... to total attenuation...
00098EB0 7802                       		moveq	#2,d4		; ... for all 3 channels...
00098EB2                            ; loc_72584:
00098EB2                            @channelloop:
00098EB2 7603                       		moveq	#3,d3		; ... for all operators on each channel...
00098EB4                            ; loc_72586:
00098EB4                            @channeltlloop:
00098EB4 4EBA 0000                  		jsr	WriteFMI(pc)	; ... for part 0...
00098EB8 4EBA 0000                  		jsr	WriteFMII(pc)	; ... and part 1.
00098EBC 5840                       		addq.w	#4,d0		; Next TL operator
00098EBE 51CB FFF4                  		dbf	d3,@channeltlloop
00098EC2                            
00098EC2 0400 000F                  		subi.b	#$F,d0		; Move to TL operator 1 of next channel
00098EC6 51CC FFEA                  		dbf	d4,@channelloop
00098ECA                            
00098ECA 4E75                       		rts	
00098ECC                            ; End of function FMSilenceAll
00098ECC                            
00098ECC                            ; ===========================================================================
00098ECC                            ; ---------------------------------------------------------------------------
00098ECC                            ; Stop music
00098ECC                            ; ---------------------------------------------------------------------------
00098ECC                            ; Sound_E4: StopSoundAndMusic:
00098ECC                            StopAllSound:
00098ECC 702B                       		moveq	#$2B,d0		; Enable/disable DAC
00098ECE 123C 0080                  		move.b	#$80,d1		; Enable DAC
00098ED2 4EBA 0000                  		jsr	WriteFMI(pc)
00098ED6 7027                       		moveq	#$27,d0		; Timers, FM3/FM6 mode
00098ED8 7200                       		moveq	#0,d1		; FM3/FM6 normal mode, disable timers
00098EDA 4EBA 0000                  		jsr	WriteFMI(pc)
00098EDE 204E                       		movea.l	a6,a0
00098EE0                            		; DANGER! This should be clearing all variables and track data, but misses the last $10 bytes of v_spcsfx_psg3_track.
00098EE0                            		; Remove the '-$10' to fix this.
00098EE0 303C 00E7                  		move.w	#((v_spcsfx_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $390 bytes: all variables and most track data
00098EE4                            ; loc_725B6:
00098EE4                            @clearramloop:
00098EE4 4298                       		clr.l	(a0)+
00098EE6 51C8 FFFC                  		dbf	d0,@clearramloop
00098EEA                            
00098EEA 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00098EF0 4EBA FFA6                  		jsr	FMSilenceAll(pc)
00098EF4 6000 0000                  		bra.w	PSGSilenceAll
00098EF8                            
00098EF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098EF8                            
00098EF8                            ; sub_725CA:
00098EF8                            InitMusicPlayback:
00098EF8 204E                       		movea.l	a6,a0
00098EFA                            		; Save several values
00098EFA 1216                       		move.b	v_sndprio(a6),d1
00098EFC 142E 0027                  		move.b	f_1up_playing(a6),d2
00098F00 162E 002A                  		move.b	f_speedup(a6),d3
00098F04 182E 0026                  		move.b	v_fadein_counter(a6),d4
00098F08                            		; DANGER! Only v_soundqueue0 and v_soundqueue1 are backed up, once again breaking v_soundqueue2
00098F08 3A2E 000A                  		move.w	v_soundqueue0(a6),d5
00098F0C 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $220 bytes: all variables and music track data
00098F10                            ; loc_725E4:
00098F10                            @clearramloop:
00098F10 4298                       		clr.l	(a0)+
00098F12 51C8 FFFC                  		dbf	d0,@clearramloop
00098F16                            
00098F16                            		; Restore the values saved above
00098F16 1C81                       		move.b	d1,v_sndprio(a6)
00098F18 1D42 0027                  		move.b	d2,f_1up_playing(a6)
00098F1C 1D43 002A                  		move.b	d3,f_speedup(a6)
00098F20 1D44 0026                  		move.b	d4,v_fadein_counter(a6)
00098F24 3D45 000A                  		move.w	d5,v_soundqueue0(a6)
00098F28 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00098F2E                            		; DANGER! This silences ALL channels, even the ones being used
00098F2E                            		; by SFX, and not music! @sendfmnoteoff does this already, and
00098F2E                            		; doesn't affect SFX channels, either.
00098F2E                            		; This should be replaced with an 'rts'.
00098F2E 4EBA FF68                  		jsr	FMSilenceAll(pc)
00098F32 6000 0000                  		bra.w	PSGSilenceAll
00098F36                            		; DANGER! InitMusicPlayback, and Sound_PlayBGM for that matter,
00098F36                            		; don't do a very good job of setting up the music tracks.
00098F36                            		; Tracks that aren't defined in a music file's header don't have
00098F36                            		; their channels defined, meaning @sendfmnoteoff won't silence
00098F36                            		; hardware properly. In combination with removing the above
00098F36                            		; calls to FMSilenceAll/PSGSilenceAll, this will cause hanging
00098F36                            		; notes.
00098F36                            		; To fix this, I suggest using this code, instead of an 'rts':
00098F36                            		;lea	v_music_track_ram+TrackVoiceControl(a6),a1
00098F36                            		;lea	FMDACInitBytes(pc),a2
00098F36                            		;moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d1		; 7 DAC/FM tracks
00098F36                            		;bsr.s	@writeloop
00098F36                            		;lea	PSGInitBytes(pc),a2
00098F36                            		;moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d1	; 3 PSG tracks
00098F36                            
00098F36                            ;@writeloop:
00098F36                            		;move.b	(a2)+,(a1)		; Write track's channel byte
00098F36                            		;lea	TrackSz(a1),a1		; Next track
00098F36                            		;dbf	d1,@writeloop		; Loop for all DAC/FM/PSG tracks
00098F36                            
00098F36                            		;rts
00098F36                            	
00098F36                            ; End of function InitMusicPlayback
00098F36                            
00098F36                            
00098F36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098F36                            
00098F36                            ; sub_7260C:
00098F36                            TempoWait:
00098F36 1D6E 0002 0001             		move.b	v_main_tempo(a6),v_main_tempo_timeout(a6)	; Reset main tempo timeout
00098F3C 41EE 004E                  		lea	v_music_track_ram+TrackDurationTimeout(a6),a0	; note timeout
00098F40 7030                       		moveq	#TrackSz,d0
00098F42 7209                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d1		; 1 DAC + 6 FM + 3 PSG tracks
00098F44                            ; loc_7261A:
00098F44                            @tempoloop:
00098F44 5210                       		addq.b	#1,(a0)	; Delay note by 1 frame
00098F46 D0C0                       		adda.w	d0,a0	; Advance to next track
00098F48 51C9 FFFA                  		dbf	d1,@tempoloop
00098F4C                            
00098F4C 4E75                       		rts	
00098F4E                            ; End of function TempoWait
00098F4E                            
00098F4E                            ; ===========================================================================
00098F4E                            ; ---------------------------------------------------------------------------
00098F4E                            ; Speed	up music
00098F4E                            ; ---------------------------------------------------------------------------
00098F4E                            ; Sound_E2:
00098F4E                            SpeedUpMusic:
00098F4E 4A2E 0027                  		tst.b	f_1up_playing(a6)
00098F52 6600                       		bne.s	@speedup_1up
00098F54 1D6E 0029 0002             		move.b	v_speeduptempo(a6),v_main_tempo(a6)
00098F5A 1D6E 0029 0001             		move.b	v_speeduptempo(a6),v_main_tempo_timeout(a6)
00098F60 1D7C 0080 002A             		move.b	#$80,f_speedup(a6)
00098F66 4E75                       		rts	
00098F68                            ; ===========================================================================
00098F68                            ; loc_7263E:
00098F68                            @speedup_1up:
00098F68 1D6E 03C9 03A2             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo(a6)
00098F6E 1D6E 03C9 03A1             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
00098F74 1D7C 0080 03CA             		move.b	#$80,v_1up_ram_copy+f_speedup(a6)
00098F7A 4E75                       		rts	
00098F7C                            ; ===========================================================================
00098F7C                            ; ---------------------------------------------------------------------------
00098F7C                            ; Change music back to normal speed
00098F7C                            ; ---------------------------------------------------------------------------
00098F7C                            ; Sound_E3:
00098F7C                            SlowDownMusic:
00098F7C 4A2E 0027                  		tst.b	f_1up_playing(a6)
00098F80 6600                       		bne.s	@slowdown_1up
00098F82 1D6E 0028 0002             		move.b	v_tempo_mod(a6),v_main_tempo(a6)
00098F88 1D6E 0028 0001             		move.b	v_tempo_mod(a6),v_main_tempo_timeout(a6)
00098F8E 422E 002A                  		clr.b	f_speedup(a6)
00098F92 4E75                       		rts	
00098F94                            ; ===========================================================================
00098F94                            ; loc_7266A:
00098F94                            @slowdown_1up:
00098F94 1D6E 03C8 03A2             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo(a6)
00098F9A 1D6E 03C8 03A1             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
00098FA0 422E 03CA                  		clr.b	v_1up_ram_copy+f_speedup(a6)
00098FA4 4E75                       		rts	
00098FA6                            
00098FA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098FA6                            
00098FA6                            ; sub_7267C:
00098FA6                            DoFadeIn:
00098FA6 4A2E 0025                  		tst.b	v_fadein_delay(a6)	; Has fadein delay expired?
00098FAA 6700                       		beq.s	@continuefade		; Branch if yes
00098FAC 532E 0025                  		subq.b	#1,v_fadein_delay(a6)
00098FB0 4E75                       		rts	
00098FB2                            ; ===========================================================================
00098FB2                            ; loc_72688:
00098FB2                            @continuefade:
00098FB2 4A2E 0026                  		tst.b	v_fadein_counter(a6)	; Is fade done?
00098FB6 6700                       		beq.s	@fadedone		; Branch if yes
00098FB8 532E 0026                  		subq.b	#1,v_fadein_counter(a6)	; Update fade counter
00098FBC 1D7C 0002 0025             		move.b	#2,v_fadein_delay(a6)	; Reset fade delay
00098FC2 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00098FC6 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00098FC8                            ; loc_7269E:
00098FC8                            @fmloop:
00098FC8 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00098FCA 6A00                       		bpl.s	@nextfm			; Branch if not
00098FCC 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
00098FD0 4EBA 0000                  		jsr	SendVoiceTL(pc)
00098FD4                            ; loc_726AA:
00098FD4                            @nextfm:
00098FD4 DAFC 0030                  		adda.w	#TrackSz,a5
00098FD8 51CF FFEE                  		dbf	d7,@fmloop
00098FDC 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7		; 3 PSG tracks
00098FDE                            ; loc_726B4:
00098FDE                            @psgloop:
00098FDE 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00098FE0 6A00                       		bpl.s	@nextpsg		; Branch if not
00098FE2 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
00098FE6 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get value
00098FEA 0C06 0010                  		cmpi.b	#$10,d6			; Is it is < $10?
00098FEE 6500                       		blo.s	@sendpsgvol		; Branch if yes
00098FF0 7C0F                       		moveq	#$F,d6			; Limit to $F (maximum attenuation)
00098FF2                            ; loc_726C8:
00098FF2                            @sendpsgvol:
00098FF2 4EBA 0000                  		jsr	SetPSGVolume(pc)
00098FF6                            ; loc_726CC:
00098FF6                            @nextpsg:
00098FF6 DAFC 0030                  		adda.w	#TrackSz,a5
00098FFA 51CF FFE2                  		dbf	d7,@psgloop
00098FFE 4E75                       		rts	
00099000                            ; ===========================================================================
00099000                            ; loc_726D6:
00099000                            @fadedone:
00099000 08AE 0002 0040             		bclr	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Clear 'SFX overriding' bit
00099006 422E 0024                  		clr.b	f_fadein_flag(a6)				; Stop fadein
0009900A 4E75                       		rts	
0009900C                            ; End of function DoFadeIn
0009900C                            
0009900C                            ; ===========================================================================
0009900C                            ; loc_726E2:
0009900C                            FMNoteOn:
0009900C 0815 0001                  		btst	#1,(a5)		; Is track resting? (TrackPlaybackControl)
00099010 6600                       		bne.s	@locret		; Return if so
00099012 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
00099016 6600                       		bne.s	@locret		; Return if so
00099018 7028                       		moveq	#$28,d0		; Note on/off register
0009901A 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Get channel bits
0009901E 0001 00F0                  		ori.b	#$F0,d1		; Note on on all operators
00099022 6000 0000                  		bra.w	WriteFMI
00099026                            ; ===========================================================================
00099026                            ; locret_726FC:
00099026                            @locret:
00099026 4E75                       		rts	
00099028                            
00099028                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099028                            
00099028                            ; sub_726FE:
00099028                            FMNoteOff:
00099028 0815 0004                  		btst	#4,(a5)		; Is 'do not attack next note' set? (TrackPlaybackControl)
0009902C 6600                       		bne.s	locret_72714	; Return if yes
0009902E 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00099032 6600                       		bne.s	locret_72714	; Return if yes
00099034                            ; loc_7270A:
00099034                            SendFMNoteOff:
00099034 7028                       		moveq	#$28,d0		; Note on/off register
00099036 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Note off to this channel
0009903A 6000 0000                  		bra.w	WriteFMI
0009903E                            ; ===========================================================================
0009903E                            
0009903E                            locret_72714:
0009903E 4E75                       		rts	
00099040                            ; End of function FMNoteOff
00099040                            
00099040                            ; ===========================================================================
00099040                            ; loc_72716:
00099040                            WriteFMIorIIMain:
00099040 0815 0002                  		btst	#2,(a5)		; Is track being overriden by sfx? (TrackPlaybackControl)
00099044 6600                       		bne.s	@locret		; Return if yes
00099046 6000 0000                  		bra.w	WriteFMIorII
0009904A                            ; ===========================================================================
0009904A                            ; locret_72720:
0009904A                            @locret:
0009904A 4E75                       		rts	
0009904C                            
0009904C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009904C                            
0009904C                            ; sub_72722:
0009904C                            WriteFMIorII:
0009904C 082D 0002 0001             		btst	#2,TrackVoiceControl(a5)	; Is this bound for part I or II?
00099052 6600                       		bne.s	WriteFMIIPart			; Branch if for part II
00099054 D02D 0001                  		add.b	TrackVoiceControl(a5),d0	; Add in voice control bits
00099058                            ; End of function WriteFMIorII
00099058                            
00099058                            
00099058                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099058                            
00099058                            ; The reason I think this is an *early* SMPS 68k Type 1b
00099058                            ; is because this subroutine is the one from Type 1a:
00099058                            ; other Type 1b drivers have a newer, optimised version.
00099058                            ; The driver itself is Type 1b, with this odd exception.
00099058                            
00099058                            ; sub_7272E:
00099058                            WriteFMI:
00099058 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
0009905E 0802 0007                  		btst	#7,d2		; Is FM busy?
00099062 66F4                       		bne.s	WriteFMI	; Loop if so
00099064 13C0 00A0 4000             		move.b	d0,(ym2612_a0).l
0009906A 4E71                       		nop	
0009906C 4E71                       		nop	
0009906E 4E71                       		nop	
00099070                            ; loc_72746:
00099070                            @waitloop:
00099070 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00099076 0802 0007                  		btst	#7,d2		; Is FM busy?
0009907A 66F4                       		bne.s	@waitloop	; Loop if so
0009907C                            
0009907C 13C1 00A0 4001             		move.b	d1,(ym2612_d0).l
00099082 4E75                       		rts	
00099084                            ; End of function WriteFMI
00099084                            
00099084                            ; ===========================================================================
00099084                            ; loc_7275A:
00099084                            WriteFMIIPart:
00099084 142D 0001                  		move.b	TrackVoiceControl(a5),d2 ; Get voice control bits
00099088 0882 0002                  		bclr	#2,d2			; Clear chip toggle
0009908C D002                       		add.b	d2,d0			; Add in to destination register
0009908E                            
0009908E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009908E                            
0009908E                            ; sub_72764:
0009908E                            WriteFMII:
0009908E 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00099094 0802 0007                  		btst	#7,d2		; Is FM busy?
00099098 66F4                       		bne.s	WriteFMII	; Loop if so
0009909A 13C0 00A0 4002             		move.b	d0,(ym2612_a1).l
000990A0 4E71                       		nop	
000990A2 4E71                       		nop	
000990A4 4E71                       		nop	
000990A6                            ; loc_7277C:
000990A6                            @waitloop:
000990A6 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
000990AC 0802 0007                  		btst	#7,d2		; Is FM busy?
000990B0 66F4                       		bne.s	@waitloop	; Loop if so
000990B2                            
000990B2 13C1 00A0 4003             		move.b	d1,(ym2612_d1).l
000990B8 4E75                       		rts	
000990BA                            ; End of function WriteFMII
000990BA                            
000990BA                            ; ===========================================================================
000990BA                            ; ---------------------------------------------------------------------------
000990BA                            ; FM Note Values: b-0 to a#8
000990BA                            ; ---------------------------------------------------------------------------
000990BA                            ; word_72790: FM_Notes:
000990BA                            FMFrequencies:
000990BA 025E 0284 02AB 02D3 02FE+  	dc.w $025E,$0284,$02AB,$02D3,$02FE,$032D,$035C,$038F,$03C5,$03FF,$043C,$047C
000990D2 0A5E 0A84 0AAB 0AD3 0AFE+  	dc.w $0A5E,$0A84,$0AAB,$0AD3,$0AFE,$0B2D,$0B5C,$0B8F,$0BC5,$0BFF,$0C3C,$0C7C
000990EA 125E 1284 12AB 12D3 12FE+  	dc.w $125E,$1284,$12AB,$12D3,$12FE,$132D,$135C,$138F,$13C5,$13FF,$143C,$147C
00099102 1A5E 1A84 1AAB 1AD3 1AFE+  	dc.w $1A5E,$1A84,$1AAB,$1AD3,$1AFE,$1B2D,$1B5C,$1B8F,$1BC5,$1BFF,$1C3C,$1C7C
0009911A 225E 2284 22AB 22D3 22FE+  	dc.w $225E,$2284,$22AB,$22D3,$22FE,$232D,$235C,$238F,$23C5,$23FF,$243C,$247C
00099132 2A5E 2A84 2AAB 2AD3 2AFE+  	dc.w $2A5E,$2A84,$2AAB,$2AD3,$2AFE,$2B2D,$2B5C,$2B8F,$2BC5,$2BFF,$2C3C,$2C7C
0009914A 325E 3284 32AB 32D3 32FE+  	dc.w $325E,$3284,$32AB,$32D3,$32FE,$332D,$335C,$338F,$33C5,$33FF,$343C,$347C
00099162 3A5E 3A84 3AAB 3AD3 3AFE+  	dc.w $3A5E,$3A84,$3AAB,$3AD3,$3AFE,$3B2D,$3B5C,$3B8F,$3BC5,$3BFF,$3C3C,$3C7C
0009917A                            
0009917A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009917A                            
0009917A                            ; sub_72850:
0009917A                            PSGUpdateTrack:
0009917A 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Update note timeout
0009917E 6600                       		bne.s	@notegoing
00099180 0895 0004                  		bclr	#4,(a5)				; Clear 'do not attack note' bit (TrackPlaybackControl)
00099184 4EBA 0000                  		jsr	PSGDoNext(pc)
00099188 4EBA 0000                  		jsr	PSGDoNoteOn(pc)
0009918C 6000 0000                  		bra.w	PSGDoVolFX
00099190                            ; ===========================================================================
00099190                            ; loc_72866:
00099190                            @notegoing:
00099190 4EBA F4CA                  		jsr	NoteTimeoutUpdate(pc)
00099194 4EBA 0000                  		jsr	PSGUpdateVolFX(pc)
00099198 4EBA F4EA                  		jsr	DoModulation(pc)
0009919C 4EBA 0000                  		jsr	PSGUpdateFreq(pc)	; It would be better if this were a jmp and the rts was removed
000991A0 4E75                       		rts
000991A2                            ; End of function PSGUpdateTrack
000991A2                            
000991A2                            
000991A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000991A2                            
000991A2                            ; sub_72878:
000991A2                            PSGDoNext:
000991A2 0895 0001                  		bclr	#1,(a5)				; Clear 'track at rest' bit (TrackPlaybackControl)
000991A6 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; Get track data pointer
000991AA                            ; loc_72880:
000991AA                            @noteloop:
000991AA 7A00                       		moveq	#0,d5
000991AC 1A1C                       		move.b	(a4)+,d5	; Get byte from track
000991AE 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
000991B2 6500                       		blo.s	@gotnote	; Branch if not
000991B4 4EBA 0000                  		jsr	CoordFlag(pc)
000991B8 60F0                       		bra.s	@noteloop
000991BA                            ; ===========================================================================
000991BA                            ; loc_72890:
000991BA                            @gotnote:
000991BA 4A05                       		tst.b	d5		; Is it a note?
000991BC 6A00                       		bpl.s	@gotduration	; Branch if not
000991BE 4EBA 0000                  		jsr	PSGSetFreq(pc)
000991C2 1A1C                       		move.b	(a4)+,d5	; Get another byte
000991C4 4A05                       		tst.b	d5		; Is it a duration?
000991C6 6A00                       		bpl.s	@gotduration	; Branch if yes
000991C8 534C                       		subq.w	#1,a4		; Put byte back
000991CA 6000 F452                  		bra.w	FinishTrackUpdate
000991CE                            ; ===========================================================================
000991CE                            ; loc_728A4:
000991CE                            @gotduration:
000991CE 4EBA F42E                  		jsr	SetDuration(pc)
000991D2 6000 F44A                  		bra.w	FinishTrackUpdate
000991D6                            ; End of function PSGDoNext
000991D6                            
000991D6                            
000991D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000991D6                            
000991D6                            ; sub_728AC:
000991D6                            PSGSetFreq:
000991D6 0405 0081                  		subi.b	#$81,d5		; Convert to 0-based index
000991DA 6500                       		bcs.s	@restpsg	; If $80, put track at rest
000991DC DA2D 0008                  		add.b	TrackTranspose(a5),d5 ; Add in channel transposition
000991E0 0245 007F                  		andi.w	#$7F,d5		; Clear high byte and sign bit
000991E4 E34D                       		lsl.w	#1,d5
000991E6 41FA 0000                  		lea	PSGFrequencies(pc),a0
000991EA 3B70 5000 0010             		move.w	(a0,d5.w),TrackFreq(a5)	; Set new frequency
000991F0 6000 F42C                  		bra.w	FinishTrackUpdate
000991F4                            ; ===========================================================================
000991F4                            ; loc_728CA:
000991F4                            @restpsg:
000991F4 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
000991F8 3B7C FFFF 0010             		move.w	#-1,TrackFreq(a5)	; Invalidate note frequency
000991FE 4EBA F41E                  		jsr	FinishTrackUpdate(pc)
00099202 6000 0000                  		bra.w	PSGNoteOff
00099206                            ; End of function PSGSetFreq
00099206                            
00099206                            
00099206                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099206                            
00099206                            ; sub_728DC:
00099206                            PSGDoNoteOn:
00099206 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get note frequency
0009920A 6B00                       		bmi.s	PSGSetRest		; If invalid, branch
0009920C                            ; End of function PSGDoNoteOn
0009920C                            
0009920C                            
0009920C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009920C                            
0009920C                            ; sub_728E2:
0009920C                            PSGUpdateFreq:
0009920C 102D 001E                  		move.b	TrackDetune(a5),d0	; Get detune value
00099210 4880                       		ext.w	d0
00099212 DC40                       		add.w	d0,d6		; Add to frequency
00099214 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
00099218 6600                       		bne.s	@locret		; Return if yes
0009921A 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
0009921E 6600                       		bne.s	@locret		; Return if yes
00099220 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get channel bits
00099224 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it a noise channel?
00099228 6600                       		bne.s	@notnoise	; Branch if not
0009922A 103C 00C0                  		move.b	#$C0,d0		; Use PSG 3 channel bits
0009922E                            ; loc_72904:
0009922E                            @notnoise:
0009922E 3206                       		move.w	d6,d1
00099230 0201 000F                  		andi.b	#$F,d1		; Low nibble of frequency
00099234 8001                       		or.b	d1,d0		; Latch tone data to channel
00099236 E84E                       		lsr.w	#4,d6		; Get upper 6 bits of frequency
00099238 0206 003F                  		andi.b	#$3F,d6		; Send to latched channel
0009923C 13C0 00C0 0011             		move.b	d0,(psg_input).l
00099242 13C6 00C0 0011             		move.b	d6,(psg_input).l
00099248                            ; locret_7291E:
00099248                            @locret:
00099248 4E75                       		rts	
0009924A                            ; End of function PSGUpdateFreq
0009924A                            
0009924A                            ; ===========================================================================
0009924A                            ; loc_72920:
0009924A                            PSGSetRest:
0009924A 08D5 0001                  		bset	#1,(a5)	; Set 'track at rest' bit (TrackPlaybackControl)
0009924E 4E75                       		rts	
00099250                            
00099250                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099250                            
00099250                            ; sub_72926:
00099250                            PSGUpdateVolFX:
00099250 4A2D 000B                  		tst.b	TrackVoiceIndex(a5)	; Test PSG tone
00099254 6700 0000                  		beq.w	locret_7298A		; Return if it is zero
00099258                            ; loc_7292E:
00099258                            PSGDoVolFX:	; This can actually be made a bit more efficient, see the comments for more
00099258 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get volume
0009925C 7000                       		moveq	#0,d0
0009925E 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get PSG tone
00099262 6700                       		beq.s	SetPSGVolume
00099264 2079 0009 8216             		movea.l	(Go_PSGIndex).l,a0
0009926A 5340                       		subq.w	#1,d0
0009926C E548                       		lsl.w	#2,d0
0009926E 2070 0000                  		movea.l	(a0,d0.w),a0
00099272 102D 000C                  		move.b	TrackVolEnvIndex(a5),d0	; Get volume envelope index		; move.b	TrackVolEnvIndex(a5),d0
00099276 1030 0000                  		move.b	(a0,d0.w),d0			; Volume envelope value			; addq.b	#1,TrackVolEnvIndex(a5)
0009927A 522D 000C                  		addq.b	#1,TrackVolEnvIndex(a5)	; Increment volume envelope index	; move.b	(a0,d0.w),d0
0009927E 0800 0007                  		btst	#7,d0				; Is volume envelope value negative?	; <-- makes this line redundant
00099282 6700                       		beq.s	@gotflutter			; Branch if not				; but you gotta make this one a bpl
00099284 0C00 0080                  		cmpi.b	#$80,d0				; Is it the terminator?			; Since this is the only check, you can take the optimisation a step further:
00099288 6700                       		beq.s	VolEnvHold			; If so, branch				; Change the previous beq (bpl) to a bmi and make it branch to VolEnvHold to make these last two lines redundant
0009928A                            ; loc_72960:
0009928A                            @gotflutter:
0009928A DC40                       		add.w	d0,d6		; Add volume envelope value to volume
0009928C 0C06 0010                  		cmpi.b	#$10,d6		; Is volume $10 or higher?
00099290 6500                       		blo.s	SetPSGVolume	; Branch if not
00099292 7C0F                       		moveq	#$F,d6		; Limit to silence and fall through
00099294                            ; End of function PSGUpdateVolFX
00099294                            
00099294                            
00099294                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099294                            
00099294                            ; sub_7296A:
00099294                            SetPSGVolume:
00099294 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
00099298 6600                       		bne.s	locret_7298A	; Return if so
0009929A 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
0009929E 6600                       		bne.s	locret_7298A	; Return if so
000992A0 0815 0004                  		btst	#4,(a5)		; Is track set to not attack next note? (TrackPlaybackControl)
000992A4 6600                       		bne.s	PSGCheckNoteTimeout ; Branch if yes
000992A6                            ; loc_7297C:
000992A6                            PSGSendVolume:
000992A6 8C2D 0001                  		or.b	TrackVoiceControl(a5),d6 ; Add in track selector bits
000992AA 0606 0010                  		addi.b	#$10,d6			; Mark it as a volume command
000992AE 13C6 00C0 0011             		move.b	d6,(psg_input).l
000992B4                            
000992B4                            locret_7298A:
000992B4 4E75                       		rts	
000992B6                            ; ===========================================================================
000992B6                            ; loc_7298C: PSGCheckNoteFill:
000992B6                            PSGCheckNoteTimeout:
000992B6 4A2D 0013                  		tst.b	TrackNoteTimeoutMaster(a5)	; Is note timeout on?
000992BA 67EA                       		beq.s	PSGSendVolume			; Branch if not
000992BC 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)		; Has note timeout expired?
000992C0 66E4                       		bne.s	PSGSendVolume			; Branch if not
000992C2 4E75                       		rts	
000992C4                            ; End of function SetPSGVolume
000992C4                            
000992C4                            ; ===========================================================================
000992C4                            ; loc_7299A: FlutterDone:
000992C4                            VolEnvHold:
000992C4 532D 000C                  		subq.b	#1,TrackVolEnvIndex(a5)	; Decrement volume envelope index
000992C8 4E75                       		rts	
000992CA                            
000992CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000992CA                            
000992CA                            ; sub_729A0:
000992CA                            PSGNoteOff:
000992CA 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
000992CE 6600                       		bne.s	locret_729B4	; Return if so
000992D0                            ; loc_729A6:
000992D0                            SendPSGNoteOff:
000992D0 102D 0001                  		move.b	TrackVoiceControl(a5),d0	; PSG channel to change
000992D4 0000 001F                  		ori.b	#$1F,d0				; Maximum volume attenuation
000992D8 13C0 00C0 0011             		move.b	d0,(psg_input).l
000992DE                            		; DANGER! If InitMusicPlayback doesn't silence all channels, there's the
000992DE                            		; risk of music accidentally playing noise because it can't detect if
000992DE                            		; the PSG4/noise channel needs muting on track initialisation.
000992DE                            		; S&K's driver fixes it by doing this:
000992DE 0C00 00DF                  		cmpi.b	#$DF,d0				; Are stopping PSG3?
000992E2 6600                       		bne.s	locret_729B4
000992E4 13FC 00FF 00C0 0011        		move.b	#$FF,(psg_input).l		; If so, stop noise channel while we're at it
000992EC                            
000992EC                            locret_729B4:
000992EC 4E75                       		rts	
000992EE                            ; End of function PSGNoteOff
000992EE                            
000992EE                            
000992EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000992EE                            
000992EE                            ; sub_729B6:
000992EE                            PSGSilenceAll:
000992EE 41F9 00C0 0011             		lea	(psg_input).l,a0
000992F4 10BC 009F                  		move.b	#$9F,(a0)	; Silence PSG 1
000992F8 10BC 00BF                  		move.b	#$BF,(a0)	; Silence PSG 2
000992FC 10BC 00DF                  		move.b	#$DF,(a0)	; Silence PSG 3
00099300 10BC 00FF                  		move.b	#$FF,(a0)	; Silence noise channel
00099304 4E75                       		rts	
00099306                            ; End of function PSGSilenceAll
00099306                            
00099306                            ; ===========================================================================
00099306                            ; word_729CE:
00099306                            PSGFrequencies:
00099306 0356 0326 02F9 02CE 02A5+  		dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A
00099316 021A 01FB 01DF 01C4 01AB+  		dc.w $21A, $1FB, $1DF, $1C4, $1AB, $193, $17D, $167
00099326 0153 0140 012E 011D 010D+  		dc.w $153, $140, $12E, $11D, $10D,  $FE,  $EF,  $E2
00099336 00D6 00C9 00BE 00B4 00A9+  		dc.w  $D6,  $C9,  $BE,  $B4,  $A9,  $A0,  $97,  $8F
00099346 0087 007F 0078 0071 006B+  		dc.w  $87,  $7F,  $78,  $71,  $6B,  $65,  $5F,  $5A
00099356 0055 0050 004B 0047 0043+  		dc.w  $55,  $50,  $4B,  $47,  $43,  $40,  $3C,  $39
00099366 0036 0033 0030 002D 002B+  		dc.w  $36,  $33,  $30,  $2D,  $2B,  $28,  $26,  $24
00099376 0022 0020 001F 001D 001B+  		dc.w  $22,  $20,  $1F,  $1D,  $1B,  $1A,  $18,  $17
00099386 0016 0015 0013 0012 0011+  		dc.w  $16,  $15,  $13,  $12,  $11,    0
00099392                            
00099392                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099392                            
00099392                            ; sub_72A5A:
00099392                            CoordFlag:
00099392 0445 00E0                  		subi.w	#$E0,d5
00099396 E54D                       		lsl.w	#2,d5
00099398 4EFB 5000                  		jmp	coordflagLookup(pc,d5.w)
0009939C                            ; End of function CoordFlag
0009939C                            
0009939C                            ; ===========================================================================
0009939C                            ; loc_72A64:
0009939C                            coordflagLookup:
0009939C 6000 0000                  		bra.w	cfPanningAMSFMS		; $E0
000993A0                            ; ===========================================================================
000993A0 6000 0000                  		bra.w	cfDetune		; $E1
000993A4                            ; ===========================================================================
000993A4 6000 0000                  		bra.w	cfSetCommunication	; $E2
000993A8                            ; ===========================================================================
000993A8 6000 0000                  		bra.w	cfJumpReturn		; $E3
000993AC                            ; ===========================================================================
000993AC 6000 0000                  		bra.w	cfFadeInToPrevious	; $E4
000993B0                            ; ===========================================================================
000993B0 6000 0000                  		bra.w	cfSetTempoDivider	; $E5
000993B4                            ; ===========================================================================
000993B4 6000 0000                  		bra.w	cfChangeFMVolume	; $E6
000993B8                            ; ===========================================================================
000993B8 6000 0000                  		bra.w	cfHoldNote		; $E7
000993BC                            ; ===========================================================================
000993BC 6000 0000                  		bra.w	cfNoteTimeout		; $E8
000993C0                            ; ===========================================================================
000993C0 6000 0000                  		bra.w	cfChangeTransposition	; $E9
000993C4                            ; ===========================================================================
000993C4 6000 0000                  		bra.w	cfSetTempo		; $EA
000993C8                            ; ===========================================================================
000993C8 6000 0000                  		bra.w	cfSetTempoDividerAll	; $EB
000993CC                            ; ===========================================================================
000993CC 6000 0000                  		bra.w	cfChangePSGVolume	; $EC
000993D0                            ; ===========================================================================
000993D0 6000 0000                  		bra.w	cfClearPush		; $ED
000993D4                            ; ===========================================================================
000993D4 6000 0000                  		bra.w	cfStopSpecialFM4	; $EE
000993D8                            ; ===========================================================================
000993D8 6000 0000                  		bra.w	cfSetVoice		; $EF
000993DC                            ; ===========================================================================
000993DC 6000 0000                  		bra.w	cfModulation		; $F0
000993E0                            ; ===========================================================================
000993E0 6000 0000                  		bra.w	cfEnableModulation	; $F1
000993E4                            ; ===========================================================================
000993E4 6000 0000                  		bra.w	cfStopTrack		; $F2
000993E8                            ; ===========================================================================
000993E8 6000 0000                  		bra.w	cfSetPSGNoise		; $F3
000993EC                            ; ===========================================================================
000993EC 6000 0000                  		bra.w	cfDisableModulation	; $F4
000993F0                            ; ===========================================================================
000993F0 6000 0000                  		bra.w	cfSetPSGTone		; $F5
000993F4                            ; ===========================================================================
000993F4 6000 0000                  		bra.w	cfJumpTo		; $F6
000993F8                            ; ===========================================================================
000993F8 6000 0000                  		bra.w	cfRepeatAtPos		; $F7
000993FC                            ; ===========================================================================
000993FC 6000 0000                  		bra.w	cfJumpToGosub		; $F8
00099400                            ; ===========================================================================
00099400 6000 0000                  		bra.w	cfOpF9			; $F9
00099404                            ; ===========================================================================
00099404                            ; loc_72ACC:
00099404                            cfPanningAMSFMS:
00099404 121C                       		move.b	(a4)+,d1		; New AMS/FMS/panning value
00099406 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
0009940A 6B00                       		bmi.s	locret_72AEA		; Return if yes
0009940C 102D 000A                  		move.b	TrackAMSFMSPan(a5),d0	; Get current AMS/FMS/panning
00099410 0200 0037                  		andi.b	#$37,d0			; Retain bits 0-2, 3-4 if set
00099414 8200                       		or.b	d0,d1			; Mask in new value
00099416 1B41 000A                  		move.b	d1,TrackAMSFMSPan(a5)	; Store value
0009941A 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
0009941E 6000 FC20                  		bra.w	WriteFMIorIIMain
00099422                            ; ===========================================================================
00099422                            
00099422                            locret_72AEA:
00099422 4E75                       		rts	
00099424                            ; ===========================================================================
00099424                            ; loc_72AEC: cfAlterNotes:
00099424                            cfDetune:
00099424 1B5C 001E                  		move.b	(a4)+,TrackDetune(a5)	; Set detune value
00099428 4E75                       		rts	
0009942A                            ; ===========================================================================
0009942A                            ; loc_72AF2: cfUnknown1:
0009942A                            cfSetCommunication:
0009942A 1D5C 0007                  		move.b	(a4)+,v_communication_byte(a6)	; Set otherwise unused communication byte to parameter
0009942E 4E75                       		rts	
00099430                            ; ===========================================================================
00099430                            ; loc_72AF8:
00099430                            cfJumpReturn:
00099430 7000                       		moveq	#0,d0
00099432 102D 000D                  		move.b	TrackStackPointer(a5),d0 ; Track stack pointer
00099436 2875 0000                  		movea.l	(a5,d0.w),a4		; Set track return address
0009943A 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)		; Set 'popped' value to zero
00099442 544C                       		addq.w	#2,a4			; Skip jump target address from gosub flag
00099444 5800                       		addq.b	#4,d0			; Actually 'pop' value
00099446 1B40 000D                  		move.b	d0,TrackStackPointer(a5) ; Set new stack pointer
0009944A 4E75                       		rts	
0009944C                            ; ===========================================================================
0009944C                            ; loc_72B14:
0009944C                            cfFadeInToPrevious:
0009944C 204E                       		movea.l	a6,a0
0009944E 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
00099452 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; $220 bytes to restore: all variables and music track data
00099456                            ; loc_72B1E:
00099456                            @restoreramloop:
00099456 20D9                       		move.l	(a1)+,(a0)+
00099458 51C8 FFFC                  		dbf	d0,@restoreramloop
0009945C                            
0009945C 08EE 0002 0040             		bset	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Set 'SFX overriding' bit
00099462 264D                       		movea.l	a5,a3
00099464 1C3C 0028                  		move.b	#$28,d6
00099468 9C2E 0026                  		sub.b	v_fadein_counter(a6),d6			; If fade already in progress, this adjusts track volume accordingly
0009946C 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
0009946E 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00099472                            ; loc_72B3A:
00099472                            @fmloop:
00099472 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
00099476 6700                       		beq.s	@nextfm		; Branch if not
00099478 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
0009947C DD2D 0009                  		add.b	d6,TrackVolume(a5) ; Apply current volume fade-in
00099480 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00099484 6600                       		bne.s	@nextfm		; Branch if yes
00099486 7000                       		moveq	#0,d0
00099488 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get voice
0009948C 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00099490 4EBA 0000                  		jsr	SetVoice(pc)
00099494                            ; loc_72B5C:
00099494                            @nextfm:
00099494 DAFC 0030                  		adda.w	#TrackSz,a5
00099498 51CF FFD8                  		dbf	d7,@fmloop
0009949C                            
0009949C 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
0009949E                            ; loc_72B66:
0009949E                            @psgloop:
0009949E 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
000994A2 6700                       		beq.s	@nextpsg	; Branch if not
000994A4 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
000994A8 4EBA FE20                  		jsr	PSGNoteOff(pc)
000994AC DD2D 0009                  		add.b	d6,TrackVolume(a5)	; Apply current volume fade-in
000994B0                            ; loc_72B78:
000994B0                            @nextpsg:
000994B0 DAFC 0030                  		adda.w	#TrackSz,a5
000994B4 51CF FFE8                  		dbf	d7,@psgloop
000994B8                            		
000994B8 2A4B                       		movea.l	a3,a5
000994BA 1D7C 0080 0024             		move.b	#$80,f_fadein_flag(a6)		; Trigger fade-in
000994C0 1D7C 0028 0026             		move.b	#$28,v_fadein_counter(a6)	; Fade-in delay
000994C6 422E 0027                  		clr.b	f_1up_playing(a6)
000994CA 33FC 0000 00A1 1100        		startZ80
000994D2 504F                       		addq.w	#8,sp		; Tamper return value so we don't return to caller
000994D4 4E75                       		rts	
000994D6                            ; ===========================================================================
000994D6                            ; loc_72B9E:
000994D6                            cfSetTempoDivider:
000994D6 1B5C 0002                  		move.b	(a4)+,TrackTempoDivider(a5)	; Set tempo divider on current track
000994DA 4E75                       		rts	
000994DC                            ; ===========================================================================
000994DC                            ; loc_72BA4: cfSetVolume:
000994DC                            cfChangeFMVolume:
000994DC 101C                       		move.b	(a4)+,d0		; Get parameter
000994DE D12D 0009                  		add.b	d0,TrackVolume(a5)	; Add to current volume
000994E2 6000 0000                  		bra.w	SendVoiceTL
000994E6                            ; ===========================================================================
000994E6                            ; loc_72BAE: cfPreventAttack:
000994E6                            cfHoldNote:
000994E6 08D5 0004                  		bset	#4,(a5)		; Set 'do not attack next note' bit (TrackPlaybackControl)
000994EA 4E75                       		rts	
000994EC                            ; ===========================================================================
000994EC                            ; loc_72BB4: cfNoteFill
000994EC                            cfNoteTimeout:
000994EC 1B54 0012                  		move.b	(a4),TrackNoteTimeout(a5)		; Note fill timeout
000994F0 1B5C 0013                  		move.b	(a4)+,TrackNoteTimeoutMaster(a5)	; Note fill master
000994F4 4E75                       		rts	
000994F6                            ; ===========================================================================
000994F6                            ; loc_72BBE: cfAddKey:
000994F6                            cfChangeTransposition:
000994F6 101C                       		move.b	(a4)+,d0		; Get parameter
000994F8 D12D 0008                  		add.b	d0,TrackTranspose(a5)	; Add to transpose value
000994FC 4E75                       		rts	
000994FE                            ; ===========================================================================
000994FE                            ; loc_72BC6:
000994FE                            cfSetTempo:
000994FE 1D54 0002                  		move.b	(a4),v_main_tempo(a6)		; Set main tempo
00099502 1D5C 0001                  		move.b	(a4)+,v_main_tempo_timeout(a6)	; And reset timeout (!)
00099506 4E75                       		rts	
00099508                            ; ===========================================================================
00099508                            ; loc_72BD0: cfSetTempoMod:
00099508                            cfSetTempoDividerAll:
00099508 41EE 0040                  		lea	v_music_track_ram(a6),a0
0009950C 101C                       		move.b	(a4)+,d0			; Get new tempo divider
0009950E 7230                       		moveq	#TrackSz,d1
00099510 7409                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d2	; 1 DAC + 6 FM + 3 PSG tracks
00099512                            ; loc_72BDA:
00099512                            @trackloop:
00099512 1140 0002                  		move.b	d0,TrackTempoDivider(a0)	; Set track's tempo divider
00099516 D0C1                       		adda.w	d1,a0
00099518 51CA FFF8                  		dbf	d2,@trackloop
0009951C                            
0009951C 4E75                       		rts	
0009951E                            ; ===========================================================================
0009951E                            ; loc_72BE6: cfChangeVolume:
0009951E                            cfChangePSGVolume:
0009951E 101C                       		move.b	(a4)+,d0		; Get volume change
00099520 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Apply it
00099524 4E75                       		rts	
00099526                            ; ===========================================================================
00099526                            ; loc_72BEE:
00099526                            cfClearPush:
00099526 422E 002C                  		clr.b	f_push_playing(a6)	; Allow push sound to be played once more
0009952A 4E75                       		rts	
0009952C                            ; ===========================================================================
0009952C                            ; loc_72BF4:
0009952C                            cfStopSpecialFM4:
0009952C 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
00099530 0895 0004                  		bclr	#4,(a5)		; Clear 'do not attack next note' bit (TrackPlaybackControl)
00099534 4EBA FAF2                  		jsr	FMNoteOff(pc)
00099538 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is SFX using FM4?
0009953C 6B00                       		bmi.s	@locexit					; Branch if yes
0009953E 264D                       		movea.l	a5,a3
00099540 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
00099544 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00099548 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
0009954C 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00099550 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00099554 4EBA 0000                  		jsr	SetVoice(pc)
00099558 2A4B                       		movea.l	a3,a5
0009955A                            ; loc_72C22:
0009955A                            @locexit:
0009955A 504F                       		addq.w	#8,sp		; Tamper with return value so we don't return to caller
0009955C 4E75                       		rts	
0009955E                            ; ===========================================================================
0009955E                            ; loc_72C26:
0009955E                            cfSetVoice:
0009955E 7000                       		moveq	#0,d0
00099560 101C                       		move.b	(a4)+,d0		; Get new voice
00099562 1B40 000B                  		move.b	d0,TrackVoiceIndex(a5)	; Store it
00099566 0815 0002                  		btst	#2,(a5)			; Is SFX overriding this track? (TrackPlaybackControl)
0009956A 6600 0000                  		bne.w	locret_72CAA		; Return if yes
0009956E 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Music voice pointer
00099572 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a music track?
00099576 6700                       		beq.s	SetVoice		; If yes, branch
00099578 226D 0020                  		movea.l	TrackVoicePtr(a5),a1	; SFX track voice pointer
0009957C 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a SFX track?
00099580 6B00                       		bmi.s	SetVoice		; If yes, branch
00099582 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1 ; Special SFX voice pointer
00099586                            
00099586                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099586                            
00099586                            ; sub_72C4E:
00099586                            SetVoice:
00099586 5340                       		subq.w	#1,d0
00099588 6B00                       		bmi.s	@havevoiceptr
0009958A 323C 0019                  		move.w	#25,d1
0009958E                            ; loc_72C56:
0009958E                            @voicemultiply:
0009958E D2C1                       		adda.w	d1,a1
00099590 51C8 FFFC                  		dbf	d0,@voicemultiply
00099594                            ; loc_72C5C:
00099594                            @havevoiceptr:
00099594 1219                       		move.b	(a1)+,d1		; feedback/algorithm
00099596 1B41 001F                  		move.b	d1,TrackFeedbackAlgo(a5) ; Save it to track RAM
0009959A 1801                       		move.b	d1,d4
0009959C 103C 00B0                  		move.b	#$B0,d0			; Command to write feedback/algorithm
000995A0 4EBA FAAA                  		jsr	WriteFMIorII(pc)
000995A4 45FA 0000                  		lea	FMInstrumentOperatorTable(pc),a2
000995A8 7600                       		moveq	#(FMInstrumentOperatorTable_End-FMInstrumentOperatorTable)-1,d3		; Don't want to send TL yet
000995AA                            ; loc_72C72:
000995AA                            @sendvoiceloop:
000995AA 101A                       		move.b	(a2)+,d0
000995AC 1219                       		move.b	(a1)+,d1
000995AE 4EBA FA9C                  		jsr	WriteFMIorII(pc)
000995B2 51CB FFF6                  		dbf	d3,@sendvoiceloop
000995B6                            
000995B6 7A03                       		moveq	#3,d5
000995B8 0244 0007                  		andi.w	#7,d4			; Get algorithm
000995BC 183B 4000                  		move.b	FMSlotMask(pc,d4.w),d4	; Get slot mask for algorithm
000995C0 162D 0009                  		move.b	TrackVolume(a5),d3	; Track volume attenuation
000995C4                            ; loc_72C8C:
000995C4                            @sendtlloop:
000995C4 101A                       		move.b	(a2)+,d0
000995C6 1219                       		move.b	(a1)+,d1
000995C8 E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
000995CA 6400                       		bcc.s	@sendtl		; Branch if not
000995CC D203                       		add.b	d3,d1		; Include additional attenuation
000995CE                            ; loc_72C96:
000995CE                            @sendtl:
000995CE 4EBA FA7C                  		jsr	WriteFMIorII(pc)
000995D2 51CD FFF0                  		dbf	d5,@sendtlloop
000995D6                            		
000995D6 103C 00B4                  		move.b	#$B4,d0			; Register for AMS/FMS/Panning
000995DA 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Value to send
000995DE 4EBA FA6C                  		jsr	WriteFMIorII(pc) 	; (It would be better if this were a jmp)
000995E2                            
000995E2                            locret_72CAA:
000995E2 4E75                       		rts	
000995E4                            ; End of function SetVoice
000995E4                            
000995E4                            ; ===========================================================================
000995E4                            ; byte_72CAC:
000995E4 0808 0808 0A0E 0E0F        FMSlotMask:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
000995EC                            
000995EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000995EC                            
000995EC                            ; sub_72CB4:
000995EC                            SendVoiceTL:
000995EC 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
000995F0 6600                       		bne.s	@locret		; Return if so
000995F2 7000                       		moveq	#0,d0
000995F4 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
000995F8 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
000995FC 4A2E 000E                  		tst.b	f_voice_selector(a6)
00099600 6700                       		beq.s	@gotvoiceptr
00099602                            		; DANGER! This uploads the wrong voice! It should have been a5 instead
00099602                            		; of a6!
00099602 226D 0020                  		movea.l	TrackVoicePtr(a5),a1
00099606 4A2E 000E                  		tst.b	f_voice_selector(a6)
0009960A 6B00                       		bmi.s	@gotvoiceptr
0009960C 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1
00099610                            ; loc_72CD8:
00099610                            @gotvoiceptr:
00099610 5340                       		subq.w	#1,d0
00099612 6B00                       		bmi.s	@gotvoice
00099614 323C 0019                  		move.w	#25,d1
00099618                            ; loc_72CE0:
00099618                            @voicemultiply:
00099618 D2C1                       		adda.w	d1,a1
0009961A 51C8 FFFC                  		dbf	d0,@voicemultiply
0009961E                            ; loc_72CE6:
0009961E                            @gotvoice:
0009961E D2FC 0015                  		adda.w	#21,a1				; Want TL
00099622 45FA 0000                  		lea	FMInstrumentTLTable(pc),a2
00099626 102D 001F                  		move.b	TrackFeedbackAlgo(a5),d0	; Get feedback/algorithm
0009962A 0240 0007                  		andi.w	#7,d0				; Want only algorithm
0009962E 183B 00B4                  		move.b	FMSlotMask(pc,d0.w),d4		; Get slot mask
00099632 162D 0009                  		move.b	TrackVolume(a5),d3		; Get track volume attenuation
00099636 6B00                       		bmi.s	@locret				; If negative, stop
00099638 7A00                       		moveq	#(FMInstrumentTLTable_End-FMInstrumentTLTable)-1,d5
0009963A                            ; loc_72D02:
0009963A                            @sendtlloop:
0009963A 101A                       		move.b	(a2)+,d0
0009963C 1219                       		move.b	(a1)+,d1
0009963E E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
00099640 6400                       		bcc.s	@senttl		; Branch if not
00099642 D203                       		add.b	d3,d1		; Include additional attenuation
00099644 6500                       		bcs.s	@senttl		; Branch on overflow
00099646 4EBA FA04                  		jsr	WriteFMIorII(pc)
0009964A                            ; loc_72D12:
0009964A                            @senttl:
0009964A 51CD FFEE                  		dbf	d5,@sendtlloop
0009964E                            ; locret_72D16:
0009964E                            @locret:
0009964E 4E75                       		rts	
00099650                            ; End of function SendVoiceTL
00099650                            
00099650                            ; ===========================================================================
00099650                            ; byte_72D18:
00099650                            FMInstrumentOperatorTable:
00099650 30                         		dc.b  $30		; Detune/multiple operator 1
00099651 38                         		dc.b  $38		; Detune/multiple operator 3
00099652 34                         		dc.b  $34		; Detune/multiple operator 2
00099653 3C                         		dc.b  $3C		; Detune/multiple operator 4
00099654 50                         		dc.b  $50		; Rate scalling/attack rate operator 1
00099655 58                         		dc.b  $58		; Rate scalling/attack rate operator 3
00099656 54                         		dc.b  $54		; Rate scalling/attack rate operator 2
00099657 5C                         		dc.b  $5C		; Rate scalling/attack rate operator 4
00099658 60                         		dc.b  $60		; Amplitude modulation/first decay rate operator 1
00099659 68                         		dc.b  $68		; Amplitude modulation/first decay rate operator 3
0009965A 64                         		dc.b  $64		; Amplitude modulation/first decay rate operator 2
0009965B 6C                         		dc.b  $6C		; Amplitude modulation/first decay rate operator 4
0009965C 70                         		dc.b  $70		; Secondary decay rate operator 1
0009965D 78                         		dc.b  $78		; Secondary decay rate operator 3
0009965E 74                         		dc.b  $74		; Secondary decay rate operator 2
0009965F 7C                         		dc.b  $7C		; Secondary decay rate operator 4
00099660 80                         		dc.b  $80		; Secondary amplitude/release rate operator 1
00099661 88                         		dc.b  $88		; Secondary amplitude/release rate operator 3
00099662 84                         		dc.b  $84		; Secondary amplitude/release rate operator 2
00099663 8C                         		dc.b  $8C		; Secondary amplitude/release rate operator 4
00099664                            FMInstrumentOperatorTable_End
00099664                            ; byte_72D2C:
00099664                            FMInstrumentTLTable:
00099664 40                         		dc.b  $40		; Total level operator 1
00099665 48                         		dc.b  $48		; Total level operator 3
00099666 44                         		dc.b  $44		; Total level operator 2
00099667 4C                         		dc.b  $4C		; Total level operator 4
00099668                            FMInstrumentTLTable_End
00099668                            ; ===========================================================================
00099668                            ; loc_72D30:
00099668                            cfModulation:
00099668 08D5 0003                  		bset	#3,(a5)				; Turn on modulation (TrackPlaybackControl)
0009966C 2B4C 0014                  		move.l	a4,TrackModulationPtr(a5)	; Save pointer to modulation data
00099670 1B5C 0018                  		move.b	(a4)+,TrackModulationWait(a5)	; Modulation delay
00099674 1B5C 0019                  		move.b	(a4)+,TrackModulationSpeed(a5)	; Modulation speed
00099678 1B5C 001A                  		move.b	(a4)+,TrackModulationDelta(a5)	; Modulation delta
0009967C 101C                       		move.b	(a4)+,d0			; Modulation steps...
0009967E E208                       		lsr.b	#1,d0				; ... divided by 2...
00099680 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; ... before being stored
00099684 426D 001C                  		clr.w	TrackModulationVal(a5)		; Total accumulated modulation frequency change
00099688 4E75                       		rts	
0009968A                            ; ===========================================================================
0009968A                            ; loc_72D52:
0009968A                            cfEnableModulation:
0009968A 08D5 0003                  		bset	#3,(a5)		; Turn on modulation (TrackPlaybackControl)
0009968E 4E75                       		rts	
00099690                            ; ===========================================================================
00099690                            ; loc_72D58:
00099690                            cfStopTrack:
00099690 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00099694 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
00099698 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
0009969C 6B00                       		bmi.s	@stoppsg		; Branch if yes
0009969E 4A2E 0008                  		tst.b	f_updating_dac(a6)	; Is this the DAC we are updating?
000996A2 6B00 0000                  		bmi.w	@locexit		; Exit if yes
000996A6 4EBA F980                  		jsr	FMNoteOff(pc)
000996AA 6000                       		bra.s	@stoppedchannel
000996AC                            ; ===========================================================================
000996AC                            ; loc_72D74:
000996AC                            @stoppsg:
000996AC 4EBA FC1C                  		jsr	PSGNoteOff(pc)
000996B0                            ; loc_72D78:
000996B0                            @stoppedchannel:
000996B0 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating SFX?
000996B4 6A00 0000                  		bpl.w	@locexit		; Exit if not
000996B8 4216                       		clr.b	v_sndprio(a6)		; Clear priority
000996BA 7000                       		moveq	#0,d0
000996BC 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get voice control bits
000996C0 6B00                       		bmi.s	@getpsgptr		; Branch if PSG
000996C2 41FA F536                  		lea	SFX_BGMChannelRAM(pc),a0
000996C6 264D                       		movea.l	a5,a3
000996C8 0C00 0004                  		cmpi.b	#4,d0			; Is this FM4?
000996CC 6600                       		bne.s	@getpointer		; Branch if not
000996CE 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
000996D2 6A00                       		bpl.s	@getpointer		; Branch if not
000996D4 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
000996D8 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get voice pointer
000996DC 6000                       		bra.s	@gotpointer
000996DE                            ; ===========================================================================
000996DE                            ; loc_72DA8:
000996DE                            @getpointer:
000996DE 5500                       		subq.b	#2,d0		; SFX can only use FM3 and up
000996E0 E508                       		lsl.b	#2,d0
000996E2 2A70 0000                  		movea.l	(a0,d0.w),a5
000996E6 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000996E8 6A00                       		bpl.s	@novoiceupd		; Branch if not
000996EA 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get voice pointer
000996EE                            ; loc_72DB8:
000996EE                            @gotpointer:
000996EE 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX overriding' bit (TrackPlaybackControl)
000996F2 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
000996F6 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
000996FA 4EBA FE8A                  		jsr	SetVoice(pc)
000996FE                            ; loc_72DC8:
000996FE                            @novoiceupd:
000996FE 2A4B                       		movea.l	a3,a5
00099700 6000                       		bra.s	@locexit
00099702                            ; ===========================================================================
00099702                            ; loc_72DCC:
00099702                            @getpsgptr:
00099702 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00099706 4A10                       		tst.b	(a0)		; Is track playing? (TrackPlaybackControl)
00099708 6A00                       		bpl.s	@getchannelptr	; Branch if not
0009970A 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it the noise channel?
0009970E 6700                       		beq.s	@gotchannelptr	; Branch if yes
00099710 0C00 00C0                  		cmpi.b	#$C0,d0		; Is it PSG 3?
00099714 6700                       		beq.s	@gotchannelptr	; Branch if yes
00099716                            ; loc_72DE0:
00099716                            @getchannelptr:
00099716 41FA F4E2                  		lea	SFX_BGMChannelRAM(pc),a0
0009971A E608                       		lsr.b	#3,d0
0009971C 2070 0000                  		movea.l	(a0,d0.w),a0
00099720                            ; loc_72DEA:
00099720                            @gotchannelptr:
00099720 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX overriding' bit (TrackPlaybackControl)
00099724 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
00099728 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise pointer?
0009972E 6600                       		bne.s	@locexit			; Branch if not
00099730 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise tone
00099738                            ; loc_72E02:
00099738                            @locexit:
00099738 504F                       		addq.w	#8,sp		; Tamper with return value so we don't go back to caller
0009973A 4E75                       		rts	
0009973C                            ; ===========================================================================
0009973C                            ; loc_72E06:
0009973C                            cfSetPSGNoise:
0009973C 1B7C 00E0 0001             		move.b	#$E0,TrackVoiceControl(a5)	; Turn channel into noise channel
00099742 1B5C 001F                  		move.b	(a4)+,TrackPSGNoise(a5)	; Save noise tone
00099746 0815 0002                  		btst	#2,(a5)				; Is track being overridden? (TrackPlaybackControl)
0009974A 6600                       		bne.s	@locret				; Return if yes
0009974C 13EC FFFF 00C0 0011        		move.b	-1(a4),(psg_input).l		; Set tone
00099754                            ; locret_72E1E:
00099754                            @locret:
00099754 4E75                       		rts	
00099756                            ; ===========================================================================
00099756                            ; loc_72E20:
00099756                            cfDisableModulation:
00099756 0895 0003                  		bclr	#3,(a5)		; Disable modulation (TrackPlaybackControl)
0009975A 4E75                       		rts	
0009975C                            ; ===========================================================================
0009975C                            ; loc_72E26:
0009975C                            cfSetPSGTone:
0009975C 1B5C 000B                  		move.b	(a4)+,TrackVoiceIndex(a5)	; Set current PSG tone
00099760 4E75                       		rts	
00099762                            ; ===========================================================================
00099762                            ; loc_72E2C:
00099762                            cfJumpTo:
00099762 101C                       		move.b	(a4)+,d0	; High byte of offset
00099764 E148                       		lsl.w	#8,d0		; Shift it into place
00099766 101C                       		move.b	(a4)+,d0	; Low byte of offset
00099768 D8C0                       		adda.w	d0,a4		; Add to current position
0009976A 534C                       		subq.w	#1,a4		; Put back one byte
0009976C 4E75                       		rts	
0009976E                            ; ===========================================================================
0009976E                            ; loc_72E38:
0009976E                            cfRepeatAtPos:
0009976E 7000                       		moveq	#0,d0
00099770 101C                       		move.b	(a4)+,d0			; Loop index
00099772 121C                       		move.b	(a4)+,d1			; Repeat count
00099774 4A35 0024                  		tst.b	TrackLoopCounters(a5,d0.w)	; Has this loop already started?
00099778 6600                       		bne.s	@loopexists			; Branch if yes
0009977A 1B81 0024                  		move.b	d1,TrackLoopCounters(a5,d0.w)	; Initialize repeat count
0009977E                            ; loc_72E48:
0009977E                            @loopexists:
0009977E 5335 0024                  		subq.b	#1,TrackLoopCounters(a5,d0.w)	; Decrease loop's repeat count
00099782 66DE                       		bne.s	cfJumpTo			; If nonzero, branch to target
00099784 544C                       		addq.w	#2,a4				; Skip target address
00099786 4E75                       		rts	
00099788                            ; ===========================================================================
00099788                            ; loc_72E52:
00099788                            cfJumpToGosub:
00099788 7000                       		moveq	#0,d0
0009978A 102D 000D                  		move.b	TrackStackPointer(a5),d0	; Current stack pointer
0009978E 5900                       		subq.b	#4,d0				; Add space for another target
00099790 2B8C 0000                  		move.l	a4,(a5,d0.w)			; Put in current address (*before* target for jump!)
00099794 1B40 000D                  		move.b	d0,TrackStackPointer(a5)	; Store new stack pointer
00099798 60C8                       		bra.s	cfJumpTo
0009979A                            ; ===========================================================================
0009979A                            ; loc_72E64:
0009979A                            cfOpF9:
0009979A 103C 0088                  		move.b	#$88,d0		; D1L/RR of Operator 3
0009979E 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
000997A2 4EBA F8B4                  		jsr	WriteFMI(pc)
000997A6 103C 008C                  		move.b	#$8C,d0		; D1L/RR of Operator 4
000997AA 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
000997AE 6000 F8A8                  		bra.w	WriteFMI
000997B2                            ; ===========================================================================
000997B2                            
000997B2                            Kos_Z80:
000997B2                            		incbin	"sound\z80.bin", 0, $15
000997C7 00                         		dc.b ((SegaPCM&$FF8000)/$8000)&1						; Least bit of bank ID (bit 15 of address)
000997C8                            		incbin	"sound\z80.bin", $16, 6
000997CE 00                         		dc.b ((SegaPCM&$FF8000)/$8000)>>1						; ... the remaining bits of bank ID (bits 16-23)
000997CF                            		incbin	"sound\z80.bin", $1D, $93
00099862 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$7F00)>>8)|$80				; Pointer to Sega PCM, relative to start of ROM bank (i.e., little_endian($8000 + SegaPCM&$7FFF)
00099864                            		incbin	"sound\z80.bin", $B2, 1
00099865 0000                       		dc.w (((SegaPCM_End-SegaPCM)&$FF)<<8)+(((SegaPCM_End-SegaPCM)&$FF00)>>8)	; ... the size of the Sega PCM (little endian)
00099867                            		incbin	"sound\z80.bin", $B5, $16AB
0009AF08                            		even
0009AF08                            
0009AF08                            Music81:	incbin	"sound/music/Mus81 - GHZ.bin"
0009C22C 00                         		even
0009C22C                            Music82:	incbin	"sound/music/Mus82 - LZ.bin"
0009DAB4                            		even
0009DAB4                            Music83:	incbin	"sound/music/Mus83 - MZ.bin"
000A5434 00                         		even
000A5434                            Music84:	incbin	"sound/music/Mus84 - SLZ.bin"
000A6C48 00                         		even
000A6C48                            Music85:	incbin	"sound/music/Mus85 - SYZ.bin"
000A79EE                            		even
000A79EE                            Music86:	incbin	"sound/music/Mus86 - SBZ.bin"
000A8DA6                            		even
000A8DA6                            Music87:	incbin	"sound/music/Mus87 - Invincibility.bin"
000A969E 00                         		even
000A969E                            Music88:	include	"sound/music/Mus88 - Extra Life.asm"
000A969E                            extralifejingle_Header:
000A969E                            	smpsHeaderStartSong 1
000A96A0 0703                       	smpsHeaderChan      $07, $03
000A96A2 0100                       	smpsHeaderTempo     $01, $00
000A96A4                            
000A96A8 0000 0000                  	smpsHeaderFM        extralifejingle_FM1,	$00, $00
000A96AC 0000 0000                  	smpsHeaderFM        extralifejingle_FM2,	$00, $00
000A96B0 0000 0000                  	smpsHeaderFM        extralifejingle_FM3,	$00, $00
000A96B4 0000 0000                  	smpsHeaderFM        extralifejingle_FM4,	$00, $00
000A96B8 0000 0000                  	smpsHeaderFM        extralifejingle_FM5,	$00, $00
000A96BC 0000 0000                  	smpsHeaderFM        extralifejingle_FM6,	$00, $00
000A96D2                            
000A96D2                            ; DAC Data
000A96D2                            extralifejingle_DAC:
000A96D2 807F 55                    	dc.b	nRst, $7F, $55
000A96D5 E4                         	smpsFade
000A96D6                            ; PSG1 Data
000A96D6                            extralifejingle_PSG1:
000A96D6                            ; PSG2 Data
000A96D6                            extralifejingle_PSG2:
000A96D6                            ; PSG3 Data
000A96D6                            extralifejingle_PSG3:
000A96D6 F2                         	smpsStop
000A96D7                            
000A96D7                            ; FM1 Data
000A96D7                            extralifejingle_FM1:
000A96D7 EF00                       	smpsSetvoice        $00
000A96D9 E616                       	smpsAlterVol        $16
000A96DB E0C0                       	smpsPan             panCenter, $00
000A96DD A61A BC13 BB12 B913 B60D+  	dc.b	nCs3, $1A, nB4, $13, nBb4, $12, nAb4, $13, nF4, $0D, nG3, $2C
000A96E9 AC06 800C                  	dc.b	nG3, $06, nRst, $0C
000A96ED F2                         	smpsStop
000A96EE                            
000A96EE                            ; FM2 Data
000A96EE                            extralifejingle_FM2:
000A96EE EF01                       	smpsSetvoice        $01
000A96F0 E616                       	smpsAlterVol        $16
000A96F2 E0C0                       	smpsPan             panCenter, $00
000A96F4 B61A AD13 AB12 AA13 A60D+  	dc.b	nF4, $1A, nAb3, $13, nFs3, $12, nF3, $13, nCs3, $0D, nA2, $2C
000A9700 A206 800C                  	dc.b	nA2, $06, nRst, $0C
000A9704 F2                         	smpsStop
000A9705                            
000A9705                            ; FM3 Data
000A9705                            extralifejingle_FM3:
000A9705 EF01                       	smpsSetvoice        $01
000A9707 E616                       	smpsAlterVol        $16
000A9709 E0C0                       	smpsPan             panCenter, $00
000A970B AD0D BC13 B9B7 B60C B20D+  	dc.b	nAb3, $0D, nB4, $13, nAb4, nFs4, nF4, $0C, nCs4, $0D, nC4, $2C
000A9717 B106 800C                  	dc.b	nC4, $06, nRst, $0C
000A971B F2                         	smpsStop
000A971C                            
000A971C                            ; FM4 Data
000A971C                            extralifejingle_FM4:
000A971C EF02                       	smpsSetvoice        $02
000A971E E0C0                       	smpsPan             panCenter, $00
000A9720 8001                       	dc.b	nRst, $01
000A9722 E616                       	smpsAlterVol        $16
000A9724 BE0C B913 ABAA A60C A20D+  	dc.b	nCs5, $0C, nAb4, $13, nFs3, nF3, nCs3, $0C, nA2, $0D, nE5, $2C
000A9730 C106 800C                  	dc.b	nE5, $06, nRst, $0C
000A9734 F2                         	smpsStop
000A9735                            
000A9735                            ; FM5 Data
000A9735                            extralifejingle_FM5:
000A9735 EF03                       	smpsSetvoice        $03
000A9737 E602                       	smpsAlterVol        $02
000A9739 E0C0                       	smpsPan             panCenter, $00
000A973B 8001                       	dc.b	nRst, $01
000A973D EF05                       	smpsSetvoice        $05
000A973F E60A                       	smpsAlterVol        $0A
000A9741 E780 0CC8 06B2 07B9 06C7+  	dc.b	smpsNoAttack, nRst, $0C, nB5, $06, nCs4, $07, nAb4, $06, nBb5, nCs4, $07
000A974D B706 C5C8 B607 C206 B2BE+  	dc.b	nFs4, $06, nAb5, nB5, nF4, $07, nF5, $06, nCs4, nCs5, $07, nA5
000A9759 06BD C1C4 07BD 06C1 C407+  	dc.b	$06, nC5, nE5, nG5, $07, nC5, $06, nE5, nG5, $07, nC5, $06
000A9765 C1C4 80                    	dc.b	nE5, nG5, nRst
000A9768 F2                         	smpsStop
000A9769                            
000A9769                            ; FM6 Data
000A9769                            extralifejingle_FM6:
000A9769 EF04                       	smpsSetvoice        $04
000A976B E607                       	smpsAlterVol        $07
000A976D E0C0                       	smpsPan             panCenter, $00
000A976F 8001                       	dc.b	nRst, $01
000A9771 EF06                       	smpsSetvoice        $06
000A9773 E6F9                       	smpsAlterVol        $F9
000A9775 A658 A72C A70C 80          	dc.b	nCs3, $58, nD3, $2C, nD3, $0C, nRst
000A977C F2                         	smpsStop
000A977D                            
000A977D                            extralifejingle_Voices:
000A977D                            ;	Voice $00
000A977D                            ;	$3A
000A977D                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
000A977D                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
000A977D                            	smpsVcAlgorithm     $02
000A977D                            	smpsVcFeedback      $07
000A977D                            	smpsVcUnusedBits    $00
000A977D                            	smpsVcDetune        $03, $07, $07, $03
000A977D                            	smpsVcCoarseFreq    $01, $04, $03, $04
000A977D                            	smpsVcRateScale     $00, $00, $00, $00
000A977D                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A977D                            	smpsVcAmpMod        $00, $00, $00, $00
000A977D                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
000A977D                            	smpsVcDecayRate2    $00, $00, $00, $00
000A977D                            	smpsVcDecayLevel    $00, $00, $00, $00
000A977D                            	smpsVcReleaseRate   $05, $03, $03, $03
000A9796                            
000A9796                            ;	Voice $01
000A9796                            ;	$3A
000A9796                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
000A9796                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
000A9796                            	smpsVcAlgorithm     $02
000A9796                            	smpsVcFeedback      $07
000A9796                            	smpsVcUnusedBits    $00
000A9796                            	smpsVcDetune        $03, $07, $07, $03
000A9796                            	smpsVcCoarseFreq    $01, $04, $03, $04
000A9796                            	smpsVcRateScale     $00, $00, $00, $00
000A9796                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A9796                            	smpsVcAmpMod        $00, $00, $00, $00
000A9796                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
000A9796                            	smpsVcDecayRate2    $00, $00, $00, $00
000A9796                            	smpsVcDecayLevel    $00, $00, $00, $00
000A9796                            	smpsVcReleaseRate   $05, $03, $03, $03
000A97AF                            
000A97AF                            ;	Voice $02
000A97AF                            ;	$3A
000A97AF                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
000A97AF                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
000A97AF                            	smpsVcAlgorithm     $02
000A97AF                            	smpsVcFeedback      $07
000A97AF                            	smpsVcUnusedBits    $00
000A97AF                            	smpsVcDetune        $03, $07, $07, $03
000A97AF                            	smpsVcCoarseFreq    $01, $04, $03, $04
000A97AF                            	smpsVcRateScale     $00, $00, $00, $00
000A97AF                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A97AF                            	smpsVcAmpMod        $00, $00, $00, $00
000A97AF                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
000A97AF                            	smpsVcDecayRate2    $00, $00, $00, $00
000A97AF                            	smpsVcDecayLevel    $00, $00, $00, $00
000A97AF                            	smpsVcReleaseRate   $05, $03, $03, $03
000A97C8                            
000A97C8                            ;	Voice $03
000A97C8                            ;	$00
000A97C8                            ;	$01, $0E, $00, $00, 	$1E, $1E, $1E, $1D, 	$1A, $1C, $10, $10
000A97C8                            ;	$00, $00, $00, $00, 	$FD, $FE, $F8, $F8, 	$1A, $25, $05, $00
000A97C8                            	smpsVcAlgorithm     $00
000A97C8                            	smpsVcFeedback      $00
000A97C8                            	smpsVcUnusedBits    $00
000A97C8                            	smpsVcDetune        $00, $00, $00, $00
000A97C8                            	smpsVcCoarseFreq    $00, $00, $0E, $01
000A97C8                            	smpsVcRateScale     $00, $00, $00, $00
000A97C8                            	smpsVcAttackRate    $1D, $1E, $1E, $1E
000A97C8                            	smpsVcAmpMod        $00, $00, $00, $00
000A97C8                            	smpsVcDecayRate1    $10, $10, $1C, $1A
000A97C8                            	smpsVcDecayRate2    $00, $00, $00, $00
000A97C8                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A97C8                            	smpsVcReleaseRate   $08, $08, $0E, $0D
000A97E1                            
000A97E1                            ;	Voice $04
000A97E1                            ;	$03
000A97E1                            ;	$66, $40, $40, $31, 	$1F, $1F, $1F, $1C, 	$0E, $05, $02, $01
000A97E1                            ;	$01, $00, $04, $06, 	$AA, $6A, $16, $18, 	$2A, $1A, $20, $00
000A97E1                            	smpsVcAlgorithm     $03
000A97E1                            	smpsVcFeedback      $00
000A97E1                            	smpsVcUnusedBits    $00
000A97E1                            	smpsVcDetune        $03, $04, $04, $06
000A97E1                            	smpsVcCoarseFreq    $01, $00, $00, $06
000A97E1                            	smpsVcRateScale     $00, $00, $00, $00
000A97E1                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
000A97E1                            	smpsVcAmpMod        $00, $00, $00, $00
000A97E1                            	smpsVcDecayRate1    $01, $02, $05, $0E
000A97E1                            	smpsVcDecayRate2    $06, $04, $00, $01
000A97E1                            	smpsVcDecayLevel    $01, $01, $06, $0A
000A97E1                            	smpsVcReleaseRate   $08, $06, $0A, $0A
000A97FA                            
000A97FA                            ;	Voice $05
000A97FA                            ;	$34
000A97FA                            ;	$33, $7E, $01, $74, 	$9B, $1F, $5F, $1F, 	$14, $07, $07, $08
000A97FA                            ;	$00, $00, $00, $00, 	$F6, $E4, $F7, $F7, 	$19, $71, $00, $00
000A97FA                            	smpsVcAlgorithm     $04
000A97FA                            	smpsVcFeedback      $06
000A97FA                            	smpsVcUnusedBits    $00
000A97FA                            	smpsVcDetune        $07, $00, $07, $03
000A97FA                            	smpsVcCoarseFreq    $04, $01, $0E, $03
000A97FA                            	smpsVcRateScale     $00, $01, $00, $02
000A97FA                            	smpsVcAttackRate    $1F, $1F, $1F, $1B
000A97FA                            	smpsVcAmpMod        $00, $00, $00, $00
000A97FA                            	smpsVcDecayRate1    $08, $07, $07, $14
000A97FA                            	smpsVcDecayRate2    $00, $00, $00, $00
000A97FA                            	smpsVcDecayLevel    $0F, $0F, $0E, $0F
000A97FA                            	smpsVcReleaseRate   $07, $07, $04, $06
000A9813                            
000A9813                            ;	Voice $06
000A9813                            ;	$30
000A9813                            ;	$01, $00, $00, $01, 	$9F, $1F, $1F, $5C, 	$0F, $0D, $10, $14
000A9813                            ;	$08, $18, $05, $08, 	$6F, $00, $0F, $18, 	$15, $1F, $19, $00
000A9813                            	smpsVcAlgorithm     $00
000A9813                            	smpsVcFeedback      $06
000A9813                            	smpsVcUnusedBits    $00
000A9813                            	smpsVcDetune        $00, $00, $00, $00
000A9813                            	smpsVcCoarseFreq    $01, $00, $00, $01
000A9813                            	smpsVcRateScale     $01, $00, $00, $02
000A9813                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
000A9813                            	smpsVcAmpMod        $00, $00, $00, $00
000A9813                            	smpsVcDecayRate1    $14, $10, $0D, $0F
000A9813                            	smpsVcDecayRate2    $08, $05, $18, $08
000A9813                            	smpsVcDecayLevel    $01, $00, $00, $06
000A9813                            	smpsVcReleaseRate   $08, $0F, $00, $0F
000A982C                            
000A982C                            
000A982C                            		even
000A982C                            Music89:	incbin	"sound/music/Mus89 - Special Stage.bin"
000AA084 00                         		even
000AA084                            Music8A:	incbin	"sound/music/Mus8A - Title Screen.bin"
000AA5A4                            		even
000AA5A4                            Music8B:	incbin	"sound/music/Mus8B - Ending.bin"
000AA866 00                         		even
000AA866                            Music8C:	incbin	"sound/music/Mus8C - Boss.bin"
000AB6BE                            		even
000AB6BE                            Music8D:	incbin	"sound/music/Mus8D - FZ.bin"
000AB90A 00                         		even
000AB90A                            Music8E:	incbin	"sound/music/Mus8E - Sonic Got Through.bin"
000ABC40 00                         		even
000ABC40                            Music8F:	incbin	"sound/music/Mus8F - Game Over.bin"
000ABDEC 00                         		even
000ABDEC                            Music90:	incbin	"sound/music/Mus90 - Continue Screen.bin"
000ABFFA 00                         		even
000ABFFA                            Music91:	incbin	"sound/music/Mus91 - Credits.bin"
000AC2DE 00                         		even
000AC2DE                            Music92:	incbin	"sound/music/Mus92 - Drowning.bin"
000ACA0E 00                         		even
000ACA0E                            Music93:	incbin	"sound/music/Mus93 - Get Emerald.bin"
000ACADC                            		even
000ACADC                            Music94:	incbin	"sound/music/Mus94 - Final Boss Pinch.bin"
000ACF4A 00                         		even
000ACF4A                            Music95:		incbin	"sound/music/Mus95 - Seaside Front.bin"
000ADA40                            		even
000ADA40                            Music96:		incbin	"sound/music/Mus96 - Big Water.bin"
000AE596                            		even
000AE596                            Music97:		incbin	"sound/music/Mus97 - Granada Game Over.bin"
000AF89C 00                         		even
000AF89C                            Music98:		include	"sound/music/Mus98 - Options Theme.asm"
000AF89C                            PasswordEntry_Header:
000AF89C                            	smpsHeaderStartSong 3
000AF89E 0603                       	smpsHeaderChan      $06, $03
000AF8A0 0105                       	smpsHeaderTempo     $01, $05
000AF8A2                            
000AF8A6 0000 0013                  	smpsHeaderFM        PasswordEntry_FM1,	$00, $13
000AF8AA 0000 F40B                  	smpsHeaderFM        PasswordEntry_FM2,	$F4, $0B
000AF8AE 0000 000F                  	smpsHeaderFM        PasswordEntry_FM3,	$00, $0F
000AF8B2 0000 000F                  	smpsHeaderFM        PasswordEntry_FM4,	$00, $0F
000AF8B6 0000 001D                  	smpsHeaderFM        PasswordEntry_FM5,	$00, $1D
000AF8CC                            
000AF8CC                            ; FM1 Data
000AF8CC                            PasswordEntry_FM1:
000AF8CC EF00                       	smpsSetvoice        $00
000AF8D3                            
000AF8D3                            PasswordEntry_Jump00:
000AF8D3 CD30 CED0 D010 CE08 CD10+  	dc.b	nE6, $30, nF6, nG6, nG6, $10, nF6, $08, nE6, $10, nF6, $08
000AF8DF C930 CBCD CE10 CD08 CB10+  	dc.b	nC6, $30, nD6, nE6, nF6, $10, nE6, $08, nD6, $10, nE6, $08
000AF8EB C960 C830 C4C6 C210 C6C9+  	dc.b	nC6, $60, nB5, $30, nG5, nA5, nF5, $10, nA5, nC6, nB5, $30
000AF8F7 C918 CB                    	dc.b	nC6, $18, nD6
000AF8FA F6FF D7                    	smpsJump            PasswordEntry_Jump00
000AF8FD                            
000AF8FD                            ; FM2 Data
000AF8FD                            PasswordEntry_FM2:
000AF8FD EF01                       	smpsSetvoice        $01
000AF8FF                            
000AF8FF                            PasswordEntry_Jump03:
000AF8FF B118 1818 10AC 08B1 1818+  	dc.b	nC4, $18, $18, $18, $10, nG3, $08, nC4, $18, $18, $18, nB3
000AF90B AEAE AEAE 10B5 08AE 1818+  	dc.b	nA3, nA3, nA3, nA3, $10, nE4, $08, nA3, $18, $18, $18, nG3
000AF917 AAAA AAAA 1008 B518 1818+  	dc.b	nF3, nF3, nF3, nF3, $10, $08, nE4, $18, $18, $18, $10, $08
000AF923 AC18 1818 1008 1818 AEB0   	dc.b	nG3, $18, $18, $18, $10, $08, $18, $18, nA3, nB3
000AF92D F6FF D0                    	smpsJump            PasswordEntry_Jump03
000AF930                            
000AF930                            ; FM3 Data
000AF930                            PasswordEntry_FM3:
000AF930 E080                       	smpsPan             panLeft, $00
000AF932 EF02                       	smpsSetvoice        $02
000AF934                            
000AF934                            PasswordEntry_Jump02:
000AF934 C104 8014 C408 8010 C208+  	dc.b	nE5, $04, nRst, $14, nG5, $08, nRst, $10, nF5, $08, nRst, $10
000AF940 C204 8014 C104 8014 C104+  	dc.b	nF5, $04, nRst, $14, nE5, $04, nRst, $14, nE5, $04, nRst, $0C
000AF94C C204 8014 C21C 8004 C404+  	dc.b	nF5, $04, nRst, $14, nF5, $1C, nRst, $04, nG5, $04, nRst, $14
000AF958 C408 8010 C204 8014 C204+  	dc.b	nG5, $08, nRst, $10, nF5, $04, nRst, $14, nF5, $04, nRst, $14
000AF964 C108 8010 C104 800C C204+  	dc.b	nE5, $08, nRst, $10, nE5, $04, nRst, $0C, nF5, $04, nRst, $14
000AF970 C21C 8004 C108 8010 C108+  	dc.b	nF5, $1C, nRst, $04, nE5, $08, nRst, $10, nE5, $08, nRst, $10
000AF97C BF08 8010 C20C 800C C408+  	dc.b	nD5, $08, nRst, $10, nF5, $0C, nRst, $0C, nG5, $08, nRst, $10
000AF988 C408 8010 BF08 8010 BF0C+  	dc.b	nG5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $0C, nRst, $0C
000AF994 BA08 8010 BD0C 800C BD0C+  	dc.b	nA4, $08, nRst, $10, nC5, $0C, nRst, $0C, nC5, $0C, nRst, $0C
000AF9A0 BD0C 800C BF08 8010 BF08+  	dc.b	nC5, $0C, nRst, $0C, nD5, $08, nRst, $10, nD5, $08, nRst, $10
000AF9AC BF08 8010 BF08 8010        	dc.b	nD5, $08, nRst, $10, nD5, $08, nRst, $10
000AF9B4 F6FF 7E                    	smpsJump            PasswordEntry_Jump02
000AF9B7                            
000AF9B7                            ; FM4 Data
000AF9B7                            PasswordEntry_FM4:
000AF9B7 E040                       	smpsPan             panRight, $00
000AF9B9 EF02                       	smpsSetvoice        $02
000AF9BB                            
000AF9BB                            PasswordEntry_Jump01:
000AF9BB C404 8014 C104 8014 BF04+  	dc.b	nG5, $04, nRst, $14, nE5, $04, nRst, $14, nD5, $04, nRst, $14
000AF9C7 BF04 8014 BD04 8014 BD04+  	dc.b	nD5, $04, nRst, $14, nC5, $04, nRst, $14, nC5, $04, nRst, $0C
000AF9D3 BF04 8014 BF18 8008 C104+  	dc.b	nD5, $04, nRst, $14, nD5, $18, nRst, $08, nE5, $04, nRst, $14
000AF9DF C104 8014 BF04 8014 BF04+  	dc.b	nE5, $04, nRst, $14, nD5, $04, nRst, $14, nD5, $04, nRst, $14
000AF9EB BD04 8014 BD04 800C BF04+  	dc.b	nC5, $04, nRst, $14, nC5, $04, nRst, $0C, nD5, $04, nRst, $14
000AF9F7 BF1C 8004 C408 8010 C408+  	dc.b	nD5, $1C, nRst, $04, nG5, $08, nRst, $10, nG5, $08, nRst, $10
000AFA03 C208 8010 BF08 8010 BF08+  	dc.b	nF5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $08, nRst, $10
000AFA0F BF08 8010 BC08 8010 BC0C+  	dc.b	nD5, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $0C, nRst, $0C
000AFA1B BD08 8010 BA08 8010 BA08+  	dc.b	nC5, $08, nRst, $10, nA4, $08, nRst, $10, nA4, $08, nRst, $10
000AFA27 BA08 8010 BC08 8010 BC08+  	dc.b	nA4, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $08, nRst, $10
000AFA33 BC08 8010 BC08 8010        	dc.b	nB4, $08, nRst, $10, nB4, $08, nRst, $10
000AFA3B F6FF 7E                    	smpsJump            PasswordEntry_Jump01
000AFA3E                            
000AFA3E                            ; FM5 Data
000AFA3E                            PasswordEntry_FM5:
000AFA3E EF00                       	smpsSetvoice        $00
000AFA40 E1FB                       	smpsAlterNote       $FB
000AFA42 800C                       	dc.b	nRst, $0C
000AFA44 F6FE 8D                    	smpsJump            PasswordEntry_Jump00
000AFA47                            
000AFA47                            ; PSG1 Data
000AFA47                            PasswordEntry_PSG1:
000AFA47 C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
000AFA53 CD10 D038 C410 C908 CD10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nC6, $08, nE6, $10, nG6, $38
000AFA5F C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
000AFA6B CD10 D038 C410 C808 CB10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nB5, $08, nD6, $10, nG6, $38
000AFA77 C210 C608 C910 CE18 C908+  	dc.b	nF5, $10, nA5, $08, nC6, $10, nF6, $18, nC6, $08, nA5, $10
000AFA83 C208 C410 C808 CB10 D018+  	dc.b	nF5, $08, nG5, $10, nB5, $08, nD6, $10, nG6, $18, nD6, $08
000AFA8F C810 C408                  	dc.b	nB5, $10, nG5, $08
000AFA93 F6FF B2                    	smpsJump            PasswordEntry_PSG1
000AFA96                            
000AFA96                            ; PSG2 Data
000AFA96                            PasswordEntry_PSG2:
000AFA96 E1FF                       	smpsAlterNote       $FF
000AFA98 800C                       	dc.b	nRst, $0C
000AFA9A F6FF AB                    	smpsJump            PasswordEntry_PSG1
000AFA9D                            
000AFA9D                            ; PSG3 Data
000AFA9D                            PasswordEntry_PSG3:
000AFA9D F502                       	smpsPSGvoice        fTone_02
000AFA9F F3E7                       	smpsPSGform         $E7
000AFAA1 C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
000AFAAD C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
000AFAB9 C508 80C5 C508 C5          	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nAb5
000AFAC0 F503                       	smpsPSGvoice        fTone_03
000AFAC2 C5                         	dc.b	nAb5
000AFAC3 F6FF D8                    	smpsJump            PasswordEntry_PSG3
000AFAC6                            
000AFAC6                            ; DAC Data
000AFAC6                            PasswordEntry_DAC:
000AFAC6 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
000AFAD2 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
000AFADA F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_DAC
000AFADF 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
000AFAEB 0880 0881 8210 8208        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dSnare, $08
000AFAF3                            
000AFAF3                            PasswordEntry_Loop00:
000AFAF3 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
000AFAFF 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
000AFB07 F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_Loop00
000AFB0C 8118 8281 8210 8108 8108+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $08, nRst, $08
000AFB18 8182 8182 8282 8889 898A   	dc.b	dKick, dSnare, dKick, dSnare, dSnare, dSnare, dHiTimpani, dMidTimpani, dMidTimpani, dLowTimpani
000AFB22 F6FF A2                    	smpsJump            PasswordEntry_DAC
000AFB25                            
000AFB25                            PasswordEntry_Voices:
000AFB25                            ;	Voice $00
000AFB25                            ;	$04
000AFB25                            ;	$02, $01, $01, $00, 	$1F, $10, $1F, $12, 	$09, $03, $0B, $04
000AFB25                            ;	$03, $00, $00, $05, 	$EF, $FF, $2F, $0F, 	$1C, $80, $19, $80
000AFB25                            	smpsVcAlgorithm     $04
000AFB25                            	smpsVcFeedback      $00
000AFB25                            	smpsVcUnusedBits    $00
000AFB25                            	smpsVcDetune        $00, $00, $00, $00
000AFB25                            	smpsVcCoarseFreq    $00, $01, $01, $02
000AFB25                            	smpsVcRateScale     $00, $00, $00, $00
000AFB25                            	smpsVcAttackRate    $12, $1F, $10, $1F
000AFB25                            	smpsVcAmpMod        $00, $00, $00, $00
000AFB25                            	smpsVcDecayRate1    $04, $0B, $03, $09
000AFB25                            	smpsVcDecayRate2    $05, $00, $00, $03
000AFB25                            	smpsVcDecayLevel    $00, $02, $0F, $0E
000AFB25                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000AFB3E                            
000AFB3E                            ;	Voice $01
000AFB3E                            ;	$39
000AFB3E                            ;	$03, $61, $40, $00, 	$1F, $5F, $5F, $5F, 	$10, $11, $09, $09
000AFB3E                            ;	$06, $00, $00, $00, 	$C8, $F8, $F8, $F8, 	$1E, $24, $20, $80
000AFB3E                            	smpsVcAlgorithm     $01
000AFB3E                            	smpsVcFeedback      $07
000AFB3E                            	smpsVcUnusedBits    $00
000AFB3E                            	smpsVcDetune        $00, $04, $06, $00
000AFB3E                            	smpsVcCoarseFreq    $00, $00, $01, $03
000AFB3E                            	smpsVcRateScale     $01, $01, $01, $00
000AFB3E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AFB3E                            	smpsVcAmpMod        $00, $00, $00, $00
000AFB3E                            	smpsVcDecayRate1    $09, $09, $11, $10
000AFB3E                            	smpsVcDecayRate2    $00, $00, $00, $06
000AFB3E                            	smpsVcDecayLevel    $0F, $0F, $0F, $0C
000AFB3E                            	smpsVcReleaseRate   $08, $08, $08, $08
000AFB57                            
000AFB57                            ;	Voice $02
000AFB57                            ;	$2C
000AFB57                            ;	$41, $00, $23, $00, 	$1F, $1F, $1F, $1F, 	$08, $0A, $0B, $0A
000AFB57                            ;	$04, $05, $00, $05, 	$45, $56, $85, $86, 	$14, $82, $18, $82
000AFB57                            	smpsVcAlgorithm     $04
000AFB57                            	smpsVcFeedback      $05
000AFB57                            	smpsVcUnusedBits    $00
000AFB57                            	smpsVcDetune        $00, $02, $00, $04
000AFB57                            	smpsVcCoarseFreq    $00, $03, $00, $01
000AFB57                            	smpsVcRateScale     $00, $00, $00, $00
000AFB57                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AFB57                            	smpsVcAmpMod        $00, $00, $00, $00
000AFB57                            	smpsVcDecayRate1    $0A, $0B, $0A, $08
000AFB57                            	smpsVcDecayRate2    $05, $00, $05, $04
000AFB57                            	smpsVcDecayLevel    $08, $08, $05, $04
000AFB57                            	smpsVcReleaseRate   $06, $05, $06, $05
000AFB70                            
000AFB70                            
000AFB70                            		even	
000AFB70                            Music99:		include	"sound/music/Mus99 - Toxic Landfill.asm"
000AFB70                            ToxicLandfill_Header:
000AFB70                            	smpsHeaderStartSong 1
000AFB72 0603                       	smpsHeaderChan      $06, $03
000AFB74 0208                       	smpsHeaderTempo     $02, $08
000AFB76                            
000AFB7A 0000 000A                  	smpsHeaderFM        ToxicLandfill_FM1,	$00, $0A
000AFB7E 0000 000A                  	smpsHeaderFM        ToxicLandfill_FM2,	$00, $0A	
000AFB82 0000 0C0B                  	smpsHeaderFM        ToxicLandfill_FM3,	$0C, $0B
000AFB86 0000 0C0B                  	smpsHeaderFM        ToxicLandfill_FM4,	$0C, $0B
000AFB8A 0000 0012                  	smpsHeaderFM        ToxicLandfill_FM5,	$00, $12
000AFBA0                            
000AFBA0                            ; DAC Data
000AFBA0                            ToxicLandfill_DAC:
000AFBA0 E0C0                       	smpsPan             panCenter, $00
000AFBA2 807F 7F22 8106 1803 0382+  	dc.b	nRst, $7F, $7F, $22, dKick, $06, $18, $03, $03, dSnare, $06, dKick
000AFBAE 8181 8281 0306 8281 0382+  	dc.b	dKick, dKick, dSnare, dKick, $03, $06, dSnare, dKick, $03, dSnare, dKick
000AFBB9                            
000AFBB9                            ToxicLandfill_Loop00:
000AFBB9 82                         	dc.b	dSnare
000AFBBA                            
000AFBBA                            ToxicLandfill_Loop01:
000AFBBA 82                         	dc.b	dSnare
000AFBBB                            
000AFBBB                            ToxicLandfill_Jump00:
000AFBBB 8106 8203 8106 0382 8181+  	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, dKick, dKick, $06, dSnare
000AFBC7 0381 0603                  	dc.b	$03, dKick, $06, $03
000AFBCB F700 03FF EA               	smpsLoop            $00, $03, ToxicLandfill_Loop00
000AFBD0 8282 8206 8103 8206 8103+  	dc.b	dSnare, dSnare, dSnare, $06, dKick, $03, dSnare, $06, dKick, $03, dSnare, dKick
000AFBDC 0682 0381 8281 8281        	dc.b	$06, dSnare, $03, dKick, dSnare, dKick, dSnare, dKick
000AFBE4 F701 02FF D2               	smpsLoop            $01, $02, ToxicLandfill_Loop01
000AFBE9                            
000AFBE9                            ToxicLandfill_Loop06:
000AFBE9 82                         	dc.b	dSnare
000AFBEA                            
000AFBEA                            ToxicLandfill_Loop02:
000AFBEA 8181 8281                  	dc.b	dKick, dKick, dSnare, dKick
000AFBEE F700 06FF F8               	smpsLoop            $00, $06, ToxicLandfill_Loop02
000AFBF3                            
000AFBF3                            ToxicLandfill_Loop03:
000AFBF3 8281 81                    	dc.b	dSnare, dKick, dKick
000AFBF6 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop03
000AFBFB                            
000AFBFB                            ToxicLandfill_Loop04:
000AFBFB 8182 8181                  	dc.b	dKick, dSnare, dKick, dKick
000AFBFF F700 03FF F8               	smpsLoop            $00, $03, ToxicLandfill_Loop04
000AFC04 8182 81                    	dc.b	dKick, dSnare, dKick
000AFC07                            
000AFC07                            ToxicLandfill_Loop05:
000AFC07 8102 0182 03               	dc.b	dKick, $02, $01, dSnare, $03
000AFC0C F700 06FF F7               	smpsLoop            $00, $06, ToxicLandfill_Loop05
000AFC11 0303 03                    	dc.b	$03, $03, $03
000AFC14 F701 02FF D1               	smpsLoop            $01, $02, ToxicLandfill_Loop06
000AFC19                            
000AFC19                            ToxicLandfill_Loop08:
000AFC19 03                         	dc.b	$03
000AFC1A                            
000AFC1A                            ToxicLandfill_Loop07:
000AFC1A 8106 8203 8106 0382 06     	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, $06
000AFC23 F700 07FF F3               	smpsLoop            $00, $07, ToxicLandfill_Loop07
000AFC28 8182 0381 8282 82          	dc.b	dKick, dSnare, $03, dKick, dSnare, dSnare, dSnare
000AFC2F F701 02FF E6               	smpsLoop            $01, $02, ToxicLandfill_Loop08
000AFC34                            
000AFC34                            ToxicLandfill_Loop0D:
000AFC34 82                         	dc.b	dSnare
000AFC35                            
000AFC35                            ToxicLandfill_Loop09:
000AFC35 8181 8281                  	dc.b	dKick, dKick, dSnare, dKick
000AFC39 F700 06FF F8               	smpsLoop            $00, $06, ToxicLandfill_Loop09
000AFC3E                            
000AFC3E                            ToxicLandfill_Loop0A:
000AFC3E 8281 81                    	dc.b	dSnare, dKick, dKick
000AFC41 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop0A
000AFC46                            
000AFC46                            ToxicLandfill_Loop0B:
000AFC46 8182 8181                  	dc.b	dKick, dSnare, dKick, dKick
000AFC4A F700 03FF F8               	smpsLoop            $00, $03, ToxicLandfill_Loop0B
000AFC4F 8182 81                    	dc.b	dKick, dSnare, dKick
000AFC52                            
000AFC52                            ToxicLandfill_Loop0C:
000AFC52 8102 0182 03               	dc.b	dKick, $02, $01, dSnare, $03
000AFC57 F700 06FF F7               	smpsLoop            $00, $06, ToxicLandfill_Loop0C
000AFC5C 0303 03                    	dc.b	$03, $03, $03
000AFC5F F701 02FF D1               	smpsLoop            $01, $02, ToxicLandfill_Loop0D
000AFC64                            
000AFC64                            ToxicLandfill_Loop0E:
000AFC64 03                         	dc.b	$03
000AFC65                            
000AFC65                            ToxicLandfill_Loop0F:
000AFC65 8106 8203 8106 0382 8181+  	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, dKick, dKick, $06, dSnare
000AFC71 0381 0603 82               	dc.b	$03, dKick, $06, $03, dSnare
000AFC76 F700 03FF EA               	smpsLoop            $00, $03, ToxicLandfill_Loop0E
000AFC7B 8282 0681 0382 0681 0382+  	dc.b	dSnare, dSnare, $06, dKick, $03, dSnare, $06, dKick, $03, dSnare, dKick, $06
000AFC87 8203 8182 8182 8182        	dc.b	dSnare, $03, dKick, dSnare, dKick, dSnare, dKick, dSnare
000AFC8F F701 02FF D2               	smpsLoop            $01, $02, ToxicLandfill_Loop0F
000AFC94                            
000AFC94                            ToxicLandfill_Loop10:
000AFC94 8106 8203 8106 0382 06     	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, $06
000AFC9D F700 07FF F3               	smpsLoop            $00, $07, ToxicLandfill_Loop10
000AFCA2 8182 0381 8282 8282        	dc.b	dKick, dSnare, $03, dKick, dSnare, dSnare, dSnare, dSnare
000AFCAA F701 04FF E6               	smpsLoop            $01, $04, ToxicLandfill_Loop10
000AFCAF F6FF 0A                    	smpsJump            ToxicLandfill_Jump00
000AFCB2                            
000AFCB2                            ; FM1 Data
000AFCB2                            ToxicLandfill_FM1:
000AFCB2 E0C0                       	smpsPan             panCenter, $00
000AFCB4 EF00                       	smpsSetvoice        $00
000AFCB6 807F 7F76 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $76, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
000AFCC2 AD02 AE01 AF02 B001        	dc.b	nAb3, $02, nA3, $01, nBb3, $02, nB3, $01
000AFCCA                            
000AFCCA                            ToxicLandfill_Loop44:
000AFCCA AC09 0909 AA03 AC06 06AF+  	dc.b	nG3, $09, $09, $09, nF3, $03, nG3, $06, $06, nBb3, nG3, $09
000AFCD6 0909 AA03 AC06 06B1 AC09+  	dc.b	$09, $09, nF3, $03, nG3, $06, $06, nC4, nG3, $09, $09, $09
000AFCE2 AA03 AC06 06AF A709 0909+  	dc.b	nF3, $03, nG3, $06, $06, nBb3, nD3, $09, $09, $09, nC3, $03
000AFCEE A706 06AA                  	dc.b	nD3, $06, $06, nF3
000AFCF2 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop44
000AFCF7                            
000AFCF7                            ToxicLandfill_Loop46:
000AFCF7 AC12 AA36 A902 A801 A702+  	dc.b	nG3, $12, nF3, $36, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000AFD03 A502 A401 A302 A201 A102+  	dc.b	nC3, $02, nB2, $01, nBb2, $02, nA2, $01, nAb2, $02, nG2, $01
000AFD0F 9F02 9E01 9D02 9C01 9B02+  	dc.b	nFs2, $02, nF2, $01, nE2, $02, nEb2, $01, nD2, $02, nCs2, $01
000AFD1B AC12 AA2A 03A9 AAA9        	dc.b	nG3, $12, nF3, $2A, $03, nE3, nF3, nE3
000AFD23                            
000AFD23                            ToxicLandfill_Loop45:
000AFD23 AA02 A901                  	dc.b	nF3, $02, nE3, $01
000AFD27 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop45
000AFD2C AA02 A5A1 AAA5 A1          	dc.b	nF3, $02, nC3, nAb2, nF3, nC3, nAb2
000AFD33 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop46
000AFD38                            
000AFD38                            ToxicLandfill_Loop47:
000AFD38 B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3
000AFD44 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop47
000AFD49                            
000AFD49                            ToxicLandfill_Loop48:
000AFD49 B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
000AFD54 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop48
000AFD59 F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop47
000AFD5E                            
000AFD5E                            ToxicLandfill_Loop4A:
000AFD5E B812 B636 B502 B401 B302+  	dc.b	nG4, $12, nF4, $36, nE4, $02, nEb4, $01, nD4, $02, nCs4, $01
000AFD6A B102 B001 AF02 AE01 AD02+  	dc.b	nC4, $02, nB3, $01, nBb3, $02, nA3, $01, nAb3, $02, nG3, $01
000AFD76 AB02 AA01 A902 A801 A702+  	dc.b	nFs3, $02, nF3, $01, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000AFD82 B812 B62A 03B5 B6B5        	dc.b	nG4, $12, nF4, $2A, $03, nE4, nF4, nE4
000AFD8A                            
000AFD8A                            ToxicLandfill_Loop49:
000AFD8A B602 B501                  	dc.b	nF4, $02, nE4, $01
000AFD8E F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop49
000AFD93 B602 B1AD B6B1 AD          	dc.b	nF4, $02, nC4, nAb3, nF4, nC4, nAb3
000AFD9A F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop4A
000AFD9F                            
000AFD9F                            ToxicLandfill_Loop4B:
000AFD9F B809 0909 B603 B806 06BB+  	dc.b	nG4, $09, $09, $09, nF4, $03, nG4, $06, $06, nBb4, nG4, $09
000AFDAB 0909 B603 B806 06BD B809+  	dc.b	$09, $09, nF4, $03, nG4, $06, $06, nC5, nG4, $09, $09, $09
000AFDB7 B603 B806 06BB B309 0909+  	dc.b	nF4, $03, nG4, $06, $06, nBb4, nD4, $09, $09, $09, nC4, $03
000AFDC3 B306 06B6                  	dc.b	nD4, $06, $06, nF4
000AFDC7 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop4B
000AFDCC                            
000AFDCC                            ToxicLandfill_Loop4C:
000AFDCC BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000AFDD7 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop4C
000AFDDC                            
000AFDDC                            ToxicLandfill_Loop4D:
000AFDDC BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4
000AFDE7 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop4D
000AFDEC F701 04FF DC               	smpsLoop            $01, $04, ToxicLandfill_Loop4C
000AFDF1 F6FE D7                    	smpsJump            ToxicLandfill_Loop44
000AFDF4                            
000AFDF4                            ; FM2 Data
000AFDF4                            ToxicLandfill_FM2:
000AFDF4 E0C0                       	smpsPan             panCenter, $00
000AFDF6 EF00                       	smpsSetvoice        $00
000AFDF8 807F 7F76 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $76, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
000AFE04 AD02 AE01 AF02 B001        	dc.b	nAb3, $02, nA3, $01, nBb3, $02, nB3, $01
000AFE0C                            
000AFE0C                            ToxicLandfill_Loop3A:
000AFE0C B109 0909 AF03 B106 06B4+  	dc.b	nC4, $09, $09, $09, nBb3, $03, nC4, $06, $06, nEb4, nC4, $09
000AFE18 0909 AF03 B106 06B6 B109+  	dc.b	$09, $09, nBb3, $03, nC4, $06, $06, nF4, nC4, $09, $09, $09
000AFE24 AF03 B106 06B4 AC09 0909+  	dc.b	nBb3, $03, nC4, $06, $06, nEb4, nG3, $09, $09, $09, nF3, $03
000AFE30 AC06 06AF                  	dc.b	nG3, $06, $06, nBb3
000AFE34 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop3A
000AFE39                            
000AFE39                            ToxicLandfill_Loop3C:
000AFE39 B112 AF36 AE02 AD01 AC02+  	dc.b	nC4, $12, nBb3, $36, nA3, $02, nAb3, $01, nG3, $02, nFs3, $01
000AFE45 AA02 A901 A802 A701 A602+  	dc.b	nF3, $02, nE3, $01, nEb3, $02, nD3, $01, nCs3, $02, nC3, $01
000AFE51 A402 A301 A202 A101 A002+  	dc.b	nB2, $02, nBb2, $01, nA2, $02, nAb2, $01, nG2, $02, nFs2, $01
000AFE5D B112 AF2A 03AE AFAE        	dc.b	nC4, $12, nBb3, $2A, $03, nA3, nBb3, nA3
000AFE65                            
000AFE65                            ToxicLandfill_Loop3B:
000AFE65 AF02 AE01                  	dc.b	nBb3, $02, nA3, $01
000AFE69 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop3B
000AFE6E AF02 AAA6 AFAA A6          	dc.b	nBb3, $02, nF3, nCs3, nBb3, nF3, nCs3
000AFE75 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop3C
000AFE7A                            
000AFE7A                            ToxicLandfill_Loop3D:
000AFE7A AC06 A7AA AB03 AC09 A706+  	dc.b	nG3, $06, nD3, nF3, nFs3, $03, nG3, $09, nD3, $06, nF3, nFs3
000AFE86 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop3D
000AFE8B                            
000AFE8B                            ToxicLandfill_Loop3E:
000AFE8B ACA5 A7AA 03AC 09A5 06A7+  	dc.b	nG3, nC3, nD3, nF3, $03, nG3, $09, nC3, $06, nD3, nF3
000AFE96 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop3E
000AFE9B F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop3D
000AFEA0                            
000AFEA0                            ToxicLandfill_Loop40:
000AFEA0 BD12 BB36 BA02 B901 B802+  	dc.b	nC5, $12, nBb4, $36, nA4, $02, nAb4, $01, nG4, $02, nFs4, $01
000AFEAC B602 B501 B402 B301 B202+  	dc.b	nF4, $02, nE4, $01, nEb4, $02, nD4, $01, nCs4, $02, nC4, $01
000AFEB8 B002 AF01 AE02 AD01 AC02+  	dc.b	nB3, $02, nBb3, $01, nA3, $02, nAb3, $01, nG3, $02, nFs3, $01
000AFEC4 BD12 BB2A 03BA BBBA        	dc.b	nC5, $12, nBb4, $2A, $03, nA4, nBb4, nA4
000AFECC                            
000AFECC                            ToxicLandfill_Loop3F:
000AFECC BB02 BA01                  	dc.b	nBb4, $02, nA4, $01
000AFED0 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop3F
000AFED5 BB02 B6B2 BBB6 B2          	dc.b	nBb4, $02, nF4, nCs4, nBb4, nF4, nCs4
000AFEDC F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop40
000AFEE1                            
000AFEE1                            ToxicLandfill_Loop41:
000AFEE1 BD09 0909 BB03 BD06 06C0+  	dc.b	nC5, $09, $09, $09, nBb4, $03, nC5, $06, $06, nEb5, nC5, $09
000AFEED 0909 BB03 BD06 06C2 BD09+  	dc.b	$09, $09, nBb4, $03, nC5, $06, $06, nF5, nC5, $09, $09, $09
000AFEF9 BB03 BD06 06C0 B809 0909+  	dc.b	nBb4, $03, nC5, $06, $06, nEb5, nG4, $09, $09, $09, nF4, $03
000AFF05 B806 06BB                  	dc.b	nG4, $06, $06, nBb4
000AFF09 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop41
000AFF0E B8B3 B6B7 03B8 09B3 06B6+  	dc.b	nG4, nD4, nF4, nFs4, $03, nG4, $09, nD4, $06, nF4, nFs4, nG4
000AFF1A B3B6 B703 8009 B306 B6B7+  	dc.b	nD4, nF4, nFs4, $03, nRst, $09, nD4, $06, nF4, nFs4, nG4, nC4
000AFF26 B3B6 03B8 09B1 06B3 B6B8+  	dc.b	nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4, nG4, nC4, nD4
000AFF32 B603 8009 B106 B3B6 B8B3+  	dc.b	nF4, $03, nRst, $09, nC4, $06, nD4, nF4, nG4, nD4, nF4, nFs4
000AFF3E 03B8 09B3 06B6 B7B8 B3B6+  	dc.b	$03, nG4, $09, nD4, $06, nF4, nFs4, nG4, nD4, nF4, nFs4, $03
000AFF4A 8009 B306 B6B7             	dc.b	nRst, $09, nD4, $06, nF4, nFs4
000AFF50                            
000AFF50                            ToxicLandfill_Loop42:
000AFF50 B8B1 B3B6 03B8 09B1 06B3+  	dc.b	nG4, nC4, nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4
000AFF5B F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop42
000AFF60                            
000AFF60                            ToxicLandfill_Loop43:
000AFF60 B8B3 B6B7 03B8 09B3 06B6+  	dc.b	nG4, nD4, nF4, nFs4, $03, nG4, $09, nD4, $06, nF4, nFs4
000AFF6B F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop43
000AFF70 F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop42
000AFF75 B8B1 B3B6 03B8 09B1 06B3+  	dc.b	nG4, nC4, nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4, nG4
000AFF81 B1B3 B603 8009 B106 B3B6   	dc.b	nC4, nD4, nF4, $03, nRst, $09, nC4, $06, nD4, nF4
000AFF8B F6FE 7F                    	smpsJump            ToxicLandfill_Loop3A
000AFF8E                            
000AFF8E                            ; FM3 Data
000AFF8E                            ToxicLandfill_FM3:
000AFF8E E0C0                       	smpsPan             panCenter, $00
000AFF90 EF01                       	smpsSetvoice        $01
000AFF92                            
000AFF92                            ToxicLandfill_Loop2D:
000AFF92 9903 A580 9E80 9F80 A080+  	dc.b	nC2, $03, nC3, nRst, nF2, nRst, nFs2, nRst, nG2, nRst, nFs2, nRst
000AFF9E 9E80 9C9E 9C99 9C80 9E80+  	dc.b	nF2, nRst, nEb2, nF2, nEb2, nC2, nEb2, nRst, nF2, nRst, nEb2, nRst
000AFFAA 9E80 9F9E 9C9E 9C97 98     	dc.b	nF2, nRst, nFs2, nF2, nEb2, nF2, nEb2, nBb1, nB1
000AFFB3 F700 03FF DB               	smpsLoop            $00, $03, ToxicLandfill_Loop2D
000AFFB8 99A5 809E 809F 80A0 809F+  	dc.b	nC2, nC3, nRst, nF2, nRst, nFs2, nRst, nG2, nRst, nFs2, nRst, nF2
000AFFC4 809C 9E9C 999C 809E 809C+  	dc.b	nRst, nEb2, nF2, nEb2, nC2, nEb2, nRst, nF2, nRst, nEb2, nRst, nF2
000AFFD0 809F 9E9C 9D02 9E01 9F02+  	dc.b	nRst, nFs2, nF2, nEb2, nE2, $02, nF2, $01, nFs2, $02, nG2, $01
000AFFDC A102 A201 A302 A401        	dc.b	nAb2, $02, nA2, $01, nBb2, $02, nB2, $01
000AFFE4                            
000AFFE4                            ToxicLandfill_Loop2E:
000AFFE4 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000AFFF0 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop2E
000AFFF5 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nG2
000B0001 0909 0909 06A3             	dc.b	$09, $09, $09, $09, $06, nBb2
000B0007 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop2E
000B000C                            
000B000C                            ToxicLandfill_Loop31:
000B000C A503 9999 A5               	dc.b	nC3, $03, nC2, nC2, nC3
000B0011                            
000B0011                            ToxicLandfill_Loop2F:
000B0011 9999 A3                    	dc.b	nC2, nC2, nBb2
000B0014 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop2F
000B0019 99A3                       	dc.b	nC2, nBb2
000B001B                            
000B001B                            ToxicLandfill_Loop30:
000B001B 99A3 99                    	dc.b	nC2, nBb2, nC2
000B001E F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop30
000B0023 99A3 A0A3 A4               	dc.b	nC2, nBb2, nG2, nBb2, nB2
000B0028 F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop31
000B002D                            
000B002D                            ToxicLandfill_Loop32:
000B002D A506 06A0 A003 A309 A006+  	dc.b	nC3, $06, $06, nG2, nG2, $03, nBb2, $09, nG2, $06, nBb2, nB2
000B0039 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop32
000B003E                            
000B003E                            ToxicLandfill_Loop33:
000B003E A5A5 9E9E 03A0 0906 A3A4   	dc.b	nC3, nC3, nF2, nF2, $03, nG2, $09, $06, nBb2, nB2
000B0048 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop33
000B004D F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop32
000B0052                            
000B0052                            ToxicLandfill_Loop36:
000B0052 A503 9999 A5               	dc.b	nC3, $03, nC2, nC2, nC3
000B0057                            
000B0057                            ToxicLandfill_Loop34:
000B0057 9999 A3                    	dc.b	nC2, nC2, nBb2
000B005A F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop34
000B005F 99A3                       	dc.b	nC2, nBb2
000B0061                            
000B0061                            ToxicLandfill_Loop35:
000B0061 99A3 99                    	dc.b	nC2, nBb2, nC2
000B0064 F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop35
000B0069 99A3 A0A3 A4               	dc.b	nC2, nBb2, nG2, nBb2, nB2
000B006E F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop36
000B0073                            
000B0073                            ToxicLandfill_Loop37:
000B0073 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000B007F F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop37
000B0084 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nG2
000B0090 0909 0909 06A3             	dc.b	$09, $09, $09, $09, $06, nBb2
000B0096 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop37
000B009B                            
000B009B                            ToxicLandfill_Loop38:
000B009B A5A5 A0A0 03A3 09A0 06A3+  	dc.b	nC3, nC3, nG2, nG2, $03, nBb2, $09, nG2, $06, nBb2, nB2
000B00A6 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop38
000B00AB                            
000B00AB                            ToxicLandfill_Loop39:
000B00AB A5A5 9E9E 03A0 0906 A3A4   	dc.b	nC3, nC3, nF2, nF2, $03, nG2, $09, $06, nBb2, nB2
000B00B5 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop39
000B00BA F701 04FF DD               	smpsLoop            $01, $04, ToxicLandfill_Loop38
000B00BF F6FF 23                    	smpsJump            ToxicLandfill_Loop2E
000B00C2                            
000B00C2                            ; FM4 Data
000B00C2                            ToxicLandfill_FM4:
000B00C2 E0C0                       	smpsPan             panCenter, $00
000B00C4 EF01                       	smpsSetvoice        $01
000B00C6                            
000B00C6                            ToxicLandfill_Loop20:
000B00C6 8D03 9980 9280 9380 9480+  	dc.b	nC1, $03, nC2, nRst, nF1, nRst, nFs1, nRst, nG1, nRst, nFs1, nRst
000B00D2 9280 9092 908D 9080 9280+  	dc.b	nF1, nRst, nEb1, nF1, nEb1, nC1, nEb1, nRst, nF1, nRst, nEb1, nRst
000B00DE 9280 9392 9092 908B 8C     	dc.b	nF1, nRst, nFs1, nF1, nEb1, nF1, nEb1, nBb0, nB0
000B00E7 F700 03FF DB               	smpsLoop            $00, $03, ToxicLandfill_Loop20
000B00EC 8D99 8092 8093 8094 8093+  	dc.b	nC1, nC2, nRst, nF1, nRst, nFs1, nRst, nG1, nRst, nFs1, nRst, nF1
000B00F8 8090 9290 8D90 8092 8090+  	dc.b	nRst, nEb1, nF1, nEb1, nC1, nEb1, nRst, nF1, nRst, nEb1, nRst, nF1
000B0104 8093 9290 9293 0294 0195+  	dc.b	nRst, nFs1, nF1, nEb1, nF1, nFs1, $02, nG1, $01, nAb1, $02, nA1
000B0110 0197 0298 01               	dc.b	$01, nBb1, $02, nB1, $01
000B0115                            
000B0115                            ToxicLandfill_Loop21:
000B0115 9906 9497 9803 9909 9406+  	dc.b	nC2, $06, nG1, nBb1, nB1, $03, nC2, $09, nG1, $06, nBb1, nB1
000B0121 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop21
000B0126 9992 9497 0399 0992 0694+  	dc.b	nC2, nF1, nG1, nBb1, $03, nC2, $09, nF1, $06, nG1, nBb1, nG1
000B0132 0909 0909 0697             	dc.b	$09, $09, $09, $09, $06, nBb1
000B0138 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop21
000B013D                            
000B013D                            ToxicLandfill_Loop24:
000B013D 9903 8D8D 99               	dc.b	nC2, $03, nC1, nC1, nC2
000B0142                            
000B0142                            ToxicLandfill_Loop22:
000B0142 8D8D 97                    	dc.b	nC1, nC1, nBb1
000B0145 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop22
000B014A 8D97                       	dc.b	nC1, nBb1
000B014C                            
000B014C                            ToxicLandfill_Loop23:
000B014C 8D97 8D                    	dc.b	nC1, nBb1, nC1
000B014F F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop23
000B0154 8D97 9497 98               	dc.b	nC1, nBb1, nG1, nBb1, nB1
000B0159 F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop24
000B015E                            
000B015E                            ToxicLandfill_Loop25:
000B015E 9906 0694 9403 9709 9406+  	dc.b	nC2, $06, $06, nG1, nG1, $03, nBb1, $09, nG1, $06, nBb1, nB1
000B016A F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop25
000B016F                            
000B016F                            ToxicLandfill_Loop26:
000B016F 9999 9292 0394 0906 9798   	dc.b	nC2, nC2, nF1, nF1, $03, nG1, $09, $06, nBb1, nB1
000B0179 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop26
000B017E F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop25
000B0183                            
000B0183                            ToxicLandfill_Loop29:
000B0183 9903 8D8D 99               	dc.b	nC2, $03, nC1, nC1, nC2
000B0188                            
000B0188                            ToxicLandfill_Loop27:
000B0188 8D8D 97                    	dc.b	nC1, nC1, nBb1
000B018B F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop27
000B0190 8D97                       	dc.b	nC1, nBb1
000B0192                            
000B0192                            ToxicLandfill_Loop28:
000B0192 8D97 8D                    	dc.b	nC1, nBb1, nC1
000B0195 F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop28
000B019A 8D97 9497 98               	dc.b	nC1, nBb1, nG1, nBb1, nB1
000B019F F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop29
000B01A4                            
000B01A4                            ToxicLandfill_Loop2A:
000B01A4 9906 9497 9803 9909 9406+  	dc.b	nC2, $06, nG1, nBb1, nB1, $03, nC2, $09, nG1, $06, nBb1, nB1
000B01B0 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop2A
000B01B5 9992 9497 0399 0992 0694+  	dc.b	nC2, nF1, nG1, nBb1, $03, nC2, $09, nF1, $06, nG1, nBb1, nG1
000B01C1 0909 0909 0697             	dc.b	$09, $09, $09, $09, $06, nBb1
000B01C7 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop2A
000B01CC                            
000B01CC                            ToxicLandfill_Loop2B:
000B01CC 9999 9494 0397 0994 0697+  	dc.b	nC2, nC2, nG1, nG1, $03, nBb1, $09, nG1, $06, nBb1, nB1
000B01D7 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop2B
000B01DC                            
000B01DC                            ToxicLandfill_Loop2C:
000B01DC 9999 9292 0394 0906 9798   	dc.b	nC2, nC2, nF1, nF1, $03, nG1, $09, $06, nBb1, nB1
000B01E6 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop2C
000B01EB F701 04FF DD               	smpsLoop            $01, $04, ToxicLandfill_Loop2B
000B01F0 F6FF 23                    	smpsJump            ToxicLandfill_Loop21
000B01F3                            
000B01F3                            ; FM5 Data
000B01F3                            ToxicLandfill_FM5:
000B01F3 E0C0                       	smpsPan             panCenter, $00
000B01F5 E6FA                       	smpsAlterVol			-$06		
000B01F7 E102                       	smpsDetune			$02	
000B01F9 EF00                       	smpsSetvoice        $00
000B01FB 807F 7F78 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $78, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
000B0207 AD02 AE01 AF               	dc.b	nAb3, $02, nA3, $01, nBb3
000B020C                            
000B020C                            ToxicLandfill_Jump01:
000B020C E701 B0                    	dc.b	smpsNoAttack, $01, nB3
000B020F                            
000B020F                            ToxicLandfill_Loop11:
000B020F AC09 0909 AA03 AC06 06AF+  	dc.b	nG3, $09, $09, $09, nF3, $03, nG3, $06, $06, nBb3, nG3, $09
000B021B 0909 AA03 AC06 06B1 AC09+  	dc.b	$09, $09, nF3, $03, nG3, $06, $06, nC4, nG3, $09, $09, $09
000B0227 AA03 AC06 06AF A709 0909+  	dc.b	nF3, $03, nG3, $06, $06, nBb3, nD3, $09, $09, $09, nC3, $03
000B0233 A706 06AA                  	dc.b	nD3, $06, $06, nF3
000B0237 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop11
000B023C                            
000B023C                            ToxicLandfill_Loop13:
000B023C AC12 AA36 A902 A801 A702+  	dc.b	nG3, $12, nF3, $36, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000B0248 A502 A401 A302 A201 A102+  	dc.b	nC3, $02, nB2, $01, nBb2, $02, nA2, $01, nAb2, $02, nG2, $01
000B0254 9F02 9E01 9D02 9C01 9B02+  	dc.b	nFs2, $02, nF2, $01, nE2, $02, nEb2, $01, nD2, $02, nCs2, $01
000B0260 AC12 AA2A 03A9 AAA9        	dc.b	nG3, $12, nF3, $2A, $03, nE3, nF3, nE3
000B0268                            
000B0268                            ToxicLandfill_Loop12:
000B0268 AA02 A901                  	dc.b	nF3, $02, nE3, $01
000B026C F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop12
000B0271 AA02 A5A1 AAA5 A1          	dc.b	nF3, $02, nC3, nAb2, nF3, nC3, nAb2
000B0278 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop13
000B027D                            
000B027D                            ToxicLandfill_Loop14:
000B027D B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3
000B0289 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop14
000B028E                            
000B028E                            ToxicLandfill_Loop15:
000B028E B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
000B0299 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop15
000B029E F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop14
000B02A3                            
000B02A3                            ToxicLandfill_Loop17:
000B02A3 B812 B636 B502 B401 B302+  	dc.b	nG4, $12, nF4, $36, nE4, $02, nEb4, $01, nD4, $02, nCs4, $01
000B02AF B102 B001 AF02 AE01 AD02+  	dc.b	nC4, $02, nB3, $01, nBb3, $02, nA3, $01, nAb3, $02, nG3, $01
000B02BB AB02 AA01 A902 A801 A702+  	dc.b	nFs3, $02, nF3, $01, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000B02C7 B812 B62A 03B5 B6B5        	dc.b	nG4, $12, nF4, $2A, $03, nE4, nF4, nE4
000B02CF                            
000B02CF                            ToxicLandfill_Loop16:
000B02CF B602 B501                  	dc.b	nF4, $02, nE4, $01
000B02D3 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop16
000B02D8 B602 B1AD B6B1 AD          	dc.b	nF4, $02, nC4, nAb3, nF4, nC4, nAb3
000B02DF F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop17
000B02E4                            
000B02E4                            ToxicLandfill_Loop18:
000B02E4 B809 0909 B603 B806 06BB+  	dc.b	nG4, $09, $09, $09, nF4, $03, nG4, $06, $06, nBb4, nG4, $09
000B02F0 0909 B603 B806 06BD B809+  	dc.b	$09, $09, nF4, $03, nG4, $06, $06, nC5, nG4, $09, $09, $09
000B02FC B603 B806 06BB B309 0909+  	dc.b	nF4, $03, nG4, $06, $06, nBb4, nD4, $09, $09, $09, nC4, $03
000B0308 B306 06B6                  	dc.b	nD4, $06, $06, nF4
000B030C F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop18
000B0311                            
000B0311                            ToxicLandfill_Loop19:
000B0311 BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000B031C F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop19
000B0321                            
000B0321                            ToxicLandfill_Loop1A:
000B0321 BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4
000B032C F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1A
000B0331                            
000B0331                            ToxicLandfill_Loop1B:
000B0331 BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000B033C F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1B
000B0341 BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4, nC5
000B034D B6B8 BB03 BD09 B606 B8BB+  	dc.b	nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4, $02, nRst
000B0359 EF02                       	smpsSetvoice        $02
000B035B E1FE                       	smpsDetune			-$02
000B035D E606                       	smpsAlterVol		$06
000B035F                            	
000B035F                            ToxicLandfill_Loop1C:
000B035F B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3	
000B036B F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop1C
000B0370                            
000B0370                            ToxicLandfill_Loop1D:
000B0370 B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
000B037B F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1D
000B0380                            
000B0380                            ToxicLandfill_Loop1E:
000B0380 BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000B038B F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1E
000B0390                            
000B0390                            ToxicLandfill_Loop1F:
000B0390 BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4
000B039B F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1F
000B03A0 EF00                       	smpsSetvoice        $00
000B03A2 E102                       	smpsDetune			$02
000B03A4 E6FA                       	smpsAlterVol		-$06	
000B03A6 F6FE 64                    	smpsJump            ToxicLandfill_Jump01
000B03A9                            
000B03A9                            ; PSG1 Data
000B03A9                            ToxicLandfill_PSG1:
000B03A9 807F 7F7F 03               	dc.b	nRst, $7F, $7F, $7F, $03
000B03AE                            
000B03AE                            ToxicLandfill_Jump04:
000B03AE 80                         	dc.b	nRst
000B03AF                            
000B03AF                            ToxicLandfill_Loop57:
000B03AF 60                         	dc.b	$60
000B03B0 F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop57
000B03B5                            
000B03B5                            ToxicLandfill_Loop58:
000B03B5 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000B03C1 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop58
000B03C6                            
000B03C6                            ToxicLandfill_Loop59:
000B03C6 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2
000B03D1 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop59
000B03D6                            
000B03D6                            ToxicLandfill_Loop5A:
000B03D6 A5A0 A3A4 03A5 09A0 06A3+  	dc.b	nC3, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000B03E1 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop5A
000B03E6 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nC3
000B03F2 9EA0 A303 A509 9E06 A0A3+  	dc.b	nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, $04, nRst
000B03FE                            
000B03FE                            ToxicLandfill_Loop5B:
000B03FE 6E                         	dc.b	$6E
000B03FF F700 07FF FB               	smpsLoop            $00, $07, ToxicLandfill_Loop5B
000B0404                            
000B0404                            ToxicLandfill_Loop5C:
000B0404 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000B0410 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop5C
000B0415                            
000B0415                            ToxicLandfill_Loop5D:
000B0415 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2
000B0420 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop5D
000B0425 F701 03FF DB               	smpsLoop            $01, $03, ToxicLandfill_Loop5C
000B042A                            
000B042A                            ToxicLandfill_Loop5E:
000B042A A5A0 A3A4 03A5 09A0 06A3+  	dc.b	nC3, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000B0435 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop5E
000B043A A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nC3
000B0446 9EA0 A303 A509 9E06 A0A3+  	dc.b	nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, $05, nRst
000B0452 01                         	dc.b	$01
000B0453 F6FF 59                    	smpsJump            ToxicLandfill_Jump04
000B0456                            
000B0456                            ; PSG2 Data
000B0456                            ToxicLandfill_PSG2:
000B0456 807F 7F7F 03               	dc.b	nRst, $7F, $7F, $7F, $03
000B045B                            
000B045B                            ToxicLandfill_Jump03:
000B045B 80                         	dc.b	nRst
000B045C                            
000B045C                            ToxicLandfill_Loop50:
000B045C 60                         	dc.b	$60
000B045D F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop50
000B0462 A006 9B9E 9F03 A009 9B06+  	dc.b	nG2, $06, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000B046E A09B 9E9F 03A0 0880 019B+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $08, nRst, $01, nD2, $06, nF2
000B047A 9FA0 999B 9E03 A009 9906+  	dc.b	nFs2, nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
000B0486 A099 9B9E 03A0 0880 0199+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2
000B0492 9E                         	dc.b	nF2
000B0493                            
000B0493                            ToxicLandfill_Loop51:
000B0493 A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000B049E F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop51
000B04A3 A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, nG2
000B04AF 999B 9E03 A008 8001 9906+  	dc.b	nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2, nF2
000B04BB 0580                       	dc.b	$05, nRst
000B04BD                            
000B04BD                            ToxicLandfill_Loop52:
000B04BD 60                         	dc.b	$60
000B04BE F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop52
000B04C3 01                         	dc.b	$01
000B04C4                            
000B04C4                            ToxicLandfill_Loop53:
000B04C4 A006 9B9E 9F03 A009 9B06+  	dc.b	nG2, $06, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000B04D0 A09B 9E9F 03A0 0880 019B+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $08, nRst, $01, nD2, $06, nF2
000B04DC 9FA0 999B 9E03 A009 9906+  	dc.b	nFs2, nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
000B04E8 A099 9B9E 03A0 0880 0199+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2
000B04F4 9E                         	dc.b	nF2
000B04F5 F700 02FF CB               	smpsLoop            $00, $02, ToxicLandfill_Loop53
000B04FA                            
000B04FA                            ToxicLandfill_Loop54:
000B04FA A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000B0505 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop54
000B050A                            
000B050A                            ToxicLandfill_Loop55:
000B050A A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
000B0515 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop55
000B051A                            
000B051A                            ToxicLandfill_Loop56:
000B051A A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000B0525 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop56
000B052A A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, nG2
000B0536 999B 9E03 A009 9906 9B9E+  	dc.b	nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, $05, nRst
000B0542 01                         	dc.b	$01
000B0543 F6FF 16                    	smpsJump            ToxicLandfill_Jump03
000B0546                            
000B0546                            ; PSG3 Data
000B0546                            ToxicLandfill_PSG3:
000B0546 F3E7                       	smpsPSGform         $E7
000B0548 807F 41C6 0C0C 0C0C        	dc.b	nRst, $7F, $41, nMaxPSG, $0C, $0C, $0C, $0C
000B0550                            
000B0550                            ToxicLandfill_Loop4E:
000B0550 0C0C 0603 03               	dc.b	$0C, $0C, $06, $03, $03
000B0555 F501                       	smpsPSGvoice        fTone_01
000B0557 0C                         	dc.b	$0C
000B0558 F502                       	smpsPSGvoice        fTone_02
000B055A F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop4E
000B055F 0603 03                    	dc.b	$06, $03, $03
000B0562 F501                       	smpsPSGvoice        fTone_01
000B0564 06                         	dc.b	$06
000B0565 F502                       	smpsPSGvoice        fTone_02
000B0567 03                         	dc.b	$03
000B0568 F501                       	smpsPSGvoice        fTone_01
000B056A 0906 0606                  	dc.b	$09, $06, $06, $06
000B056E                            
000B056E                            ToxicLandfill_Jump02:
000B056E E77F E77F E77F E715        	dc.b	smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $15
000B0576 F502                       	smpsPSGvoice        fTone_02
000B0578 C618 1818                  	dc.b	nMaxPSG, $18, $18, $18
000B057C F501                       	smpsPSGvoice        fTone_01
000B057E 18                         	dc.b	$18
000B057F F502                       	smpsPSGvoice        fTone_02
000B0581 1806                       	dc.b	$18, $06
000B0583 F501                       	smpsPSGvoice        fTone_01
000B0585 0909 0909 0618             	dc.b	$09, $09, $09, $09, $06, $18
000B058B F502                       	smpsPSGvoice        fTone_02
000B058D 1818 18                    	dc.b	$18, $18, $18
000B0590 F501                       	smpsPSGvoice        fTone_01
000B0592 18                         	dc.b	$18
000B0593 F502                       	smpsPSGvoice        fTone_02
000B0595 1806                       	dc.b	$18, $06
000B0597 F501                       	smpsPSGvoice        fTone_01
000B0599 0909 0909 067F E77F E77F+  	dc.b	$09, $09, $09, $09, $06, $7F, smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $1B
000B05A5 F502                       	smpsPSGvoice        fTone_02
000B05A7 1818 18                    	dc.b	$18, $18, $18
000B05AA F501                       	smpsPSGvoice        fTone_01
000B05AC 18                         	dc.b	$18
000B05AD F502                       	smpsPSGvoice        fTone_02
000B05AF 1806                       	dc.b	$18, $06
000B05B1 F501                       	smpsPSGvoice        fTone_01
000B05B3 0909 0909 0618             	dc.b	$09, $09, $09, $09, $06, $18
000B05B9 F502                       	smpsPSGvoice        fTone_02
000B05BB 1818 18                    	dc.b	$18, $18, $18
000B05BE F501                       	smpsPSGvoice        fTone_01
000B05C0 18                         	dc.b	$18
000B05C1 F502                       	smpsPSGvoice        fTone_02
000B05C3 1806                       	dc.b	$18, $06
000B05C5 F501                       	smpsPSGvoice        fTone_01
000B05C7 0909 0909 06               	dc.b	$09, $09, $09, $09, $06
000B05CC                            
000B05CC                            ToxicLandfill_Loop4F:
000B05CC 59E7                       	dc.b	$59, smpsNoAttack
000B05CE F700 0CFF FA               	smpsLoop            $00, $0C, ToxicLandfill_Loop4F
000B05D3 5A                         	dc.b	$5A
000B05D4 F6FF 98                    	smpsJump            ToxicLandfill_Jump02
000B05D7                            
000B05D7                            
000B05D7                            ToxicLandfill_Voices:
000B05D7                            ;	Voice $00
000B05D7                            ;	$29
000B05D7                            ;	$33, $02, $02, $01, 	$1F, $1F, $1F, $19, 	$00, $02, $00, $0B
000B05D7                            ;	$03, $02, $00, $03, 	$0A, $1A, $0A, $1A, 	$1A, $1D, $20, $05
000B05D7                            	smpsVcAlgorithm     $01
000B05D7                            	smpsVcFeedback      $05
000B05D7                            	smpsVcUnusedBits    $00
000B05D7                            	smpsVcDetune        $00, $00, $00, $03
000B05D7                            	smpsVcCoarseFreq    $01, $02, $02, $03
000B05D7                            	smpsVcRateScale     $00, $00, $00, $00
000B05D7                            	smpsVcAttackRate    $19, $1F, $1F, $1F
000B05D7                            	smpsVcAmpMod        $00, $00, $00, $00
000B05D7                            	smpsVcDecayRate1    $0B, $00, $02, $00
000B05D7                            	smpsVcDecayRate2    $03, $00, $02, $03
000B05D7                            	smpsVcDecayLevel    $01, $00, $01, $00
000B05D7                            	smpsVcReleaseRate   $0A, $0A, $0A, $0A
000B05F0                            	
000B05F0                            ;	Voice $01
000B05F0                            ;	$18
000B05F0                            ;	$37, $30, $30, $31, 	$9E, $DC, $1C, $9C, 	$0D, $06, $04, $01
000B05F0                            ;	$08, $0A, $03, $05, 	$BF, $BF, $3F, $2F, 	$32, $22, $14, $00
000B05F0                            	smpsVcAlgorithm     $00
000B05F0                            	smpsVcFeedback      $03
000B05F0                            	smpsVcUnusedBits    $00
000B05F0                            	smpsVcDetune        $03, $03, $03, $03
000B05F0                            	smpsVcCoarseFreq    $01, $00, $00, $07
000B05F0                            	smpsVcRateScale     $02, $00, $03, $02
000B05F0                            	smpsVcAttackRate    $1C, $1C, $1C, $1E
000B05F0                            	smpsVcAmpMod        $00, $00, $00, $00
000B05F0                            	smpsVcDecayRate1    $01, $04, $06, $0D
000B05F0                            	smpsVcDecayRate2    $05, $03, $0A, $08
000B05F0                            	smpsVcDecayLevel    $02, $03, $0B, $0B
000B05F0                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B0609                            
000B0609                            ;	Voice $02
000B0609                            ;	$2C
000B0609                            ;	$72, $78, $34, $34, 	$1F, $12, $1F, $12, 	$00, $0A, $00, $0A
000B0609                            ;	$00, $00, $00, $00, 	$00, $16, $00, $16, 	$16, $00, $17, $00
000B0609                            	smpsVcAlgorithm     $04
000B0609                            	smpsVcFeedback      $05
000B0609                            	smpsVcUnusedBits    $00
000B0609                            	smpsVcDetune        $03, $03, $07, $07
000B0609                            	smpsVcCoarseFreq    $04, $04, $08, $02
000B0609                            	smpsVcRateScale     $00, $00, $00, $00
000B0609                            	smpsVcAttackRate    $12, $1F, $12, $1F
000B0609                            	smpsVcAmpMod        $00, $00, $00, $00
000B0609                            	smpsVcDecayRate1    $0A, $00, $0A, $00
000B0609                            	smpsVcDecayRate2    $00, $00, $00, $00
000B0609                            	smpsVcDecayLevel    $01, $00, $01, $00
000B0609                            	smpsVcReleaseRate   $06, $00, $06, $00
000B0622                            		even			
000B0622                            Music9A:		include	"sound/music/Mus9A - RRZ2.asm"
000B0622                            RRZ2_Header:
000B0622                            	smpsHeaderStartSong 1
000B0624 0603                       	smpsHeaderChan      $06, $03
000B0626 0104                       	smpsHeaderTempo     $01, $04
000B0628                            
000B062C 0000 0010                  	smpsHeaderFM        RRZ2_FM1,	$00, $10
000B0630 0000 0C0D                  	smpsHeaderFM        RRZ2_FM2,	$0C, $0D
000B0634 0000 0019                  	smpsHeaderFM        RRZ2_FM3,	$00, $19
000B0638 0000 0019                  	smpsHeaderFM        RRZ2_FM4,	$00, $19
000B063C 0000 0019                  	smpsHeaderFM        RRZ2_FM5,	$00, $19
000B0652                            
000B0652                            ; FM1 Data
000B0652                            RRZ2_FM1:
000B0652 E0C0                       	smpsPan             panCenter, $00
000B0659 EF03                       	smpsSetvoice        $03
000B065B B160 BD18 B8BB 12B4 AF0C+  	dc.b	nC4, $60, nC5, $18, nG4, nBb4, $12, nEb4, nBb3, $0C, nC4, $60
000B0667 BD18 B8BB 12B4 C00C B160+  	dc.b	nC5, $18, nG4, nBb4, $12, nEb4, nEb5, $0C, nC4, $60, $18, nG4
000B0673 BD12 C0C4 0C30 C2C0 B804+  	dc.b	nC5, $12, nEb5, nG5, $0C, $30, nF5, nEb5, nG4, $04, nF4, nEb4
000B067F B6B4 B3B4 B3B1 AFAC AFB1+  	dc.b	nF4, nEb4, nD4, nEb4, nD4, nC4, nBb3, nG3, nBb3, nC4, $60, nRst
000B068B 8080                       	dc.b	nRst, nRst
000B068D EF00                       	smpsSetvoice        $00
000B068F B848 0CB1 B430 0CB3 B4BB+  	dc.b	nG4, $48, $0C, nC4, nEb4, $30, $0C, nD4, nEb4, nBb4, nA4, $30
000B069B B8E7 B82E 8032 B860 B130+  	dc.b	nG4, smpsNoAttack, nG4, $2E, nRst, $32, nG4, $60, nC4, $30, $18, nG4
000B06A7 0CB4 BB30 BDBA 60B8 30B1+  	dc.b	$0C, nEb4, nBb4, $30, nC5, nA4, $60, nG4, $30, nC4, nEb4, $18
000B06B3 B3AF AE0C AFB1 30B8 E7B8+  	dc.b	nD4, nBb3, nA3, $0C, nBb3, nC4, $30, nG4, smpsNoAttack, nG4, $2E, nRst
000B06BF 32B4 600C B3B4 B8BB 18BA+  	dc.b	$32, nEb4, $60, $0C, nD4, nEb4, nG4, nBb4, $18, nA4, $0C, nF4
000B06CB B818 B630 BB12 BA06 E760+  	dc.b	nG4, $18, nF4, $30, nBb4, $12, nA4, $06, smpsNoAttack, $60, nA4, $60
000B06D7 C918 C4C7 14C6 10BD 0CC0+  	dc.b	nC6, $18, nG5, nBb5, $14, nA5, $10, nC5, $0C, nEb5, $2E, nRst
000B06E3 3280 60                    	dc.b	$32, nRst, $60
000B06E6 EF05                       	smpsSetvoice        $05
000B06E8 E9F4                       	smpsAlterPitch      $F4
000B06EA B930 BDB4 60B7 30AF B260+  	dc.b	nAb4, $30, nC5, nEb4, $60, nFs4, $30, nBb3, nCs4, $60, nAb4, $30
000B06F6 B4B9 C0C3 B7E7 B760        	dc.b	nEb4, nAb4, nEb5, nFs5, nFs4, smpsNoAttack, nFs4, $60
000B06FE E90C                       	smpsAlterPitch      $0C
000B0700 B160 A5B1 30AC B860 B430+  	dc.b	nC4, $60, nC3, nC4, $30, nG3, nG4, $60, nEb4, $30, nBb4, nG4
000B070C 60B1 30AC B8B6 B460 B630+  	dc.b	$60, nC4, $30, nG3, nG4, nF4, nEb4, $60, nF4, $30, nD4, nG4
000B0718 60E7 30C0 18BF             	dc.b	$60, smpsNoAttack, $30, nEb5, $18, nD5
000B071E F6FF 32                    	smpsJump            RRZ2_FM1
000B0721                            
000B0721                            ; FM2 Data
000B0721                            RRZ2_FM2:
000B0721 E0C0                       	smpsPan             panCenter, $00
000B0728 EF01                       	smpsSetvoice        $01
000B072A                            
000B072A                            RRZ2_Jump02:
000B072A 9960 E748 0C9B 9C60 E79C+  	dc.b	nC2, $60, smpsNoAttack, $48, $0C, nD2, nEb2, $60, smpsNoAttack, nEb2, nF2, nF2
000B0736 480C 9FA0 6030 049E 9C9E+  	dc.b	$48, $0C, nFs2, nG2, $60, $30, $04, nF2, nEb2, nF2, nEb2, nD2
000B0742 9C9B 9997 9497 9908 0494+  	dc.b	nEb2, nD2, nC2, nBb1, nG1, nBb1, nC2, $08, $04, nG1, $0C, nBb1
000B074E 9908 0480 3080 0899 0480+  	dc.b	nC2, $08, $04, nRst, $30, nRst, $08, nC2, $04, nRst, $0C, nC2
000B075A 8097 0480 0897 8004 970C+  	dc.b	nRst, nBb1, $04, nRst, $08, nBb1, nRst, $04, nBb1, $0C, nG1, $08
000B0766 9704 9908 0494 0C97 9908+  	dc.b	nBb1, $04, nC2, $08, $04, nG1, $0C, nBb1, nC2, $08, $04, nRst
000B0772 3080 0899 0480 0C99 8097+  	dc.b	$30, nRst, $08, nC2, $04, nRst, $0C, nC2, nRst, nBb1, $04, nRst
000B077E 0897 8004 9480 9410        	dc.b	$08, nBb1, nRst, $04, nG1, nRst, nG1, $10
000B0786                            
000B0786                            RRZ2_Loop07:
000B0786 9908 0494 0C97 9908 0480+  	dc.b	nC2, $08, $04, nG1, $0C, nBb1, nC2, $08, $04, nRst, $30, nRst
000B0792 0899 0480 0C99 8097 0480+  	dc.b	$08, nC2, $04, nRst, $0C, nC2, nRst, nBb1, $04, nRst, $08, nBb1
000B079E 8004 970C 9408 9704        	dc.b	nRst, $04, nBb1, $0C, nG1, $08, nBb1, $04
000B07A6 F700 08FF DC               	smpsLoop            $00, $08, RRZ2_Loop07
000B07AB                            
000B07AB                            RRZ2_Loop08:
000B07AB 9908 0494 0C97 9908 0480+  	dc.b	nC2, $08, $04, nG1, $0C, nBb1, nC2, $08, $04, nRst, $30, nRst
000B07B7 0899 0480 0C99 8097 0480+  	dc.b	$08, nC2, $04, nRst, $0C, nC2, nRst, nBb1, $04, nRst, $08, nBb1
000B07C3 8004 970C 9408 9704        	dc.b	nRst, $04, nBb1, $0C, nG1, $08, nBb1, $04
000B07CB F700 02FF DC               	smpsLoop            $00, $02, RRZ2_Loop08
000B07D0 9508 9C04 A108 9C04 9508+  	dc.b	nAb1, $08, nEb2, $04, nAb2, $08, nEb2, $04, nAb1, $08, $04, nRst
000B07DC 0895 2680 0A95 04A1 1680+  	dc.b	$08, nAb1, $26, nRst, $0A, nAb1, $04, nAb2, $16, nRst, $0E, nAb2
000B07E8 049C A1A6 0CA5 A19C 08A1+  	dc.b	$04, nEb2, nAb2, nCs3, $0C, nC3, nAb2, nEb2, $08, nAb2, $04, nFs1
000B07F4 089A 049F 089A 0493 0804+  	dc.b	$08, nCs2, $04, nFs2, $08, nCs2, $04, nFs1, $08, $04, nRst, $08
000B0800 9304 2280 0A93 049F 8093+  	dc.b	nFs1, $04, $22, nRst, $0A, nFs1, $04, nFs2, nRst, nFs1, nRst, $08
000B080C 9304 0C92 0893 0480 0893+  	dc.b	nFs1, $04, $0C, nF1, $08, nFs1, $04, nRst, $08, nFs1, $04, nFs1
000B0818 9A9F A408 A304 A408 A304+  	dc.b	nCs2, nFs2, nB2, $08, nBb2, $04, nB2, $08, nBb2, $04, nAb1, $08
000B0824 9C04 A108 9C04 9508 0480+  	dc.b	nEb2, $04, nAb2, $08, nEb2, $04, nAb1, $08, $04, nRst, $08, nAb1
000B0830 2680 0A95 04A1 1680 0EA1+  	dc.b	$26, nRst, $0A, nAb1, $04, nAb2, $16, nRst, $0E, nAb2, $04, nEb2
000B083C A1A6 A5A6 ADA8 A39F 9E9F+  	dc.b	nAb2, nCs3, nC3, nCs3, nAb3, nEb3, nBb2, nFs2, nF2, nFs2, nEb2, nBb2
000B0848 9C93 089A 049F 089A 0493+  	dc.b	nEb2, nFs1, $08, nCs2, $04, nFs2, $08, nCs2, $04, nFs1, $08, $04
000B0854 8008 9304 2280 0A93 049F+  	dc.b	nRst, $08, nFs1, $04, $22, nRst, $0A, nFs1, $04, nFs2, nRst, nFs1
000B0860 8008 9304 0C92 0893 0480+  	dc.b	nRst, $08, nFs1, $04, $0C, nF1, $08, nFs1, $04, nRst, $08, nFs1
000B086C 0493 9A9F A408 A304 A408+  	dc.b	$04, nFs1, nCs2, nFs2, nB2, $08, nBb2, $04, nB2, $08, nBb2, $04
000B0878 8D08 048D 8008 8D0C 8F08+  	dc.b	nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04
000B0884 8008 8D0C 0408 8F04 900C+  	dc.b	nRst, $08, nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08
000B0890 048D 8008 8D0C 8F08 9004+  	dc.b	$04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08
000B089C 8D0C 0408 8F04 900C 8D08+  	dc.b	nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1
000B08A8 8008 8D0C 8F08 9004 8008+  	dc.b	nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C
000B08B4 0408 8F04 900C 8D08 048D+  	dc.b	$04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08
000B08C0 8D0C 8F08 9004 8008 8D0C+  	dc.b	nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08
000B08CC 8F04 900C 8D08 048D 8008+  	dc.b	nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C
000B08D8 8F08 9004 8008 8D0C 0408+  	dc.b	nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08, nD1, $04
000B08E4 900C 8D08 048D 8008 8D0C+  	dc.b	nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08
000B08F0 9004 8008 8D0C 0408 8F04+  	dc.b	nEb1, $04, nRst, $08, nC1, $0C, $04, $08, nD1, $04, nEb1, $0C
000B08FC 8D08 048D 8008 8D0C 8F08+  	dc.b	nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04
000B0908 8008 8D0C 0408 8F04 900C+  	dc.b	nRst, $08, nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08
000B0914 048D 8008 8D0C 8F08 9004+  	dc.b	$04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08
000B0920 8D0C 0408 8F04 900C 8D08+  	dc.b	nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1
000B092C 8008 8D0C 8F08 9004 8008+  	dc.b	nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C
000B0938 0408 8F04 900C 8D08 048D+  	dc.b	$04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08
000B0944 8D0C 8F08 9004 8008 8D0C+  	dc.b	nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08
000B0950 8F04 900C 8D08 048D 8008+  	dc.b	nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C
000B095C 8F08 9004 8008 8D0C 0408+  	dc.b	nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08, nD1, $04
000B0968 900C 8D08 048D 8008 8D0C+  	dc.b	nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08
000B0974 9004 940C 8094 18          	dc.b	nEb1, $04, nG1, $0C, nRst, nG1, $18
000B097B F6FD AD                    	smpsJump            RRZ2_Jump02
000B097E                            
000B097E                            ; FM3 Data
000B097E                            RRZ2_FM3:
000B097E E080                       	smpsPan             panLeft, $00
000B0985                            
000B0985                            RRZ2_Jump01:
000B0985 EF02                       	smpsSetvoice        $02
000B0987                            
000B0987                            RRZ2_Loop05:
000B0987 B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000B0993 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000B099F 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000B09AB 8008 B104 AF08 B104 8008+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04
000B09B7 ACAF B1B8 0810             	dc.b	nG3, nBb3, nC4, nG4, $08, $10
000B09BD F700 03FF C6               	smpsLoop            $00, $03, RRZ2_Loop05
000B09C2 B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000B09CE 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000B09DA 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000B09E6 8008 B104 AF08 B104 B8B6+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nG4, nF4, nG4, nF4
000B09F2 B4B6 B4B3 B4B3 B1AF        	dc.b	nEb4, nF4, nEb4, nD4, nEb4, nD4, nC4, nBb3
000B09FA                            
000B09FA                            RRZ2_Loop06:
000B09FA AC0C B8AC 08B6 0CAC 04B4+  	dc.b	nG3, $0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3
000B0A06 08B3 0CAC 04B4 8008 AC04+  	dc.b	$08, nD4, $0C, nG3, $04, nEb4, nRst, $08, nG3, $04, nRst, $08
000B0A12 B1B3 04B4 08B8 0480 08AC+  	dc.b	nC4, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nG3, $04, nC4
000B0A1E 08B3 04B4 08B8 0480 08BB+  	dc.b	$08, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nBb4, $10, nG3
000B0A2A 0CB8 AC08 B60C AC04 B40C+  	dc.b	$0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3, $08
000B0A36 B30C AC04 B480 08B1 AC04+  	dc.b	nD4, $0C, nG3, $04, nEb4, nRst, $08, nC4, nG3, $04, nG4, $08
000B0A42 B604 B408 B304 8008 B404+  	dc.b	nF4, $04, nEb4, $08, nD4, $04, nRst, $08, nEb4, $04, nF4, $08
000B0A4E B404 B680 08B8 BB04 B880+  	dc.b	nEb4, $04, nF4, nRst, $08, nG4, nBb4, $04, nG4, nRst, $08
000B0A59 F700 05FF 9D               	smpsLoop            $00, $05, RRZ2_Loop06
000B0A5E AC0C B8AC 08B6 0CAC 04B4+  	dc.b	nG3, $0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3
000B0A6A 08B3 0CAC 04B4 8008 AC04+  	dc.b	$08, nD4, $0C, nG3, $04, nEb4, nRst, $08, nG3, $04, nRst, $08
000B0A76 B1B3 04B4 08B8 0480 08AC+  	dc.b	nC4, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nG3, $04, nC4
000B0A82 08B3 04B4 08B8 0480 08BB+  	dc.b	$08, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nBb4, $10, nG3
000B0A8E 0CB8 AC08 B60C AC04 B40C+  	dc.b	$0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3, $08
000B0A9A B30C AC04 B480 08B1 AC04+  	dc.b	nD4, $0C, nG3, $04, nEb4, nRst, $08, nC4, nG3, $04, nG4, $08
000B0AA6 B604 B408 B304 8008 B404+  	dc.b	nF4, $04, nEb4, $08, nD4, $04, nRst, $08, nEb4, $04, nF4, $08
000B0AB2 B404 B680 08B8 BB04 B880+  	dc.b	nEb4, $04, nF4, nRst, $08, nG4, nBb4, $04, nG4, nRst, $08
000B0ABD EF05                       	smpsSetvoice        $05
000B0ABF 8060 8018 BD04 B9B4 B9B4+  	dc.b	nRst, $60, nRst, $18, nC5, $04, nAb4, nEb4, nAb4, nEb4, nC4, nEb4
000B0ACB B1AD B1AD A8A1 1880 60B7+  	dc.b	nC4, nAb3, nC4, nAb3, nEb3, nAb2, $18, nRst, $60, nFs4, $04, nCs4
000B0AD7 AFAB AFB2 B7AF ABA6 ABAF+  	dc.b	nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3, nFs3, nBb3, nFs3, nCs3
000B0AE3 A39F 2480 6080 18BD 04B9+  	dc.b	nBb2, nFs2, $24, nRst, $60, nRst, $18, nC5, $04, nAb4, nEb4, nAb4
000B0AEF B4B1 B4B1 ADB1 ADA8 A118+  	dc.b	nEb4, nC4, nEb4, nC4, nAb3, nC4, nAb3, nEb3, nAb2, $18, nRst, $60
000B0AFB B704 B2AF ABAF B2B7 AFAB+  	dc.b	nFs4, $04, nCs4, nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3, nFs3
000B0B07 AFAB A6A3 9F24             	dc.b	nBb3, nFs3, nCs3, nBb2, nFs2, $24
000B0B0D E6FA                       	smpsAlterVol        $FA
000B0B0F A560 E7A5 B148 0804 8008+  	dc.b	nC3, $60, smpsNoAttack, nC3, nC4, $48, $08, $04, nRst, $08, nC4, $04
000B0B1B 8008 AF04 22E7 1A08 0480+  	dc.b	nRst, $08, nBb3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08, nBb3
000B0B27 0480 08AD 0422 E71A 0804+  	dc.b	$04, nRst, $08, nAb3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08
000B0B33 AD04 8008 AC04 240C AAA8+  	dc.b	nAb3, $04, nRst, $08, nG3, $04, $24, $0C, nF3, nEb3, nD3, nC4
000B0B3F 4808 0408 0480 08B3 0422+  	dc.b	$48, $08, $04, $08, $04, nRst, $08, nD4, $04, $22, smpsNoAttack, $1A
000B0B4B 0804 8008 B304 8008 B404+  	dc.b	$08, $04, nRst, $08, nD4, $04, nRst, $08, nEb4, $04, $2E, smpsNoAttack
000B0B57 0E08 0480 08B4 0480 08B6+  	dc.b	$0E, $08, $04, nRst, $08, nEb4, $04, nRst, $08, nF4, $04, $24
000B0B63 BB30 B860 B118 B1B4 18B3   	dc.b	nBb4, $30, nG4, $60, nC4, $18, nC4, nEb4, $18, nD4
000B0B6D E606                       	smpsAlterVol        $06
000B0B6F F6FE 14                    	smpsJump            RRZ2_Jump01
000B0B72                            
000B0B72                            ; FM4 Data
000B0B72                            RRZ2_FM4:
000B0B72 E040                       	smpsPan             panRight, $00
000B0B79                            
000B0B79                            RRZ2_Jump00:
000B0B79 EF02                       	smpsSetvoice        $02
000B0B7B                            
000B0B7B                            RRZ2_Loop03:
000B0B7B AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000B0B87 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000B0B93 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000B0B9F AC04 AA08 AC04 8008 AC04+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3
000B0BAB ACAF 08B3 10               	dc.b	nG3, nBb3, $08, nD4, $10
000B0BB0 F700 03FF C7               	smpsLoop            $00, $03, RRZ2_Loop03
000B0BB5 AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000B0BC1 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000B0BCD 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000B0BD9 AC04 AA08 AC04 B4B3 B4B3+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nEb4, nD4, nEb4, nD4, nC4, nD4
000B0BE5 B1AF B1AF ACAA             	dc.b	nC4, nBb3, nC4, nBb3, nG3, nF3
000B0BEB                            
000B0BEB                            RRZ2_Loop04:
000B0BEB A00C ACA0 08AA 0CA0 04A8+  	dc.b	nG2, $0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2
000B0BF7 08A7 0CA0 04A8 8008 A004+  	dc.b	$08, nD3, $0C, nG2, $04, nEb3, nRst, $08, nG2, $04, nRst, $08
000B0C03 A5A7 04A8 08AC 0480 08A0+  	dc.b	nC3, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nG2, $04, nC3
000B0C0F 08A7 04A8 08AC 0480 08AF+  	dc.b	$08, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nBb3, $10, nG2
000B0C1B 0CAC A008 AA0C A004 A80C+  	dc.b	$0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2, $08
000B0C27 A70C A004 A880 08A5 A004+  	dc.b	nD3, $0C, nG2, $04, nEb3, nRst, $08, nC3, nG2, $04, nG3, $08
000B0C33 AA04 A808 A704 8008 A804+  	dc.b	nF3, $04, nEb3, $08, nD3, $04, nRst, $08, nEb3, $04, nF3, $08
000B0C3F A804 AA80 08AC AF04 AC80+  	dc.b	nEb3, $04, nF3, nRst, $08, nG3, nBb3, $04, nG3, nRst, $08
000B0C4A F700 05FF 9D               	smpsLoop            $00, $05, RRZ2_Loop04
000B0C4F A00C ACA0 08AA 0CA0 04A8+  	dc.b	nG2, $0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2
000B0C5B 08A7 0CA0 04A8 8008 A004+  	dc.b	$08, nD3, $0C, nG2, $04, nEb3, nRst, $08, nG2, $04, nRst, $08
000B0C67 A5A7 04A8 08AC 0480 08A0+  	dc.b	nC3, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nG2, $04, nC3
000B0C73 08A7 04A8 08AC 0480 08AF+  	dc.b	$08, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nBb3, $10, nG2
000B0C7F 0CAC A008 AA0C A004 A80C+  	dc.b	$0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2, $08
000B0C8B A70C A004 A880 08A5 A004+  	dc.b	nD3, $0C, nG2, $04, nEb3, nRst, $08, nC3, nG2, $04, nG3, $08
000B0C97 AA04 A808 A704 8008 A804+  	dc.b	nF3, $04, nEb3, $08, nD3, $04, nRst, $08, nEb3, $04, nF3, $08
000B0CA3 A804 AA80 08AC AF04 AC08+  	dc.b	nEb3, $04, nF3, nRst, $08, nG3, nBb3, $04, nG3, $08, nRst, $04
000B0CAF EF05                       	smpsSetvoice        $05
000B0CB1 8060 8018 800C BD04 B9B4+  	dc.b	nRst, $60, nRst, $18, nRst, $0C, nC5, $04, nAb4, nEb4, nAb4, nEb4
000B0CBD B1B4 B1AD B1AD A8A1 0C80+  	dc.b	nC4, nEb4, nC4, nAb3, nC4, nAb3, nEb3, nAb2, $0C, nRst, $60, nRst
000B0CC9 0CB7 04B2 AFAB AFB2 B7AF+  	dc.b	$0C, nFs4, $04, nCs4, nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3
000B0CD5 ABAF ABA6 E7A3 1CE7 0880+  	dc.b	nFs3, nBb3, nFs3, nCs3, smpsNoAttack, nBb2, $1C, smpsNoAttack, $08, nRst, $58, nRst
000B0CE1 1880 0CBD 04B9 B4B9 B4B1+  	dc.b	$18, nRst, $0C, nC5, $04, nAb4, nEb4, nAb4, nEb4, nC4, nEb4, nC4
000B0CED ADB1 ADA8 A10C 8060 800C+  	dc.b	nAb3, nC4, nAb3, nEb3, nAb2, $0C, nRst, $60, nRst, $0C, nFs4, $04
000B0CF9 B2AF ABAF B2B7 AFAB A6AB+  	dc.b	nCs4, nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3, nFs3, nBb3, nFs3
000B0D05 A6E7 A31C                  	dc.b	nCs3, smpsNoAttack, nBb2, $1C
000B0D09 E6FA                       	smpsAlterVol        $FA
000B0D0B A060 E7A0 AC48 0804 8008+  	dc.b	nG2, $60, smpsNoAttack, nG2, nG3, $48, $08, $04, nRst, $08, nG3, $04
000B0D17 8008 AC04 22E7 1A08 0480+  	dc.b	nRst, $08, nG3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08, nG3
000B0D23 0480 08A8 0422 E71A 0804+  	dc.b	$04, nRst, $08, nEb3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08
000B0D2F A804 8008 A704 2418 A0AC+  	dc.b	nEb3, $04, nRst, $08, nD3, $04, $24, $18, nG2, nG3, $48, $08
000B0D3B 0408 0480 08AC 0422 E71A+  	dc.b	$04, $08, $04, nRst, $08, nG3, $04, $22, smpsNoAttack, $1A, $08, $04
000B0D47 8008 AC04 8008 AC04 2EE7+  	dc.b	nRst, $08, nG3, $04, nRst, $08, nG3, $04, $2E, smpsNoAttack, $0E, $08
000B0D53 0480 08AC 0480 08AF 0424+  	dc.b	$04, nRst, $08, nG3, $04, nRst, $08, nBb3, $04, $24, nD4, $30
000B0D5F B160 AC18 ACAC 18AC        	dc.b	nC4, $60, nG3, $18, nG3, nG3, $18, nG3
000B0D67 E606                       	smpsAlterVol        $06
000B0D69 F6FE 0E                    	smpsJump            RRZ2_Jump00
000B0D6C                            
000B0D6C                            ; FM5 Data
000B0D6C                            RRZ2_FM5:
000B0D71 8010                       	dc.b	nRst, $10
000B0D73 E101                       	smpsAlterNote       $01
000B0D75 F6F8 DB                    	smpsJump            RRZ2_FM1
000B0D78                            
000B0D78                            ; PSG1 Data
000B0D78                            RRZ2_PSG1:
000B0D7D F507                       	smpsPSGvoice        stone_1D
000B0D7F B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000B0D8B 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000B0D97 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000B0DA3 8008 B104 AF08 B104 8008+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04
000B0DAF ACAF B1B8 0810             	dc.b	nG3, nBb3, nC4, nG4, $08, $10
000B0DB5 F700 03FF BF               	smpsLoop            $00, $03, RRZ2_PSG1
000B0DBA B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000B0DC6 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000B0DD2 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000B0DDE 8008 B104 AF08 B104 B8B6+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nG4, nF4, nG4, nF4
000B0DEA B4B6 B4B3 B4B3 B1AF        	dc.b	nEb4, nF4, nEb4, nD4, nEb4, nD4, nC4, nBb3
000B0DF2 F507                       	smpsPSGvoice        stone_26
000B0DF4 B860 E7B8 1680 4AB8 60E7+  	dc.b	nG4, $60, smpsNoAttack, nG4, $16, nRst, $4A, nG4, $60, smpsNoAttack, nG4, $16
000B0E00 804A                       	dc.b	nRst, $4A
000B0E02                            
000B0E02                            RRZ2_Loop0D:
000B0E02 B860 E7B8 1680 4ABB 60E7+  	dc.b	nG4, $60, smpsNoAttack, nG4, $16, nRst, $4A, nBb4, $60, smpsNoAttack, nBb4, $16
000B0E0E 804A                       	dc.b	nRst, $4A
000B0E10 F700 02FF EE               	smpsLoop            $00, $02, RRZ2_Loop0D
000B0E15 BA60 E7BA 1680 4AB8 60E7+  	dc.b	nA4, $60, smpsNoAttack, nA4, $16, nRst, $4A, nG4, $60, smpsNoAttack, nG4, $16
000B0E21 804A B860 E7B8 1680 4ABB+  	dc.b	nRst, $4A, nG4, $60, smpsNoAttack, nG4, $16, nRst, $4A, nBb4, $60, smpsNoAttack
000B0E2D BB16 804A                  	dc.b	nBb4, $16, nRst, $4A
000B0E31                            
000B0E31                            RRZ2_Loop0E:
000B0E31 F507                       	smpsPSGvoice        stone_23
000B0E33 B808 04B8 8008 B8B6 0480+  	dc.b	nG4, $08, $04, nG4, nRst, $08, nG4, nF4, $04, nRst, $08, nG4
000B0E3F 0480 08B8 04B6 8008 B8BB+  	dc.b	$04, nRst, $08, nG4, $04, nF4, nRst, $08, nG4, nBb4, $04, nRst
000B0E4B 08B8 0480 08B8 04B6 8008+  	dc.b	$08, nG4, $04, nRst, $08, nG4, $04, nF4, nRst, $08, nG4, nBb4
000B0E57 0480 08B6 0680 2E          	dc.b	$04, nRst, $08, nF4, $06, nRst, $2E
000B0E5E F700 02FF CF               	smpsLoop            $00, $02, RRZ2_Loop0E
000B0E63                            
000B0E63                            RRZ2_Loop0F:
000B0E63 F507                       	smpsPSGvoice        stone_1D
000B0E65 B908 0480 08B9 0480 08B9+  	dc.b	nAb4, $08, $04, nRst, $08, nAb4, $04, nRst, $08, nAb4, $04, nRst
000B0E71 08B9 0430 E760 B708 0480+  	dc.b	$08, nAb4, $04, $30, smpsNoAttack, $60, nFs4, $08, $04, nRst, $08, nFs4
000B0E7D 0480 08B7 0480 08B7 0430+  	dc.b	$04, nRst, $08, nFs4, $04, nRst, $08, nFs4, $04, $30, smpsNoAttack, $60
000B0E89 F700 02FF D6               	smpsLoop            $00, $02, RRZ2_Loop0F
000B0E8E 8060 8030 B804 B1B8 BDB8+  	dc.b	nRst, $60, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000B0E9A B1B8 B10C 8030 B804 B1B8+  	dc.b	nC4, nG4, nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4
000B0EA6 BDB8 B1B8 B10C 8060 8060+  	dc.b	nC5, nG4, nC4, nG4, nC4, $0C, nRst, $60, nRst, $60, nRst, $60
000B0EB2 8030 B804 B1B8 BDB8 BDB8+  	dc.b	nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4, nC4, nG4
000B0EBE B10C 8030 B804 B1B8 BDB8+  	dc.b	nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000B0ECA B1B8 B10C 8060 B618 B3AF+  	dc.b	nC4, nG4, nC4, $0C, nRst, $60, nF4, $18, nD4, nBb3, nG3, nC3
000B0ED6 30AC A518 ACB4 BB          	dc.b	$30, nG3, nC3, $18, nG3, nEb4, nBb4
000B0EDD F6FE 99                    	smpsJump            RRZ2_PSG1
000B0EE0                            
000B0EE0                            ; PSG2 Data
000B0EE0                            RRZ2_PSG2:
000B0EE5 F507                       	smpsPSGvoice        stone_1D
000B0EE7                            
000B0EE7                            RRZ2_Loop09:
000B0EE7 AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000B0EF3 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000B0EFF 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000B0F0B AC04 AA08 AC04 8008 AC04+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3
000B0F17 ACAF 08B3 10               	dc.b	nG3, nBb3, $08, nD4, $10
000B0F1C F700 03FF C7               	smpsLoop            $00, $03, RRZ2_Loop09
000B0F21 AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000B0F2D 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000B0F39 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000B0F45 AC04 AA08 AC04 B4B3 B4B3+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nEb4, nD4, nEb4, nD4, nC4, nD4
000B0F51 B1AF B1AF ACAA             	dc.b	nC4, nBb3, nC4, nBb3, nG3, nF3
000B0F57 F507                       	smpsPSGvoice        stone_26
000B0F59 B160 E7B1 1680 4AB1 60E7+  	dc.b	nC4, $60, smpsNoAttack, nC4, $16, nRst, $4A, nC4, $60, smpsNoAttack, nC4, $16
000B0F65 804A                       	dc.b	nRst, $4A
000B0F67                            
000B0F67                            RRZ2_Loop0A:
000B0F67 B160 E7B1 1680 4AB4 60E7+  	dc.b	nC4, $60, smpsNoAttack, nC4, $16, nRst, $4A, nEb4, $60, smpsNoAttack, nEb4, $16
000B0F73 804A                       	dc.b	nRst, $4A
000B0F75 F700 02FF EE               	smpsLoop            $00, $02, RRZ2_Loop0A
000B0F7A B660 E7B6 1680 4AB4 60E7+  	dc.b	nF4, $60, smpsNoAttack, nF4, $16, nRst, $4A, nEb4, $60, smpsNoAttack, nEb4, $16
000B0F86 804A B160 E7B1 1680 4AB4+  	dc.b	nRst, $4A, nC4, $60, smpsNoAttack, nC4, $16, nRst, $4A, nEb4, $60, smpsNoAttack
000B0F92 B416 804A                  	dc.b	nEb4, $16, nRst, $4A
000B0F96                            
000B0F96                            RRZ2_Loop0B:
000B0F96 F507                       	smpsPSGvoice        stone_23
000B0F98 B408 04B4 8008 B4B3 0480+  	dc.b	nEb4, $08, $04, nEb4, nRst, $08, nEb4, nD4, $04, nRst, $08, nEb4
000B0FA4 0480 08B4 04B3 8008 B4B8+  	dc.b	$04, nRst, $08, nEb4, $04, nD4, nRst, $08, nEb4, nG4, $04, nRst
000B0FB0 08B4 0480 08B4 04B3 8008+  	dc.b	$08, nEb4, $04, nRst, $08, nEb4, $04, nD4, nRst, $08, nEb4, nG4
000B0FBC 0480 08B3 0680 2E          	dc.b	$04, nRst, $08, nD4, $06, nRst, $2E
000B0FC3 F700 02FF CF               	smpsLoop            $00, $02, RRZ2_Loop0B
000B0FC8                            
000B0FC8                            RRZ2_Loop0C:
000B0FC8 F507                       	smpsPSGvoice        stone_1D
000B0FCA B208 0480 08B2 0480 08B2+  	dc.b	nCs4, $08, $04, nRst, $08, nCs4, $04, nRst, $08, nCs4, $04, nRst
000B0FD6 08B2 04B1 30E7 60B0 0804+  	dc.b	$08, nCs4, $04, nC4, $30, smpsNoAttack, $60, nB3, $08, $04, nRst, $08
000B0FE2 B004 8008 B004 8008 B004+  	dc.b	nB3, $04, nRst, $08, nB3, $04, nRst, $08, nB3, $04, nBb3, $30
000B0FEE E760                       	dc.b	smpsNoAttack, $60
000B0FF0 F700 02FF D4               	smpsLoop            $00, $02, RRZ2_Loop0C
000B0FF5 800D                       	dc.b	nRst, $0D
000B0FF7 EC02                       	smpsPSGAlterVol     $02
000B0FF9 8060 8030 B804 B1B8 BDB8+  	dc.b	nRst, $60, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000B1005 B1B8 B10C 8030 B804 B1B8+  	dc.b	nC4, nG4, nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4
000B1011 BDB8 B1B8 B10C 8060 8060+  	dc.b	nC5, nG4, nC4, nG4, nC4, $0C, nRst, $60, nRst, $60, nRst, $60
000B101D 8030 B804 B1B8 BDB8 BDB8+  	dc.b	nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4, nC4, nG4
000B1029 B10C 8030 B804 B1B8 BDB8+  	dc.b	nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000B1035 B1B8 B10C 8060 B618 B3AF+  	dc.b	nC4, nG4, nC4, $0C, nRst, $60, nF4, $18, nD4, nBb3, nG3, nC3
000B1041 30AC A518 ACB4 BB0B        	dc.b	$30, nG3, nC3, $18, nG3, nEb4, nBb4, $0B
000B1049 ECFE                       	smpsPSGAlterVol     $FE
000B104B F6FE 93                    	smpsJump            RRZ2_PSG2
000B104E                            
000B104E                            ; PSG3 Data
000B104E                            RRZ2_PSG3:
000B104E F3E7                       	smpsPSGform         $E7
000B1050 8060 80                    	dc.b	nRst, $60, nRst
000B1053 F800 00                    	smpsCall            RRZ2_Call00
000B1056 F800 00                    	smpsCall            RRZ2_Call00
000B1059 F800 00                    	smpsCall            RRZ2_Call01
000B105C                            
000B105C                            RRZ2_Jump03:
000B105C F800 00                    	smpsCall            RRZ2_Call00
000B105F F6FF FB                    	smpsJump            RRZ2_Jump03
000B1062                            
000B1062                            RRZ2_Call00:
000B1062 F502                       	smpsPSGvoice        stone_0F
000B1064 B104 8080 B180 B1          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nC4
000B106B F700 10FF F3               	smpsLoop            $00, $10, RRZ2_Call00
000B1070 E3                         	smpsReturn
000B1071                            
000B1071                            RRZ2_Call01:
000B1071 F502                       	smpsPSGvoice        stone_0F
000B1073 B104 8080 B180 B1          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nC4
000B107A F502                       	smpsPSGvoice        stone_0F
000B107C B104 8080 B180 B1          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nC4
000B1083 F502                       	smpsPSGvoice        stone_0F
000B1085 B104 8080 B180 80          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nRst
000B108C F503                       	smpsPSGvoice        stone_04
000B108E B10C                       	dc.b	nC4, $0C
000B1090 F502                       	smpsPSGvoice        stone_0F
000B1092 B104 8080                  	dc.b	nC4, $04, nRst, nRst
000B1096 E3                         	smpsReturn
000B1097                            
000B1097                            ; DAC Data
000B1097                            RRZ2_DAC:
000B1097 8160 8048 810C 8181 6080+  	dc.b	dKick, $60, nRst, $48, dKick, $0C, dKick, dKick, $60, nRst, $48, dHiTimpani
000B10A3 0488 8A8B 8B8B 8160 8048+  	dc.b	$04, dHiTimpani, dLowTimpani, dFloorTimpani, dFloorTimpani, dFloorTimpani, dKick, $60, nRst, $48, dKick, $0C
000B10AF 8181 6080 0882 0480 8080+  	dc.b	dKick, dKick, $60, nRst, $08, dSnare, $04, nRst, nRst, nRst, dSnare, nRst
000B10BB 8080 8080 8280 8082 8080+  	dc.b	nRst, nRst, nRst, nRst, dSnare, nRst, nRst, dSnare, nRst, nRst, dFloorTimpani, $04
000B10C7 8B8B 8B8B 8B81 0480 8080+  	dc.b	dFloorTimpani, dFloorTimpani, dFloorTimpani, dFloorTimpani, dFloorTimpani, dKick, $04, nRst, nRst, nRst, nRst, nRst
000B10D3 8280 8080 8080 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, dKick, nRst, nRst
000B10DF 8280 8080 8080 8180 8080+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, nRst, nRst, dKick
000B10EB 8280 8080 8081 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst, dKick, nRst, nRst
000B10F7 8280 8080 8080 8180 8080+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, nRst, nRst, nRst
000B1103 8280 8080 8080 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, dKick, nRst, nRst
000B110F 8280 8080 8080 8180 8080+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, nRst, nRst, nRst
000B111B 8280 8080 8081 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst, dKick, nRst, nRst
000B1127 8280 8082 8282             	dc.b	dSnare, nRst, nRst, dSnare, dSnare, dSnare
000B112D                            
000B112D                            RRZ2_Loop00:
000B112D 8104 8080 8080 8182 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B1139 8181 8080 8180 8082 8080+  	dc.b	dKick, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B1145 8081 8080 8080 8182 8080+  	dc.b	nRst, dKick, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B1151 8081 8080 8180 8082 8080+  	dc.b	nRst, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, nRst
000B115D 80                         	dc.b	nRst
000B115E F700 07FF CB               	smpsLoop            $00, $07, RRZ2_Loop00
000B1163 8104 8080 8080 8182 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B116F 8181 8080 8180 8082 8080+  	dc.b	dKick, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B117B 8081 8080 8080 8182 8080+  	dc.b	nRst, dKick, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B1187 8081 8181 8180 8082 8080+  	dc.b	nRst, dKick, dKick, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, dSnare, dSnare
000B1193 82                         	dc.b	dSnare
000B1194                            
000B1194                            RRZ2_Loop01:
000B1194 8104 8080 8080 8182 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B11A0 8181 8080 8180 8082 8080+  	dc.b	dKick, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B11AC 8081 8080 8080 8182 8080+  	dc.b	nRst, dKick, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B11B8 8081 8080 8180 8082 8080+  	dc.b	nRst, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, nRst
000B11C4 80                         	dc.b	nRst
000B11C5 F700 02FF CB               	smpsLoop            $00, $02, RRZ2_Loop01
000B11CA 8104 8080 8180 8180 8082+  	dc.b	dKick, $04, nRst, nRst, dKick, nRst, dKick, nRst, nRst, dSnare, nRst, nRst
000B11D6 8181 3081 0480 8081 8081+  	dc.b	dKick, dKick, $30, dKick, $04, nRst, nRst, dKick, nRst, dKick, nRst, nRst
000B11E2 8180 8081 8118 8181 0480+  	dc.b	dKick, nRst, nRst, dKick, dKick, $18, dKick, dKick, $04, nRst, nRst, dKick
000B11EE 8081 8080 8280 8081 8180+  	dc.b	nRst, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, dKick, nRst, nRst, nRst
000B11FA 8081 8280 8080 8080 8180+  	dc.b	nRst, dKick, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, dSnare, nRst
000B1206 8080 8280 8080 8080 8180+  	dc.b	nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, dKick, dSnare
000B1212 8080 8180 8182 8080 8104+  	dc.b	nRst, nRst, dKick, nRst, dKick, dSnare, nRst, nRst, dKick, $04, nRst, nRst
000B121E 8080 8082 8080 8080 8081+  	dc.b	nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B122A 8180 8082 8080 8080 8081+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B1236 8080 8182 8080 8080 8181+  	dc.b	nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst
000B1242 8180 8082 8080 8080 8081+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B124E 8080 8082 8080 8080 8081+  	dc.b	nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B125A 8180 8082 8080 8080 8081+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B1266 8080 8082 8080 8080 8181+  	dc.b	nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst
000B1272 8180 8082 8080 8282 8281+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, dSnare, dSnare, dSnare, dKick, $04, nRst
000B127E 8080 8080 8280 8080 8081+  	dc.b	nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B128A 8181 8080 8280 8080 8080+  	dc.b	dKick, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, $04
000B1296 8080 8080 8082 8080 8080+  	dc.b	nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick, nRst
000B12A2 8081 8180 8082 8080 8A8B+  	dc.b	nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, dLowTimpani, dFloorTimpani, dFloorTimpani, dKick
000B12AE 0480 8080 8080 8280 8080+  	dc.b	$04, nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick
000B12BA 8080 8181 8080 8280 8080+  	dc.b	nRst, nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst
000B12C6                            
000B12C6                            RRZ2_Loop02:
000B12C6 8104 8080 8080 8082 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B12D2 8180 8081 8180 8082 8080+  	dc.b	dKick, nRst, nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B12DE 80                         	dc.b	nRst
000B12DF F700 07FF E3               	smpsLoop            $00, $07, RRZ2_Loop02
000B12E4 8104 8080 8080 8082 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B12F0 8180 8081 8180 8082 8080+  	dc.b	dKick, nRst, nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, nRst
000B12FC 8181 1818 8204 0404 0404+  	dc.b	dKick, dKick, $18, $18, dSnare, $04, $04, $04, $04, $04, $04, $04
000B1308 0404 0404 04               	dc.b	$04, $04, $04, $04, $04
000B130D F6FD 88                    	smpsJump            RRZ2_DAC
000B1310                            
000B1310                            RRZ2_Voices:
000B1310                            ;	Voice $00
000B1310                            ;	$3A
000B1310                            ;	$3F, $73, $73, $31, 	$9F, $5F, $54, $17, 	$03, $14, $0A, $05
000B1310                            ;	$01, $05, $01, $01, 	$FF, $EF, $8F, $FF, 	$29, $39, $23, $00
000B1310                            	smpsVcAlgorithm     $02
000B1310                            	smpsVcFeedback      $07
000B1310                            	smpsVcUnusedBits    $00
000B1310                            	smpsVcDetune        $03, $07, $07, $03
000B1310                            	smpsVcCoarseFreq    $01, $03, $03, $0F
000B1310                            	smpsVcRateScale     $00, $01, $01, $02
000B1310                            	smpsVcAttackRate    $17, $14, $1F, $1F
000B1310                            	smpsVcAmpMod        $00, $00, $00, $00
000B1310                            	smpsVcDecayRate1    $05, $0A, $14, $03
000B1310                            	smpsVcDecayRate2    $01, $01, $05, $01
000B1310                            	smpsVcDecayLevel    $0F, $08, $0E, $0F
000B1310                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1329                            
000B1329                            ;	Voice $01
000B1329                            ;	$3C
000B1329                            ;	$01, $00, $00, $00, 	$1F, $1F, $15, $1F, 	$11, $03, $12, $05
000B1329                            ;	$07, $04, $09, $02, 	$55, $3A, $25, $1A, 	$1A, $00, $07, $00
000B1329                            	smpsVcAlgorithm     $04
000B1329                            	smpsVcFeedback      $07
000B1329                            	smpsVcUnusedBits    $00
000B1329                            	smpsVcDetune        $00, $00, $00, $00
000B1329                            	smpsVcCoarseFreq    $00, $00, $00, $01
000B1329                            	smpsVcRateScale     $00, $00, $00, $00
000B1329                            	smpsVcAttackRate    $1F, $15, $1F, $1F
000B1329                            	smpsVcAmpMod        $00, $00, $00, $00
000B1329                            	smpsVcDecayRate1    $05, $12, $03, $11
000B1329                            	smpsVcDecayRate2    $02, $09, $04, $07
000B1329                            	smpsVcDecayLevel    $01, $02, $03, $05
000B1329                            	smpsVcReleaseRate   $0A, $05, $0A, $05
000B1342                            
000B1342                            ;	Voice $02
000B1342                            ;	$3A
000B1342                            ;	$73, $04, $11, $31, 	$9F, $DF, $9F, $9F, 	$05, $05, $03, $0A
000B1342                            ;	$03, $02, $03, $02, 	$6F, $6F, $5F, $7F, 	$1C, $20, $1E, $00
000B1342                            	smpsVcAlgorithm     $02
000B1342                            	smpsVcFeedback      $07
000B1342                            	smpsVcUnusedBits    $00
000B1342                            	smpsVcDetune        $03, $01, $00, $07
000B1342                            	smpsVcCoarseFreq    $01, $01, $04, $03
000B1342                            	smpsVcRateScale     $02, $02, $03, $02
000B1342                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1342                            	smpsVcAmpMod        $00, $00, $00, $00
000B1342                            	smpsVcDecayRate1    $0A, $03, $05, $05
000B1342                            	smpsVcDecayRate2    $02, $03, $02, $03
000B1342                            	smpsVcDecayLevel    $07, $05, $06, $06
000B1342                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B135B                            
000B135B                            ;	Voice $03
000B135B                            ;	$3E
000B135B                            ;	$07, $01, $02, $0A, 	$1F, $1F, $1F, $1F, 	$03, $06, $00, $00
000B135B                            ;	$08, $06, $07, $0C, 	$15, $0A, $0A, $0A, 	$20, $05, $06, $08
000B135B                            	smpsVcAlgorithm     $06
000B135B                            	smpsVcFeedback      $07
000B135B                            	smpsVcUnusedBits    $00
000B135B                            	smpsVcDetune        $00, $00, $00, $00
000B135B                            	smpsVcCoarseFreq    $0A, $02, $01, $07
000B135B                            	smpsVcRateScale     $00, $00, $00, $00
000B135B                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B135B                            	smpsVcAmpMod        $00, $00, $00, $00
000B135B                            	smpsVcDecayRate1    $00, $00, $06, $03
000B135B                            	smpsVcDecayRate2    $0C, $07, $06, $08
000B135B                            	smpsVcDecayLevel    $00, $00, $00, $01
000B135B                            	smpsVcReleaseRate   $0A, $0A, $0A, $05
000B1374                            
000B1374                            ;	Voice $04
000B1374                            ;	$3C
000B1374                            ;	$71, $71, $11, $11, 	$17, $1E, $19, $1E, 	$04, $01, $07, $01
000B1374                            ;	$00, $00, $00, $00, 	$F7, $F8, $F7, $F8, 	$1E, $00, $14, $00
000B1374                            	smpsVcAlgorithm     $04
000B1374                            	smpsVcFeedback      $07
000B1374                            	smpsVcUnusedBits    $00
000B1374                            	smpsVcDetune        $01, $01, $07, $07
000B1374                            	smpsVcCoarseFreq    $01, $01, $01, $01
000B1374                            	smpsVcRateScale     $00, $00, $00, $00
000B1374                            	smpsVcAttackRate    $1E, $19, $1E, $17
000B1374                            	smpsVcAmpMod        $00, $00, $00, $00
000B1374                            	smpsVcDecayRate1    $01, $07, $01, $04
000B1374                            	smpsVcDecayRate2    $00, $00, $00, $00
000B1374                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B1374                            	smpsVcReleaseRate   $08, $07, $08, $07
000B138D                            
000B138D                            ;	Voice $05
000B138D                            ;	$16
000B138D                            ;	$7A, $74, $3C, $31, 	$1F, $1F, $1F, $1F, 	$0A, $08, $0C, $0A
000B138D                            ;	$07, $0A, $07, $05, 	$2F, $AF, $AF, $5F, 	$14, $05, $0A, $00
000B138D                            	smpsVcAlgorithm     $06
000B138D                            	smpsVcFeedback      $02
000B138D                            	smpsVcUnusedBits    $00
000B138D                            	smpsVcDetune        $03, $03, $07, $07
000B138D                            	smpsVcCoarseFreq    $01, $0C, $04, $0A
000B138D                            	smpsVcRateScale     $00, $00, $00, $00
000B138D                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B138D                            	smpsVcAmpMod        $00, $00, $00, $00
000B138D                            	smpsVcDecayRate1    $0A, $0C, $08, $0A
000B138D                            	smpsVcDecayRate2    $05, $07, $0A, $07
000B138D                            	smpsVcDecayLevel    $05, $0A, $0A, $02
000B138D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B13A6                            
000B13A6                            
000B13A6                            		even				
000B13A6                            Music9B:		incbin	"sound/music/Mus9B - TTZ BF US.bin"
000B1F88                            		even
000B1F88                            Music9C:		include	"sound/music/Mus9C - Tribute.asm"
000B1F88                            Tribute_Header:
000B1F88                            	smpsHeaderStartSong 3
000B1F8A 0603                       	smpsHeaderChan      $06, $03
000B1F8C 0106                       	smpsHeaderTempo     $01, $06
000B1F8E                            
000B1F92 0000 000D                  	smpsHeaderFM        Tribute_FM1,	$00, $0D
000B1F96 0000 0016                  	smpsHeaderFM        Tribute_FM2,	$00, $16
000B1F9A 0000 0016                  	smpsHeaderFM        Tribute_FM3,	$00, $16
000B1F9E 0000 0016                  	smpsHeaderFM        Tribute_FM4,	$00, $16
000B1FA2 0000 0C15                  	smpsHeaderFM        Tribute_FM5,	$0C, $15
000B1FA6                            ;	smpsHeaderFM        Tribute_FM6,	$0C, $17
000B1FB8                            
000B1FB8                            ; FM1 Data
000B1FB8                            Tribute_FM1:
000B1FB8 EF00                       	smpsSetvoice        $00
000B1FBA F800 00                    	smpsCall            Tribute_Call05
000B1FBD E712 9B06 8024 9B06 8080+  	dc.b	smpsNoAttack, $12, nD2, $06, nRst, $24, nD2, $06, nRst, nRst, nD2, nRst
000B1FC9 9BE7 069B 06A7 9BA7 9B80+  	dc.b	nD2, smpsNoAttack, $06, nD2, $06, nD3, nD2, nD3, nD2, nRst, nD2, $0C
000B1FD5 06A7 9B99 9A9B 9E          	dc.b	$06, nD3, nD2, nC2, nCs2, nD2, nF2
000B1FDC F800 00                    	smpsCall            Tribute_Call05
000B1FDF E712 9B06 8024 9B06 8080+  	dc.b	smpsNoAttack, $12, nD2, $06, nRst, $24, nD2, $06, nRst, nRst, nD2, nRst
000B1FEB 94                         	dc.b	nG1
000B1FEC EA09                       	smpsSetTempoMod     $09
000B1FEE E760 E748 8018             	dc.b	smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B1FF4                            
000B1FF4                            Tribute_Loop05:
000B1FF4 9918 0C0C 1206 80A5 8098+  	dc.b	nC2, $18, $0C, $0C, $12, $06, nRst, nC3, nRst, nB1, smpsNoAttack, $18
000B2000 0C0C 120C A006 940C 9618+  	dc.b	$0C, $0C, $12, $0C, nG2, $06, nG1, $0C, nA1, $18, $0C, $0C
000B200C 1206 80A2 8094 E70C 0C0C+  	dc.b	$12, $06, nRst, nA2, nRst, nG1, smpsNoAttack, $0C, $0C, $0C, $0C, $0C
000B2018 0C0C 999B 180C 0C12 0680+  	dc.b	$0C, $0C, nC2, nD2, $18, $0C, $0C, $12, $06, nRst, nD3, nRst
000B2024 97E7 0C0C 0C0C 1212 A306+  	dc.b	nBb1, smpsNoAttack, $0C, $0C, $0C, $0C, $12, $12, nBb2, $06, nRst, nA1
000B2030 180C 0C12 0680 A280 92E7+  	dc.b	$18, $0C, $0C, $12, $06, nRst, nA2, nRst, nF1, smpsNoAttack, $0C, $0C
000B203C 0C0C 910C 0C0C 9B          	dc.b	$0C, $0C, nE1, $0C, $0C, $0C, nD2
000B2043 F700 02FF AD               	smpsLoop            $00, $02, Tribute_Loop05
000B2048 9624 9530 940C E724 9330+  	dc.b	nA1, $24, nAb1, $30, nG1, $0C, smpsNoAttack, $24, nFs1, $30, nF1, $0C
000B2054 E74E 8006 940C E760        	dc.b	smpsNoAttack, $4E, nRst, $06, nG1, $0C, smpsNoAttack, $60
000B205C F800 00                    	smpsCall            Tribute_Call00
000B205F F2                         	smpsStop
000B2060                            
000B2060                            Tribute_Call05:
000B2060 9B12 0680 249B 0680 809B+  	dc.b	nD2, $12, $06, nRst, $24, nD2, $06, nRst, nRst, nD2, nRst, nD2
000B206C E712 9B06 801E A706 9B80+  	dc.b	smpsNoAttack, $12, nD2, $06, nRst, $1E, nD3, $06, nD2, nRst, nRst, nD2
000B2078 809B                       	dc.b	nRst, nD2
000B207A E3                         	smpsReturn
000B207B                            
000B207B                            Tribute_Call00:
000B207B 8006 999B A09E 9D94 99E7+  	dc.b	nRst, $06, nC2, nD2, nG2, nF2, nE2, nG1, nC2, smpsNoAttack, $06, nG2
000B2087 9EA5 A0A5 A7AC E706 9E9D+  	dc.b	nF2, nC3, nG2, nC3, nD3, nG3, smpsNoAttack, $06, nF2, nE2, nC2, nF1
000B2093 9496 99E7 06               	dc.b	nG1, nA1, nC2, smpsNoAttack, $06
000B2098 E3                         	smpsReturn
000B2099                            
000B2099                            ; FM2 Data
000B2099                            Tribute_FM2:
000B2099 EF01                       	smpsSetvoice        $01
000B209B B512 B306                  	dc.b	nE4, $12, nD4, $06
000B209F E60A                       	smpsFMAlterVol      $0A
000B20A1 0680                       	dc.b	$06, nRst
000B20A3 E6F6                       	smpsFMAlterVol      $F6
000B20A5 B8                         	dc.b	nG4
000B20A6 E60A                       	smpsFMAlterVol      $0A
000B20A8 0680                       	dc.b	$06, nRst
000B20AA E6F6                       	smpsFMAlterVol      $F6
000B20AC B6B5                       	dc.b	nF4, nE4
000B20AE E60A                       	smpsFMAlterVol      $0A
000B20B0 06                         	dc.b	$06
000B20B1 E6F6                       	smpsFMAlterVol      $F6
000B20B3 B1                         	dc.b	nC4
000B20B4 E60A                       	smpsFMAlterVol      $0A
000B20B6 06                         	dc.b	$06
000B20B7 E6F6                       	smpsFMAlterVol      $F6
000B20B9 B3                         	dc.b	nD4
000B20BA EF02                       	smpsSetvoice        $02
000B20BC E918                       	smpsAlterPitch      $18
000B20BE F800 00                    	smpsCall            Tribute_Call04
000B20C1 EF01                       	smpsSetvoice        $01
000B20C3 E9E8                       	smpsAlterPitch      $E8
000B20C5 F800 00                    	smpsCall            Tribute_Call04
000B20C8 B406 E712 18B6 1818        	dc.b	nEb4, $06, smpsNoAttack, $12, $18, nF4, $18, $18
000B20D0 E60A                       	smpsFMAlterVol      $0A
000B20D2 06                         	dc.b	$06
000B20D3 E6F6                       	smpsFMAlterVol      $F6
000B20D5 B512 B306                  	dc.b	nE4, $12, nD4, $06
000B20D9 E60A                       	smpsFMAlterVol      $0A
000B20DB 0680                       	dc.b	$06, nRst
000B20DD E6F6                       	smpsFMAlterVol      $F6
000B20DF B8                         	dc.b	nG4
000B20E0 E60A                       	smpsFMAlterVol      $0A
000B20E2 0680                       	dc.b	$06, nRst
000B20E4 E6F6                       	smpsFMAlterVol      $F6
000B20E6 B6B5                       	dc.b	nF4, nE4
000B20E8 E60A                       	smpsFMAlterVol      $0A
000B20EA 06                         	dc.b	$06
000B20EB E6F6                       	smpsFMAlterVol      $F6
000B20ED B1                         	dc.b	nC4
000B20EE E60A                       	smpsFMAlterVol      $0A
000B20F0 06                         	dc.b	$06
000B20F1 E6F6                       	smpsFMAlterVol      $F6
000B20F3 B3                         	dc.b	nD4
000B20F4 EF02                       	smpsSetvoice        $02
000B20F6 E918                       	smpsAlterPitch      $18
000B20F8 F800 00                    	smpsCall            Tribute_Call04
000B20FB EF01                       	smpsSetvoice        $01
000B20FD E9E8                       	smpsAlterPitch      $E8
000B20FF F800 00                    	smpsCall            Tribute_Call04
000B2102 B106 E760 E748 8018        	dc.b	nC4, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B210A                            
000B210A                            Tribute_Loop04:
000B210A 8018 B512                  	dc.b	nRst, $18, nE4, $12
000B210E E60A                       	smpsFMAlterVol      $0A
000B2110 06                         	dc.b	$06
000B2111 E6F6                       	smpsFMAlterVol      $F6
000B2113 B50C                       	dc.b	nE4, $0C
000B2115 E60A                       	smpsFMAlterVol      $0A
000B2117 06                         	dc.b	$06
000B2118 E6F6                       	smpsFMAlterVol      $F6
000B211A 06                         	dc.b	$06
000B211B E60A                       	smpsFMAlterVol      $0A
000B211D 06                         	dc.b	$06
000B211E E6F6                       	smpsFMAlterVol      $F6
000B2120 06                         	dc.b	$06
000B2121 E60A                       	smpsFMAlterVol      $0A
000B2123 06                         	dc.b	$06
000B2124 E6F6                       	smpsFMAlterVol      $F6
000B2126 B3E7 60                    	dc.b	nD4, smpsNoAttack, $60
000B2129 F700 03FF DD               	smpsLoop            $00, $03, Tribute_Loop04
000B212E 8018 B512                  	dc.b	nRst, $18, nE4, $12
000B2132 E60A                       	smpsFMAlterVol      $0A
000B2134 06                         	dc.b	$06
000B2135 E6F6                       	smpsFMAlterVol      $F6
000B2137 B50C                       	dc.b	nE4, $0C
000B2139 E60A                       	smpsFMAlterVol      $0A
000B213B 06                         	dc.b	$06
000B213C E6F6                       	smpsFMAlterVol      $F6
000B213E 06                         	dc.b	$06
000B213F E60A                       	smpsFMAlterVol      $0A
000B2141 06                         	dc.b	$06
000B2142 E6F6                       	smpsFMAlterVol      $F6
000B2144 06                         	dc.b	$06
000B2145 E60A                       	smpsFMAlterVol      $0A
000B2147 06                         	dc.b	$06
000B2148 E6F6                       	smpsFMAlterVol      $F6
000B214A B5E7 30B3 18B8             	dc.b	nE4, smpsNoAttack, $30, nD4, $18, nG4
000B2150 F701 02FF B6               	smpsLoop            $01, $02, Tribute_Loop04
000B2155 B51E                       	dc.b	nE4, $1E
000B2157 E60A                       	smpsFMAlterVol      $0A
000B2159 06                         	dc.b	$06
000B215A E6F6                       	smpsFMAlterVol      $F6
000B215C B62A                       	dc.b	nF4, $2A
000B215E E60A                       	smpsFMAlterVol      $0A
000B2160 06                         	dc.b	$06
000B2161 E6F6                       	smpsFMAlterVol      $F6
000B2163 B52A                       	dc.b	nE4, $2A
000B2165 E60A                       	smpsFMAlterVol      $0A
000B2167 06                         	dc.b	$06
000B2168 E6F6                       	smpsFMAlterVol      $F6
000B216A B52A                       	dc.b	nE4, $2A
000B216C E60A                       	smpsFMAlterVol      $0A
000B216E 06                         	dc.b	$06
000B216F E6F6                       	smpsFMAlterVol      $F6
000B2171 B50C E74E                  	dc.b	nE4, $0C, smpsNoAttack, $4E
000B2175 E60A                       	smpsFMAlterVol      $0A
000B2177 06                         	dc.b	$06
000B2178 E6F6                       	smpsFMAlterVol      $F6
000B217A B30C E760                  	dc.b	nD4, $0C, smpsNoAttack, $60
000B217E F800 00                    	smpsCall            Tribute_Call03
000B2181 F2                         	smpsStop
000B2182                            
000B2182                            Tribute_Call04:
000B2182 B506 E712 B306             	dc.b	nE4, $06, smpsNoAttack, $12, nD4, $06
000B2188 E60A                       	smpsFMAlterVol      $0A
000B218A 0680                       	dc.b	$06, nRst
000B218C E6F6                       	smpsFMAlterVol      $F6
000B218E B8                         	dc.b	nG4
000B218F E60A                       	smpsFMAlterVol      $0A
000B2191 0680                       	dc.b	$06, nRst
000B2193 E6F6                       	smpsFMAlterVol      $F6
000B2195 B6B5                       	dc.b	nF4, nE4
000B2197 E60A                       	smpsFMAlterVol      $0A
000B2199 06                         	dc.b	$06
000B219A E6F6                       	smpsFMAlterVol      $F6
000B219C B1                         	dc.b	nC4
000B219D E60A                       	smpsFMAlterVol      $0A
000B219F 06                         	dc.b	$06
000B21A0 E6F6                       	smpsFMAlterVol      $F6
000B21A2 B3                         	dc.b	nD4
000B21A3 E3                         	smpsReturn
000B21A4                            
000B21A4                            Tribute_Call03:
000B21A4 E918                       	smpsAlterPitch      $18
000B21A6 8006 999B A09E 9D94 99     	dc.b	nRst, $06, nC2, nD2, nG2, nF2, nE2, nG1, nC2
000B21AF E60A                       	smpsFMAlterVol      $0A
000B21B1 06                         	dc.b	$06
000B21B2 E6F6                       	smpsFMAlterVol      $F6
000B21B4 A09E A5A0 A5A7 AC          	dc.b	nG2, nF2, nC3, nG2, nC3, nD3, nG3
000B21BB E60A                       	smpsFMAlterVol      $0A
000B21BD 06                         	dc.b	$06
000B21BE E6F6                       	smpsFMAlterVol      $F6
000B21C0 9E9D 9992 9496 99          	dc.b	nF2, nE2, nC2, nF1, nG1, nA1, nC2
000B21C7 E60A                       	smpsFMAlterVol      $0A
000B21C9 06                         	dc.b	$06
000B21CA E6F6                       	smpsFMAlterVol      $F6
000B21CC E9E8                       	smpsAlterPitch      $E8
000B21CE E3                         	smpsReturn
000B21CF                            
000B21CF                            ; FM3 Data
000B21CF                            Tribute_FM3:
000B21CF EF01                       	smpsSetvoice        $01
000B21D1 B112 B006                  	dc.b	nC4, $12, nB3, $06
000B21D5 E60A                       	smpsFMAlterVol      $0A
000B21D7 0680                       	dc.b	$06, nRst
000B21D9 E6F6                       	smpsFMAlterVol      $F6
000B21DB B3                         	dc.b	nD4
000B21DC E60A                       	smpsFMAlterVol      $0A
000B21DE 0680                       	dc.b	$06, nRst
000B21E0 E6F6                       	smpsFMAlterVol      $F6
000B21E2 B1B1                       	dc.b	nC4, nC4
000B21E4 E60A                       	smpsFMAlterVol      $0A
000B21E6 06                         	dc.b	$06
000B21E7 E6F6                       	smpsFMAlterVol      $F6
000B21E9 AE                         	dc.b	nA3
000B21EA E60A                       	smpsFMAlterVol      $0A
000B21EC 06                         	dc.b	$06
000B21ED E6F6                       	smpsFMAlterVol      $F6
000B21EF B0                         	dc.b	nB3
000B21F0 EF02                       	smpsSetvoice        $02
000B21F2 E918                       	smpsAlterPitch      $18
000B21F4 E080                       	smpsPan             panLeft, $00
000B21F6 F800 00                    	smpsCall            Tribute_Call02
000B21F9 EF01                       	smpsSetvoice        $01
000B21FB E9E8                       	smpsAlterPitch      $E8
000B21FD E0C0                       	smpsPan             panCenter, $00
000B21FF F800 00                    	smpsCall            Tribute_Call02
000B2202 AF06 E712 18B1 1818        	dc.b	nBb3, $06, smpsNoAttack, $12, $18, nC4, $18, $18
000B220A E60A                       	smpsFMAlterVol      $0A
000B220C 06                         	dc.b	$06
000B220D E6F6                       	smpsFMAlterVol      $F6
000B220F B112 B006                  	dc.b	nC4, $12, nB3, $06
000B2213 E60A                       	smpsFMAlterVol      $0A
000B2215 0680                       	dc.b	$06, nRst
000B2217 E6F6                       	smpsFMAlterVol      $F6
000B2219 B3                         	dc.b	nD4
000B221A E60A                       	smpsFMAlterVol      $0A
000B221C 0680                       	dc.b	$06, nRst
000B221E E6F6                       	smpsFMAlterVol      $F6
000B2220 B1B1                       	dc.b	nC4, nC4
000B2222 E60A                       	smpsFMAlterVol      $0A
000B2224 06                         	dc.b	$06
000B2225 E6F6                       	smpsFMAlterVol      $F6
000B2227 AE                         	dc.b	nA3
000B2228 E60A                       	smpsFMAlterVol      $0A
000B222A 06                         	dc.b	$06
000B222B E6F6                       	smpsFMAlterVol      $F6
000B222D B0                         	dc.b	nB3
000B222E EF02                       	smpsSetvoice        $02
000B2230 E918                       	smpsAlterPitch      $18
000B2232 E080                       	smpsPan             panLeft, $00
000B2234 F800 00                    	smpsCall            Tribute_Call02
000B2237 EF01                       	smpsSetvoice        $01
000B2239 E9E8                       	smpsAlterPitch      $E8
000B223B E0C0                       	smpsPan             panCenter, $00
000B223D F800 00                    	smpsCall            Tribute_Call02
000B2240 AE06 E760 E748 8018        	dc.b	nA3, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B2248                            
000B2248                            Tribute_Loop03:
000B2248 8018 B112                  	dc.b	nRst, $18, nC4, $12
000B224C E60A                       	smpsFMAlterVol      $0A
000B224E 06                         	dc.b	$06
000B224F E6F6                       	smpsFMAlterVol      $F6
000B2251 0C                         	dc.b	$0C
000B2252 E60A                       	smpsFMAlterVol      $0A
000B2254 06                         	dc.b	$06
000B2255 E6F6                       	smpsFMAlterVol      $F6
000B2257 06                         	dc.b	$06
000B2258 E60A                       	smpsFMAlterVol      $0A
000B225A 06                         	dc.b	$06
000B225B E6F6                       	smpsFMAlterVol      $F6
000B225D 06                         	dc.b	$06
000B225E E60A                       	smpsFMAlterVol      $0A
000B2260 06                         	dc.b	$06
000B2261 E6F6                       	smpsFMAlterVol      $F6
000B2263 B0E7 60                    	dc.b	nB3, smpsNoAttack, $60
000B2266 F700 02FF DE               	smpsLoop            $00, $02, Tribute_Loop03
000B226B 8018 B112                  	dc.b	nRst, $18, nC4, $12
000B226F E60A                       	smpsFMAlterVol      $0A
000B2271 06                         	dc.b	$06
000B2272 E6F6                       	smpsFMAlterVol      $F6
000B2274 0C                         	dc.b	$0C
000B2275 E60A                       	smpsFMAlterVol      $0A
000B2277 06                         	dc.b	$06
000B2278 E6F6                       	smpsFMAlterVol      $F6
000B227A 06                         	dc.b	$06
000B227B E60A                       	smpsFMAlterVol      $0A
000B227D 06                         	dc.b	$06
000B227E E6F6                       	smpsFMAlterVol      $F6
000B2280 06                         	dc.b	$06
000B2281 E60A                       	smpsFMAlterVol      $0A
000B2283 06                         	dc.b	$06
000B2284 E6F6                       	smpsFMAlterVol      $F6
000B2286 AFE7 6080 18B1 12          	dc.b	nBb3, smpsNoAttack, $60, nRst, $18, nC4, $12
000B228D E60A                       	smpsFMAlterVol      $0A
000B228F 06                         	dc.b	$06
000B2290 E6F6                       	smpsFMAlterVol      $F6
000B2292 0C                         	dc.b	$0C
000B2293 E60A                       	smpsFMAlterVol      $0A
000B2295 06                         	dc.b	$06
000B2296 E6F6                       	smpsFMAlterVol      $F6
000B2298 06                         	dc.b	$06
000B2299 E60A                       	smpsFMAlterVol      $0A
000B229B 06                         	dc.b	$06
000B229C E6F6                       	smpsFMAlterVol      $F6
000B229E 06                         	dc.b	$06
000B229F E60A                       	smpsFMAlterVol      $0A
000B22A1 06                         	dc.b	$06
000B22A2 E6F6                       	smpsFMAlterVol      $F6
000B22A4 B1E7 30B0 18B3             	dc.b	nC4, smpsNoAttack, $30, nB3, $18, nD4
000B22AA F701 02FF 9A               	smpsLoop            $01, $02, Tribute_Loop03
000B22AF B11E                       	dc.b	nC4, $1E
000B22B1 E60A                       	smpsFMAlterVol      $0A
000B22B3 06                         	dc.b	$06
000B22B4 E6F6                       	smpsFMAlterVol      $F6
000B22B6 B12A                       	dc.b	nC4, $2A
000B22B8 E60A                       	smpsFMAlterVol      $0A
000B22BA 06                         	dc.b	$06
000B22BB E6F6                       	smpsFMAlterVol      $F6
000B22BD B12A                       	dc.b	nC4, $2A
000B22BF E60A                       	smpsFMAlterVol      $0A
000B22C1 06                         	dc.b	$06
000B22C2 E6F6                       	smpsFMAlterVol      $F6
000B22C4 B12A                       	dc.b	nC4, $2A
000B22C6 E60A                       	smpsFMAlterVol      $0A
000B22C8 06                         	dc.b	$06
000B22C9 E6F6                       	smpsFMAlterVol      $F6
000B22CB B10C E74E                  	dc.b	nC4, $0C, smpsNoAttack, $4E
000B22CF E60A                       	smpsFMAlterVol      $0A
000B22D1 06                         	dc.b	$06
000B22D2 E6F6                       	smpsFMAlterVol      $F6
000B22D4 B00C E760                  	dc.b	nB3, $0C, smpsNoAttack, $60
000B22D8 E9F4                       	smpsAlterPitch      $F4
000B22DA F8FE C8                    	smpsCall            Tribute_Call03
000B22DD E90C                       	smpsAlterPitch      $0C
000B22DF F2                         	smpsStop
000B22E0                            
000B22E0                            Tribute_Call02:
000B22E0 B106 E712 B006             	dc.b	nC4, $06, smpsNoAttack, $12, nB3, $06
000B22E6 E60A                       	smpsFMAlterVol      $0A
000B22E8 0680                       	dc.b	$06, nRst
000B22EA E6F6                       	smpsFMAlterVol      $F6
000B22EC B3                         	dc.b	nD4
000B22ED E60A                       	smpsFMAlterVol      $0A
000B22EF 0680                       	dc.b	$06, nRst
000B22F1 E6F6                       	smpsFMAlterVol      $F6
000B22F3 B1B1                       	dc.b	nC4, nC4
000B22F5 E60A                       	smpsFMAlterVol      $0A
000B22F7 06                         	dc.b	$06
000B22F8 E6F6                       	smpsFMAlterVol      $F6
000B22FA AE                         	dc.b	nA3
000B22FB E60A                       	smpsFMAlterVol      $0A
000B22FD 06                         	dc.b	$06
000B22FE E6F6                       	smpsFMAlterVol      $F6
000B2300 B0                         	dc.b	nB3
000B2301 E3                         	smpsReturn
000B2302                            
000B2302                            ; FM4 Data
000B2302                            Tribute_FM4:
000B2302 EF01                       	smpsSetvoice        $01
000B2304 AC12 06                    	dc.b	nG3, $12, $06
000B2307 E60A                       	smpsFMAlterVol      $0A
000B2309 0680                       	dc.b	$06, nRst
000B230B E6F6                       	smpsFMAlterVol      $F6
000B230D AF                         	dc.b	nBb3
000B230E E60A                       	smpsFMAlterVol      $0A
000B2310 0680                       	dc.b	$06, nRst
000B2312 E6F6                       	smpsFMAlterVol      $F6
000B2314 ACAC                       	dc.b	nG3, nG3
000B2316 E60A                       	smpsFMAlterVol      $0A
000B2318 06                         	dc.b	$06
000B2319 E6F6                       	smpsFMAlterVol      $F6
000B231B AA                         	dc.b	nF3
000B231C E60A                       	smpsFMAlterVol      $0A
000B231E 06                         	dc.b	$06
000B231F E6F6                       	smpsFMAlterVol      $F6
000B2321 AC                         	dc.b	nG3
000B2322 EF02                       	smpsSetvoice        $02
000B2324 E918                       	smpsAlterPitch      $18
000B2326 E040                       	smpsPan             panRight, $00
000B2328 F800 00                    	smpsCall            Tribute_Call01
000B232B EF01                       	smpsSetvoice        $01
000B232D E9E8                       	smpsAlterPitch      $E8
000B232F E0C0                       	smpsPan             panCenter, $00
000B2331 F800 00                    	smpsCall            Tribute_Call01
000B2334 AC06 E712 18AE 1818        	dc.b	nG3, $06, smpsNoAttack, $12, $18, nA3, $18, $18
000B233C E60A                       	smpsFMAlterVol      $0A
000B233E 06                         	dc.b	$06
000B233F E6F6                       	smpsFMAlterVol      $F6
000B2341 AC12 06                    	dc.b	nG3, $12, $06
000B2344 E60A                       	smpsFMAlterVol      $0A
000B2346 0680                       	dc.b	$06, nRst
000B2348 E6F6                       	smpsFMAlterVol      $F6
000B234A AF                         	dc.b	nBb3
000B234B E60A                       	smpsFMAlterVol      $0A
000B234D 0680                       	dc.b	$06, nRst
000B234F E6F6                       	smpsFMAlterVol      $F6
000B2351 ACAC                       	dc.b	nG3, nG3
000B2353 E60A                       	smpsFMAlterVol      $0A
000B2355 06                         	dc.b	$06
000B2356 E6F6                       	smpsFMAlterVol      $F6
000B2358 AA                         	dc.b	nF3
000B2359 E60A                       	smpsFMAlterVol      $0A
000B235B 06                         	dc.b	$06
000B235C E6F6                       	smpsFMAlterVol      $F6
000B235E AC                         	dc.b	nG3
000B235F EF02                       	smpsSetvoice        $02
000B2361 E918                       	smpsAlterPitch      $18
000B2363 E040                       	smpsPan             panRight, $00
000B2365 F800 00                    	smpsCall            Tribute_Call01
000B2368 EF01                       	smpsSetvoice        $01
000B236A E9E8                       	smpsAlterPitch      $E8
000B236C E0C0                       	smpsPan             panCenter, $00
000B236E F800 00                    	smpsCall            Tribute_Call01
000B2371 AA06 E760 E748 8018        	dc.b	nF3, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B2379                            
000B2379                            Tribute_Loop02:
000B2379 8018 AC12                  	dc.b	nRst, $18, nG3, $12
000B237D E60A                       	smpsFMAlterVol      $0A
000B237F 06                         	dc.b	$06
000B2380 E6F6                       	smpsFMAlterVol      $F6
000B2382 0C                         	dc.b	$0C
000B2383 E60A                       	smpsFMAlterVol      $0A
000B2385 06                         	dc.b	$06
000B2386 E6F6                       	smpsFMAlterVol      $F6
000B2388 06                         	dc.b	$06
000B2389 E60A                       	smpsFMAlterVol      $0A
000B238B 06                         	dc.b	$06
000B238C E6F6                       	smpsFMAlterVol      $F6
000B238E 06                         	dc.b	$06
000B238F E60A                       	smpsFMAlterVol      $0A
000B2391 06                         	dc.b	$06
000B2392 E6F6                       	smpsFMAlterVol      $F6
000B2394 ACE7 60                    	dc.b	nG3, smpsNoAttack, $60
000B2397 F700 02FF DE               	smpsLoop            $00, $02, Tribute_Loop02
000B239C 8018 AC12                  	dc.b	nRst, $18, nG3, $12
000B23A0 E60A                       	smpsFMAlterVol      $0A
000B23A2 06                         	dc.b	$06
000B23A3 E6F6                       	smpsFMAlterVol      $F6
000B23A5 0C                         	dc.b	$0C
000B23A6 E60A                       	smpsFMAlterVol      $0A
000B23A8 06                         	dc.b	$06
000B23A9 E6F6                       	smpsFMAlterVol      $F6
000B23AB 06                         	dc.b	$06
000B23AC E60A                       	smpsFMAlterVol      $0A
000B23AE 06                         	dc.b	$06
000B23AF E6F6                       	smpsFMAlterVol      $F6
000B23B1 06                         	dc.b	$06
000B23B2 E60A                       	smpsFMAlterVol      $0A
000B23B4 06                         	dc.b	$06
000B23B5 E6F6                       	smpsFMAlterVol      $F6
000B23B7 AAE7 6080 18AC 12          	dc.b	nF3, smpsNoAttack, $60, nRst, $18, nG3, $12
000B23BE E60A                       	smpsFMAlterVol      $0A
000B23C0 06                         	dc.b	$06
000B23C1 E6F6                       	smpsFMAlterVol      $F6
000B23C3 0C                         	dc.b	$0C
000B23C4 E60A                       	smpsFMAlterVol      $0A
000B23C6 06                         	dc.b	$06
000B23C7 E6F6                       	smpsFMAlterVol      $F6
000B23C9 06                         	dc.b	$06
000B23CA E60A                       	smpsFMAlterVol      $0A
000B23CC 06                         	dc.b	$06
000B23CD E6F6                       	smpsFMAlterVol      $F6
000B23CF 06                         	dc.b	$06
000B23D0 E60A                       	smpsFMAlterVol      $0A
000B23D2 06                         	dc.b	$06
000B23D3 E6F6                       	smpsFMAlterVol      $F6
000B23D5 AEE7 30AD 18B0             	dc.b	nA3, smpsNoAttack, $30, nAb3, $18, nB3
000B23DB F701 02FF 9A               	smpsLoop            $01, $02, Tribute_Loop02
000B23E0 AC1E                       	dc.b	nG3, $1E
000B23E2 E60A                       	smpsFMAlterVol      $0A
000B23E4 06                         	dc.b	$06
000B23E5 E6F6                       	smpsFMAlterVol      $F6
000B23E7 AD2A                       	dc.b	nAb3, $2A
000B23E9 E60A                       	smpsFMAlterVol      $0A
000B23EB 06                         	dc.b	$06
000B23EC E6F6                       	smpsFMAlterVol      $F6
000B23EE AC2A                       	dc.b	nG3, $2A
000B23F0 E60A                       	smpsFMAlterVol      $0A
000B23F2 06                         	dc.b	$06
000B23F3 E6F6                       	smpsFMAlterVol      $F6
000B23F5 AE2A                       	dc.b	nA3, $2A
000B23F7 E60A                       	smpsFMAlterVol      $0A
000B23F9 06                         	dc.b	$06
000B23FA E6F6                       	smpsFMAlterVol      $F6
000B23FC AE0C E74E                  	dc.b	nA3, $0C, smpsNoAttack, $4E
000B2400 E60A                       	smpsFMAlterVol      $0A
000B2402 06                         	dc.b	$06
000B2403 E6F6                       	smpsFMAlterVol      $F6
000B2405 AC0C E760 8060             	dc.b	nG3, $0C, smpsNoAttack, $60, nRst, $60
000B240B F2                         	smpsStop
000B240C                            
000B240C                            Tribute_Call01:
000B240C AC06 E712 AC06             	dc.b	nG3, $06, smpsNoAttack, $12, nG3, $06
000B2412 E60A                       	smpsFMAlterVol      $0A
000B2414 0680                       	dc.b	$06, nRst
000B2416 E6F6                       	smpsFMAlterVol      $F6
000B2418 AF                         	dc.b	nBb3
000B2419 E60A                       	smpsFMAlterVol      $0A
000B241B 0680                       	dc.b	$06, nRst
000B241D E6F6                       	smpsFMAlterVol      $F6
000B241F ACAC                       	dc.b	nG3, nG3
000B2421 E60A                       	smpsFMAlterVol      $0A
000B2423 06                         	dc.b	$06
000B2424 E6F6                       	smpsFMAlterVol      $F6
000B2426 AA                         	dc.b	nF3
000B2427 E60A                       	smpsFMAlterVol      $0A
000B2429 06                         	dc.b	$06
000B242A E6F6                       	smpsFMAlterVol      $F6
000B242C AC                         	dc.b	nG3
000B242D E3                         	smpsReturn
000B242E                            
000B242E                            ; FM5 Data
000B242E                            Tribute_FM5:
000B242E EF02                       	smpsSetvoice        $02
000B2430                            
000B2430                            Tribute_Jump00:
000B2430 8060 8080 800C B406 B6B8+  	dc.b	nRst, $60, nRst, nRst, nRst, $0C, nEb4, $06, nF4, nG4, nD5, $12
000B243C 800C B606 B8BA C412 8060+  	dc.b	nRst, $0C, nF4, $06, nG4, nA4, nG5, $12, nRst, $60, nRst, $60
000B2448 805A D706 CECD C9C4 CECD+  	dc.b	nRst, $5A, nD7, $06, nF6, nE6, nC6, nG5, nF6, nE6, nC6, nG5
000B2454 C2C1 BDB8 B6B5 B1AC AA48+  	dc.b	nF5, nE5, nC5, nG4, nF4, nE4, nC4, nG3, nF3, $48, nRst, $18
000B2460                            
000B2460                            Tribute_Loop01:
000B2460 8060 800C B106 B3B8 BDBF+  	dc.b	nRst, $60, nRst, $0C, nC4, $06, nD4, nG4, nC5, nD5, nG5, nC5
000B246C BFC4 BFC4 C9C4 BF80 6080+  	dc.b	nD5, nG5, nD5, nG5, nC6, nG5, nD5, nRst, $60, nRst, $0C, nC5
000B2478 06C4 BDBF C4C6 BDB8 BDBF+  	dc.b	$06, nG5, nC5, nD5, nG5, nA5, nC5, nG4, nC5, nD5, nG5, nC5
000B2484 BFC4 8060 800C B806 BABD+  	dc.b	nD5, nG5, nRst, $60, nRst, $0C, nG4, $06, nA4, nC5, nA4, nC5
000B2490 BFC4 C2BD BFB8 B3BD BF80+  	dc.b	nD5, nG5, nF5, nC5, nD5, nG4, nD4, nC5, nD5, nRst, $60, nG5
000B249C 06C2 BDBA C4C2 BDBA C4C2+  	dc.b	$06, nF5, nC5, nA4, nG5, nF5, nC5, nA4, nG5, nF5, nD5, nB4
000B24A8 B9BA BCBF                  	dc.b	nAb4, nA4, nB4, nD5
000B24AC F700 02FF B0               	smpsLoop            $00, $02, Tribute_Loop01
000B24B1 800C B806 BDBF C1C2 0C80+  	dc.b	nRst, $0C, nG4, $06, nC5, nD5, nE5, nF5, $0C, nRst, $30, nRst
000B24BD 0CB8 06BD BFC1 C60C 8030+  	dc.b	$0C, nG4, $06, nC5, nD5, nE5, nA5, $0C, nRst, $30, nRst, $0C
000B24C9 C6C4 C2C1 18BD 0CBF E70C+  	dc.b	nA5, nG5, nF5, nE5, $18, nC5, $0C, nD5, smpsNoAttack, $0C, nB4, nC5
000B24D5 BFB3 06B8 BABF B8BA BFC4   	dc.b	nD5, nD4, $06, nG4, nA4, nD5, nG4, nA4, nD5, nG5
000B24DF E918                       	smpsAlterPitch      $18
000B24E1 F8FB 98                    	smpsCall            Tribute_Call00
000B24E4 E9E8                       	smpsAlterPitch      $E8
000B24E6 F2                         	smpsStop
000B24E7                            
000B24E7                            ; FM6 Data
000B24E7                            Tribute_FM6:
000B24E7 EF02                       	smpsSetvoice        $02
000B24E9 E040                       	smpsPan             panRight, $00
000B24F0 E104                       	smpsAlterNote       $04
000B24F2 8006                       	dc.b	nRst, $06
000B24F4 F6FF 3A                    	smpsJump            Tribute_Jump00
000B24F7                            
000B24F7                            ; PSG1 Data
000B24F7                            Tribute_PSG1:
000B24F7 F505                       	smpsPSGvoice        sTone_09
000B24FE A760 E760 E760 E760 A760+  	dc.b	nD3, $60, smpsNoAttack, $60, smpsNoAttack, $60, smpsNoAttack, $60, nD3, $60, smpsNoAttack, $60
000B250A E75A AC06 E760 E748 8018   	dc.b	smpsNoAttack, $5A, nG3, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B2519 ECFD                       	smpsPSGAlterVol     $FD
000B251B                            
000B251B                            Tribute_Jump01:
000B251B F505                       	smpsPSGvoice        sTone_09
000B251D F800 00                    	smpsCall            Tribute_Call07
000B2520 E706 AAAC AEB0 02B1 B0AC+  	dc.b	smpsNoAttack, $06, nF3, nG3, nA3, nB3, $02, nC4, nB3, nG3, $06, nA3
000B252C B0B1 AEB0 B1B3 B5B6 BA     	dc.b	nB3, nC4, nA3, nB3, nC4, nD4, nE4, nF4, nA4
000B2535 F800 00                    	smpsCall            Tribute_Call07
000B2538 E70C AEB0 B106 80B3 0CB5+  	dc.b	smpsNoAttack, $0C, nA3, nB3, nC4, $06, nRst, nD4, $0C, nE4, $06, nRst
000B2544 B60C B306 80B8 1E80 06B9+  	dc.b	nF4, $0C, nD4, $06, nRst, nG4, $1E, nRst, $06, nAb4, $18, nG4
000B2550 0680 B680 B50C E70C B3B1+  	dc.b	$06, nRst, nF4, nRst, nE4, $0C, smpsNoAttack, $0C, nD4, nC4, $06, nRst
000B255C B318 AE0C B006 80B1 0CE7+  	dc.b	nD4, $18, nA3, $0C, nB3, $06, nRst, nC4, $0C, smpsNoAttack, $3C, nB3
000B2568 0CB1 0680 B30C E73C B80C+  	dc.b	$0C, nC4, $06, nRst, nD4, $0C, smpsNoAttack, $3C, nG4, $0C, nD5, nG5
000B2574 E918                       	smpsAlterPitch      $18
000B2576 F8FB 03                    	smpsCall            Tribute_Call00
000B2579 E9E8                       	smpsAlterPitch      $E8
000B257B F2                         	smpsStop
000B257C                            
000B257C                            Tribute_Call07:
000B257C B703 B833 8006 BC80 BDBF+  	dc.b	nFs4, $03, nG4, $33, nRst, $06, nB4, nRst, nC5, nD5, nRst, nFs4
000B2588 03B8 03E7 3680 06B5 80B3+  	dc.b	$03, nG4, $03, smpsNoAttack, $36, nRst, $06, nE4, nRst, nD4, nC4, nRst
000B2594 B702 B804 E736 8006 BC80+  	dc.b	nFs4, $02, nG4, $04, smpsNoAttack, $36, nRst, $06, nB4, nRst, nC5, nD5
000B25A0 80B8 E712 8006 B512 8006+  	dc.b	nRst, nG4, smpsNoAttack, $12, nRst, $06, nE4, $12, nRst, $06, nD4, $12
000B25AC 8006 B50C 8006 B1E7 3680+  	dc.b	nRst, $06, nE4, $0C, nRst, $06, nC4, smpsNoAttack, $36, nRst, $06, nC5
000B25B8 80BC BD80 B1E7 3680 06BD+  	dc.b	nRst, nB4, nC5, nRst, nC4, smpsNoAttack, $36, nRst, $06, nC5, nRst, nB4
000B25C4 BD80 B1E7 3CB5 0CB3 B1     	dc.b	nC5, nRst, nC4, smpsNoAttack, $3C, nE4, $0C, nD4, nC4
000B25CD E3                         	smpsReturn
000B25CE                            
000B25CE                            ; PSG2 Data
000B25CE                            Tribute_PSG2:
000B25CE F505                       	smpsPSGvoice        sTone_09
000B25D5 9B60 E760 E760 E760 9B60+  	dc.b	nD2, $60, smpsNoAttack, $60, smpsNoAttack, $60, smpsNoAttack, $60, nD2, $60, smpsNoAttack, $60
000B25E1 E75A A006 E760 E748 8018   	dc.b	smpsNoAttack, $5A, nG2, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B25EB ECFF                       	smpsPSGAlterVol     $FF
000B25F2 8006                       	dc.b	nRst, $06
000B25F4 F6FF 25                    	smpsJump            Tribute_Jump01
000B25F7                            
000B25F7                            ; PSG3 Data
000B25F7                            Tribute_PSG3:
000B25F7 F3E7                       	smpsPSGform         $E7
000B25F9 F502                       	smpsPSGvoice        sTone_02
000B25FB AF18 1818 0606 06          	dc.b	(nMaxPSG2-$23)&$FF, $18, $18, $18, $06, $06, $06
000B2602 F501                       	smpsPSGvoice        sTone_05
000B2604 0680 18                    	dc.b	$06, nRst, $18
000B2607 F502                       	smpsPSGvoice        sTone_02
000B2609 AF18 1806                  	dc.b	(nMaxPSG2-$23)&$FF, $18, $18, $06
000B260D F501                       	smpsPSGvoice        sTone_05
000B260F 06                         	dc.b	$06
000B2610 F502                       	smpsPSGvoice        sTone_02
000B2612 06                         	dc.b	$06
000B2613 F501                       	smpsPSGvoice        sTone_05
000B2615 06                         	dc.b	$06
000B2616 F502                       	smpsPSGvoice        sTone_02
000B2618 8018 AF18 1806 0606        	dc.b	nRst, $18, (nMaxPSG2-$23)&$FF, $18, $18, $06, $06, $06
000B2620 F501                       	smpsPSGvoice        sTone_05
000B2622 0680 12AF 06               	dc.b	$06, nRst, $12, (nMaxPSG2-$23)&$FF, $06
000B2627 F502                       	smpsPSGvoice        sTone_02
000B2629 06                         	dc.b	$06
000B262A F501                       	smpsPSGvoice        sTone_05
000B262C 06                         	dc.b	$06
000B262D F502                       	smpsPSGvoice        sTone_02
000B262F 06                         	dc.b	$06
000B2630 F501                       	smpsPSGvoice        sTone_05
000B2632 06                         	dc.b	$06
000B2633 F502                       	smpsPSGvoice        sTone_02
000B2635 800C AF06                  	dc.b	nRst, $0C, (nMaxPSG2-$23)&$FF, $06
000B2639 F501                       	smpsPSGvoice        sTone_05
000B263B 06                         	dc.b	$06
000B263C F502                       	smpsPSGvoice        sTone_02
000B263E 06                         	dc.b	$06
000B263F F501                       	smpsPSGvoice        sTone_05
000B2641 06                         	dc.b	$06
000B2642 F502                       	smpsPSGvoice        sTone_02
000B2644 0C                         	dc.b	$0C
000B2645 F502                       	smpsPSGvoice        sTone_02
000B2647 AF18 1818 0606 06          	dc.b	(nMaxPSG2-$23)&$FF, $18, $18, $18, $06, $06, $06
000B264E F501                       	smpsPSGvoice        sTone_05
000B2650 06                         	dc.b	$06
000B2651 F502                       	smpsPSGvoice        sTone_02
000B2653 8018 AF18 1806             	dc.b	nRst, $18, (nMaxPSG2-$23)&$FF, $18, $18, $06
000B2659 F501                       	smpsPSGvoice        sTone_05
000B265B 06                         	dc.b	$06
000B265C F502                       	smpsPSGvoice        sTone_02
000B265E 06                         	dc.b	$06
000B265F F501                       	smpsPSGvoice        sTone_05
000B2661 06                         	dc.b	$06
000B2662 F502                       	smpsPSGvoice        sTone_02
000B2664 8018 AF18 1806 0606        	dc.b	nRst, $18, (nMaxPSG2-$23)&$FF, $18, $18, $06, $06, $06
000B266C F501                       	smpsPSGvoice        sTone_05
000B266E 0680 6080                  	dc.b	$06, nRst, $60, nRst
000B2672                            
000B2672                            Tribute_Loop06:
000B2672 F800 00                    	smpsCall            Tribute_Call06
000B2675 800C                       	dc.b	nRst, $0C
000B2677 F502                       	smpsPSGvoice        sTone_02
000B2679 AF0C 0C0C 0C0C 8018        	dc.b	(nMaxPSG2-$23)&$FF, $0C, $0C, $0C, $0C, $0C, nRst, $18
000B2681 F800 00                    	smpsCall            Tribute_Call06
000B2684 800C                       	dc.b	nRst, $0C
000B2686 F502                       	smpsPSGvoice        sTone_02
000B2688 AF0C 0C0C 8030             	dc.b	(nMaxPSG2-$23)&$FF, $0C, $0C, $0C, nRst, $30
000B268E F700 02FF E0               	smpsLoop            $00, $02, Tribute_Loop06
000B2693 E718                       	dc.b	smpsNoAttack, $18
000B2695 F502                       	smpsPSGvoice        sTone_02
000B2697 AF80 AF80 AF80 AF80 AF80+  	dc.b	(nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst
000B26A3 AF                         	dc.b	(nMaxPSG2-$23)&$FF
000B26A4 F2                         	smpsStop
000B26A5                            
000B26A5                            Tribute_Call06:
000B26A5 F502                       	smpsPSGvoice        sTone_02
000B26A7 0C0C 0C0C 0C06 0606        	dc.b	$0C, $0C, $0C, $0C, $0C, $06, $06, $06
000B26AF F501                       	smpsPSGvoice        sTone_05
000B26B1 06                         	dc.b	$06
000B26B2 F502                       	smpsPSGvoice        sTone_02
000B26B4 06                         	dc.b	$06
000B26B5 F501                       	smpsPSGvoice        sTone_05
000B26B7 0680 0C                    	dc.b	$06, nRst, $0C
000B26BA F502                       	smpsPSGvoice        sTone_02
000B26BC AF0C 0C0C 0C0C 0C06 06     	dc.b	(nMaxPSG2-$23)&$FF, $0C, $0C, $0C, $0C, $0C, $0C, $06, $06
000B26C5 F502                       	smpsPSGvoice        sTone_02
000B26C7 0C0C 0C0C 0C06 0606        	dc.b	$0C, $0C, $0C, $0C, $0C, $06, $06, $06
000B26CF F501                       	smpsPSGvoice        sTone_05
000B26D1 06                         	dc.b	$06
000B26D2 F502                       	smpsPSGvoice        sTone_02
000B26D4 06                         	dc.b	$06
000B26D5 F501                       	smpsPSGvoice        sTone_05
000B26D7 06                         	dc.b	$06
000B26D8 E3                         	smpsReturn
000B26D9                            
000B26D9                            ; DAC Data
000B26D9                            Tribute_DAC:
000B26D9 8148 8218 8148 8206 8906   	dc.b	dKick, $48, dSnare, $18, dKick, $48, dSnare, $06, dMidTimpani, $06
000B26E3 E690                       	smpsFMAlterVol      $90
000B26E5 8A0C                       	dc.b	dLowTimpani, $0C
000B26E7 E670                       	smpsFMAlterVol      $70
000B26E9 8148 8218 8130 8206        	dc.b	dKick, $48, dSnare, $18, dKick, $30, dSnare, $06
000B26F1 E6F9                       	smpsFMAlterVol      $F9
000B26F3 88                         	dc.b	dHiTimpani
000B26F4 E607                       	smpsFMAlterVol      $07
000B26F6 8982                       	dc.b	dMidTimpani, dSnare
000B26F8 E690                       	smpsFMAlterVol      $90
000B26FA 8A                         	dc.b	dLowTimpani
000B26FB E670                       	smpsFMAlterVol      $70
000B26FD 8282 8281 4882 1881 4882+  	dc.b	dSnare, dSnare, dSnare, dKick, $48, dSnare, $18, dKick, $48, dSnare, $06, dMidTimpani
000B2709 06                         	dc.b	$06
000B270A E690                       	smpsFMAlterVol      $90
000B270C 8A0C                       	dc.b	dLowTimpani, $0C
000B270E E670                       	smpsFMAlterVol      $70
000B2710 8148 8218 8160 8148 8218   	dc.b	dKick, $48, dSnare, $18, dKick, $60, dKick, $48, dSnare, $18
000B271A                            
000B271A                            Tribute_Loop00:
000B271A 8118 8281 8281 8281 8281+  	dc.b	dKick, $18, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick
000B2726 8281 8281 8206             	dc.b	dSnare, dKick, dSnare, dKick, dSnare, $06
000B272C E6F9                       	smpsFMAlterVol      $F9
000B272E 88                         	dc.b	dHiTimpani
000B272F E607                       	smpsFMAlterVol      $07
000B2731 8982 8118 8281 8281 8281+  	dc.b	dMidTimpani, dSnare, dKick, $18, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick
000B273D 8281 8281 8281 06          	dc.b	dSnare, dKick, dSnare, dKick, dSnare, dKick, $06
000B2744 E607                       	smpsFMAlterVol      $07
000B2746 88                         	dc.b	dHiTimpani
000B2747 E6F9                       	smpsFMAlterVol      $F9
000B2749 8982 8182 8282             	dc.b	dMidTimpani, dSnare, dKick, dSnare, dSnare, dSnare
000B274F F700 02FF C7               	smpsLoop            $00, $02, Tribute_Loop00
000B2754 813C 820C                  	dc.b	dKick, $3C, dSnare, $0C
000B2758 E6F9                       	smpsFMAlterVol      $F9
000B275A 8804                       	dc.b	dHiTimpani, $04
000B275C E607                       	smpsFMAlterVol      $07
000B275E 89                         	dc.b	dMidTimpani
000B275F E690                       	smpsFMAlterVol      $90
000B2761 8A                         	dc.b	dLowTimpani
000B2762 E670                       	smpsFMAlterVol      $70
000B2764 810C 813C 8206 8282 8281+  	dc.b	dKick, $0C, dKick, $3C, dSnare, $06, dSnare, dSnare, dSnare, dKick, $0C, dKick
000B2770 6081 36                    	dc.b	$60, dKick, $36
000B2773 E6F9                       	smpsFMAlterVol      $F9
000B2775 8806                       	dc.b	dHiTimpani, $06
000B2777 E607                       	smpsFMAlterVol      $07
000B2779 89                         	dc.b	dMidTimpani
000B277A E690                       	smpsFMAlterVol      $90
000B277C 8A                         	dc.b	dLowTimpani
000B277D E670                       	smpsFMAlterVol      $70
000B277F 8282 8282 8182 8282 8282+  	dc.b	dSnare, dSnare, dSnare, dSnare, dKick, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dKick
000B278B 8182                       	dc.b	dKick, dSnare
000B278D E6F9                       	smpsFMAlterVol      $F9
000B278F 88                         	dc.b	dHiTimpani
000B2790 E607                       	smpsFMAlterVol      $07
000B2792 8982                       	dc.b	dMidTimpani, dSnare
000B2794 E690                       	smpsFMAlterVol      $90
000B2796 8A                         	dc.b	dLowTimpani
000B2797 E670                       	smpsFMAlterVol      $70
000B2799 8281 8182 8289 82          	dc.b	dSnare, dKick, dKick, dSnare, dSnare, dMidTimpani, dSnare
000B27A0 E690                       	smpsFMAlterVol      $90
000B27A2 8A                         	dc.b	dLowTimpani
000B27A3 E670                       	smpsFMAlterVol      $70
000B27A5 8281                       	dc.b	dSnare, dKick
000B27A7 F2                         	smpsStop
000B27A8                            
000B27A8                            Tribute_Voices:
000B27A8                            ;	Voice $00
000B27A8                            ;	$3B
000B27A8                            ;	$53, $31, $02, $03, 	$DF, $9F, $5F, $9F, 	$17, $08, $0E, $07
000B27A8                            ;	$0F, $0E, $0D, $02, 	$5F, $7F, $3F, $5F, 	$0C, $16, $1F, $80
000B27A8                            	smpsVcAlgorithm     $03
000B27A8                            	smpsVcFeedback      $07
000B27A8                            	smpsVcUnusedBits    $00
000B27A8                            	smpsVcDetune        $00, $00, $03, $05
000B27A8                            	smpsVcCoarseFreq    $03, $02, $01, $03
000B27A8                            	smpsVcRateScale     $02, $01, $02, $03
000B27A8                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B27A8                            	smpsVcAmpMod        $00, $00, $00, $00
000B27A8                            	smpsVcDecayRate1    $07, $0E, $08, $17
000B27A8                            	smpsVcDecayRate2    $02, $0D, $0E, $0F
000B27A8                            	smpsVcDecayLevel    $05, $03, $07, $05
000B27A8                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B27C1                            
000B27C1                            ;	Voice $01
000B27C1                            ;	$3D
000B27C1                            ;	$52, $02, $04, $01, 	$94, $19, $19, $19, 	$11, $0D, $0D, $0D
000B27C1                            ;	$07, $04, $04, $04, 	$35, $1A, $1A, $1A, 	$0D, $80, $80, $80
000B27C1                            	smpsVcAlgorithm     $05
000B27C1                            	smpsVcFeedback      $07
000B27C1                            	smpsVcUnusedBits    $00
000B27C1                            	smpsVcDetune        $00, $00, $00, $05
000B27C1                            	smpsVcCoarseFreq    $01, $04, $02, $02
000B27C1                            	smpsVcRateScale     $00, $00, $00, $02
000B27C1                            	smpsVcAttackRate    $19, $19, $19, $14
000B27C1                            	smpsVcAmpMod        $00, $00, $00, $00
000B27C1                            	smpsVcDecayRate1    $0D, $0D, $0D, $11
000B27C1                            	smpsVcDecayRate2    $04, $04, $04, $07
000B27C1                            	smpsVcDecayLevel    $01, $01, $01, $03
000B27C1                            	smpsVcReleaseRate   $0A, $0A, $0A, $05
000B27DA                            
000B27DA                            ;	Voice $02
000B27DA                            ;	$1F
000B27DA                            ;	$26, $32, $07, $11, 	$9F, $9F, $9F, $9F, 	$06, $07, $09, $07
000B27DA                            ;	$0D, $0F, $0D, $11, 	$9C, $9C, $9C, $9C, 	$80, $80, $80, $80
000B27DA                            	smpsVcAlgorithm     $07
000B27DA                            	smpsVcFeedback      $03
000B27DA                            	smpsVcUnusedBits    $00
000B27DA                            	smpsVcDetune        $01, $00, $03, $02
000B27DA                            	smpsVcCoarseFreq    $01, $07, $02, $06
000B27DA                            	smpsVcRateScale     $02, $02, $02, $02
000B27DA                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B27DA                            	smpsVcAmpMod        $00, $00, $00, $00
000B27DA                            	smpsVcDecayRate1    $07, $09, $07, $06
000B27DA                            	smpsVcDecayRate2    $11, $0D, $0F, $0D
000B27DA                            	smpsVcDecayLevel    $09, $09, $09, $09
000B27DA                            	smpsVcReleaseRate   $0C, $0C, $0C, $0C
000B27F3                            
000B27F3                            
000B27F4 00                         		even		
000B27F4                            ; ---------------------------------------------------------------------------
000B27F4                            ; Sound	effect pointers
000B27F4                            ; ---------------------------------------------------------------------------
000B27F4                            SoundIndex:
000B27F4 0000 0000                  ptr_sndA0:	dc.l SoundA0
000B27F8 0000 0000                  ptr_sndA1:	dc.l SoundA1
000B27FC 0000 0000                  ptr_sndA2:	dc.l SoundA2
000B2800 0000 0000                  ptr_sndA3:	dc.l SoundA3
000B2804 0000 0000                  ptr_sndA4:	dc.l SoundA4
000B2808 0000 0000                  ptr_sndA5:	dc.l SoundA5
000B280C 0000 0000                  ptr_sndA6:	dc.l SoundA6
000B2810 0000 0000                  ptr_sndA7:	dc.l SoundA7
000B2814 0000 0000                  ptr_sndA8:	dc.l SoundA8
000B2818 0000 0000                  ptr_sndA9:	dc.l SoundA9
000B281C 0000 0000                  ptr_sndAA:	dc.l SoundAA
000B2820 0000 0000                  ptr_FireShield:	dc.l SoundAB
000B2824 0000 0000                  ptr_sndAC:	dc.l SoundAC
000B2828 0000 0000                  ptr_sndAD:	dc.l SoundAD
000B282C 0000 0000                  ptr_sndAE:	dc.l SoundAE
000B2830 0000 0000                  ptr_sndAF:	dc.l SoundAF
000B2834 0000 0000                  ptr_sndB0:	dc.l SoundB0
000B2838 0000 0000                  ptr_sndB1:	dc.l SoundB1
000B283C 0000 0000                  ptr_sndB2:	dc.l SoundB2
000B2840 0000 0000                  ptr_sndB3:	dc.l SoundB3
000B2844 0000 0000                  ptr_sndB4:	dc.l SoundB4
000B2848 0000 0000                  ptr_sndB5:	dc.l SoundB5
000B284C 0000 0000                  ptr_sndB6:	dc.l SoundB6
000B2850 0000 0000                  ptr_sndB7:	dc.l SoundB7
000B2854 0000 0000                  ptr_sndB8:	dc.l SoundB8
000B2858 0000 0000                  ptr_sndB9:	dc.l SoundB9
000B285C 0000 0000                  ptr_sndBA:	dc.l SoundBA
000B2860 0000 0000                  ptr_sndBB:	dc.l SoundBB
000B2864 0000 0000                  ptr_sndBC:	dc.l SoundBC
000B2868 0000 0000                  ptr_sndBD:	dc.l SoundBD
000B286C 0000 0000                  ptr_sndBE:	dc.l SoundBE
000B2870 0000 0000                  ptr_sndBF:	dc.l SoundBF
000B2874 0000 0000                  ptr_sndC0:	dc.l SoundC0
000B2878 0000 0000                  ptr_sndC1:	dc.l SoundC1
000B287C 0000 0000                  ptr_sndC2:	dc.l SoundC2
000B2880 0000 0000                  ptr_sndC3:	dc.l SoundC3
000B2884 0000 0000                  ptr_sndC4:	dc.l SoundC4
000B2888 0000 0000                  ptr_sndC5:	dc.l SoundC5
000B288C 0000 0000                  ptr_sndC6:	dc.l SoundC6
000B2890 0000 0000                  ptr_sndC7:	dc.l SoundC7
000B2894 0000 0000                  ptr_sndC8:	dc.l SoundC8
000B2898 0000 0000                  ptr_sndC9:	dc.l SoundC9
000B289C 0000 0000                  ptr_sndCA:	dc.l SoundCA
000B28A0 0000 0000                  ptr_sndCB:	dc.l SoundCB
000B28A4 0000 0000                  ptr_sndCC:	dc.l SoundCC
000B28A8 0000 0000                  ptr_sndCD:	dc.l SoundCD
000B28AC 0000 0000                  ptr_sndCE:	dc.l SoundCE
000B28B0 0000 0000                  ptr_sndCF:	dc.l SoundCF
000B28B4                            ptr_sndend
000B28B4                            ; ---------------------------------------------------------------------------
000B28B4                            ; Special sound effect pointers
000B28B4                            ; ---------------------------------------------------------------------------
000B28B4                            SpecSoundIndex:
000B28B4 0000 0000                  ptr_sndD0:	dc.l SoundD0
000B28B8 0000 0000                  ptr_sndD1:	dc.l SoundD1
000B28BC 0000 0000                  ptr_sndD2:	dc.l SoundD2
000B28C0 0000 0000                  ptr_sndD3:	dc.l SoundD3
000B28C4 0000 0000                  ptr_sndD4:	dc.l SoundD4
000B28C8 0000 0000                  ptr_sndD5:	dc.l SoundD5
000B28CC 0000 0000                  ptr_sndD6:	dc.l SoundD6
000B28D0                            ptr_specend
000B28D0                            SoundA0:	include	"sound/sfx/Jump.asm"
000B28D0                            SndA0_Jump_Header:
000B28D0                            	smpsHeaderStartSong 1
000B28D2 01                         	smpsHeaderTempoSFX  $01
000B28D3 01                         	smpsHeaderChanSFX   $01
000B28D4                            
000B28DA                            
000B28DA                            ; PSG2 Data
000B28DA                            SndA0_Jump_PSG2:
000B28DA F500                       	smpsPSGvoice        $00
000B28DC 9E05                       	dc.b	nF2, $05
000B28E3 A315                       	dc.b	nBb2, $15
000B28E5 F2                         	smpsStop
000B28E6                            
000B28E6                            ; Song seems to not use any FM voices
000B28E6                            SndA0_Jump_Voices:
000B28E6                            SndA0_Jump_Voices:
000B28E6                            		even
000B28E6                            SoundA1:	incbin	"sound/sfx/SndA1 - Lamppost.bin"
000B2910                            		even
000B2910                            SoundA2:	include	"sound/sfx/DrowningSound.asm"
000B2910                            SndDF_Header:
000B2910                            	smpsHeaderStartSong 3
000B2912 01                         	smpsHeaderTempoSFX  $01
000B2913 01                         	smpsHeaderChanSFX   $01
000B2914                            
000B291A                            
000B291A                            ; FM5 Data
000B291A                            SndDF_FM5:
000B291A EF00                       	smpsSetvoice        $00
000B291C                            
000B291C                            SndDF_Loop00:
000B291C F800 00                    	smpsCall            SndDF_Call00
000B291F E905                       	smpsAlterPitch $05
000B2921 E608                       	smpsFMAlterVol      $08
000B2923 F701 03FF F5               	smpsLoop            $01, $03, SndDF_Loop00
000B2928 E9EC                       	smpsAlterPitch $EC
000B292A E6E0                       	smpsFMAlterVol      $E0
000B292C F2                         	smpsStop
000B292D                            
000B292D                            SndDF_Call00:
000B292D 9902                       	dc.b	nC2, $02
000B292F E901                       	smpsAlterPitch $01
000B2931 F700 0AFF F8               	smpsLoop            $00, $0A, SndDF_Call00
000B2936 E9F6                       	smpsAlterPitch $F6
000B2938 E3                         	smpsReturn
000B2939                            
000B2939                            SndDF_Voices:
000B2939                            ;	Voice $00
000B2939                            ;	$07
000B2939                            ;	$04, $04, $05, $04, 	$1F, $1F, $15, $15, 	$00, $00, $00, $00
000B2939                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$7F, $7F, $80, $80
000B2939                            	smpsVcAlgorithm     $07
000B2939                            	smpsVcFeedback      $00
000B2939                            	smpsVcUnusedBits    $00
000B2939                            	smpsVcDetune        $00, $00, $00, $00
000B2939                            	smpsVcCoarseFreq    $04, $05, $04, $04
000B2939                            	smpsVcRateScale     $00, $00, $00, $00
000B2939                            	smpsVcAttackRate    $15, $15, $1F, $1F
000B2939                            	smpsVcAmpMod        $00, $00, $00, $00
000B2939                            	smpsVcDecayRate1    $00, $00, $00, $00
000B2939                            	smpsVcDecayRate2    $00, $00, $00, $00
000B2939                            	smpsVcDecayLevel    $01, $01, $01, $01
000B2939                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2952                            		even
000B2952                            SoundA3:	incbin	"sound/sfx/SndA3 - Death.bin"
000B2984                            		even
000B2984                            SoundA4:	incbin	"sound/sfx/SndA4 - Skid.bin"
000B29C8 00                         		even
000B29C8                            SoundA5:	include	"sound/sfx/LargeRingBox.asm"
000B29C8                            SndD2_Header:
000B29C8                            	smpsHeaderStartSong 3
000B29CA 01                         	smpsHeaderTempoSFX  $01
000B29CB 01                         	smpsHeaderChanSFX   $01
000B29CC                            
000B29D2                            
000B29D2                            ; FM4 Data
000B29D2                            SndD2_FM4:
000B29D2 EF00                       	smpsSetvoice        $00
000B29D9 C645                       	dc.b	nA5, $45
000B29DB F2                         	smpsStop
000B29DC                            
000B29DC                            SndD2_Voices:
000B29DC                            ;	Voice $00
000B29DC                            ;	$04
000B29DC                            ;	$27, $02, $07, $47, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
000B29DC                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$1F, $80, $23, $80
000B29DC                            	smpsVcAlgorithm     $04
000B29DC                            	smpsVcFeedback      $00
000B29DC                            	smpsVcUnusedBits    $00
000B29DC                            	smpsVcDetune        $04, $00, $00, $02
000B29DC                            	smpsVcCoarseFreq    $07, $07, $02, $07
000B29DC                            	smpsVcRateScale     $00, $00, $00, $00
000B29DC                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B29DC                            	smpsVcAmpMod        $00, $00, $00, $00
000B29DC                            	smpsVcDecayRate1    $0D, $07, $0A, $07
000B29DC                            	smpsVcDecayRate2    $0B, $00, $0B, $00
000B29DC                            	smpsVcDecayLevel    $00, $01, $00, $01
000B29DC                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B29F6 00                         		even
000B29F6                            SoundA6:	incbin	"sound/sfx/SndA6 - Hit Spikes.bin"
000B2A26                            		even
000B2A26                            SoundA7:	incbin	"sound/sfx/SndA7 - Push Block.bin"
000B2A56                            		even
000B2A56                            SoundA8:	incbin	"sound/sfx/SndA8 - SS Goal.bin"
000B2A8A                            		even
000B2A8A                            SoundA9:	incbin	"sound/sfx/SndA9 - SS Item.bin"
000B2A9C                            		even
000B2A9C                            SoundAA:	include	"sound/sfx/Splash.asm"
000B2A9C                            SndA2_Header:
000B2A9C                            	smpsHeaderStartSong 3
000B2A9E 01                         	smpsHeaderTempoSFX  $01
000B2A9F 02                         	smpsHeaderChanSFX   $02
000B2AA0                            
000B2AAC                            
000B2AAC                            ; FM3 Data
000B2AAC                            SndA2_FM3:
000B2AAC EF00                       	smpsSetvoice        $00
000B2AB3 8106                       	dc.b	nC0, $06
000B2AB5                            
000B2AB5                            SndA2_Loop00:
000B2AB5 810E                       	dc.b	nC0, $0E
000B2AB7 E60E                       	smpsAlterVol      $0E
000B2AB9 F700 04FF F8               	smpsLoop            $00, $04, SndA2_Loop00
000B2ABE F2                         	smpsStop
000B2ABF                            
000B2ABF                            ; FM4 Data
000B2ABF                            SndA2_FM4:
000B2ABF EF01                       	smpsSetvoice        $01
000B2AC1 A606 14                    	dc.b	nCs3, $06, $14
000B2AC4 F2                         	smpsStop
000B2AC5                            
000B2AC5                            SndA2_Voices:
000B2AC5                            ;	Voice $00
000B2AC5                            ;	$F9
000B2AC5                            ;	$21, $30, $10, $32, 	$1C, $1F, $1F, $10, 	$05, $18, $09, $02
000B2AC5                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0C, $06, $04, $80
000B2AC5                            	smpsVcAlgorithm     $01
000B2AC5                            	smpsVcFeedback      $07
000B2AC5                            	smpsVcUnusedBits    $03
000B2AC5                            	smpsVcDetune        $03, $01, $03, $02
000B2AC5                            	smpsVcCoarseFreq    $02, $00, $00, $01
000B2AC5                            	smpsVcRateScale     $00, $00, $00, $00
000B2AC5                            	smpsVcAttackRate    $10, $1F, $1F, $1C
000B2AC5                            	smpsVcAmpMod        $00, $00, $00, $00
000B2AC5                            	smpsVcDecayRate1    $02, $09, $18, $05
000B2AC5                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B2AC5                            	smpsVcDecayLevel    $02, $04, $02, $01
000B2AC5                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2ADE                            
000B2ADE                            ;	Voice $01
000B2ADE                            ;	$00
000B2ADE                            ;	$00, $03, $02, $00, 	$D9, $DF, $1F, $1F, 	$12, $11, $14, $0F
000B2ADE                            ;	$0A, $00, $0A, $0D, 	$FF, $FF, $FF, $FF, 	$22, $07, $27, $80
000B2ADE                            	smpsVcAlgorithm     $00
000B2ADE                            	smpsVcFeedback      $00
000B2ADE                            	smpsVcUnusedBits    $00
000B2ADE                            	smpsVcDetune        $00, $00, $00, $00
000B2ADE                            	smpsVcCoarseFreq    $00, $02, $03, $00
000B2ADE                            	smpsVcRateScale     $00, $00, $03, $03
000B2ADE                            	smpsVcAttackRate    $1F, $1F, $1F, $19
000B2ADE                            	smpsVcAmpMod        $00, $00, $00, $00
000B2ADE                            	smpsVcDecayRate1    $0F, $14, $11, $12
000B2ADE                            	smpsVcDecayRate2    $0D, $0A, $00, $0A
000B2ADE                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B2ADE                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2AF8 00                         		even
000B2AF8                            SoundAB:	include	"sound/sfx/FireShield.asm"
000B2AF8                            Sound_3E_Header:
000B2AF8                            	smpsHeaderStartSong 3
000B2AFA 01                         	smpsHeaderTempoSFX  $01
000B2AFB 01                         	smpsHeaderChanSFX   $01
000B2AFC                            
000B2B02                            
000B2B02                            ; FM5 Data
000B2B02                            Sound_3E_3F_40_41_FM5:
000B2B02 EF00                       	smpsSetvoice        $00
000B2B04 A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
000B2B09 F2                         	smpsStop
000B2B0A                            
000B2B0A                            Sound_3E_Voices:
000B2B0A                            ;	Voice $00
000B2B0A                            ;	$0C
000B2B0A                            ;	$01, $21, $31, $31, 	$1E, $0C, $0E, $1C, 	$0A, $00, $04, $00
000B2B0A                            ;	$08, $12, $08, $0C, 	$FF, $0F, $BF, $0F, 	$03, $80, $0D, $80
000B2B0A                            	smpsVcAlgorithm     $04
000B2B0A                            	smpsVcFeedback      $01
000B2B0A                            	smpsVcUnusedBits    $00
000B2B0A                            	smpsVcDetune        $03, $03, $02, $00
000B2B0A                            	smpsVcCoarseFreq    $01, $01, $01, $01
000B2B0A                            	smpsVcRateScale     $00, $00, $00, $00
000B2B0A                            	smpsVcAttackRate    $1C, $0E, $0C, $1E
000B2B0A                            	smpsVcAmpMod        $00, $00, $00, $00
000B2B0A                            	smpsVcDecayRate1    $00, $04, $00, $0A
000B2B0A                            	smpsVcDecayRate2    $0C, $08, $12, $08
000B2B0A                            	smpsVcDecayLevel    $00, $0B, $00, $0F
000B2B0A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2B23                            
000B2B23                            
000B2B24 00                         		even
000B2B24                            SoundAC:	incbin	"sound/sfx/SndAC - Hit Boss.bin"
000B2B58                            		even
000B2B58                            SoundAD:	incbin	"sound/sfx/SndAD - Get Bubble.bin"
000B2B8E                            		even
000B2B8E                            SoundAE:	include	"sound/sfx/Fireball.asm"
000B2B8E                            Sound_70_Header:
000B2B8E                            	smpsHeaderStartSong 3
000B2B90 01                         	smpsHeaderTempoSFX  $01
000B2B91 02                         	smpsHeaderChanSFX   $02
000B2B92                            
000B2B9E                            
000B2B9E                            ; FM5 Data
000B2B9E                            Sound_70_FM5:
000B2B9E EF00                       	smpsSetvoice        $00
000B2BA0 8001                       	dc.b	nRst, $01
000B2BA7 8306 8502                  	dc.b	nD0, $06, nE0, $02
000B2BAB F2                         	smpsStop
000B2BAC                            
000B2BAC                            ; PSG3 Data
000B2BAC                            Sound_70_PSG3:
000B2BAC F500                       	smpsPSGvoice        sTone_0D
000B2BAE 800B                       	dc.b	nRst, $0B
000B2BB0 F3E7                       	smpsPSGform         $E7
000B2BB2 C501 E7                    	dc.b	(nMaxPSG1-$D)&$FF, $01, smpsNoAttack
000B2BB5                            
000B2BB5                            Sound_70_Loop00:
000B2BB5 02                         	dc.b	$02
000B2BB6 EC01                       	smpsPSGAlterVol     $01
000B2BB8 E7                         	dc.b	smpsNoAttack
000B2BB9 F700 10FF F8               	smpsLoop            $00, $10, Sound_70_Loop00
000B2BBE F2                         	smpsStop
000B2BBF                            
000B2BBF                            Sound_70_Voices:
000B2BBF                            ;	Voice $00
000B2BBF                            ;	$FA
000B2BBF                            ;	$02, $03, $00, $05, 	$12, $11, $0F, $13, 	$05, $18, $09, $02
000B2BBF                            ;	$06, $0F, $06, $02, 	$1F, $2F, $4F, $2F, 	$2F, $1A, $0E, $80
000B2BBF                            	smpsVcAlgorithm     $02
000B2BBF                            	smpsVcFeedback      $07
000B2BBF                            	smpsVcUnusedBits    $03
000B2BBF                            	smpsVcDetune        $00, $00, $00, $00
000B2BBF                            	smpsVcCoarseFreq    $05, $00, $03, $02
000B2BBF                            	smpsVcRateScale     $00, $00, $00, $00
000B2BBF                            	smpsVcAttackRate    $13, $0F, $11, $12
000B2BBF                            	smpsVcAmpMod        $00, $00, $00, $00
000B2BBF                            	smpsVcDecayRate1    $02, $09, $18, $05
000B2BBF                            	smpsVcDecayRate2    $02, $06, $0F, $06
000B2BBF                            	smpsVcDecayLevel    $02, $04, $02, $01
000B2BBF                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2BD8                            
000B2BD8                            
000B2BD8                            		even
000B2BD8                            SoundAF:	incbin	"sound/sfx/SndAF - Shield.bin"
000B2C06                            		even
000B2C06                            SoundB0:	incbin	"sound/sfx/SndB0 - Saw.bin"
000B2C38                            		even
000B2C38                            SoundB1:	incbin	"sound/sfx/SndB1 - Electric.bin"
000B2C64                            		even
000B2C64                            SoundB2:	incbin	"sound/sfx/SndB2 - Drown Death.bin"
000B2CB4                            		even
000B2CB4                            SoundB3:	incbin	"sound/sfx/SndB3 - Flamethrower.bin"
000B2CFE                            		even
000B2CFE                            SoundB4:	incbin	"sound/sfx/SndB4 - Bumper.bin"
000B2D5A                            		even
000B2D5A                            SoundB5:	incbin	"sound/sfx/SndB5 - Ring.bin"
000B2D88                            		even
000B2D88                            SoundB6:	include	"sound/sfx/Spikes.asm"
000B2D88                            SpikesSFX_Header:
000B2D88                            	smpsHeaderStartSong 3
000B2D8A 01                         	smpsHeaderTempoSFX  $01
000B2D8B 02                         	smpsHeaderChanSFX   $02
000B2D8C                            
000B2D98                            
000B2D98                            ; FM6 Data
000B2D98                            SndB7_FM3:
000B2D98 EF01                       	smpsSetvoice        $01
000B2D9F B105                       	dc.b	nC4, $05
000B2DA1 F1                         	smpsModOn
000B2DA2 E10A                       	smpsAlterNote       $0A
000B2DA4 E601                       	smpsAlterVol        $01
000B2DA6 F2                         	smpsStop
000B2DA7                            
000B2DA7                            ; FM5 Data
000B2DA7                            SndB7_FM5:
000B2DA7 8005                       	dc.b	nRst, $05			 
000B2DA9 EF00                       	smpsSetvoice        $00
000B2DAB DB01 8001 DB11             	dc.b	nFs7, $01, nRst, $01, nFs7, $11
000B2DB1 F2                         	smpsStop
000B2DB2                            
000B2DB2                            SndB7_Voices:
000B2DB2                            ;	Voice $00
000B2DB2                            ;	$34
000B2DB2                            ;	$09, $0F, $01, $D7, 	$1F, $1F, $1F, $1F, 	$0C, $11, $09, $0F
000B2DB2                            ;	$0A, $0E, $0D, $0E, 	$35, $1A, $55, $3A, 	$0C, $80, $0F, $80
000B2DB2                            	smpsVcAlgorithm     $04
000B2DB2                            	smpsVcFeedback      $06
000B2DB2                            	smpsVcUnusedBits    $00
000B2DB2                            	smpsVcDetune        $0D, $00, $00, $00
000B2DB2                            	smpsVcCoarseFreq    $07, $01, $0F, $09
000B2DB2                            	smpsVcRateScale     $00, $00, $00, $00
000B2DB2                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B2DB2                            	smpsVcAmpMod        $00, $00, $00, $00
000B2DB2                            	smpsVcDecayRate1    $0F, $09, $11, $0C
000B2DB2                            	smpsVcDecayRate2    $0E, $0D, $0E, $0A
000B2DB2                            	smpsVcDecayLevel    $03, $05, $01, $03
000B2DB2                            	smpsVcReleaseRate   $0A, $05, $0A, $05
000B2DCB                            
000B2DCB                            ;	Voice $01
000B2DCB                            ;	$FA
000B2DCB                            ;	$21, $3A, $19, $30, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
000B2DCB                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
000B2DCB                            	smpsVcAlgorithm     $02
000B2DCB                            	smpsVcFeedback      $07
000B2DCB                            	smpsVcUnusedBits    $03
000B2DCB                            	smpsVcDetune        $03, $01, $03, $02
000B2DCB                            	smpsVcCoarseFreq    $00, $09, $0A, $01
000B2DCB                            	smpsVcRateScale     $00, $00, $00, $00
000B2DCB                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B2DCB                            	smpsVcAmpMod        $00, $00, $00, $00
000B2DCB                            	smpsVcDecayRate1    $02, $09, $18, $05
000B2DCB                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B2DCB                            	smpsVcDecayLevel    $02, $04, $02, $01
000B2DCB                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2DE4                            		even
000B2DE4                            SoundB7:	incbin	"sound/sfx/SndB7 - Rumbling.bin"
000B2E20                            		even
000B2E20                            SoundB8:	include	"sound/sfx/ScoreTallying.asm"
000B2E20                            SndBD_Header:
000B2E20                            	smpsHeaderStartSong 3
000B2E22 01                         	smpsHeaderTempoSFX  $01
000B2E23 01                         	smpsHeaderChanSFX   $01
000B2E24                            
000B2E2A                            
000B2E2A                            ; FM6 Data
000B2E2A                            SndBD_FM3:
000B2E2A EF00                       	smpsSetvoice        $00
000B2E2C                            
000B2E2C                            SndBD_Loop00:
000B2E2C C009                       	dc.b	nEb5, $09
000B2E2E F700 08FF FA               	smpsLoop            $00, $08, SndBD_Loop00
000B2E33 F2                         	smpsStop
000B2E34                            
000B2E34                            SndBD_Voices:
000B2E34                            ;	Voice $00
000B2E34                            ;	$02
000B2E34                            ;	$02, $51, $20, $01, 	$1E, $1E, $1E, $1E, 	$10, $0A, $14, $13
000B2E34                            ;	$01, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$24, $0E, $1F, $80
000B2E34                            	smpsVcAlgorithm     $02
000B2E34                            	smpsVcFeedback      $00
000B2E34                            	smpsVcUnusedBits    $00
000B2E34                            	smpsVcDetune        $00, $02, $05, $00
000B2E34                            	smpsVcCoarseFreq    $01, $00, $01, $02
000B2E34                            	smpsVcRateScale     $00, $00, $00, $00
000B2E34                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
000B2E34                            	smpsVcAmpMod        $00, $00, $00, $00
000B2E34                            	smpsVcDecayRate1    $13, $14, $0A, $10
000B2E34                            	smpsVcDecayRate2    $00, $00, $00, $01
000B2E34                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B2E34                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2E4E 00                         		even
000B2E4E                            SoundB9:	include	"sound/sfx/BreakFloor.asm"
000B2E4E                            Sound_59_Header:
000B2E4E                            	smpsHeaderStartSong 3
000B2E50 01                         	smpsHeaderTempoSFX  $01
000B2E51 04                         	smpsHeaderChanSFX   $04
000B2E52                            
000B2E6A                            
000B2E6A                            ; FM3 Data
000B2E6A                            Sound_59_FM3:
000B2E6A E040                       	smpsPan             panRight, $00
000B2E6C 8002                       	dc.b	nRst, $02
000B2E6E F600 00                    	smpsJump            Sound_59_FM4
000B2E71                            
000B2E71                            ; FM5 Data
000B2E71                            Sound_59_FM5:
000B2E71 E080                       	smpsPan             panLeft, $00
000B2E73 8001                       	dc.b	nRst, $01
000B2E75                            
000B2E75                            ; FM4 Data
000B2E75                            Sound_59_FM4:
000B2E75 EF00                       	smpsSetvoice        $00
000B2E7C 8110                       	dc.b	nC0, $10
000B2E7E F2                         	smpsStop
000B2E7F                            
000B2E7F                            ; PSG3 Data
000B2E7F                            Sound_59_PSG3:
000B2E84 F3E7                       	smpsPSGform         $E7
000B2E86                            
000B2E86                            Sound_59_Loop00:
000B2E86 B018 E7                    	dc.b	nB3, $18, smpsNoAttack
000B2E89 EC03                       	smpsPSGAlterVol     $03
000B2E8B F700 05FF F7               	smpsLoop            $00, $05, Sound_59_Loop00
000B2E90 F2                         	smpsStop
000B2E91                            
000B2E91                            Sound_59_Voices:
000B2E91                            ;	Voice $00
000B2E91                            ;	$F9
000B2E91                            ;	$21, $30, $10, $32, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
000B2E91                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
000B2E91                            	smpsVcAlgorithm     $01
000B2E91                            	smpsVcFeedback      $07
000B2E91                            	smpsVcUnusedBits    $03
000B2E91                            	smpsVcDetune        $03, $01, $03, $02
000B2E91                            	smpsVcCoarseFreq    $02, $00, $00, $01
000B2E91                            	smpsVcRateScale     $00, $00, $00, $00
000B2E91                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B2E91                            	smpsVcAmpMod        $00, $00, $00, $00
000B2E91                            	smpsVcDecayRate1    $02, $09, $18, $05
000B2E91                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B2E91                            	smpsVcDecayLevel    $02, $04, $02, $01
000B2E91                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2EAA                            
000B2EAA                            
000B2EAA                            		even
000B2EAA                            SoundBA:	incbin	"sound/sfx/SndBA - SS Glass.bin"
000B2ED2                            		even
000B2ED2                            SoundBB:	incbin	"sound/sfx/SndBB - Door.bin"
000B2EFE                            		even
000B2EFE                            SoundBC:	include	"sound/sfx/DashRelease.asm"
000B2EFE                            Sound_B6_Header:
000B2EFE                            	smpsHeaderStartSong 3
000B2F00 01                         	smpsHeaderTempoSFX  $01
000B2F01 02                         	smpsHeaderChanSFX   $02
000B2F02                            
000B2F0E                            
000B2F0E                            ; FM5 Data
000B2F0E                            Sound_B6_FM5:
000B2F0E EF00                       	smpsSetvoice        $00
000B2F15 CD0F                       	dc.b	nE6, $0F
000B2F17 F2                         	smpsStop
000B2F18                            
000B2F18                            ; PSG3 Data
000B2F18                            Sound_B6_PSG3:
000B2F18 F507                       	smpsPSGvoice        sTone_1D
000B2F1A 8006                       	dc.b	nRst, $06
000B2F21 F3E7                       	smpsPSGform         $E7
000B2F23 CD4F                       	dc.b	nE6, $4F
000B2F25 F2                         	smpsStop
000B2F26                            
000B2F26                            Sound_B6_Voices:
000B2F26                            ;	Voice $00
000B2F26                            ;	$3D
000B2F26                            ;	$09, $03, $00, $00, 	$1F, $1F, $1F, $1F, 	$10, $0C, $0C, $0C
000B2F26                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$09, $84, $92, $8E
000B2F26                            	smpsVcAlgorithm     $05
000B2F26                            	smpsVcFeedback      $07
000B2F26                            	smpsVcUnusedBits    $00
000B2F26                            	smpsVcDetune        $00, $00, $00, $00
000B2F26                            	smpsVcCoarseFreq    $00, $00, $03, $09
000B2F26                            	smpsVcRateScale     $00, $00, $00, $00
000B2F26                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B2F26                            	smpsVcAmpMod        $00, $00, $00, $00
000B2F26                            	smpsVcDecayRate1    $0C, $0C, $0C, $10
000B2F26                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B2F26                            	smpsVcDecayLevel    $02, $04, $02, $01
000B2F26                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2F3F                            
000B2F3F                            
000B2F40 00                         		even
000B2F40                            SoundBD:	incbin	"sound/sfx/SndBD - ChainStomp.bin"
000B2F94                            		even
000B2F94                            SoundBE:	incbin	"sound/sfx/SndBE - Roll.bin"
000B2FCE                            		even
000B2FCE                            SoundBF:	incbin	"sound/sfx/SndBF - Get Continue.bin"
000B3040                            		even
000B3040                            SoundC0:	incbin	"sound/sfx/SndC0 - Basaran Flap.bin"
000B306E                            		even
000B306E                            SoundC1:	incbin	"sound/sfx/SndC1 - Break Item.bin"
000B30A8                            		even
000B30A8                            SoundC2:	include	"sound/sfx/DrowningWarning.asm"
000B30A8                            SndC1_Header:
000B30A8                            	smpsHeaderStartSong 3
000B30AA 01                         	smpsHeaderTempoSFX  $01
000B30AB 01                         	smpsHeaderChanSFX   $01
000B30AC                            
000B30B2                            
000B30B2                            ; FM4 Data
000B30B2                            SndC1_FM4:
000B30B2 EF00                       	smpsSetvoice        $00
000B30B4 D506 40                    	dc.b	nC7, $06, $40
000B30B7 F2                         	smpsStop
000B30B8                            
000B30B8                            SndC1_Voices:
000B30B8                            ;	Voice $00
000B30B8                            ;	$38
000B30B8                            ;	$01, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$09, $09, $09, $0B
000B30B8                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$5C, $22, $27, $80
000B30B8                            	smpsVcAlgorithm     $00
000B30B8                            	smpsVcFeedback      $07
000B30B8                            	smpsVcUnusedBits    $00
000B30B8                            	smpsVcDetune        $00, $00, $00, $00
000B30B8                            	smpsVcCoarseFreq    $00, $00, $00, $01
000B30B8                            	smpsVcRateScale     $00, $00, $00, $00
000B30B8                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B30B8                            	smpsVcAmpMod        $00, $00, $00, $00
000B30B8                            	smpsVcDecayRate1    $0B, $09, $09, $09
000B30B8                            	smpsVcDecayRate2    $00, $00, $00, $00
000B30B8                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B30B8                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B30D2 00                         		even
000B30D2                            SoundC3:	incbin	"sound/sfx/SndC3 - Giant Ring.bin"
000B314C                            		even
000B314C                            SoundC4:	incbin	"sound/sfx/SndC4 - Bomb.bin"
000B3174                            		even
000B3174                            SoundC5:	include	"sound/sfx/Cash Register.asm"
000B3174                            Sound_B0_Header:
000B3174                            	smpsHeaderStartSong 3
000B3176 01                         	smpsHeaderTempoSFX  $01
000B3177 03                         	smpsHeaderChanSFX   $03
000B3178                            
000B318A                            
000B318A                            ; FM5 Data
000B318A                            Sound_B0_FM5:
000B318A EF00                       	smpsSetvoice        $00
000B318C 8A08 8002 8A08             	dc.b	nA0, $08, nRst, $02, nA0, $08
000B3192 F2                         	smpsStop
000B3193                            
000B3193                            ; FM4 Data
000B3193                            Sound_B0_FM4:
000B3193 EF01                       	smpsSetvoice        $01
000B3195 8012 C655                  	dc.b	nRst, $12, nA5, $55
000B3199 F2                         	smpsStop
000B319A                            
000B319A                            ; FM3 Data
000B319A                            Sound_B0_FM3:
000B319A EF02                       	smpsSetvoice        $02
000B319C 8002 C205 0405 04          	dc.b	nRst, $02, nF5, $05, $04, $05, $04
000B31A3 F2                         	smpsStop
000B31A4                            
000B31A4                            Sound_B0_Voices:
000B31A4                            ;	Voice $00
000B31A4                            ;	$3B
000B31A4                            ;	$03, $02, $03, $06, 	$18, $1A, $1A, $96, 	$17, $0E, $0A, $10
000B31A4                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $28, $39, $80
000B31A4                            	smpsVcAlgorithm     $03
000B31A4                            	smpsVcFeedback      $07
000B31A4                            	smpsVcUnusedBits    $00
000B31A4                            	smpsVcDetune        $00, $00, $00, $00
000B31A4                            	smpsVcCoarseFreq    $06, $03, $02, $03
000B31A4                            	smpsVcRateScale     $02, $00, $00, $00
000B31A4                            	smpsVcAttackRate    $16, $1A, $1A, $18
000B31A4                            	smpsVcAmpMod        $00, $00, $00, $00
000B31A4                            	smpsVcDecayRate1    $10, $0A, $0E, $17
000B31A4                            	smpsVcDecayRate2    $00, $00, $00, $00
000B31A4                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B31A4                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B31BD                            
000B31BD                            ;	Voice $01
000B31BD                            ;	$04
000B31BD                            ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
000B31BD                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$23, $80, $23, $80
000B31BD                            	smpsVcAlgorithm     $04
000B31BD                            	smpsVcFeedback      $00
000B31BD                            	smpsVcUnusedBits    $00
000B31BD                            	smpsVcDetune        $04, $07, $07, $03
000B31BD                            	smpsVcCoarseFreq    $09, $07, $02, $07
000B31BD                            	smpsVcRateScale     $00, $00, $00, $00
000B31BD                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B31BD                            	smpsVcAmpMod        $00, $00, $00, $00
000B31BD                            	smpsVcDecayRate1    $0D, $07, $0A, $07
000B31BD                            	smpsVcDecayRate2    $0B, $00, $0B, $00
000B31BD                            	smpsVcDecayLevel    $00, $01, $00, $01
000B31BD                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B31D6                            
000B31D6                            ;	Voice $02
000B31D6                            ;	$3C
000B31D6                            ;	$0F, $00, $00, $00, 	$1F, $1A, $18, $1C, 	$17, $11, $1A, $0E
000B31D6                            ;	$00, $0F, $14, $10, 	$1F, $9F, $9F, $2F, 	$07, $80, $26, $8C
000B31D6                            	smpsVcAlgorithm     $04
000B31D6                            	smpsVcFeedback      $07
000B31D6                            	smpsVcUnusedBits    $00
000B31D6                            	smpsVcDetune        $00, $00, $00, $00
000B31D6                            	smpsVcCoarseFreq    $00, $00, $00, $0F
000B31D6                            	smpsVcRateScale     $00, $00, $00, $00
000B31D6                            	smpsVcAttackRate    $1C, $18, $1A, $1F
000B31D6                            	smpsVcAmpMod        $00, $00, $00, $00
000B31D6                            	smpsVcDecayRate1    $0E, $1A, $11, $17
000B31D6                            	smpsVcDecayRate2    $10, $14, $0F, $00
000B31D6                            	smpsVcDecayLevel    $02, $09, $09, $01
000B31D6                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B31EF                            
000B31EF                            
000B31F0 00                         		even
000B31F0                            SoundC6:	incbin	"sound/sfx/SndC6 - Ring Loss.bin"
000B3232                            		even
000B3232                            SoundC7:	incbin	"sound/sfx/SndC7 - Chain Rising.bin"
000B3260                            		even
000B3260                            SoundC8:	incbin	"sound/sfx/SndC8 - Burning.bin"
000B3272                            		even
000B3272                            SoundC9:	incbin	"sound/sfx/SndC9 - Hidden Bonus.bin"
000B32A0                            		even
000B32A0                            SoundCA:	incbin	"sound/sfx/SndCA - Enter SS.bin"
000B32CE                            		even
000B32CE                            SoundCB:	incbin	"sound/sfx/SndCB - Wall Smash.bin"
000B331A                            		even
000B331A                            SoundCC:	include	"sound/sfx/Spring.asm"
000B331A                            Spring_Header:
000B331A                            	smpsHeaderStartSong 1
000B331C 01                         	smpsHeaderTempoSFX  $01
000B331D 01                         	smpsHeaderChanSFX   $01
000B331E                            
000B3324                            
000B3324                            ; FM6 Data
000B3324                            Spring_FM6:
000B3324 EF00                       	smpsSetvoice        $00
000B3326 8001                       	dc.b	nRst, $01
000B332D B006                       	dc.b	nB3, $06
000B332F F4                         	smpsModOff
000B3330 EF01                       	smpsSetvoice        $01
000B3332                            
000B3332                            Spring_Loop00:
000B3332 BD02                       	dc.b	nC5, $02
000B3334 E601                       	smpsAlterVol      $01
000B3336 E7                         	dc.b	smpsNoAttack
000B3337 F700 19FF F7               	smpsLoop            $00, $19, Spring_Loop00
000B333C F2                         	smpsStop
000B333D                            
000B333D                            Spring_Voices:
000B333D                            ;	Voice $00
000B333D                            ;	$20
000B333D                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
000B333D                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$16, $30, $13, $80
000B333D                            	smpsVcAlgorithm     $00
000B333D                            	smpsVcFeedback      $04
000B333D                            	smpsVcUnusedBits    $00
000B333D                            	smpsVcDetune        $03, $03, $03, $03
000B333D                            	smpsVcCoarseFreq    $01, $00, $05, $06
000B333D                            	smpsVcRateScale     $02, $02, $03, $03
000B333D                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B333D                            	smpsVcAmpMod        $00, $00, $00, $00
000B333D                            	smpsVcDecayRate1    $06, $09, $06, $07
000B333D                            	smpsVcDecayRate2    $08, $06, $06, $07
000B333D                            	smpsVcDecayLevel    $0F, $01, $01, $02
000B333D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B3356                            
000B3356                            ;	Voice $01
000B3356                            ;	$20
000B3356                            ;	$31, $33, $30, $31, 	$9F, $9F, $9F, $9F, 	$07, $06, $09, $06
000B3356                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $23, $11, $80
000B3356                            	smpsVcAlgorithm     $00
000B3356                            	smpsVcFeedback      $04
000B3356                            	smpsVcUnusedBits    $00
000B3356                            	smpsVcDetune        $03, $03, $03, $03
000B3356                            	smpsVcCoarseFreq    $01, $00, $03, $01
000B3356                            	smpsVcRateScale     $02, $02, $02, $02
000B3356                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B3356                            	smpsVcAmpMod        $00, $00, $00, $00
000B3356                            	smpsVcDecayRate1    $06, $09, $06, $07
000B3356                            	smpsVcDecayRate2    $08, $06, $06, $07
000B3356                            	smpsVcDecayLevel    $0F, $01, $01, $02
000B3356                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B3370 00                         		even
000B3370                            SoundCD:	include	"sound/sfx/Beep.asm"
000B3370                            Snd99_Header:
000B3370                            	smpsHeaderStartSong 3
000B3372 01                         	smpsHeaderTempoSFX  $01
000B3373 01                         	smpsHeaderChanSFX   $01
000B3374                            
000B337A                            
000B337A                            ; FM4 Data
000B337A                            Snd99_FM4:
000B337A EF00                       	smpsSetvoice        $00
000B337C B502                       	dc.b	nE4, $02
000B337E F2                         	smpsStop
000B337F                            
000B337F                            Snd99_Voices:
000B337F                            ;	Voice $00
000B337F                            ;	$07
000B337F                            ;	$0A, $0A, $0A, $0A, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000B337F                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$88, $88, $88, $88
000B337F                            	smpsVcAlgorithm     $07
000B337F                            	smpsVcFeedback      $00
000B337F                            	smpsVcUnusedBits    $00
000B337F                            	smpsVcDetune        $00, $00, $00, $00
000B337F                            	smpsVcCoarseFreq    $0A, $0A, $0A, $0A
000B337F                            	smpsVcRateScale     $00, $00, $00, $00
000B337F                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B337F                            	smpsVcAmpMod        $00, $00, $00, $00
000B337F                            	smpsVcDecayRate1    $00, $00, $00, $00
000B337F                            	smpsVcDecayRate2    $00, $00, $00, $00
000B337F                            	smpsVcDecayLevel    $00, $00, $00, $00
000B337F                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B3398                            		even
000B3398                            SoundCE:	incbin	"sound/sfx/SndCE - Ring Left Speaker.bin"
000B33C6                            		even
000B33C6                            SoundCF:	include	"sound/sfx/Signpost.asm"
000B33C6                            SignpostCD_Header:
000B33C6                            	smpsHeaderStartSong 3
000B33C8 01                         	smpsHeaderTempoSFX  $01
000B33C9 02                         	smpsHeaderChanSFX   $02
000B33CA                            
000B33D6                            
000B33D6                            ; FM5 Data
000B33D6                            Snd9D_FM5:
000B33D6 8004                       	dc.b	nRst, $04
000B33D8                            
000B33D8                            ; FM4 Data
000B33D8                            Snd9D_FM4:
000B33D8 EF00                       	smpsSetvoice        $00
000B33DA                            
000B33DA                            Snd9D_Loop00:
000B33DA B405                       	dc.b	nEb4, $05
000B33DC E604                       	smpsFMAlterVol      $04
000B33DE F700 08FF F8               	smpsLoop            $00, $08, Snd9D_Loop00
000B33E3 F2                         	smpsStop
000B33E4                            
000B33E4                            Snd9D_Voices:
000B33E4                            ;	Voice $00
000B33E4                            ;	$F4
000B33E4                            ;	$06, $04, $0F, $0E, 	$1F, $1F, $1F, $1F, 	$00, $00, $0B, $0B
000B33E4                            ;	$00, $00, $05, $08, 	$0F, $0F, $FF, $FF, 	$0C, $85, $00, $80
000B33E4                            	smpsVcAlgorithm     $04
000B33E4                            	smpsVcFeedback      $06
000B33E4                            	smpsVcUnusedBits    $03
000B33E4                            	smpsVcDetune        $00, $00, $00, $00
000B33E4                            	smpsVcCoarseFreq    $0E, $0F, $04, $06
000B33E4                            	smpsVcRateScale     $00, $00, $00, $00
000B33E4                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B33E4                            	smpsVcAmpMod        $00, $00, $00, $00
000B33E4                            	smpsVcDecayRate1    $0B, $0B, $00, $00
000B33E4                            	smpsVcDecayRate2    $08, $05, $00, $00
000B33E4                            	smpsVcDecayLevel    $0F, $0F, $00, $00
000B33E4                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B33FE 00                         		even
000B33FE                            SoundD0:	incbin	"sound/sfx/SndD0 - Waterfall.bin"
000B3438                            		even
000B3438                            SoundD1:	include	"sound/sfx/Lightning Shield.asm"
000B3438                            Sound_41_Header:
000B3438                            	smpsHeaderStartSong 3
000B343A 01                         	smpsHeaderTempoSFX  $01
000B343B 01                         	smpsHeaderChanSFX   $01
000B343C                            
000B3442                            	
000B3442                            Sound41_FM5:
000B3442 EF00                       	smpsSetvoice        $00
000B3444 A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
000B3449 F2                         	smpsStop
000B344A                            
000B344A                            Sound_41_Voices:
000B344A                            ;	Voice $00
000B344A                            ;	$36
000B344A                            ;	$07, $10, $0E, $0C, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000B344A                            ;	$00, $0D, $0D, $0E, 	$0F, $0F, $0F, $0F, 	$17, $80, $80, $80
000B344A                            	smpsVcAlgorithm     $06
000B344A                            	smpsVcFeedback      $06
000B344A                            	smpsVcUnusedBits    $00
000B344A                            	smpsVcDetune        $00, $00, $01, $00
000B344A                            	smpsVcCoarseFreq    $0C, $0E, $00, $07
000B344A                            	smpsVcRateScale     $00, $00, $00, $00
000B344A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B344A                            	smpsVcAmpMod        $00, $00, $00, $00
000B344A                            	smpsVcDecayRate1    $00, $00, $00, $00
000B344A                            	smpsVcDecayRate2    $0E, $0D, $0D, $00
000B344A                            	smpsVcDecayLevel    $00, $00, $00, $00
000B344A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B3463                            
000B3463                            
000B3464 00                         		even
000B3464                            SoundD2:	include	"sound/sfx/CD_Charge.asm"
000B3464                            Snd9B_Header:
000B3464                            	smpsHeaderStartSong 3
000B3466 01                         	smpsHeaderTempoSFX  $01
000B3467 01                         	smpsHeaderChanSFX   $01
000B3468                            
000B346E                            
000B346E                            ; FM5 Data
000B346E                            Snd9B_FM5:
000B346E EF00                       	smpsSetvoice        $00
000B3470 8001                       	dc.b	nRst, $01
000B3477 CA25                       	dc.b	nCs6, $25
000B3479 F4                         	smpsModOff
000B347A                            
000B347A                            Snd9B_Loop00:
000B347A E7                         	dc.b	smpsNoAttack
000B347B E601                       	smpsFMAlterVol      $01
000B347D D102                       	dc.b	nAb6, $02
000B347F F700 2AFF F7               	smpsLoop            $00, $2A, Snd9B_Loop00
000B3484 F2                         	smpsStop
000B3485                            
000B3485                            Snd9B_Voices:
000B3485                            ;	Voice $00
000B3485                            ;	$3C
000B3485                            ;	$00, $44, $02, $02, 	$1F, $1F, $1F, $15, 	$00, $1F, $00, $00
000B3485                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$0D, $80, $28, $80
000B3485                            	smpsVcAlgorithm     $04
000B3485                            	smpsVcFeedback      $07
000B3485                            	smpsVcUnusedBits    $00
000B3485                            	smpsVcDetune        $00, $00, $04, $00
000B3485                            	smpsVcCoarseFreq    $02, $02, $04, $00
000B3485                            	smpsVcRateScale     $00, $00, $00, $00
000B3485                            	smpsVcAttackRate    $15, $1F, $1F, $1F
000B3485                            	smpsVcAmpMod        $00, $00, $00, $00
000B3485                            	smpsVcDecayRate1    $00, $00, $1F, $00
000B3485                            	smpsVcDecayRate2    $00, $00, $00, $00
000B3485                            	smpsVcDecayLevel    $00, $00, $00, $00
000B3485                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B349E                            
000B349E                            
000B349E                            		even		
000B349E                            SoundD3:	incbin	"sound/sfx/Peelout_Release.bin"
000B3536                            		even
000B3536                            SoundD4:	incbin	"sound/sfx/Peelout_Stop.bin"
000B3542                            		even				
000B3542                            SoundD5:	incbin	"sound/sfx/Spindash.bin"
000B357E                            		even		
000B357E                            SoundD6:	include	"sound/sfx/Transform.asm"
000B357E                            Sound_9F_Header:
000B357E                            	smpsHeaderStartSong 3
000B3580 01                         	smpsHeaderTempoSFX  $01
000B3581 02                         	smpsHeaderChanSFX   $02
000B3582                            
000B358E                            
000B358E                            ; FM4 Data
000B358E                            Sound_9F_FM4:
000B358E 8003                       	dc.b	nRst, $03
000B3590                            
000B3590                            ; FM5 Data
000B3590                            Sound_9F_FM5:
000B3590 EF00                       	smpsSetvoice        $00
000B3597 AE13                       	dc.b	nA3, $13
000B3599 E614                       	smpsFMAlterVol      $14
000B359B F700 05FF F1               	smpsLoop            $00, $05, Sound_9F_FM5
000B35A0 F2                         	smpsStop
000B35A1                            
000B35A1                            Sound_9F_Voices:
000B35A1                            ;	Voice $00
000B35A1                            ;	$7A
000B35A1                            ;	$1F, $1F, $04, $1F, 	$10, $1F, $18, $10, 	$10, $16, $0C, $00
000B35A1                            ;	$02, $02, $02, $02, 	$2F, $2F, $FF, $3F, 	$42, $16, $11, $80
000B35A1                            	smpsVcAlgorithm     $02
000B35A1                            	smpsVcFeedback      $07
000B35A1                            	smpsVcUnusedBits    $01
000B35A1                            	smpsVcDetune        $01, $00, $01, $01
000B35A1                            	smpsVcCoarseFreq    $0F, $04, $0F, $0F
000B35A1                            	smpsVcRateScale     $00, $00, $00, $00
000B35A1                            	smpsVcAttackRate    $10, $18, $1F, $10
000B35A1                            	smpsVcAmpMod        $00, $00, $00, $00
000B35A1                            	smpsVcDecayRate1    $00, $0C, $16, $10
000B35A1                            	smpsVcDecayRate2    $02, $02, $02, $02
000B35A1                            	smpsVcDecayLevel    $03, $0F, $02, $02
000B35A1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B35BA                            
000B35BA                            
000B35BA                            		even			
000B35BA                            		; Don't let Sega sample cross $8000-byte boundary
000B35BA                            		; (DAC driver doesn't switch banks automatically)
000B8000                            SegaPCM:	incbin	"sound/dac/sega.pcm"
000BE978                            SegaPCM_End
000BE978                            		even
000BE978                            
000BE978                            
000BE978                            
000BE978                            
000BE978                            			include "_inc\Sonic 2 Options.asm"
000BE978                            ; ---------------------------------------------------------------------------
000BE978                            ; Common menu screen subroutine for transferring text to RAM
000BE978                            
000BE978                            ; ARGUMENTS:
000BE978                            ; d0 = starting art tile
000BE978                            ; a1 = data source
000BE978                            ; a2 = destination
000BE978                            ;
000BE978                            ; ---------------------------------------------------------------------------
000BE978                            MenuScreen:
000BE978 103C 0000                  		move.b	#bgm_Fade,d0
000BE97C 4EB8 12FE                  		jsr	PlaySound_Special ; fade out music
000BE980 4EB8 23B8                  		jsr	PaletteFadeOut
000BE984 46FC 2700                  		move	#$2700,sr
000BE988 3038 F60C                  		move.w	($FFFFF60C).w,d0
000BE98C 0200 00BF                  		andi.b	#-$41,d0
000BE990 33C0 00C0 0004             		move.w	d0,($00C00004).l
000BE996 4EB8 122E                  		jsr	ClearScreen
000BE99A 4DF9 00C0 0004             		lea		($00C00004).l,a6
000BE9A0 3CBC 8004                  		move.w	#$8004,(a6)
000BE9A4 3CBC 8230                  		move.w	#$8230,(a6)
000BE9A8 3CBC 8407                  		move.w	#$8407,(a6)
000BE9AC 3CBC 8230                  		move.w	#$8230,(a6)
000BE9B0 3CBC 8700                  		move.w	#$8700,(a6)
000BE9B4 3CBC 8C81                  		move.w	#$8C81,(a6)
000BE9B8 3CBC 9001                  		move.w	#$9001,(a6)
000BE9BC 43F8 AC00                  		lea	($FFFFAC00).w,a1
000BE9C0 7000                       		moveq	#0,d0
000BE9C2 323C 00FF                  		move.w	#$FF,d1
000BE9C6                            
000BE9C6                            MenuScreen_ClrObjRam:
000BE9C6 22C0                       		move.l	d0,(a1)+
000BE9C8 51C9 FFFC                  		dbf		d1,MenuScreen_ClrObjRam
000BE9CC                            
000BE9CC                            ; ===========================================================================
000BE9CC                            
000BE9CC 31FC C800 C8FC             		ResetDMAQueue
000BE9D2                            
000BE9DC 41F9 0000 0000             		lea		(Nem_MenuFont).l,a0
000BE9E2 4EB8 13AC                  		jsr	NemDec
000BE9F0 41F9 0000 0000             		lea		(Nem_MenuBox).l,a0
000BE9F6 4EB8 13AC                  		jsr	NemDec
000BE9FA 43F9 00FF 0000             		lea	($FF0000).l,a1
000BEA00 41F9 0000 0000             		lea	(Eni_MenuBg).l,a0 ; load SONIC/MILES mappings
000BEA06 303C 6000                  		move.w	#$6000,d0
000BEA0A 4EB8 1936                  		jsr	EniDec
000BEA0E                            
000BEA0E 43F9 00FF 0000 203C 6000+  		copyTilemap	$FF0000,$E000,$27,$1B
000BEA22                            
000BEA22 4EB9 0001 5380             		jsr 	LoadSRAMConfig
000BEA28 6100 0000                  		bsr.w	MenuScreen_Options	; if yes, branch
000BEA2C                            
000BEA2C                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000BEA2C                            
000BEA2C                            ; sub_8FBE:
000BEA2C                            MenuScreenTextToRAM:
000BEA2C 7200                       		moveq	#0,d1
000BEA2E 1219                       		move.b	(a1)+,d1
000BEA30                            
000BEA30                            MenuScreenTextToRAM_Cont:
000BEA30 1019                       		move.b	(a1)+,d0
000BEA32 34C0                       		move.w	d0,(a2)+
000BEA34 51C9 FFFA                  		dbf	d1,MenuScreenTextToRAM_Cont
000BEA38 4E75                       		rts
000BEA3A                            ; End of function MenuScreenTextToRAM
000BEA3A                            
000BEA3A                            ; ===========================================================================
000BEA3A                            ; loc_8FCC:
000BEA3A                            MenuScreen_Options:
000BEA3A 43F9 00FF 0000             		lea	(v_256x256).l,a1
000BEA40 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000BEA46 303C 0070                  		move.w	#$70,d0
000BEA4A 4EB8 1936                  		jsr	EniDec
000BEA4E 43F9 00FF 0160             		lea	(v_256x256+$160).l,a1
000BEA54 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000BEA5A 303C 2070                  		move.w	#$2070,d0
000BEA5E 4EB8 1936                  		jsr	EniDec
000BEA62 4238 FF8C                  		clr.b	(Options_menu_box).w
000BEA66 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000BEA6A 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000BEA6E 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000BEA72 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000BEA76 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000BEA7A 4238 FF8C                  		clr.b	(Options_menu_box).w
000BEA7E 4238 F711                  		clr.b	($FFFFF711).w		
000BEA82 4278 F7F0                  		clr.w	($FFFFF7F0).w					 
000BEA86                            ;-------------------------------------------------------------------------------
000BEA86 4278 F5B8                  		clr.w	($FFFFF5B8).w
000BEA8A 45F9 0000 0000             		lea	(Sonic_Miles_Spr).l,a2 ; sonic/miles background load
000BEA90 6100 0000                  		bsr.w	Dynamic_Menu
000BEA94                            ;-------------------------------------------------------------------------------
000BEA94 7013                       		moveq	#palid_Options,d0
000BEA96 4EB8 2662                  		jsr		PalLoad1
000BEA9A 103C 0091                  		move.b	#$91,d0
000BEA9E 4EB8 12FE                  		jsr	PlaySound_Special ; play options music
000BEAA2 42B8 F700                  		clr.l	(v_screenposx).w
000BEAA6 42B8 F704                  		clr.l	(v_screenposy).w
000BEAAA 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000BEAB0 4EB8 3CF6                  		jsr	WaitForVBla
000BEAB4 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000BEAB8 0000 0040                  		ori.b	#$40,d0
000BEABC 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000BEAC2 4EB8 2312                  		jsr	PaletteFadeIn
000BEAC6                            ; loc_9060:
000BEAC6                            OptionScreen_Main:
000BEAC6 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000BEACC 4EB8 3CF6                  		jsr	WaitForVBla				
000BEAD0 46FC 2700                  		move	#$2700,sr
000BEAD4 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000BEAD8 6100 0000                  		bsr.w	OptionScreen_Controls			
000BEADC 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000BEAE0 46FC 2300                  		move	#$2300,sr
000BEAE4 45F9 0000 0000             		lea	(Sonic_Miles_Spr).l,a2 ; sonic/miles background load	
000BEAEA 6100 0000                  		bsr.w	Dynamic_Menu		
000BEAEE 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
000BEAF4                            
000BEAF4 6600                       		bne.s	OptionScreen_Select		; if yes, branch
000BEAF6 60CE                       		bra.s	OptionScreen_Main
000BEAF8                            ; ===========================================================================
000BEAF8                            ; loc_909A:
000BEAF8                            OptionScreen_Select:
000BEAF8 1038 FF8C                  		move.b	(Options_menu_box).w,d0
000BEAFC 6600                       		bne.s	OptionScreen_Select_Not1P
000BEAFE                            		
000BEAFE 13FC 0001 00A1 30F1        		move.b	#1,($A130F1).l			; enable SRAM
000BEB06 43F9 0020 0001             		lea		($200001).l,a1			; base of SRAM
000BEB0C                            		
000BEB0C 1378 FFBF 0001             		move.b	($FFFFFFBF).w, $1(a1)	; save sonic palette
000BEB12 1378 FF8B 0003             		move.b	($FFFFFF8B).w, $3(a1)	; save camera type
000BEB18 13FC 0000 00A1 30F1        		move.b	#0, ($A130F1).l			; disable SRAM
000BEB20                            
000BEB20 7000                       		moveq	#0,d0
000BEB22 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; => SegaScreen
000BEB28 4E75                       		rts
000BEB2A                            ; ===========================================================================
000BEB2A                            ; loc_90B6:
000BEB2A                            OptionScreen_Select_Not1P:
000BEB2A 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; => SegaScreen
000BEB30 4E75                       		rts
000BEB32                            ; ===========================================================================
000BEB32                            
000BEB32                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000BEB32                            
000BEB32                            ;sub_90E0:
000BEB32                            OptionScreen_Controls:
000BEB32 7400                       		moveq	#0,d2
000BEB34 1438 FF8C                  		move.b	(Options_menu_box).w,d2			
000BEB38 1038 F605                  		move.b	(v_jpadpress1).w,d0		; Ctrl_1_Press
000BEB3C 0800 0000                  		btst	#0,d0			; is up pressed?
000BEB40 6700                       		beq.s	Option_Controls_Down	; if not, branch
000BEB42 5302                       		subq.b	#1,d2					; move up 1 selection
000BEB44 6400                       		bcc.s	Option_Controls_Down
000BEB46 143C 0001                  		move.b	#1,d2
000BEB4A                            
000BEB4A                            Option_Controls_Down:
000BEB4A 0800 0001                  		btst	#1,d0			; is down pressed?
000BEB4E 6700                       		beq.s	Option_Controls_Refresh	; if not, branch
000BEB50 5202                       		addq.b	#1,d2					; move down 1 selection
000BEB52 0C02 0002                  		cmpi.b	#2,d2
000BEB56 6500                       		blo.s	Option_Controls_Refresh
000BEB58 7400                       		moveq	#0,d2
000BEB5A                            
000BEB5A                            Option_Controls_Refresh:
000BEB5A 11C2 FF8C                  		move.b	d2,(Options_menu_box).w
000BEB5E E54A                       		lsl.w	#2,d2
000BEB60 163B 2000                  		move.b	OptionScreen_Choices(pc,d2.w),d3 ; number of choices for the option
000BEB64 227B 2000                  		movea.l	OptionScreen_Choices(pc,d2.w),a1 ; location where the choice is stored (in RAM)
000BEB68 3411                       		move.w	(a1),d2
000BEB6A 0800 0002                  		btst	#2,d0				; is left pressed?
000BEB6E 6700                       		beq.s	Option_Controls_Right		; if not, branch
000BEB70 5302                       		subq.b	#1,d2						; subtract 1 from sound test
000BEB72 6400                       		bcc.s	Option_Controls_Right
000BEB74 1403                       		move.b	d3,d2
000BEB76                            
000BEB76                            Option_Controls_Right:
000BEB76 0800 0003                  		btst	#3,d0			; is right pressed?
000BEB7A 6700                       		beq.s	Option_Controls_Button_A	; if not, branch
000BEB7C 5202                       		addq.b	#1,d2						; add 1 to sound test
000BEB7E B403                       		cmp.b	d3,d2
000BEB80 6300                       		bls.s	Option_Controls_Button_A
000BEB82 7400                       		moveq	#0,d2
000BEB84                            
000BEB84                            Option_Controls_Button_A:
000BEB84 0800 0006                  		btst	#6,d0				; is button A pressed?
000BEB88 6700                       		beq.s	Option_Controls_Refresh2	; if not, branch
000BEB8A 0602 0010                  		addi.b	#$10,d2						; add $10 to sound test
000BEB8E B403                       		cmp.b	d3,d2
000BEB90 6300                       		bls.s	Option_Controls_Refresh2
000BEB92 7400                       		moveq	#0,d2
000BEB94                            
000BEB94                            Option_Controls_Refresh2:
000BEB94 3282                       		move.w	d2,(a1)
000BEB96                            
000BEB96                            Option_Controls_NoMove:
000BEB96 4E75                       		rts
000BEB98                            ; End of function OptionScreen_Controls
000BEB98                            
000BEB98                            ; ===========================================================================
000BEB98                            ; word_917A:
000BEB98                            OptionScreen_Choices:
000BEB98 0AFF FFBE                  		dc.l ($B-1)<<24|($FFFFBE&$FFFFFF)
000BEB9C 01FF FF8A                  		dc.l (2-1)<<24|($FFFF8A&$FFFFFF)
000BEBA0                            		even
000BEBA0                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000BEBA0                            
000BEBA0                            
000BEBA0                            OptionScreen_DrawSelected:
000BEBA0 6100 0000                  		bsr.w	loc_9268
000BEBA4 7200                       		moveq	#0,d1
000BEBA6 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEBAA E749                       		lsl.w	#3,d1
000BEBAC 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000BEBB2 47F3 1000                  		lea	(a3,d1.w),a3
000BEBB6 303C 6000                  		move.w	#$6000,d0
000BEBBA 45F9 FFFF 0030             		lea	($FFFF0030).l,a2
000BEBC0 225B                       		movea.l	(a3)+,a1
000BEBC2 6100 FE68                  		bsr.w	MenuScreenTextToRAM
000BEBC6 45F9 FFFF 00B6             		lea	($FFFF00B6).l,a2
000BEBCC 7200                       		moveq	#0,d1
000BEBCE 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEBD2 E549                       		lsl.w	#2,d1
000BEBD4 43FA FFC2                  		lea	OptionScreen_Choices(pc),a1
000BEBD8 2271 1000                  		movea.l	(a1,d1.w),a1
000BEBDC 3211                       		move.w	(a1),d1
000BEBDE E549                       		lsl.w	#2,d1
000BEBE0                            
000BEBE0                            loc_9186:		
000BEBE0 2274 1000                  		movea.l	(a4,d1.w),a1
000BEBE4 6100 FE46                  		bsr.w	MenuScreenTextToRAM
000BEBE8                            		;cmpi.b	#2,(Options_menu_box).w
000BEBE8                            		;bne.s	loc2_9186
000BEBE8                            		;lea	($FFFF00C2).l,a2
000BEBE8                            		;bsr.w	loc_9296
000BEBE8                            
000BEBE8                            loc2_9186:		
000BEBE8 43F9 00FF 0000             		lea	(v_256x256).l,a1
000BEBEE 201B                       		move.l	(a3)+,d0
000BEBF0 7215                       		moveq	#$15,d1
000BEBF2 7407                       		moveq	#7,d2
000BEBF4 4EF8 1382                  		jmp	TilemapToVRAM
000BEBF8                            ; ===========================================================================
000BEBF8                            
000BEBF8                            OptionScreen_DrawUnselected:
000BEBF8 6100 0000                  		bsr.w	loc_9268
000BEBFC 7200                       		moveq	#0,d1
000BEBFE 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEC02 E749                       		lsl.w	#3,d1
000BEC04 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000BEC0A 47F3 1000                  		lea	(a3,d1.w),a3
000BEC0E 7000                       		moveq	#0,d0
000BEC10 45F9 FFFF 0190             		lea	($FFFF0190).l,a2
000BEC16 225B                       		movea.l	(a3)+,a1
000BEC18 6100 FE12                  		bsr.w	MenuScreenTextToRAM
000BEC1C 45F9 FFFF 0216             		lea	($FFFF0216).l,a2
000BEC22 7200                       		moveq	#0,d1
000BEC24                            		;cmpi.b	#2,(Options_menu_box).w
000BEC24                            		;beq.s	loc2_91F8
000BEC24 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEC28 E549                       		lsl.w	#2,d1
000BEC2A 43FA FF6C                  		lea	OptionScreen_Choices(pc),a1
000BEC2E 2271 1000                  		movea.l	(a1,d1.w),a1
000BEC32 3211                       		move.w	(a1),d1
000BEC34 E549                       		lsl.w	#2,d1
000BEC36                            
000BEC36                            loc2_91F8		
000BEC36 2274 1000                  		movea.l	(a4,d1.w),a1
000BEC3A 6100 FDF0                  		bsr.w	MenuScreenTextToRAM
000BEC3E                            		;cmpi.b	#2,(Options_menu_box).w
000BEC3E                            		;bne.s	loc3_91F8
000BEC3E                            		;lea	($FFFF0222).l,a2
000BEC3E                            		;bsr.w	loc_9296
000BEC3E                            
000BEC3E                            loc3_91F8		
000BEC3E 43F9 FFFF 0160             		lea	($FFFF0160).l,a1
000BEC44 201B                       		move.l	(a3)+,d0
000BEC46 7215                       		moveq	#$15,d1
000BEC48 7407                       		moveq	#7,d2
000BEC4A 4EF8 1382                  		jmp	TilemapToVRAM
000BEC4E                            ; ===========================================================================
000BEC4E                            
000BEC4E                            loc_9268:
000BEC4E 49F9 0000 0000             		lea	(off_92D2).l,a4
000BEC54 4A38 FFF8                  		tst.b	(v_megadrive).w
000BEC58 6A00                       		bpl.s	loc2_9268
000BEC5A 49F9 0000 0000             		lea	(off_92DE).l,a4
000BEC60                            
000BEC60                            loc2_9268:
000BEC60 4A38 FF8C                  		tst.b	(Options_menu_box).w
000BEC64 6700                       		beq.s	loc4_9268
000BEC66 49F9 0000 0000             		lea	(off_92EA).l,a4
000BEC6C                            
000BEC6C                            loc4_9268:
000BEC6C 4E75                       		rts
000BEC6E                            ; ===========================================================================
000BEC6E                            
000BEC6E                            loc_9296:
000BEC6E 4E75                       		rts
000BEC70                            
000BEC70                            Dynamic_Menu:
000BEC70 5338 F5B9                                  subq.b  #$01, ($FFFFF5B9).w          ; remove 1 from frame count
000BEC74 6A00                                       bpl.s   Exit_Dinamic_Menu            ; exit menu
000BEC76 11FC 0007 F5B9                             move.b  #$07, ($FFFFF5B9).w          ; Set time for frame display
000BEC7C 1038 F5B8                                  move.b  ($FFFFF5B8).w, D0            ; Current Frame D0
000BEC80 5238 F5B8                                  addq.b  #$01, ($FFFFF5B8).w          ; Advance frame $FFFFFFB8
000BEC84 0240 001F                                  andi.w  #$001F, D0
000BEC88 103B 0000                                  move.b  Sonic_Miles_Frame_Select(PC, D0), D0  ; Id frame D0
000BEC8C                                          ; muls.w  #$0140, D0                   ; as above
000BEC8C ED48                                       lsl.w   #$06, D0
000BEC8E 4DF9 00C0 0000                             lea     ($00C00000), A6
000BEC94 2D7C 4020 0000 0004                        move.l  #$40200000, $0004(A6)
000BEC9C 43F9 0000 0000                             lea     (Sonic_Miles_Spr), A1
000BECA2 43F1 0000                                  lea     $00(A1, D0), A1
000BECA6 303C 0009                                  move.w  #$0009, D0                   ; load tiles
000BECAA                                            
000BECAA                            Menu_Loop_Load_Tiles:
000BECAA 2C99                                       move.l  (A1)+, (A6)
000BECAC 2C99                                       move.l  (A1)+, (A6)     
000BECAE 2C99                                       move.l  (A1)+, (A6)     
000BECB0 2C99                                       move.l  (A1)+, (A6)     
000BECB2 2C99                                       move.l  (A1)+, (A6)     
000BECB4 2C99                                       move.l  (A1)+, (A6)
000BECB6 2C99                                       move.l  (A1)+, (A6)
000BECB8 2C99                                       move.l  (A1)+, (A6)
000BECBA 51C8 FFEE                                  dbra    D0, Menu_Loop_Load_Tiles
000BECBE                            Exit_Dinamic_Menu:                
000BECBE                                           
000BECBE 4E75                                       rts      
000BECC0                                                    
000BECC0                            Sonic_Miles_Frame_Select:     
000BECC0 0000 0000 0000 0000 0000+                  dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
000BECCE 050A                                       dc.b    $05, $0A
000BECD0 0F0F 0F0F 0F0F 0F0F 0F0F+                  dc.b    $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F
000BECDE 0A05                                       dc.b    $0A, $05   
000BECE0                            ; ===========================================================================
000BECE0                            ; off_92BA:
000BECE0                            OptScrBoxData:
000BECE0                            
000BECE0 0000 0000                  		dc.l TextOptScr_PlayerSelect
000BECE4 4192                       		dc.w $4192
000BECE6 0003                       		dc.w 3
000BECE8 0000 0000                  		dc.l TextOptScr_LivesSystem
000BECEC 4592                       		dc.w $4592
000BECEE 0003                       		dc.w 3
000BECF0                            
000BECF0                            off_92D2:
000BECF0 0000 0000                  		dc.l TextOptScr_Default
000BECF4 0000 0000                  		dc.l TextOptScr_Original
000BECF8 0000 0000                  		dc.l TextOptScr_Beta
000BECFC 0000 0000                  		dc.l TextOptScr_Midnight
000BED00 0000 0000                  		dc.l TextOptScr_C2
000BED04 0000 0000                  		dc.l TextOptScr_Clackers
000BED08 0000 0000                  		dc.l TextOptScr_RHS
000BED0C 0000 0000                  		dc.l TextOptScr_Socket
000BED10 0000 0000                  		dc.l TextOptScr_Cringe
000BED14 0000 0000                  		dc.l TextOptScr_Dark	
000BED18 0000 0000                  		dc.l TextOptScr_DeltaWooloo			
000BED1C                            off_92DE:
000BED1C 0000 0000                  		dc.l TextOptScr_Default
000BED20 0000 0000                  		dc.l TextOptScr_Original
000BED24 0000 0000                  		dc.l TextOptScr_Beta
000BED28 0000 0000                  		dc.l TextOptScr_Midnight
000BED2C 0000 0000                  		dc.l TextOptScr_C2
000BED30 0000 0000                  		dc.l TextOptScr_Clackers
000BED34 0000 0000                  		dc.l TextOptScr_RHS
000BED38 0000 0000                  		dc.l TextOptScr_Socket
000BED3C 0000 0000                  		dc.l TextOptScr_Cringe
000BED40 0000 0000                  		dc.l TextOptScr_Dark
000BED44 0000 0000                  		dc.l TextOptScr_DeltaWooloo		
000BED48                            off_92EA:
000BED48 0000 0000                  		dc.l TextOptScr_On
000BED4C 0000 0000                  		dc.l TextOptScr_Off
000BED50                            ; ===========================================================================
000BED50                            
000BEE48                            ; ============================================================================
000BEE48                            		even
000BEE48                            Sonic_Miles_Spr:	incbin  "artunc/Sonic and Miles text.bin"
000BF348                            		even
000BF348                            Eni_MenuBg:    incbin    "tilemaps/menubgeni.bin"
000BF4F8                            		even
000BF4F8                            Nem_MenuFont:    incbin    "artnem/Standard font.bin"
000BFA62                            		even
000BFA62                            Nem_MenuBox:    incbin   "artnem/Menu Box.bin"
000BFAE2                            		even
000BFAE2                            Eni_MenuBox:    incbin    "tilemaps/menuboxeni.bin"
000BFB0E                            		even
000BFB0E                            		even
000BFB0E                            
000BFB0E                            SHC2022:    incbin "SHC22_Full_Sonic12.bin"
0013D392                                        even
0013D392                            
0013D392                            Art_Dust:	incbin	artunc\spindust.bin
0013ECD2                            
0013ECD2                            ; ===============================================================
0013ECD2                            ; ==============================================================
0013ECD2                            ; --------------------------------------------------------------
0013ECD2                            ; Debugging modules
0013ECD2                            ; --------------------------------------------------------------
0013ECD2                            
0013ECD2                               include   "ErrorHandler.asm"
0013ECD2                            
0013ECD2                            ; ===============================================================
0013ECD2                            ; ---------------------------------------------------------------
0013ECD2                            ; Error handling and debugging modules
0013ECD2                            ; 2016-2017, Vladikcomper
0013ECD2                            ; ---------------------------------------------------------------
0013ECD2                            ; Error handler functions and calls
0013ECD2                            ; ---------------------------------------------------------------
0013ECD2                            
0013ECD2                            ; ---------------------------------------------------------------
0013ECD2                            ; Error handler control flags
0013ECD2                            ; ---------------------------------------------------------------
0013ECD2                            
0013ECD2                            ; Screen appearence flags
0013ECD2 =00000001                  _eh_address_error	equ	$01		; use for address and bus errors only (tells error handler to display additional "Address" field)
0013ECD2 =00000002                  _eh_show_sr_usp		equ	$02		; displays SR and USP registers content on error screen
0013ECD2 =00000010                  _eh_disassemble		equ	$10		; disassembles the instruction where the error happened + vint and hint handlers
0013ECD2                            
0013ECD2                            ; Advanced execution flags
0013ECD2                            ; WARNING! For experts only, DO NOT USES them unless you know what you're doing
0013ECD2 =00000020                  _eh_return		equ	$20
0013ECD2 =00000040                  _eh_enter_console	equ	$40
0013ECD2 =00000080                  _eh_align_offset	equ	$80
0013ECD2                            
0013ECD2                            ; ---------------------------------------------------------------
0013ECD2                            ; Errors vector table
0013ECD2                            ; ---------------------------------------------------------------
0013ECD2                            
0013ECD2                            ; Default screen configuration
0013ECD2 =00000000                  _eh_default			equ	0 ;_eh_show_sr_usp
0013ECD2                            
0013ECD2                            ; ---------------------------------------------------------------
0013ECD2                            
0013ECD2                            BusError:
0013ECD2 4EB9 0000 0000 4255 5320+  	__ErrorMessage "BUS ERROR", _eh_default|_eh_address_error|_eh_disassemble
0013ECE4                            
0013ECE4                            AddressError:
0013ECE4 4EB9 0000 0000 4144 4452+  	__ErrorMessage "ADDRESS ERROR", _eh_default|_eh_address_error|_eh_disassemble
0013ECFA                            
0013ECFA                            IllegalInstr:
0013ECFA 4EB9 0000 0000 494C 4C45+  	__ErrorMessage "ILLEGAL INSTRUCTION", _eh_default|_eh_disassemble
0013ED16                            
0013ED16                            ZeroDivide:
0013ED16 4EB9 0000 0000 5A45 524F+  	__ErrorMessage "ZERO DIVIDE", _eh_default|_eh_disassemble
0013ED2A                            
0013ED2A                            ChkInstr:
0013ED2A 4EB9 0000 0000 4348 4B20+  	__ErrorMessage "CHK INSTRUCTION", _eh_default|_eh_disassemble
0013ED42                            
0013ED42                            TrapvInstr:
0013ED42 4EB9 0000 0000 5452 4150+  	__ErrorMessage "TRAPV INSTRUCTION", _eh_default|_eh_disassemble
0013ED5C                            
0013ED5C                            PrivilegeViol:
0013ED5C 4EB9 0000 0000 5052 4956+  	__ErrorMessage "PRIVILEGE VIOLATION", _eh_default|_eh_disassemble
0013ED78                            
0013ED78                            Trace:
0013ED78 4EB9 0000 0000 5452 4143+  	__ErrorMessage "TRACE", _eh_default|_eh_disassemble
0013ED86                            
0013ED86                            Line1010Emu:
0013ED86 4EB9 0000 0000 4C49 4E45+  	__ErrorMessage "LINE A EMULATOR", _eh_default|_eh_disassemble
0013ED9E                            
0013ED9E                            Line1111Emu:
0013ED9E 4EB9 0000 0000 4C49 4E45+  	__ErrorMessage "LINE F EMULATOR", _eh_default|_eh_disassemble
0013EDB6                            
0013EDB6                            ErrorExcept:
0013EDB6 4EB9 0000 0000 4552 524F+  	__ErrorMessage "ERROR EXCEPTION", _eh_default|_eh_disassemble
0013EDCE                            
0013EDCE                            ; ---------------------------------------------------------------
0013EDCE                            ; Import error handler global functions
0013EDCE                            ; ---------------------------------------------------------------
0013EDCE                            
0013EDCE                            ErrorHandler.__global__error_initconsole equ ErrorHandler+$158
0013EDCE                            ErrorHandler.__global__errorhandler_setupvdp equ ErrorHandler+$25C
0013EDCE                            ErrorHandler.__global__console_loadpalette equ ErrorHandler+$AE2
0013EDCE                            ErrorHandler.__global__console_setposasxy_stack equ ErrorHandler+$B1E
0013EDCE                            ErrorHandler.__global__console_setposasxy equ ErrorHandler+$B24
0013EDCE                            ErrorHandler.__global__console_getposasxy equ ErrorHandler+$B50
0013EDCE                            ErrorHandler.__global__console_startnewline equ ErrorHandler+$B72
0013EDCE                            ErrorHandler.__global__console_setbasepattern equ ErrorHandler+$B9A
0013EDCE                            ErrorHandler.__global__console_setwidth equ ErrorHandler+$BAE
0013EDCE                            ErrorHandler.__global__console_writeline_withpattern equ ErrorHandler+$BC4
0013EDCE                            ErrorHandler.__global__console_writeline equ ErrorHandler+$BC6
0013EDCE                            ErrorHandler.__global__console_write equ ErrorHandler+$BCA
0013EDCE                            ErrorHandler.__global__console_writeline_formatted equ ErrorHandler+$C76
0013EDCE                            ErrorHandler.__global__console_write_formatted equ ErrorHandler+$C7A
0013EDCE                            ErrorHandler.__global__decode68k equ ErrorHandler+$CE6
0013EDCE                            
0013EDCE                            ; ---------------------------------------------------------------
0013EDCE                            ; Error handler external functions (compiled only when used)
0013EDCE                            ; ---------------------------------------------------------------
0013EDCE                            
0013EDCE                            
0013EDCE                            
0013EDCE                            
0013EDCE                            
0013EDCE                            ; ---------------------------------------------------------------
0013EDCE                            ; Include error handler binary module
0013EDCE                            ; ---------------------------------------------------------------
0013EDCE                            
0013EDCE                            ErrorHandler:
0013EDCE                            	incbin	ErrorHandler.bin
001407E2                            
001407E2                            ; ---------------------------------------------------------------
001407E2                            ; WARNING!
001407E2                            ;	DO NOT put any data from now on! DO NOT use ROM padding!
001407E2                            ;	Symbol data should be appended here after ROM is compiled
001407E2                            ;	by ConvSym utility, otherwise debugger modules won't be able
001407E2                            ;	to resolve symbol names.
001407E2                            ; ---------------------------------------------------------------
001407E2                            ; ---------------------------------------------------------------
001407E2                            
001407E2                            ; end of 'ROM'
001407E2                            		even
001407E2                            EndOfRom:
001407E2                            
001407E2                            
